/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/snowflake-sdk";
exports.ids = ["vendor-chunks/snowflake-sdk"];
exports.modules = {

/***/ "(rsc)/./node_modules/snowflake-sdk/index.js":
/*!*********************************************!*\
  !*** ./node_modules/snowflake-sdk/index.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! ./lib/snowflake */ \"(rsc)/./node_modules/snowflake-sdk/lib/snowflake.js\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxrSEFBMkMiLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWN0b3J3aWxzb24vRGVza3RvcC9wcm9qZWN0cy9FWlZpei9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL3Nub3dmbGFrZScpOyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/lib/agent/cert_util.js":
/*!***********************************************************!*\
  !*** ./node_modules/snowflake-sdk/lib/agent/cert_util.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("/*\n * This software is licensed under the MIT License.\n *\n * Copyright Fedor Indutny, 2015.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nconst process = __webpack_require__(/*! process */ \"process\");\nconst ocsp = __webpack_require__(/*! @techteamer/ocsp */ \"(rsc)/./node_modules/@techteamer/ocsp/lib/ocsp.js\");\nconst rfc2560 = __webpack_require__(/*! asn1.js-rfc2560 */ \"(rsc)/./node_modules/asn1.js-rfc2560/index.js\");\nconst rfc5280 = __webpack_require__(/*! asn1.js-rfc5280 */ \"(rsc)/./node_modules/asn1.js-rfc5280/index.js\");\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst bn = __webpack_require__(/*! bn.js */ \"(rsc)/./node_modules/bn.js/lib/bn.js\");\nconst Errors = __webpack_require__(/*! ../errors */ \"(rsc)/./node_modules/snowflake-sdk/lib/errors.js\");\nconst ErrorCodes = Errors.codes;\n\n\nconst TOLERABLE_VALIDITY_RANGE_RATIO = 0.01;\nconst MAX_CLOCK_SKEW_IN_MILLISECONDS = 900000;\nconst MIN_CACHE_WARMUP_TIME_IN_MILLISECONDS = 18000000;\n\n/**\n * Builds the certificate id for a given certificate.\n *\n * @param cert\n * @returns {*}\n */\nexports.buildCertId = function (cert) {\n  let issuer = cert.issuerCertificate;\n  cert = cert.raw;\n\n  try {\n    cert = rfc5280.Certificate.decode(cert, 'der');\n    if (issuer) {\n      issuer = issuer.raw;\n      issuer = rfc5280.Certificate.decode(issuer, 'der');\n    }\n  } catch (e) {\n    return null; // if we encountered an error during decoding, return null\n  }\n\n  const tbsCert = cert.tbsCertificate;\n  const tbsIssuer = issuer.tbsCertificate;\n\n  const certID = {\n    hashAlgorithm: {\n      // algorithm: [ 2, 16, 840, 1, 101, 3, 4, 2, 1 ]  // sha256\n      algorithm: [1, 3, 14, 3, 2, 26]  // sha1\n    },\n    issuerNameHash: sha1(rfc5280.Name.encode(tbsCert.issuer, 'der')),\n    issuerKeyHash: sha1(\n      tbsIssuer.subjectPublicKeyInfo.subjectPublicKey.data),\n    serialNumber: tbsCert.serialNumber\n  };\n  const certIDDer = rfc2560.CertID.encode(certID, 'der');\n  return encodeKey(certIDDer.toString('BASE64'));\n};\n\nfunction sha1(data) {\n  return crypto.createHash('sha1').update(data).digest();\n}\n\n/**\n * Parses a certificate and returns an object that contains decoded versions\n * of the certificate and its issuer.\n *\n * Note: this method might throw an error, so use a try-catch when calling it.\n *\n * @param cert\n * @returns {{cert: *, issuer: *}}\n */\nexports.decode = function (cert) {\n  let issuer = cert.issuerCertificate;\n  cert = cert.raw;\n\n  // note: this block might throw an error\n  cert = rfc5280.Certificate.decode(cert, 'der');\n  if (issuer) {\n    issuer = issuer.raw;\n    issuer = rfc5280.Certificate.decode(issuer, 'der');\n  }\n\n  return {\n    cert: cert,\n    issuer: issuer\n  };\n};\n\n/**\n * Encode certID to a cache key\n * @param base64Key {Object}\n * @return cache key {string}\n */\nconst encodeKey = function (base64Key) {\n  const buff = Buffer.from(base64Key, 'base64');\n  const certID = rfc2560.CertID.decode(buff, 'der');\n\n  return certID.issuerNameHash.toString('BASE64')\n    + '#' + certID.issuerKeyHash.toString('BASE64')\n    + '#' + certID.serialNumber.toString(10);\n};\nexports.encodeKey = encodeKey;\n\n/**\n * Encode certID to a cache key\n * @param cacheKey {Object}\n */\nconst decodeKey = function (cacheKey) {\n  // serialNumber.eq(certID.serialNumber)\n  const keys = cacheKey.split('#');\n  const issuerNameHash = Buffer.from(keys[0], 'base64');\n  const issuerKeyHash = Buffer.from(keys[1], 'base64');\n  const serialNumber = new bn(keys[2], 10);\n\n  const certID = {\n    hashAlgorithm: {\n      // algorithm: [ 2, 16, 840, 1, 101, 3, 4, 2, 1 ]  // sha256\n      algorithm: [1, 3, 14, 3, 2, 26]  // sha1\n    },\n    issuerNameHash: issuerNameHash,\n    issuerKeyHash: issuerKeyHash,\n    serialNumber: serialNumber\n  };\n\n  const certIDDer = rfc2560.CertID.encode(certID, 'der');\n  return certIDDer.toString('BASE64');\n};\nexports.decodeKey = decodeKey;\n\n/**\n * Calculates Tolerable validity\n * @param thisUpdate last update\n * @param nextUpdate next update\n * @returns {number}\n */\nconst calculateTolerableVadility = function (thisUpdate, nextUpdate) {\n  const currentRange = (nextUpdate - thisUpdate) *\n    TOLERABLE_VALIDITY_RANGE_RATIO;\n  return currentRange > MIN_CACHE_WARMUP_TIME_IN_MILLISECONDS ?\n    currentRange : MIN_CACHE_WARMUP_TIME_IN_MILLISECONDS;\n};\n\n/**\n * Checks the validity\n * @param currentTime current time\n * @param thisUpdate last update\n * @param nextUpdate next update\n * @return {boolean}\n */\nconst isValidityRange = function (currentTime, thisUpdate, nextUpdate) {\n  const tolerableValidity = calculateTolerableVadility(thisUpdate, nextUpdate);\n  return thisUpdate - MAX_CLOCK_SKEW_IN_MILLISECONDS <= currentTime &&\n    currentTime <= nextUpdate + tolerableValidity;\n};\nexports.isValidityRange = isValidityRange;\n\n/**\n * Converts a epoch time in milliseconds to a UTC datetime string\n * @param epochInMilliSeconds\n * @returns {Date}\n */\nconst toUTCString = function (epochInMilliSeconds) {\n  return new Date(epochInMilliSeconds);\n};\n\n/**\n * Return issuer certificate or signing certificate\n * @param issuer issuer certificate\n * @param certs\n * @param raws\n */\nconst findResponder = function (issuer, certs, raws) {\n  let issuerKey = issuer.tbsCertificate.subjectPublicKeyInfo;\n  issuerKey = ocsp.utils.toPEM(\n    rfc5280.SubjectPublicKeyInfo.encode(issuerKey, 'der'), 'PUBLIC KEY');\n  if (certs.length > 0) {\n    const currentTime = Date.now();\n    const cert = certs[0];\n    const certValidity = cert.tbsCertificate.validity;\n    if (certValidity.notAfter.value < currentTime || certValidity.notBefore.value > currentTime) {\n      return {\n        err: Errors.createOCSPError(\n          ErrorCodes.ERR_OCSP_INVALID_CERTIFICATE_VALIDITY,\n          'Valid from:', toUTCString(certValidity.notBefore.value),\n          ', Valid to:', toUTCString(certValidity.notAfter.value)),\n        responderKey: null\n      };\n    }\n    const signAlg = ocsp.utils.sign[cert.signatureAlgorithm.algorithm.join('.')];\n    if (!signAlg) {\n      return {\n        err: Errors.createOCSPError(ErrorCodes.ERR_OCSP_NO_SIGNATURE_ALGORITHM),\n        responderKey: null\n      };\n    }\n\n    const verify = crypto.createVerify(signAlg);\n\n    verify.update(raws[0]);\n    if (!verify.verify(issuerKey, cert.signature.data)) {\n      return {\n        err: Errors.createOCSPError(ErrorCodes.ERR_OCSP_INVALID_SIGNATURE),\n        responderKey: null\n      };\n    }\n\n    let certKey = cert.tbsCertificate.subjectPublicKeyInfo;\n    certKey = ocsp.utils.toPEM(\n      rfc5280.SubjectPublicKeyInfo.encode(certKey, 'der'), 'PUBLIC KEY');\n    return { err: null, responderKey: certKey };\n  }\n\n  return { err: null, responderKey: issuerKey };\n};\n\n/**\n * Verify OCSP response. If issuer is not specified, the signature will not be\n * verified.\n * @param issuer issuer certificate\n * @param rawRes OCSP Response\n * @returns {{success, error, revoked}|{res, success, error}}\n */\nconst verifyOCSPResponse = function (issuer, rawRes) {\n  function done(err) {\n    return {\n      err: err,\n      res: rawRes\n    };\n  }\n\n  let res;\n  try {\n    res = ocsp.utils.parseResponse(rawRes);\n  } catch (e) {\n    return done(e);\n  }\n  const value = res.value;\n  if (issuer) {\n    // verify signature only if issuer is given\n    const certs = res.certs;\n    const rawTBS = rawRes.slice(res.start, res.end);\n    const raws = res.certsTbs.map(function (tbs) {\n      return rawRes.slice(tbs.start, tbs.end);\n    });\n    const signAlg = ocsp.utils.sign[value.signatureAlgorithm.algorithm.join('.')];\n    if (!signAlg) {\n      return done(Errors.createOCSPError(ErrorCodes.ERR_OCSP_NO_SIGNATURE_ALGORITHM));\n    }\n    const responderStatus = findResponder(issuer, certs, raws);\n    if (responderStatus.err) {\n      return done(responderStatus.err);\n    }\n    const responderKey = responderStatus.responderKey;\n    const v = crypto.createVerify(signAlg);\n    const signature = value.signature.data;\n    v.update(rawTBS);\n    if (!v.verify(responderKey, signature)) {\n      return done(Errors.createOCSPError(ErrorCodes.ERR_OCSP_INVALID_SIGNATURE));\n    }\n  }\n  const tbs = value.tbsResponseData;\n  if (tbs.responses.length < 1) {\n    return done(Errors.createOCSPError(ErrorCodes.ERR_OCSP_NO_RESPONSE));\n  }\n  const sd = tbs.responses[0];\n  if (sd.certStatus.type === 'revoked') {\n    return done(Errors.createOCSPError(ErrorCodes.ERR_OCSP_REVOKED));\n  }\n  const currentTime = Date.now();\n  const isInjectValidity = process.env.SF_OCSP_TEST_INJECT_VALIDITY_ERROR || '';\n  if (isInjectValidity.toLowerCase() === 'true' || !isValidityRange(currentTime, sd.thisUpdate, sd.nextUpdate)) {\n    return done(Errors.createOCSPError(\n      ErrorCodes.ERR_OCSP_INVALID_VALIDITY,\n      'Valid from:', toUTCString(sd.thisUpdate), ', Valid to:', toUTCString(sd.nextUpdate)));\n  }\n  const isInjectUnknown = process.env.SF_OCSP_TEST_INJECT_UNKNOWN_STATUS || '';\n  if (isInjectUnknown.toLowerCase() === 'true' || sd.certStatus.type === 'unknown') {\n    return done(Errors.createOCSPError(ErrorCodes.ERR_OCSP_UNKNOWN));\n  }\n  if (sd.certStatus.type === 'good') {\n    return done(null);\n  }\n  return done(Errors.createOCSPError(ErrorCodes.ERR_OCSP_UNKNOWN_STATE));\n};\nexports.verifyOCSPResponse = verifyOCSPResponse;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/lib/agent/cert_util.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/lib/agent/check.js":
/*!*******************************************************!*\
  !*** ./node_modules/snowflake-sdk/lib/agent/check.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*\n * This software is licensed under the MIT License.\n *\n * Copyright Fedor Indutny, 2015.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nconst http = __webpack_require__(/*! http */ \"http\");\nconst url = __webpack_require__(/*! url */ \"url\");\nconst util = __webpack_require__(/*! util */ \"util\");\n\nconst ocsp = __webpack_require__(/*! @techteamer/ocsp */ \"(rsc)/./node_modules/@techteamer/ocsp/lib/ocsp.js\");\nconst rfc2560 = __webpack_require__(/*! asn1.js-rfc2560 */ \"(rsc)/./node_modules/asn1.js-rfc2560/index.js\");\n\nconst SnowflakeUtil = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/snowflake-sdk/lib/util.js\");\nconst CertUtil = __webpack_require__(/*! ./cert_util */ \"(rsc)/./node_modules/snowflake-sdk/lib/agent/cert_util.js\");\nconst GlobalConfig = __webpack_require__(/*! ../global_config */ \"(rsc)/./node_modules/snowflake-sdk/lib/global_config.js\");\nconst Errors = __webpack_require__(/*! ../errors */ \"(rsc)/./node_modules/snowflake-sdk/lib/errors.js\");\nconst ErrorCodes = Errors.codes;\n\nconst Logger = __webpack_require__(/*! ../logger */ \"(rsc)/./node_modules/snowflake-sdk/lib/logger.js\");\n\n/**\n * OCSP specific HTTP retryable errors\n * @param statusCode\n * @returns {boolean}\n */\nconst isRetryableHttpError = function (statusCode) {\n  return (statusCode >= 500 && statusCode < 600) ||\n    statusCode === 404 || statusCode === 403 || statusCode === 408;\n};\n\nfunction getResponse(uri, req, cb) {\n  uri = url.parse(uri);\n\n  const timeout = process.env.SF_OCSP_TEST_OCSP_RESPONDER_TIMEOUT || 10000;\n  const options = util._extend({\n    timeout: Number(timeout),\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/ocsp-request',\n      'Content-Length': req.length,\n    }\n  }, uri);\n\n  function done(err, response) {\n    if (cb) {\n      cb(err, response);\n    }\n    cb = null;\n  }\n\n  function onResponse(response) {\n    if (response.statusCode < 200 || response.statusCode >= 400) {\n      return done(\n        Errors.createOCSPError(ErrorCodes.ERR_OCSP_FAILED_OBTAIN_OCSP_RESPONSE,\n          response.statusCode), response);\n    }\n\n    const chunks = [];\n    response.on('readable', function () {\n      const chunk = response.read();\n      if (!chunk) {\n        return;\n      }\n      chunks.push(chunk);\n    });\n    response.on('end', function () {\n      Logger.getInstance().debug('Finish OCSP responder: %s', uri.host);\n      const ocsp = Buffer.concat(chunks);\n      done(null, ocsp);\n    });\n  }\n\n  const httpRequest = http.request(options, onResponse);\n  httpRequest.on('error', function (e) {\n    if (cb) {\n      cb(e);\n    }\n    cb = null;\n  });\n  httpRequest.on('timeout', function () {\n    httpRequest.abort();\n    Logger.getInstance().debug('Timeout OCSP responder: %s', uri.host);\n    if (cb) {\n      cb(Errors.createOCSPError(ErrorCodes.ERR_OCSP_RESPONDER_TIMEOUT));\n    }\n    cb = null;\n  });\n  httpRequest.end(req);\n}\n\nmodule.exports = function check(options, cb, mock) {\n  let sync = true;\n  const isFailClosed = GlobalConfig.getOcspMode() === GlobalConfig.ocspModes.FAIL_CLOSED;\n  const maxNumRetries = isFailClosed ? 2 : 1;\n\n  function done(err, data) {\n    if (sync) {\n      sync = false;\n      process.nextTick(function () {\n        cb(err, data);\n      });\n      return;\n    }\n\n    cb(err, data);\n  }\n\n  let req;\n  try {\n    req = mock ? mock.req : ocsp.request.generate(options.cert, options.issuer);\n  } catch (e) {\n    return done(e);\n  }\n\n  const ocspMethod = rfc2560['id-pkix-ocsp'].join('.');\n\n  let numRetries = 1;\n  let sleep = 1;\n\n  function ocspResponseVerify(err, raw) {\n    let retry = false;\n    if (err) {\n      if (Object.prototype.hasOwnProperty.call(err, 'code') && err.code === ErrorCodes.ERR_OCSP_RESPONDER_TIMEOUT) {\n        retry = true;\n      } else if (Object.prototype.hasOwnProperty.call(err, 'message')) {\n        const errorMessage = err.message.split(' ');\n        if (errorMessage.length === 0) {\n          return done(err);\n        }\n        try {\n          const statusCode = parseInt(errorMessage[errorMessage.length - 1], 10);\n          retry = isRetryableHttpError(statusCode);\n        } catch (e) {\n          // ignore\n        }\n      }\n      if (numRetries < maxNumRetries && retry) {\n        numRetries++;\n        sleep = SnowflakeUtil.nextSleepTime(1, 10, sleep);\n        setTimeout(ocspRequestSend, sleep * 1000);\n      } else {\n        Logger.getInstance().debug('Failed to all retries to OCSP responder.');\n        return done(err);\n      }\n    } else {\n      const status = CertUtil.verifyOCSPResponse(req.issuer, raw);\n      done(status.err, status);\n    }\n  }\n\n  function setOcspResponderUrl(uri) {\n    let parsedUrl = (__webpack_require__(/*! url */ \"url\").parse)(process.env.SF_OCSP_RESPONSE_CACHE_SERVER_URL);\n\n    let targetUrl;\n    if (parsedUrl.port) {\n      targetUrl = `${parsedUrl.protocol}//${parsedUrl.hostname}:${parsedUrl.port}/retry`;\n    } else {\n      targetUrl = `${parsedUrl.protocol}//${parsedUrl.hostname}/retry`;\n    }\n\n    const b64data = req.data.toString('base64');\n    parsedUrl = (__webpack_require__(/*! url */ \"url\").parse)(uri);\n\n    process.env.SF_OCSP_RESPONDER_URL = targetUrl + '/' + parsedUrl.hostname + '/' + b64data;\n  }\n\n  function ocspRequestCallback(err, uri) {\n    if (err) {\n      //This error message is from @techteamer/ocsp (ocsp.utils.getAuthorityInfo)\n      if (err.message === 'AuthorityInfoAccess not found in extensions') {\n        if (!isFailClosed) {\n          Logger.getInstance().debug('OCSP Responder URL is missing from the certificate.');\n          return done(null);\n        } else {\n          Logger.getInstance().error('OCSP Responder URL is missing from the certificate, so cannot verify with OCSP. Aborting connection attempt due to OCSP being set to FAIL_CLOSE https://docs.snowflake.com/en/user-guide/ocsp#fail-close');\n        }\n      }\n      return done(err);\n    }\n\n    if (process.env.SF_OCSP_RESPONSE_CACHE_SERVER_URL &&\n      process.env.SF_OCSP_RESPONSE_CACHE_SERVER_URL.includes('ocsp_response_cache.json')) {\n      setOcspResponderUrl(uri);\n    }\n\n    const responderUrl = process.env.SF_OCSP_RESPONDER_URL;\n    if (responderUrl) {\n      uri = responderUrl;\n    }\n    Logger.getInstance().trace(\n      'Contact OCSP responder: %s, (%s/%s)', uri, numRetries, maxNumRetries);\n\n    if (!mock) {\n      getResponse(uri, req.data, ocspResponseVerify);\n    }\n  }\n\n  function ocspRequestSend() {\n    if (!mock) {\n      ocsp.utils.getAuthorityInfo(req.cert, ocspMethod, ocspRequestCallback);\n    } else {\n      ocspRequestCallback(null, mock.uri);\n    }\n  }\n\n  ocspRequestSend();\n\n  sync = false;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/lib/agent/check.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/lib/agent/https_ocsp_agent.js":
/*!******************************************************************!*\
  !*** ./node_modules/snowflake-sdk/lib/agent/https_ocsp_agent.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const HttpsAgent = (__webpack_require__(/*! https */ \"https\").Agent);\nconst SocketUtil = __webpack_require__(/*! ./socket_util */ \"(rsc)/./node_modules/snowflake-sdk/lib/agent/socket_util.js\");\n\n/**\n * Creates a new HttpsOcspAgent.\n *\n * @param {Object} options\n *\n * @returns {HttpsOcspAgent}\n * @constructor\n */\nfunction HttpsOcspAgent(options) {\n  const agent = HttpsAgent.apply(this, [options]);\n  agent.createConnection = function (port, host, options) {\n    // make sure the 'options' variables references the argument that actually\n    // contains the options\n    // Note: look at the Node.js https agent to understand why this code is\n    // written this way\n    if (port !== null && typeof port === 'object') {\n      options = port;\n    } else if (host !== null && typeof host === 'object') {\n      options = host;\n    } else if (options === null || typeof options !== 'object') {\n      options = {};\n    }\n\n    if (typeof host !== 'string') {\n      host = options.host;\n    }\n\n    // call super\n    const socket = HttpsAgent.prototype.createConnection.apply(this, arguments);\n\n    // secure the socket and return it\n    return SocketUtil.secureSocket(socket, host, null);\n  };\n\n  return agent;\n}\n\nmodule.exports = HttpsOcspAgent;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9saWIvYWdlbnQvaHR0cHNfb2NzcF9hZ2VudC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxtQkFBbUIsaURBQXNCO0FBQ3pDLG1CQUFtQixtQkFBTyxDQUFDLGtGQUFlOztBQUUxQztBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyIvVXNlcnMvdmljdG9yd2lsc29uL0Rlc2t0b3AvcHJvamVjdHMvRVpWaXovbm9kZV9tb2R1bGVzL3Nub3dmbGFrZS1zZGsvbGliL2FnZW50L2h0dHBzX29jc3BfYWdlbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgSHR0cHNBZ2VudCA9IHJlcXVpcmUoJ2h0dHBzJykuQWdlbnQ7XG5jb25zdCBTb2NrZXRVdGlsID0gcmVxdWlyZSgnLi9zb2NrZXRfdXRpbCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgSHR0cHNPY3NwQWdlbnQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqXG4gKiBAcmV0dXJucyB7SHR0cHNPY3NwQWdlbnR9XG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gSHR0cHNPY3NwQWdlbnQob3B0aW9ucykge1xuICBjb25zdCBhZ2VudCA9IEh0dHBzQWdlbnQuYXBwbHkodGhpcywgW29wdGlvbnNdKTtcbiAgYWdlbnQuY3JlYXRlQ29ubmVjdGlvbiA9IGZ1bmN0aW9uIChwb3J0LCBob3N0LCBvcHRpb25zKSB7XG4gICAgLy8gbWFrZSBzdXJlIHRoZSAnb3B0aW9ucycgdmFyaWFibGVzIHJlZmVyZW5jZXMgdGhlIGFyZ3VtZW50IHRoYXQgYWN0dWFsbHlcbiAgICAvLyBjb250YWlucyB0aGUgb3B0aW9uc1xuICAgIC8vIE5vdGU6IGxvb2sgYXQgdGhlIE5vZGUuanMgaHR0cHMgYWdlbnQgdG8gdW5kZXJzdGFuZCB3aHkgdGhpcyBjb2RlIGlzXG4gICAgLy8gd3JpdHRlbiB0aGlzIHdheVxuICAgIGlmIChwb3J0ICE9PSBudWxsICYmIHR5cGVvZiBwb3J0ID09PSAnb2JqZWN0Jykge1xuICAgICAgb3B0aW9ucyA9IHBvcnQ7XG4gICAgfSBlbHNlIGlmIChob3N0ICE9PSBudWxsICYmIHR5cGVvZiBob3N0ID09PSAnb2JqZWN0Jykge1xuICAgICAgb3B0aW9ucyA9IGhvc3Q7XG4gICAgfSBlbHNlIGlmIChvcHRpb25zID09PSBudWxsIHx8IHR5cGVvZiBvcHRpb25zICE9PSAnb2JqZWN0Jykge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgaG9zdCAhPT0gJ3N0cmluZycpIHtcbiAgICAgIGhvc3QgPSBvcHRpb25zLmhvc3Q7XG4gICAgfVxuXG4gICAgLy8gY2FsbCBzdXBlclxuICAgIGNvbnN0IHNvY2tldCA9IEh0dHBzQWdlbnQucHJvdG90eXBlLmNyZWF0ZUNvbm5lY3Rpb24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuICAgIC8vIHNlY3VyZSB0aGUgc29ja2V0IGFuZCByZXR1cm4gaXRcbiAgICByZXR1cm4gU29ja2V0VXRpbC5zZWN1cmVTb2NrZXQoc29ja2V0LCBob3N0LCBudWxsKTtcbiAgfTtcblxuICByZXR1cm4gYWdlbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gSHR0cHNPY3NwQWdlbnQ7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/lib/agent/https_ocsp_agent.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/lib/agent/https_proxy_agent.js":
/*!*******************************************************************!*\
  !*** ./node_modules/snowflake-sdk/lib/agent/https_proxy_agent.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const tls = __webpack_require__(/*! tls */ \"tls\");\nconst { HttpsProxyAgent } = __webpack_require__(/*! https-proxy-agent */ \"(rsc)/./node_modules/https-proxy-agent/dist/index.js\");\nconst SocketUtil = __webpack_require__(/*! ./socket_util */ \"(rsc)/./node_modules/snowflake-sdk/lib/agent/socket_util.js\");\nconst Logger = __webpack_require__(/*! ../logger */ \"(rsc)/./node_modules/snowflake-sdk/lib/logger.js\");\n\nmodule.exports = createHttpsProxyAgent;\n\nfunction createHttpsProxyAgent(opts) {\n  // HttpsProxyAgent >= 6.x takes two arguments for its constructor\n  // See: https://github.com/TooTallNate/proxy-agents/blob/main/packages/https-proxy-agent/CHANGELOG.md#600\n  const { host: hostname, port, user: username, password, protocol: rawProtocol, ...agentOptions } = opts;\n  const protocol = rawProtocol.endsWith(':') ? rawProtocol : `${rawProtocol}:`;\n  return new SnowflakeHttpsProxyAgent({ hostname, port, username, password, protocol }, agentOptions);\n}\n\nclass SnowflakeHttpsProxyAgent extends HttpsProxyAgent {\n  constructor(proxy, opts) {\n    super(proxy, opts);\n  }\n\n  async connect(req, opts) {\n    Logger.getInstance().debug('Using proxy=%s for host %s', this.proxy.hostname, opts.host);\n    const socket = await super.connect(req, opts);\n    if (socket instanceof tls.TLSSocket) {\n      SocketUtil.secureSocket(socket, opts.host, this);\n    }\n    return socket;\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9saWIvYWdlbnQvaHR0cHNfcHJveHlfYWdlbnQuanMiLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxtQkFBTyxDQUFDLGdCQUFLO0FBQ3pCLFFBQVEsa0JBQWtCLEVBQUUsbUJBQU8sQ0FBQywrRUFBbUI7QUFDdkQsbUJBQW1CLG1CQUFPLENBQUMsa0ZBQWU7QUFDMUMsZUFBZSxtQkFBTyxDQUFDLG1FQUFXOztBQUVsQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLHlGQUF5RjtBQUNuRyxnRUFBZ0UsWUFBWTtBQUM1RSx3Q0FBd0MsOENBQThDO0FBQ3RGOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcndpbHNvbi9EZXNrdG9wL3Byb2plY3RzL0VaVml6L25vZGVfbW9kdWxlcy9zbm93Zmxha2Utc2RrL2xpYi9hZ2VudC9odHRwc19wcm94eV9hZ2VudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB0bHMgPSByZXF1aXJlKCd0bHMnKTtcbmNvbnN0IHsgSHR0cHNQcm94eUFnZW50IH0gPSByZXF1aXJlKCdodHRwcy1wcm94eS1hZ2VudCcpO1xuY29uc3QgU29ja2V0VXRpbCA9IHJlcXVpcmUoJy4vc29ja2V0X3V0aWwnKTtcbmNvbnN0IExvZ2dlciA9IHJlcXVpcmUoJy4uL2xvZ2dlcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZUh0dHBzUHJveHlBZ2VudDtcblxuZnVuY3Rpb24gY3JlYXRlSHR0cHNQcm94eUFnZW50KG9wdHMpIHtcbiAgLy8gSHR0cHNQcm94eUFnZW50ID49IDYueCB0YWtlcyB0d28gYXJndW1lbnRzIGZvciBpdHMgY29uc3RydWN0b3JcbiAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vVG9vVGFsbE5hdGUvcHJveHktYWdlbnRzL2Jsb2IvbWFpbi9wYWNrYWdlcy9odHRwcy1wcm94eS1hZ2VudC9DSEFOR0VMT0cubWQjNjAwXG4gIGNvbnN0IHsgaG9zdDogaG9zdG5hbWUsIHBvcnQsIHVzZXI6IHVzZXJuYW1lLCBwYXNzd29yZCwgcHJvdG9jb2w6IHJhd1Byb3RvY29sLCAuLi5hZ2VudE9wdGlvbnMgfSA9IG9wdHM7XG4gIGNvbnN0IHByb3RvY29sID0gcmF3UHJvdG9jb2wuZW5kc1dpdGgoJzonKSA/IHJhd1Byb3RvY29sIDogYCR7cmF3UHJvdG9jb2x9OmA7XG4gIHJldHVybiBuZXcgU25vd2ZsYWtlSHR0cHNQcm94eUFnZW50KHsgaG9zdG5hbWUsIHBvcnQsIHVzZXJuYW1lLCBwYXNzd29yZCwgcHJvdG9jb2wgfSwgYWdlbnRPcHRpb25zKTtcbn1cblxuY2xhc3MgU25vd2ZsYWtlSHR0cHNQcm94eUFnZW50IGV4dGVuZHMgSHR0cHNQcm94eUFnZW50IHtcbiAgY29uc3RydWN0b3IocHJveHksIG9wdHMpIHtcbiAgICBzdXBlcihwcm94eSwgb3B0cyk7XG4gIH1cblxuICBhc3luYyBjb25uZWN0KHJlcSwgb3B0cykge1xuICAgIExvZ2dlci5nZXRJbnN0YW5jZSgpLmRlYnVnKCdVc2luZyBwcm94eT0lcyBmb3IgaG9zdCAlcycsIHRoaXMucHJveHkuaG9zdG5hbWUsIG9wdHMuaG9zdCk7XG4gICAgY29uc3Qgc29ja2V0ID0gYXdhaXQgc3VwZXIuY29ubmVjdChyZXEsIG9wdHMpO1xuICAgIGlmIChzb2NrZXQgaW5zdGFuY2VvZiB0bHMuVExTU29ja2V0KSB7XG4gICAgICBTb2NrZXRVdGlsLnNlY3VyZVNvY2tldChzb2NrZXQsIG9wdHMuaG9zdCwgdGhpcyk7XG4gICAgfVxuICAgIHJldHVybiBzb2NrZXQ7XG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/lib/agent/https_proxy_agent.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/lib/agent/ocsp_response_cache.js":
/*!*********************************************************************!*\
  !*** ./node_modules/snowflake-sdk/lib/agent/ocsp_response_cache.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const http = __webpack_require__(/*! http */ \"http\");\nconst url = __webpack_require__(/*! url */ \"url\");\nconst util = __webpack_require__(/*! util */ \"util\");\n\nconst path = __webpack_require__(/*! path */ \"path\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst SimpleCache = __webpack_require__(/*! simple-lru-cache */ \"(rsc)/./node_modules/simple-lru-cache/index.js\");\nconst Errors = __webpack_require__(/*! ../errors */ \"(rsc)/./node_modules/snowflake-sdk/lib/errors.js\");\nconst ErrorCodes = Errors.codes;\nconst Util = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/snowflake-sdk/lib/util.js\");\nconst CertUtil = __webpack_require__(/*! ./cert_util */ \"(rsc)/./node_modules/snowflake-sdk/lib/agent/cert_util.js\");\nconst GlobalConfig = __webpack_require__(/*! ../global_config */ \"(rsc)/./node_modules/snowflake-sdk/lib/global_config.js\");\nconst Logger = __webpack_require__(/*! ../logger */ \"(rsc)/./node_modules/snowflake-sdk/lib/logger.js\");\n\nconst status = {\n  NOT_START: 'not_start',\n  STARTED: 'started',\n  FINISHED: 'finish',\n};\n\n// validate input\nconst sizeLimit = GlobalConfig.getOcspResponseCacheSizeLimit();\n// ocsp cache max age in second\nlet maxAgeSec = GlobalConfig.getOcspResponseCacheMaxAge();\n\nErrors.assertInternal(Util.number.isPositiveInteger(sizeLimit));\nErrors.assertInternal(Util.number.isPositiveInteger(maxAgeSec));\n\nconst cacheDir = GlobalConfig.mkdirCacheDir();\nconst cacheFileName = path.join(cacheDir, 'ocsp_response_cache.json');\n// create a cache to store the responses, dynamically changes in size\nlet cache;\n// JSON object with previous cache's responses\nlet prevCacheObj;\n// Cache updated time, in seconds, initialized as current time.\n// Will be updated when load from local cache file or refresh by downloading\nlet cacheUpdateTimeSec = Date.now() / 1000;\n\nfunction deleteCache() {\n  try {\n    cache.reset();\n    fs.unlinkSync(cacheFileName);\n  } catch (e) {\n    Logger.getInstance()\n      .debug('Failed to delete OCSP cache file: %s, err: %s', cacheFileName, e);\n  }\n}\n\nexports.deleteCache = deleteCache;\n\n/**\n * Cache for storing OCSP responses. This covers both client and server caches.\n *\n * @constructor\n */\nfunction OcspResponseCache() {\n  let downloadStatus = status.NOT_START;\n  let cacheUpdated = false;\n  let cacheInitialized = false;\n  let proxyAgent = null;\n\n  /**\n   * Reads OCSP cache file.\n   */\n  // Current time in second\n  const currentTimeSec = Date.now() / 1000;\n  cacheUpdateTimeSec = currentTimeSec;\n\n  let OCSP_URL = process.env.SF_OCSP_RESPONSE_CACHE_SERVER_URL;\n  if (!OCSP_URL) {\n    OCSP_URL = 'http://ocsp.snowflakecomputing.com/ocsp_response_cache.json';\n  }\n  try {\n    Logger.getInstance().debug('Reading OCSP cache file. %s', cacheFileName);\n    const contents = fs.readFileSync(cacheFileName, 'utf-8');\n    prevCacheObj = JSON.parse(contents);\n    cache = new SimpleCache({ maxSize: Object.keys(prevCacheObj).length });\n    setCacheEntries(prevCacheObj);\n    cacheInitialized = true;\n  } catch (e) {\n    Logger.getInstance().debug('Failed to read OCSP cache file: %s, err: %s', cacheFileName, e);\n  }\n\n  /**\n   * set proxy agent for ocsp validation\n   *\n   * @param agent\n   */\n  this.setAgent = function setAgent(agent) {\n    proxyAgent = agent;\n  };\n\n  /**\n   * Initializes the cache\n   * \n   * @param cert \n   * @param response \n   */\n  this.initCache = function initCache(cert, response) {\n    cache = new SimpleCache({ maxSize: 1 });\n    this.set(cert, response);\n  };\n\n  /**\n   * Is OCSP Cache initialized?\n   * @returns {boolean}\n   */\n  this.isInitialized = function () {\n    return cacheInitialized;\n  };\n\n  /**\n   * Is OCSP Cache download finished?\n   * @returns {boolean}\n   */\n  this.isDownloadFinished = function () {\n    return downloadStatus === status.FINISHED;\n  };\n\n  /**\n   * Forces download status to finish\n   */\n  this.forceDownloadToFinish = function () {\n    downloadStatus = status.FINISHED;\n  };\n\n  /**\n   * Is local OCSP Cache expired?\n   * @returns {boolean}\n   */\n  this.IsCacheExpired = function () {\n    if (!cacheInitialized) {\n      return false;\n    }\n\n    // Update maxAge in case it could be changed through environment variable\n    maxAgeSec = GlobalConfig.getOcspResponseCacheMaxAge();\n\n    // Current time in seconds\n    const currentTimeSec = Date.now() / 1000;\n\n    if ((currentTimeSec - cacheUpdateTimeSec) > maxAgeSec) {\n      Logger.getInstance().debug(\n        'OCSP local cache validity is out of range. currentTime: %s, timestamp: %s, maxAge: %s',\n        currentTimeSec, cacheUpdateTimeSec, maxAgeSec);\n      return true;\n    }\n\n    return false;\n  };\n\n  /**\n   * Resets OCSP Cache status\n   */\n  this.resetCacheStatus = function () {\n    downloadStatus = status.NOT_START;\n    if (cacheUpdated) {\n      Logger.getInstance().debug(cacheFileName);\n\n      // current time in second\n      const currentTimeSec = Date.now() / 1000;\n      const cacheOutput = {};\n      cache.forEach(function (v, k) {\n        const certIdInBase64 = CertUtil.decodeKey(k);\n        const ocspResponseInBase64 = v.toString('BASE64');\n        cacheOutput[certIdInBase64] = [currentTimeSec, ocspResponseInBase64];\n      });\n      const writeContent = JSON.stringify(cacheOutput);\n      Logger.getInstance().debug('Writing OCSP cache file. %s', cacheFileName);\n      try {\n        fs.writeFileSync(cacheFileName, writeContent, 'utf-8');\n      } catch (e) {\n        Logger.getInstance().debug('Failed to update OCSP cache file: %s, err: %s', cacheFileName, e);\n      }\n      cacheUpdated = false;\n    }\n  };\n\n  /**\n   * Adds an entry to the cache.\n   *\n   * @param cert\n   * @param response\n   */\n  this.set = function set(cert, response) {\n    try {\n      const certId = CertUtil.buildCertId(cert);\n      cache.set(certId, response);\n      cacheUpdated = true;\n    } catch (e) {\n      Logger.getInstance().debug('Failed to add certificate to OCSP cache file. err: %s', e);\n    }\n  };\n\n  /**\n   * Returns an entry from the cache.\n   *\n   * @param cert\n   * @returns {*}\n   */\n  this.get = function get(cert) {\n    try {\n      const certId = CertUtil.buildCertId(cert);\n      return cache.get(certId);\n    } catch (e) {\n      Logger.getInstance().debug('Failed to get certificate from OCSP cache. err: %s', e);\n      return null;\n    }\n  };\n\n  /**\n   * Downloads OCSP cache from the Snowflake OCSP cache server.\n   * @param cb callback\n   */\n  this.downloadCache = function (cb) {\n    if (downloadStatus === status.STARTED) {\n      // reschedule calling cb\n      return false;\n    } else if (downloadStatus === status.FINISHED) {\n      // call cb immediately\n      cb(null, false);\n      return true;\n    }\n    downloadStatus = status.STARTED;\n\n    function checkOCSPResponse(err, cacheContent) {\n      if (downloadStatus === status.FINISHED) {\n        return;\n      }\n      downloadStatus = status.FINISHED;\n      Logger.getInstance().debug('Finish OCSP Cache Server: %s', OCSP_URL);\n      if (err) {\n        Logger.getInstance()\n          .debug('Failed to download OCSP cache file. %s. Ignored', err);\n        return cb(err, false);\n      }\n      try {\n        const jsonParsed = JSON.parse(cacheContent);\n        updateCache(jsonParsed);\n        cacheUpdated = true;\n        return cb(null, false);\n      } catch (e) {\n        cb(e, false);\n      }\n    }\n\n    function onResponse(response) {\n      if (response.statusCode < 200 || response.statusCode >= 400) {\n        return checkOCSPResponse(\n          new Error('Failed to obtain OCSP response: ' +\n            response.statusCode), null);\n      }\n\n      let rawData = '';\n\n      // A chunk of data has been received.\n      response.on('data', function (chunk) {\n        rawData += chunk;\n      });\n\n      // The whole response has been received. Print out the result.\n      response.on('end', function () {\n        checkOCSPResponse(null, rawData);\n      });\n    }\n\n    const uri = url.parse(OCSP_URL);\n    const timeout = process.env.SF_OCSP_TEST_OCSP_RESPONSE_CACHE_SERVER_TIMEOUT || 5000;\n    const options = util._extend({\n      timeout: Number(timeout),\n      method: 'GET',\n      agent: proxyAgent,\n    }, uri);\n    const httpRequest = http.request(options, onResponse);\n    httpRequest.on('error', function (e) {\n      downloadStatus = status.FINISHED;\n      if (cb) {\n        cb(e, false);\n      }\n      cb = null;\n    });\n    httpRequest.on('timeout', function () {\n      downloadStatus = status.FINISHED;\n      httpRequest.abort();\n      Logger.getInstance().debug('Timeout OCSP responder: %s, %ss', OCSP_URL, options.timeout);\n      if (cb) {\n        cb(Errors.createOCSPError(ErrorCodes.ERR_OCSP_CACHE_SERVER_TIMEOUT), false);\n      }\n      cb = null;\n    });\n    httpRequest.end();\n    Logger.getInstance().trace('Contact OCSP Cache Server: %s', OCSP_URL);\n\n    return true;\n  };\n\n  /**\n   * Validate cache entry\n   * @param certIdBase64 cache key\n   * @param ocspResponseBase64 cache value\n   * @returns {Object}\n   */\n  function validateCacheEntry(certIdBase64, ocspResponseBase64) {\n    let err;\n    if (ocspResponseBase64.length !== 2) {\n      Logger.getInstance()\n        .debug('OCSP cache value doesn\\'t consist of two elements. Ignored.');\n      err = Errors.createOCSPError(ErrorCodes.ERR_OCSP_NOT_TWO_ELEMENTS);\n    }\n    if ((currentTimeSec - ocspResponseBase64[0]) > maxAgeSec) {\n      Logger.getInstance().debug(\n        'OCSP cache validity is out of range. currentTime: %s, timestamp: %s, maxAge: %s',\n        currentTimeSec, ocspResponseBase64[0], maxAgeSec);\n      err = Errors.createOCSPError(ErrorCodes.ERR_OCSP_CACHE_EXPIRED);\n    }\n    try {\n      const k = CertUtil.encodeKey(certIdBase64);\n      if (err) {\n        return { err: err, key: k };\n      }\n      const rawOCSPResponse = Buffer.from(ocspResponseBase64[1], 'base64');\n      const status = CertUtil.verifyOCSPResponse(null, rawOCSPResponse);\n      if (!status.err) {\n        return { err: null, key: k, value: rawOCSPResponse };\n      }\n      return { err: status.err };\n    } catch (e) {\n      Logger.getInstance()\n        .debug('Failed to parse OCSP response. %s. Ignored.', e);\n      return { err: Errors.createOCSPError(ErrorCodes.ERR_OCSP_FAILED_PARSE_RESPONSE) };\n    }\n  }\n\n  function updateCache(jsonObject) {\n    // Get the size of cache retrieved from the cache server\n    const responseCacheSize = Object.keys(jsonObject).length;\n\n    // Check if there are previous entries to append\n    if (prevCacheObj) {\n      // Count overlap between previous cache and response cache\n      // And delete entry if expired\n      let cacheOverlapCount = 0;\n      for (const entry in jsonObject) {\n        if (entryExists(prevCacheObj, entry)) {\n          cacheOverlapCount++;\n          updateOrDeleteEntry(prevCacheObj, entry);\n        }\n      }\n\n      // Count entries from previous cache\n      const prevCacheSize = Object.keys(prevCacheObj).length;\n\n      // New cache size = previous cache size + response cache size - overlap between the two caches\n      const newCacheSize = prevCacheSize + responseCacheSize - cacheOverlapCount;\n\n      // Create cache using new cache size if it doesn't exceed the upper limit\n      cache = new SimpleCache({ maxSize: newCacheSize < sizeLimit ? newCacheSize : sizeLimit });\n\n      // Add new entries\n      setCacheEntries(jsonObject);\n\n      // Append older unique entries to cache\n      setCacheEntries(prevCacheObj);\n    } else {\n      // Create cache using response cache size if it doesn't exceed the upper limit\n      cache = new SimpleCache({ maxSize: responseCacheSize < sizeLimit ? responseCacheSize : sizeLimit });\n\n      // Add new entries\n      setCacheEntries(jsonObject);\n    }\n    // set cache update time\n    cacheUpdateTimeSec = Date.now() / 1000;\n    cacheInitialized = true;\n  }\n\n  function setCacheEntries(jsonObject) {\n    for (const entry in jsonObject) {\n      if (Object.prototype.hasOwnProperty.call(jsonObject, entry)) {\n        updateOrDeleteEntry(jsonObject, entry);\n      }\n    }\n  }\n\n  function updateOrDeleteEntry(jsonObject, entry) {\n    const status = validateCacheEntry(entry, jsonObject[entry]);\n    if (!status.err) {\n      // Add new entry or update existing one\n      cache.set(status.key, status.value);\n      // change cache update time if needed\n      if (jsonObject[entry][0] < cacheUpdateTimeSec) {\n        cacheUpdateTimeSec = jsonObject[entry][0];\n      }\n    } else if (status.err.code === ErrorCodes.ERR_OCSP_CACHE_EXPIRED) {\n      // If timestamp expired, delete entry\n      cache.del(status.key);\n    }\n  }\n\n  function entryExists(jsonObject, entry) {\n    for (const otherEntry in jsonObject) {\n      if (entry === otherEntry) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\nexports.OcspResponseCache = OcspResponseCache;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/lib/agent/ocsp_response_cache.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/lib/agent/socket_util.js":
/*!*************************************************************!*\
  !*** ./node_modules/snowflake-sdk/lib/agent/socket_util.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const Check = __webpack_require__(/*! ./check */ \"(rsc)/./node_modules/snowflake-sdk/lib/agent/check.js\");\nconst Logger = __webpack_require__(/*! ../logger */ \"(rsc)/./node_modules/snowflake-sdk/lib/logger.js\");\nconst GlobalConfig = __webpack_require__(/*! ../global_config */ \"(rsc)/./node_modules/snowflake-sdk/lib/global_config.js\");\nconst Parameters = __webpack_require__(/*! ../parameters */ \"(rsc)/./node_modules/snowflake-sdk/lib/parameters.js\");\nconst CertUtil = __webpack_require__(/*! ./cert_util */ \"(rsc)/./node_modules/snowflake-sdk/lib/agent/cert_util.js\");\nconst OcspResponseCache = __webpack_require__(/*! ./ocsp_response_cache */ \"(rsc)/./node_modules/snowflake-sdk/lib/agent/ocsp_response_cache.js\");\nconst Errors = __webpack_require__(/*! ../errors */ \"(rsc)/./node_modules/snowflake-sdk/lib/errors.js\");\nconst ErrorCodes = Errors.codes;\n\nconst REGEX_SNOWFLAKE_ENDPOINT = /.snowflakecomputing./;\n\nconst socketSecuredEvent = 'secureConnect';\n\nconst rawOcspFlag =\n  process.env.SF_OCSP_RESPONSE_CACHE_SERVER_ENABLED;\n\nconst variables = {\n  SF_OCSP_RESPONSE_CACHE_SERVER_ENABLED:\n    !rawOcspFlag || rawOcspFlag && rawOcspFlag.toLowerCase() !== 'false',\n  OCSP_RESPONSE_CACHE: undefined\n};\n\n/**\n * Returns the ocsp response cache.\n *\n * @returns {*}\n */\nfunction getOcspResponseCache() {\n  // initialize the ocsp response cache if needed\n  if (!variables.OCSP_RESPONSE_CACHE) {\n    variables.OCSP_RESPONSE_CACHE = new OcspResponseCache.OcspResponseCache();\n  }\n\n  return variables.OCSP_RESPONSE_CACHE;\n}\n\n\nexports.variables = variables;\n/**\n * Secures a given TLSSocket by blocking all writes until the certificate\n * associated with the socket has been validated.\n *\n * @param {Object} socket\n * @param {String} host\n * @param {Object} agent\n * @param {Object} mock\n *\n * @returns {Object}\n */\nexports.secureSocket = function (socket, host, agent, mock) {\n  // if ocsp validation is disabled for the given host, return the socket as is\n  if (isOcspValidationDisabled(host)) {\n    Logger.getInstance().debug('OCSP validation disabled for %s', host);\n    return socket;\n  }\n\n  if (agent != null) {\n    getOcspResponseCache().setAgent(agent);\n  }\n\n  const validate = function () {\n    // stop listening for the secure event\n    socket.removeListener(socketSecuredEvent, validate);\n\n    Logger.getInstance().trace('socket reused = %s', socket.isSessionReused());\n\n    // if the server has resumed our existing session, unblock all\n    // writes without performing any additional validation\n    if (socket.isSessionReused()) {\n      socket.uncork();\n    } else {\n      if (!socket.authorized) {\n        Logger.getInstance().warn('Socket is not authorized: %s', socket.authorizationError);\n        return socket.destroy(socket.authorizationError);\n      }\n      // use ocsp to make sure the entire certificate chain can be trusted\n      const certChain = socket.getPeerCertificate(true);\n      const vcc = mock ? mock.validateCertChain : validateCertChain;\n\n      vcc(certChain, function (err) {\n        getOcspResponseCache().resetCacheStatus();\n        if (err) {\n          // if there's an error, destroy the socket\n          Logger.getInstance().error('OCSP validation failed: %s', err);\n          return socket.destroy(err);\n        }\n\n        Logger.getInstance().trace('OCSP validation succeeded for %s', host);\n\n        // unblock all writes\n        socket.uncork();\n      });\n    }\n  };\n\n  // when the socket is secure, perform additional validation\n  socket.on(socketSecuredEvent, validate);\n\n  // block all writes until validation is complete\n  socket.cork();\n\n  return socket;\n};\n\n/**\n * Determines if ocsp validation is disabled for a given host.\n *\n * @param {String} host\n * @returns {boolean}\n */\nfunction isOcspValidationDisabled(host) {\n  // ocsp is disabled if insecure-connect is enabled, or if we've disabled ocsp\n  // for non-snowflake endpoints and the host is a non-snowflake endpoint\n  return GlobalConfig.isOCSPChecksDisabled() ||\n    (Parameters.getValue(Parameters.names.JS_DRIVER_DISABLE_OCSP_FOR_NON_SF_ENDPOINTS) &&\n      !REGEX_SNOWFLAKE_ENDPOINT.test(host));\n}\n\n/**\n * Is valid OCSP error for cache\n * @param err\n * @returns {boolean}\n */\nfunction isValidOCSPError(err) {\n  return err && (err.code === ErrorCodes.ERR_OCSP_REVOKED ||\n    err.code === ErrorCodes.ERR_OCSP_UNKNOWN);\n}\n\n/**\n * Return err if any valid error is found.\n * @param errors\n * @returns {null|*}\n */\nfunction canEarlyExitForOCSP(errors) {\n  if (GlobalConfig.getOcspMode() === GlobalConfig.ocspModes.FAIL_CLOSED) {\n    for (let errorIndex = 0, length = errors.length;\n      errorIndex < length; errorIndex++) {\n      // first error\n      const err = errors[errorIndex];\n      if (err) {\n        return Object.prototype.hasOwnProperty.call(err, 'err') ? err.err : err;\n      }\n    }\n  } else {\n    let anyRevoked = null;\n    for (let errorIndex = 0, length = errors.length;\n      errorIndex < length; errorIndex++) {\n      // first error\n      const err = errors[errorIndex];\n      if (err && !isValidOCSPError(err)) {\n        // any of the errors is NOT good/revoked/unknown\n        Logger.getInstance().debug(`OCSP responder didn't respond correctly. Assuming certificate is not revoked. Details: ${err}`);\n        return null;\n      } else if (err && err.code === ErrorCodes.ERR_OCSP_REVOKED) {\n        anyRevoked = err;\n      }\n    }\n    return anyRevoked;\n  }\n}\n\nexports.canEarlyExitForOCSP = canEarlyExitForOCSP;\n\n/**\n * Validates a certificate chain using OCSP.\n *\n * @param {Object} cert a top-level cert that represents the leaf of a\n *   certificate chain.\n * @param {Function} cb the callback to invoke once the validation is complete.\n */\nfunction validateCertChain(cert, cb) {\n  // walk up the certificate chain and collect all the certificates in an array\n  const certs = [];\n  while (cert && cert.issuerCertificate &&\n  (cert.fingerprint !== cert.issuerCertificate.fingerprint)) {\n    certs.push(cert);\n    cert = cert.issuerCertificate;\n  }\n\n  // create an array to store any errors encountered\n  // while validating the certificate chain\n  const errors = new Array(certs.length);\n\n  /**\n   * Called for every certificate as we traverse the certificate chain and\n   * validate each one.\n   *\n   * @param certs\n   * @param index\n   */\n  const eachCallback = function (certs, index) {\n    const cert = certs[index];\n    validateCert(cert, function (err, data) {\n      completed++;\n      errors[index] = err;\n      if (err) {\n        Logger.getInstance().debug(err);\n      }\n\n      // if we have an ocsp response, cache it\n      if (data && (!data.err || isValidOCSPError(data.err))) {\n        // check if cache is initialized before setting entry\n        if (getOcspResponseCache().isInitialized()) {\n          getOcspResponseCache().set(cert, data.res);\n        } else {\n          getOcspResponseCache().initCache(cert, data.res);\n        }\n        if (data.err) {\n          err = data.err;\n          errors[index] = err;\n        }\n      }\n\n      // if this is the last request to complete\n      if (completed === certs.length) {\n        const validError = canEarlyExitForOCSP(errors);\n        cb(validError);\n      }\n    });\n  };\n\n  // fire off requests to validate all the certificates in the chain\n  let completed = 0;\n  for (let index = 0, length = certs.length; index < length; index++) {\n    eachCallback(certs, index);\n  }\n}\n\n/**\n * Validates a certificate using OCSP.\n *\n * @param cert the certificate to validate.\n * @param cb the callback to invoke once the validation is complete.\n */\nfunction validateCert(cert, cb) {\n  function getOcspCache() {\n    try {\n      if (!getOcspResponseCache().downloadCache(getOcspResonseAndVerify)) {\n        setTimeout(getOcspCache, 10);\n      }\n    } catch (e) {\n      process.nextTick(function () {\n        cb(e);\n      });\n    }\n  }\n\n  /**\n   * Gets and Verifies OCSP Response\n   * @param err {object}\n   * @param useCacheServer {boolean}\n   */\n  function getOcspResonseAndVerify(err, useCacheServer) {\n    if (!useCacheServer && !getOcspResponseCache().isDownloadFinished()) {\n      setTimeout(getOcspResonseAndVerify, 10); // ms\n      return;\n    }\n\n    let decoded;\n    try {\n      decoded = CertUtil.decode(cert);\n    } catch (e) {\n      process.nextTick(function () {\n        cb(e);\n      });\n    }\n\n    let ocspResponse;\n    // check if cache is initialized before getting entry\n    if (getOcspResponseCache().isInitialized()) {\n      if (getOcspResponseCache().IsCacheExpired()) {\n        // reset cache status so it can be refreshed\n        getOcspResponseCache().resetCacheStatus();\n      } else {\n        // if we already have a valid entry in the cache, use it\n        ocspResponse = getOcspResponseCache().get(cert);\n      }\n    }\n    if (ocspResponse) {\n      Logger.getInstance().trace(\n        'Returning OCSP status for certificate %s from cache', cert.serialNumber);\n      const status = CertUtil.verifyOCSPResponse(decoded.issuer, ocspResponse);\n      if (!status.err) {\n        // verification was success with the cache\n        process.nextTick(function () {\n          cb(null, null);\n        });\n      } else {\n        // verification was failure with the cache\n        process.nextTick(function () {\n          cb(status.err, null);\n        });\n      }\n    } else {\n      if (useCacheServer) {\n        process.nextTick(function () {\n          getOcspCache();\n        });\n      } else {\n        Check(decoded, cb);\n      }\n    }\n  }\n\n  if (!variables.SF_OCSP_RESPONSE_CACHE_SERVER_ENABLED) {\n    getOcspResponseCache().forceDownloadToFinish();\n  }\n  getOcspResonseAndVerify(null, variables.SF_OCSP_RESPONSE_CACHE_SERVER_ENABLED);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/lib/agent/socket_util.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/lib/authentication/auth_default.js":
/*!***********************************************************************!*\
  !*** ./node_modules/snowflake-sdk/lib/authentication/auth_default.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const mfaAuthenticator = (__webpack_require__(/*! ./authentication_types.js */ \"(rsc)/./node_modules/snowflake-sdk/lib/authentication/authentication_types.js\").USER_PWD_MFA_AUTHENTICATOR);\n\n/**\n * Creates a default authenticator.\n *\n * @param {String} password\n *\n * @returns {Object}\n * @constructor\n */\nfunction AuthDefault(connectionConfig) {\n  const password = connectionConfig.password;\n  const mfaToken = connectionConfig.mfaToken;\n  const passcode = connectionConfig.getPasscode();\n  const isPasscodeInPassword = connectionConfig.getPasscodeInPassword();\n\n  /**\n     * Update JSON body with password or token.\n     *\n     * @param {JSON} body\n     *\n     * @returns {null}\n     */\n  this.updateBody = function (body) {\n    body['data']['PASSWORD'] = password;\n\n    if (isMFAAuth()) {\n      setMFASessionParams(body);\n    }\n  };\n\n  function isMFAAuth() {\n    return ( connectionConfig.getAuthenticator() === mfaAuthenticator || mfaToken || passcode || isPasscodeInPassword);\n  }\n\n  function setMFASessionParams(body) {\n    body['data']['TOKEN'] = mfaToken;\n    body['data']['AUTHENTICATOR'] = mfaAuthenticator;\n    \n    if (isPasscodeInPassword) {\n      body['data']['EXT_AUTHN_DUO_METHOD'] = 'passcode';\n      body['data']['passcodeInPassword'] = true;\n    } else if (passcode) {\n      body['data']['EXT_AUTHN_DUO_METHOD'] = 'passcode';\n      body['data']['PASSCODE'] = passcode;\n    } else {\n      body['data']['EXT_AUTHN_DUO_METHOD'] = 'push';\n    }\n  }\n    \n  this.authenticate = async function () {\n    return;\n  };\n\n  this.reauthenticate = async function () {\n    return;\n  };\n}\n\nmodule.exports = AuthDefault;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9saWIvYXV0aGVudGljYXRpb24vYXV0aF9kZWZhdWx0LmpzIiwibWFwcGluZ3MiOiJBQUFBLHlCQUF5QixrS0FBZ0U7O0FBRXpGO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE1BQU07QUFDckI7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyIvVXNlcnMvdmljdG9yd2lsc29uL0Rlc2t0b3AvcHJvamVjdHMvRVpWaXovbm9kZV9tb2R1bGVzL3Nub3dmbGFrZS1zZGsvbGliL2F1dGhlbnRpY2F0aW9uL2F1dGhfZGVmYXVsdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBtZmFBdXRoZW50aWNhdG9yID0gcmVxdWlyZSAoJy4vYXV0aGVudGljYXRpb25fdHlwZXMuanMnKS5VU0VSX1BXRF9NRkFfQVVUSEVOVElDQVRPUjtcblxuLyoqXG4gKiBDcmVhdGVzIGEgZGVmYXVsdCBhdXRoZW50aWNhdG9yLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBwYXNzd29yZFxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9XG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gQXV0aERlZmF1bHQoY29ubmVjdGlvbkNvbmZpZykge1xuICBjb25zdCBwYXNzd29yZCA9IGNvbm5lY3Rpb25Db25maWcucGFzc3dvcmQ7XG4gIGNvbnN0IG1mYVRva2VuID0gY29ubmVjdGlvbkNvbmZpZy5tZmFUb2tlbjtcbiAgY29uc3QgcGFzc2NvZGUgPSBjb25uZWN0aW9uQ29uZmlnLmdldFBhc3Njb2RlKCk7XG4gIGNvbnN0IGlzUGFzc2NvZGVJblBhc3N3b3JkID0gY29ubmVjdGlvbkNvbmZpZy5nZXRQYXNzY29kZUluUGFzc3dvcmQoKTtcblxuICAvKipcbiAgICAgKiBVcGRhdGUgSlNPTiBib2R5IHdpdGggcGFzc3dvcmQgb3IgdG9rZW4uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0pTT059IGJvZHlcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtudWxsfVxuICAgICAqL1xuICB0aGlzLnVwZGF0ZUJvZHkgPSBmdW5jdGlvbiAoYm9keSkge1xuICAgIGJvZHlbJ2RhdGEnXVsnUEFTU1dPUkQnXSA9IHBhc3N3b3JkO1xuXG4gICAgaWYgKGlzTUZBQXV0aCgpKSB7XG4gICAgICBzZXRNRkFTZXNzaW9uUGFyYW1zKGJvZHkpO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBpc01GQUF1dGgoKSB7XG4gICAgcmV0dXJuICggY29ubmVjdGlvbkNvbmZpZy5nZXRBdXRoZW50aWNhdG9yKCkgPT09IG1mYUF1dGhlbnRpY2F0b3IgfHwgbWZhVG9rZW4gfHwgcGFzc2NvZGUgfHwgaXNQYXNzY29kZUluUGFzc3dvcmQpO1xuICB9XG5cbiAgZnVuY3Rpb24gc2V0TUZBU2Vzc2lvblBhcmFtcyhib2R5KSB7XG4gICAgYm9keVsnZGF0YSddWydUT0tFTiddID0gbWZhVG9rZW47XG4gICAgYm9keVsnZGF0YSddWydBVVRIRU5USUNBVE9SJ10gPSBtZmFBdXRoZW50aWNhdG9yO1xuICAgIFxuICAgIGlmIChpc1Bhc3Njb2RlSW5QYXNzd29yZCkge1xuICAgICAgYm9keVsnZGF0YSddWydFWFRfQVVUSE5fRFVPX01FVEhPRCddID0gJ3Bhc3Njb2RlJztcbiAgICAgIGJvZHlbJ2RhdGEnXVsncGFzc2NvZGVJblBhc3N3b3JkJ10gPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAocGFzc2NvZGUpIHtcbiAgICAgIGJvZHlbJ2RhdGEnXVsnRVhUX0FVVEhOX0RVT19NRVRIT0QnXSA9ICdwYXNzY29kZSc7XG4gICAgICBib2R5WydkYXRhJ11bJ1BBU1NDT0RFJ10gPSBwYXNzY29kZTtcbiAgICB9IGVsc2Uge1xuICAgICAgYm9keVsnZGF0YSddWydFWFRfQVVUSE5fRFVPX01FVEhPRCddID0gJ3B1c2gnO1xuICAgIH1cbiAgfVxuICAgIFxuICB0aGlzLmF1dGhlbnRpY2F0ZSA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm47XG4gIH07XG5cbiAgdGhpcy5yZWF1dGhlbnRpY2F0ZSA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm47XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQXV0aERlZmF1bHQ7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/lib/authentication/auth_default.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/lib/authentication/auth_idtoken.js":
/*!***********************************************************************!*\
  !*** ./node_modules/snowflake-sdk/lib/authentication/auth_idtoken.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const AuthWeb = __webpack_require__(/*! ./auth_web */ \"(rsc)/./node_modules/snowflake-sdk/lib/authentication/auth_web.js\");\n\n/**\n * Creates an ID token authenticator.\n *\n * @param {Object} connectionConfig\n * @param {Object} httpClient\n * @param {module} webbrowser\n * \n * @returns {Object} the authenticator\n * @constructor\n */\nfunction AuthIDToken(connectionConfig, httpClient, webbrowser) {\n\n  this.idToken = connectionConfig.idToken;\n\n  /**\n   * Update JSON body with token.\n   *\n   * @param {JSON} body\n   *\n   * @returns {null}\n   */\n  this.updateBody = function (body) {\n    body['data']['TOKEN'] = this.idToken;\n    body['data']['AUTHENTICATOR'] = 'ID_TOKEN';\n  };\n  \n  this.authenticate = async function () {};\n\n  this.reauthenticate = async function (body) {\n    const auth = new AuthWeb(connectionConfig, httpClient, webbrowser);\n    await auth.authenticate(connectionConfig.getAuthenticator(),\n      connectionConfig.getServiceName(),\n      connectionConfig.account,\n      connectionConfig.username);\n    auth.updateBody(body);\n  };\n}\n\nmodule.exports = AuthIDToken;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9saWIvYXV0aGVudGljYXRpb24vYXV0aF9pZHRva2VuLmpzIiwibWFwcGluZ3MiOiJBQUFBLGdCQUFnQixtQkFBTyxDQUFDLHFGQUFZOztBQUVwQztBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQjtBQUNBLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxNQUFNO0FBQ25CO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcndpbHNvbi9EZXNrdG9wL3Byb2plY3RzL0VaVml6L25vZGVfbW9kdWxlcy9zbm93Zmxha2Utc2RrL2xpYi9hdXRoZW50aWNhdGlvbi9hdXRoX2lkdG9rZW4uanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQXV0aFdlYiA9IHJlcXVpcmUoJy4vYXV0aF93ZWInKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIElEIHRva2VuIGF1dGhlbnRpY2F0b3IuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbm5lY3Rpb25Db25maWdcbiAqIEBwYXJhbSB7T2JqZWN0fSBodHRwQ2xpZW50XG4gKiBAcGFyYW0ge21vZHVsZX0gd2ViYnJvd3NlclxuICogXG4gKiBAcmV0dXJucyB7T2JqZWN0fSB0aGUgYXV0aGVudGljYXRvclxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIEF1dGhJRFRva2VuKGNvbm5lY3Rpb25Db25maWcsIGh0dHBDbGllbnQsIHdlYmJyb3dzZXIpIHtcblxuICB0aGlzLmlkVG9rZW4gPSBjb25uZWN0aW9uQ29uZmlnLmlkVG9rZW47XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSBKU09OIGJvZHkgd2l0aCB0b2tlbi5cbiAgICpcbiAgICogQHBhcmFtIHtKU09OfSBib2R5XG4gICAqXG4gICAqIEByZXR1cm5zIHtudWxsfVxuICAgKi9cbiAgdGhpcy51cGRhdGVCb2R5ID0gZnVuY3Rpb24gKGJvZHkpIHtcbiAgICBib2R5WydkYXRhJ11bJ1RPS0VOJ10gPSB0aGlzLmlkVG9rZW47XG4gICAgYm9keVsnZGF0YSddWydBVVRIRU5USUNBVE9SJ10gPSAnSURfVE9LRU4nO1xuICB9O1xuICBcbiAgdGhpcy5hdXRoZW50aWNhdGUgPSBhc3luYyBmdW5jdGlvbiAoKSB7fTtcblxuICB0aGlzLnJlYXV0aGVudGljYXRlID0gYXN5bmMgZnVuY3Rpb24gKGJvZHkpIHtcbiAgICBjb25zdCBhdXRoID0gbmV3IEF1dGhXZWIoY29ubmVjdGlvbkNvbmZpZywgaHR0cENsaWVudCwgd2ViYnJvd3Nlcik7XG4gICAgYXdhaXQgYXV0aC5hdXRoZW50aWNhdGUoY29ubmVjdGlvbkNvbmZpZy5nZXRBdXRoZW50aWNhdG9yKCksXG4gICAgICBjb25uZWN0aW9uQ29uZmlnLmdldFNlcnZpY2VOYW1lKCksXG4gICAgICBjb25uZWN0aW9uQ29uZmlnLmFjY291bnQsXG4gICAgICBjb25uZWN0aW9uQ29uZmlnLnVzZXJuYW1lKTtcbiAgICBhdXRoLnVwZGF0ZUJvZHkoYm9keSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQXV0aElEVG9rZW47XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/lib/authentication/auth_idtoken.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/lib/authentication/auth_keypair.js":
/*!***********************************************************************!*\
  !*** ./node_modules/snowflake-sdk/lib/authentication/auth_keypair.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const util = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/snowflake-sdk/lib/util.js\");\n\n/**\n * Creates a key-pair authenticator.\n *\n * @param {String} privateKey\n * @param {String} privateKeyPath\n * @param {String} privateKeyPass\n * @param {module} cryptomod\n * @param {module} jwtmod\n * @param {module} filesystem\n *\n * @returns {Object}\n * @constructor\n */\nfunction AuthKeypair(connectionConfig, cryptomod, jwtmod, filesystem) {\n  const crypto = typeof cryptomod !== 'undefined' ? cryptomod : __webpack_require__(/*! crypto */ \"crypto\");\n  const jwt = typeof jwtmod !== 'undefined' ? jwtmod : __webpack_require__(/*! jsonwebtoken */ \"(rsc)/./node_modules/jsonwebtoken/index.js\");\n  const fs = typeof filesystem !== 'undefined' ? filesystem : __webpack_require__(/*! fs */ \"fs\");\n  let privateKey = connectionConfig.getPrivateKey();\n  const privateKeyPath = connectionConfig.getPrivateKeyPath();\n  const privateKeyPass =  connectionConfig.getPrivateKeyPass();\n\n  let jwtToken;\n\n  const LIFETIME = 120; // seconds\n  const ALGORITHM = 'RS256';\n  const ISSUER = 'iss';\n  const SUBJECT = 'sub';\n  const EXPIRE_TIME = 'exp';\n  const ISSUE_TIME = 'iat';\n\n  /**\n   * Update JSON body with token.\n   *\n   * @param {JSON} body\n   *\n   * @returns {null}\n   */\n  this.updateBody = function (body) {\n    body['data']['TOKEN'] = jwtToken;\n  };\n\n  /**\n   * Load private key from specified file location.\n   *\n   * @param {String} privateKeyPath\n   * @param {String} privateKeyPass\n   *\n   * @returns {String} the private key.\n   */\n  function loadPrivateKey(privateKeyPath, privateKeyPass) {\n    // Load private key file\n    const privateKeyFile = fs.readFileSync(privateKeyPath);\n\n    let privateKeyObject;\n\n    // For encrypted private key\n    if (privateKeyPass) {\n      // Get private key with passphrase\n      privateKeyObject = crypto.createPrivateKey({\n        key: privateKeyFile,\n        format: 'pem',\n        passphrase: privateKeyPass\n      });\n\n    } else { // For unencrypted private key\n      privateKeyObject = crypto.createPrivateKey({\n        key: privateKeyFile,\n        format: 'pem'\n      });\n    }\n\n    const privateKey = privateKeyObject.export({\n      format: 'pem',\n      type: 'pkcs8'\n    });\n\n    return privateKey;\n  }\n\n  /**\n   * Get public key fingerprint from private key.\n   *\n   * @param {String} privateKey\n   *\n   * @returns {String} the public key fingerprint.\n   */\n  function calculatePublicKeyFingerprint(privateKey) {\n    // Extract public key object from private key\n    const pubKeyObject = crypto.createPublicKey({\n      key: privateKey,\n      format: 'pem'\n    });\n\n    // Obtain public key string\n    const publicKey = pubKeyObject.export({\n      format: 'der',\n      type: 'spki'\n    });\n\n    // Generate SHA256 hash of public key and encode in base64\n    const publicKeyFingerprint = 'SHA256:' +\n      crypto.createHash('sha256')\n        .update(publicKey, 'utf8')\n        .digest('base64');\n\n    return publicKeyFingerprint;\n  }\n\n  /**\n   * Generate JWT token using RS256 algorithm.\n   *\n   * @param {String} authenticator\n   * @param {String} serviceName\n   * @param {String} account\n   * @param {String} username\n   *\n   * @returns {null}\n   */\n  this.authenticate = async function (authenticator, serviceName, account, username) {\n    let publicKeyFingerprint;\n\n    // Use private key if already set in connection string, otherwise use private key file location\n    if (privateKey) {\n      // Get public key fingerprint\n      publicKeyFingerprint = calculatePublicKeyFingerprint(privateKey);\n    } else if (privateKeyPath) {\n      // Extract private key and get fingerprint\n      privateKey = loadPrivateKey(privateKeyPath, privateKeyPass);\n      publicKeyFingerprint = calculatePublicKeyFingerprint(privateKey);\n    }\n\n    // Current time + 120 seconds\n    const currentTime = Date.now();\n    const jwtTokenExp = currentTime + (LIFETIME * 1000);\n\n    // Create payload containing jwt token and lifetime span\n    const payload = {\n      [ISSUER]: util.format('%s.%s.%s', account.toUpperCase(), username.toUpperCase(), publicKeyFingerprint),\n      [SUBJECT]: util.format('%s.%s', account.toUpperCase(), username.toUpperCase()),\n      [ISSUE_TIME]: currentTime,\n      [EXPIRE_TIME]: jwtTokenExp\n    };\n\n    // Sign payload with RS256 algorithm\n    jwtToken = jwt.sign(payload, privateKey, { algorithm: ALGORITHM });\n  };\n\n  this.reauthenticate = async function (body) {\n    this.authenticate(connectionConfig.getAuthenticator(),\n      connectionConfig.getServiceName(),\n      connectionConfig.account,\n      connectionConfig.username);\n\n    this.updateBody(body);\n  };\n}\n\nmodule.exports = AuthKeypair;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9saWIvYXV0aGVudGljYXRpb24vYXV0aF9rZXlwYWlyLmpzIiwibWFwcGluZ3MiOiJBQUFBLGFBQWEsbUJBQU8sQ0FBQywrREFBUzs7QUFFOUI7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkI7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsZ0VBQWdFLG1CQUFPLENBQUMsc0JBQVE7QUFDaEYsdURBQXVELG1CQUFPLENBQUMsZ0VBQWM7QUFDN0UsOERBQThELG1CQUFPLENBQUMsY0FBSTtBQUMxRTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxNQUFNO0FBQ25CO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckI7QUFDQSxlQUFlLFFBQVE7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPOztBQUVQLE1BQU0sT0FBTztBQUNiO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckI7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLCtDQUErQyxzQkFBc0I7QUFDckU7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWN0b3J3aWxzb24vRGVza3RvcC9wcm9qZWN0cy9FWlZpei9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9saWIvYXV0aGVudGljYXRpb24vYXV0aF9rZXlwYWlyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHV0aWwgPSByZXF1aXJlKCcuLi91dGlsJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGtleS1wYWlyIGF1dGhlbnRpY2F0b3IuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHByaXZhdGVLZXlcbiAqIEBwYXJhbSB7U3RyaW5nfSBwcml2YXRlS2V5UGF0aFxuICogQHBhcmFtIHtTdHJpbmd9IHByaXZhdGVLZXlQYXNzXG4gKiBAcGFyYW0ge21vZHVsZX0gY3J5cHRvbW9kXG4gKiBAcGFyYW0ge21vZHVsZX0gand0bW9kXG4gKiBAcGFyYW0ge21vZHVsZX0gZmlsZXN5c3RlbVxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9XG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gQXV0aEtleXBhaXIoY29ubmVjdGlvbkNvbmZpZywgY3J5cHRvbW9kLCBqd3Rtb2QsIGZpbGVzeXN0ZW0pIHtcbiAgY29uc3QgY3J5cHRvID0gdHlwZW9mIGNyeXB0b21vZCAhPT0gJ3VuZGVmaW5lZCcgPyBjcnlwdG9tb2QgOiByZXF1aXJlKCdjcnlwdG8nKTtcbiAgY29uc3Qgand0ID0gdHlwZW9mIGp3dG1vZCAhPT0gJ3VuZGVmaW5lZCcgPyBqd3Rtb2QgOiByZXF1aXJlKCdqc29ud2VidG9rZW4nKTtcbiAgY29uc3QgZnMgPSB0eXBlb2YgZmlsZXN5c3RlbSAhPT0gJ3VuZGVmaW5lZCcgPyBmaWxlc3lzdGVtIDogcmVxdWlyZSgnZnMnKTtcbiAgbGV0IHByaXZhdGVLZXkgPSBjb25uZWN0aW9uQ29uZmlnLmdldFByaXZhdGVLZXkoKTtcbiAgY29uc3QgcHJpdmF0ZUtleVBhdGggPSBjb25uZWN0aW9uQ29uZmlnLmdldFByaXZhdGVLZXlQYXRoKCk7XG4gIGNvbnN0IHByaXZhdGVLZXlQYXNzID0gIGNvbm5lY3Rpb25Db25maWcuZ2V0UHJpdmF0ZUtleVBhc3MoKTtcblxuICBsZXQgand0VG9rZW47XG5cbiAgY29uc3QgTElGRVRJTUUgPSAxMjA7IC8vIHNlY29uZHNcbiAgY29uc3QgQUxHT1JJVEhNID0gJ1JTMjU2JztcbiAgY29uc3QgSVNTVUVSID0gJ2lzcyc7XG4gIGNvbnN0IFNVQkpFQ1QgPSAnc3ViJztcbiAgY29uc3QgRVhQSVJFX1RJTUUgPSAnZXhwJztcbiAgY29uc3QgSVNTVUVfVElNRSA9ICdpYXQnO1xuXG4gIC8qKlxuICAgKiBVcGRhdGUgSlNPTiBib2R5IHdpdGggdG9rZW4uXG4gICAqXG4gICAqIEBwYXJhbSB7SlNPTn0gYm9keVxuICAgKlxuICAgKiBAcmV0dXJucyB7bnVsbH1cbiAgICovXG4gIHRoaXMudXBkYXRlQm9keSA9IGZ1bmN0aW9uIChib2R5KSB7XG4gICAgYm9keVsnZGF0YSddWydUT0tFTiddID0gand0VG9rZW47XG4gIH07XG5cbiAgLyoqXG4gICAqIExvYWQgcHJpdmF0ZSBrZXkgZnJvbSBzcGVjaWZpZWQgZmlsZSBsb2NhdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IHByaXZhdGVLZXlQYXRoXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwcml2YXRlS2V5UGFzc1xuICAgKlxuICAgKiBAcmV0dXJucyB7U3RyaW5nfSB0aGUgcHJpdmF0ZSBrZXkuXG4gICAqL1xuICBmdW5jdGlvbiBsb2FkUHJpdmF0ZUtleShwcml2YXRlS2V5UGF0aCwgcHJpdmF0ZUtleVBhc3MpIHtcbiAgICAvLyBMb2FkIHByaXZhdGUga2V5IGZpbGVcbiAgICBjb25zdCBwcml2YXRlS2V5RmlsZSA9IGZzLnJlYWRGaWxlU3luYyhwcml2YXRlS2V5UGF0aCk7XG5cbiAgICBsZXQgcHJpdmF0ZUtleU9iamVjdDtcblxuICAgIC8vIEZvciBlbmNyeXB0ZWQgcHJpdmF0ZSBrZXlcbiAgICBpZiAocHJpdmF0ZUtleVBhc3MpIHtcbiAgICAgIC8vIEdldCBwcml2YXRlIGtleSB3aXRoIHBhc3NwaHJhc2VcbiAgICAgIHByaXZhdGVLZXlPYmplY3QgPSBjcnlwdG8uY3JlYXRlUHJpdmF0ZUtleSh7XG4gICAgICAgIGtleTogcHJpdmF0ZUtleUZpbGUsXG4gICAgICAgIGZvcm1hdDogJ3BlbScsXG4gICAgICAgIHBhc3NwaHJhc2U6IHByaXZhdGVLZXlQYXNzXG4gICAgICB9KTtcblxuICAgIH0gZWxzZSB7IC8vIEZvciB1bmVuY3J5cHRlZCBwcml2YXRlIGtleVxuICAgICAgcHJpdmF0ZUtleU9iamVjdCA9IGNyeXB0by5jcmVhdGVQcml2YXRlS2V5KHtcbiAgICAgICAga2V5OiBwcml2YXRlS2V5RmlsZSxcbiAgICAgICAgZm9ybWF0OiAncGVtJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29uc3QgcHJpdmF0ZUtleSA9IHByaXZhdGVLZXlPYmplY3QuZXhwb3J0KHtcbiAgICAgIGZvcm1hdDogJ3BlbScsXG4gICAgICB0eXBlOiAncGtjczgnXG4gICAgfSk7XG5cbiAgICByZXR1cm4gcHJpdmF0ZUtleTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgcHVibGljIGtleSBmaW5nZXJwcmludCBmcm9tIHByaXZhdGUga2V5LlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gcHJpdmF0ZUtleVxuICAgKlxuICAgKiBAcmV0dXJucyB7U3RyaW5nfSB0aGUgcHVibGljIGtleSBmaW5nZXJwcmludC5cbiAgICovXG4gIGZ1bmN0aW9uIGNhbGN1bGF0ZVB1YmxpY0tleUZpbmdlcnByaW50KHByaXZhdGVLZXkpIHtcbiAgICAvLyBFeHRyYWN0IHB1YmxpYyBrZXkgb2JqZWN0IGZyb20gcHJpdmF0ZSBrZXlcbiAgICBjb25zdCBwdWJLZXlPYmplY3QgPSBjcnlwdG8uY3JlYXRlUHVibGljS2V5KHtcbiAgICAgIGtleTogcHJpdmF0ZUtleSxcbiAgICAgIGZvcm1hdDogJ3BlbSdcbiAgICB9KTtcblxuICAgIC8vIE9idGFpbiBwdWJsaWMga2V5IHN0cmluZ1xuICAgIGNvbnN0IHB1YmxpY0tleSA9IHB1YktleU9iamVjdC5leHBvcnQoe1xuICAgICAgZm9ybWF0OiAnZGVyJyxcbiAgICAgIHR5cGU6ICdzcGtpJ1xuICAgIH0pO1xuXG4gICAgLy8gR2VuZXJhdGUgU0hBMjU2IGhhc2ggb2YgcHVibGljIGtleSBhbmQgZW5jb2RlIGluIGJhc2U2NFxuICAgIGNvbnN0IHB1YmxpY0tleUZpbmdlcnByaW50ID0gJ1NIQTI1NjonICtcbiAgICAgIGNyeXB0by5jcmVhdGVIYXNoKCdzaGEyNTYnKVxuICAgICAgICAudXBkYXRlKHB1YmxpY0tleSwgJ3V0ZjgnKVxuICAgICAgICAuZGlnZXN0KCdiYXNlNjQnKTtcblxuICAgIHJldHVybiBwdWJsaWNLZXlGaW5nZXJwcmludDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBKV1QgdG9rZW4gdXNpbmcgUlMyNTYgYWxnb3JpdGhtLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gYXV0aGVudGljYXRvclxuICAgKiBAcGFyYW0ge1N0cmluZ30gc2VydmljZU5hbWVcbiAgICogQHBhcmFtIHtTdHJpbmd9IGFjY291bnRcbiAgICogQHBhcmFtIHtTdHJpbmd9IHVzZXJuYW1lXG4gICAqXG4gICAqIEByZXR1cm5zIHtudWxsfVxuICAgKi9cbiAgdGhpcy5hdXRoZW50aWNhdGUgPSBhc3luYyBmdW5jdGlvbiAoYXV0aGVudGljYXRvciwgc2VydmljZU5hbWUsIGFjY291bnQsIHVzZXJuYW1lKSB7XG4gICAgbGV0IHB1YmxpY0tleUZpbmdlcnByaW50O1xuXG4gICAgLy8gVXNlIHByaXZhdGUga2V5IGlmIGFscmVhZHkgc2V0IGluIGNvbm5lY3Rpb24gc3RyaW5nLCBvdGhlcndpc2UgdXNlIHByaXZhdGUga2V5IGZpbGUgbG9jYXRpb25cbiAgICBpZiAocHJpdmF0ZUtleSkge1xuICAgICAgLy8gR2V0IHB1YmxpYyBrZXkgZmluZ2VycHJpbnRcbiAgICAgIHB1YmxpY0tleUZpbmdlcnByaW50ID0gY2FsY3VsYXRlUHVibGljS2V5RmluZ2VycHJpbnQocHJpdmF0ZUtleSk7XG4gICAgfSBlbHNlIGlmIChwcml2YXRlS2V5UGF0aCkge1xuICAgICAgLy8gRXh0cmFjdCBwcml2YXRlIGtleSBhbmQgZ2V0IGZpbmdlcnByaW50XG4gICAgICBwcml2YXRlS2V5ID0gbG9hZFByaXZhdGVLZXkocHJpdmF0ZUtleVBhdGgsIHByaXZhdGVLZXlQYXNzKTtcbiAgICAgIHB1YmxpY0tleUZpbmdlcnByaW50ID0gY2FsY3VsYXRlUHVibGljS2V5RmluZ2VycHJpbnQocHJpdmF0ZUtleSk7XG4gICAgfVxuXG4gICAgLy8gQ3VycmVudCB0aW1lICsgMTIwIHNlY29uZHNcbiAgICBjb25zdCBjdXJyZW50VGltZSA9IERhdGUubm93KCk7XG4gICAgY29uc3Qgand0VG9rZW5FeHAgPSBjdXJyZW50VGltZSArIChMSUZFVElNRSAqIDEwMDApO1xuXG4gICAgLy8gQ3JlYXRlIHBheWxvYWQgY29udGFpbmluZyBqd3QgdG9rZW4gYW5kIGxpZmV0aW1lIHNwYW5cbiAgICBjb25zdCBwYXlsb2FkID0ge1xuICAgICAgW0lTU1VFUl06IHV0aWwuZm9ybWF0KCclcy4lcy4lcycsIGFjY291bnQudG9VcHBlckNhc2UoKSwgdXNlcm5hbWUudG9VcHBlckNhc2UoKSwgcHVibGljS2V5RmluZ2VycHJpbnQpLFxuICAgICAgW1NVQkpFQ1RdOiB1dGlsLmZvcm1hdCgnJXMuJXMnLCBhY2NvdW50LnRvVXBwZXJDYXNlKCksIHVzZXJuYW1lLnRvVXBwZXJDYXNlKCkpLFxuICAgICAgW0lTU1VFX1RJTUVdOiBjdXJyZW50VGltZSxcbiAgICAgIFtFWFBJUkVfVElNRV06IGp3dFRva2VuRXhwXG4gICAgfTtcblxuICAgIC8vIFNpZ24gcGF5bG9hZCB3aXRoIFJTMjU2IGFsZ29yaXRobVxuICAgIGp3dFRva2VuID0gand0LnNpZ24ocGF5bG9hZCwgcHJpdmF0ZUtleSwgeyBhbGdvcml0aG06IEFMR09SSVRITSB9KTtcbiAgfTtcblxuICB0aGlzLnJlYXV0aGVudGljYXRlID0gYXN5bmMgZnVuY3Rpb24gKGJvZHkpIHtcbiAgICB0aGlzLmF1dGhlbnRpY2F0ZShjb25uZWN0aW9uQ29uZmlnLmdldEF1dGhlbnRpY2F0b3IoKSxcbiAgICAgIGNvbm5lY3Rpb25Db25maWcuZ2V0U2VydmljZU5hbWUoKSxcbiAgICAgIGNvbm5lY3Rpb25Db25maWcuYWNjb3VudCxcbiAgICAgIGNvbm5lY3Rpb25Db25maWcudXNlcm5hbWUpO1xuXG4gICAgdGhpcy51cGRhdGVCb2R5KGJvZHkpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEF1dGhLZXlwYWlyO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/lib/authentication/auth_keypair.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/lib/authentication/auth_oauth.js":
/*!*********************************************************************!*\
  !*** ./node_modules/snowflake-sdk/lib/authentication/auth_oauth.js ***!
  \*********************************************************************/
/***/ ((module) => {

eval("/**\n * Creates an oauth authenticator.\n *\n * @param {String} token\n *\n * @returns {Object}\n * @constructor\n */\nfunction AuthOauth(token) {\n  /**\n   * Update JSON body with token.\n   *\n   * @param {JSON} body\n   *\n   * @returns {null}\n   */\n  this.updateBody = function (body) {\n    body['data']['TOKEN'] = token;\n  };\n\n  this.authenticate = async function () {};\n}\n\nmodule.exports = AuthOauth;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9saWIvYXV0aGVudGljYXRpb24vYXV0aF9vYXV0aC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxNQUFNO0FBQ25CO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWN0b3J3aWxzb24vRGVza3RvcC9wcm9qZWN0cy9FWlZpei9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9saWIvYXV0aGVudGljYXRpb24vYXV0aF9vYXV0aC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENyZWF0ZXMgYW4gb2F1dGggYXV0aGVudGljYXRvci5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdG9rZW5cbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fVxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIEF1dGhPYXV0aCh0b2tlbikge1xuICAvKipcbiAgICogVXBkYXRlIEpTT04gYm9keSB3aXRoIHRva2VuLlxuICAgKlxuICAgKiBAcGFyYW0ge0pTT059IGJvZHlcbiAgICpcbiAgICogQHJldHVybnMge251bGx9XG4gICAqL1xuICB0aGlzLnVwZGF0ZUJvZHkgPSBmdW5jdGlvbiAoYm9keSkge1xuICAgIGJvZHlbJ2RhdGEnXVsnVE9LRU4nXSA9IHRva2VuO1xuICB9O1xuXG4gIHRoaXMuYXV0aGVudGljYXRlID0gYXN5bmMgZnVuY3Rpb24gKCkge307XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQXV0aE9hdXRoO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/lib/authentication/auth_oauth.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/lib/authentication/auth_okta.js":
/*!********************************************************************!*\
  !*** ./node_modules/snowflake-sdk/lib/authentication/auth_okta.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const util = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/snowflake-sdk/lib/util.js\");\nconst rest = (__webpack_require__(/*! ../global_config */ \"(rsc)/./node_modules/snowflake-sdk/lib/global_config.js\").rest);\nconst Logger = __webpack_require__(/*! ../logger */ \"(rsc)/./node_modules/snowflake-sdk/lib/logger.js\");\n\n/**\n * Creates an okta authenticator.\n *\n * @param {Object} connectionConfig\n * @param {HttpClient} httpClient\n *\n * @returns {Object}\n * @constructor\n */\nfunction AuthOkta(connectionConfig, httpClient) {\n  const password = connectionConfig.password;\n  const region = connectionConfig.region;\n  const account = connectionConfig.account;\n  const clientAppId = connectionConfig.getClientType();\n  const clientAppVersion = connectionConfig.getClientVersion();\n  const host = util.constructHostname(region, account);\n  const port = rest.HTTPS_PORT;\n  const protocol = rest.HTTPS_PROTOCOL;\n  let user;\n  let ssoUrl;\n  let tokenUrl;\n  let samlResponse;\n\n  /**\n   * Update JSON body with saml response.\n   *\n   * @param {JSON} body\n   *\n   * @returns {null}\n   */\n  this.updateBody = function (body) {\n    body['data']['RAW_SAML_RESPONSE'] = samlResponse;\n  };\n\n  /**\n  * Obtain saml response from Okta.\n  *\n  * @param {String} authenticator\n  * @param {String} serviceName\n  * @param {String} account\n  * @param {String} username\n  *\n  * @returns {null}\n  */\n  this.authenticate = async function (authenticator, serviceName, account, username) {\n    const response = await getAuthURLs(authenticator, serviceName, account, username);\n    const responseData = response['data'];\n    const success = responseData['success'];\n    const errorCode = responseData['code'];\n    const errorMessage = responseData['message'];\n    user = username;\n\n    if (typeof success === 'undefined' || errorCode === 'undefined' || errorMessage === 'undefined') {\n      throw new Error('Unable to use provided Okta address as an authenticator. Is the authenticator URL correct?');\n    }\n\n    if (success !== true) {\n      throw new Error(`Unable to use provided Okta address as an authenticator. Error code: ${errorCode}, error message: ${errorMessage}`);\n    }\n\n    ssoUrl = responseData['data']['ssoUrl'];\n    tokenUrl = responseData['data']['tokenUrl'];\n\n    this.validateURLs(authenticator, ssoUrl, tokenUrl);\n    \n    const responseHtml = await getSAMLResponse( await createAccessToken(tokenUrl, username, password), ssoUrl);\n\n    validateSAML(responseHtml);\n  };\n\n  this.reauthenticate = async function (body, retryOption) {\n    const maxRetryTimeout = connectionConfig.getRetryTimeout();\n    const maxRetryCount = connectionConfig.getRetrySfMaxLoginRetries();\n    const remainingTimeout =  (maxRetryTimeout - retryOption.totalElapsedTime) * 1000;\n\n    const startTime = Date.now();\n    const authRetryOption = {\n      maxRetryCount,\n      numRetries: retryOption.numRetries, \n      startTime,\n      remainingTimeout,\n      maxRetryTimeout,\n    };\n\n    let responseHtml;\n\n    while (util.shouldRetryOktaAuth(authRetryOption)) {\n      try { \n        responseHtml = await getSAMLResponse( await createAccessToken(tokenUrl, user, password), ssoUrl);\n        break;\n      } catch (err) {   \n        Logger.getInstance().debug('getSAMLResponse: refresh token for re-authentication');\n        authRetryOption.numRetries++;\n      }\n    }\n    if (remainingTimeout !== 0 && startTime + remainingTimeout  < Date.now()) {\n      Logger.getInstance().warn(`getSAMLResponse: Fail to get SAML response, timeout reached: ${remainingTimeout} miliseconds`);\n      throw new Error('Reached out to the Login Timeout');\n    }\n\n    if (maxRetryCount < authRetryOption.numRetries){\n      Logger.getInstance().warn(`getSAMLResponse: Fail to get SAML response, max retry reached: ${maxRetryCount} time`);\n      throw new Error('Reached out to the max retry count');\n    }\n    retryOption.totalElapsedTime += ((Date.now() - startTime) / 1000);\n    retryOption.numRetries = authRetryOption.numRetries;\n    validateSAML(responseHtml);\n\n    this.updateBody(body);\n  }; \n\n  /**\n  *\n  * @param {String} authenticator\n  * @param {String} serviceName\n  * @param {String} account\n  * @param {String} username\n  *\n  * @returns {Object}\n  */\n  async function getAuthURLs(authenticator, serviceName, account, username) {\n    // Create URL to send POST request to\n    const url = protocol + '://' + host + '/session/authenticator-request';\n\n    let header;\n    if (serviceName) {\n      header = {\n        'HTTP_HEADER_SERVICE_NAME': serviceName\n      };\n    }\n\n    // JSON body to send with POST request\n    const body = {\n      'data': {\n        'ACCOUNT_NAME': account,\n        'LOGIN_NAME': username,\n        'PORT': port,\n        'PROTOCOL': protocol,\n        'AUTHENTICATOR': authenticator,\n        'CLIENT_APP_ID': clientAppId,\n        'CLIENT_APP_VERSION': clientAppVersion\n      }\n    };\n\n    // POST request to get SSO URL and token URL\n    return await httpClient.post(url, body, {\n      headers: header\n    });\n  }\n\n  /**\n  *\n  * @param {String} authenticator\n  * @param {String} ssoUrl\n  * @param {String} tokenUrl\n  *\n  * @returns {null}\n  */\n  this.validateURLs = function (authenticator, ssoUrl, tokenUrl) {\n    const compareUrlsByProtocolAndHost =  (firstUrl, secondUrl) => firstUrl.protocol === secondUrl.protocol && firstUrl.host === secondUrl.host;\n\n    try {\n      const aUrl = new URL(authenticator);\n      const sUrl = new URL(ssoUrl);\n      const tUrl = new URL(tokenUrl);\n      if (!(compareUrlsByProtocolAndHost(aUrl, sUrl) && compareUrlsByProtocolAndHost(aUrl, tUrl))) {\n        throw new Error('The prefix of the SSO/token URL and the specified authenticator do not match.');\n      }\n    } catch (err) {\n      // we did not get a valid URL to test\n      if (err instanceof TypeError) {\n        throw new Error('Authenticator, SSO, or token URL is invalid.');\n      } else {\n        throw err;\n      }\n    }\n  };\n\n  /**\n  *\n  * @param {String} tokenUrl\n  * @param {String} username\n  * @param {String} password\n  *\n  * @returns {Object}\n  */\n  async function createAccessToken(tokenUrl, username, password) {\n    // JSON body to send with POST request\n    const body = {\n      'username': username,\n      'password': password\n    };\n\n    // Query IDP token url to authenticate and retrieve access token\n    const response = await httpClient.post(tokenUrl, body);\n    const data = response['data'];\n    let oneTimeToken;\n  \n    if (data['sessionToken']) {\n      oneTimeToken = data['sessionToken'];\n    } else {\n      oneTimeToken = data['cookieToken'];\n    }\n    return oneTimeToken;\n  }\n\n  /**\n  *\n  * @param {String} oneTimeToken\n  * @param {String} ssoUrl\n  *\n  * @returns {Object}\n  */\n  async function getSAMLResponse(oneTimeToken, ssoUrl) {\n    // Query IDP URL to get SAML response\n    const response = await httpClient.get(ssoUrl, {\n      params: {\n        'RelayState': '/some/deep/link',\n        'onetimetoken': oneTimeToken,\n      } }\n    );\n\n    return response['data'];\n  }\n\n  /**\n  *\n  * @param {String} responseHtml\n  *\n  * @returns {null}\n  */\n  function validateSAML(responseHtml) {\n    const postBackUrl = getPostBackUrlFromHtml(responseHtml);\n    const fullUrl = util.format('%s://%s:%s', protocol, host, port);    \n\n    // Validate the post back url come back with the SAML response\n    // contains the same prefix as the Snowflake's server url, which is the\n    // intended destination url to Snowflake.\n    if (!connectionConfig.getDisableSamlURLCheck()) {\n      if (postBackUrl.substring(0, 20) !== fullUrl.substring(0, 20)) {\n        throw new Error(util.format('The specified authenticator and destination URL ' +\n          'in the SAML assertion do not match: expected: %s postback: %s', fullUrl, postBackUrl));      \n      }\n    }\n    samlResponse = responseHtml;\n  }\n\n  /**\n  * Extract the postback URL from the HTML response.\n  *\n  * @param {String} html\n  *\n  * @returns {String}\n  */\n  function getPostBackUrlFromHtml(html) {\n    const index = html.search('<form');\n    const startIndex = html.indexOf('action=\"', index);\n    const endIndex = html.indexOf('\"', startIndex + 8);\n\n    return unescapeHtml(html.substring(startIndex + 8, endIndex));\n  }\n\n  /**\n  * Unescape the HTML hex characters in the string.\n  *\n  * @param {String} html\n  *\n  * @returns {String}\n  */\n  function unescapeHtml(html) {\n    return html\n      .replace(/&#x3a;/g, ':')\n      .replace(/&#x2f;/g, '/');\n  }\n}\n\nmodule.exports = AuthOkta;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/lib/authentication/auth_okta.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/lib/authentication/auth_web.js":
/*!*******************************************************************!*\
  !*** ./node_modules/snowflake-sdk/lib/authentication/auth_web.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const util = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/snowflake-sdk/lib/util.js\");\nconst net = __webpack_require__(/*! net */ \"net\");\nconst querystring = __webpack_require__(/*! querystring */ \"querystring\");\nconst URLUtil = __webpack_require__(/*! ./../../lib/url_util */ \"(rsc)/./node_modules/snowflake-sdk/lib/url_util.js\");\nconst Util = __webpack_require__(/*! ./../../lib/util */ \"(rsc)/./node_modules/snowflake-sdk/lib/util.js\");\nconst SsoUrlProvider = __webpack_require__(/*! ../authentication/sso_url_provider */ \"(rsc)/./node_modules/snowflake-sdk/lib/authentication/sso_url_provider.js\");\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst { rest } = __webpack_require__(/*! ../global_config */ \"(rsc)/./node_modules/snowflake-sdk/lib/global_config.js\");\n\n/**\n * Creates an external browser authenticator.\n *\n * @param {Object} connectionConfig\n * @param {Object} httpClient\n * @param {module} webbrowser\n *\n * @returns {Object}\n * @constructor\n */\nfunction AuthWeb(connectionConfig, httpClient, webbrowser) {\n\n  const host = connectionConfig.host;\n  const browserActionTimeout = connectionConfig.getBrowserActionTimeout();\n  const ssoUrlProvider = new SsoUrlProvider(httpClient);\n\n  if (!Util.exists(host)) {\n    throw new Error(`Invalid value for host: ${host}`);\n  }\n  if (!Util.number.isPositiveInteger(browserActionTimeout)) {\n    throw new Error(`Invalid value for browser action timeout: ${browserActionTimeout}`);\n  }\n\n  const open = typeof webbrowser !== 'undefined' ? webbrowser : __webpack_require__(/*! open */ \"(rsc)/./node_modules/open/index.js\");\n\n  let proofKey;\n  let token;\n\n  const successResponse = 'HTTP/1.1 200 OK\\r\\nContent-Type: text/plain\\r\\nConnection: close\\r\\n\\r\\nYour identity was confirmed and propagated to Snowflake Node.js driver. You can close this window now and go back where you started from.';\n\n  /**\n   * Update JSON body with token and proof_key.\n   *\n   * @param {JSON} body\n   *\n   * @returns {null}\n   */\n  this.updateBody = function (body) {\n    body['data']['TOKEN'] = token;\n    body['data']['PROOF_KEY'] = proofKey;\n    body['data']['AUTHENTICATOR'] = 'EXTERNALBROWSER';\n  };\n\n  /**\n   * Obtain SAML token through SSO URL.\n   *\n   * @param {String} authenticator\n   * @param {String} serviceName\n   * @param {String} account\n   * @param {String} username\n   *\n   * @returns {null}\n   */\n  this.authenticate = async function (authenticator, serviceName, account, username) {\n    let server;\n    let loginUrl;\n\n    const receiveData = new Promise( (resolve) => {\n      // Server to receive SAML token\n      server = createServer(resolve);\n    }).then((result) => {\n      return result;\n    });\n\n    // Use a free random port and set to no backlog\n    server.listen(0, 0);\n\n    if (connectionConfig.getDisableConsoleLogin()) {\n      // Step 1: query Snowflake to obtain SSO url\n      const ssoData = await ssoUrlProvider.getSSOURL(authenticator,\n        serviceName,\n        account,\n        server.address().port,\n        username,\n        host);\n\n      proofKey = ssoData['proofKey'];\n      loginUrl = ssoData['ssoUrl'];\n    } else {\n      proofKey = this.generateProofKey();\n      loginUrl = this.getLoginUrl(username, proofKey, server.address().port);\n    }\n   \n    // Step 2: validate URL\n    if (!URLUtil.isValidURL(loginUrl)) {\n      throw new Error(util.format('Invalid SSO URL found - %s ', loginUrl));\n    }\n\n    // Step 3: open browser\n    open(loginUrl);\n\n    // Step 4: get SAML token\n    const tokenGetHttpLine = await withBrowserActionTimeout(browserActionTimeout, receiveData).catch((rejected) => {\n      server.close();\n      throw new Error(util.format('Error while getting SAML token: %s', rejected));\n    });\n    processGet(tokenGetHttpLine);\n  };\n  \n  this.generateProofKey = function () {\n    const randomness = crypto.randomBytes(32);\n    return Buffer.from(randomness, 'utf8').toString('base64');\n  };\n\n  this.getLoginUrl = function (username, proofKey, port) {\n    const url = new URL(rest.HTTPS_PROTOCOL + '://' + host + '/console/login');\n    url.searchParams.append('login_name', username);\n    url.searchParams.append('proof_key', proofKey);\n    url.searchParams.append('browser_mode_redirect_port', port);\n    return url.toString();\n  };\n\n  /**\n   * Create server to retrieve SAML token.\n   *\n   * @param {Function} resolve\n   *\n   * @returns {Server}\n   */\n  function createServer(resolve) {\n    const server = net.createServer(function (socket) {\n      socket.on('data', function (chunk) {\n        // User successfully entered credentials\n        socket.write(successResponse);\n\n        // Receive the data and split by line\n        const data = chunk.toString().split('\\r\\n');\n\n        socket.destroy();\n\n        // Do not close the server until GET request is received\n        if (!data[0].startsWith('GET /?token=')) {\n          return;\n        }\n\n        server.close();\n        resolve(data[0]);\n      });\n      socket.on('error', (socketErr) => {\n        if (socketErr['code'] === 'ECONNRESET') {\n          socket.end();\n        } else {\n          throw socketErr;\n        }\n      });\n    });\n\n    return server;\n  }\n\n  /**\n   * Parse the GET request and get token parameter value.\n   *\n   * @param {String} tokenHttpGetLine\n   *    \n   * @returns {null}\n   */\n  function processGet(tokenHttpGetLine) {\n    // Split the GET request line\n    const data = tokenHttpGetLine.split(' ');\n\n    // Get value of the \"token\" query parameter\n    token = querystring.parse(data[1])['/?token'];\n  }\n\n  const withBrowserActionTimeout = (millis, promise) => {\n    const timeout = new Promise((resolve, reject) =>\n      setTimeout(\n        () => reject(`Browser action timed out after ${browserActionTimeout} ms.`),\n        millis));\n    return Promise.race([\n      promise,\n      timeout\n    ]);\n  };\n}\n\nmodule.exports = AuthWeb;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/lib/authentication/auth_web.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/lib/authentication/authentication.js":
/*!*************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/lib/authentication/authentication.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const AuthDefault = __webpack_require__(/*! ./auth_default */ \"(rsc)/./node_modules/snowflake-sdk/lib/authentication/auth_default.js\");\nconst AuthWeb = __webpack_require__(/*! ./auth_web */ \"(rsc)/./node_modules/snowflake-sdk/lib/authentication/auth_web.js\");\nconst AuthKeypair = __webpack_require__(/*! ./auth_keypair */ \"(rsc)/./node_modules/snowflake-sdk/lib/authentication/auth_keypair.js\");\nconst AuthOauth = __webpack_require__(/*! ./auth_oauth */ \"(rsc)/./node_modules/snowflake-sdk/lib/authentication/auth_oauth.js\");\nconst AuthOkta = __webpack_require__(/*! ./auth_okta */ \"(rsc)/./node_modules/snowflake-sdk/lib/authentication/auth_okta.js\");\nconst AuthIDToken = __webpack_require__(/*! ./auth_idtoken */ \"(rsc)/./node_modules/snowflake-sdk/lib/authentication/auth_idtoken.js\");\nconst Logger = __webpack_require__(/*! ../logger */ \"(rsc)/./node_modules/snowflake-sdk/lib/logger.js\");\nconst AuthenticationTypes = __webpack_require__(/*! ./authentication_types */ \"(rsc)/./node_modules/snowflake-sdk/lib/authentication/authentication_types.js\");\n\n/**\n * Returns the JSON body to be sent when connecting.\n *\n * @param {String} authenticator\n * @param {String} account\n * @param {String} username\n * @param {String} clientType\n * @param {String} clientVersion\n * @param {Object} clientEnv\n *\n * @returns {JSON}\n */\nexports.formAuthJSON = function formAuthJSON(\n  authenticator,\n  account,\n  username,\n  clientType,\n  clientVersion,\n  clientEnv\n) {\n  const body = {\n    data: {\n      ACCOUNT_NAME: account,\n      CLIENT_APP_ID: clientType,\n      CLIENT_APP_VERSION: clientVersion,\n      CLIENT_ENVIRONMENT:\n        {\n          OS: clientEnv.OS,\n          OS_VERSION: clientEnv.OS_VERSION,\n          OCSP_MODE: clientEnv.OCSP_MODE\n        }\n    }\n  };\n  if (!this.isOktaAuth(authenticator)) {\n    body['data']['AUTHENTICATOR'] = authenticator;\n    body['data']['LOGIN_NAME'] = username;\n  }\n\n  return body;\n};\n\n/**\n * Returns the authenticator to use base on the connection configuration.\n *\n * @param {Object} connectionConfig\n * @param httpClient\n *\n * @returns {Object} the authenticator.\n */\nexports.getAuthenticator = function getAuthenticator(connectionConfig, httpClient) {\n  const authType = connectionConfig.getAuthenticator();\n  const openExternalBrowserCallback = connectionConfig.openExternalBrowserCallback; // Important for SSO in the Snowflake VS Code extension\n  let auth;\n  if (authType === AuthenticationTypes.DEFAULT_AUTHENTICATOR || authType === AuthenticationTypes.USER_PWD_MFA_AUTHENTICATOR) {\n    auth = new AuthDefault(connectionConfig);\n  } else if (authType === AuthenticationTypes.EXTERNAL_BROWSER_AUTHENTICATOR) {\n    if (connectionConfig.getClientStoreTemporaryCredential() && !!connectionConfig.idToken) {\n      auth = new AuthIDToken(connectionConfig, httpClient, openExternalBrowserCallback);\n    } else {\n      auth = new AuthWeb(connectionConfig, httpClient, openExternalBrowserCallback);\n    }\n  } else if (authType === AuthenticationTypes.KEY_PAIR_AUTHENTICATOR) {\n    auth = new AuthKeypair(connectionConfig);\n  } else if (authType === AuthenticationTypes.OAUTH_AUTHENTICATOR) {\n    auth = new AuthOauth(connectionConfig.getToken());\n  } else if (this.isOktaAuth(authType)) {\n    auth = new AuthOkta(connectionConfig, httpClient);\n  } else {\n    // Authenticator specified does not exist\n    Logger.getInstance().warn(`No authenticator found for '${authType}'. Using default authenticator as a fallback`);\n    auth = new AuthDefault(connectionConfig);\n  }\n  return auth;\n};\n\n/**\n * Returns the boolean describing if the provided authenticator is okta or not.\n *\n * @param {String} authenticator\n * @returns {boolean}\n */\nexports.isOktaAuth = function isOktaAuth(authenticator) {\n  return authenticator.toUpperCase().startsWith('HTTPS://');\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9saWIvYXV0aGVudGljYXRpb24vYXV0aGVudGljYXRpb24uanMiLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CLG1CQUFPLENBQUMsNkZBQWdCO0FBQzVDLGdCQUFnQixtQkFBTyxDQUFDLHFGQUFZO0FBQ3BDLG9CQUFvQixtQkFBTyxDQUFDLDZGQUFnQjtBQUM1QyxrQkFBa0IsbUJBQU8sQ0FBQyx5RkFBYztBQUN4QyxpQkFBaUIsbUJBQU8sQ0FBQyx1RkFBYTtBQUN0QyxvQkFBb0IsbUJBQU8sQ0FBQyw2RkFBZ0I7QUFDNUMsZUFBZSxtQkFBTyxDQUFDLG1FQUFXO0FBQ2xDLDRCQUE0QixtQkFBTyxDQUFDLDZHQUF3Qjs7QUFFNUQ7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkI7QUFDQSxhQUFhO0FBQ2I7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckI7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQSxvRkFBb0Y7QUFDcEY7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLElBQUk7QUFDSjtBQUNBLElBQUk7QUFDSjtBQUNBLElBQUk7QUFDSjtBQUNBLDZEQUE2RCxTQUFTO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixhQUFhO0FBQ2I7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcndpbHNvbi9EZXNrdG9wL3Byb2plY3RzL0VaVml6L25vZGVfbW9kdWxlcy9zbm93Zmxha2Utc2RrL2xpYi9hdXRoZW50aWNhdGlvbi9hdXRoZW50aWNhdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBBdXRoRGVmYXVsdCA9IHJlcXVpcmUoJy4vYXV0aF9kZWZhdWx0Jyk7XG5jb25zdCBBdXRoV2ViID0gcmVxdWlyZSgnLi9hdXRoX3dlYicpO1xuY29uc3QgQXV0aEtleXBhaXIgPSByZXF1aXJlKCcuL2F1dGhfa2V5cGFpcicpO1xuY29uc3QgQXV0aE9hdXRoID0gcmVxdWlyZSgnLi9hdXRoX29hdXRoJyk7XG5jb25zdCBBdXRoT2t0YSA9IHJlcXVpcmUoJy4vYXV0aF9va3RhJyk7XG5jb25zdCBBdXRoSURUb2tlbiA9IHJlcXVpcmUoJy4vYXV0aF9pZHRva2VuJyk7XG5jb25zdCBMb2dnZXIgPSByZXF1aXJlKCcuLi9sb2dnZXInKTtcbmNvbnN0IEF1dGhlbnRpY2F0aW9uVHlwZXMgPSByZXF1aXJlKCcuL2F1dGhlbnRpY2F0aW9uX3R5cGVzJyk7XG5cbi8qKlxuICogUmV0dXJucyB0aGUgSlNPTiBib2R5IHRvIGJlIHNlbnQgd2hlbiBjb25uZWN0aW5nLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBhdXRoZW50aWNhdG9yXG4gKiBAcGFyYW0ge1N0cmluZ30gYWNjb3VudFxuICogQHBhcmFtIHtTdHJpbmd9IHVzZXJuYW1lXG4gKiBAcGFyYW0ge1N0cmluZ30gY2xpZW50VHlwZVxuICogQHBhcmFtIHtTdHJpbmd9IGNsaWVudFZlcnNpb25cbiAqIEBwYXJhbSB7T2JqZWN0fSBjbGllbnRFbnZcbiAqXG4gKiBAcmV0dXJucyB7SlNPTn1cbiAqL1xuZXhwb3J0cy5mb3JtQXV0aEpTT04gPSBmdW5jdGlvbiBmb3JtQXV0aEpTT04oXG4gIGF1dGhlbnRpY2F0b3IsXG4gIGFjY291bnQsXG4gIHVzZXJuYW1lLFxuICBjbGllbnRUeXBlLFxuICBjbGllbnRWZXJzaW9uLFxuICBjbGllbnRFbnZcbikge1xuICBjb25zdCBib2R5ID0ge1xuICAgIGRhdGE6IHtcbiAgICAgIEFDQ09VTlRfTkFNRTogYWNjb3VudCxcbiAgICAgIENMSUVOVF9BUFBfSUQ6IGNsaWVudFR5cGUsXG4gICAgICBDTElFTlRfQVBQX1ZFUlNJT046IGNsaWVudFZlcnNpb24sXG4gICAgICBDTElFTlRfRU5WSVJPTk1FTlQ6XG4gICAgICAgIHtcbiAgICAgICAgICBPUzogY2xpZW50RW52Lk9TLFxuICAgICAgICAgIE9TX1ZFUlNJT046IGNsaWVudEVudi5PU19WRVJTSU9OLFxuICAgICAgICAgIE9DU1BfTU9ERTogY2xpZW50RW52Lk9DU1BfTU9ERVxuICAgICAgICB9XG4gICAgfVxuICB9O1xuICBpZiAoIXRoaXMuaXNPa3RhQXV0aChhdXRoZW50aWNhdG9yKSkge1xuICAgIGJvZHlbJ2RhdGEnXVsnQVVUSEVOVElDQVRPUiddID0gYXV0aGVudGljYXRvcjtcbiAgICBib2R5WydkYXRhJ11bJ0xPR0lOX05BTUUnXSA9IHVzZXJuYW1lO1xuICB9XG5cbiAgcmV0dXJuIGJvZHk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGF1dGhlbnRpY2F0b3IgdG8gdXNlIGJhc2Ugb24gdGhlIGNvbm5lY3Rpb24gY29uZmlndXJhdGlvbi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29ubmVjdGlvbkNvbmZpZ1xuICogQHBhcmFtIGh0dHBDbGllbnRcbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fSB0aGUgYXV0aGVudGljYXRvci5cbiAqL1xuZXhwb3J0cy5nZXRBdXRoZW50aWNhdG9yID0gZnVuY3Rpb24gZ2V0QXV0aGVudGljYXRvcihjb25uZWN0aW9uQ29uZmlnLCBodHRwQ2xpZW50KSB7XG4gIGNvbnN0IGF1dGhUeXBlID0gY29ubmVjdGlvbkNvbmZpZy5nZXRBdXRoZW50aWNhdG9yKCk7XG4gIGNvbnN0IG9wZW5FeHRlcm5hbEJyb3dzZXJDYWxsYmFjayA9IGNvbm5lY3Rpb25Db25maWcub3BlbkV4dGVybmFsQnJvd3NlckNhbGxiYWNrOyAvLyBJbXBvcnRhbnQgZm9yIFNTTyBpbiB0aGUgU25vd2ZsYWtlIFZTIENvZGUgZXh0ZW5zaW9uXG4gIGxldCBhdXRoO1xuICBpZiAoYXV0aFR5cGUgPT09IEF1dGhlbnRpY2F0aW9uVHlwZXMuREVGQVVMVF9BVVRIRU5USUNBVE9SIHx8IGF1dGhUeXBlID09PSBBdXRoZW50aWNhdGlvblR5cGVzLlVTRVJfUFdEX01GQV9BVVRIRU5USUNBVE9SKSB7XG4gICAgYXV0aCA9IG5ldyBBdXRoRGVmYXVsdChjb25uZWN0aW9uQ29uZmlnKTtcbiAgfSBlbHNlIGlmIChhdXRoVHlwZSA9PT0gQXV0aGVudGljYXRpb25UeXBlcy5FWFRFUk5BTF9CUk9XU0VSX0FVVEhFTlRJQ0FUT1IpIHtcbiAgICBpZiAoY29ubmVjdGlvbkNvbmZpZy5nZXRDbGllbnRTdG9yZVRlbXBvcmFyeUNyZWRlbnRpYWwoKSAmJiAhIWNvbm5lY3Rpb25Db25maWcuaWRUb2tlbikge1xuICAgICAgYXV0aCA9IG5ldyBBdXRoSURUb2tlbihjb25uZWN0aW9uQ29uZmlnLCBodHRwQ2xpZW50LCBvcGVuRXh0ZXJuYWxCcm93c2VyQ2FsbGJhY2spO1xuICAgIH0gZWxzZSB7XG4gICAgICBhdXRoID0gbmV3IEF1dGhXZWIoY29ubmVjdGlvbkNvbmZpZywgaHR0cENsaWVudCwgb3BlbkV4dGVybmFsQnJvd3NlckNhbGxiYWNrKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoYXV0aFR5cGUgPT09IEF1dGhlbnRpY2F0aW9uVHlwZXMuS0VZX1BBSVJfQVVUSEVOVElDQVRPUikge1xuICAgIGF1dGggPSBuZXcgQXV0aEtleXBhaXIoY29ubmVjdGlvbkNvbmZpZyk7XG4gIH0gZWxzZSBpZiAoYXV0aFR5cGUgPT09IEF1dGhlbnRpY2F0aW9uVHlwZXMuT0FVVEhfQVVUSEVOVElDQVRPUikge1xuICAgIGF1dGggPSBuZXcgQXV0aE9hdXRoKGNvbm5lY3Rpb25Db25maWcuZ2V0VG9rZW4oKSk7XG4gIH0gZWxzZSBpZiAodGhpcy5pc09rdGFBdXRoKGF1dGhUeXBlKSkge1xuICAgIGF1dGggPSBuZXcgQXV0aE9rdGEoY29ubmVjdGlvbkNvbmZpZywgaHR0cENsaWVudCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gQXV0aGVudGljYXRvciBzcGVjaWZpZWQgZG9lcyBub3QgZXhpc3RcbiAgICBMb2dnZXIuZ2V0SW5zdGFuY2UoKS53YXJuKGBObyBhdXRoZW50aWNhdG9yIGZvdW5kIGZvciAnJHthdXRoVHlwZX0nLiBVc2luZyBkZWZhdWx0IGF1dGhlbnRpY2F0b3IgYXMgYSBmYWxsYmFja2ApO1xuICAgIGF1dGggPSBuZXcgQXV0aERlZmF1bHQoY29ubmVjdGlvbkNvbmZpZyk7XG4gIH1cbiAgcmV0dXJuIGF1dGg7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGJvb2xlYW4gZGVzY3JpYmluZyBpZiB0aGUgcHJvdmlkZWQgYXV0aGVudGljYXRvciBpcyBva3RhIG9yIG5vdC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gYXV0aGVudGljYXRvclxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmV4cG9ydHMuaXNPa3RhQXV0aCA9IGZ1bmN0aW9uIGlzT2t0YUF1dGgoYXV0aGVudGljYXRvcikge1xuICByZXR1cm4gYXV0aGVudGljYXRvci50b1VwcGVyQ2FzZSgpLnN0YXJ0c1dpdGgoJ0hUVFBTOi8vJyk7XG59O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/lib/authentication/authentication.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/lib/authentication/authentication_types.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/lib/authentication/authentication_types.js ***!
  \*******************************************************************************/
/***/ ((module) => {

eval("const AuthenticationTypes =\n{\n  DEFAULT_AUTHENTICATOR: 'SNOWFLAKE', // default authenticator name\n  EXTERNAL_BROWSER_AUTHENTICATOR: 'EXTERNALBROWSER',\n  KEY_PAIR_AUTHENTICATOR: 'SNOWFLAKE_JWT',\n  OAUTH_AUTHENTICATOR: 'OAUTH',\n  USER_PWD_MFA_AUTHENTICATOR: 'USERNAME_PASSWORD_MFA',\n  ID_TOKEN_AUTHENTICATOR: 'ID_TOKEN',\n};\n\nmodule.exports = AuthenticationTypes;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9saWIvYXV0aGVudGljYXRpb24vYXV0aGVudGljYXRpb25fdHlwZXMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyIvVXNlcnMvdmljdG9yd2lsc29uL0Rlc2t0b3AvcHJvamVjdHMvRVpWaXovbm9kZV9tb2R1bGVzL3Nub3dmbGFrZS1zZGsvbGliL2F1dGhlbnRpY2F0aW9uL2F1dGhlbnRpY2F0aW9uX3R5cGVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEF1dGhlbnRpY2F0aW9uVHlwZXMgPVxue1xuICBERUZBVUxUX0FVVEhFTlRJQ0FUT1I6ICdTTk9XRkxBS0UnLCAvLyBkZWZhdWx0IGF1dGhlbnRpY2F0b3IgbmFtZVxuICBFWFRFUk5BTF9CUk9XU0VSX0FVVEhFTlRJQ0FUT1I6ICdFWFRFUk5BTEJST1dTRVInLFxuICBLRVlfUEFJUl9BVVRIRU5USUNBVE9SOiAnU05PV0ZMQUtFX0pXVCcsXG4gIE9BVVRIX0FVVEhFTlRJQ0FUT1I6ICdPQVVUSCcsXG4gIFVTRVJfUFdEX01GQV9BVVRIRU5USUNBVE9SOiAnVVNFUk5BTUVfUEFTU1dPUkRfTUZBJyxcbiAgSURfVE9LRU5fQVVUSEVOVElDQVRPUjogJ0lEX1RPS0VOJyxcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQXV0aGVudGljYXRpb25UeXBlczsiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/lib/authentication/authentication_types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/lib/authentication/secure_storage/json_credential_manager.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/lib/authentication/secure_storage/json_credential_manager.js ***!
  \*************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const path = __webpack_require__(/*! path */ \"path\");\nconst Logger = __webpack_require__(/*! ../../logger */ \"(rsc)/./node_modules/snowflake-sdk/lib/logger.js\");\nconst fs = __webpack_require__(/*! node:fs/promises */ \"node:fs/promises\");\nconst os = __webpack_require__(/*! os */ \"os\");\nconst Util = __webpack_require__(/*! ../../util */ \"(rsc)/./node_modules/snowflake-sdk/lib/util.js\");\nconst { validateOnlyUserReadWritePermissionAndOwner } = __webpack_require__(/*! ../../file_util */ \"(rsc)/./node_modules/snowflake-sdk/lib/file_util.js\");\n\nfunction JsonCredentialManager(credentialCacheDir) {\n  \n  this.getTokenDir = async function () {\n    let tokenDir = credentialCacheDir;\n    if (!Util.exists(tokenDir)) {\n      tokenDir = os.homedir();\n    } else {\n      Logger.getInstance().info(`The credential cache directory is configured by the user. The token will be saved at ${tokenDir}`);\n    }\n\n    if (!Util.exists(tokenDir)) {\n      throw new Error(`Temporary credential cache directory is invalid, and the driver is unable to use the default location(home). \n      Please set 'credentialCacheDir' connection configuration option to enable the default credential manager.`);\n    }\n\n    const tokenCacheFile = path.join(tokenDir, 'temporary_credential.json');\n    await validateOnlyUserReadWritePermissionAndOwner(tokenCacheFile);\n    return tokenCacheFile;\n  };\n   \n  this.readJsonCredentialFile = async function () {\n    try {\n      const cred = await fs.readFile(await this.getTokenDir(), 'utf8');\n      return JSON.parse(cred);\n    } catch (err) {\n      Logger.getInstance().warn('Failed to read token data from the file. Err: %s', err.message);\n      return null;\n    }\n  };\n  \n  this.write = async function (key, token) {\n    if (!validateTokenCacheOption(key)) {\n      return null;\n    }\n  \n    const jsonCredential = await this.readJsonCredentialFile() || {};\n    jsonCredential[key] = token;\n   \n    try {\n      await fs.writeFile(await this.getTokenDir(), JSON.stringify(jsonCredential), { mode: 0o600 });\n    } catch (err) {\n      throw new Error(`Failed to write token data. Please check the permission or the file format of the token. ${err.message}`);\n    }\n  };\n  \n  this.read = async function (key) {\n    if (!validateTokenCacheOption(key)) {\n      return null;\n    }\n\n    const jsonCredential = await this.readJsonCredentialFile();\n    if (!!jsonCredential && jsonCredential[key]){\n      return jsonCredential[key];\n    } else {\n      return null;\n    }\n  };\n  \n  this.remove = async function (key) {\n    if (!validateTokenCacheOption(key)) {\n      return null;\n    }\n    const jsonCredential = await this.readJsonCredentialFile();\n    \n    if (jsonCredential && jsonCredential[key]) {\n      try {\n        jsonCredential[key] = null;\n        await fs.writeFile(await this.getTokenDir(), JSON.stringify(jsonCredential), { mode: 0o600 });\n      } catch (err) {\n        throw new Error(`Failed to write token data from the file in ${await this.getTokenDir()}. Please check the permission or the file format of the token. ${err.message}`);\n      } \n    }\n  };\n\n  function validateTokenCacheOption(key) {\n    return Util.checkParametersDefined(key); \n  }\n}\n\nmodule.exports = JsonCredentialManager;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9saWIvYXV0aGVudGljYXRpb24vc2VjdXJlX3N0b3JhZ2UvanNvbl9jcmVkZW50aWFsX21hbmFnZXIuanMiLCJtYXBwaW5ncyI6IkFBQUEsYUFBYSxtQkFBTyxDQUFDLGtCQUFNO0FBQzNCLGVBQWUsbUJBQU8sQ0FBQyxzRUFBYztBQUNyQyxXQUFXLG1CQUFPLENBQUMsMENBQWtCO0FBQ3JDLFdBQVcsbUJBQU8sQ0FBQyxjQUFJO0FBQ3ZCLGFBQWEsbUJBQU8sQ0FBQyxrRUFBWTtBQUNqQyxRQUFRLDhDQUE4QyxFQUFFLG1CQUFPLENBQUMsNEVBQWlCOztBQUVqRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ04sd0hBQXdILFNBQVM7QUFDakk7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxRkFBcUYsYUFBYTtBQUNsRyxNQUFNO0FBQ04sa0hBQWtILFlBQVk7QUFDOUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUZBQXVGLGFBQWE7QUFDcEcsUUFBUTtBQUNSLHVFQUF1RSx5QkFBeUIsaUVBQWlFLFlBQVk7QUFDN0s7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyIvVXNlcnMvdmljdG9yd2lsc29uL0Rlc2t0b3AvcHJvamVjdHMvRVpWaXovbm9kZV9tb2R1bGVzL3Nub3dmbGFrZS1zZGsvbGliL2F1dGhlbnRpY2F0aW9uL3NlY3VyZV9zdG9yYWdlL2pzb25fY3JlZGVudGlhbF9tYW5hZ2VyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5jb25zdCBMb2dnZXIgPSByZXF1aXJlKCcuLi8uLi9sb2dnZXInKTtcbmNvbnN0IGZzID0gcmVxdWlyZSgnbm9kZTpmcy9wcm9taXNlcycpO1xuY29uc3Qgb3MgPSByZXF1aXJlKCdvcycpO1xuY29uc3QgVXRpbCA9IHJlcXVpcmUoJy4uLy4uL3V0aWwnKTtcbmNvbnN0IHsgdmFsaWRhdGVPbmx5VXNlclJlYWRXcml0ZVBlcm1pc3Npb25BbmRPd25lciB9ID0gcmVxdWlyZSgnLi4vLi4vZmlsZV91dGlsJyk7XG5cbmZ1bmN0aW9uIEpzb25DcmVkZW50aWFsTWFuYWdlcihjcmVkZW50aWFsQ2FjaGVEaXIpIHtcbiAgXG4gIHRoaXMuZ2V0VG9rZW5EaXIgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IHRva2VuRGlyID0gY3JlZGVudGlhbENhY2hlRGlyO1xuICAgIGlmICghVXRpbC5leGlzdHModG9rZW5EaXIpKSB7XG4gICAgICB0b2tlbkRpciA9IG9zLmhvbWVkaXIoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgTG9nZ2VyLmdldEluc3RhbmNlKCkuaW5mbyhgVGhlIGNyZWRlbnRpYWwgY2FjaGUgZGlyZWN0b3J5IGlzIGNvbmZpZ3VyZWQgYnkgdGhlIHVzZXIuIFRoZSB0b2tlbiB3aWxsIGJlIHNhdmVkIGF0ICR7dG9rZW5EaXJ9YCk7XG4gICAgfVxuXG4gICAgaWYgKCFVdGlsLmV4aXN0cyh0b2tlbkRpcikpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVGVtcG9yYXJ5IGNyZWRlbnRpYWwgY2FjaGUgZGlyZWN0b3J5IGlzIGludmFsaWQsIGFuZCB0aGUgZHJpdmVyIGlzIHVuYWJsZSB0byB1c2UgdGhlIGRlZmF1bHQgbG9jYXRpb24oaG9tZSkuIFxuICAgICAgUGxlYXNlIHNldCAnY3JlZGVudGlhbENhY2hlRGlyJyBjb25uZWN0aW9uIGNvbmZpZ3VyYXRpb24gb3B0aW9uIHRvIGVuYWJsZSB0aGUgZGVmYXVsdCBjcmVkZW50aWFsIG1hbmFnZXIuYCk7XG4gICAgfVxuXG4gICAgY29uc3QgdG9rZW5DYWNoZUZpbGUgPSBwYXRoLmpvaW4odG9rZW5EaXIsICd0ZW1wb3JhcnlfY3JlZGVudGlhbC5qc29uJyk7XG4gICAgYXdhaXQgdmFsaWRhdGVPbmx5VXNlclJlYWRXcml0ZVBlcm1pc3Npb25BbmRPd25lcih0b2tlbkNhY2hlRmlsZSk7XG4gICAgcmV0dXJuIHRva2VuQ2FjaGVGaWxlO1xuICB9O1xuICAgXG4gIHRoaXMucmVhZEpzb25DcmVkZW50aWFsRmlsZSA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgY3JlZCA9IGF3YWl0IGZzLnJlYWRGaWxlKGF3YWl0IHRoaXMuZ2V0VG9rZW5EaXIoKSwgJ3V0ZjgnKTtcbiAgICAgIHJldHVybiBKU09OLnBhcnNlKGNyZWQpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgTG9nZ2VyLmdldEluc3RhbmNlKCkud2FybignRmFpbGVkIHRvIHJlYWQgdG9rZW4gZGF0YSBmcm9tIHRoZSBmaWxlLiBFcnI6ICVzJywgZXJyLm1lc3NhZ2UpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9O1xuICBcbiAgdGhpcy53cml0ZSA9IGFzeW5jIGZ1bmN0aW9uIChrZXksIHRva2VuKSB7XG4gICAgaWYgKCF2YWxpZGF0ZVRva2VuQ2FjaGVPcHRpb24oa2V5KSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICBcbiAgICBjb25zdCBqc29uQ3JlZGVudGlhbCA9IGF3YWl0IHRoaXMucmVhZEpzb25DcmVkZW50aWFsRmlsZSgpIHx8IHt9O1xuICAgIGpzb25DcmVkZW50aWFsW2tleV0gPSB0b2tlbjtcbiAgIFxuICAgIHRyeSB7XG4gICAgICBhd2FpdCBmcy53cml0ZUZpbGUoYXdhaXQgdGhpcy5nZXRUb2tlbkRpcigpLCBKU09OLnN0cmluZ2lmeShqc29uQ3JlZGVudGlhbCksIHsgbW9kZTogMG82MDAgfSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byB3cml0ZSB0b2tlbiBkYXRhLiBQbGVhc2UgY2hlY2sgdGhlIHBlcm1pc3Npb24gb3IgdGhlIGZpbGUgZm9ybWF0IG9mIHRoZSB0b2tlbi4gJHtlcnIubWVzc2FnZX1gKTtcbiAgICB9XG4gIH07XG4gIFxuICB0aGlzLnJlYWQgPSBhc3luYyBmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKCF2YWxpZGF0ZVRva2VuQ2FjaGVPcHRpb24oa2V5KSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QganNvbkNyZWRlbnRpYWwgPSBhd2FpdCB0aGlzLnJlYWRKc29uQ3JlZGVudGlhbEZpbGUoKTtcbiAgICBpZiAoISFqc29uQ3JlZGVudGlhbCAmJiBqc29uQ3JlZGVudGlhbFtrZXldKXtcbiAgICAgIHJldHVybiBqc29uQ3JlZGVudGlhbFtrZXldO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH07XG4gIFxuICB0aGlzLnJlbW92ZSA9IGFzeW5jIGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoIXZhbGlkYXRlVG9rZW5DYWNoZU9wdGlvbihrZXkpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QganNvbkNyZWRlbnRpYWwgPSBhd2FpdCB0aGlzLnJlYWRKc29uQ3JlZGVudGlhbEZpbGUoKTtcbiAgICBcbiAgICBpZiAoanNvbkNyZWRlbnRpYWwgJiYganNvbkNyZWRlbnRpYWxba2V5XSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAganNvbkNyZWRlbnRpYWxba2V5XSA9IG51bGw7XG4gICAgICAgIGF3YWl0IGZzLndyaXRlRmlsZShhd2FpdCB0aGlzLmdldFRva2VuRGlyKCksIEpTT04uc3RyaW5naWZ5KGpzb25DcmVkZW50aWFsKSwgeyBtb2RlOiAwbzYwMCB9KTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byB3cml0ZSB0b2tlbiBkYXRhIGZyb20gdGhlIGZpbGUgaW4gJHthd2FpdCB0aGlzLmdldFRva2VuRGlyKCl9LiBQbGVhc2UgY2hlY2sgdGhlIHBlcm1pc3Npb24gb3IgdGhlIGZpbGUgZm9ybWF0IG9mIHRoZSB0b2tlbi4gJHtlcnIubWVzc2FnZX1gKTtcbiAgICAgIH0gXG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIHZhbGlkYXRlVG9rZW5DYWNoZU9wdGlvbihrZXkpIHtcbiAgICByZXR1cm4gVXRpbC5jaGVja1BhcmFtZXRlcnNEZWZpbmVkKGtleSk7IFxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gSnNvbkNyZWRlbnRpYWxNYW5hZ2VyOyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/lib/authentication/secure_storage/json_credential_manager.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/lib/authentication/sso_url_provider.js":
/*!***************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/lib/authentication/sso_url_provider.js ***!
  \***************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Util = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/snowflake-sdk/lib/util.js\");\nconst Errors = __webpack_require__(/*! ../errors */ \"(rsc)/./node_modules/snowflake-sdk/lib/errors.js\");\nconst { rest } = __webpack_require__(/*! ../global_config */ \"(rsc)/./node_modules/snowflake-sdk/lib/global_config.js\");\n\n/**\n * Creates a new instance of an SsoUrlProvider.\n *\n * @param {Object} httpClient\n * @constructor\n */\nfunction SsoUrlProvider(httpClient) {\n\n  Errors.assertInternal(Util.isObject(httpClient));\n\n  const port = rest.HTTPS_PORT;\n  const protocol = rest.HTTPS_PROTOCOL;\n\n  /**\n   * Get SSO URL through POST request.\n   *\n   * @param {String} authenticator\n   * @param {String} serviceName\n   * @param {String} account\n   * @param {Number} callbackPort\n   * @param {String} user\n   * @param {String} host\n   *\n   * @returns {String} the SSO URL.\n   */\n  this.getSSOURL = function (authenticator, serviceName, account, callbackPort, user, host) {\n    // Create URL to send POST request to\n    const url = protocol + '://' + host + '/session/authenticator-request';\n\n    let header;\n    if (serviceName) {\n      header = {\n        'HTTP_HEADER_SERVICE_NAME': serviceName\n      };\n    }\n    const body = {\n      'data': {\n        'ACCOUNT_NAME': account,\n        'LOGIN_NAME': user,\n        'PORT': port,\n        'PROTOCOL': protocol,\n        'AUTHENTICATOR': authenticator,\n        'BROWSER_MODE_REDIRECT_PORT': callbackPort.toString()\n      }\n    };\n\n    const requestOptions =\n      {\n        method: 'post',\n        url: url,\n        headers: header,\n        data: body,\n        responseType: 'json'\n      };\n\n    // Post request to get the SSO URL\n    return httpClient.requestAsync(requestOptions)\n      .then((response) => {\n        const data = response['data']['data'];\n        return data;\n      })\n      .catch(requestErr => {\n        throw requestErr;\n      });\n  };\n}\n\nmodule.exports = SsoUrlProvider;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9saWIvYXV0aGVudGljYXRpb24vc3NvX3VybF9wcm92aWRlci5qcyIsIm1hcHBpbmdzIjoiQUFBQSxhQUFhLG1CQUFPLENBQUMsK0RBQVM7QUFDOUIsZUFBZSxtQkFBTyxDQUFDLG1FQUFXO0FBQ2xDLFFBQVEsT0FBTyxFQUFFLG1CQUFPLENBQUMsaUZBQWtCOztBQUUzQztBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckI7QUFDQSxlQUFlLFFBQVE7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcndpbHNvbi9EZXNrdG9wL3Byb2plY3RzL0VaVml6L25vZGVfbW9kdWxlcy9zbm93Zmxha2Utc2RrL2xpYi9hdXRoZW50aWNhdGlvbi9zc29fdXJsX3Byb3ZpZGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFV0aWwgPSByZXF1aXJlKCcuLi91dGlsJyk7XG5jb25zdCBFcnJvcnMgPSByZXF1aXJlKCcuLi9lcnJvcnMnKTtcbmNvbnN0IHsgcmVzdCB9ID0gcmVxdWlyZSgnLi4vZ2xvYmFsX2NvbmZpZycpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgYW4gU3NvVXJsUHJvdmlkZXIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGh0dHBDbGllbnRcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBTc29VcmxQcm92aWRlcihodHRwQ2xpZW50KSB7XG5cbiAgRXJyb3JzLmFzc2VydEludGVybmFsKFV0aWwuaXNPYmplY3QoaHR0cENsaWVudCkpO1xuXG4gIGNvbnN0IHBvcnQgPSByZXN0LkhUVFBTX1BPUlQ7XG4gIGNvbnN0IHByb3RvY29sID0gcmVzdC5IVFRQU19QUk9UT0NPTDtcblxuICAvKipcbiAgICogR2V0IFNTTyBVUkwgdGhyb3VnaCBQT1NUIHJlcXVlc3QuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBhdXRoZW50aWNhdG9yXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBzZXJ2aWNlTmFtZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gYWNjb3VudFxuICAgKiBAcGFyYW0ge051bWJlcn0gY2FsbGJhY2tQb3J0XG4gICAqIEBwYXJhbSB7U3RyaW5nfSB1c2VyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBob3N0XG4gICAqXG4gICAqIEByZXR1cm5zIHtTdHJpbmd9IHRoZSBTU08gVVJMLlxuICAgKi9cbiAgdGhpcy5nZXRTU09VUkwgPSBmdW5jdGlvbiAoYXV0aGVudGljYXRvciwgc2VydmljZU5hbWUsIGFjY291bnQsIGNhbGxiYWNrUG9ydCwgdXNlciwgaG9zdCkge1xuICAgIC8vIENyZWF0ZSBVUkwgdG8gc2VuZCBQT1NUIHJlcXVlc3QgdG9cbiAgICBjb25zdCB1cmwgPSBwcm90b2NvbCArICc6Ly8nICsgaG9zdCArICcvc2Vzc2lvbi9hdXRoZW50aWNhdG9yLXJlcXVlc3QnO1xuXG4gICAgbGV0IGhlYWRlcjtcbiAgICBpZiAoc2VydmljZU5hbWUpIHtcbiAgICAgIGhlYWRlciA9IHtcbiAgICAgICAgJ0hUVFBfSEVBREVSX1NFUlZJQ0VfTkFNRSc6IHNlcnZpY2VOYW1lXG4gICAgICB9O1xuICAgIH1cbiAgICBjb25zdCBib2R5ID0ge1xuICAgICAgJ2RhdGEnOiB7XG4gICAgICAgICdBQ0NPVU5UX05BTUUnOiBhY2NvdW50LFxuICAgICAgICAnTE9HSU5fTkFNRSc6IHVzZXIsXG4gICAgICAgICdQT1JUJzogcG9ydCxcbiAgICAgICAgJ1BST1RPQ09MJzogcHJvdG9jb2wsXG4gICAgICAgICdBVVRIRU5USUNBVE9SJzogYXV0aGVudGljYXRvcixcbiAgICAgICAgJ0JST1dTRVJfTU9ERV9SRURJUkVDVF9QT1JUJzogY2FsbGJhY2tQb3J0LnRvU3RyaW5nKClcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgY29uc3QgcmVxdWVzdE9wdGlvbnMgPVxuICAgICAge1xuICAgICAgICBtZXRob2Q6ICdwb3N0JyxcbiAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgIGhlYWRlcnM6IGhlYWRlcixcbiAgICAgICAgZGF0YTogYm9keSxcbiAgICAgICAgcmVzcG9uc2VUeXBlOiAnanNvbidcbiAgICAgIH07XG5cbiAgICAvLyBQb3N0IHJlcXVlc3QgdG8gZ2V0IHRoZSBTU08gVVJMXG4gICAgcmV0dXJuIGh0dHBDbGllbnQucmVxdWVzdEFzeW5jKHJlcXVlc3RPcHRpb25zKVxuICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSByZXNwb25zZVsnZGF0YSddWydkYXRhJ107XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaChyZXF1ZXN0RXJyID0+IHtcbiAgICAgICAgdGhyb3cgcmVxdWVzdEVycjtcbiAgICAgIH0pO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNzb1VybFByb3ZpZGVyO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/lib/authentication/sso_url_provider.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/lib/configuration/client_configuration.js":
/*!******************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/lib/configuration/client_configuration.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const os = __webpack_require__(/*! os */ \"os\");\nconst path = __webpack_require__(/*! path */ \"path\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst { isString, exists, getDriverDirectory } = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/snowflake-sdk/lib/util.js\");\nconst Logger = __webpack_require__(/*! ../logger */ \"(rsc)/./node_modules/snowflake-sdk/lib/logger.js\");\nconst { isFileNotWritableByGroupOrOthers } = __webpack_require__(/*! ../file_util */ \"(rsc)/./node_modules/snowflake-sdk/lib/file_util.js\");\nconst clientConfigFileName = 'sf_client_config.json';\n\nconst Levels = Object.freeze({\n  Off: 'OFF',\n  Error: 'ERROR',\n  Warn: 'WARN',\n  Info: 'INFO',\n  Debug: 'DEBUG',\n  Trace: 'TRACE'\n});\n\nconst defaultDirectories = getDefaultDirectories();\n\nfunction getDefaultDirectories() {\n  const directories = [];\n\n  const driverDirectory = getDriverDirectory();\n  Logger.getInstance().debug(`Detected driver directory: ${driverDirectory}`);\n\n  if (driverDirectory) {\n    directories.push(\n      {\n        dir: driverDirectory,\n        dirDescription: 'driver'\n      }\n    );\n  } else {\n    Logger.getInstance().warn('Driver directory is not defined');\n  }\n\n  const homedir = os.homedir();\n  Logger.getInstance().debug(`Detected home directory: ${homedir}`);\n\n  if (exists(homedir)) {\n    directories.push(\n      {\n        dir: homedir,\n        dirDescription: 'home'\n      }\n    );\n  } else {\n    Logger.getInstance().warn('Home directory of the user is not defined');\n  }\n\n  Logger.getInstance().debug(`Detected default directories: ${driverDirectory}`);\n  return directories;\n}\n\nconst knownCommonEntries = ['log_level', 'log_path'];\nconst allLevels = Object.values(Levels);\n\nclass ClientConfig {\n  constructor(filePath, loggingConfig) {\n    this.configPath = filePath;\n    this.loggingConfig = loggingConfig;\n  }\n}\n\nclass ClientLoggingConfig {\n  constructor(logLevel, logPath) {\n    this.logLevel = logLevel;\n    this.logPath = logPath;\n  }\n}\n\nclass ConfigurationError extends Error {\n  name = 'ConfigurationError';\n\n  constructor(message, cause) {\n    super(message);\n    this.cause = cause;\n    Error.captureStackTrace(this, this.constructor);\n  }\n\n  toString() {\n    return this.message + ': ' + this.cause.toString();\n  }\n}\n\n/**\n * @param value {String} Log level.\n * @return {String} normalized log level value.\n * @throws {Error} Error for unknown value.\n */\nfunction levelFromString(value) {\n  const level = value.toUpperCase();\n  if (!allLevels.includes(level)) {\n\n    Logger.getInstance().error(`Tried to create unsupported log level from string: ${value}`);\n    throw new Error('Unknown log level: ' + value);\n  }\n  return level;\n}\n\n/**\n * @param fsPromisesModule {module} filestream module\n * @param processModule {processModule} process module\n */\nfunction ConfigurationUtil(fsPromisesModule, processModule) {\n\n  const fsPromises = typeof fsPromisesModule !== 'undefined' ? fsPromisesModule : __webpack_require__(/*! fs/promises */ \"fs/promises\");\n  const process = typeof processModule !== 'undefined' ? processModule : __webpack_require__(/*! process */ \"process\");\n\n  /**\n   * @param configFilePath {String} A path to a client config file.\n   * @return {Promise<ClientConfig>} Client configuration.\n   */\n  this.getClientConfig = async function (configFilePath) {\n    Logger.getInstance().debug('Retrieving client config');\n\n    const path = await findConfig(configFilePath);\n    if (!exists(path) || path === '') {\n      Logger.getInstance().info('No config file path found. Client config will not be used.');\n      return null;\n    }\n\n    const isFileOk = await isFileNotWritableByGroupOrOthers(path, fsPromises).catch(err => {\n      Logger.getInstance().warn('Failed to inspect config file path permissions. Client config will not be used.');\n      throw new ConfigurationError('Finding client configuration failed', err);\n    });\n\n    if (!isFileOk) {\n      Logger.getInstance().warn(`Config file path permissions are invalid. File: ${path} can be modified by group or others. Client config will not be used.`);\n      throw new ConfigurationError(`Configuration file: ${path} can be modified by group or others`, 'IncorrectPerms');\n    }\n    Logger.getInstance().debug(`Config file path permissions are valid. Path: ${path}`);\n\n    const configFileContents = await readFileConfig(path);\n    Logger.getInstance().info('Using client configuration from path: %s', path);\n\n    return configFileContents == null ? null : parseConfigFile(path, configFileContents);\n  };\n\n  function readFileConfig(filePath) {\n    Logger.getInstance().debug(`Reading config file. Path: ${filePath}`);\n\n    if (!filePath) {\n      Logger.getInstance().trace(`Path of config file is not specified. Nothing to read. Path: ${filePath}`);\n      return Promise.resolve(null);\n    }\n    return fsPromises.readFile(filePath, { encoding: 'utf8' })\n      .catch(err => {\n        Logger.getInstance().debug(`Reading configuration from the file failed. Path: ${filePath}`);\n        throw new ConfigurationError('Finding client configuration failed', err);\n      });\n  }\n\n  function parseConfigFile(path, configurationJson) {\n    Logger.getInstance().debug('Parsing config file: %s', path);\n    try {\n      const parsedConfiguration = JSON.parse(configurationJson);\n      Logger.getInstance().trace('Config file contains correct JSON structure. Validating the input.');\n\n      checkUnknownEntries(parsedConfiguration);\n      validate(parsedConfiguration);\n\n      Logger.getInstance().debug('Config file contains valid configuration input.');\n\n      const clientConfig = new ClientConfig(\n        path,\n        new ClientLoggingConfig(\n          getLogLevel(parsedConfiguration),\n          getLogPath(parsedConfiguration)\n        )\n      );\n\n      Logger.getInstance().info('Client Configuration created with Log Level: %s and Log Path: %s', clientConfig.loggingConfig.logLevel, clientConfig.loggingConfig.logPath);\n      return clientConfig;\n\n    } catch (err) {\n      Logger.getInstance().error('Parsing client configuration failed. Used config file from path: %s', path);\n      throw new ConfigurationError('Parsing client configuration failed', err);\n    }\n  }\n\n  function checkUnknownEntries(config) {\n    for (const key in config.common) {\n      if (!knownCommonEntries.includes(key.toLowerCase())) {\n        Logger.getInstance().warn('Unknown configuration entry: %s with value: %s', key, config.common[key]);\n      }\n    }\n  }\n\n  function validate(configuration) {\n    validateLogLevel(configuration);\n    validateLogPath(configuration);\n  }\n\n  function validateLogLevel(configuration) {\n    const logLevel = getLogLevel(configuration);\n    if (logLevel == null) {\n      Logger.getInstance().debug('Log level is not specified.');\n      return;\n    }\n    if (!isString(logLevel)) {\n      const errorMessage = 'Log level is not a string.';\n      Logger.getInstance().error(errorMessage);\n      throw new Error(errorMessage);\n    }\n    levelFromString(logLevel);\n  }\n\n  function validateLogPath(configuration) {\n    const logPath = getLogPath(configuration);\n    if (logPath == null) {\n      Logger.getInstance().debug('Log path is not specified');\n      return;\n    }\n    if (!isString(logPath)) {\n      const errorMessage = 'Log path is not a string.';\n      Logger.getInstance().error(errorMessage);\n      throw new Error(errorMessage);\n    }\n  }\n\n  function getLogLevel(configuration) {\n    return configuration.common.log_level;\n  }\n\n  function getLogPath(configuration) {\n    return configuration.common.log_path;\n  }\n\n  async function findConfig(filePathFromConnectionString) {\n    Logger.getInstance().trace(`findConfig() called with param: ${filePathFromConnectionString}`);\n    if (exists(filePathFromConnectionString)) {\n      Logger.getInstance().info('Found client configuration path in a connection string. Path: %s', filePathFromConnectionString);\n      return filePathFromConnectionString;\n    }\n    const filePathFromEnvVariable = await getFilePathFromEnvironmentVariable();\n    if (exists(filePathFromEnvVariable)) {\n      Logger.getInstance().info('Found client configuration path in an environment variable. Path: %s', filePathFromEnvVariable);\n      return filePathFromEnvVariable;\n    }\n    const fileFromDefDirs = await searchForConfigInDefaultDirectories();\n    if (exists(fileFromDefDirs)) {\n      Logger.getInstance().info('Found client configuration path in %s directory. Path: %s', fileFromDefDirs.dirDescription, fileFromDefDirs.configPath);\n      return fileFromDefDirs.configPath;\n    }\n    Logger.getInstance().info('No client config detected.');\n    return null;\n  }\n\n  async function verifyNotEmpty(filePath) {\n    return filePath ? filePath : null;\n  }\n\n  function getFilePathFromEnvironmentVariable() {\n    return verifyNotEmpty(process.env.SF_CLIENT_CONFIG_FILE);\n  }\n\n  async function searchForConfigInDefaultDirectories() {\n    Logger.getInstance().debug(`Searching for config in default directories: ${JSON.stringify(defaultDirectories)}`);\n    for (const directory of defaultDirectories) {\n      const configPath = await searchForConfigInDictionary(directory.dir, directory.dirDescription);\n      if (exists(configPath)) {\n        Logger.getInstance().debug(`Config found in the default directory: ${directory.dir}. Path: ${configPath}`);\n        return { configPath: configPath, dirDescription: directory.dirDescription };\n      }\n    }\n    Logger.getInstance().debug('Unable to find config in any default directory.');\n    return null;\n  }\n\n  async function searchForConfigInDictionary(directory, directoryDescription) {\n    try {\n      const filePath = path.join(directory, clientConfigFileName);\n      return await onlyIfFileExists(filePath);\n    } catch (e) {\n      Logger.getInstance().error('Error while searching for the client config in %s directory: %s', directoryDescription, e);\n      return null;\n    }\n  }\n\n  async function onlyIfFileExists(filePath) {\n    return await fsPromises.access(filePath, fs.constants.F_OK)\n      .then(() => filePath)\n      .catch(() => null);\n  }\n}\n\nexports.Levels = Levels;\nexports.levelFromString = levelFromString;\nexports.ConfigurationUtil = ConfigurationUtil;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/lib/configuration/client_configuration.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/lib/configuration/connection_configuration.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/lib/configuration/connection_configuration.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const toml = __webpack_require__(/*! toml */ \"(rsc)/./node_modules/toml/index.js\");\nconst os = __webpack_require__(/*! os */ \"os\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst { validateOnlyUserReadWritePermissionAndOwner, generateChecksum } = __webpack_require__(/*! ../file_util */ \"(rsc)/./node_modules/snowflake-sdk/lib/file_util.js\");\nconst path = __webpack_require__(/*! path */ \"path\");\nconst Logger = __webpack_require__(/*! ../logger */ \"(rsc)/./node_modules/snowflake-sdk/lib/logger.js\");\nconst AuthenticationTypes = __webpack_require__(/*! ../authentication/authentication_types */ \"(rsc)/./node_modules/snowflake-sdk/lib/authentication/authentication_types.js\");\nconst Util = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/snowflake-sdk/lib/util.js\");\n\nfunction defaultIfNotSet(value, defaultValue) {\n  if (value === null || typeof value === 'undefined' || value === '') {\n    return defaultValue;\n  } else {\n    return value;\n  }\n}\n\nfunction shouldReadTokenFromFile(fixedConfiguration) {\n  return fixedConfiguration && fixedConfiguration.authenticator &&\n    fixedConfiguration.authenticator.toUpperCase() === AuthenticationTypes.OAUTH_AUTHENTICATOR &&\n    !Util.string.isNotNullOrEmpty(fixedConfiguration.token);\n}\n\nfunction readTokenFromFile(fixedConfiguration) {\n  const tokenFilePath = fixedConfiguration.token_file_path ? fixedConfiguration.token_file_path : '/snowflake/session/token';\n  const resolvedPath = fs.realpathSync(tokenFilePath);\n  Logger.getInstance().trace('Token file path is : %s', tokenFilePath);\n  validateOnlyUserReadWritePermissionAndOwner(resolvedPath);\n  fixedConfiguration.token = fs.readFileSync(resolvedPath, 'utf-8').trim();\n  if (!fixedConfiguration.token) {\n    Logger.getInstance().error('The token does not exist or has empty value.');\n    throw new Error('The token does not exist or has empty value');\n  }\n  const tokenChecksum = generateChecksum(fixedConfiguration.token);\n  Logger.getInstance().info('Token used in connection has been read from file: %s. Checksum: %s', resolvedPath, tokenChecksum);\n}\n\nfunction loadConnectionConfiguration() {\n  Logger.getInstance().trace('Loading connection configuration from the local files...');\n  const snowflakeConfigDir = defaultIfNotSet(process.env.SNOWFLAKE_HOME, path.join(os.homedir(), '.snowflake'));\n  Logger.getInstance().trace('Looking for connection file in directory %s', snowflakeConfigDir);\n  const filePath = path.join(snowflakeConfigDir, 'connections.toml');\n  const resolvedPath = fs.realpathSync(filePath);\n  Logger.getInstance().trace('Connection configuration file found under the path %s. Validating file access.', resolvedPath);\n\n  validateOnlyUserReadWritePermissionAndOwner(resolvedPath);\n  const str = fs.readFileSync(resolvedPath, { encoding: 'utf8' });\n  const configurationChecksum = generateChecksum(str);\n  Logger.getInstance().info('Connection configuration file is read from path: %s. Checksum: %s', resolvedPath, configurationChecksum);\n  Logger.getInstance().trace('Trying to parse the config file');\n  const parsingResult = toml.parse(str);\n\n  const configurationName = defaultIfNotSet(process.env.SNOWFLAKE_DEFAULT_CONNECTION_NAME, 'default');\n\n  if (parsingResult[configurationName] !== undefined) {\n    const fixedConfiguration = fixUserKey(parsingResult[configurationName]);\n    if (shouldReadTokenFromFile(fixedConfiguration)) {\n      Logger.getInstance().info('Trying to read token from config file.');\n      readTokenFromFile(fixedConfiguration);\n    }\n    return fixedConfiguration;\n  } else {\n    Logger.getInstance().error('Connection configuration with name %s does not exist in the file %s', configurationName, resolvedPath);\n    throw new Error(`Connection configuration with name ${configurationName} does not exist`);\n  }\n}\n\nfunction fixUserKey(parsingResult) {\n  Logger.getInstance().trace('Empty Username field will be filled with \\'User\\' field value.');\n  if (parsingResult['username'] === undefined && parsingResult['user'] !== undefined){\n    parsingResult['username'] = parsingResult['user'];\n  }\n  return parsingResult;\n}\n\nexports.loadConnectionConfiguration = loadConnectionConfiguration;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9saWIvY29uZmlndXJhdGlvbi9jb25uZWN0aW9uX2NvbmZpZ3VyYXRpb24uanMiLCJtYXBwaW5ncyI6IkFBQUEsYUFBYSxtQkFBTyxDQUFDLGdEQUFNO0FBQzNCLFdBQVcsbUJBQU8sQ0FBQyxjQUFJO0FBQ3ZCLFdBQVcsbUJBQU8sQ0FBQyxjQUFJO0FBQ3ZCLFFBQVEsZ0VBQWdFLEVBQUUsbUJBQU8sQ0FBQyx5RUFBYztBQUNoRyxhQUFhLG1CQUFPLENBQUMsa0JBQU07QUFDM0IsZUFBZSxtQkFBTyxDQUFDLG1FQUFXO0FBQ2xDLDRCQUE0QixtQkFBTyxDQUFDLDZIQUF3QztBQUM1RSxhQUFhLG1CQUFPLENBQUMsK0RBQVM7O0FBRTlCO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDhDQUE4QyxrQkFBa0I7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSwwREFBMEQsbUJBQW1CO0FBQzdFO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsbUNBQW1DIiwic291cmNlcyI6WyIvVXNlcnMvdmljdG9yd2lsc29uL0Rlc2t0b3AvcHJvamVjdHMvRVpWaXovbm9kZV9tb2R1bGVzL3Nub3dmbGFrZS1zZGsvbGliL2NvbmZpZ3VyYXRpb24vY29ubmVjdGlvbl9jb25maWd1cmF0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHRvbWwgPSByZXF1aXJlKCd0b21sJyk7XG5jb25zdCBvcyA9IHJlcXVpcmUoJ29zJyk7XG5jb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5jb25zdCB7IHZhbGlkYXRlT25seVVzZXJSZWFkV3JpdGVQZXJtaXNzaW9uQW5kT3duZXIsIGdlbmVyYXRlQ2hlY2tzdW0gfSA9IHJlcXVpcmUoJy4uL2ZpbGVfdXRpbCcpO1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IExvZ2dlciA9IHJlcXVpcmUoJy4uL2xvZ2dlcicpO1xuY29uc3QgQXV0aGVudGljYXRpb25UeXBlcyA9IHJlcXVpcmUoJy4uL2F1dGhlbnRpY2F0aW9uL2F1dGhlbnRpY2F0aW9uX3R5cGVzJyk7XG5jb25zdCBVdGlsID0gcmVxdWlyZSgnLi4vdXRpbCcpO1xuXG5mdW5jdGlvbiBkZWZhdWx0SWZOb3RTZXQodmFsdWUsIGRlZmF1bHRWYWx1ZSkge1xuICBpZiAodmFsdWUgPT09IG51bGwgfHwgdHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJyB8fCB2YWx1ZSA9PT0gJycpIHtcbiAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzaG91bGRSZWFkVG9rZW5Gcm9tRmlsZShmaXhlZENvbmZpZ3VyYXRpb24pIHtcbiAgcmV0dXJuIGZpeGVkQ29uZmlndXJhdGlvbiAmJiBmaXhlZENvbmZpZ3VyYXRpb24uYXV0aGVudGljYXRvciAmJlxuICAgIGZpeGVkQ29uZmlndXJhdGlvbi5hdXRoZW50aWNhdG9yLnRvVXBwZXJDYXNlKCkgPT09IEF1dGhlbnRpY2F0aW9uVHlwZXMuT0FVVEhfQVVUSEVOVElDQVRPUiAmJlxuICAgICFVdGlsLnN0cmluZy5pc05vdE51bGxPckVtcHR5KGZpeGVkQ29uZmlndXJhdGlvbi50b2tlbik7XG59XG5cbmZ1bmN0aW9uIHJlYWRUb2tlbkZyb21GaWxlKGZpeGVkQ29uZmlndXJhdGlvbikge1xuICBjb25zdCB0b2tlbkZpbGVQYXRoID0gZml4ZWRDb25maWd1cmF0aW9uLnRva2VuX2ZpbGVfcGF0aCA/IGZpeGVkQ29uZmlndXJhdGlvbi50b2tlbl9maWxlX3BhdGggOiAnL3Nub3dmbGFrZS9zZXNzaW9uL3Rva2VuJztcbiAgY29uc3QgcmVzb2x2ZWRQYXRoID0gZnMucmVhbHBhdGhTeW5jKHRva2VuRmlsZVBhdGgpO1xuICBMb2dnZXIuZ2V0SW5zdGFuY2UoKS50cmFjZSgnVG9rZW4gZmlsZSBwYXRoIGlzIDogJXMnLCB0b2tlbkZpbGVQYXRoKTtcbiAgdmFsaWRhdGVPbmx5VXNlclJlYWRXcml0ZVBlcm1pc3Npb25BbmRPd25lcihyZXNvbHZlZFBhdGgpO1xuICBmaXhlZENvbmZpZ3VyYXRpb24udG9rZW4gPSBmcy5yZWFkRmlsZVN5bmMocmVzb2x2ZWRQYXRoLCAndXRmLTgnKS50cmltKCk7XG4gIGlmICghZml4ZWRDb25maWd1cmF0aW9uLnRva2VuKSB7XG4gICAgTG9nZ2VyLmdldEluc3RhbmNlKCkuZXJyb3IoJ1RoZSB0b2tlbiBkb2VzIG5vdCBleGlzdCBvciBoYXMgZW1wdHkgdmFsdWUuJyk7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgdG9rZW4gZG9lcyBub3QgZXhpc3Qgb3IgaGFzIGVtcHR5IHZhbHVlJyk7XG4gIH1cbiAgY29uc3QgdG9rZW5DaGVja3N1bSA9IGdlbmVyYXRlQ2hlY2tzdW0oZml4ZWRDb25maWd1cmF0aW9uLnRva2VuKTtcbiAgTG9nZ2VyLmdldEluc3RhbmNlKCkuaW5mbygnVG9rZW4gdXNlZCBpbiBjb25uZWN0aW9uIGhhcyBiZWVuIHJlYWQgZnJvbSBmaWxlOiAlcy4gQ2hlY2tzdW06ICVzJywgcmVzb2x2ZWRQYXRoLCB0b2tlbkNoZWNrc3VtKTtcbn1cblxuZnVuY3Rpb24gbG9hZENvbm5lY3Rpb25Db25maWd1cmF0aW9uKCkge1xuICBMb2dnZXIuZ2V0SW5zdGFuY2UoKS50cmFjZSgnTG9hZGluZyBjb25uZWN0aW9uIGNvbmZpZ3VyYXRpb24gZnJvbSB0aGUgbG9jYWwgZmlsZXMuLi4nKTtcbiAgY29uc3Qgc25vd2ZsYWtlQ29uZmlnRGlyID0gZGVmYXVsdElmTm90U2V0KHByb2Nlc3MuZW52LlNOT1dGTEFLRV9IT01FLCBwYXRoLmpvaW4ob3MuaG9tZWRpcigpLCAnLnNub3dmbGFrZScpKTtcbiAgTG9nZ2VyLmdldEluc3RhbmNlKCkudHJhY2UoJ0xvb2tpbmcgZm9yIGNvbm5lY3Rpb24gZmlsZSBpbiBkaXJlY3RvcnkgJXMnLCBzbm93Zmxha2VDb25maWdEaXIpO1xuICBjb25zdCBmaWxlUGF0aCA9IHBhdGguam9pbihzbm93Zmxha2VDb25maWdEaXIsICdjb25uZWN0aW9ucy50b21sJyk7XG4gIGNvbnN0IHJlc29sdmVkUGF0aCA9IGZzLnJlYWxwYXRoU3luYyhmaWxlUGF0aCk7XG4gIExvZ2dlci5nZXRJbnN0YW5jZSgpLnRyYWNlKCdDb25uZWN0aW9uIGNvbmZpZ3VyYXRpb24gZmlsZSBmb3VuZCB1bmRlciB0aGUgcGF0aCAlcy4gVmFsaWRhdGluZyBmaWxlIGFjY2Vzcy4nLCByZXNvbHZlZFBhdGgpO1xuXG4gIHZhbGlkYXRlT25seVVzZXJSZWFkV3JpdGVQZXJtaXNzaW9uQW5kT3duZXIocmVzb2x2ZWRQYXRoKTtcbiAgY29uc3Qgc3RyID0gZnMucmVhZEZpbGVTeW5jKHJlc29sdmVkUGF0aCwgeyBlbmNvZGluZzogJ3V0ZjgnIH0pO1xuICBjb25zdCBjb25maWd1cmF0aW9uQ2hlY2tzdW0gPSBnZW5lcmF0ZUNoZWNrc3VtKHN0cik7XG4gIExvZ2dlci5nZXRJbnN0YW5jZSgpLmluZm8oJ0Nvbm5lY3Rpb24gY29uZmlndXJhdGlvbiBmaWxlIGlzIHJlYWQgZnJvbSBwYXRoOiAlcy4gQ2hlY2tzdW06ICVzJywgcmVzb2x2ZWRQYXRoLCBjb25maWd1cmF0aW9uQ2hlY2tzdW0pO1xuICBMb2dnZXIuZ2V0SW5zdGFuY2UoKS50cmFjZSgnVHJ5aW5nIHRvIHBhcnNlIHRoZSBjb25maWcgZmlsZScpO1xuICBjb25zdCBwYXJzaW5nUmVzdWx0ID0gdG9tbC5wYXJzZShzdHIpO1xuXG4gIGNvbnN0IGNvbmZpZ3VyYXRpb25OYW1lID0gZGVmYXVsdElmTm90U2V0KHByb2Nlc3MuZW52LlNOT1dGTEFLRV9ERUZBVUxUX0NPTk5FQ1RJT05fTkFNRSwgJ2RlZmF1bHQnKTtcblxuICBpZiAocGFyc2luZ1Jlc3VsdFtjb25maWd1cmF0aW9uTmFtZV0gIT09IHVuZGVmaW5lZCkge1xuICAgIGNvbnN0IGZpeGVkQ29uZmlndXJhdGlvbiA9IGZpeFVzZXJLZXkocGFyc2luZ1Jlc3VsdFtjb25maWd1cmF0aW9uTmFtZV0pO1xuICAgIGlmIChzaG91bGRSZWFkVG9rZW5Gcm9tRmlsZShmaXhlZENvbmZpZ3VyYXRpb24pKSB7XG4gICAgICBMb2dnZXIuZ2V0SW5zdGFuY2UoKS5pbmZvKCdUcnlpbmcgdG8gcmVhZCB0b2tlbiBmcm9tIGNvbmZpZyBmaWxlLicpO1xuICAgICAgcmVhZFRva2VuRnJvbUZpbGUoZml4ZWRDb25maWd1cmF0aW9uKTtcbiAgICB9XG4gICAgcmV0dXJuIGZpeGVkQ29uZmlndXJhdGlvbjtcbiAgfSBlbHNlIHtcbiAgICBMb2dnZXIuZ2V0SW5zdGFuY2UoKS5lcnJvcignQ29ubmVjdGlvbiBjb25maWd1cmF0aW9uIHdpdGggbmFtZSAlcyBkb2VzIG5vdCBleGlzdCBpbiB0aGUgZmlsZSAlcycsIGNvbmZpZ3VyYXRpb25OYW1lLCByZXNvbHZlZFBhdGgpO1xuICAgIHRocm93IG5ldyBFcnJvcihgQ29ubmVjdGlvbiBjb25maWd1cmF0aW9uIHdpdGggbmFtZSAke2NvbmZpZ3VyYXRpb25OYW1lfSBkb2VzIG5vdCBleGlzdGApO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZpeFVzZXJLZXkocGFyc2luZ1Jlc3VsdCkge1xuICBMb2dnZXIuZ2V0SW5zdGFuY2UoKS50cmFjZSgnRW1wdHkgVXNlcm5hbWUgZmllbGQgd2lsbCBiZSBmaWxsZWQgd2l0aCBcXCdVc2VyXFwnIGZpZWxkIHZhbHVlLicpO1xuICBpZiAocGFyc2luZ1Jlc3VsdFsndXNlcm5hbWUnXSA9PT0gdW5kZWZpbmVkICYmIHBhcnNpbmdSZXN1bHRbJ3VzZXInXSAhPT0gdW5kZWZpbmVkKXtcbiAgICBwYXJzaW5nUmVzdWx0Wyd1c2VybmFtZSddID0gcGFyc2luZ1Jlc3VsdFsndXNlciddO1xuICB9XG4gIHJldHVybiBwYXJzaW5nUmVzdWx0O1xufVxuXG5leHBvcnRzLmxvYWRDb25uZWN0aW9uQ29uZmlndXJhdGlvbiA9IGxvYWRDb25uZWN0aW9uQ29uZmlndXJhdGlvbjtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/lib/configuration/connection_configuration.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/lib/connection/bind_uploader.js":
/*!********************************************************************!*\
  !*** ./node_modules/snowflake-sdk/lib/connection/bind_uploader.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Logger = __webpack_require__(/*! ../logger */ \"(rsc)/./node_modules/snowflake-sdk/lib/logger.js\");\n\nconst fs = __webpack_require__(/*! fs */ \"fs\");\n\nconst Statement = __webpack_require__(/*! ./statement */ \"(rsc)/./node_modules/snowflake-sdk/lib/connection/statement.js\");\nconst { isString } = __webpack_require__(/*! util */ \"util\");\n\nconst STAGE_NAME = 'SYSTEM$BIND';\nconst CREATE_STAGE_STMT = 'CREATE OR REPLACE TEMPORARY STAGE '\n\t+ STAGE_NAME\n\t+ ' file_format=( type=csv field_optionally_enclosed_by=\\'\"\\')';\n\t\n/**\n * Creates a new BindUploader.\n *\n * @param {Object} options\n * @param {Object} services\n * @param {Object} connectionConfig\n * @param {*} requestId \n *\n * @constructor\n */\n \nfunction BindUploader(options, services, connectionConfig, requestId) {\n  const MAX_BUFFER_SIZE = 1024 * 1024 * 100;\n\n  Logger.getInstance().debug('BindUploaders');\n  this.options = options;\n  this.services = services;\n  this.connectionConfig = connectionConfig;\n  this.requestId = requestId;\n  this.stagePath = '@' + STAGE_NAME + '/' + requestId;\n  Logger.getInstance().debug('token = %s', connectionConfig.getToken());\n\n  this.createStage = async function () {\n    const createStageOptions = { sqlText: GetCreateStageStmt() };\n    const newContext = Statement.createContext(createStageOptions, this.services, this.connectionConfig);\n    if (this.connectionConfig.getForceStageBindError() === 0) {\n      throw new Error('Failed to create stage');\n    }\n    const ret = await Statement.sendRequest(newContext);\n    if (ret['status'] !== 200) {\n      throw new Error('Failed to create stage');\n    }\n  };\n\n  this.uploadFilestream = async function (fileName, fileData) {\n    Logger.getInstance().debug('BindUploaders::uploadFilestream');\n    const stageName = this.stagePath;\n    if (stageName == null) {\n      throw new Error('Stage name is null.');\n    }\n    if (fileName == null) {\n      throw new Error('File name is null.');\n    }\n    if (this.connectionConfig.getForceStageBindError() === 1) {\n      throw new Error('Failed to upload file');\n    }\n\n    await new Promise((resolve, reject) => {\n      const putStmt = 'PUT file://' + fileName + '\\'' + stageName + '\\' overwrite=true auto_compress=false source_compression=gzip';\n      const uploadFileOptions = {\n        sqlText: putStmt, fileStream: fileData,\n        complete: function (err, stmt) {\n          if (err) {\n            Logger.getInstance().debug('err ' + err);\n            reject(err);\n          }\n          Logger.getInstance().debug('uploadFiles done ');\n          resolve(stmt.streamRows());\n        }\n      };\n      Statement.createStatementPreExec(uploadFileOptions, this.services, this.connectionConfig);\n    });\n  };\n\n  this.Upload = async function (bindings) {\n    Logger.getInstance().debug('BindUploaders::Upload');\n\t\n    if (bindings == null) {\n      return null; \n    }\n    if (!this.services.sf.isStageCreated) {\n      await this.createStage();\n      this.services.sf.isStageCreated = true;\n    }\n\t\n    let fileCount = 0;\n    let strbuffer = '';\n\t\t\n    for (let i = 0; i < bindings.length; i++) {\n      for (let j = 0; j < bindings[i].length; j++) {\n        if (j > 0) {\n          strbuffer += ','; \n        }\n        const value = this.cvsData(bindings[i][j]);\n        strbuffer += value;\n      }\n      strbuffer += '\\n';\n\n      if ((strbuffer.length >= MAX_BUFFER_SIZE) || (i === bindings.length - 1)) {\n        const fileName = (++fileCount).toString();\n        Logger.getInstance().debug('fileName=' + fileName);\n        await this.uploadFilestream(fileName, strbuffer);\n        strbuffer = '';\n      }\n    }\n  };\n\t\n  this.cvsData = function (data) {\n    if (data == null || data.toString() === '') {\n      return '\"\"'; \n    }\n    if (!isString(data)) {\n      if (data instanceof Date) {\n        data = data.toJSON();\n      } else {\n        data = JSON.stringify(data);\n      }\n    }\n    if (data.toString().indexOf('\"') >= 0\n\t\t\t|| data.toString().indexOf(',') >= 0\t\n\t\t\t|| data.toString().indexOf('\\\\') >= 0\n\t\t\t|| data.toString().indexOf('\\n') >= 0\n\t\t\t|| data.toString().indexOf('\\t') >= 0) {\n      return '\"' + data.toString().replaceAll('\"', '\"\"') + '\"'; \n    } else {\n      return data; \n    }\n  };\n}\n\nfunction GetCreateStageStmt() {\n  return CREATE_STAGE_STMT;\n}\n\nfunction GetStageName(requestId) {\n  return '@' + STAGE_NAME + '/' + requestId;\n}\n\nfunction CleanFile(fileName) {\n  try {\n    if (fs.existsSync(fileName)) {\n      fs.unlinkSync(fileName);\n    }\n  } catch (err) {\n    Logger.getInstance().debug('Delete file failed: %s', fileName);\n  }\n}\n\nmodule.exports = { BindUploader, GetCreateStageStmt, GetStageName, CleanFile };//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9saWIvY29ubmVjdGlvbi9iaW5kX3VwbG9hZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFBLGVBQWUsbUJBQU8sQ0FBQyxtRUFBVzs7QUFFbEMsV0FBVyxtQkFBTyxDQUFDLGNBQUk7O0FBRXZCLGtCQUFrQixtQkFBTyxDQUFDLG1GQUFhO0FBQ3ZDLFFBQVEsV0FBVyxFQUFFLG1CQUFPLENBQUMsa0JBQU07O0FBRW5DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLEdBQUc7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IscUJBQXFCO0FBQ3pDLHNCQUFzQix3QkFBd0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUEsbUJBQW1CIiwic291cmNlcyI6WyIvVXNlcnMvdmljdG9yd2lsc29uL0Rlc2t0b3AvcHJvamVjdHMvRVpWaXovbm9kZV9tb2R1bGVzL3Nub3dmbGFrZS1zZGsvbGliL2Nvbm5lY3Rpb24vYmluZF91cGxvYWRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBMb2dnZXIgPSByZXF1aXJlKCcuLi9sb2dnZXInKTtcblxuY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xuXG5jb25zdCBTdGF0ZW1lbnQgPSByZXF1aXJlKCcuL3N0YXRlbWVudCcpO1xuY29uc3QgeyBpc1N0cmluZyB9ID0gcmVxdWlyZSgndXRpbCcpO1xuXG5jb25zdCBTVEFHRV9OQU1FID0gJ1NZU1RFTSRCSU5EJztcbmNvbnN0IENSRUFURV9TVEFHRV9TVE1UID0gJ0NSRUFURSBPUiBSRVBMQUNFIFRFTVBPUkFSWSBTVEFHRSAnXG5cdCsgU1RBR0VfTkFNRVxuXHQrICcgZmlsZV9mb3JtYXQ9KCB0eXBlPWNzdiBmaWVsZF9vcHRpb25hbGx5X2VuY2xvc2VkX2J5PVxcJ1wiXFwnKSc7XG5cdFxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IEJpbmRVcGxvYWRlci5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQHBhcmFtIHtPYmplY3R9IHNlcnZpY2VzXG4gKiBAcGFyYW0ge09iamVjdH0gY29ubmVjdGlvbkNvbmZpZ1xuICogQHBhcmFtIHsqfSByZXF1ZXN0SWQgXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbiBcbmZ1bmN0aW9uIEJpbmRVcGxvYWRlcihvcHRpb25zLCBzZXJ2aWNlcywgY29ubmVjdGlvbkNvbmZpZywgcmVxdWVzdElkKSB7XG4gIGNvbnN0IE1BWF9CVUZGRVJfU0laRSA9IDEwMjQgKiAxMDI0ICogMTAwO1xuXG4gIExvZ2dlci5nZXRJbnN0YW5jZSgpLmRlYnVnKCdCaW5kVXBsb2FkZXJzJyk7XG4gIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gIHRoaXMuc2VydmljZXMgPSBzZXJ2aWNlcztcbiAgdGhpcy5jb25uZWN0aW9uQ29uZmlnID0gY29ubmVjdGlvbkNvbmZpZztcbiAgdGhpcy5yZXF1ZXN0SWQgPSByZXF1ZXN0SWQ7XG4gIHRoaXMuc3RhZ2VQYXRoID0gJ0AnICsgU1RBR0VfTkFNRSArICcvJyArIHJlcXVlc3RJZDtcbiAgTG9nZ2VyLmdldEluc3RhbmNlKCkuZGVidWcoJ3Rva2VuID0gJXMnLCBjb25uZWN0aW9uQ29uZmlnLmdldFRva2VuKCkpO1xuXG4gIHRoaXMuY3JlYXRlU3RhZ2UgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgY3JlYXRlU3RhZ2VPcHRpb25zID0geyBzcWxUZXh0OiBHZXRDcmVhdGVTdGFnZVN0bXQoKSB9O1xuICAgIGNvbnN0IG5ld0NvbnRleHQgPSBTdGF0ZW1lbnQuY3JlYXRlQ29udGV4dChjcmVhdGVTdGFnZU9wdGlvbnMsIHRoaXMuc2VydmljZXMsIHRoaXMuY29ubmVjdGlvbkNvbmZpZyk7XG4gICAgaWYgKHRoaXMuY29ubmVjdGlvbkNvbmZpZy5nZXRGb3JjZVN0YWdlQmluZEVycm9yKCkgPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIGNyZWF0ZSBzdGFnZScpO1xuICAgIH1cbiAgICBjb25zdCByZXQgPSBhd2FpdCBTdGF0ZW1lbnQuc2VuZFJlcXVlc3QobmV3Q29udGV4dCk7XG4gICAgaWYgKHJldFsnc3RhdHVzJ10gIT09IDIwMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gY3JlYXRlIHN0YWdlJyk7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMudXBsb2FkRmlsZXN0cmVhbSA9IGFzeW5jIGZ1bmN0aW9uIChmaWxlTmFtZSwgZmlsZURhdGEpIHtcbiAgICBMb2dnZXIuZ2V0SW5zdGFuY2UoKS5kZWJ1ZygnQmluZFVwbG9hZGVyczo6dXBsb2FkRmlsZXN0cmVhbScpO1xuICAgIGNvbnN0IHN0YWdlTmFtZSA9IHRoaXMuc3RhZ2VQYXRoO1xuICAgIGlmIChzdGFnZU5hbWUgPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdTdGFnZSBuYW1lIGlzIG51bGwuJyk7XG4gICAgfVxuICAgIGlmIChmaWxlTmFtZSA9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZpbGUgbmFtZSBpcyBudWxsLicpO1xuICAgIH1cbiAgICBpZiAodGhpcy5jb25uZWN0aW9uQ29uZmlnLmdldEZvcmNlU3RhZ2VCaW5kRXJyb3IoKSA9PT0gMSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gdXBsb2FkIGZpbGUnKTtcbiAgICB9XG5cbiAgICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCBwdXRTdG10ID0gJ1BVVCBmaWxlOi8vJyArIGZpbGVOYW1lICsgJ1xcJycgKyBzdGFnZU5hbWUgKyAnXFwnIG92ZXJ3cml0ZT10cnVlIGF1dG9fY29tcHJlc3M9ZmFsc2Ugc291cmNlX2NvbXByZXNzaW9uPWd6aXAnO1xuICAgICAgY29uc3QgdXBsb2FkRmlsZU9wdGlvbnMgPSB7XG4gICAgICAgIHNxbFRleHQ6IHB1dFN0bXQsIGZpbGVTdHJlYW06IGZpbGVEYXRhLFxuICAgICAgICBjb21wbGV0ZTogZnVuY3Rpb24gKGVyciwgc3RtdCkge1xuICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgIExvZ2dlci5nZXRJbnN0YW5jZSgpLmRlYnVnKCdlcnIgJyArIGVycik7XG4gICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgTG9nZ2VyLmdldEluc3RhbmNlKCkuZGVidWcoJ3VwbG9hZEZpbGVzIGRvbmUgJyk7XG4gICAgICAgICAgcmVzb2x2ZShzdG10LnN0cmVhbVJvd3MoKSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBTdGF0ZW1lbnQuY3JlYXRlU3RhdGVtZW50UHJlRXhlYyh1cGxvYWRGaWxlT3B0aW9ucywgdGhpcy5zZXJ2aWNlcywgdGhpcy5jb25uZWN0aW9uQ29uZmlnKTtcbiAgICB9KTtcbiAgfTtcblxuICB0aGlzLlVwbG9hZCA9IGFzeW5jIGZ1bmN0aW9uIChiaW5kaW5ncykge1xuICAgIExvZ2dlci5nZXRJbnN0YW5jZSgpLmRlYnVnKCdCaW5kVXBsb2FkZXJzOjpVcGxvYWQnKTtcblx0XG4gICAgaWYgKGJpbmRpbmdzID09IG51bGwpIHtcbiAgICAgIHJldHVybiBudWxsOyBcbiAgICB9XG4gICAgaWYgKCF0aGlzLnNlcnZpY2VzLnNmLmlzU3RhZ2VDcmVhdGVkKSB7XG4gICAgICBhd2FpdCB0aGlzLmNyZWF0ZVN0YWdlKCk7XG4gICAgICB0aGlzLnNlcnZpY2VzLnNmLmlzU3RhZ2VDcmVhdGVkID0gdHJ1ZTtcbiAgICB9XG5cdFxuICAgIGxldCBmaWxlQ291bnQgPSAwO1xuICAgIGxldCBzdHJidWZmZXIgPSAnJztcblx0XHRcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJpbmRpbmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGJpbmRpbmdzW2ldLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIGlmIChqID4gMCkge1xuICAgICAgICAgIHN0cmJ1ZmZlciArPSAnLCc7IFxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5jdnNEYXRhKGJpbmRpbmdzW2ldW2pdKTtcbiAgICAgICAgc3RyYnVmZmVyICs9IHZhbHVlO1xuICAgICAgfVxuICAgICAgc3RyYnVmZmVyICs9ICdcXG4nO1xuXG4gICAgICBpZiAoKHN0cmJ1ZmZlci5sZW5ndGggPj0gTUFYX0JVRkZFUl9TSVpFKSB8fCAoaSA9PT0gYmluZGluZ3MubGVuZ3RoIC0gMSkpIHtcbiAgICAgICAgY29uc3QgZmlsZU5hbWUgPSAoKytmaWxlQ291bnQpLnRvU3RyaW5nKCk7XG4gICAgICAgIExvZ2dlci5nZXRJbnN0YW5jZSgpLmRlYnVnKCdmaWxlTmFtZT0nICsgZmlsZU5hbWUpO1xuICAgICAgICBhd2FpdCB0aGlzLnVwbG9hZEZpbGVzdHJlYW0oZmlsZU5hbWUsIHN0cmJ1ZmZlcik7XG4gICAgICAgIHN0cmJ1ZmZlciA9ICcnO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblx0XG4gIHRoaXMuY3ZzRGF0YSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgaWYgKGRhdGEgPT0gbnVsbCB8fCBkYXRhLnRvU3RyaW5nKCkgPT09ICcnKSB7XG4gICAgICByZXR1cm4gJ1wiXCInOyBcbiAgICB9XG4gICAgaWYgKCFpc1N0cmluZyhkYXRhKSkge1xuICAgICAgaWYgKGRhdGEgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgIGRhdGEgPSBkYXRhLnRvSlNPTigpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGF0YSA9IEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZGF0YS50b1N0cmluZygpLmluZGV4T2YoJ1wiJykgPj0gMFxuXHRcdFx0fHwgZGF0YS50b1N0cmluZygpLmluZGV4T2YoJywnKSA+PSAwXHRcblx0XHRcdHx8IGRhdGEudG9TdHJpbmcoKS5pbmRleE9mKCdcXFxcJykgPj0gMFxuXHRcdFx0fHwgZGF0YS50b1N0cmluZygpLmluZGV4T2YoJ1xcbicpID49IDBcblx0XHRcdHx8IGRhdGEudG9TdHJpbmcoKS5pbmRleE9mKCdcXHQnKSA+PSAwKSB7XG4gICAgICByZXR1cm4gJ1wiJyArIGRhdGEudG9TdHJpbmcoKS5yZXBsYWNlQWxsKCdcIicsICdcIlwiJykgKyAnXCInOyBcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGRhdGE7IFxuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gR2V0Q3JlYXRlU3RhZ2VTdG10KCkge1xuICByZXR1cm4gQ1JFQVRFX1NUQUdFX1NUTVQ7XG59XG5cbmZ1bmN0aW9uIEdldFN0YWdlTmFtZShyZXF1ZXN0SWQpIHtcbiAgcmV0dXJuICdAJyArIFNUQUdFX05BTUUgKyAnLycgKyByZXF1ZXN0SWQ7XG59XG5cbmZ1bmN0aW9uIENsZWFuRmlsZShmaWxlTmFtZSkge1xuICB0cnkge1xuICAgIGlmIChmcy5leGlzdHNTeW5jKGZpbGVOYW1lKSkge1xuICAgICAgZnMudW5saW5rU3luYyhmaWxlTmFtZSk7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBMb2dnZXIuZ2V0SW5zdGFuY2UoKS5kZWJ1ZygnRGVsZXRlIGZpbGUgZmFpbGVkOiAlcycsIGZpbGVOYW1lKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHsgQmluZFVwbG9hZGVyLCBHZXRDcmVhdGVTdGFnZVN0bXQsIEdldFN0YWdlTmFtZSwgQ2xlYW5GaWxlIH07Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/lib/connection/bind_uploader.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/lib/connection/connection.js":
/*!*****************************************************************!*\
  !*** ./node_modules/snowflake-sdk/lib/connection/connection.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const { v4: uuidv4 } = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/uuid/dist/esm-node/index.js\");\nconst Url = __webpack_require__(/*! url */ \"url\");\nconst QueryString = __webpack_require__(/*! querystring */ \"querystring\");\nconst QueryStatus = __webpack_require__(/*! ../constants/query_status */ \"(rsc)/./node_modules/snowflake-sdk/lib/constants/query_status.js\");\n\nconst LoggingUtil = __webpack_require__(/*! ../logger/logging_util */ \"(rsc)/./node_modules/snowflake-sdk/lib/logger/logging_util.js\");\nconst Util = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/snowflake-sdk/lib/util.js\");\nconst Errors = __webpack_require__(/*! ../errors */ \"(rsc)/./node_modules/snowflake-sdk/lib/errors.js\");\nconst ErrorCodes = Errors.codes;\nconst EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter);\nconst Statement = __webpack_require__(/*! ./statement */ \"(rsc)/./node_modules/snowflake-sdk/lib/connection/statement.js\");\nconst Parameters = __webpack_require__(/*! ../parameters */ \"(rsc)/./node_modules/snowflake-sdk/lib/parameters.js\");\nconst Authenticator = __webpack_require__(/*! ../authentication/authentication */ \"(rsc)/./node_modules/snowflake-sdk/lib/authentication/authentication.js\");\nconst AuthenticationTypes = __webpack_require__(/*! ../authentication/authentication_types */ \"(rsc)/./node_modules/snowflake-sdk/lib/authentication/authentication_types.js\");\nconst Logger = __webpack_require__(/*! ../logger */ \"(rsc)/./node_modules/snowflake-sdk/lib/logger.js\");\nconst { isOktaAuth } = __webpack_require__(/*! ../authentication/authentication */ \"(rsc)/./node_modules/snowflake-sdk/lib/authentication/authentication.js\");\nconst { init: initEasyLogging } = __webpack_require__(/*! ../logger/easy_logging_starter */ \"(rsc)/./node_modules/snowflake-sdk/lib/logger/easy_logging_starter.js\");\nconst GlobalConfig = __webpack_require__(/*! ../global_config */ \"(rsc)/./node_modules/snowflake-sdk/lib/global_config.js\");\nconst JsonCredentialManager = __webpack_require__(/*! ../authentication/secure_storage/json_credential_manager */ \"(rsc)/./node_modules/snowflake-sdk/lib/authentication/secure_storage/json_credential_manager.js\");\nconst ExecutionTimer = __webpack_require__(/*! ../logger/execution_timer */ \"(rsc)/./node_modules/snowflake-sdk/lib/logger/execution_timer.js\");\n\n/**\n * Creates a new Connection instance.\n *\n * @param {ConnectionContext} context\n *\n * @returns {Object}\n */\nfunction Connection(context) {\n  // validate input\n  Logger.getInstance().trace('Connection object is being constructed');\n  Errors.assertInternal(Util.isObject(context));\n\n  const services = context.getServices();\n  const connectionConfig = context.getConnectionConfig();\n\n  // generate an id for the connection\n  const id = uuidv4();\n  Logger.getInstance().trace('Generated connection id: %s', id);\n\n  Logger.getInstance().info(\n    'Creating Connection[id: %s] with %s, password is %s, region: %s, '\n    + 'authenticator: %s, ocsp mode: %s, os: %s, os version: %s',\n    id,\n    connectionConfig.describeIdentityAttributes(),\n    LoggingUtil.describePresence(connectionConfig.password),\n    connectionConfig.region, connectionConfig.getAuthenticator(),\n    connectionConfig.getClientEnvironment().OCSP_MODE,\n    connectionConfig.getClientEnvironment().OS,\n    connectionConfig.getClientEnvironment().OS_VERSION);\n\n  // Log was split due to possibility of exceeding the max message length of the logger\n  Logger.getInstance().info(\n    'Connection[id: %s] additional details: '\n    + 'passcode in password is %s, passcode is %s, private key is %s, '\n    + 'application: %s, client name: %s, client version: %s, retry timeout: %s, '\n    + 'private key path: %s, private key pass is %s, '\n    + 'client store temporary credential: %s, browser response timeout: %s',\n    id,\n    LoggingUtil.describePresence(connectionConfig.getPasscodeInPassword()),\n    LoggingUtil.describePresence(connectionConfig.getPasscode()),\n    LoggingUtil.describePresence(connectionConfig.getPrivateKey()),\n    connectionConfig.getClientApplication(), connectionConfig.getClientName(),\n    connectionConfig.getClientVersion(), connectionConfig.getRetryTimeout(),\n    connectionConfig.getPrivateKeyPath(),\n    LoggingUtil.describePresence(connectionConfig.getPrivateKeyPass()),\n    connectionConfig.getClientStoreTemporaryCredential(),\n    connectionConfig.getBrowserActionTimeout());\n\n\n  // async max retry and retry pattern from python connector\n  const asyncNoDataMaxRetry = 24;\n  const asyncRetryPattern = [1, 1, 2, 3, 4, 8, 10];\n  const asyncRetryInMilliseconds = 500;\n\n  // Custom regex based on uuid validate\n  // Unable to directly use uuid validate because the queryId returned from the server doesn't match the regex\n  const queryIdRegex = new RegExp(/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i);\n\n  //Make session tokens available for testing\n  this.getTokens = function () {\n    if (connectionConfig._qaMode) {\n      return services.sf.getConfig() && services.sf.getConfig().tokenInfo;\n    }\n    return {};\n  };\n  /**\n   * Returns true if the connection is active otherwise false\n   *\n   * @returns {boolean}\n   */\n  this.isUp = function () {\n    const isUp = services.sf.isConnected();\n    Logger.getInstance().trace('Connection[id: %s] - isUp called. Returning: %s', this.getId(), isUp);\n    return isUp;\n  };\n\n  /**\n  * Returns true if the session token and master token are valid\n  *\n  * @returns {boolean}\n  */\n  this.isTokenValid = function () {\n    Logger.getInstance().trace('Connection[id: %s] - isTokenValid called', this.getId());\n    const tokenInfo = services.sf.getConfig().tokenInfo;\n\n    const sessionTokenExpirationTime = tokenInfo.sessionTokenExpirationTime;\n    const isSessionValid = sessionTokenExpirationTime > Date.now();\n    Logger.getInstance().trace('Connection[id: %s] - isSessionTokenValid: %s', this.getId(), isSessionValid);\n\n\n    const masterTokenExpirationTime = tokenInfo.masterTokenExpirationTime;\n    const isMasterValid = masterTokenExpirationTime > Date.now();\n    Logger.getInstance().trace('Connection[id: %s] - isMasterTokenValid: %s', this.getId(), isMasterValid);\n\n    const areTokensValid = (isSessionValid && isMasterValid);\n    Logger.getInstance().trace('Connection[id: %s] - isTokenValid returned: %s', this.getId(), areTokensValid);\n    return areTokensValid;\n  };\n\n  this.getServiceName = function () {\n    return services.sf.getServiceName();\n  };\n\n  this.getClientSessionKeepAlive = function () {\n    return services.sf.getClientSessionKeepAlive();\n  };\n\n  this.getClientSessionKeepAliveHeartbeatFrequency = function () {\n    return services.sf.getClientSessionKeepAliveHeartbeatFrequency();\n  };\n\n  this.getJsTreatIntegerAsBigInt = function () {\n    return services.sf.getJsTreatIntegerAsBigInt();\n  };\n\n  /**\n   * Returns the connection id.\n   *\n   * @returns {String}\n   */\n  this.getId = function () {\n    return id;\n  };\n\n  this.heartbeat = callback => {\n    Logger.getInstance().trace('Issuing heartbeat call');\n    const requestId = uuidv4();\n\n    services.sf.request(\n      {\n        method: 'POST',\n        url: Url.format(\n          {\n            pathname: '/session/heartbeat',\n            search: QueryString.stringify(\n              {\n                requestId: requestId\n              })\n          }),\n        callback: Util.isFunction(callback) ? callback : function (err, body) {\n          if (err) {\n            Logger.getInstance().error('Error issuing heartbeat call: %s', err.message);\n          } else {\n            Logger.getInstance().trace('Heartbeat response %s', JSON.stringify(body));\n          }\n        }\n      }\n    );\n  };\n\n  this.heartbeatAsync = () => {\n    return new Promise((resolve, reject) => {\n      // previous version of driver called `select 1;` which result in `[ { '1': 1 } ]`\n      Logger.getInstance().trace('Issuing async heartbeat call');\n      this.heartbeat((err) => err ? reject(err) : resolve([{ '1': 1 }]));\n    });\n  };\n\n  /**\n   * @return {Promise<boolean>}\n   */\n  this.isValidAsync = async () => {\n    Logger.getInstance().trace('Connection[id: %s] - isValidAsync called', this.getId());\n    if (!this.isUp()) {\n      return false;\n    }\n    try {\n      await this.heartbeatAsync();\n      return true;\n    } catch (e) {\n      Logger.getInstance().debug('Connection[id: %s] - heartbeat failed: %s', this.getId(), JSON.stringify(e, Object.getOwnPropertyNames(e)));\n      return false;\n    }\n  };\n\n  /**\n  * Set the private link as the OCSP cache server's URL.\n  *\n  * @param {String} host\n  *\n  * @returns {null}\n  */\n  this.setupOcspPrivateLink = function (host) {\n    process.env.SF_OCSP_RESPONSE_CACHE_SERVER_URL = Util.createOcspResponseCacheServerUrl(host);\n  };\n\n  /**\n   * Method returning callback function for connect() - used to establish a connection.\n   *\n   * @param self\n   * @param {Function} callback\n   *\n   * @returns {function}\n   */\n  function connectCallback(self, callback) {\n    return function (err) {\n      if (Parameters.getValue(Parameters.names.CLIENT_SESSION_KEEP_ALIVE)) {\n        const SECONDS_TO_MILLISECONDS_MULTIPLIER = 1000;\n        const KEEP_ALIVE_HEARTBEAT_FREQUENCY_IN_MS = Parameters.getValue(Parameters.names.CLIENT_SESSION_KEEP_ALIVE_HEARTBEAT_FREQUENCY) * SECONDS_TO_MILLISECONDS_MULTIPLIER;\n        self.keepalive = setInterval(self.heartbeat, KEEP_ALIVE_HEARTBEAT_FREQUENCY_IN_MS, self);\n        Logger.getInstance().trace('Connection[id: %s] - keepAlive internal created', id);\n      }\n      if (Util.isFunction(callback)) {\n        callback(Errors.externalize(err), self);\n      }\n    };\n  }\n\n  this.determineConnectionDomain = () => connectionConfig.accessUrl && connectionConfig.accessUrl.includes('snowflakecomputing.cn') ? 'CHINA' : 'GLOBAL';\n\n  /**\n   * Establishes a connection if we aren't in a fatal state.\n   *\n   * @param {Function} callback\n   *\n   * @returns {Object} the connection object.\n   */\n  this.connect = function (callback) {\n    const timer = new ExecutionTimer().start();\n    const connectionDomain = this.determineConnectionDomain();\n    Logger.getInstance().info('Connection[id: %s] - connecting. Associated Snowflake domain: %s', this.getId(), connectionDomain);\n    // invalid callback\n    Errors.checkArgumentValid(\n      !Util.exists(callback) || Util.isFunction(callback),\n      ErrorCodes.ERR_CONN_CONNECT_INVALID_CALLBACK);\n\n    if (Util.exists(connectionConfig.host) && Util.isPrivateLink(connectionConfig.host)) {\n      Logger.getInstance().info('Connection[id: %s] - setting up private link', this.getId());\n      this.setupOcspPrivateLink(connectionConfig.host);\n    }\n\n    // connect to the snowflake service and provide our own callback so that\n    // the connection can be passed in when invoking the connection.connect()\n    // callback\n    const self = this;\n\n    const authenticationType = connectionConfig.getAuthenticator();\n    Logger.getInstance().debug('Connection[id: %s] - using authentication type: %s', this.getId(), authenticationType);\n\n    // check if authentication type is compatible with connect()\n    // external browser and okta are not compatible with connect() due to their usage of async functions\n    if (authenticationType === AuthenticationTypes.EXTERNAL_BROWSER_AUTHENTICATOR ||\n      isOktaAuth(authenticationType)) {\n      const connectingDuration = timer.getDuration();\n      Logger.getInstance().error('Connection[id: %s] - connecting failed after %s milliseconds.' +\n          'Error: External browser and Okta are not compatible with connection process', this.getId(), connectingDuration\n      );\n      throw Errors.createClientError(\n        ErrorCodes.ERR_CONN_CREATE_INVALID_AUTH_CONNECT);\n    }\n\n    // Get authenticator to use\n    Logger.getInstance().debug('Connection[id: %s] - retrieving authenticator', this.getId());\n    const auth = services.sf.getAuthenticator();\n\n    Logger.getInstance().debug('Connection[id: %s] - trying to authenticate', this.getId());\n    auth.authenticate(connectionConfig.getAuthenticator(),\n      connectionConfig.getServiceName(),\n      connectionConfig.account,\n      connectionConfig.username).then(() => {\n      Logger.getInstance().info('Connection[id: %s] - authentication successful using: %s', this.getId(), connectionConfig.getAuthenticator());\n      // JSON for connection\n      const body = Authenticator.formAuthJSON(connectionConfig.getAuthenticator(),\n        connectionConfig.account,\n        connectionConfig.username,\n        connectionConfig.getClientType(),\n        connectionConfig.getClientVersion(),\n        connectionConfig.getClientEnvironment());\n\n      // Update JSON body with the authentication values\n      auth.updateBody(body);\n\n      Logger.getInstance().debug('Connection[id: %s] - initializing easyLogging', this.getId());\n      initEasyLogging(connectionConfig.clientConfigFile)\n        .then(() => {\n          Logger.getInstance().debug('Connection[id: %s] - easyLogging initialized', this.getId());\n          try {\n            Logger.getInstance().debug('Connection[id: %s] - connecting through service', this.getId());\n            services.sf.connect({\n              callback: connectCallback(self, callback),\n              json: body\n            });\n\n            const connectingDuration = timer.getDuration();\n            Logger.getInstance().info(\n              'Connection[id: %s] - connected successfully after %s milliseconds',\n              this.getId(), connectingDuration\n            );\n            return this;\n          } catch (e) {\n            // we don't expect an error here since callback method should be called\n            const connectingDuration = timer.getDuration();\n            Logger.getInstance().info('Connection[id: %s] - failed to connect after %s milliseconds. ' +\n                'Error: Unexpected error from calling connectCallback function in snowflake service - %s', this.getId(), connectingDuration, e);\n          }\n        },\n        ()  => {\n          const connectingDuration = timer.getDuration();\n          Logger.getInstance().error('Connection[id: %s] - failed to initialize easyLogging. ' +\n              'Connecting failed after %s milliseconds', this.getId(), connectingDuration);\n          callback(Errors.createClientError(ErrorCodes.ERR_CONN_CONNECT_INVALID_CLIENT_CONFIG, true), self);\n        });\n    },\n    (err) => {\n      const connectingDuration = timer.getDuration();\n      Logger.getInstance().error('Connection[id: %s] - authentication failed. Error: %s. ' +\n            'Connecting failed after %s milliseconds', this.getId(), err, connectingDuration);\n      callback(err, self);\n    });\n\n    return this;\n  };\n\n\n  /**\n   * Establishes a connection if we aren't in a fatal state.\n   *\n   * @param {Function} callback\n   *\n   * @returns {Object} the connection object.\n   */\n  this.connectAsync = async function (callback) {\n    const timer = new ExecutionTimer().start();\n    const connectingDomain = this.determineConnectionDomain();\n    Logger.getInstance().info('Connection[id: %s] - async connecting. Associated Snowflake domain: %s', this.getId(), connectingDomain);\n\n    // invalid callback\n    Errors.checkArgumentValid(\n      !Util.exists(callback) || Util.isFunction(callback),\n      ErrorCodes.ERR_CONN_CONNECT_INVALID_CALLBACK);\n\n    if (Util.isPrivateLink(connectionConfig.host)) {\n      this.setupOcspPrivateLink(connectionConfig.host);\n      Logger.getInstance().info('Connection[id: %s] - setting up private link', this.getId());\n    }\n\n    // connect to the snowflake service and provide our own callback so that\n    // the connection can be passed in when invoking the connection.connect()\n    // callback\n    \n    const self = this;\n\n    if (connectionConfig.getClientStoreTemporaryCredential()) {\n      Logger.getInstance().debug('Connection[id: %s] - storing temporary credential of client', this.getId());\n      const key = Util.buildCredentialCacheKey(connectionConfig.host,\n        connectionConfig.username, AuthenticationTypes.ID_TOKEN_AUTHENTICATOR);\n      if (GlobalConfig.getCredentialManager() === null) {\n        Logger.getInstance().debug('Connection[id: %s] - using default json credential manager', this.getId());\n        GlobalConfig.setCustomCredentialManager(new JsonCredentialManager(connectionConfig.getCredentialCacheDir()));\n      }\n      Logger.getInstance().debug('Connection[id: %s] - reading idToken using credential manager', this.getId());\n      connectionConfig.idToken = await GlobalConfig.getCredentialManager().read(key);\n    }\n\n    if (connectionConfig.getClientRequestMFAToken()) {\n      Logger.getInstance().debug('Connection[id: %s] - extracting mfaToken of client', this.getId());\n      const key = Util.buildCredentialCacheKey(connectionConfig.host,\n        connectionConfig.username, AuthenticationTypes.USER_PWD_MFA_AUTHENTICATOR);\n      if (GlobalConfig.getCredentialManager() === null) {\n        Logger.getInstance().debug('Connection[id: %s] - using default json credential manager', this.getId());\n        GlobalConfig.setCustomCredentialManager(new JsonCredentialManager(connectionConfig.getCredentialCacheDir()));\n      }\n      Logger.getInstance().debug('Connection[id: %s] - reading mfaToken using credential manager', this.getId());\n      connectionConfig.mfaToken = await GlobalConfig.getCredentialManager().read(key);\n    }\n   \n    // Get authenticator to use\n    Logger.getInstance().debug('Connection[id: %s] - retrieving authenticator', this.getId());\n    const auth = Authenticator.getAuthenticator(connectionConfig, context.getHttpClient());\n    services.sf.authenticator = auth;\n\n    try {\n      Logger.getInstance().debug('Connection[id: %s] - initializing easyLogging', this.getId());\n      await initEasyLogging(connectionConfig.clientConfigFile);\n    } catch (err) {\n      const connectingDuration = timer.getDuration();\n      Logger.getInstance().error('Connection[id: %s] - failed to initialize easyLogging. ' +\n          'Connecting failed after %s milliseconds', this.getId(), connectingDuration);\n      throw Errors.createClientError(ErrorCodes.ERR_CONN_CONNECT_INVALID_CLIENT_CONFIG, true);\n    }\n\n    let body = null;\n    try {\n      Logger.getInstance().debug('Connection[id: %s] - using authentication type: %s', this.getId(), connectionConfig.getAuthenticator());\n\n      Logger.getInstance().debug('Connection[id: %s] - trying to authenticate', this.getId());\n      await auth.authenticate(connectionConfig.getAuthenticator(),\n        connectionConfig.getServiceName(),\n        connectionConfig.account,\n        connectionConfig.username);\n\n      Logger.getInstance().info('Connection[id: %s] - authentication successful using: %s', this.getId(), connectionConfig.getAuthenticator());\n\n      // JSON for connection\n      body = Authenticator.formAuthJSON(connectionConfig.getAuthenticator(),\n        connectionConfig.account,\n        connectionConfig.username,\n        connectionConfig.getClientType(),\n        connectionConfig.getClientVersion(),\n        connectionConfig.getClientEnvironment());\n    \n      // Update JSON body with the authentication values\n      auth.updateBody(body);\n    } catch (authErr) {\n      const connectingDuration = timer.getDuration();\n      Logger.getInstance().info('Connection[id: %s] - failed to connect async after %s milliseconds.' +\n          'Failed during authentication. Error: %s', this.getId(), connectingDuration, authErr);\n\n      Logger.getInstance().error('Connection[id: %s] - failed during authentication. Error: %s', this.getId(), authErr);\n      callback(authErr);\n      return this;\n    }\n\n    try {\n      // Request connection\n      Logger.getInstance().debug('Connection[id: %s] - connecting through service', this.getId());\n      services.sf.connect({\n        callback: connectCallback(self, callback),\n        json: body,\n      });\n      // return the connection to facilitate chaining\n      const connectingDuration = timer.getDuration();\n      Logger.getInstance().info('Connection[id: %s] - connected successfully after %s milliseconds', this.getId(), connectingDuration);\n\n    } catch (callbackErr) {\n      const connectingDuration = timer.getDuration();\n      Logger.getInstance().info('Connection[id: %s] - failed to connect async after %s milliseconds.' +\n          'Error: Unexpected error from calling connectCallback function in snowflake service - %s', this.getId(), connectingDuration, callbackErr);\n      callback(callbackErr);\n      return this;\n    }\n\n    return this;\n  };\n\n  /**\n   * Executes a statement.\n   *\n   * @param {Object} options\n   *\n   * @returns {Object}\n   */\n  this.execute = function (options) {\n    Logger.getInstance().trace('Connection[id: %s] - execute called with options.', this.getId());\n    return Statement.createStatementPreExec(\n      options, services, connectionConfig);\n  };\n\n  /**\n   * Fetches the result of a previously issued statement.\n   *\n   * @param {Object} options\n   *\n   * @returns {Object}\n   */\n  this.fetchResult = function (options) {\n    Logger.getInstance().trace('Connection[id: %s] - fetchResult called with options', this.getId());\n    return Statement.createStatementPostExec(\n      options, services, connectionConfig);\n  };\n\n  /**\n   * Immediately terminates the connection without waiting for currently\n   * executing statements to complete.\n   *\n   * @param {Function} callback\n   *\n   * @returns {Object} the connection object.\n   */\n  this.destroy = function (callback) {\n    // invalid callback\n    Logger.getInstance().trace('Connection[id: %s] - destroy called', this.getId());\n    Errors.checkArgumentValid(\n      !Util.exists(callback) || Util.isFunction(callback),\n      ErrorCodes.ERR_CONN_DESTROY_INVALID_CALLBACK);\n\n    // log out of the snowflake service and provide our own callback so that\n    // the connection can be passed in when invoking the connection.destroy()\n    // callback\n    Logger.getInstance().trace('Connection[id: %s] - destroying through service', this.getId());\n    const self = this;\n    services.sf.destroy(\n      {\n        callback: function (err) {\n          if (Util.exists(self.keepalive)) {\n            clearInterval(self.keepalive);\n            Logger.getInstance().trace('Connection[id: %s] - keepAlive interval cleared', self.getId());\n          }\n\n          if (Util.isFunction(callback)) {\n            callback(Errors.externalize(err), self);\n          }\n        }\n      });\n\n    Logger.getInstance().trace('Connection[id: %s] - connection destroyed successfully', this.getId());\n    // return the connection to facilitate chaining\n    return this;\n  };\n\n  /**\n   * Gets the response containing the status of the query based on queryId.\n   *\n   * @param {String} queryId\n   *\n   * @returns {Object} the query response\n   */\n  async function getQueryResponse(queryId) {\n    Logger.getInstance().trace('Connection[id: %s] - requested query response for Query[id: %s]', id, queryId);\n    // Check if queryId exists and is valid uuid\n    Errors.checkArgumentExists(Util.exists(queryId),\n      ErrorCodes.ERR_CONN_FETCH_RESULT_MISSING_QUERY_ID);\n    Errors.checkArgumentValid(queryIdRegex.test(queryId),\n      ErrorCodes.ERR_GET_RESPONSE_QUERY_INVALID_UUID, queryId);\n    Logger.getInstance().debug('Connection[id: %s] - Query[id: %s] is valid', id, queryId);\n\n    // Form the request options\n    const options =\n    {\n      method: 'GET',\n      url: Url.format(\n        {\n          pathname: `/monitoring/queries/${queryId}`\n        }),\n    };\n\n    Logger.getInstance().debug('Connection[id: %s] - fetching query response for Query[id: %s]', id, queryId);\n    const timer = new ExecutionTimer().start();\n    // Get the response containing the query status\n    const response = await services.sf.requestAsync(options);\n    const fetchingDuration = timer.getDuration();\n    Logger.getInstance().debug('Connection[id: %s] - query response for Query[id: %s] fetched successfully after: %s milliseconds', id, queryId, fetchingDuration);\n\n    return response['data'];\n  }\n\n  /**\n   * Extracts the status of the query from the query response.\n   *\n   * @param {Object} queryResponse\n   *\n   * @returns {String} the query status.\n   */\n  function extractQueryStatus(queryResponse) {\n    const queries = queryResponse['data']['queries'];\n    let status = QueryStatus.code.NO_QUERY_DATA; // default status\n    if ( queries.length > 0) {\n      status =  queries[0]['status'];\n    }\n\n    Logger.getInstance().trace('Connection[id: %s] - Extracted query status: %s', status);\n    return status;\n  }\n\n  /**\n   * Gets the status of the query based on queryId.\n   *\n   * @param {String} queryId\n   *\n   * @returns {String} the query status.\n   */\n  this.getQueryStatus = async function (queryId) {\n    Logger.getInstance().trace('Connection[id: %s] - getQueryStatus called for Query[id: %s]', this.getId(), queryId);\n    return extractQueryStatus(await getQueryResponse(queryId));\n  };\n\n  /**\n   * Gets the status of the query based on queryId and throws if there's an error.\n   *\n   * @param {String} queryId\n   *\n   * @returns {String} the query status.\n   */\n  this.getQueryStatusThrowIfError = async function (queryId) {\n    Logger.getInstance().trace('Connection[id: %s] - getQueryStatusThrowIfError called for Query[id: %s]', this.getId(), queryId);\n    const response = await getQueryResponse(queryId);\n    const status =  extractQueryStatus(response);\n    let sqlState = null;\n\n    if (this.isAnError(status) ) {\n      let message = response['message'] || '';\n      const code = response['code'] || -1;\n\n      if (response['data']) {\n        message += response['data']['queries'].length > 0 ? response['data']['queries'][0]['errorMessage'] : '';\n        sqlState = response['data']['sqlState'];\n      }\n\n      Logger.getInstance().debug('Connection[id: %s] - query error for Query[id: %s]. Error: %s. SQLState: %s', this.getId(), queryId, message, sqlState);\n      throw Errors.createOperationFailedError(\n        code, response, message, sqlState);\n    }\n\n    return status;\n  };\n\n  /**\n   * Gets the results from a previously ran query based on queryId\n   *\n   * @param {Object} options\n   *\n   * @returns {Object}\n   */\n  this.getResultsFromQueryId = async function (options) {\n    const queryId = options.queryId;\n    Logger.getInstance().trace('Connection[id: %s] - getResultsFromQueryId called for Query[id: %s].', this.getId(), queryId);\n\n    let status, noDataCounter = 0, retryPatternPos = 0;\n\n    // Wait until query has finished executing\n    let queryStillExecuting = true;\n    while (queryStillExecuting) {\n      Logger.getInstance().trace('Connection[id: %s] - checking if Query[id: %s] is still executing. Retries with no data count: %d', this.getId(), queryId, noDataCounter);\n      // Check if query is still running.\n      // Trigger exception if it failed or there is no query data in the server.\n      status = await this.getQueryStatusThrowIfError(queryId);\n      queryStillExecuting = this.isStillRunning(status);\n      if (!queryStillExecuting || status === QueryStatus.code.NO_QUERY_DATA) {\n        Logger.getInstance().trace('Connection[id: %s] - end of waiting for Query[id: %s] to finish executing. ' +\n            queryStillExecuting ? 'Query is no longer executing. ' : 0, this.getId(), queryId, status);\n        break;\n      }\n\n      // Timeout based on query status retry rules\n      await new Promise((resolve) => {\n        setTimeout(() => resolve(), asyncRetryInMilliseconds * asyncRetryPattern[retryPatternPos]);\n      });\n\n      // If no data, increment the no data counter\n      if (QueryStatus.code[status] === QueryStatus.code.NO_DATA) {\n        noDataCounter++;\n        Logger.getInstance().trace('Connection[id: %s] - no data returned for Query[id: %s]. Retries with no data count: %d', this.getId(), queryId, noDataCounter);\n        // Check if retry for no data is exceeded\n        if (noDataCounter > asyncNoDataMaxRetry) {\n          Logger.getInstance().error('Connection[id: %s] - no data returned for Query[id: %s]. Retry limit: %s reached.', this.getId(), queryId, asyncNoDataMaxRetry);\n          throw Errors.createClientError(\n            ErrorCodes.ERR_GET_RESULTS_QUERY_ID_NO_DATA, true, queryId);\n        }\n      }\n\n      if (retryPatternPos < asyncRetryPattern.length - 1) {\n        retryPatternPos++;\n      }\n    }\n\n    if (QueryStatus.code[status] === QueryStatus.code.NO_QUERY_DATA) {\n      Logger.getInstance().error('Connection[id: %s] - Query[id: %s] did not succeed. Final status: %s', this.getId(), queryId, status);\n      throw Errors.createClientError(\n        ErrorCodes.ERR_GET_RESULTS_QUERY_ID_NO_DATA, true, queryId, status);\n    }\n\n    if (QueryStatus.code[status] !== QueryStatus.code.SUCCESS) {\n      Logger.getInstance().error('Connection[id: %s] - Query[id: %s] did not succeed. Final status: %s', this.getId(), queryId, status);\n      throw Errors.createClientError(\n        ErrorCodes.ERR_GET_RESULTS_QUERY_ID_NOT_SUCCESS_STATUS, true, queryId, status);\n    }\n\n    Logger.getInstance().debug('Connection[id: %s] - Query[id: %s] succeeded. Fetching the result.', this.getId(), queryId);\n    return this.fetchResult(options);\n  };\n\n  /**\n   * Checks whether the given status is currently running.\n   *\n   * @param {String} status\n   *\n   * @returns {Boolean}\n   */\n  this.isStillRunning = function (status) {\n    Logger.getInstance().trace('Connection[id: %s] - checking if status %s is still running', this.getId(), status);\n    return QueryStatus.runningStatuses.includes(QueryStatus.code[status]);\n  };\n\n  /**\n   * Checks whether the given status means that there has been an error.\n   *\n   * @param {String} status\n   *\n   * @returns {Boolean}\n   */\n  this.isAnError = function (status) {\n    return QueryStatus.errorStatuses.includes(QueryStatus.code[status]);\n  };\n\n  /**\n   * Returns a serialized version of this connection.\n   *\n   * @returns {String}\n   */\n  this.serialize = function () {\n    Logger.getInstance().trace('Connection[id: %s] - serialize called', this.getId());\n    return JSON.stringify(context.getConfig());\n  };\n\n  EventEmitter.call(this);\n}\n\nUtil.inherits(Connection, EventEmitter);\n\nmodule.exports = Connection;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/lib/connection/connection.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/lib/connection/connection_config.js":
/*!************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/lib/connection/connection_config.js ***!
  \************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const os = __webpack_require__(/*! os */ \"os\");\nconst url = __webpack_require__(/*! url */ \"url\");\nconst Util = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/snowflake-sdk/lib/util.js\");\nconst ProxyUtil = __webpack_require__(/*! ../proxy_util */ \"(rsc)/./node_modules/snowflake-sdk/lib/proxy_util.js\");\nconst Errors = __webpack_require__(/*! ../errors */ \"(rsc)/./node_modules/snowflake-sdk/lib/errors.js\");\nconst ConnectionConstants = __webpack_require__(/*! ../constants/connection_constants */ \"(rsc)/./node_modules/snowflake-sdk/lib/constants/connection_constants.js\");\nconst path = __webpack_require__(/*! path */ \"path\");\nconst ErrorCodes = Errors.codes;\nconst NativeTypes = (__webpack_require__(/*! ./result/data_types */ \"(rsc)/./node_modules/snowflake-sdk/lib/connection/result/data_types.js\").NativeTypes);\nconst GlobalConfig = __webpack_require__(/*! ../global_config */ \"(rsc)/./node_modules/snowflake-sdk/lib/global_config.js\");\nconst AuthenticationTypes = __webpack_require__(/*! ../authentication/authentication_types */ \"(rsc)/./node_modules/snowflake-sdk/lib/authentication/authentication_types.js\");\nconst levenshtein = __webpack_require__(/*! fastest-levenshtein */ \"(rsc)/./node_modules/fastest-levenshtein/esm/mod.js\");\nconst RowMode = __webpack_require__(/*! ./../constants/row_mode */ \"(rsc)/./node_modules/snowflake-sdk/lib/constants/row_mode.js\");\nconst DataTypes = __webpack_require__(/*! ./result/data_types */ \"(rsc)/./node_modules/snowflake-sdk/lib/connection/result/data_types.js\");\nconst Logger = __webpack_require__(/*! ../logger */ \"(rsc)/./node_modules/snowflake-sdk/lib/logger.js\");\nconst WAIT_FOR_BROWSER_ACTION_TIMEOUT = 120000;\nconst DEFAULT_PARAMS =\n[\n  'account',\n  'application',\n  'region',\n  'host',\n  'accessUrl',\n  'username',\n  'password',\n  'authenticator',\n  'proxyHost',\n  'proxyPort',\n  'serviceName',\n  'privateKey',\n  'privateKeyPath',\n  'privateKeyPass',\n  'token',\n  'warehouse',\n  'database',\n  'schema',\n  'role',\n  'rowMode',\n  'streamResult',\n  'fetchAsString',\n  'clientSessionKeepAlive',\n  'clientSessionKeepAliveHeartbeatFrequency',\n  'jsTreatIntegerAsBigInt',\n  'sessionToken',\n  'masterToken',\n  'sessionTokenExpirationTime',\n  'masterTokenExpirationTime',\n  'agentClass',\n  'validateDefaultParameters',\n  'arrayBindingThreshold',\n  'gcsUseDownscopedCredential',\n  'forceStageBindError',\n  'includeRetryReason',\n  'disableQueryContextCache',\n  'retryTimeout',\n  'clientRequestMFAToken',\n  'clientStoreTemporaryCredential',\n  'disableConsoleLogin',\n  'forceGCPUseDownscopedCredential',\n  'representNullAsStringNull',\n  'disableSamlURLCheck',\n  'credentialCacheDir',\n  'passcodeInPassword',\n  'passcode',\n];\n\nfunction consolidateHostAndAccount(options) {\n  let dotPos = -1;\n  let realAccount = undefined;\n  let realRegion = undefined;\n  const protocol = options.protocol || 'https';\n  const port = Util.exists(options.port) ? Util.format(':%s', options.port) : '';\n\n\n  if (Util.exists(options.region)) {\n    Errors.checkArgumentValid(Util.isCorrectSubdomain(options.region), ErrorCodes.ERR_CONN_CREATE_INVALID_REGION_REGEX);\n    realRegion = options.region;\n  }\n\n  if (Util.exists(options.account)) {\n    Errors.checkArgumentValid(Util.isString(options.account), ErrorCodes.ERR_CONN_CREATE_INVALID_ACCOUNT);\n    Errors.checkArgumentValid(Util.isCorrectSubdomain(options.account), ErrorCodes.ERR_CONN_CREATE_INVALID_ACCOUNT_REGEX);\n    dotPos = options.account.indexOf('.');\n    realAccount = options.account;\n    if (dotPos > 0) {\n      realRegion = realAccount.substring(dotPos + 1);\n      realAccount = realAccount.substring(0, dotPos);\n    }\n  }\n\n  if (Util.exists(options.accessUrl)) { //accessUrl is set in configuration\n    try {\n      const parsedUrl = url.parse(options.accessUrl);\n      Errors.checkArgumentValid(Util.exists(parsedUrl.hostname), ErrorCodes.ERR_CONN_CREATE_INVALID_ACCESS_URL);\n      if (!Util.exists(options.host)) {\n        options.host = parsedUrl.hostname;\n      }\n      const dotPos = parsedUrl.hostname.indexOf('.');\n      if (dotPos > 0 && !Util.exists(options.account)) {\n        realAccount = parsedUrl.hostname.substring(0, dotPos);\n      }\n    } catch (e) {\n      Errors.checkArgumentValid(\n        false, ErrorCodes.ERR_CONN_CREATE_MISSING_ACCOUNT);\n    }\n  } else if (Util.exists(options.host)) { //host is set in configuration\n    options.accessUrl = Util.format('%s://%s%s', protocol, options.host, port);\n    const dotPos = options.host.indexOf('.');\n    if (dotPos > 0 && !Util.exists(options.account)) {\n      realAccount = options.host.substring(0, dotPos);\n    } else {\n      realAccount = options.account;\n    }\n  } else if (Util.exists(options.account)) { //only account() is set in configuration\n    if (options.region === 'us-west-2') {\n      options.region = '';\n    }\n    options.host = Util.constructHostname(realRegion, realAccount);\n    options.accessUrl = Util.format('%s://%s%s', protocol, options.host, port);\n  }\n\n  if (Util.exists(realAccount) && options.accessUrl.includes('global.snowflakecomputing')) {\n    const dashPos = realAccount.indexOf('-');\n    if (dashPos > 0) {\n      // global URL\n      realAccount = realAccount.substring(0, dashPos);\n    }\n  }\n  options.account = realAccount;\n  options.region = realRegion;\n\n  // check for missing accessURL\n  Errors.checkArgumentExists(Util.exists(options.account), ErrorCodes.ERR_CONN_CREATE_MISSING_ACCOUNT);\n  // check for missing account\n  Errors.checkArgumentExists(Util.exists(options.accessUrl), ErrorCodes.ERR_CONN_CREATE_MISSING_ACCESS_URL);\n}\n\n/**\n * A Connection configuration object that should be available to all stateful\n * objects in the driver.\n *\n * @param {Object} options\n * @param {Boolean} [validateCredentials]\n * @param {Boolean} [qaMode]\n * @param {Object} [clientInfo]\n *\n * @constructor\n */\nfunction ConnectionConfig(options, validateCredentials, qaMode, clientInfo) {\n  // if no value is specified for the validate credentials flag, default to true\n  if (!Util.exists(validateCredentials)) {\n    validateCredentials = true;\n  }\n\n  // check for missing options\n  Errors.checkArgumentExists(Util.exists(options),\n    ErrorCodes.ERR_CONN_CREATE_MISSING_OPTIONS);\n\n  // check for invalid options\n  Errors.checkArgumentValid(Util.isObject(options),\n    ErrorCodes.ERR_CONN_CREATE_INVALID_OPTIONS);\n\n  // only validate credentials if necessary\n  if (validateCredentials) {\n    // username is not required for oauth and external browser authenticators\n    if (!Util.exists(options.authenticator) ||\n      (options.authenticator.toUpperCase() !== AuthenticationTypes.OAUTH_AUTHENTICATOR &&\n        options.authenticator.toUpperCase() !== AuthenticationTypes.EXTERNAL_BROWSER_AUTHENTICATOR)) {\n      // check for missing username\n      Errors.checkArgumentExists(Util.exists(options.username),\n        ErrorCodes.ERR_CONN_CREATE_MISSING_USERNAME);\n    }\n\n    if (Util.exists(options.username)) {\n      // check for invalid username\n      Errors.checkArgumentValid(Util.isString(options.username),\n        ErrorCodes.ERR_CONN_CREATE_INVALID_USERNAME);\n    }\n\n    // password is only required for default authenticator\n    if (!Util.exists(options.authenticator) ||\n      options.authenticator === AuthenticationTypes.DEFAULT_AUTHENTICATOR) {\n      // check for missing password\n      Errors.checkArgumentExists(Util.exists(options.password),\n        ErrorCodes.ERR_CONN_CREATE_MISSING_PASSWORD);\n\n      // check for invalid password\n      Errors.checkArgumentValid(Util.isString(options.password),\n        ErrorCodes.ERR_CONN_CREATE_INVALID_PASSWORD);\n    }\n\n    consolidateHostAndAccount(options);\n  }\n\n  // check for missing accessUrl\n  Errors.checkArgumentExists(Util.exists(options.accessUrl),\n    ErrorCodes.ERR_CONN_CREATE_MISSING_ACCESS_URL);\n\n  // check for invalid accessUrl\n  Errors.checkArgumentValid(Util.isString(options.accessUrl),\n    ErrorCodes.ERR_CONN_CREATE_INVALID_ACCESS_URL);\n\n  const proxyHost = options.proxyHost;\n  const proxyPort = options.proxyPort;\n  const proxyUser = options.proxyUser;\n  const proxyPassword = options.proxyPassword;\n  const proxyProtocol = options.proxyProtocol || 'http';\n  const noProxy = options.noProxy;\n\n  // if we're running in node and some proxy information is specified\n  let proxy;\n  if (Util.isNode() && (Util.exists(proxyHost) || Util.exists(proxyPort))) {\n    proxy =\n    {\n      host: proxyHost,\n      port: proxyPort,\n      user: proxyUser,\n      password: proxyPassword,\n      protocol: proxyProtocol,\n      noProxy: noProxy\n    };\n    ProxyUtil.validateProxy(proxy);\n  }\n\n  const serviceName = options.serviceName;\n  let authenticator = options.authenticator;\n\n  // if no value is specified for authenticator, default to Snowflake\n  if (!Util.exists(authenticator)) {\n    authenticator = AuthenticationTypes.DEFAULT_AUTHENTICATOR;\n  } else {\n    authenticator = authenticator.toUpperCase();\n  }\n\n  let browserActionTimeout = options.browserActionTimeout;\n  if (Util.exists(options.browserActionTimeout)) {\n    Errors.checkArgumentValid(Util.number.isPositiveInteger(browserActionTimeout),\n      ErrorCodes.ERR_CONN_CREATE_INVALID_BROWSER_TIMEOUT);\n  } else {\n    browserActionTimeout = WAIT_FOR_BROWSER_ACTION_TIMEOUT;\n  }\n\n  const privateKey = options.privateKey;\n  if (Util.exists(options.privateKey)) {\n    Errors.checkArgumentValid((Util.isString(privateKey) && Util.isPrivateKey(privateKey)),\n      ErrorCodes.ERR_CONN_CREATE_INVALID_PRIVATE_KEY);\n  }\n\n  const privateKeyPath = options.privateKeyPath;\n  if (Util.exists(options.privateKeyPath)) {\n    Errors.checkArgumentValid(Util.isString(privateKeyPath),\n      ErrorCodes.ERR_CONN_CREATE_INVALID_PRIVATE_KEY_PATH);\n  }\n\n  const privateKeyPass = options.privateKeyPass;\n  if (Util.exists(options.privateKeyPass)) {\n    Errors.checkArgumentValid(Util.isString(privateKeyPass),\n      ErrorCodes.ERR_CONN_CREATE_INVALID_PRIVATE_KEY_PASS);\n  }\n\n  const token = options.token;\n  if (Util.exists(token)) {\n    Errors.checkArgumentValid(Util.isString(token),\n      ErrorCodes.ERR_CONN_CREATE_INVALID_OAUTH_TOKEN);\n  }\n\n  const warehouse = options.warehouse;\n  const database = options.database;\n  const schema = options.schema;\n  const role = options.role;\n\n  // check for invalid warehouse\n  if (Util.exists(warehouse)) {\n    Errors.checkArgumentValid(Util.isString(warehouse),\n      ErrorCodes.ERR_CONN_CREATE_INVALID_WAREHOUSE);\n  }\n\n  // check for invalid database\n  if (Util.exists(database)) {\n    Errors.checkArgumentValid(Util.isString(database),\n      ErrorCodes.ERR_CONN_CREATE_INVALID_DATABASE);\n  }\n\n  // check for invalid schema\n  if (Util.exists(schema)) {\n    Errors.checkArgumentValid(Util.isString(schema),\n      ErrorCodes.ERR_CONN_CREATE_INVALID_SCHEMA);\n  }\n\n  // check for invalid role\n  if (Util.exists(role)) {\n    Errors.checkArgumentValid(Util.isString(role),\n      ErrorCodes.ERR_CONN_CREATE_INVALID_ROLE);\n  }\n\n  // check for invalid streamResult\n  const streamResult = options.streamResult;\n  if (Util.exists(streamResult)) {\n    Errors.checkArgumentValid(Util.isBoolean(streamResult),\n      ErrorCodes.ERR_CONN_CREATE_INVALID_STREAM_RESULT);\n  }\n\n  // check for invalid fetchAsString\n  const fetchAsString = options.fetchAsString;\n  if (Util.exists(fetchAsString)) {\n    // check that the value is an array\n    Errors.checkArgumentValid(Util.isArray(fetchAsString),\n      ErrorCodes.ERR_CONN_CREATE_INVALID_FETCH_AS_STRING);\n\n    // check that all the array elements are valid\n    const invalidValueIndex = NativeTypes.findInvalidValue(fetchAsString);\n    Errors.checkArgumentValid(invalidValueIndex === -1,\n      ErrorCodes.ERR_CONN_CREATE_INVALID_FETCH_AS_STRING_VALUES,\n      JSON.stringify(fetchAsString[invalidValueIndex]));\n  }\n  // Row mode is optional, can be undefined\n  const rowMode = options.rowMode;\n  if (Util.exists(rowMode)) {\n    RowMode.checkRowModeValid(rowMode);\n  }\n\n  // check for invalid clientSessionKeepAlive\n  const clientSessionKeepAlive = options.clientSessionKeepAlive;\n  if (Util.exists(clientSessionKeepAlive)) {\n    Errors.checkArgumentValid(Util.isBoolean(clientSessionKeepAlive),\n      ErrorCodes.ERR_CONN_CREATE_INVALID_KEEP_ALIVE);\n  }\n\n  // check for invalid clientSessionKeepAliveHeartbeatFrequency\n  let clientSessionKeepAliveHeartbeatFrequency = options.clientSessionKeepAliveHeartbeatFrequency;\n  if (Util.exists(clientSessionKeepAliveHeartbeatFrequency)) {\n    Errors.checkArgumentValid(Util.isNumber(clientSessionKeepAliveHeartbeatFrequency),\n      ErrorCodes.ERR_CONN_CREATE_INVALID_KEEP_ALIVE_HEARTBEAT_FREQ);\n    clientSessionKeepAliveHeartbeatFrequency =\n      Util.validateClientSessionKeepAliveHeartbeatFrequency(clientSessionKeepAliveHeartbeatFrequency, ConnectionConstants.HEARTBEAT_FREQUENCY_MASTER_VALIDITY);\n  }\n\n  const jsTreatIntegerAsBigInt = options.jsTreatIntegerAsBigInt;\n  if (Util.exists(jsTreatIntegerAsBigInt)) {\n    Errors.checkArgumentValid(Util.isBoolean(jsTreatIntegerAsBigInt),\n      ErrorCodes.ERR_CONN_CREATE_INVALID_TREAT_INTEGER_AS_BIGINT);\n  }\n\n  const gcsUseDownscopedCredential = options.gcsUseDownscopedCredential;\n  if (Util.exists(gcsUseDownscopedCredential)) {\n    Errors.checkArgumentValid(Util.isBoolean(gcsUseDownscopedCredential),\n      ErrorCodes.ERR_CONN_CREATE_INVALID_GCS_USE_DOWNSCOPED_CREDENTIAL);\n  }\n\n  const clientConfigFile = options.clientConfigFile;\n  if (Util.exists(clientConfigFile)) {\n    Errors.checkArgumentValid(Util.isString(clientConfigFile), ErrorCodes.ERR_CONN_CREATE_INVALID_CLIENT_CONFIG_FILE);\n  }\n\n  // remember if we're in qa mode\n  this._qaMode = qaMode;\n\n  // if a client-info argument is specified, validate it\n  const clientType = 'JavaScript';\n  let clientName;\n  let clientVersion;\n  let clientEnvironment;\n  if (Util.exists(clientInfo)) {\n    Errors.assertInternal(Util.isObject(clientInfo));\n    Errors.assertInternal(Util.isString(clientInfo.version));\n    Errors.assertInternal(Util.isObject(clientInfo.environment));\n\n    clientName = clientInfo.name;\n    clientVersion = clientInfo.version;\n    clientEnvironment = clientInfo.environment;\n    clientEnvironment.OS = os.platform();\n    clientEnvironment.OS_VERSION = os.release();\n    clientEnvironment.OCSP_MODE = GlobalConfig.getOcspMode();\n  }\n\n  const clientApplication = options.application;\n  if (Util.exists(clientApplication)) {\n    Errors.checkArgumentValid(Util.isString(clientApplication),\n      ErrorCodes.ERR_CONN_CREATE_INVALID_APPLICATION);\n\n    const APPLICATION_PATTERN = new RegExp(String.raw`^[A-Za-z]([A-Za-z0-9.\\-_]){1,50}$`,\n      'gi');\n\n    Errors.checkArgumentValid(APPLICATION_PATTERN.test(clientApplication),\n      ErrorCodes.ERR_CONN_CREATE_INVALID_APPLICATION);\n  }\n\n  let validateDefaultParameters = false;\n  if (Util.exists(options.validateDefaultParameters)) {\n    // check for invalid validateDefaultParameters\n    Errors.checkArgumentValid(Util.isBoolean(options.validateDefaultParameters),\n      ErrorCodes.ERR_CONN_CREATE_INVALID_VALIDATE_DEFAULT_PARAMETERS);\n\n    validateDefaultParameters = options.validateDefaultParameters;\n  }\n\n  let bindThreshold = null;\n  if (Util.exists(options.arrayBindingThreshold)) {\n    // check for invalid arrayBindingThreshold\n    Errors.checkArgumentValid(Util.isNumber(options.arrayBindingThreshold),\n      ErrorCodes.ERR_CONN_CREATE_INVALID_ARRAY_BINDING_THRESHOLD);\n\n    bindThreshold = options.arrayBindingThreshold;\n  }\n\n  let forceStageBindError = null;\n  if (Util.exists(options.forceStageBindError)) {\n    // check for invalid forceStageBindError\n    Errors.checkArgumentValid(Util.isNumber(options.forceStageBindError),\n      ErrorCodes.ERR_CONN_CREATE_INVALID_FORCE_STAGE_BIND_ERROR);\n\n    forceStageBindError = options.forceStageBindError;\n  }\n\n  let disableQueryContextCache = false;\n  if (Util.exists(options.disableQueryContextCache)) {\n    Errors.checkArgumentValid(Util.isBoolean(options.disableQueryContextCache),\n      ErrorCodes.ERR_CONN_CREATE_INVALID_DISABLED_QUERY_CONTEXT_CACHE);\n\n    disableQueryContextCache = options.disableQueryContextCache;\n  }\n\n  let retryTimeout = 300;\n  if (Util.exists(options.retryTimeout)) {\n    Errors.checkArgumentValid(Util.isNumber(options.retryTimeout),\n      ErrorCodes.ERR_CONN_CREATE_INVALID_MAX_RETRY_TIMEOUT);\n\n    retryTimeout = options.retryTimeout !== 0 ? Math.max(retryTimeout, options.retryTimeout) : 0;\n  }\n\n  let includeRetryReason = true;\n  if (Util.exists(options.includeRetryReason)) {\n    Errors.checkArgumentValid(Util.isBoolean(options.includeRetryReason),\n      ErrorCodes.ERR_CONN_CREATE_INVALID_INCLUDE_RETRY_REASON);\n\n    includeRetryReason = options.includeRetryReason;\n  }\n\n  let clientRequestMFAToken = false;\n  if (Util.exists(options.clientRequestMFAToken)) {\n    Errors.checkArgumentValid(Util.isBoolean(options.clientRequestMFAToken),\n      ErrorCodes.ERR_CONN_CREATE_INVALID_CLIENT_REQUEST_MFA_TOKEN);\n\n    clientRequestMFAToken = options.clientRequestMFAToken;\n  }\n\n  let disableConsoleLogin = true;\n  if (Util.exists(options.disableConsoleLogin)) {\n    Errors.checkArgumentValid(Util.isBoolean(options.disableConsoleLogin),\n      ErrorCodes.ERR_CONN_CREATE_INVALID_DISABLE_CONSOLE_LOGIN);\n\n    disableConsoleLogin = options.disableConsoleLogin;\n  }\n\n  if (Util.exists(options.forceGCPUseDownscopedCredential)) {\n    Errors.checkArgumentValid(Util.isBoolean(options.forceGCPUseDownscopedCredential),\n      ErrorCodes.ERR_CONN_CREATE_INVALID_FORCE_GCP_USE_DOWNSCOPED_CREDENTIAL);\n\n    process.env.SNOWFLAKE_FORCE_GCP_USE_DOWNSCOPED_CREDENTIAL = options.forceGCPUseDownscopedCredential;\n  } else {\n    process.env.SNOWFLAKE_FORCE_GCP_USE_DOWNSCOPED_CREDENTIAL = false;\n  }\n\n  if (Util.exists(options.representNullAsStringNull)) {\n    Errors.checkArgumentValid(Util.isBoolean(options.representNullAsStringNull),\n      ErrorCodes.ERR_CONN_CREATE_INVALID_REPRESENT_NULL_AS_STRING_NULL);\n\n    DataTypes.setIsRepresentNullAsStringNull(options.representNullAsStringNull);\n  }\n\n  let disableSamlURLCheck = false;\n  if (Util.exists(options.disableSamlURLCheck)) {\n    Errors.checkArgumentValid(Util.isBoolean(options.disableSamlURLCheck),\n      ErrorCodes.ERR_CONN_CREATE_INVALID_DISABLE_SAML_URL_CHECK);\n\n    disableSamlURLCheck = options.disableSamlURLCheck;\n  }\n\n  let clientStoreTemporaryCredential = false;\n  if (Util.exists(options.clientStoreTemporaryCredential)) {\n    Errors.checkArgumentValid(Util.isBoolean(options.clientStoreTemporaryCredential),\n      ErrorCodes.ERR_CONN_CREATE_INVALID_CLIENT_STORE_TEMPORARY_CREDENTIAL);\n\n    clientStoreTemporaryCredential = options.clientStoreTemporaryCredential;\n  }\n\n  let credentialCacheDir = null;\n  if (Util.exists(options.credentialCacheDir)) {\n    const absolutePath = path.resolve(options.credentialCacheDir);\n    Errors.checkArgumentValid(Util.validatePath(absolutePath),\n      ErrorCodes.ERR_CONN_CREATE_INVALID_CREDENTIAL_CACHE_DIR);\n\n    credentialCacheDir = absolutePath;\n  }\n\n  let passcodeInPassword = false;\n  if (Util.exists(options.passcodeInPassword)) {\n    Errors.checkArgumentValid(Util.isBoolean(options.passcodeInPassword), \n      ErrorCodes.ERR_CONN_CREATE_INVALID_PASSCODE_IN_PASSWORD);\n\n    passcodeInPassword = options.passcodeInPassword;\n  }\n\n  let passcode = null;\n  if (Util.exists(options.passcode)) {\n    Errors.checkArgumentValid(Util.isString(options.passcode),\n      ErrorCodes.ERR_CONN_CREATE_INVALID_PASSCODE);\n\n    passcode = options.passcode;\n  }\n  \n  if (validateDefaultParameters) {\n    for (const [key] of Object.entries(options)) {\n      if (!DEFAULT_PARAMS.includes(key)) {\n        const result = levenshtein.closest(key, DEFAULT_PARAMS);\n        Logger.getInstance().error(`'${key}' is an unknown connection parameter. Did you mean '${result}'?`);\n      }\n    }\n  }\n\n  /**\n   * Returns an object that contains information about the proxy hostname, port,\n   * etc. for when http requests are made.\n   *\n   * @returns {Object}\n   */\n  this.getProxy = function () {\n    return proxy;\n  };\n\n  /**\n   * Returns the warehouse to automatically use once a connection has been\n   * established.\n   *\n   * @returns {String}\n   */\n  this.getWarehouse = function () {\n    return warehouse;\n  };\n\n  /**\n   * Returns the database to automatically use once a connection has been\n   * established.\n   *\n   * @returns {String}\n   */\n  this.getDatabase = function () {\n    return database;\n  };\n\n  /**\n   * Returns the schema to automatically use once a connection has been\n   * established.\n   *\n   * @returns {String}\n   */\n  this.getSchema = function () {\n    return schema;\n  };\n\n  /**\n   * Returns the role to automatically use once a connection has been\n   * established.\n   *\n   * @returns {String}\n   */\n  this.getRole = function () {\n    return role;\n  };\n\n  /**\n   * Returns the service name.\n   *\n   * @returns {String}\n   */\n  this.getServiceName = function () {\n    return serviceName;\n  };\n\n  /**\n   * Returns the authenticator to use for establishing a connection.\n   *\n   * @returns {String}\n   */\n  this.getAuthenticator = function () {\n    return authenticator;\n  };\n\n  /**\n   * Returns the timeout in millis used for authentication by external browser.\n   *\n   * @returns {String}\n   */\n  this.getBrowserActionTimeout = function () {\n    return browserActionTimeout;\n  };\n\n  /**\n   * Returns the private key string.\n   *\n   * @returns {String}\n   */\n  this.getPrivateKey = function () {\n    return privateKey;\n  };\n\n  /**\n   * Returns the private key file location.\n   *\n   * @returns {String}\n   */\n  this.getPrivateKeyPath = function () {\n    return privateKeyPath;\n  };\n\n  /**\n   * Returns the private key passphrase.\n   *\n   * @returns {String}\n   */\n  this.getPrivateKeyPass = function () {\n    return privateKeyPass;\n  };\n\n  /**\n   * Returns the OAuth token.\n   *\n   * @returns {String}\n   */\n  this.getToken = function () {\n    return token;\n  };\n\n  /**\n   * Returns the streamResult flag.\n   *\n   * @returns {boolean}\n   */\n  this.getStreamResult = function () {\n    return streamResult;\n  };\n\n  /**\n   * Returns the fetchAsString array.\n   *\n   * @returns {String[]}\n   */\n  this.getFetchAsString = function () {\n    return fetchAsString;\n  };\n\n  /**\n   * Returns the rowMode string value ('array', 'object' or 'object_with_renamed_duplicated_columns'). Could be null or undefined.\n   *\n   * @returns  {String}\n   */\n  this.getRowMode = function () {\n    return rowMode;\n  };\n\n  /**\n   * Returns the client type.\n   *\n   * @returns {String}\n   */\n  this.getClientType = function () {\n    return clientType;\n  };\n\n  /**\n   * Returns the client name.\n   *\n   * @returns {String}\n   */\n  this.getClientName = function () {\n    return clientName;\n  };\n\n  /**\n   * Returns the client version.\n   *\n   * @returns {String}\n   */\n  this.getClientVersion = function () {\n    return clientVersion;\n  };\n\n  /**\n   * Returns the client application.\n   *\n   * @returns {String}\n   */\n  this.getClientApplication = function () {\n    return clientApplication;\n  };\n\n  /**\n   * Returns a JSON object containing version information for all the various\n   * components of the runtime, e.g. node, v8, openssl, etc.\n   *\n   * @returns {Object}\n   */\n  this.getClientEnvironment = function () {\n    return clientEnvironment;\n  };\n\n  /**\n   * Returns the client session keep alive setting.\n   *\n   * @returns {String}\n   */\n  this.getClientSessionKeepAlive = function () {\n    return clientSessionKeepAlive;\n  };\n\n  /**\n   * Returns the client session keep alive heartbeat frequency setting.\n   *\n   * @returns {String}\n   */\n  this.getClientSessionKeepAliveHeartbeatFrequency = function () {\n    return clientSessionKeepAliveHeartbeatFrequency;\n  };\n\n  /**\n   * Returns the client treat integer as setting\n   *\n   * @returns {String}\n   */\n  this.getJsTreatIntegerAsBigInt = function () {\n    return jsTreatIntegerAsBigInt;\n  };\n\n  /**\n   * Returns the setting for the GCS_USE_DOWNSCOPED_CREDENTIAL session parameter\n   *\n   * @returns {String}\n   */\n  this.getGcsUseDownscopedCredential = function () {\n    return gcsUseDownscopedCredential;\n  };\n\n  /**\n   * Returns the bind threshold\n   *\n   * @returns {string}\n   */\n  this.getbindThreshold = function () {\n    return bindThreshold;\n  };\n\n  /**\n   * Returns the force stage bind error\n   *\n   * @returns {string}\n   */\n  this.getForceStageBindError = function () {\n    return forceStageBindError;\n  };\n\n  /**\n   * Returns whether the Retry reason is included or not in the retry url\n   *\n   * @returns {Boolean}\n   */\n  this.getIncludeRetryReason = function () {\n    return includeRetryReason;\n  };\n\n  /**\n   * Returns whether the Query Context Cache is enabled or not by the configuration\n   *\n   * @returns {Boolean}\n   */\n  this.getDisableQueryContextCache = function () {\n    return disableQueryContextCache;\n  };\n\n  /**\n   * Returns the client config file\n   *\n   * @returns {String}\n   */\n  this.getClientConfigFile = function () {\n    return clientConfigFile;\n  };\n\n  /**\n   * Returns the max login timeout\n   *\n   * @returns {Number}\n   */\n  this.getRetryTimeout = function () {\n    return retryTimeout;\n  };\n\n  this.getDisableConsoleLogin = function () {\n    return disableConsoleLogin;\n  };\n\n  /**\n   * Returns whether the SAML URL check is enabled or not.\n   *\n   * @returns {Boolean}\n   */\n  this.getDisableSamlURLCheck = function () {\n    return disableSamlURLCheck;\n  };\n\n  this.getCredentialCacheDir = function () {\n    return credentialCacheDir;\n  };\n\n  this.getClientRequestMFAToken = function () {\n    return clientRequestMFAToken;\n  };\n  /** \n   * Returns whether the auth token saves on the local machine or not. \n   *\n   * @returns {Boolean}\n   */\n  this.getClientStoreTemporaryCredential = function () {\n    return clientStoreTemporaryCredential;\n  };\n\n  this.getPasscodeInPassword = function () {\n    return passcodeInPassword;\n  };\n\n  this.getPasscode = function () {\n    return passcode;\n  };\n\n  /**\n   * Returns attributes of Connection Config object that can be used to identify\n   * the connection, when ID is not available in the scope. This is not sufficient set,\n   * since multiple connections can be instantiated for the same config, but can be treated as a hint.\n   *\n   * @returns {string}\n   */\n  this.describeIdentityAttributes = function () {\n    return `host: ${this.host}, account: ${this.account}, accessUrl: ${this.accessUrl}, `\n        + `user: ${this.username}, role: ${this.getRole()}, database: ${this.getDatabase()}, `\n        + `schema: ${this.getSchema()}, warehouse: ${this.getWarehouse()}, ` + ProxyUtil.describeProxy(this.getProxy());\n  };\n\n  // save config options\n  this.username = options.username;\n  this.password = options.password;\n  this.accessUrl = options.accessUrl;\n  this.region = options.region;\n  this.account = options.account;\n  this.host = options.host;\n  this.sessionToken = options.sessionToken;\n  this.masterToken = options.masterToken;\n  this.masterTokenExpirationTime = options.masterTokenExpirationTime;\n  this.sessionTokenExpirationTime = options.sessionTokenExpirationTime;\n  this.clientConfigFile = options.clientConfigFile;\n  this.openExternalBrowserCallback = options.openExternalBrowserCallback;\n\n  // create the parameters array\n  const parameters = createParameters();\n\n  // create a map in which the keys are the parameter names and the values are\n  // the corresponding parameters\n  const mapParameters = {};\n  let index, length, parameter;\n  for (index = 0, length = parameters.length; index < length; index++) {\n    parameter = parameters[index];\n    mapParameters[parameter.name] = parameter;\n\n    // initialize the value to the default\n    parameter.value = parameter.defaultValue;\n  }\n\n  // for each property in the options object that matches a known parameter name\n  let propertyName, propertyValue;\n  for (propertyName in options) {\n    if (Object.prototype.hasOwnProperty.call(options, propertyName) &&\n      Object.prototype.hasOwnProperty.call(mapParameters, propertyName)) {\n      // if the parameter matching the property is external and the specified\n      // value is valid for the parameter, update the parameter value\n      propertyValue = options[propertyName];\n      parameter = mapParameters[propertyName];\n      if (parameter.external && parameter.validate(propertyValue)) {\n        parameter.value = propertyValue;\n      }\n    }\n  }\n\n  // save the parameters map\n  this._mapParameters = mapParameters;\n\n  // custom agent class, test only\n  this.agentClass = options.agentClass;\n}\n\n/**\n * Determines if qa-mode is on.\n *\n * @returns {Boolean}\n */\nConnectionConfig.prototype.isQaMode = function () {\n  return this._qaMode;\n};\n\n/**\n * Clears all credential-related information.\n */\nConnectionConfig.prototype.clearCredentials = function () {\n  // clear the password\n  this.password = null;\n\n  // TODO: clear passcode and other credential-related information as well\n};\n\nconst PARAM_TIMEOUT = 'timeout';\nconst PARAM_RESULT_PREFETCH = 'resultPrefetch';\nconst PARAM_RESULT_STREAM_INTERRUPTS = 'resultStreamInterrupts';\nconst PARAM_RESULT_CHUNK_CACHE_SIZE = 'resultChunkCacheSize';\nconst PARAM_RESULT_PROCESSING_BATCH_SIZE = 'resultProcessingBatchSize';\nconst PARAM_RESULT_PROCESSING_BATCH_DURATION = 'resultProcessingBatchDuration';\nconst PARAM_ROW_STREAM_HIGH_WATER_MARK = 'rowStreamHighWaterMark';\nconst PARAM_RETRY_LARGE_RESULT_SET_MAX_NUM_RETRIES = 'largeResultSetRetryMaxNumRetries';\nconst PARAM_RETRY_LARGE_RESULT_SET_MAX_SLEEP_TIME = 'largeResultSetRetryMaxSleepTime';\nconst PARAM_RETRY_SF_MAX_LOGIN_RETRIES = 'sfRetryMaxLoginRetries';\nconst PARAM_RETRY_SF_MAX_NUM_RETRIES = 'sfRetryMaxNumRetries';\nconst PARAM_RETRY_SF_STARTING_SLEEP_TIME = 'sfRetryStartingSleepTime';\nconst PARAM_RETRY_SF_MAX_SLEEP_TIME = 'sfRetryMaxSleepTime';\n\n/**\n * Creates the list of known parameters. If a parameter is marked as external,\n * its value can be overridden by adding the appropriate name-value mapping to\n * the ConnectionConfig options.\n *\n * @returns {Object[]}\n */\nfunction createParameters() {\n  const isNonNegativeInteger = Util.number.isNonNegativeInteger.bind(Util.number);\n  const isPositiveInteger = Util.number.isPositiveInteger.bind(Util.number);\n  const isNonNegativeNumber = Util.number.isNonNegative.bind(Util.number);\n\n  return [\n    {\n      name: PARAM_TIMEOUT,\n      defaultValue: 90 * 1000,\n      external: true,\n      validate: isPositiveInteger\n    },\n    {\n      name: PARAM_RESULT_PREFETCH,\n      defaultValue: 2,\n      external: true,\n      validate: isPositiveInteger\n    },\n    {\n      name: PARAM_RESULT_STREAM_INTERRUPTS,\n      defaultValue: 3,\n      validate: isPositiveInteger\n    },\n    // for now we set chunk cache size to 1, which is same as \n    // disabling the chunk cache. Otherwise, cache will explode\n    // memory when fetching large result set \n    {\n      name: PARAM_RESULT_CHUNK_CACHE_SIZE,\n      defaultValue: 1,\n      validate: isPositiveInteger\n    },\n    {\n      name: PARAM_RESULT_PROCESSING_BATCH_SIZE,\n      defaultValue: 1000,\n      validate: isPositiveInteger\n    },\n    {\n      name: PARAM_RESULT_PROCESSING_BATCH_DURATION,\n      defaultValue: 100,\n      validate: isPositiveInteger\n    },\n    {\n      name: PARAM_ROW_STREAM_HIGH_WATER_MARK,\n      defaultValue: 10,\n      validate: isPositiveInteger\n    },\n    {\n      name: PARAM_RETRY_LARGE_RESULT_SET_MAX_NUM_RETRIES,\n      defaultValue: 10,\n      validate: isNonNegativeInteger\n    },\n    {\n      name: PARAM_RETRY_LARGE_RESULT_SET_MAX_SLEEP_TIME,\n      defaultValue: 16,\n      validate: isNonNegativeInteger\n    },\n    {\n      name: PARAM_RETRY_SF_MAX_LOGIN_RETRIES,\n      defaultValue: 7,\n      external: true,\n      validate: isNonNegativeInteger\n    },\n    {\n      name: PARAM_RETRY_SF_MAX_NUM_RETRIES,\n      defaultValue: 1000,\n      validate: isNonNegativeInteger\n    },\n    {\n      name: PARAM_RETRY_SF_STARTING_SLEEP_TIME,\n      defaultValue: 1,\n      validate: isNonNegativeNumber\n    },\n    {\n      name: PARAM_RETRY_SF_MAX_SLEEP_TIME,\n      defaultValue: 16,\n      validate: isNonNegativeNumber\n    }\n  ];\n}\n\nConnectionConfig.prototype.getTimeout = function () {\n  return this._getParameterValue(PARAM_TIMEOUT);\n};\n\nConnectionConfig.prototype.getResultPrefetch = function () {\n  return this._getParameterValue(PARAM_RESULT_PREFETCH);\n};\n\nConnectionConfig.prototype.getResultStreamInterrupts = function () {\n  return this._getParameterValue(PARAM_RESULT_STREAM_INTERRUPTS);\n};\n\nConnectionConfig.prototype.getResultChunkCacheSize = function () {\n  return this._getParameterValue(PARAM_RESULT_CHUNK_CACHE_SIZE);\n};\n\nConnectionConfig.prototype.getResultProcessingBatchSize = function () {\n  return this._getParameterValue(PARAM_RESULT_PROCESSING_BATCH_SIZE);\n};\n\nConnectionConfig.prototype.getResultProcessingBatchDuration = function () {\n  return this._getParameterValue(PARAM_RESULT_PROCESSING_BATCH_DURATION);\n};\n\nConnectionConfig.prototype.getRowStreamHighWaterMark = function () {\n  return this._getParameterValue(PARAM_ROW_STREAM_HIGH_WATER_MARK);\n};\n\nConnectionConfig.prototype.getRetryLargeResultSetMaxNumRetries = function () {\n  return this._getParameterValue(PARAM_RETRY_LARGE_RESULT_SET_MAX_NUM_RETRIES);\n};\n\nConnectionConfig.prototype.getRetryLargeResultSetMaxSleepTime = function () {\n  return this._getParameterValue(PARAM_RETRY_LARGE_RESULT_SET_MAX_SLEEP_TIME);\n};\n\nConnectionConfig.prototype.getRetrySfMaxNumRetries = function () {\n  return this._getParameterValue(PARAM_RETRY_SF_MAX_NUM_RETRIES);\n};\n\nConnectionConfig.prototype.getRetrySfMaxLoginRetries = function () {\n  return this._getParameterValue(PARAM_RETRY_SF_MAX_LOGIN_RETRIES);\n};\n\nConnectionConfig.prototype.getRetrySfStartingSleepTime = function () {\n  return this._getParameterValue(PARAM_RETRY_SF_STARTING_SLEEP_TIME);\n};\n\nConnectionConfig.prototype.getRetrySfMaxSleepTime = function () {\n  return this._getParameterValue(PARAM_RETRY_SF_MAX_SLEEP_TIME);\n};\n\n/**\n * Returns the value of a given connection config parameter.\n *\n * @param parameterName\n *\n * @returns {Object}\n * @private\n */\nConnectionConfig.prototype._getParameterValue = function (parameterName) {\n  const parameter = this._mapParameters[parameterName];\n  return parameter ? parameter.value : undefined;\n};\n\nmodule.exports = ConnectionConfig;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/lib/connection/connection_config.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/lib/connection/connection_context.js":
/*!*************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/lib/connection/connection_context.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Util = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/snowflake-sdk/lib/util.js\");\nconst Errors = __webpack_require__(/*! ../errors */ \"(rsc)/./node_modules/snowflake-sdk/lib/errors.js\");\nconst SfService = __webpack_require__(/*! ../services/sf */ \"(rsc)/./node_modules/snowflake-sdk/lib/services/sf.js\");\nconst LargeResultSetService = __webpack_require__(/*! ../services/large_result_set */ \"(rsc)/./node_modules/snowflake-sdk/lib/services/large_result_set.js\");\nconst Logger = __webpack_require__(/*! ../logger */ \"(rsc)/./node_modules/snowflake-sdk/lib/logger.js\");\n\n/**\n * Creates a new ConnectionContext.\n *\n * @param {ConnectionConfig} connectionConfig\n * @param {Object} httpClient\n * @param {Object} config\n *\n * @constructor\n */\nfunction ConnectionContext(connectionConfig, httpClient, config) {\n  // validate input\n  Logger.getInstance().trace('Creating ConnectionContext object.');\n  Errors.assertInternal(Util.isObject(connectionConfig));\n  Errors.assertInternal(Util.isObject(httpClient));\n\n  // if a config object was specified, verify\n  // that it has all the information we need\n  let sfServiceConfig;\n  if (Util.exists(config)) {\n    Logger.getInstance().trace('ConnectionContext - validating received config.');\n\n    Errors.assertInternal(Util.isObject(config));\n    Errors.assertInternal(Util.isObject(config.services));\n    Errors.assertInternal(Util.isObject(config.services.sf));\n\n    sfServiceConfig = config.services.sf;\n  }\n  Logger.getInstance().debug('ConnectionContext - received data was validated.');\n\n  // create a map that contains all the services we'll be using\n  const services =\n    {\n      sf: new SfService(connectionConfig, httpClient, sfServiceConfig),\n      largeResultSet: new LargeResultSetService(connectionConfig, httpClient)\n    };\n  Logger.getInstance().debug('ConnectionContext - services were instantiated.');\n\n  /**\n   * Returns the ConnectionConfig for use by the connection.\n   *\n   * @returns {ConnectionConfig}\n   */\n  this.getConnectionConfig = function () {\n    return connectionConfig;\n  };\n\n  /**\n   * Returns a map that contains all the available services.\n   *\n   * @returns {Object}\n   */\n  this.getServices = function () {\n    return services;\n  };\n\n  /**\n   * Returns a configuration object that can be passed as an optional argument\n   * to the ConnectionContext constructor to create a new object that has the\n   * same state as this ConnectionContext instance.\n   *\n   * @returns {Object}\n   */\n  this.getConfig = function () {\n    return {\n      services:\n        {\n          sf: services.sf.getConfig()\n        }\n    };\n  };\n  /**\n   * Returns instance of httpClient\n   *\n   * @returns {NodeHttpClient}\n   */\n  this.getHttpClient = function () {\n    return httpClient;\n  };\n}\n\nmodule.exports = ConnectionContext;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9saWIvY29ubmVjdGlvbi9jb25uZWN0aW9uX2NvbnRleHQuanMiLCJtYXBwaW5ncyI6IkFBQUEsYUFBYSxtQkFBTyxDQUFDLCtEQUFTO0FBQzlCLGVBQWUsbUJBQU8sQ0FBQyxtRUFBVztBQUNsQyxrQkFBa0IsbUJBQU8sQ0FBQyw2RUFBZ0I7QUFDMUMsOEJBQThCLG1CQUFPLENBQUMseUdBQThCO0FBQ3BFLGVBQWUsbUJBQU8sQ0FBQyxtRUFBVzs7QUFFbEM7QUFDQTtBQUNBO0FBQ0EsV0FBVyxrQkFBa0I7QUFDN0IsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWN0b3J3aWxzb24vRGVza3RvcC9wcm9qZWN0cy9FWlZpei9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9saWIvY29ubmVjdGlvbi9jb25uZWN0aW9uX2NvbnRleHQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgVXRpbCA9IHJlcXVpcmUoJy4uL3V0aWwnKTtcbmNvbnN0IEVycm9ycyA9IHJlcXVpcmUoJy4uL2Vycm9ycycpO1xuY29uc3QgU2ZTZXJ2aWNlID0gcmVxdWlyZSgnLi4vc2VydmljZXMvc2YnKTtcbmNvbnN0IExhcmdlUmVzdWx0U2V0U2VydmljZSA9IHJlcXVpcmUoJy4uL3NlcnZpY2VzL2xhcmdlX3Jlc3VsdF9zZXQnKTtcbmNvbnN0IExvZ2dlciA9IHJlcXVpcmUoJy4uL2xvZ2dlcicpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgQ29ubmVjdGlvbkNvbnRleHQuXG4gKlxuICogQHBhcmFtIHtDb25uZWN0aW9uQ29uZmlnfSBjb25uZWN0aW9uQ29uZmlnXG4gKiBAcGFyYW0ge09iamVjdH0gaHR0cENsaWVudFxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZ1xuICpcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBDb25uZWN0aW9uQ29udGV4dChjb25uZWN0aW9uQ29uZmlnLCBodHRwQ2xpZW50LCBjb25maWcpIHtcbiAgLy8gdmFsaWRhdGUgaW5wdXRcbiAgTG9nZ2VyLmdldEluc3RhbmNlKCkudHJhY2UoJ0NyZWF0aW5nIENvbm5lY3Rpb25Db250ZXh0IG9iamVjdC4nKTtcbiAgRXJyb3JzLmFzc2VydEludGVybmFsKFV0aWwuaXNPYmplY3QoY29ubmVjdGlvbkNvbmZpZykpO1xuICBFcnJvcnMuYXNzZXJ0SW50ZXJuYWwoVXRpbC5pc09iamVjdChodHRwQ2xpZW50KSk7XG5cbiAgLy8gaWYgYSBjb25maWcgb2JqZWN0IHdhcyBzcGVjaWZpZWQsIHZlcmlmeVxuICAvLyB0aGF0IGl0IGhhcyBhbGwgdGhlIGluZm9ybWF0aW9uIHdlIG5lZWRcbiAgbGV0IHNmU2VydmljZUNvbmZpZztcbiAgaWYgKFV0aWwuZXhpc3RzKGNvbmZpZykpIHtcbiAgICBMb2dnZXIuZ2V0SW5zdGFuY2UoKS50cmFjZSgnQ29ubmVjdGlvbkNvbnRleHQgLSB2YWxpZGF0aW5nIHJlY2VpdmVkIGNvbmZpZy4nKTtcblxuICAgIEVycm9ycy5hc3NlcnRJbnRlcm5hbChVdGlsLmlzT2JqZWN0KGNvbmZpZykpO1xuICAgIEVycm9ycy5hc3NlcnRJbnRlcm5hbChVdGlsLmlzT2JqZWN0KGNvbmZpZy5zZXJ2aWNlcykpO1xuICAgIEVycm9ycy5hc3NlcnRJbnRlcm5hbChVdGlsLmlzT2JqZWN0KGNvbmZpZy5zZXJ2aWNlcy5zZikpO1xuXG4gICAgc2ZTZXJ2aWNlQ29uZmlnID0gY29uZmlnLnNlcnZpY2VzLnNmO1xuICB9XG4gIExvZ2dlci5nZXRJbnN0YW5jZSgpLmRlYnVnKCdDb25uZWN0aW9uQ29udGV4dCAtIHJlY2VpdmVkIGRhdGEgd2FzIHZhbGlkYXRlZC4nKTtcblxuICAvLyBjcmVhdGUgYSBtYXAgdGhhdCBjb250YWlucyBhbGwgdGhlIHNlcnZpY2VzIHdlJ2xsIGJlIHVzaW5nXG4gIGNvbnN0IHNlcnZpY2VzID1cbiAgICB7XG4gICAgICBzZjogbmV3IFNmU2VydmljZShjb25uZWN0aW9uQ29uZmlnLCBodHRwQ2xpZW50LCBzZlNlcnZpY2VDb25maWcpLFxuICAgICAgbGFyZ2VSZXN1bHRTZXQ6IG5ldyBMYXJnZVJlc3VsdFNldFNlcnZpY2UoY29ubmVjdGlvbkNvbmZpZywgaHR0cENsaWVudClcbiAgICB9O1xuICBMb2dnZXIuZ2V0SW5zdGFuY2UoKS5kZWJ1ZygnQ29ubmVjdGlvbkNvbnRleHQgLSBzZXJ2aWNlcyB3ZXJlIGluc3RhbnRpYXRlZC4nKTtcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgQ29ubmVjdGlvbkNvbmZpZyBmb3IgdXNlIGJ5IHRoZSBjb25uZWN0aW9uLlxuICAgKlxuICAgKiBAcmV0dXJucyB7Q29ubmVjdGlvbkNvbmZpZ31cbiAgICovXG4gIHRoaXMuZ2V0Q29ubmVjdGlvbkNvbmZpZyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gY29ubmVjdGlvbkNvbmZpZztcbiAgfTtcblxuICAvKipcbiAgICogUmV0dXJucyBhIG1hcCB0aGF0IGNvbnRhaW5zIGFsbCB0aGUgYXZhaWxhYmxlIHNlcnZpY2VzLlxuICAgKlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgKi9cbiAgdGhpcy5nZXRTZXJ2aWNlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gc2VydmljZXM7XG4gIH07XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBjb25maWd1cmF0aW9uIG9iamVjdCB0aGF0IGNhbiBiZSBwYXNzZWQgYXMgYW4gb3B0aW9uYWwgYXJndW1lbnRcbiAgICogdG8gdGhlIENvbm5lY3Rpb25Db250ZXh0IGNvbnN0cnVjdG9yIHRvIGNyZWF0ZSBhIG5ldyBvYmplY3QgdGhhdCBoYXMgdGhlXG4gICAqIHNhbWUgc3RhdGUgYXMgdGhpcyBDb25uZWN0aW9uQ29udGV4dCBpbnN0YW5jZS5cbiAgICpcbiAgICogQHJldHVybnMge09iamVjdH1cbiAgICovXG4gIHRoaXMuZ2V0Q29uZmlnID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBzZXJ2aWNlczpcbiAgICAgICAge1xuICAgICAgICAgIHNmOiBzZXJ2aWNlcy5zZi5nZXRDb25maWcoKVxuICAgICAgICB9XG4gICAgfTtcbiAgfTtcbiAgLyoqXG4gICAqIFJldHVybnMgaW5zdGFuY2Ugb2YgaHR0cENsaWVudFxuICAgKlxuICAgKiBAcmV0dXJucyB7Tm9kZUh0dHBDbGllbnR9XG4gICAqL1xuICB0aGlzLmdldEh0dHBDbGllbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGh0dHBDbGllbnQ7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQ29ubmVjdGlvbkNvbnRleHQ7Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/lib/connection/connection_context.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/lib/connection/result/chunk.js":
/*!*******************************************************************!*\
  !*** ./node_modules/snowflake-sdk/lib/connection/result/chunk.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter);\nconst Util = __webpack_require__(/*! ../../util */ \"(rsc)/./node_modules/snowflake-sdk/lib/util.js\");\nconst Errors = __webpack_require__(/*! ../../errors */ \"(rsc)/./node_modules/snowflake-sdk/lib/errors.js\");\n\n/**\n * Creates a new Chunk.\n *\n * @param options\n * @constructor\n */\nfunction Chunk(options) {\n  // make sure the options object contains all the necessary information\n  Errors.assertInternal(Util.isObject(options));\n  Errors.assertInternal(Util.isObject(options.statement));\n  Errors.assertInternal(Util.isObject(options.services));\n  Errors.assertInternal(Util.isNumber(options.startIndex));\n  Errors.assertInternal(Util.isArray(options.columns));\n  Errors.assertInternal(Util.isObject(options.mapColumnNameToIndices));\n  Errors.assertInternal(Util.isObject(options.statementParameters));\n  Errors.assertInternal(Util.isString(options.resultVersion));\n  Errors.assertInternal(Util.isNumber(options.rowCount));\n\n  // if the result is small (i.e. not persisted on S3/Blob), there's no\n  // compressed and uncompressed size, so default to -1\n  this._compressedSize = options.compressedSize || -1;\n  this._uncompressedSize = options.uncompressedSize || -1;\n\n  // copy out other information from the options object and save it\n  this._statement = options.statement;\n  this._services = options.services;\n  this._startIndex = options.startIndex;\n  this._url = options.url;\n  this._columns = options.columns;\n  this._mapColumnNameToIndices = options.mapColumnNameToIndices;\n  this._chunkHeaders = options.chunkHeaders;\n  this._rowset = options.rowset;\n\n  // use the start index and row count to compute the end index\n  this._endIndex = this._startIndex + options.rowCount - 1;\n\n  // use the start and end index to build an id for this chunk\n  this._id = buildId(this._startIndex, this._endIndex);\n}\n\nUtil.inherits(Chunk, EventEmitter);\n\n/**\n * Returns the compressed size of this chunk's contents on S3/Blob.\n * A value of -1 means the contents of this chunk are not stored on S3/Blob.\n *\n * @returns {Number}\n */\nChunk.prototype.getCompressedSize = function () {\n  return this._compressedSize;\n};\n\n/**\n * Returns the uncompressed size of this chunk's contents on S3/Blob.\n * A value of -1 means the contents of this chunk are not stored on S3/Blob.\n *\n * @returns {Number}\n */\nChunk.prototype.getUncompressedSize = function () {\n  return this._uncompressedSize;\n};\n\n/**\n * Returns the row index of the first row in this chunk.\n *\n * @returns {Number}\n */\nChunk.prototype.getStartIndex = function () {\n  return this._startIndex;\n};\n\n/**\n * Returns the row index of the last row in this chunk.\n *\n * @returns {Number}\n */\nChunk.prototype.getEndIndex = function () {\n  return this._endIndex;\n};\n\n/**\n * Returns the id of this chunk.\n *\n * @returns {String}\n */\nChunk.prototype.getId = function () {\n  return this._id;\n};\n\n/**\n * Determines if this chunk overlaps with a given window.\n *\n * @param {Number} start The start index of the window.\n * @param {Number} end The end index of the window.\n *\n * @returns {Boolean}\n */\nChunk.prototype.overlapsWithWindow = function (start, end) {\n  const chunkStart = this._startIndex, chunkEnd = this._endIndex;\n\n  // check if the window overlaps with the chunk from the left or\n  // from the right or from both sides\n  return ((end <= chunkEnd && end >= chunkStart) ||\n    (start >= chunkStart && start <= chunkEnd) ||\n    (start <= chunkStart && end >= chunkEnd));\n};\n\n/**\n * Returns the rows in this chunk.\n *\n * @returns {Object[]}\n */\nChunk.prototype.getRows = function () {\n  // if we don't already have a valid value for the rows\n  if (!Util.isArray(this._rows)) {\n    // if we have a string version of the rowset\n    if (Util.string.isNotNullOrEmpty(this._rowsetAsString)) {\n      // add square brackets on either side and do a json-parse to get the\n      // rowset\n      this._rowset = JSON.parse('[' + this._rowsetAsString + ']');\n\n      // we don't need the string version of the rowset anymore\n      this._rowsetAsString = undefined;\n    }\n\n    // if we have a valid value for the rowset\n    if (Util.isArray(this._rowset)) {\n      // convert the rowset to an array of rows\n      this._rows = convertRowsetToRows(\n        this._statement,\n        this._startIndex,\n        this._rowset,\n        this._columns,\n        this._mapColumnNameToIndices);\n\n      // clear out the rowset because we don't need it anymore\n      this._rowset = undefined;\n    }\n  }\n\n  return this._rows;\n};\n\n/**\n * Clears out the rows in this chunk if it has a valid url or if the force flag\n * is true.\n *\n * @param force\n */\nChunk.prototype.clearRows = function (force) {\n  if (Util.string.isNotNullOrEmpty(this._url) || force) {\n    // clear out all row and rowset related fields\n    this._rowsetAsString = this._rowset = this._rows = undefined;\n  }\n};\n\n/**\n * Updates this chunk's url.\n *\n * @param url\n */\nChunk.prototype.setUrl = function (url) {\n  this._url = url;\n};\n\n/**\n * Returns true if this chunk's contents are loaded, false otherwise.\n *\n * @returns {Boolean}\n */\nChunk.prototype.isLoaded = function () {\n  // the chunk is considered loaded if we have valid values for\n  // _rowsetAsString, _rowset or _rows\n  return Util.string.isNotNullOrEmpty(this._rowsetAsString) ||\n    Util.isArray(this._rowset) || Util.isArray(this._rows);\n};\n\n/**\n * Returns true if this chunk is currently in the process of loading its\n * contents, false otherwise.\n *\n * @returns {Boolean}\n */\nChunk.prototype.isLoading = function () {\n  return this._isLoading;\n};\n\n/**\n * Loads the contents of this chunk.\n *\n * @param callback\n */\nChunk.prototype.load = function (callback) {\n  // we've started loading\n  this._isLoading = true;\n\n  const self = this;\n\n  /**\n   * Completes the chunk load.\n   *\n   * @param err\n   */\n  const completeLoad = function (err) {\n    // we're done loading\n    self._isLoading = false;\n\n    // emit an event to notify subscribers\n    self.emit('loadcomplete', err, self);\n\n    // invoke the callback if one was specified\n    if (Util.isFunction(callback)) {\n      callback(err, self);\n    }\n  };\n\n  // If the chunk is already loaded, complete the load asynchronously.\n  // This ensure that we are streaming chunks the right order even if the data was received before\n  // another chunk.\n  if (this.isLoaded()) {\n    process.nextTick(completeLoad);\n  } else {\n    // issue a request to load the chunk's contents from S3/Blob\n    this._services.largeResultSet.getObject(\n      {\n        url: this._url,\n        headers: this._chunkHeaders,\n        callback: function (err, body) {\n          // if the request succeeded, save the\n          // body as a string version of the rowset\n          if (!err) {\n            self._rowsetAsString = body;\n          }\n\n          // complete the load\n          completeLoad(err);\n        }\n      });\n  }\n};\n\n/**\n * Builds an id for a chunk from its start and end index.\n *\n * @param startIndex The row index of the first chunk row.\n * @param endIndex The row index of the last chunk row.\n *\n * @returns {String}\n * @private\n */\nfunction buildId(startIndex, endIndex) {\n  return Util.format('s=%d, e=%d', startIndex, endIndex);\n}\n\n/**\n * Converts a rowset to an array of records.\n *\n * @param statement\n * @param startIndex the chunk start index.\n * @param rowset\n * @param columns\n * @param mapColumnNameToIndices\n *\n * @returns {Array}\n * @private\n */\nfunction convertRowsetToRows(\n  statement,\n  startIndex,\n  rowset,\n  columns,\n  mapColumnNameToIndices) {\n  // assert that rowset and columns are arrays\n  Errors.assertInternal(Util.isArray(rowset));\n  Errors.assertInternal(Util.isArray(columns));\n\n\n  ///////////////////////////////////////////////////////////////////////////\n  ////     Create functions that will be used as row methods             ////\n  ///////////////////////////////////////////////////////////////////////////\n\n  /**\n   * Returns the index of this row in the result.\n   *\n   * @returns {Number}\n   */\n  const getRowIndex = function () {\n    return this.rowIndex;\n  };\n\n  /**\n   * Returns the statement that produced this row.\n   *\n   * @returns {*}\n   */\n  const getStatement = function getStatement() {\n    return statement;\n  };\n\n  /**\n   * Returns the value of a column.\n   *\n   * @param {String | Number} columnIdentifier this can be either the column\n   *   name or the column index.\n   *\n   * @returns {*}\n   */\n  const getColumnValue = function getColumnValue(columnIdentifier) {\n    // resolve the column identifier to the correct column if possible\n    const column = resolveColumnIdentifierToColumn(\n      columns, columnIdentifier, mapColumnNameToIndices);\n\n    return column ? column.getRowValue(this) : undefined;\n  };\n\n  /**\n   * Returns the value of a column as a String.\n   *\n   * @param {String | Number} columnIdentifier this can be either the column\n   *   name or the column index.\n   *\n   * @returns {*}\n   */\n  const getColumnValueAsString = function getColumnValueAsString(columnIdentifier) {\n    // resolve the column identifier to the correct column if possible\n    const column = resolveColumnIdentifierToColumn(\n      columns, columnIdentifier, mapColumnNameToIndices);\n\n    return column ? column.getRowValueAsString(this) : undefined;\n  };\n\n\n  ///////////////////////////////////////////////////////////////////////////\n  ////     Convert the rowset to an array of row objects                 ////\n  ///////////////////////////////////////////////////////////////////////////\n\n  // create a new array to store the processed rows\n  const length = rowset.length;\n  const rows = new Array(length);\n  for (let index = 0; index < length; index++) {\n    // add a new item to the rows array\n    rows[index] =\n      {\n        _arrayProcessedColumns: [],\n\n        values: rowset[index],\n        rowIndex: startIndex + index,\n        getRowIndex: getRowIndex,\n        getStatement: getStatement,\n        getColumnValue: getColumnValue,\n        getColumnValueAsString: getColumnValueAsString\n      };\n  }\n\n  return rows;\n}\n\n/**\n * Resolves a column identifier to the corresponding column if possible. The\n * column identifier can be a column name or a column index. If an invalid\n * column identifier is specified, we return undefined.\n *\n * @param {Object[]} columns\n * @param {String | Number} columnIdentifier\n * @param {Object} mapColumnNameToIndices\n *\n * @returns {*}\n */\nfunction resolveColumnIdentifierToColumn(\n  columns, columnIdentifier, mapColumnNameToIndices) {\n  let columnIndex;\n\n  // if the column identifier is a string, treat it as a column\n  // name and use it to get the index of the specified column\n  if (Util.isString(columnIdentifier)) {\n    // if a valid column name was specified, get the index of the first column\n    // with the specified name\n    if (Object.prototype.hasOwnProperty.call(mapColumnNameToIndices, columnIdentifier)) {\n      columnIndex = mapColumnNameToIndices[columnIdentifier][0];\n    }\n  } else if (Util.isNumber(columnIdentifier)) {\n    // if the column identifier is a number, treat it as a column index\n    columnIndex = columnIdentifier;\n  }\n\n  return columns[columnIndex];\n}\n\nmodule.exports = Chunk;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/lib/connection/result/chunk.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/lib/connection/result/chunk_cache.js":
/*!*************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/lib/connection/result/chunk_cache.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const DoublyLinkedList = __webpack_require__(/*! ./doubly_linked_list */ \"(rsc)/./node_modules/snowflake-sdk/lib/connection/result/doubly_linked_list.js\");\n\n/**\n * An LRU cache used to store chunks.\n * \n * !! This cache is not fully implemented and not used at this time !!\n *\n * @param capacity the cache size in terms of the number of chunks.\n * @constructor\n */\nfunction ChunkCache(capacity) {\n  this._capacity = capacity;\n\n  // create a map and a doubly linked list to track the cached chunks\n  this._map = {};\n  this._list = new DoublyLinkedList();\n}\n\n/**\n * Adds a chunk to the cache.\n *\n * @param chunk\n */\nChunkCache.prototype.put = function (chunk) {\n  let evictedNode;\n  let evictedChunk;\n\n  const map = this._map;\n  const list = this._list;\n  const chunkId = chunk.getId();\n\n  // if we already have the chunk in the cache, remove the corresponding node\n  // from the list\n  if (Object.prototype.hasOwnProperty.call(map, chunkId) && map[chunkId]) {\n    list.remove(map[chunkId]);\n  }\n\n  // append the chunk to the list and put the corresponding node in the map\n  map[chunkId] = list.insertEnd(chunk);\n\n  // if we've exceeded the cache capacity\n  if (list.getLength() > this._capacity) {\n    // remove the current head of the list\n    evictedNode = list.getHead();\n    list.remove(evictedNode);\n\n    // evict the chunk associated with the removed node\n    evictedChunk = evictedNode.getValue();\n    delete map[evictedChunk.getId()];\n\n    // clear the rows from the evicted chunk\n    // TODO: should the force flag be set to true here?\n    evictedChunk.clearRows();\n  }\n};\n\nmodule.exports = ChunkCache;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9saWIvY29ubmVjdGlvbi9yZXN1bHQvY2h1bmtfY2FjaGUuanMiLCJtYXBwaW5ncyI6IkFBQUEseUJBQXlCLG1CQUFPLENBQUMsNEdBQXNCOztBQUV2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcndpbHNvbi9EZXNrdG9wL3Byb2plY3RzL0VaVml6L25vZGVfbW9kdWxlcy9zbm93Zmxha2Utc2RrL2xpYi9jb25uZWN0aW9uL3Jlc3VsdC9jaHVua19jYWNoZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBEb3VibHlMaW5rZWRMaXN0ID0gcmVxdWlyZSgnLi9kb3VibHlfbGlua2VkX2xpc3QnKTtcblxuLyoqXG4gKiBBbiBMUlUgY2FjaGUgdXNlZCB0byBzdG9yZSBjaHVua3MuXG4gKiBcbiAqICEhIFRoaXMgY2FjaGUgaXMgbm90IGZ1bGx5IGltcGxlbWVudGVkIGFuZCBub3QgdXNlZCBhdCB0aGlzIHRpbWUgISFcbiAqXG4gKiBAcGFyYW0gY2FwYWNpdHkgdGhlIGNhY2hlIHNpemUgaW4gdGVybXMgb2YgdGhlIG51bWJlciBvZiBjaHVua3MuXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gQ2h1bmtDYWNoZShjYXBhY2l0eSkge1xuICB0aGlzLl9jYXBhY2l0eSA9IGNhcGFjaXR5O1xuXG4gIC8vIGNyZWF0ZSBhIG1hcCBhbmQgYSBkb3VibHkgbGlua2VkIGxpc3QgdG8gdHJhY2sgdGhlIGNhY2hlZCBjaHVua3NcbiAgdGhpcy5fbWFwID0ge307XG4gIHRoaXMuX2xpc3QgPSBuZXcgRG91Ymx5TGlua2VkTGlzdCgpO1xufVxuXG4vKipcbiAqIEFkZHMgYSBjaHVuayB0byB0aGUgY2FjaGUuXG4gKlxuICogQHBhcmFtIGNodW5rXG4gKi9cbkNodW5rQ2FjaGUucHJvdG90eXBlLnB1dCA9IGZ1bmN0aW9uIChjaHVuaykge1xuICBsZXQgZXZpY3RlZE5vZGU7XG4gIGxldCBldmljdGVkQ2h1bms7XG5cbiAgY29uc3QgbWFwID0gdGhpcy5fbWFwO1xuICBjb25zdCBsaXN0ID0gdGhpcy5fbGlzdDtcbiAgY29uc3QgY2h1bmtJZCA9IGNodW5rLmdldElkKCk7XG5cbiAgLy8gaWYgd2UgYWxyZWFkeSBoYXZlIHRoZSBjaHVuayBpbiB0aGUgY2FjaGUsIHJlbW92ZSB0aGUgY29ycmVzcG9uZGluZyBub2RlXG4gIC8vIGZyb20gdGhlIGxpc3RcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtYXAsIGNodW5rSWQpICYmIG1hcFtjaHVua0lkXSkge1xuICAgIGxpc3QucmVtb3ZlKG1hcFtjaHVua0lkXSk7XG4gIH1cblxuICAvLyBhcHBlbmQgdGhlIGNodW5rIHRvIHRoZSBsaXN0IGFuZCBwdXQgdGhlIGNvcnJlc3BvbmRpbmcgbm9kZSBpbiB0aGUgbWFwXG4gIG1hcFtjaHVua0lkXSA9IGxpc3QuaW5zZXJ0RW5kKGNodW5rKTtcblxuICAvLyBpZiB3ZSd2ZSBleGNlZWRlZCB0aGUgY2FjaGUgY2FwYWNpdHlcbiAgaWYgKGxpc3QuZ2V0TGVuZ3RoKCkgPiB0aGlzLl9jYXBhY2l0eSkge1xuICAgIC8vIHJlbW92ZSB0aGUgY3VycmVudCBoZWFkIG9mIHRoZSBsaXN0XG4gICAgZXZpY3RlZE5vZGUgPSBsaXN0LmdldEhlYWQoKTtcbiAgICBsaXN0LnJlbW92ZShldmljdGVkTm9kZSk7XG5cbiAgICAvLyBldmljdCB0aGUgY2h1bmsgYXNzb2NpYXRlZCB3aXRoIHRoZSByZW1vdmVkIG5vZGVcbiAgICBldmljdGVkQ2h1bmsgPSBldmljdGVkTm9kZS5nZXRWYWx1ZSgpO1xuICAgIGRlbGV0ZSBtYXBbZXZpY3RlZENodW5rLmdldElkKCldO1xuXG4gICAgLy8gY2xlYXIgdGhlIHJvd3MgZnJvbSB0aGUgZXZpY3RlZCBjaHVua1xuICAgIC8vIFRPRE86IHNob3VsZCB0aGUgZm9yY2UgZmxhZyBiZSBzZXQgdG8gdHJ1ZSBoZXJlP1xuICAgIGV2aWN0ZWRDaHVuay5jbGVhclJvd3MoKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDaHVua0NhY2hlOyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/lib/connection/result/chunk_cache.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/lib/connection/result/column.js":
/*!********************************************************************!*\
  !*** ./node_modules/snowflake-sdk/lib/connection/result/column.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Util = __webpack_require__(/*! ../../util */ \"(rsc)/./node_modules/snowflake-sdk/lib/util.js\");\nconst Errors = __webpack_require__(/*! ../../errors */ \"(rsc)/./node_modules/snowflake-sdk/lib/errors.js\");\nconst BigNumber = __webpack_require__(/*! bignumber.js */ \"(rsc)/./node_modules/bignumber.js/bignumber.js\");\nconst GlobalConfig = __webpack_require__(/*! ../../global_config */ \"(rsc)/./node_modules/snowflake-sdk/lib/global_config.js\");\nconst Logger = __webpack_require__(/*! ../../logger */ \"(rsc)/./node_modules/snowflake-sdk/lib/logger.js\");\nconst SfTimestamp = __webpack_require__(/*! ./sf_timestamp */ \"(rsc)/./node_modules/snowflake-sdk/lib/connection/result/sf_timestamp.js\");\nconst DataTypes = __webpack_require__(/*! ./data_types */ \"(rsc)/./node_modules/snowflake-sdk/lib/connection/result/data_types.js\");\nconst SqlTypes = (__webpack_require__(/*! ./data_types */ \"(rsc)/./node_modules/snowflake-sdk/lib/connection/result/data_types.js\").SqlTypes);\nconst dateTimeFormatConverter = __webpack_require__(/*! ./datetime_format_converter */ \"(rsc)/./node_modules/snowflake-sdk/lib/connection/result/datetime_format_converter.js\");\nconst bigInt = __webpack_require__(/*! big-integer */ \"(rsc)/./node_modules/big-integer/BigInteger.js\");\nconst moment = __webpack_require__(/*! moment */ \"(rsc)/./node_modules/moment/moment.js\");\nconst momentTimezone = __webpack_require__(/*! moment-timezone */ \"(rsc)/./node_modules/moment-timezone/index.js\");\nconst util = __webpack_require__(/*! ../../util */ \"(rsc)/./node_modules/snowflake-sdk/lib/util.js\");\n\n/**\n * Creates a new Column.\n *\n * @param {Object} options\n * @param {Number} index\n * @param {Object} statementParameters\n * @param {String} resultVersion\n *\n * @constructor\n */\nfunction Column(options, index, statementParameters, resultVersion) {\n  const name = options.overriddenName || options.name;\n  const nullable = options.nullable;\n  const scale = options.scale;\n  const type = options.type;\n  const precision = options.precision;\n  const fieldsMetadata = options.fields;\n\n  /**\n   * Returns the name of this column.\n   *\n   * @return {String}\n   */\n  this.getName = function () {\n    return name;\n  };\n\n  /**\n   * Returns the index of this column.\n   *\n   * @return {Number}\n   */\n  this.getIndex = function () {\n    return index;\n  };\n\n  /**\n   * Returns the id of this column.\n   *\n   * @return {Number}\n   */\n  this.getId = function () {\n    // use the index as the id for now\n    return index;\n  };\n\n  /**\n   * Determines if this column is nullable.\n   *\n   * @returns {Boolean}\n   */\n  this.isNullable = function () {\n    return nullable;\n  };\n\n  /**\n   * Returns the scale associated with this column.\n   *\n   * @returns {Number}\n   */\n  this.getScale = function () {\n    return scale;\n  };\n\n  /**\n   * Returns the type associated with this column.\n   *\n   * @returns {String}\n   */\n  this.getType = function () {\n    return type;\n  };\n\n  /**\n   * Returns the precision associated with this column\n   *\n   * @returns {Number}\n   */\n  this.getPrecision = function () {\n    return precision;\n  };\n\n  // add methods that make it easy to check if the column is of a specific type\n  this.isString = createFnIsColumnOfType(type, SqlTypes.isString, SqlTypes);\n  this.isBinary = createFnIsColumnOfType(type, SqlTypes.isBinary, SqlTypes);\n  this.isNumber = createFnIsColumnOfType(type, SqlTypes.isNumber, SqlTypes);\n  this.isBoolean = createFnIsColumnOfType(type, SqlTypes.isBoolean, SqlTypes);\n  this.isDate = createFnIsColumnOfType(type, SqlTypes.isDate, SqlTypes);\n  this.isTime = createFnIsColumnOfType(type, SqlTypes.isTime, SqlTypes);\n  this.isTimestamp = createFnIsColumnOfType(type, SqlTypes.isTimestamp, SqlTypes);\n  this.isTimestampLtz = createFnIsColumnOfType(type, SqlTypes.isTimestampLtz, SqlTypes);\n  this.isTimestampNtz = createFnIsColumnOfType(type, SqlTypes.isTimestampNtz, SqlTypes);\n  this.isTimestampTz = createFnIsColumnOfType(type, SqlTypes.isTimestampTz, SqlTypes);\n  this.isVariant = createFnIsColumnOfType(type, (type) => SqlTypes.isVariant(type, fieldsMetadata), SqlTypes);\n  this.isObject = createFnIsColumnOfType(type, (type) => SqlTypes.isObject(type, fieldsMetadata), SqlTypes);\n  this.isArray = createFnIsColumnOfType(type, (type) => SqlTypes.isArray(type, fieldsMetadata), SqlTypes);\n  this.isMap = createFnIsColumnOfType(type, (type) => SqlTypes.isMap(type, fieldsMetadata), SqlTypes);\n\n  let convert;\n  let toString;\n  let toValue;\n  let format;\n\n  if (this.isNumber()) {\n    const integerAs = statementParameters['JS_TREAT_INTEGER_AS_BIGINT'];\n    if (!integerAs) {\n      convert = convertRawNumber;\n    } else {\n      if (this.getScale() > 0 || this.getType() === SqlTypes.values.REAL) {\n        convert = convertRawNumber;\n      } else {\n        // This is an integer so represent it as a big int\n        convert = convertRawBigInt;\n      }\n    }\n    toValue = toValueFromNumber;\n    toString = toStringFromNumber;\n  } else if (this.isTime()) {\n    convert = convertRawTime;\n    toValue = toValueFromTime;\n    toString = toStringFromTime;\n    format = statementParameters['TIME_OUTPUT_FORMAT'];\n  } else {\n    toValue = noop;\n\n    if (this.isBoolean()) {\n      convert = convertRawBoolean;\n      toString = toStringFromBoolean;\n    } else if (this.isDate()) {\n      convert = convertRawDate;\n      toString = toStringFromDate;\n      format = statementParameters['DATE_OUTPUT_FORMAT'];\n    } else if (this.isTimestamp()) {\n      if (this.isTimestampLtz()) {\n        convert = convertRawTimestampLtz;\n        toString = toStringFromTimestamp;\n        format = statementParameters['TIMESTAMP_LTZ_OUTPUT_FORMAT'];\n      } else if (this.isTimestampNtz()) {\n        convert = convertRawTimestampNtz;\n        toString = toStringFromTimestamp;\n        format = statementParameters['TIMESTAMP_NTZ_OUTPUT_FORMAT'];\n      } else if (this.isTimestampTz()) {\n        convert = convertRawTimestampTz;\n        toString = toStringFromTimestamp;\n        format = statementParameters['TIMESTAMP_TZ_OUTPUT_FORMAT'];\n      }\n\n      // if we don't have a type-specific timezone, use the default format\n      if (!format) {\n        format = statementParameters['TIMESTAMP_OUTPUT_FORMAT'];\n      }\n    } else if (this.isBinary()) {\n      convert = convertRawBinary;\n      toString = toStringFromBinary;\n      format = statementParameters['BINARY_OUTPUT_FORMAT'];\n    } else if (this.isVariant()) {\n      convert = convertRawVariant;\n      toString = toStringFromRawValue;\n    } else if (this.isObject()) {\n      convert = convertRawStructuredType(convertJsonObject);\n      toString = toStringFromRawValue;\n    } else if (this.isArray()) {\n      convert = convertRawStructuredType(convertJsonArray);\n      toString = toStringFromRawValue;\n    } else if (this.isMap()) {\n      convert = convertRawStructuredType(convertJsonMap);\n      toString = toStringFromRawValue;\n    } else {\n      // column is of type string, so leave value as is\n      convert = noop;\n      toString = toStringFromString;\n    }\n  }\n\n  // create a private context to pass to the extract function\n  const context =\n    {\n      convert: convert,\n      toValue: toValue,\n      toString: toString,\n      format: format,\n      resultVersion: resultVersion,\n      statementParameters: statementParameters,\n      fieldsMetadata: fieldsMetadata\n    };\n\n  /**\n   * Returns the value of this column in a row.\n   *\n   * @param {Object} row\n   *\n   * @returns {*}\n   */\n  this.getRowValue = function (row) {\n    return extractFromRow.call(this, row, context, false);\n  };\n\n  /**\n   * Returns the value of this in a row as a String.\n   *\n   * @param {Object} row\n   *\n   * @returns {String}\n   */\n  this.getRowValueAsString = function (row) {\n    return extractFromRow.call(this, row, context, true);\n  };\n}\n\n/**\n * Returns a function that can be used to determine if a column is of a given\n * type.\n *\n * @param {String} columnType the column type.\n * @param {Function} columnComparisonFn the column comparison function.\n * @param {Object} scope the scope in which to invoke the column comparison\n *   function.\n *\n * @returns {Function}\n */\nfunction createFnIsColumnOfType(columnType, columnComparisonFn, scope) {\n  return function () {\n    return columnComparisonFn.call(scope, columnType);\n  };\n}\n\n/**\n * Converts a raw column value of type Number. The returned value is an object\n * that contains the raw string version of the value as well as the\n * post-processed version of the value obtained after casting to Number.\n *\n * @param {String} rawColumnValue\n *\n * @returns {Object}\n */\nfunction convertRawNumber(rawColumnValue) {\n  return {\n    raw: rawColumnValue,\n    processed: Number(rawColumnValue)\n  };\n}\n\n/**\n * Converts a raw column value that is an integer. The returned value is an object\n * that contains the raw string version of the value as well as the post-processed\n * version of the value obtained after casting to bigInt\n *\n * @param rawColumnValue\n * @returns {{processed: bigInt.BigInteger, raw: *}}\n */\nfunction convertRawBigInt(rawColumnValue) {\n  return {\n    raw: rawColumnValue,\n    processed: bigInt(rawColumnValue)\n  };\n}\n\n/**\n * Converts a raw column value of type Boolean to a boolean (true, false,\n * or null).\n *\n * @param {String} rawColumnValue\n *\n * @returns {Boolean}\n */\nfunction convertRawBoolean(rawColumnValue) {\n  let ret;\n\n  if (rawColumnValue  === true || (rawColumnValue === '1') || (rawColumnValue.toUpperCase() === 'TRUE')) {\n    ret = true;\n  } else if (rawColumnValue === false || (rawColumnValue === '0') || (rawColumnValue.toUpperCase() === 'FALSE')) {\n    ret = false;\n  } else {\n    throw new Error(`Value could not be converted to boolean: ${rawColumnValue}`);\n  }\n  return ret;\n}\n\n/**\n * Converts a raw column value of structured type object to javascript Object\n *\n * @param {Object} json\n * @param {Object} context\n *\n * @returns {Object}\n */\nfunction convertJsonObject(json, context) {\n  if (context.fieldsMetadata){\n    context.fieldsMetadata = context.fieldsMetadata.reduce(function (map, obj) {\n      map[obj.name] = obj;\n      return map;\n    }, {});\n\n    const result = {};\n    Object.keys(json).forEach(function (key) {\n      const fieldMetadata = context.fieldsMetadata[key];\n      result[key] = mapStructuredTypeValue(json[key], context, fieldMetadata);\n    });\n    return result;\n  } else {\n    return json;\n  }\n}\n\n/**\n * Converts a raw column value of structured type array to javascript Object\n *\n * @param {Object} json\n * @param {Object} context\n *\n * @returns {Object}\n */\nfunction convertJsonArray(json, context) {\n  if (context.fieldsMetadata) {\n    const result = [];\n    json.forEach(function (value) {\n      result.push(mapStructuredTypeValue(value, context, context.fieldsMetadata[0]));\n    });\n    return result;\n  } else {\n    return json;\n  }\n}\n\n/**\n * Converts a raw column value of structured type map to javascript Object\n *\n * @param {Object} json\n * @param {Object} context\n *\n * @returns {Object}\n */\nfunction convertJsonMap(json, context) {\n  if (Array.isArray(context.fieldsMetadata) && context.fieldsMetadata.length === 2) {\n    const result = new Map;\n    const keyMetadata = context.fieldsMetadata[0];\n    const valueMetadata = context.fieldsMetadata[1];\n    Object.keys(json).forEach(function (key) {\n      const convertedKey = mapStructuredTypeValue(key, context, keyMetadata);\n      const convertedValue = mapStructuredTypeValue(json[key], context, valueMetadata);\n      result.set(convertedKey, convertedValue);\n    });\n    return result;\n  } else {\n    return json;\n  }\n}\n\n/**\n * Converts a raw column value of structured type OBJECT to javascript Object\n *\n * @param {String} rawColumnValue\n * @param {Object} column\n * @param {Object} context\n *\n * @returns {Object}\n */\nconst convertRawStructuredType = (convertJsonFn) => (rawColumnValue, column, context) => {\n  if (Util.string.isNotNullOrEmpty(rawColumnValue)) {\n    try {\n      const json = JSON.parse(rawColumnValue);\n      return convertJsonFn(json, context);\n    } catch (jsonParseError) {\n      Logger.getInstance().debug('Column %s raw value cannot be parsed as JSON: %s ', column.name, jsonParseError.message);\n      throw new Error(util.format('Column [%s] raw value cannot be parsed as JSON: %s ', column.name, jsonParseError.message));\n    }\n  } else {\n    throw new Error(util.format('Column %s raw value is null or empty ', column.name));\n  }\n};\n\nfunction mapStructuredTypeValue(columnValue, context, metadataField) {\n  const formatLtz = context.statementParameters['TIMESTAMP_LTZ_OUTPUT_FORMAT'] ?? context.statementParameters['TIMESTAMP_OUTPUT_FORMAT'];\n  const formatTz = context.statementParameters['TIMESTAMP_TZ_OUTPUT_FORMAT'] ?? context.statementParameters['TIMESTAMP_OUTPUT_FORMAT'];\n  const formatNtz = context.statementParameters['TIMESTAMP_NTZ_OUTPUT_FORMAT'];\n  let value;\n  switch (metadataField.type) {\n  case 'text':\n    value = columnValue;\n    break;\n  case 'real':\n    value = toValueFromNumber(convertRawNumber(columnValue));\n    break;\n  case 'fixed':\n    value = toValueFromNumber(convertRawNumber(columnValue));\n    break;\n  case 'boolean':\n    value = convertRawBoolean(columnValue);\n    break;\n  case 'timestamp_ltz':\n    value = convertTimestampTzString(columnValue, formatLtz, context.statementParameters['TIMEZONE'], metadataField.scale).toSfDate();\n    break;\n  case 'timestamp_ntz':\n    value = convertTimestampNtzString(columnValue, formatNtz, moment.tz.zone('UTC'), metadataField.scale).toSfDate();\n    break;\n  case 'timestamp_tz':\n    value = convertTimestampTzString(columnValue, formatTz, context.statementParameters['TIMEZONE'], metadataField.scale).toSfDate();\n    break;\n  case 'date': {\n    context.format = context.statementParameters['DATE_OUTPUT_FORMAT'];\n    value = convertDateString(columnValue, context.format );\n    break;\n  }\n  case 'time':\n    context.format = context.statementParameters['TIME_OUTPUT_FORMAT'];\n    value = convertTimeString(columnValue, context.format, moment.tz.zone('UTC'), metadataField.scale).toSfTime();\n    break;\n  case 'binary':\n    context.format = context.statementParameters['BINARY_OUTPUT_FORMAT'];\n    value = convertRawBinary(columnValue, this, context).toJSON().data;\n    break;\n  case 'object': {\n    const internalContext = {\n      convert: convertRawStructuredType(convertJsonObject),\n      toValue: noop,\n      toString: toString,\n      format: toStringFromRawValue,\n      resultVersion: context.resultVersion,\n      statementParameters: context.statementParameters,\n      fieldsMetadata: metadataField.fields\n    };\n    value = convertJsonObject(columnValue, internalContext);\n    break;\n  }\n  case 'array': {\n    const internalArrayContext = {\n      convert: convertRawStructuredType(convertJsonArray),\n      toValue: noop,\n      toString: toString,\n      format: toStringFromRawValue,\n      resultVersion: context.resultVersion,\n      statementParameters: context.statementParameters,\n      fieldsMetadata: metadataField.fields\n    };\n    value = convertJsonArray(columnValue, internalArrayContext);\n    break;\n  }\n  case 'map': {\n    const internalMapContext = {\n      convert: convertRawStructuredType(convertJsonMap),\n      toValue: noop,\n      toString: toString,\n      format: toStringFromRawValue,\n      resultVersion: context.resultVersion,\n      statementParameters: context.statementParameters,\n      fieldsMetadata: metadataField.fields\n    };\n    value = convertJsonMap(columnValue, internalMapContext);\n    break;\n  }\n  default:\n    Logger.getInstance().info(`Column type not supported: ${context.fieldsMetadata.type}`);\n    throw new Error(`Column type not supported: ${context.fieldsMetadata.type}`);\n  }\n  return value;\n}\n\nconst convertTimestampTzString = function (stringValue, formatSql, timezone, scale) {\n  const formatMoment = dateTimeFormatConverter.convertSnowflakeFormatToMomentFormat(formatSql, scale);\n  const epochSeconds = momentTimezone(stringValue, formatMoment).unix();\n  return new SfTimestamp(epochSeconds, 0, scale, timezone, formatSql);\n};\n\nconst convertTimestampNtzString = function (stringValue, formatSql, timezone, scale) {\n  const formatMoment = dateTimeFormatConverter.convertSnowflakeFormatToMomentFormat(formatSql, scale);\n  const epochSeconds = momentTimezone.utc(stringValue, formatMoment).unix();\n  return new SfTimestamp(epochSeconds, 0, scale, timezone, formatSql);\n};\n\nconst convertDateString = function (stringValue, formatSql) {\n  const formatMoment = dateTimeFormatConverter.convertSnowflakeFormatToMomentFormat(formatSql, 0);\n  const epochSeconds = momentTimezone.utc(stringValue, formatMoment).unix();\n  const date = new SfTimestamp(\n    epochSeconds, // convert to seconds\n    0,                              // no nano seconds\n    0,                              // no scale required\n    'UTC',                          // use utc as the timezone\n    context.format);\n  date._valueAsString = stringValue;\n  return date.toSfDate();\n};\n\n\nconst convertTimeString = function (stringValue, formatSql, timezone, scale) {\n  const formatMoment = dateTimeFormatConverter.convertSnowflakeFormatToMomentFormat(formatSql, scale);\n  const moment = momentTimezone(stringValue, formatMoment);\n  const epochSeconds = moment.hours() * 3600 + moment.minutes() * 60 + moment.seconds();\n  const time =  new SfTimestamp(epochSeconds, 0, scale, timezone, formatSql);\n  time._valueAsString = stringValue;\n  return time;\n};\n\n/**\n * Converts a raw column value of type Date to a Snowflake Date.\n *\n * @param {String} rawColumnValue\n * @param {Object} column\n * @param {Object} context\n *\n * @returns {Date}\n */\nfunction convertRawDate(rawColumnValue, column, context) {\n  return new SfTimestamp(\n    Number(rawColumnValue) * 86400, // convert to seconds\n    0,                              // no nano seconds\n    0,                              // no scale required\n    'UTC',                          // use utc as the timezone\n    context.format).toSfDate();\n}\n\n/**\n * Converts a raw column value of type Time to a Snowflake Time.\n *\n * @param {String} rawColumnValue\n * @param {Object} column\n * @param {Object} context\n *\n * @returns {Object}\n */\nfunction convertRawTime(rawColumnValue, column, context) {\n  const columnScale = column.getScale();\n\n  // the values might be big so use BigNumber to do arithmetic\n  const valFracSecsBig =\n    new BigNumber(rawColumnValue).times(Math.pow(10, columnScale));\n\n  return convertRawTimestampHelper(\n    valFracSecsBig,\n    columnScale,\n    'UTC',\n    context.format).toSfTime();\n}\n\n/**\n * Converts a raw column value of type TIMESTAMP_LTZ to a Snowflake Date.\n *\n * @param {String} rawColumnValue\n * @param {Object} column\n * @param {Object} context\n *\n * @returns {Date}\n */\nfunction convertRawTimestampLtz(rawColumnValue, column, context) {\n  const columnScale = column.getScale();\n\n  // the values might be big so use BigNumber to do arithmetic\n  const valFracSecsBig =\n    new BigNumber(rawColumnValue).times(Math.pow(10, columnScale));\n\n  // create a new snowflake date\n  return convertRawTimestampHelper(\n    valFracSecsBig,\n    columnScale,\n    context.statementParameters['TIMEZONE'],\n    context.format).toSfDate();\n}\n\n/**\n * Converts a raw column value of type TIMESTAMP_NTZ to a Snowflake Date.\n *\n * @param {String} rawColumnValue\n * @param {Object} column\n * @param {Object} context\n *\n * @returns {Date}\n */\nfunction convertRawTimestampNtz(rawColumnValue, column, context) {\n  const columnScale = column.getScale();\n\n  // the values might be big so use BigNumber to do arithmetic\n  const valFracSecsBig =\n    new BigNumber(rawColumnValue).times(Math.pow(10, columnScale));\n\n  // create a new snowflake date\n  return convertRawTimestampHelper(\n    valFracSecsBig,\n    columnScale,\n    'UTC',     // it's _ntz, so use UTC for timezone\n    context.format).toSfDate();\n}\n\n/**\n * Converts a raw column value of type TIMESTAMP_TZ to a Snowflake Date.\n *\n * @param {String} rawColumnValue\n * @param {Object} column\n * @param {Object} context\n *\n * @returns {Date}\n */\nfunction convertRawTimestampTz(rawColumnValue, column, context) {\n  let valFracSecsBig;\n  let valFracSecsWithTzBig;\n  let timezoneBig;\n  let timezone;\n  let timestampAndTZIndex;\n\n  // compute the scale factor\n  const columnScale = column.getScale();\n  const scaleFactor = Math.pow(10, columnScale);\n\n  const resultVersion = context.resultVersion;\n  if (resultVersion === '0' || resultVersion === undefined) {\n    // the values might be big so use BigNumber to do arithmetic\n    valFracSecsBig =\n      new BigNumber(rawColumnValue).times(scaleFactor);\n\n    // for _tz, the timezone is baked into the value\n    valFracSecsWithTzBig = valFracSecsBig;\n\n    // extract everything but the lowest 14 bits to get the fractional seconds\n    valFracSecsBig =\n      valFracSecsWithTzBig.dividedBy(16384).integerValue(BigNumber.ROUND_FLOOR);\n\n    // extract the lowest 14 bits to get the timezone\n    if (valFracSecsWithTzBig.isGreaterThanOrEqualTo(0)) {\n      timezoneBig = valFracSecsWithTzBig.modulo(16384);\n    } else {\n      timezoneBig =\n        valFracSecsWithTzBig.modulo(16384).plus(16384);\n    }\n  } else {\n    // split the value into number of seconds and timezone index\n    timestampAndTZIndex = rawColumnValue.split(' ');\n\n    // the values might be big so use BigNumber to do arithmetic\n    valFracSecsBig =\n      new BigNumber(timestampAndTZIndex[0]).times(scaleFactor);\n\n    timezoneBig = new BigNumber(timestampAndTZIndex[1]);\n  }\n\n  timezone = timezoneBig.toNumber();\n\n  // assert that timezone is valid\n  Errors.assertInternal(timezone >= 0 && timezone <= 2880);\n\n  // subtract 24 hours from the timezone to map [0, 48] to\n  // [-24, 24], and convert the result to a number\n  timezone = timezone - 1440;\n\n  // create a new snowflake date\n  return convertRawTimestampHelper(\n    valFracSecsBig,\n    columnScale,\n    timezone,\n    context.format).toSfDate();\n}\n\n/**\n * Helper function for the convertRawTimestamp*() functions.\n * Returns an instance of SfTimestamp.\n *\n * @param {Object} epochFracSecsBig\n * @param {Number} scale\n * @param {String | Number} timezone\n * @param {String} format\n *\n * @returns {Object}\n */\nfunction convertRawTimestampHelper(\n  epochFracSecsBig,\n  scale,\n  timezone,\n  format) {\n  // compute the scale factor\n  const scaleFactor = Math.pow(10, scale);\n\n  // split the value into epoch seconds + nanoseconds; for example,\n  // 1365148923.123456789 will be split into 1365148923 (epoch seconds)\n  // and 123456789 (nano seconds)\n  const valSecBig = epochFracSecsBig.dividedBy(scaleFactor).integerValue(BigNumber.ROUND_FLOOR);\n  const fractionsBig = epochFracSecsBig.minus(valSecBig.times(scaleFactor));\n  const valSecNanoBig = fractionsBig.times(Math.pow(10, 9 - scale));\n\n  // create a new snowflake date from the information\n  return new SfTimestamp(\n    valSecBig.toNumber(),\n    valSecNanoBig.toNumber(),\n    scale,\n    timezone,\n    format);\n}\n\n/**\n * Converts a raw column value of type Variant to a JavaScript value.\n *\n * @param {String} rawColumnValue\n *\n * @returns {Object | Array}\n */\nfunction convertRawVariant(rawColumnValue) {\n  // if the input is a non-empty string, convert it to a json object\n  if (Util.string.isNotNullOrEmpty(rawColumnValue)) {\n    try {\n      return GlobalConfig.jsonColumnVariantParser(rawColumnValue);\n    } catch (jsonParseError) {\n      try {\n        return GlobalConfig.xmlColumnVariantParser(rawColumnValue);\n      } catch (xmlParseError) {\n        Logger.getInstance().debug('Variant cannot be parsed neither as JSON: %s nor as XML: %s', jsonParseError.message, xmlParseError.message);\n        throw new Errors.VariantParseError(jsonParseError, xmlParseError);\n      }\n    }\n  }\n}\n\n/**\n * Converts a raw column value of type Binary to a Buffer.\n *\n * @param {String} rawColumnValue\n * @param {Object} column\n * @param {Object} context\n *\n * @returns {Buffer}\n */\nfunction convertRawBinary(rawColumnValue, column, context) {\n  // Ensure the format is valid.\n  const format = context.format.toUpperCase();\n  Errors.assertInternal(format === 'HEX' || format === 'BASE64');\n\n  // Decode hex string sent by GS.\n  const buffer = Buffer.from(rawColumnValue, 'HEX');\n\n  if (format === 'HEX') {\n    buffer.toStringSf = function () {\n      // The raw value is already an uppercase hex string, so just return it.\n      // Note that buffer.toString(\"HEX\") returns a lowercase hex string, but we\n      // want upper case.\n      return rawColumnValue;\n    };\n  } else {\n    buffer.toStringSf = function () {\n      return this.toString('BASE64');\n    };\n  }\n\n  buffer.getFormat = function () {\n    return format;\n  };\n\n  return buffer;\n}\n\n/**\n * Returns the input value as is.\n *\n * @param {*} value\n *\n * @returns {*}\n */\nfunction noop(value) {\n  return value;\n}\n\n/**\n * The toValue() function for a column of type Number.\n *\n * @param {*} columnValue\n *\n * @returns {Number}\n */\nfunction toValueFromNumber(columnValue) {\n  return columnValue ? columnValue.processed : columnValue;\n}\n\n/**\n * The toValue() function for a column of type Time.\n *\n * @param {*} columnValue\n *\n * @returns {String}\n */\nfunction toValueFromTime(columnValue) {\n  // there's no native javascript type that can be used to represent time, so\n  // just convert to string\n  return toStringFromTime(columnValue);\n}\n\n/**\n * The toString() function for a column of type Number.\n *\n * @param {Number} columnValue\n *\n * @returns {String}\n */\nfunction toStringFromNumber(columnValue) {\n  return (columnValue !== null) ? columnValue.raw : DataTypes.getNullValue();\n}\n\n/**\n * The toString() function for a column of type Boolean.\n *\n * @param {Boolean} columnValue\n *\n * @returns {String}\n */\nfunction toStringFromBoolean(columnValue) {\n  return (columnValue !== null) ? String(columnValue).toUpperCase() :\n    DataTypes.getNullValue();\n}\n\n/**\n * The toString() function for a column of type Date.\n *\n * @param {Date} columnValue\n *\n * @returns {String}\n */\nfunction toStringFromDate(columnValue) {\n  return (columnValue !== null) ? columnValue.toJSON() : DataTypes.getNullValue();\n}\n\n/**\n * The toString() function for a column of type Time.\n *\n * @param {Object} columnValue\n *\n * @returns {String}\n */\nfunction toStringFromTime(columnValue) {\n  return (columnValue !== null) ? columnValue.toJSON() : DataTypes.getNullValue();\n}\n\n/**\n * The toString() function for a column of type Timestamp.\n *\n * @param {Date} columnValue\n *\n * @returns {String}\n */\nfunction toStringFromTimestamp(columnValue) {\n  return (columnValue !== null) ? columnValue.toJSON() : DataTypes.getNullValue();\n}\n\n/**\n * The toString() function for a column of type Variant.\n *\n * @param {Object} columnValue\n *\n * @returns {String}\n */\nfunction toStringFromRawValue(columnValue) {\n  return (columnValue !== null) ? JSON.stringify(columnValue) : DataTypes.getNullValue();\n}\n\n/**\n * The toString() function for a column of type String.\n *\n * @param {String} columnValue\n *\n * @returns {String}\n */\nfunction toStringFromString(columnValue) {\n  return (columnValue !== null) ? columnValue : DataTypes.getNullValue();\n}\n\n/**\n * The toString() function for a column of type Binary.\n *\n * @param {Buffer} columnValue\n *\n * @returns {String}\n */\nfunction toStringFromBinary(columnValue) {\n  return (columnValue !== null) ? columnValue.toStringSf() : DataTypes.getNullValue();\n}\n\n/**\n * Extracts the value of a column from a given row.\n *\n * @param {Object} row\n * @param {Object} context\n * @param {Boolean} asString\n *\n * @returns {*}\n */\nfunction extractFromRow(row, context, asString) {\n  const map = row._arrayProcessedColumns;\n  const values = row.values;\n\n  // get the value\n  const columnIndex = this.getIndex();\n  let ret = values[columnIndex];\n\n  // if we want the value as a string, and the column is of type variant, and we\n  // haven't already processed the value before, we don't need to process the\n  // value, so only process if none of the aforementioned conditions are true\n  if (!(asString && this.isVariant() && !map[columnIndex])) {\n    // if the column value has not been processed yet, process it, put it back\n    // in the values array, and remember that the value has been processed\n    if (!map[columnIndex]) {\n      if (ret !== null) {\n        ret = values[columnIndex] =\n          context.convert(values[columnIndex], this, context);\n      }\n      map[columnIndex] = true;\n    }\n\n    // use the appropriate extraction function depending on whether\n    // we want the value or a string representation of the value\n    const extractFn = !asString ? context.toValue : context.toString;\n    ret = extractFn(ret);\n  }\n\n  return ret;\n}\n\nmodule.exports = Column;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9saWIvY29ubmVjdGlvbi9yZXN1bHQvY29sdW1uLmpzIiwibWFwcGluZ3MiOiJBQUFBLGFBQWEsbUJBQU8sQ0FBQyxrRUFBWTtBQUNqQyxlQUFlLG1CQUFPLENBQUMsc0VBQWM7QUFDckMsa0JBQWtCLG1CQUFPLENBQUMsb0VBQWM7QUFDeEMscUJBQXFCLG1CQUFPLENBQUMsb0ZBQXFCO0FBQ2xELGVBQWUsbUJBQU8sQ0FBQyxzRUFBYztBQUNyQyxvQkFBb0IsbUJBQU8sQ0FBQyxnR0FBZ0I7QUFDNUMsa0JBQWtCLG1CQUFPLENBQUMsNEZBQWM7QUFDeEMsaUJBQWlCLDRIQUFnQztBQUNqRCxnQ0FBZ0MsbUJBQU8sQ0FBQywwSEFBNkI7QUFDckUsZUFBZSxtQkFBTyxDQUFDLG1FQUFhO0FBQ3BDLGVBQWUsbUJBQU8sQ0FBQyxxREFBUTtBQUMvQix1QkFBdUIsbUJBQU8sQ0FBQyxzRUFBaUI7QUFDaEQsYUFBYSxtQkFBTyxDQUFDLGtFQUFZOztBQUVqQztBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckI7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxVQUFVO0FBQ3JCLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLElBQUk7QUFDSixnRUFBZ0UsZUFBZTtBQUMvRTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLLElBQUk7O0FBRVQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkI7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNERBQTRELDRCQUE0QjtBQUN4RixrREFBa0QsNEJBQTRCO0FBQzlFO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkI7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLGlCQUFpQjtBQUM1QixXQUFXLFFBQVE7QUFDbkI7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSx1REFBdUQ7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkI7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsR0FBRztBQUNkO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsR0FBRztBQUNkO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsR0FBRztBQUNkO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxNQUFNO0FBQ2pCO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE1BQU07QUFDakI7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFNBQVM7QUFDcEI7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcndpbHNvbi9EZXNrdG9wL3Byb2plY3RzL0VaVml6L25vZGVfbW9kdWxlcy9zbm93Zmxha2Utc2RrL2xpYi9jb25uZWN0aW9uL3Jlc3VsdC9jb2x1bW4uanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgVXRpbCA9IHJlcXVpcmUoJy4uLy4uL3V0aWwnKTtcbmNvbnN0IEVycm9ycyA9IHJlcXVpcmUoJy4uLy4uL2Vycm9ycycpO1xuY29uc3QgQmlnTnVtYmVyID0gcmVxdWlyZSgnYmlnbnVtYmVyLmpzJyk7XG5jb25zdCBHbG9iYWxDb25maWcgPSByZXF1aXJlKCcuLi8uLi9nbG9iYWxfY29uZmlnJyk7XG5jb25zdCBMb2dnZXIgPSByZXF1aXJlKCcuLi8uLi9sb2dnZXInKTtcbmNvbnN0IFNmVGltZXN0YW1wID0gcmVxdWlyZSgnLi9zZl90aW1lc3RhbXAnKTtcbmNvbnN0IERhdGFUeXBlcyA9IHJlcXVpcmUoJy4vZGF0YV90eXBlcycpO1xuY29uc3QgU3FsVHlwZXMgPSByZXF1aXJlKCcuL2RhdGFfdHlwZXMnKS5TcWxUeXBlcztcbmNvbnN0IGRhdGVUaW1lRm9ybWF0Q29udmVydGVyID0gcmVxdWlyZSgnLi9kYXRldGltZV9mb3JtYXRfY29udmVydGVyJyk7XG5jb25zdCBiaWdJbnQgPSByZXF1aXJlKCdiaWctaW50ZWdlcicpO1xuY29uc3QgbW9tZW50ID0gcmVxdWlyZSgnbW9tZW50Jyk7XG5jb25zdCBtb21lbnRUaW1lem9uZSA9IHJlcXVpcmUoJ21vbWVudC10aW1lem9uZScpO1xuY29uc3QgdXRpbCA9IHJlcXVpcmUoJy4uLy4uL3V0aWwnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IENvbHVtbi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQHBhcmFtIHtOdW1iZXJ9IGluZGV4XG4gKiBAcGFyYW0ge09iamVjdH0gc3RhdGVtZW50UGFyYW1ldGVyc1xuICogQHBhcmFtIHtTdHJpbmd9IHJlc3VsdFZlcnNpb25cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gQ29sdW1uKG9wdGlvbnMsIGluZGV4LCBzdGF0ZW1lbnRQYXJhbWV0ZXJzLCByZXN1bHRWZXJzaW9uKSB7XG4gIGNvbnN0IG5hbWUgPSBvcHRpb25zLm92ZXJyaWRkZW5OYW1lIHx8IG9wdGlvbnMubmFtZTtcbiAgY29uc3QgbnVsbGFibGUgPSBvcHRpb25zLm51bGxhYmxlO1xuICBjb25zdCBzY2FsZSA9IG9wdGlvbnMuc2NhbGU7XG4gIGNvbnN0IHR5cGUgPSBvcHRpb25zLnR5cGU7XG4gIGNvbnN0IHByZWNpc2lvbiA9IG9wdGlvbnMucHJlY2lzaW9uO1xuICBjb25zdCBmaWVsZHNNZXRhZGF0YSA9IG9wdGlvbnMuZmllbGRzO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBuYW1lIG9mIHRoaXMgY29sdW1uLlxuICAgKlxuICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAqL1xuICB0aGlzLmdldE5hbWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIG5hbWU7XG4gIH07XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGluZGV4IG9mIHRoaXMgY29sdW1uLlxuICAgKlxuICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAqL1xuICB0aGlzLmdldEluZGV4ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBpbmRleDtcbiAgfTtcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgaWQgb2YgdGhpcyBjb2x1bW4uXG4gICAqXG4gICAqIEByZXR1cm4ge051bWJlcn1cbiAgICovXG4gIHRoaXMuZ2V0SWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgLy8gdXNlIHRoZSBpbmRleCBhcyB0aGUgaWQgZm9yIG5vd1xuICAgIHJldHVybiBpbmRleDtcbiAgfTtcblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyBpZiB0aGlzIGNvbHVtbiBpcyBudWxsYWJsZS5cbiAgICpcbiAgICogQHJldHVybnMge0Jvb2xlYW59XG4gICAqL1xuICB0aGlzLmlzTnVsbGFibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIG51bGxhYmxlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBzY2FsZSBhc3NvY2lhdGVkIHdpdGggdGhpcyBjb2x1bW4uXG4gICAqXG4gICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAqL1xuICB0aGlzLmdldFNjYWxlID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBzY2FsZTtcbiAgfTtcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgdHlwZSBhc3NvY2lhdGVkIHdpdGggdGhpcyBjb2x1bW4uXG4gICAqXG4gICAqIEByZXR1cm5zIHtTdHJpbmd9XG4gICAqL1xuICB0aGlzLmdldFR5cGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHR5cGU7XG4gIH07XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHByZWNpc2lvbiBhc3NvY2lhdGVkIHdpdGggdGhpcyBjb2x1bW5cbiAgICpcbiAgICogQHJldHVybnMge051bWJlcn1cbiAgICovXG4gIHRoaXMuZ2V0UHJlY2lzaW9uID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBwcmVjaXNpb247XG4gIH07XG5cbiAgLy8gYWRkIG1ldGhvZHMgdGhhdCBtYWtlIGl0IGVhc3kgdG8gY2hlY2sgaWYgdGhlIGNvbHVtbiBpcyBvZiBhIHNwZWNpZmljIHR5cGVcbiAgdGhpcy5pc1N0cmluZyA9IGNyZWF0ZUZuSXNDb2x1bW5PZlR5cGUodHlwZSwgU3FsVHlwZXMuaXNTdHJpbmcsIFNxbFR5cGVzKTtcbiAgdGhpcy5pc0JpbmFyeSA9IGNyZWF0ZUZuSXNDb2x1bW5PZlR5cGUodHlwZSwgU3FsVHlwZXMuaXNCaW5hcnksIFNxbFR5cGVzKTtcbiAgdGhpcy5pc051bWJlciA9IGNyZWF0ZUZuSXNDb2x1bW5PZlR5cGUodHlwZSwgU3FsVHlwZXMuaXNOdW1iZXIsIFNxbFR5cGVzKTtcbiAgdGhpcy5pc0Jvb2xlYW4gPSBjcmVhdGVGbklzQ29sdW1uT2ZUeXBlKHR5cGUsIFNxbFR5cGVzLmlzQm9vbGVhbiwgU3FsVHlwZXMpO1xuICB0aGlzLmlzRGF0ZSA9IGNyZWF0ZUZuSXNDb2x1bW5PZlR5cGUodHlwZSwgU3FsVHlwZXMuaXNEYXRlLCBTcWxUeXBlcyk7XG4gIHRoaXMuaXNUaW1lID0gY3JlYXRlRm5Jc0NvbHVtbk9mVHlwZSh0eXBlLCBTcWxUeXBlcy5pc1RpbWUsIFNxbFR5cGVzKTtcbiAgdGhpcy5pc1RpbWVzdGFtcCA9IGNyZWF0ZUZuSXNDb2x1bW5PZlR5cGUodHlwZSwgU3FsVHlwZXMuaXNUaW1lc3RhbXAsIFNxbFR5cGVzKTtcbiAgdGhpcy5pc1RpbWVzdGFtcEx0eiA9IGNyZWF0ZUZuSXNDb2x1bW5PZlR5cGUodHlwZSwgU3FsVHlwZXMuaXNUaW1lc3RhbXBMdHosIFNxbFR5cGVzKTtcbiAgdGhpcy5pc1RpbWVzdGFtcE50eiA9IGNyZWF0ZUZuSXNDb2x1bW5PZlR5cGUodHlwZSwgU3FsVHlwZXMuaXNUaW1lc3RhbXBOdHosIFNxbFR5cGVzKTtcbiAgdGhpcy5pc1RpbWVzdGFtcFR6ID0gY3JlYXRlRm5Jc0NvbHVtbk9mVHlwZSh0eXBlLCBTcWxUeXBlcy5pc1RpbWVzdGFtcFR6LCBTcWxUeXBlcyk7XG4gIHRoaXMuaXNWYXJpYW50ID0gY3JlYXRlRm5Jc0NvbHVtbk9mVHlwZSh0eXBlLCAodHlwZSkgPT4gU3FsVHlwZXMuaXNWYXJpYW50KHR5cGUsIGZpZWxkc01ldGFkYXRhKSwgU3FsVHlwZXMpO1xuICB0aGlzLmlzT2JqZWN0ID0gY3JlYXRlRm5Jc0NvbHVtbk9mVHlwZSh0eXBlLCAodHlwZSkgPT4gU3FsVHlwZXMuaXNPYmplY3QodHlwZSwgZmllbGRzTWV0YWRhdGEpLCBTcWxUeXBlcyk7XG4gIHRoaXMuaXNBcnJheSA9IGNyZWF0ZUZuSXNDb2x1bW5PZlR5cGUodHlwZSwgKHR5cGUpID0+IFNxbFR5cGVzLmlzQXJyYXkodHlwZSwgZmllbGRzTWV0YWRhdGEpLCBTcWxUeXBlcyk7XG4gIHRoaXMuaXNNYXAgPSBjcmVhdGVGbklzQ29sdW1uT2ZUeXBlKHR5cGUsICh0eXBlKSA9PiBTcWxUeXBlcy5pc01hcCh0eXBlLCBmaWVsZHNNZXRhZGF0YSksIFNxbFR5cGVzKTtcblxuICBsZXQgY29udmVydDtcbiAgbGV0IHRvU3RyaW5nO1xuICBsZXQgdG9WYWx1ZTtcbiAgbGV0IGZvcm1hdDtcblxuICBpZiAodGhpcy5pc051bWJlcigpKSB7XG4gICAgY29uc3QgaW50ZWdlckFzID0gc3RhdGVtZW50UGFyYW1ldGVyc1snSlNfVFJFQVRfSU5URUdFUl9BU19CSUdJTlQnXTtcbiAgICBpZiAoIWludGVnZXJBcykge1xuICAgICAgY29udmVydCA9IGNvbnZlcnRSYXdOdW1iZXI7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0aGlzLmdldFNjYWxlKCkgPiAwIHx8IHRoaXMuZ2V0VHlwZSgpID09PSBTcWxUeXBlcy52YWx1ZXMuUkVBTCkge1xuICAgICAgICBjb252ZXJ0ID0gY29udmVydFJhd051bWJlcjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFRoaXMgaXMgYW4gaW50ZWdlciBzbyByZXByZXNlbnQgaXQgYXMgYSBiaWcgaW50XG4gICAgICAgIGNvbnZlcnQgPSBjb252ZXJ0UmF3QmlnSW50O1xuICAgICAgfVxuICAgIH1cbiAgICB0b1ZhbHVlID0gdG9WYWx1ZUZyb21OdW1iZXI7XG4gICAgdG9TdHJpbmcgPSB0b1N0cmluZ0Zyb21OdW1iZXI7XG4gIH0gZWxzZSBpZiAodGhpcy5pc1RpbWUoKSkge1xuICAgIGNvbnZlcnQgPSBjb252ZXJ0UmF3VGltZTtcbiAgICB0b1ZhbHVlID0gdG9WYWx1ZUZyb21UaW1lO1xuICAgIHRvU3RyaW5nID0gdG9TdHJpbmdGcm9tVGltZTtcbiAgICBmb3JtYXQgPSBzdGF0ZW1lbnRQYXJhbWV0ZXJzWydUSU1FX09VVFBVVF9GT1JNQVQnXTtcbiAgfSBlbHNlIHtcbiAgICB0b1ZhbHVlID0gbm9vcDtcblxuICAgIGlmICh0aGlzLmlzQm9vbGVhbigpKSB7XG4gICAgICBjb252ZXJ0ID0gY29udmVydFJhd0Jvb2xlYW47XG4gICAgICB0b1N0cmluZyA9IHRvU3RyaW5nRnJvbUJvb2xlYW47XG4gICAgfSBlbHNlIGlmICh0aGlzLmlzRGF0ZSgpKSB7XG4gICAgICBjb252ZXJ0ID0gY29udmVydFJhd0RhdGU7XG4gICAgICB0b1N0cmluZyA9IHRvU3RyaW5nRnJvbURhdGU7XG4gICAgICBmb3JtYXQgPSBzdGF0ZW1lbnRQYXJhbWV0ZXJzWydEQVRFX09VVFBVVF9GT1JNQVQnXTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuaXNUaW1lc3RhbXAoKSkge1xuICAgICAgaWYgKHRoaXMuaXNUaW1lc3RhbXBMdHooKSkge1xuICAgICAgICBjb252ZXJ0ID0gY29udmVydFJhd1RpbWVzdGFtcEx0ejtcbiAgICAgICAgdG9TdHJpbmcgPSB0b1N0cmluZ0Zyb21UaW1lc3RhbXA7XG4gICAgICAgIGZvcm1hdCA9IHN0YXRlbWVudFBhcmFtZXRlcnNbJ1RJTUVTVEFNUF9MVFpfT1VUUFVUX0ZPUk1BVCddO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLmlzVGltZXN0YW1wTnR6KCkpIHtcbiAgICAgICAgY29udmVydCA9IGNvbnZlcnRSYXdUaW1lc3RhbXBOdHo7XG4gICAgICAgIHRvU3RyaW5nID0gdG9TdHJpbmdGcm9tVGltZXN0YW1wO1xuICAgICAgICBmb3JtYXQgPSBzdGF0ZW1lbnRQYXJhbWV0ZXJzWydUSU1FU1RBTVBfTlRaX09VVFBVVF9GT1JNQVQnXTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5pc1RpbWVzdGFtcFR6KCkpIHtcbiAgICAgICAgY29udmVydCA9IGNvbnZlcnRSYXdUaW1lc3RhbXBUejtcbiAgICAgICAgdG9TdHJpbmcgPSB0b1N0cmluZ0Zyb21UaW1lc3RhbXA7XG4gICAgICAgIGZvcm1hdCA9IHN0YXRlbWVudFBhcmFtZXRlcnNbJ1RJTUVTVEFNUF9UWl9PVVRQVVRfRk9STUFUJ107XG4gICAgICB9XG5cbiAgICAgIC8vIGlmIHdlIGRvbid0IGhhdmUgYSB0eXBlLXNwZWNpZmljIHRpbWV6b25lLCB1c2UgdGhlIGRlZmF1bHQgZm9ybWF0XG4gICAgICBpZiAoIWZvcm1hdCkge1xuICAgICAgICBmb3JtYXQgPSBzdGF0ZW1lbnRQYXJhbWV0ZXJzWydUSU1FU1RBTVBfT1VUUFVUX0ZPUk1BVCddO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGhpcy5pc0JpbmFyeSgpKSB7XG4gICAgICBjb252ZXJ0ID0gY29udmVydFJhd0JpbmFyeTtcbiAgICAgIHRvU3RyaW5nID0gdG9TdHJpbmdGcm9tQmluYXJ5O1xuICAgICAgZm9ybWF0ID0gc3RhdGVtZW50UGFyYW1ldGVyc1snQklOQVJZX09VVFBVVF9GT1JNQVQnXTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuaXNWYXJpYW50KCkpIHtcbiAgICAgIGNvbnZlcnQgPSBjb252ZXJ0UmF3VmFyaWFudDtcbiAgICAgIHRvU3RyaW5nID0gdG9TdHJpbmdGcm9tUmF3VmFsdWU7XG4gICAgfSBlbHNlIGlmICh0aGlzLmlzT2JqZWN0KCkpIHtcbiAgICAgIGNvbnZlcnQgPSBjb252ZXJ0UmF3U3RydWN0dXJlZFR5cGUoY29udmVydEpzb25PYmplY3QpO1xuICAgICAgdG9TdHJpbmcgPSB0b1N0cmluZ0Zyb21SYXdWYWx1ZTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuaXNBcnJheSgpKSB7XG4gICAgICBjb252ZXJ0ID0gY29udmVydFJhd1N0cnVjdHVyZWRUeXBlKGNvbnZlcnRKc29uQXJyYXkpO1xuICAgICAgdG9TdHJpbmcgPSB0b1N0cmluZ0Zyb21SYXdWYWx1ZTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuaXNNYXAoKSkge1xuICAgICAgY29udmVydCA9IGNvbnZlcnRSYXdTdHJ1Y3R1cmVkVHlwZShjb252ZXJ0SnNvbk1hcCk7XG4gICAgICB0b1N0cmluZyA9IHRvU3RyaW5nRnJvbVJhd1ZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBjb2x1bW4gaXMgb2YgdHlwZSBzdHJpbmcsIHNvIGxlYXZlIHZhbHVlIGFzIGlzXG4gICAgICBjb252ZXJ0ID0gbm9vcDtcbiAgICAgIHRvU3RyaW5nID0gdG9TdHJpbmdGcm9tU3RyaW5nO1xuICAgIH1cbiAgfVxuXG4gIC8vIGNyZWF0ZSBhIHByaXZhdGUgY29udGV4dCB0byBwYXNzIHRvIHRoZSBleHRyYWN0IGZ1bmN0aW9uXG4gIGNvbnN0IGNvbnRleHQgPVxuICAgIHtcbiAgICAgIGNvbnZlcnQ6IGNvbnZlcnQsXG4gICAgICB0b1ZhbHVlOiB0b1ZhbHVlLFxuICAgICAgdG9TdHJpbmc6IHRvU3RyaW5nLFxuICAgICAgZm9ybWF0OiBmb3JtYXQsXG4gICAgICByZXN1bHRWZXJzaW9uOiByZXN1bHRWZXJzaW9uLFxuICAgICAgc3RhdGVtZW50UGFyYW1ldGVyczogc3RhdGVtZW50UGFyYW1ldGVycyxcbiAgICAgIGZpZWxkc01ldGFkYXRhOiBmaWVsZHNNZXRhZGF0YVxuICAgIH07XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHZhbHVlIG9mIHRoaXMgY29sdW1uIGluIGEgcm93LlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gcm93XG4gICAqXG4gICAqIEByZXR1cm5zIHsqfVxuICAgKi9cbiAgdGhpcy5nZXRSb3dWYWx1ZSA9IGZ1bmN0aW9uIChyb3cpIHtcbiAgICByZXR1cm4gZXh0cmFjdEZyb21Sb3cuY2FsbCh0aGlzLCByb3csIGNvbnRleHQsIGZhbHNlKTtcbiAgfTtcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgdmFsdWUgb2YgdGhpcyBpbiBhIHJvdyBhcyBhIFN0cmluZy5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IHJvd1xuICAgKlxuICAgKiBAcmV0dXJucyB7U3RyaW5nfVxuICAgKi9cbiAgdGhpcy5nZXRSb3dWYWx1ZUFzU3RyaW5nID0gZnVuY3Rpb24gKHJvdykge1xuICAgIHJldHVybiBleHRyYWN0RnJvbVJvdy5jYWxsKHRoaXMsIHJvdywgY29udGV4dCwgdHJ1ZSk7XG4gIH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgY2FuIGJlIHVzZWQgdG8gZGV0ZXJtaW5lIGlmIGEgY29sdW1uIGlzIG9mIGEgZ2l2ZW5cbiAqIHR5cGUuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGNvbHVtblR5cGUgdGhlIGNvbHVtbiB0eXBlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY29sdW1uQ29tcGFyaXNvbkZuIHRoZSBjb2x1bW4gY29tcGFyaXNvbiBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzY29wZSB0aGUgc2NvcGUgaW4gd2hpY2ggdG8gaW52b2tlIHRoZSBjb2x1bW4gY29tcGFyaXNvblxuICogICBmdW5jdGlvbi5cbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUZuSXNDb2x1bW5PZlR5cGUoY29sdW1uVHlwZSwgY29sdW1uQ29tcGFyaXNvbkZuLCBzY29wZSkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBjb2x1bW5Db21wYXJpc29uRm4uY2FsbChzY29wZSwgY29sdW1uVHlwZSk7XG4gIH07XG59XG5cbi8qKlxuICogQ29udmVydHMgYSByYXcgY29sdW1uIHZhbHVlIG9mIHR5cGUgTnVtYmVyLiBUaGUgcmV0dXJuZWQgdmFsdWUgaXMgYW4gb2JqZWN0XG4gKiB0aGF0IGNvbnRhaW5zIHRoZSByYXcgc3RyaW5nIHZlcnNpb24gb2YgdGhlIHZhbHVlIGFzIHdlbGwgYXMgdGhlXG4gKiBwb3N0LXByb2Nlc3NlZCB2ZXJzaW9uIG9mIHRoZSB2YWx1ZSBvYnRhaW5lZCBhZnRlciBjYXN0aW5nIHRvIE51bWJlci5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcmF3Q29sdW1uVmFsdWVcbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fVxuICovXG5mdW5jdGlvbiBjb252ZXJ0UmF3TnVtYmVyKHJhd0NvbHVtblZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgcmF3OiByYXdDb2x1bW5WYWx1ZSxcbiAgICBwcm9jZXNzZWQ6IE51bWJlcihyYXdDb2x1bW5WYWx1ZSlcbiAgfTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhIHJhdyBjb2x1bW4gdmFsdWUgdGhhdCBpcyBhbiBpbnRlZ2VyLiBUaGUgcmV0dXJuZWQgdmFsdWUgaXMgYW4gb2JqZWN0XG4gKiB0aGF0IGNvbnRhaW5zIHRoZSByYXcgc3RyaW5nIHZlcnNpb24gb2YgdGhlIHZhbHVlIGFzIHdlbGwgYXMgdGhlIHBvc3QtcHJvY2Vzc2VkXG4gKiB2ZXJzaW9uIG9mIHRoZSB2YWx1ZSBvYnRhaW5lZCBhZnRlciBjYXN0aW5nIHRvIGJpZ0ludFxuICpcbiAqIEBwYXJhbSByYXdDb2x1bW5WYWx1ZVxuICogQHJldHVybnMge3twcm9jZXNzZWQ6IGJpZ0ludC5CaWdJbnRlZ2VyLCByYXc6ICp9fVxuICovXG5mdW5jdGlvbiBjb252ZXJ0UmF3QmlnSW50KHJhd0NvbHVtblZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgcmF3OiByYXdDb2x1bW5WYWx1ZSxcbiAgICBwcm9jZXNzZWQ6IGJpZ0ludChyYXdDb2x1bW5WYWx1ZSlcbiAgfTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhIHJhdyBjb2x1bW4gdmFsdWUgb2YgdHlwZSBCb29sZWFuIHRvIGEgYm9vbGVhbiAodHJ1ZSwgZmFsc2UsXG4gKiBvciBudWxsKS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcmF3Q29sdW1uVmFsdWVcbiAqXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gY29udmVydFJhd0Jvb2xlYW4ocmF3Q29sdW1uVmFsdWUpIHtcbiAgbGV0IHJldDtcblxuICBpZiAocmF3Q29sdW1uVmFsdWUgID09PSB0cnVlIHx8IChyYXdDb2x1bW5WYWx1ZSA9PT0gJzEnKSB8fCAocmF3Q29sdW1uVmFsdWUudG9VcHBlckNhc2UoKSA9PT0gJ1RSVUUnKSkge1xuICAgIHJldCA9IHRydWU7XG4gIH0gZWxzZSBpZiAocmF3Q29sdW1uVmFsdWUgPT09IGZhbHNlIHx8IChyYXdDb2x1bW5WYWx1ZSA9PT0gJzAnKSB8fCAocmF3Q29sdW1uVmFsdWUudG9VcHBlckNhc2UoKSA9PT0gJ0ZBTFNFJykpIHtcbiAgICByZXQgPSBmYWxzZTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFZhbHVlIGNvdWxkIG5vdCBiZSBjb252ZXJ0ZWQgdG8gYm9vbGVhbjogJHtyYXdDb2x1bW5WYWx1ZX1gKTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGEgcmF3IGNvbHVtbiB2YWx1ZSBvZiBzdHJ1Y3R1cmVkIHR5cGUgb2JqZWN0IHRvIGphdmFzY3JpcHQgT2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGpzb25cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb250ZXh0XG4gKlxuICogQHJldHVybnMge09iamVjdH1cbiAqL1xuZnVuY3Rpb24gY29udmVydEpzb25PYmplY3QoanNvbiwgY29udGV4dCkge1xuICBpZiAoY29udGV4dC5maWVsZHNNZXRhZGF0YSl7XG4gICAgY29udGV4dC5maWVsZHNNZXRhZGF0YSA9IGNvbnRleHQuZmllbGRzTWV0YWRhdGEucmVkdWNlKGZ1bmN0aW9uIChtYXAsIG9iaikge1xuICAgICAgbWFwW29iai5uYW1lXSA9IG9iajtcbiAgICAgIHJldHVybiBtYXA7XG4gICAgfSwge30pO1xuXG4gICAgY29uc3QgcmVzdWx0ID0ge307XG4gICAgT2JqZWN0LmtleXMoanNvbikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBjb25zdCBmaWVsZE1ldGFkYXRhID0gY29udGV4dC5maWVsZHNNZXRhZGF0YVtrZXldO1xuICAgICAgcmVzdWx0W2tleV0gPSBtYXBTdHJ1Y3R1cmVkVHlwZVZhbHVlKGpzb25ba2V5XSwgY29udGV4dCwgZmllbGRNZXRhZGF0YSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4ganNvbjtcbiAgfVxufVxuXG4vKipcbiAqIENvbnZlcnRzIGEgcmF3IGNvbHVtbiB2YWx1ZSBvZiBzdHJ1Y3R1cmVkIHR5cGUgYXJyYXkgdG8gamF2YXNjcmlwdCBPYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0ganNvblxuICogQHBhcmFtIHtPYmplY3R9IGNvbnRleHRcbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fVxuICovXG5mdW5jdGlvbiBjb252ZXJ0SnNvbkFycmF5KGpzb24sIGNvbnRleHQpIHtcbiAgaWYgKGNvbnRleHQuZmllbGRzTWV0YWRhdGEpIHtcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICBqc29uLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICByZXN1bHQucHVzaChtYXBTdHJ1Y3R1cmVkVHlwZVZhbHVlKHZhbHVlLCBjb250ZXh0LCBjb250ZXh0LmZpZWxkc01ldGFkYXRhWzBdKSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4ganNvbjtcbiAgfVxufVxuXG4vKipcbiAqIENvbnZlcnRzIGEgcmF3IGNvbHVtbiB2YWx1ZSBvZiBzdHJ1Y3R1cmVkIHR5cGUgbWFwIHRvIGphdmFzY3JpcHQgT2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGpzb25cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb250ZXh0XG4gKlxuICogQHJldHVybnMge09iamVjdH1cbiAqL1xuZnVuY3Rpb24gY29udmVydEpzb25NYXAoanNvbiwgY29udGV4dCkge1xuICBpZiAoQXJyYXkuaXNBcnJheShjb250ZXh0LmZpZWxkc01ldGFkYXRhKSAmJiBjb250ZXh0LmZpZWxkc01ldGFkYXRhLmxlbmd0aCA9PT0gMikge1xuICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBNYXA7XG4gICAgY29uc3Qga2V5TWV0YWRhdGEgPSBjb250ZXh0LmZpZWxkc01ldGFkYXRhWzBdO1xuICAgIGNvbnN0IHZhbHVlTWV0YWRhdGEgPSBjb250ZXh0LmZpZWxkc01ldGFkYXRhWzFdO1xuICAgIE9iamVjdC5rZXlzKGpzb24pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgY29uc3QgY29udmVydGVkS2V5ID0gbWFwU3RydWN0dXJlZFR5cGVWYWx1ZShrZXksIGNvbnRleHQsIGtleU1ldGFkYXRhKTtcbiAgICAgIGNvbnN0IGNvbnZlcnRlZFZhbHVlID0gbWFwU3RydWN0dXJlZFR5cGVWYWx1ZShqc29uW2tleV0sIGNvbnRleHQsIHZhbHVlTWV0YWRhdGEpO1xuICAgICAgcmVzdWx0LnNldChjb252ZXJ0ZWRLZXksIGNvbnZlcnRlZFZhbHVlKTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBqc29uO1xuICB9XG59XG5cbi8qKlxuICogQ29udmVydHMgYSByYXcgY29sdW1uIHZhbHVlIG9mIHN0cnVjdHVyZWQgdHlwZSBPQkpFQ1QgdG8gamF2YXNjcmlwdCBPYmplY3RcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcmF3Q29sdW1uVmFsdWVcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb2x1bW5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb250ZXh0XG4gKlxuICogQHJldHVybnMge09iamVjdH1cbiAqL1xuY29uc3QgY29udmVydFJhd1N0cnVjdHVyZWRUeXBlID0gKGNvbnZlcnRKc29uRm4pID0+IChyYXdDb2x1bW5WYWx1ZSwgY29sdW1uLCBjb250ZXh0KSA9PiB7XG4gIGlmIChVdGlsLnN0cmluZy5pc05vdE51bGxPckVtcHR5KHJhd0NvbHVtblZhbHVlKSkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBqc29uID0gSlNPTi5wYXJzZShyYXdDb2x1bW5WYWx1ZSk7XG4gICAgICByZXR1cm4gY29udmVydEpzb25Gbihqc29uLCBjb250ZXh0KTtcbiAgICB9IGNhdGNoIChqc29uUGFyc2VFcnJvcikge1xuICAgICAgTG9nZ2VyLmdldEluc3RhbmNlKCkuZGVidWcoJ0NvbHVtbiAlcyByYXcgdmFsdWUgY2Fubm90IGJlIHBhcnNlZCBhcyBKU09OOiAlcyAnLCBjb2x1bW4ubmFtZSwganNvblBhcnNlRXJyb3IubWVzc2FnZSk7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IodXRpbC5mb3JtYXQoJ0NvbHVtbiBbJXNdIHJhdyB2YWx1ZSBjYW5ub3QgYmUgcGFyc2VkIGFzIEpTT046ICVzICcsIGNvbHVtbi5uYW1lLCBqc29uUGFyc2VFcnJvci5tZXNzYWdlKSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcih1dGlsLmZvcm1hdCgnQ29sdW1uICVzIHJhdyB2YWx1ZSBpcyBudWxsIG9yIGVtcHR5ICcsIGNvbHVtbi5uYW1lKSk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIG1hcFN0cnVjdHVyZWRUeXBlVmFsdWUoY29sdW1uVmFsdWUsIGNvbnRleHQsIG1ldGFkYXRhRmllbGQpIHtcbiAgY29uc3QgZm9ybWF0THR6ID0gY29udGV4dC5zdGF0ZW1lbnRQYXJhbWV0ZXJzWydUSU1FU1RBTVBfTFRaX09VVFBVVF9GT1JNQVQnXSA/PyBjb250ZXh0LnN0YXRlbWVudFBhcmFtZXRlcnNbJ1RJTUVTVEFNUF9PVVRQVVRfRk9STUFUJ107XG4gIGNvbnN0IGZvcm1hdFR6ID0gY29udGV4dC5zdGF0ZW1lbnRQYXJhbWV0ZXJzWydUSU1FU1RBTVBfVFpfT1VUUFVUX0ZPUk1BVCddID8/IGNvbnRleHQuc3RhdGVtZW50UGFyYW1ldGVyc1snVElNRVNUQU1QX09VVFBVVF9GT1JNQVQnXTtcbiAgY29uc3QgZm9ybWF0TnR6ID0gY29udGV4dC5zdGF0ZW1lbnRQYXJhbWV0ZXJzWydUSU1FU1RBTVBfTlRaX09VVFBVVF9GT1JNQVQnXTtcbiAgbGV0IHZhbHVlO1xuICBzd2l0Y2ggKG1ldGFkYXRhRmllbGQudHlwZSkge1xuICBjYXNlICd0ZXh0JzpcbiAgICB2YWx1ZSA9IGNvbHVtblZhbHVlO1xuICAgIGJyZWFrO1xuICBjYXNlICdyZWFsJzpcbiAgICB2YWx1ZSA9IHRvVmFsdWVGcm9tTnVtYmVyKGNvbnZlcnRSYXdOdW1iZXIoY29sdW1uVmFsdWUpKTtcbiAgICBicmVhaztcbiAgY2FzZSAnZml4ZWQnOlxuICAgIHZhbHVlID0gdG9WYWx1ZUZyb21OdW1iZXIoY29udmVydFJhd051bWJlcihjb2x1bW5WYWx1ZSkpO1xuICAgIGJyZWFrO1xuICBjYXNlICdib29sZWFuJzpcbiAgICB2YWx1ZSA9IGNvbnZlcnRSYXdCb29sZWFuKGNvbHVtblZhbHVlKTtcbiAgICBicmVhaztcbiAgY2FzZSAndGltZXN0YW1wX2x0eic6XG4gICAgdmFsdWUgPSBjb252ZXJ0VGltZXN0YW1wVHpTdHJpbmcoY29sdW1uVmFsdWUsIGZvcm1hdEx0eiwgY29udGV4dC5zdGF0ZW1lbnRQYXJhbWV0ZXJzWydUSU1FWk9ORSddLCBtZXRhZGF0YUZpZWxkLnNjYWxlKS50b1NmRGF0ZSgpO1xuICAgIGJyZWFrO1xuICBjYXNlICd0aW1lc3RhbXBfbnR6JzpcbiAgICB2YWx1ZSA9IGNvbnZlcnRUaW1lc3RhbXBOdHpTdHJpbmcoY29sdW1uVmFsdWUsIGZvcm1hdE50eiwgbW9tZW50LnR6LnpvbmUoJ1VUQycpLCBtZXRhZGF0YUZpZWxkLnNjYWxlKS50b1NmRGF0ZSgpO1xuICAgIGJyZWFrO1xuICBjYXNlICd0aW1lc3RhbXBfdHonOlxuICAgIHZhbHVlID0gY29udmVydFRpbWVzdGFtcFR6U3RyaW5nKGNvbHVtblZhbHVlLCBmb3JtYXRUeiwgY29udGV4dC5zdGF0ZW1lbnRQYXJhbWV0ZXJzWydUSU1FWk9ORSddLCBtZXRhZGF0YUZpZWxkLnNjYWxlKS50b1NmRGF0ZSgpO1xuICAgIGJyZWFrO1xuICBjYXNlICdkYXRlJzoge1xuICAgIGNvbnRleHQuZm9ybWF0ID0gY29udGV4dC5zdGF0ZW1lbnRQYXJhbWV0ZXJzWydEQVRFX09VVFBVVF9GT1JNQVQnXTtcbiAgICB2YWx1ZSA9IGNvbnZlcnREYXRlU3RyaW5nKGNvbHVtblZhbHVlLCBjb250ZXh0LmZvcm1hdCApO1xuICAgIGJyZWFrO1xuICB9XG4gIGNhc2UgJ3RpbWUnOlxuICAgIGNvbnRleHQuZm9ybWF0ID0gY29udGV4dC5zdGF0ZW1lbnRQYXJhbWV0ZXJzWydUSU1FX09VVFBVVF9GT1JNQVQnXTtcbiAgICB2YWx1ZSA9IGNvbnZlcnRUaW1lU3RyaW5nKGNvbHVtblZhbHVlLCBjb250ZXh0LmZvcm1hdCwgbW9tZW50LnR6LnpvbmUoJ1VUQycpLCBtZXRhZGF0YUZpZWxkLnNjYWxlKS50b1NmVGltZSgpO1xuICAgIGJyZWFrO1xuICBjYXNlICdiaW5hcnknOlxuICAgIGNvbnRleHQuZm9ybWF0ID0gY29udGV4dC5zdGF0ZW1lbnRQYXJhbWV0ZXJzWydCSU5BUllfT1VUUFVUX0ZPUk1BVCddO1xuICAgIHZhbHVlID0gY29udmVydFJhd0JpbmFyeShjb2x1bW5WYWx1ZSwgdGhpcywgY29udGV4dCkudG9KU09OKCkuZGF0YTtcbiAgICBicmVhaztcbiAgY2FzZSAnb2JqZWN0Jzoge1xuICAgIGNvbnN0IGludGVybmFsQ29udGV4dCA9IHtcbiAgICAgIGNvbnZlcnQ6IGNvbnZlcnRSYXdTdHJ1Y3R1cmVkVHlwZShjb252ZXJ0SnNvbk9iamVjdCksXG4gICAgICB0b1ZhbHVlOiBub29wLFxuICAgICAgdG9TdHJpbmc6IHRvU3RyaW5nLFxuICAgICAgZm9ybWF0OiB0b1N0cmluZ0Zyb21SYXdWYWx1ZSxcbiAgICAgIHJlc3VsdFZlcnNpb246IGNvbnRleHQucmVzdWx0VmVyc2lvbixcbiAgICAgIHN0YXRlbWVudFBhcmFtZXRlcnM6IGNvbnRleHQuc3RhdGVtZW50UGFyYW1ldGVycyxcbiAgICAgIGZpZWxkc01ldGFkYXRhOiBtZXRhZGF0YUZpZWxkLmZpZWxkc1xuICAgIH07XG4gICAgdmFsdWUgPSBjb252ZXJ0SnNvbk9iamVjdChjb2x1bW5WYWx1ZSwgaW50ZXJuYWxDb250ZXh0KTtcbiAgICBicmVhaztcbiAgfVxuICBjYXNlICdhcnJheSc6IHtcbiAgICBjb25zdCBpbnRlcm5hbEFycmF5Q29udGV4dCA9IHtcbiAgICAgIGNvbnZlcnQ6IGNvbnZlcnRSYXdTdHJ1Y3R1cmVkVHlwZShjb252ZXJ0SnNvbkFycmF5KSxcbiAgICAgIHRvVmFsdWU6IG5vb3AsXG4gICAgICB0b1N0cmluZzogdG9TdHJpbmcsXG4gICAgICBmb3JtYXQ6IHRvU3RyaW5nRnJvbVJhd1ZhbHVlLFxuICAgICAgcmVzdWx0VmVyc2lvbjogY29udGV4dC5yZXN1bHRWZXJzaW9uLFxuICAgICAgc3RhdGVtZW50UGFyYW1ldGVyczogY29udGV4dC5zdGF0ZW1lbnRQYXJhbWV0ZXJzLFxuICAgICAgZmllbGRzTWV0YWRhdGE6IG1ldGFkYXRhRmllbGQuZmllbGRzXG4gICAgfTtcbiAgICB2YWx1ZSA9IGNvbnZlcnRKc29uQXJyYXkoY29sdW1uVmFsdWUsIGludGVybmFsQXJyYXlDb250ZXh0KTtcbiAgICBicmVhaztcbiAgfVxuICBjYXNlICdtYXAnOiB7XG4gICAgY29uc3QgaW50ZXJuYWxNYXBDb250ZXh0ID0ge1xuICAgICAgY29udmVydDogY29udmVydFJhd1N0cnVjdHVyZWRUeXBlKGNvbnZlcnRKc29uTWFwKSxcbiAgICAgIHRvVmFsdWU6IG5vb3AsXG4gICAgICB0b1N0cmluZzogdG9TdHJpbmcsXG4gICAgICBmb3JtYXQ6IHRvU3RyaW5nRnJvbVJhd1ZhbHVlLFxuICAgICAgcmVzdWx0VmVyc2lvbjogY29udGV4dC5yZXN1bHRWZXJzaW9uLFxuICAgICAgc3RhdGVtZW50UGFyYW1ldGVyczogY29udGV4dC5zdGF0ZW1lbnRQYXJhbWV0ZXJzLFxuICAgICAgZmllbGRzTWV0YWRhdGE6IG1ldGFkYXRhRmllbGQuZmllbGRzXG4gICAgfTtcbiAgICB2YWx1ZSA9IGNvbnZlcnRKc29uTWFwKGNvbHVtblZhbHVlLCBpbnRlcm5hbE1hcENvbnRleHQpO1xuICAgIGJyZWFrO1xuICB9XG4gIGRlZmF1bHQ6XG4gICAgTG9nZ2VyLmdldEluc3RhbmNlKCkuaW5mbyhgQ29sdW1uIHR5cGUgbm90IHN1cHBvcnRlZDogJHtjb250ZXh0LmZpZWxkc01ldGFkYXRhLnR5cGV9YCk7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBDb2x1bW4gdHlwZSBub3Qgc3VwcG9ydGVkOiAke2NvbnRleHQuZmllbGRzTWV0YWRhdGEudHlwZX1gKTtcbiAgfVxuICByZXR1cm4gdmFsdWU7XG59XG5cbmNvbnN0IGNvbnZlcnRUaW1lc3RhbXBUelN0cmluZyA9IGZ1bmN0aW9uIChzdHJpbmdWYWx1ZSwgZm9ybWF0U3FsLCB0aW1lem9uZSwgc2NhbGUpIHtcbiAgY29uc3QgZm9ybWF0TW9tZW50ID0gZGF0ZVRpbWVGb3JtYXRDb252ZXJ0ZXIuY29udmVydFNub3dmbGFrZUZvcm1hdFRvTW9tZW50Rm9ybWF0KGZvcm1hdFNxbCwgc2NhbGUpO1xuICBjb25zdCBlcG9jaFNlY29uZHMgPSBtb21lbnRUaW1lem9uZShzdHJpbmdWYWx1ZSwgZm9ybWF0TW9tZW50KS51bml4KCk7XG4gIHJldHVybiBuZXcgU2ZUaW1lc3RhbXAoZXBvY2hTZWNvbmRzLCAwLCBzY2FsZSwgdGltZXpvbmUsIGZvcm1hdFNxbCk7XG59O1xuXG5jb25zdCBjb252ZXJ0VGltZXN0YW1wTnR6U3RyaW5nID0gZnVuY3Rpb24gKHN0cmluZ1ZhbHVlLCBmb3JtYXRTcWwsIHRpbWV6b25lLCBzY2FsZSkge1xuICBjb25zdCBmb3JtYXRNb21lbnQgPSBkYXRlVGltZUZvcm1hdENvbnZlcnRlci5jb252ZXJ0U25vd2ZsYWtlRm9ybWF0VG9Nb21lbnRGb3JtYXQoZm9ybWF0U3FsLCBzY2FsZSk7XG4gIGNvbnN0IGVwb2NoU2Vjb25kcyA9IG1vbWVudFRpbWV6b25lLnV0YyhzdHJpbmdWYWx1ZSwgZm9ybWF0TW9tZW50KS51bml4KCk7XG4gIHJldHVybiBuZXcgU2ZUaW1lc3RhbXAoZXBvY2hTZWNvbmRzLCAwLCBzY2FsZSwgdGltZXpvbmUsIGZvcm1hdFNxbCk7XG59O1xuXG5jb25zdCBjb252ZXJ0RGF0ZVN0cmluZyA9IGZ1bmN0aW9uIChzdHJpbmdWYWx1ZSwgZm9ybWF0U3FsKSB7XG4gIGNvbnN0IGZvcm1hdE1vbWVudCA9IGRhdGVUaW1lRm9ybWF0Q29udmVydGVyLmNvbnZlcnRTbm93Zmxha2VGb3JtYXRUb01vbWVudEZvcm1hdChmb3JtYXRTcWwsIDApO1xuICBjb25zdCBlcG9jaFNlY29uZHMgPSBtb21lbnRUaW1lem9uZS51dGMoc3RyaW5nVmFsdWUsIGZvcm1hdE1vbWVudCkudW5peCgpO1xuICBjb25zdCBkYXRlID0gbmV3IFNmVGltZXN0YW1wKFxuICAgIGVwb2NoU2Vjb25kcywgLy8gY29udmVydCB0byBzZWNvbmRzXG4gICAgMCwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBubyBuYW5vIHNlY29uZHNcbiAgICAwLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5vIHNjYWxlIHJlcXVpcmVkXG4gICAgJ1VUQycsICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB1c2UgdXRjIGFzIHRoZSB0aW1lem9uZVxuICAgIGNvbnRleHQuZm9ybWF0KTtcbiAgZGF0ZS5fdmFsdWVBc1N0cmluZyA9IHN0cmluZ1ZhbHVlO1xuICByZXR1cm4gZGF0ZS50b1NmRGF0ZSgpO1xufTtcblxuXG5jb25zdCBjb252ZXJ0VGltZVN0cmluZyA9IGZ1bmN0aW9uIChzdHJpbmdWYWx1ZSwgZm9ybWF0U3FsLCB0aW1lem9uZSwgc2NhbGUpIHtcbiAgY29uc3QgZm9ybWF0TW9tZW50ID0gZGF0ZVRpbWVGb3JtYXRDb252ZXJ0ZXIuY29udmVydFNub3dmbGFrZUZvcm1hdFRvTW9tZW50Rm9ybWF0KGZvcm1hdFNxbCwgc2NhbGUpO1xuICBjb25zdCBtb21lbnQgPSBtb21lbnRUaW1lem9uZShzdHJpbmdWYWx1ZSwgZm9ybWF0TW9tZW50KTtcbiAgY29uc3QgZXBvY2hTZWNvbmRzID0gbW9tZW50LmhvdXJzKCkgKiAzNjAwICsgbW9tZW50Lm1pbnV0ZXMoKSAqIDYwICsgbW9tZW50LnNlY29uZHMoKTtcbiAgY29uc3QgdGltZSA9ICBuZXcgU2ZUaW1lc3RhbXAoZXBvY2hTZWNvbmRzLCAwLCBzY2FsZSwgdGltZXpvbmUsIGZvcm1hdFNxbCk7XG4gIHRpbWUuX3ZhbHVlQXNTdHJpbmcgPSBzdHJpbmdWYWx1ZTtcbiAgcmV0dXJuIHRpbWU7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGEgcmF3IGNvbHVtbiB2YWx1ZSBvZiB0eXBlIERhdGUgdG8gYSBTbm93Zmxha2UgRGF0ZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcmF3Q29sdW1uVmFsdWVcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb2x1bW5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb250ZXh0XG4gKlxuICogQHJldHVybnMge0RhdGV9XG4gKi9cbmZ1bmN0aW9uIGNvbnZlcnRSYXdEYXRlKHJhd0NvbHVtblZhbHVlLCBjb2x1bW4sIGNvbnRleHQpIHtcbiAgcmV0dXJuIG5ldyBTZlRpbWVzdGFtcChcbiAgICBOdW1iZXIocmF3Q29sdW1uVmFsdWUpICogODY0MDAsIC8vIGNvbnZlcnQgdG8gc2Vjb25kc1xuICAgIDAsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbm8gbmFubyBzZWNvbmRzXG4gICAgMCwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBubyBzY2FsZSByZXF1aXJlZFxuICAgICdVVEMnLCAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdXNlIHV0YyBhcyB0aGUgdGltZXpvbmVcbiAgICBjb250ZXh0LmZvcm1hdCkudG9TZkRhdGUoKTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhIHJhdyBjb2x1bW4gdmFsdWUgb2YgdHlwZSBUaW1lIHRvIGEgU25vd2ZsYWtlIFRpbWUuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHJhd0NvbHVtblZhbHVlXG4gKiBAcGFyYW0ge09iamVjdH0gY29sdW1uXG4gKiBAcGFyYW0ge09iamVjdH0gY29udGV4dFxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9XG4gKi9cbmZ1bmN0aW9uIGNvbnZlcnRSYXdUaW1lKHJhd0NvbHVtblZhbHVlLCBjb2x1bW4sIGNvbnRleHQpIHtcbiAgY29uc3QgY29sdW1uU2NhbGUgPSBjb2x1bW4uZ2V0U2NhbGUoKTtcblxuICAvLyB0aGUgdmFsdWVzIG1pZ2h0IGJlIGJpZyBzbyB1c2UgQmlnTnVtYmVyIHRvIGRvIGFyaXRobWV0aWNcbiAgY29uc3QgdmFsRnJhY1NlY3NCaWcgPVxuICAgIG5ldyBCaWdOdW1iZXIocmF3Q29sdW1uVmFsdWUpLnRpbWVzKE1hdGgucG93KDEwLCBjb2x1bW5TY2FsZSkpO1xuXG4gIHJldHVybiBjb252ZXJ0UmF3VGltZXN0YW1wSGVscGVyKFxuICAgIHZhbEZyYWNTZWNzQmlnLFxuICAgIGNvbHVtblNjYWxlLFxuICAgICdVVEMnLFxuICAgIGNvbnRleHQuZm9ybWF0KS50b1NmVGltZSgpO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGEgcmF3IGNvbHVtbiB2YWx1ZSBvZiB0eXBlIFRJTUVTVEFNUF9MVFogdG8gYSBTbm93Zmxha2UgRGF0ZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcmF3Q29sdW1uVmFsdWVcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb2x1bW5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb250ZXh0XG4gKlxuICogQHJldHVybnMge0RhdGV9XG4gKi9cbmZ1bmN0aW9uIGNvbnZlcnRSYXdUaW1lc3RhbXBMdHoocmF3Q29sdW1uVmFsdWUsIGNvbHVtbiwgY29udGV4dCkge1xuICBjb25zdCBjb2x1bW5TY2FsZSA9IGNvbHVtbi5nZXRTY2FsZSgpO1xuXG4gIC8vIHRoZSB2YWx1ZXMgbWlnaHQgYmUgYmlnIHNvIHVzZSBCaWdOdW1iZXIgdG8gZG8gYXJpdGhtZXRpY1xuICBjb25zdCB2YWxGcmFjU2Vjc0JpZyA9XG4gICAgbmV3IEJpZ051bWJlcihyYXdDb2x1bW5WYWx1ZSkudGltZXMoTWF0aC5wb3coMTAsIGNvbHVtblNjYWxlKSk7XG5cbiAgLy8gY3JlYXRlIGEgbmV3IHNub3dmbGFrZSBkYXRlXG4gIHJldHVybiBjb252ZXJ0UmF3VGltZXN0YW1wSGVscGVyKFxuICAgIHZhbEZyYWNTZWNzQmlnLFxuICAgIGNvbHVtblNjYWxlLFxuICAgIGNvbnRleHQuc3RhdGVtZW50UGFyYW1ldGVyc1snVElNRVpPTkUnXSxcbiAgICBjb250ZXh0LmZvcm1hdCkudG9TZkRhdGUoKTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhIHJhdyBjb2x1bW4gdmFsdWUgb2YgdHlwZSBUSU1FU1RBTVBfTlRaIHRvIGEgU25vd2ZsYWtlIERhdGUuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHJhd0NvbHVtblZhbHVlXG4gKiBAcGFyYW0ge09iamVjdH0gY29sdW1uXG4gKiBAcGFyYW0ge09iamVjdH0gY29udGV4dFxuICpcbiAqIEByZXR1cm5zIHtEYXRlfVxuICovXG5mdW5jdGlvbiBjb252ZXJ0UmF3VGltZXN0YW1wTnR6KHJhd0NvbHVtblZhbHVlLCBjb2x1bW4sIGNvbnRleHQpIHtcbiAgY29uc3QgY29sdW1uU2NhbGUgPSBjb2x1bW4uZ2V0U2NhbGUoKTtcblxuICAvLyB0aGUgdmFsdWVzIG1pZ2h0IGJlIGJpZyBzbyB1c2UgQmlnTnVtYmVyIHRvIGRvIGFyaXRobWV0aWNcbiAgY29uc3QgdmFsRnJhY1NlY3NCaWcgPVxuICAgIG5ldyBCaWdOdW1iZXIocmF3Q29sdW1uVmFsdWUpLnRpbWVzKE1hdGgucG93KDEwLCBjb2x1bW5TY2FsZSkpO1xuXG4gIC8vIGNyZWF0ZSBhIG5ldyBzbm93Zmxha2UgZGF0ZVxuICByZXR1cm4gY29udmVydFJhd1RpbWVzdGFtcEhlbHBlcihcbiAgICB2YWxGcmFjU2Vjc0JpZyxcbiAgICBjb2x1bW5TY2FsZSxcbiAgICAnVVRDJywgICAgIC8vIGl0J3MgX250eiwgc28gdXNlIFVUQyBmb3IgdGltZXpvbmVcbiAgICBjb250ZXh0LmZvcm1hdCkudG9TZkRhdGUoKTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhIHJhdyBjb2x1bW4gdmFsdWUgb2YgdHlwZSBUSU1FU1RBTVBfVFogdG8gYSBTbm93Zmxha2UgRGF0ZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcmF3Q29sdW1uVmFsdWVcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb2x1bW5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb250ZXh0XG4gKlxuICogQHJldHVybnMge0RhdGV9XG4gKi9cbmZ1bmN0aW9uIGNvbnZlcnRSYXdUaW1lc3RhbXBUeihyYXdDb2x1bW5WYWx1ZSwgY29sdW1uLCBjb250ZXh0KSB7XG4gIGxldCB2YWxGcmFjU2Vjc0JpZztcbiAgbGV0IHZhbEZyYWNTZWNzV2l0aFR6QmlnO1xuICBsZXQgdGltZXpvbmVCaWc7XG4gIGxldCB0aW1lem9uZTtcbiAgbGV0IHRpbWVzdGFtcEFuZFRaSW5kZXg7XG5cbiAgLy8gY29tcHV0ZSB0aGUgc2NhbGUgZmFjdG9yXG4gIGNvbnN0IGNvbHVtblNjYWxlID0gY29sdW1uLmdldFNjYWxlKCk7XG4gIGNvbnN0IHNjYWxlRmFjdG9yID0gTWF0aC5wb3coMTAsIGNvbHVtblNjYWxlKTtcblxuICBjb25zdCByZXN1bHRWZXJzaW9uID0gY29udGV4dC5yZXN1bHRWZXJzaW9uO1xuICBpZiAocmVzdWx0VmVyc2lvbiA9PT0gJzAnIHx8IHJlc3VsdFZlcnNpb24gPT09IHVuZGVmaW5lZCkge1xuICAgIC8vIHRoZSB2YWx1ZXMgbWlnaHQgYmUgYmlnIHNvIHVzZSBCaWdOdW1iZXIgdG8gZG8gYXJpdGhtZXRpY1xuICAgIHZhbEZyYWNTZWNzQmlnID1cbiAgICAgIG5ldyBCaWdOdW1iZXIocmF3Q29sdW1uVmFsdWUpLnRpbWVzKHNjYWxlRmFjdG9yKTtcblxuICAgIC8vIGZvciBfdHosIHRoZSB0aW1lem9uZSBpcyBiYWtlZCBpbnRvIHRoZSB2YWx1ZVxuICAgIHZhbEZyYWNTZWNzV2l0aFR6QmlnID0gdmFsRnJhY1NlY3NCaWc7XG5cbiAgICAvLyBleHRyYWN0IGV2ZXJ5dGhpbmcgYnV0IHRoZSBsb3dlc3QgMTQgYml0cyB0byBnZXQgdGhlIGZyYWN0aW9uYWwgc2Vjb25kc1xuICAgIHZhbEZyYWNTZWNzQmlnID1cbiAgICAgIHZhbEZyYWNTZWNzV2l0aFR6QmlnLmRpdmlkZWRCeSgxNjM4NCkuaW50ZWdlclZhbHVlKEJpZ051bWJlci5ST1VORF9GTE9PUik7XG5cbiAgICAvLyBleHRyYWN0IHRoZSBsb3dlc3QgMTQgYml0cyB0byBnZXQgdGhlIHRpbWV6b25lXG4gICAgaWYgKHZhbEZyYWNTZWNzV2l0aFR6QmlnLmlzR3JlYXRlclRoYW5PckVxdWFsVG8oMCkpIHtcbiAgICAgIHRpbWV6b25lQmlnID0gdmFsRnJhY1NlY3NXaXRoVHpCaWcubW9kdWxvKDE2Mzg0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGltZXpvbmVCaWcgPVxuICAgICAgICB2YWxGcmFjU2Vjc1dpdGhUekJpZy5tb2R1bG8oMTYzODQpLnBsdXMoMTYzODQpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBzcGxpdCB0aGUgdmFsdWUgaW50byBudW1iZXIgb2Ygc2Vjb25kcyBhbmQgdGltZXpvbmUgaW5kZXhcbiAgICB0aW1lc3RhbXBBbmRUWkluZGV4ID0gcmF3Q29sdW1uVmFsdWUuc3BsaXQoJyAnKTtcblxuICAgIC8vIHRoZSB2YWx1ZXMgbWlnaHQgYmUgYmlnIHNvIHVzZSBCaWdOdW1iZXIgdG8gZG8gYXJpdGhtZXRpY1xuICAgIHZhbEZyYWNTZWNzQmlnID1cbiAgICAgIG5ldyBCaWdOdW1iZXIodGltZXN0YW1wQW5kVFpJbmRleFswXSkudGltZXMoc2NhbGVGYWN0b3IpO1xuXG4gICAgdGltZXpvbmVCaWcgPSBuZXcgQmlnTnVtYmVyKHRpbWVzdGFtcEFuZFRaSW5kZXhbMV0pO1xuICB9XG5cbiAgdGltZXpvbmUgPSB0aW1lem9uZUJpZy50b051bWJlcigpO1xuXG4gIC8vIGFzc2VydCB0aGF0IHRpbWV6b25lIGlzIHZhbGlkXG4gIEVycm9ycy5hc3NlcnRJbnRlcm5hbCh0aW1lem9uZSA+PSAwICYmIHRpbWV6b25lIDw9IDI4ODApO1xuXG4gIC8vIHN1YnRyYWN0IDI0IGhvdXJzIGZyb20gdGhlIHRpbWV6b25lIHRvIG1hcCBbMCwgNDhdIHRvXG4gIC8vIFstMjQsIDI0XSwgYW5kIGNvbnZlcnQgdGhlIHJlc3VsdCB0byBhIG51bWJlclxuICB0aW1lem9uZSA9IHRpbWV6b25lIC0gMTQ0MDtcblxuICAvLyBjcmVhdGUgYSBuZXcgc25vd2ZsYWtlIGRhdGVcbiAgcmV0dXJuIGNvbnZlcnRSYXdUaW1lc3RhbXBIZWxwZXIoXG4gICAgdmFsRnJhY1NlY3NCaWcsXG4gICAgY29sdW1uU2NhbGUsXG4gICAgdGltZXpvbmUsXG4gICAgY29udGV4dC5mb3JtYXQpLnRvU2ZEYXRlKCk7XG59XG5cbi8qKlxuICogSGVscGVyIGZ1bmN0aW9uIGZvciB0aGUgY29udmVydFJhd1RpbWVzdGFtcCooKSBmdW5jdGlvbnMuXG4gKiBSZXR1cm5zIGFuIGluc3RhbmNlIG9mIFNmVGltZXN0YW1wLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBlcG9jaEZyYWNTZWNzQmlnXG4gKiBAcGFyYW0ge051bWJlcn0gc2NhbGVcbiAqIEBwYXJhbSB7U3RyaW5nIHwgTnVtYmVyfSB0aW1lem9uZVxuICogQHBhcmFtIHtTdHJpbmd9IGZvcm1hdFxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9XG4gKi9cbmZ1bmN0aW9uIGNvbnZlcnRSYXdUaW1lc3RhbXBIZWxwZXIoXG4gIGVwb2NoRnJhY1NlY3NCaWcsXG4gIHNjYWxlLFxuICB0aW1lem9uZSxcbiAgZm9ybWF0KSB7XG4gIC8vIGNvbXB1dGUgdGhlIHNjYWxlIGZhY3RvclxuICBjb25zdCBzY2FsZUZhY3RvciA9IE1hdGgucG93KDEwLCBzY2FsZSk7XG5cbiAgLy8gc3BsaXQgdGhlIHZhbHVlIGludG8gZXBvY2ggc2Vjb25kcyArIG5hbm9zZWNvbmRzOyBmb3IgZXhhbXBsZSxcbiAgLy8gMTM2NTE0ODkyMy4xMjM0NTY3ODkgd2lsbCBiZSBzcGxpdCBpbnRvIDEzNjUxNDg5MjMgKGVwb2NoIHNlY29uZHMpXG4gIC8vIGFuZCAxMjM0NTY3ODkgKG5hbm8gc2Vjb25kcylcbiAgY29uc3QgdmFsU2VjQmlnID0gZXBvY2hGcmFjU2Vjc0JpZy5kaXZpZGVkQnkoc2NhbGVGYWN0b3IpLmludGVnZXJWYWx1ZShCaWdOdW1iZXIuUk9VTkRfRkxPT1IpO1xuICBjb25zdCBmcmFjdGlvbnNCaWcgPSBlcG9jaEZyYWNTZWNzQmlnLm1pbnVzKHZhbFNlY0JpZy50aW1lcyhzY2FsZUZhY3RvcikpO1xuICBjb25zdCB2YWxTZWNOYW5vQmlnID0gZnJhY3Rpb25zQmlnLnRpbWVzKE1hdGgucG93KDEwLCA5IC0gc2NhbGUpKTtcblxuICAvLyBjcmVhdGUgYSBuZXcgc25vd2ZsYWtlIGRhdGUgZnJvbSB0aGUgaW5mb3JtYXRpb25cbiAgcmV0dXJuIG5ldyBTZlRpbWVzdGFtcChcbiAgICB2YWxTZWNCaWcudG9OdW1iZXIoKSxcbiAgICB2YWxTZWNOYW5vQmlnLnRvTnVtYmVyKCksXG4gICAgc2NhbGUsXG4gICAgdGltZXpvbmUsXG4gICAgZm9ybWF0KTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhIHJhdyBjb2x1bW4gdmFsdWUgb2YgdHlwZSBWYXJpYW50IHRvIGEgSmF2YVNjcmlwdCB2YWx1ZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcmF3Q29sdW1uVmFsdWVcbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0IHwgQXJyYXl9XG4gKi9cbmZ1bmN0aW9uIGNvbnZlcnRSYXdWYXJpYW50KHJhd0NvbHVtblZhbHVlKSB7XG4gIC8vIGlmIHRoZSBpbnB1dCBpcyBhIG5vbi1lbXB0eSBzdHJpbmcsIGNvbnZlcnQgaXQgdG8gYSBqc29uIG9iamVjdFxuICBpZiAoVXRpbC5zdHJpbmcuaXNOb3ROdWxsT3JFbXB0eShyYXdDb2x1bW5WYWx1ZSkpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIEdsb2JhbENvbmZpZy5qc29uQ29sdW1uVmFyaWFudFBhcnNlcihyYXdDb2x1bW5WYWx1ZSk7XG4gICAgfSBjYXRjaCAoanNvblBhcnNlRXJyb3IpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBHbG9iYWxDb25maWcueG1sQ29sdW1uVmFyaWFudFBhcnNlcihyYXdDb2x1bW5WYWx1ZSk7XG4gICAgICB9IGNhdGNoICh4bWxQYXJzZUVycm9yKSB7XG4gICAgICAgIExvZ2dlci5nZXRJbnN0YW5jZSgpLmRlYnVnKCdWYXJpYW50IGNhbm5vdCBiZSBwYXJzZWQgbmVpdGhlciBhcyBKU09OOiAlcyBub3IgYXMgWE1MOiAlcycsIGpzb25QYXJzZUVycm9yLm1lc3NhZ2UsIHhtbFBhcnNlRXJyb3IubWVzc2FnZSk7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcnMuVmFyaWFudFBhcnNlRXJyb3IoanNvblBhcnNlRXJyb3IsIHhtbFBhcnNlRXJyb3IpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIENvbnZlcnRzIGEgcmF3IGNvbHVtbiB2YWx1ZSBvZiB0eXBlIEJpbmFyeSB0byBhIEJ1ZmZlci5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcmF3Q29sdW1uVmFsdWVcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb2x1bW5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb250ZXh0XG4gKlxuICogQHJldHVybnMge0J1ZmZlcn1cbiAqL1xuZnVuY3Rpb24gY29udmVydFJhd0JpbmFyeShyYXdDb2x1bW5WYWx1ZSwgY29sdW1uLCBjb250ZXh0KSB7XG4gIC8vIEVuc3VyZSB0aGUgZm9ybWF0IGlzIHZhbGlkLlxuICBjb25zdCBmb3JtYXQgPSBjb250ZXh0LmZvcm1hdC50b1VwcGVyQ2FzZSgpO1xuICBFcnJvcnMuYXNzZXJ0SW50ZXJuYWwoZm9ybWF0ID09PSAnSEVYJyB8fCBmb3JtYXQgPT09ICdCQVNFNjQnKTtcblxuICAvLyBEZWNvZGUgaGV4IHN0cmluZyBzZW50IGJ5IEdTLlxuICBjb25zdCBidWZmZXIgPSBCdWZmZXIuZnJvbShyYXdDb2x1bW5WYWx1ZSwgJ0hFWCcpO1xuXG4gIGlmIChmb3JtYXQgPT09ICdIRVgnKSB7XG4gICAgYnVmZmVyLnRvU3RyaW5nU2YgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBUaGUgcmF3IHZhbHVlIGlzIGFscmVhZHkgYW4gdXBwZXJjYXNlIGhleCBzdHJpbmcsIHNvIGp1c3QgcmV0dXJuIGl0LlxuICAgICAgLy8gTm90ZSB0aGF0IGJ1ZmZlci50b1N0cmluZyhcIkhFWFwiKSByZXR1cm5zIGEgbG93ZXJjYXNlIGhleCBzdHJpbmcsIGJ1dCB3ZVxuICAgICAgLy8gd2FudCB1cHBlciBjYXNlLlxuICAgICAgcmV0dXJuIHJhd0NvbHVtblZhbHVlO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgYnVmZmVyLnRvU3RyaW5nU2YgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy50b1N0cmluZygnQkFTRTY0Jyk7XG4gICAgfTtcbiAgfVxuXG4gIGJ1ZmZlci5nZXRGb3JtYXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZvcm1hdDtcbiAgfTtcblxuICByZXR1cm4gYnVmZmVyO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGlucHV0IHZhbHVlIGFzIGlzLlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAqXG4gKiBAcmV0dXJucyB7Kn1cbiAqL1xuZnVuY3Rpb24gbm9vcCh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWU7XG59XG5cbi8qKlxuICogVGhlIHRvVmFsdWUoKSBmdW5jdGlvbiBmb3IgYSBjb2x1bW4gb2YgdHlwZSBOdW1iZXIuXG4gKlxuICogQHBhcmFtIHsqfSBjb2x1bW5WYWx1ZVxuICpcbiAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gKi9cbmZ1bmN0aW9uIHRvVmFsdWVGcm9tTnVtYmVyKGNvbHVtblZhbHVlKSB7XG4gIHJldHVybiBjb2x1bW5WYWx1ZSA/IGNvbHVtblZhbHVlLnByb2Nlc3NlZCA6IGNvbHVtblZhbHVlO1xufVxuXG4vKipcbiAqIFRoZSB0b1ZhbHVlKCkgZnVuY3Rpb24gZm9yIGEgY29sdW1uIG9mIHR5cGUgVGltZS5cbiAqXG4gKiBAcGFyYW0geyp9IGNvbHVtblZhbHVlXG4gKlxuICogQHJldHVybnMge1N0cmluZ31cbiAqL1xuZnVuY3Rpb24gdG9WYWx1ZUZyb21UaW1lKGNvbHVtblZhbHVlKSB7XG4gIC8vIHRoZXJlJ3Mgbm8gbmF0aXZlIGphdmFzY3JpcHQgdHlwZSB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlcHJlc2VudCB0aW1lLCBzb1xuICAvLyBqdXN0IGNvbnZlcnQgdG8gc3RyaW5nXG4gIHJldHVybiB0b1N0cmluZ0Zyb21UaW1lKGNvbHVtblZhbHVlKTtcbn1cblxuLyoqXG4gKiBUaGUgdG9TdHJpbmcoKSBmdW5jdGlvbiBmb3IgYSBjb2x1bW4gb2YgdHlwZSBOdW1iZXIuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGNvbHVtblZhbHVlXG4gKlxuICogQHJldHVybnMge1N0cmluZ31cbiAqL1xuZnVuY3Rpb24gdG9TdHJpbmdGcm9tTnVtYmVyKGNvbHVtblZhbHVlKSB7XG4gIHJldHVybiAoY29sdW1uVmFsdWUgIT09IG51bGwpID8gY29sdW1uVmFsdWUucmF3IDogRGF0YVR5cGVzLmdldE51bGxWYWx1ZSgpO1xufVxuXG4vKipcbiAqIFRoZSB0b1N0cmluZygpIGZ1bmN0aW9uIGZvciBhIGNvbHVtbiBvZiB0eXBlIEJvb2xlYW4uXG4gKlxuICogQHBhcmFtIHtCb29sZWFufSBjb2x1bW5WYWx1ZVxuICpcbiAqIEByZXR1cm5zIHtTdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIHRvU3RyaW5nRnJvbUJvb2xlYW4oY29sdW1uVmFsdWUpIHtcbiAgcmV0dXJuIChjb2x1bW5WYWx1ZSAhPT0gbnVsbCkgPyBTdHJpbmcoY29sdW1uVmFsdWUpLnRvVXBwZXJDYXNlKCkgOlxuICAgIERhdGFUeXBlcy5nZXROdWxsVmFsdWUoKTtcbn1cblxuLyoqXG4gKiBUaGUgdG9TdHJpbmcoKSBmdW5jdGlvbiBmb3IgYSBjb2x1bW4gb2YgdHlwZSBEYXRlLlxuICpcbiAqIEBwYXJhbSB7RGF0ZX0gY29sdW1uVmFsdWVcbiAqXG4gKiBAcmV0dXJucyB7U3RyaW5nfVxuICovXG5mdW5jdGlvbiB0b1N0cmluZ0Zyb21EYXRlKGNvbHVtblZhbHVlKSB7XG4gIHJldHVybiAoY29sdW1uVmFsdWUgIT09IG51bGwpID8gY29sdW1uVmFsdWUudG9KU09OKCkgOiBEYXRhVHlwZXMuZ2V0TnVsbFZhbHVlKCk7XG59XG5cbi8qKlxuICogVGhlIHRvU3RyaW5nKCkgZnVuY3Rpb24gZm9yIGEgY29sdW1uIG9mIHR5cGUgVGltZS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29sdW1uVmFsdWVcbiAqXG4gKiBAcmV0dXJucyB7U3RyaW5nfVxuICovXG5mdW5jdGlvbiB0b1N0cmluZ0Zyb21UaW1lKGNvbHVtblZhbHVlKSB7XG4gIHJldHVybiAoY29sdW1uVmFsdWUgIT09IG51bGwpID8gY29sdW1uVmFsdWUudG9KU09OKCkgOiBEYXRhVHlwZXMuZ2V0TnVsbFZhbHVlKCk7XG59XG5cbi8qKlxuICogVGhlIHRvU3RyaW5nKCkgZnVuY3Rpb24gZm9yIGEgY29sdW1uIG9mIHR5cGUgVGltZXN0YW1wLlxuICpcbiAqIEBwYXJhbSB7RGF0ZX0gY29sdW1uVmFsdWVcbiAqXG4gKiBAcmV0dXJucyB7U3RyaW5nfVxuICovXG5mdW5jdGlvbiB0b1N0cmluZ0Zyb21UaW1lc3RhbXAoY29sdW1uVmFsdWUpIHtcbiAgcmV0dXJuIChjb2x1bW5WYWx1ZSAhPT0gbnVsbCkgPyBjb2x1bW5WYWx1ZS50b0pTT04oKSA6IERhdGFUeXBlcy5nZXROdWxsVmFsdWUoKTtcbn1cblxuLyoqXG4gKiBUaGUgdG9TdHJpbmcoKSBmdW5jdGlvbiBmb3IgYSBjb2x1bW4gb2YgdHlwZSBWYXJpYW50LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb2x1bW5WYWx1ZVxuICpcbiAqIEByZXR1cm5zIHtTdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIHRvU3RyaW5nRnJvbVJhd1ZhbHVlKGNvbHVtblZhbHVlKSB7XG4gIHJldHVybiAoY29sdW1uVmFsdWUgIT09IG51bGwpID8gSlNPTi5zdHJpbmdpZnkoY29sdW1uVmFsdWUpIDogRGF0YVR5cGVzLmdldE51bGxWYWx1ZSgpO1xufVxuXG4vKipcbiAqIFRoZSB0b1N0cmluZygpIGZ1bmN0aW9uIGZvciBhIGNvbHVtbiBvZiB0eXBlIFN0cmluZy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gY29sdW1uVmFsdWVcbiAqXG4gKiBAcmV0dXJucyB7U3RyaW5nfVxuICovXG5mdW5jdGlvbiB0b1N0cmluZ0Zyb21TdHJpbmcoY29sdW1uVmFsdWUpIHtcbiAgcmV0dXJuIChjb2x1bW5WYWx1ZSAhPT0gbnVsbCkgPyBjb2x1bW5WYWx1ZSA6IERhdGFUeXBlcy5nZXROdWxsVmFsdWUoKTtcbn1cblxuLyoqXG4gKiBUaGUgdG9TdHJpbmcoKSBmdW5jdGlvbiBmb3IgYSBjb2x1bW4gb2YgdHlwZSBCaW5hcnkuXG4gKlxuICogQHBhcmFtIHtCdWZmZXJ9IGNvbHVtblZhbHVlXG4gKlxuICogQHJldHVybnMge1N0cmluZ31cbiAqL1xuZnVuY3Rpb24gdG9TdHJpbmdGcm9tQmluYXJ5KGNvbHVtblZhbHVlKSB7XG4gIHJldHVybiAoY29sdW1uVmFsdWUgIT09IG51bGwpID8gY29sdW1uVmFsdWUudG9TdHJpbmdTZigpIDogRGF0YVR5cGVzLmdldE51bGxWYWx1ZSgpO1xufVxuXG4vKipcbiAqIEV4dHJhY3RzIHRoZSB2YWx1ZSBvZiBhIGNvbHVtbiBmcm9tIGEgZ2l2ZW4gcm93LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSByb3dcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb250ZXh0XG4gKiBAcGFyYW0ge0Jvb2xlYW59IGFzU3RyaW5nXG4gKlxuICogQHJldHVybnMgeyp9XG4gKi9cbmZ1bmN0aW9uIGV4dHJhY3RGcm9tUm93KHJvdywgY29udGV4dCwgYXNTdHJpbmcpIHtcbiAgY29uc3QgbWFwID0gcm93Ll9hcnJheVByb2Nlc3NlZENvbHVtbnM7XG4gIGNvbnN0IHZhbHVlcyA9IHJvdy52YWx1ZXM7XG5cbiAgLy8gZ2V0IHRoZSB2YWx1ZVxuICBjb25zdCBjb2x1bW5JbmRleCA9IHRoaXMuZ2V0SW5kZXgoKTtcbiAgbGV0IHJldCA9IHZhbHVlc1tjb2x1bW5JbmRleF07XG5cbiAgLy8gaWYgd2Ugd2FudCB0aGUgdmFsdWUgYXMgYSBzdHJpbmcsIGFuZCB0aGUgY29sdW1uIGlzIG9mIHR5cGUgdmFyaWFudCwgYW5kIHdlXG4gIC8vIGhhdmVuJ3QgYWxyZWFkeSBwcm9jZXNzZWQgdGhlIHZhbHVlIGJlZm9yZSwgd2UgZG9uJ3QgbmVlZCB0byBwcm9jZXNzIHRoZVxuICAvLyB2YWx1ZSwgc28gb25seSBwcm9jZXNzIGlmIG5vbmUgb2YgdGhlIGFmb3JlbWVudGlvbmVkIGNvbmRpdGlvbnMgYXJlIHRydWVcbiAgaWYgKCEoYXNTdHJpbmcgJiYgdGhpcy5pc1ZhcmlhbnQoKSAmJiAhbWFwW2NvbHVtbkluZGV4XSkpIHtcbiAgICAvLyBpZiB0aGUgY29sdW1uIHZhbHVlIGhhcyBub3QgYmVlbiBwcm9jZXNzZWQgeWV0LCBwcm9jZXNzIGl0LCBwdXQgaXQgYmFja1xuICAgIC8vIGluIHRoZSB2YWx1ZXMgYXJyYXksIGFuZCByZW1lbWJlciB0aGF0IHRoZSB2YWx1ZSBoYXMgYmVlbiBwcm9jZXNzZWRcbiAgICBpZiAoIW1hcFtjb2x1bW5JbmRleF0pIHtcbiAgICAgIGlmIChyZXQgIT09IG51bGwpIHtcbiAgICAgICAgcmV0ID0gdmFsdWVzW2NvbHVtbkluZGV4XSA9XG4gICAgICAgICAgY29udGV4dC5jb252ZXJ0KHZhbHVlc1tjb2x1bW5JbmRleF0sIHRoaXMsIGNvbnRleHQpO1xuICAgICAgfVxuICAgICAgbWFwW2NvbHVtbkluZGV4XSA9IHRydWU7XG4gICAgfVxuXG4gICAgLy8gdXNlIHRoZSBhcHByb3ByaWF0ZSBleHRyYWN0aW9uIGZ1bmN0aW9uIGRlcGVuZGluZyBvbiB3aGV0aGVyXG4gICAgLy8gd2Ugd2FudCB0aGUgdmFsdWUgb3IgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIHZhbHVlXG4gICAgY29uc3QgZXh0cmFjdEZuID0gIWFzU3RyaW5nID8gY29udGV4dC50b1ZhbHVlIDogY29udGV4dC50b1N0cmluZztcbiAgICByZXQgPSBleHRyYWN0Rm4ocmV0KTtcbiAgfVxuXG4gIHJldHVybiByZXQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQ29sdW1uO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/lib/connection/result/column.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/lib/connection/result/data_types.js":
/*!************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/lib/connection/result/data_types.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const Util = __webpack_require__(/*! ../../util */ \"(rsc)/./node_modules/snowflake-sdk/lib/util.js\");\nconst Errors = __webpack_require__(/*! ../../errors */ \"(rsc)/./node_modules/snowflake-sdk/lib/errors.js\");\n\nconst sqlTypes =\n  {\n    values:\n      {\n        TEXT: 'text',\n        BINARY: 'binary',\n        BOOLEAN: 'boolean',\n        FIXED: 'fixed',\n        REAL: 'real',\n        DATE: 'date',\n        TIME: 'time',\n        TIMESTAMP_LTZ: 'timestamp_ltz',\n        TIMESTAMP_NTZ: 'timestamp_ntz',\n        TIMESTAMP_TZ: 'timestamp_tz',\n        VARIANT: 'variant',\n        OBJECT: 'object',\n        ARRAY: 'array',\n        MAP: 'map'\n      },\n\n    /**\n     * Determines if a column's SQL type is String.\n     *\n     * @param {Object} sqlType\n     *\n     * @returns {Boolean}\n     */\n    isString: function (sqlType) {\n      return (sqlType === this.values.TEXT);\n    },\n\n    /**\n     * Determines if a column's SQL type is Binary.\n     *\n     * @param {Object} sqlType\n     *\n     * @returns {Boolean}\n     */\n    isBinary: function (sqlType) {\n      return (sqlType === this.values.BINARY);\n    },\n\n    /**\n     * Determines if a column's SQL type is Boolean.\n     *\n     * @param {Object} sqlType\n     *\n     * @returns {Boolean}\n     */\n    isBoolean: function (sqlType) {\n      return (sqlType === this.values.BOOLEAN);\n    },\n\n    /**\n     * Determines if a column's SQL type is Number.\n     *\n     * @param {Object} sqlType\n     *\n     * @returns {Boolean}\n     */\n    isNumber: function (sqlType) {\n      return (sqlType === this.values.FIXED) || (sqlType === this.values.REAL);\n    },\n\n    /**\n     * Determines if a column's SQL type is Date.\n     *\n     * @param {Object} sqlType\n     *\n     * @returns {Boolean}\n     */\n    isDate: function (sqlType) {\n      return (sqlType === this.values.DATE);\n    },\n\n    /**\n     * Determines if a column's SQL type is Time.\n     *\n     * @param {Object} sqlType\n     *\n     * @returns {Boolean}\n     */\n    isTime: function (sqlType) {\n      return (sqlType === this.values.TIME);\n    },\n\n    /**\n     * Determines if a column's SQL type is Timestamp.\n     *\n     * @param {Object} sqlType\n     *\n     * @returns {Boolean}\n     */\n    isTimestamp: function (sqlType) {\n      return (sqlType === this.values.TIMESTAMP_LTZ) ||\n        (sqlType === this.values.TIMESTAMP_NTZ) ||\n        (sqlType === this.values.TIMESTAMP_TZ);\n    },\n\n    /**\n     * Determines if a column's SQL type is TIMESTAMP_LTZ.\n     *\n     * @param {Object} sqlType\n     *\n     * @returns {Boolean}\n     */\n    isTimestampLtz: function (sqlType) {\n      return (sqlType === this.values.TIMESTAMP_LTZ);\n    },\n\n    /**\n     * Determines if a column's SQL type is TIMESTAMP_NTZ.\n     *\n     * @param {Object} sqlType\n     *\n     * @returns {Boolean}\n     */\n    isTimestampNtz: function (sqlType) {\n      return (sqlType === this.values.TIMESTAMP_NTZ);\n    },\n\n    /**\n     * Determines if a column's SQL type is TIMESTAMP_TZ.\n     *\n     * @param {Object} sqlType\n     *\n     * @returns {Boolean}\n     */\n    isTimestampTz: function (sqlType) {\n      return (sqlType === this.values.TIMESTAMP_TZ);\n    },\n\n    /**\n     * Determines if a column's SQL type is Variant.\n     *\n     * @param {Object} sqlType\n     *\n     * @returns {Boolean}\n     */\n    isVariant: function (sqlType, fieldsMetadata) {\n      return (sqlType === this.values.VARIANT) ||\n        (sqlType === this.values.OBJECT && fieldsMetadata == null) ||\n        (sqlType === this.values.ARRAY && fieldsMetadata == null) ||\n        (sqlType === this.values.MAP && fieldsMetadata == null);\n    },\n\n    /**\n     * Determines if a column's SQL type is Object.\n     *\n     * @param {Object} sqlType\n     *\n     * @returns {Boolean}\n     */\n    isObject: function (sqlType, fieldsMetadata) {\n      return (sqlType === this.values.OBJECT && fieldsMetadata != null);\n    },\n\n    /**\n     * Determines if a column's SQL type is Array.\n     *\n     * @param {Object} sqlType\n     *\n     * @returns {Boolean}\n     */\n    isArray: function (sqlType, fieldsMetadata) {\n      return (sqlType === this.values.ARRAY && fieldsMetadata != null);\n    },\n\n    /**\n     * Determines if a column's SQL type is Map.\n     *\n     * @param {Object} sqlType\n     *\n     * @returns {Boolean}\n     */\n    isMap: function (sqlType, fieldsMetadata) {\n      return (sqlType === this.values.MAP && fieldsMetadata != null);\n    }\n  };\n\nconst nativeTypes =\n  {\n    values:\n      {\n        STRING: 'STRING',\n        BOOLEAN: 'BOOLEAN',\n        NUMBER: 'NUMBER',\n        DATE: 'DATE',\n        JSON: 'JSON',\n        BUFFER: 'BUFFER',\n        OBJECT: 'OBJECT',\n        ARRAY: 'ARRAY',\n        MAP: 'MAP'\n      },\n\n    /**\n     * Determines if a given value is a valid native type.\n     *\n     * @param {*} value\n     *\n     * @returns {boolean}\n     */\n    isValidValue: function (value) {\n      return !!this.values[Util.isString(value) ? value.toUpperCase() : value];\n    },\n\n    /**\n     * Given an array of strings, returns the index of the first element that\n     * represents an invalid native type. If the values are all valid, a value of\n     * -1 is returned.\n     *\n     * @param {String[]} nativeTypes\n     *\n     * @returns {Number}\n     */\n    findInvalidValue: function (nativeTypes) {\n      // validate input\n      Errors.assertInternal(Util.isArray(nativeTypes));\n\n      // find the index of the first invalid value\n      let invalidValueIndex = -1;\n      for (let index = 0, length = nativeTypes.length; index < length; index++) {\n        if (!this.isValidValue(nativeTypes[index])) {\n          invalidValueIndex = index;\n          break;\n        }\n      }\n\n      return invalidValueIndex;\n    }\n  };\n\nlet isRepresentNullAsStringNull = true;\n\nexports.setIsRepresentNullAsStringNull = function (option) {\n  isRepresentNullAsStringNull = option;\n};\n\nexports.getNullValue = function () {\n  return isRepresentNullAsStringNull ? 'NULL' : null;\n};\n\nconst sqlTypeValues = sqlTypes.values;\nconst nativeTypeValues = nativeTypes.values;\n\nconst MAP_SQL_TO_NATIVE = {};\nMAP_SQL_TO_NATIVE[sqlTypeValues.TEXT] = nativeTypeValues.STRING;\nMAP_SQL_TO_NATIVE[sqlTypeValues.BINARY] = nativeTypeValues.BUFFER;\nMAP_SQL_TO_NATIVE[sqlTypeValues.BOOLEAN] = nativeTypeValues.BOOLEAN;\nMAP_SQL_TO_NATIVE[sqlTypeValues.FIXED] = nativeTypeValues.NUMBER;\nMAP_SQL_TO_NATIVE[sqlTypeValues.REAL] = nativeTypeValues.NUMBER;\nMAP_SQL_TO_NATIVE[sqlTypeValues.DATE] = nativeTypeValues.DATE;\nMAP_SQL_TO_NATIVE[sqlTypeValues.TIME] = nativeTypeValues.STRING;\nMAP_SQL_TO_NATIVE[sqlTypeValues.TIMESTAMP_LTZ] = nativeTypeValues.DATE;\nMAP_SQL_TO_NATIVE[sqlTypeValues.TIMESTAMP_NTZ] = nativeTypeValues.DATE;\nMAP_SQL_TO_NATIVE[sqlTypeValues.TIMESTAMP_TZ] = nativeTypeValues.DATE;\nMAP_SQL_TO_NATIVE[sqlTypeValues.VARIANT] = nativeTypeValues.JSON;\nMAP_SQL_TO_NATIVE[sqlTypeValues.OBJECT] = nativeTypeValues.OBJECT;\nMAP_SQL_TO_NATIVE[sqlTypeValues.ARRAY] = nativeTypeValues.ARRAY;\nMAP_SQL_TO_NATIVE[sqlTypeValues.MAP] = nativeTypeValues.MAP;\n\nexports.SqlTypes = sqlTypes;\nexports.NativeTypes = nativeTypes;\n\n/**\n * Given a SQL type, returns the corresponding native type.\n *\n * @param {String} sqlType\n *\n * @returns {String}\n */\nexports.toNativeType = function (sqlType) {\n  return MAP_SQL_TO_NATIVE[sqlType];\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/lib/connection/result/data_types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/lib/connection/result/datetime_format_converter.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/lib/connection/result/datetime_format_converter.js ***!
  \***************************************************************************************/
/***/ ((module) => {

eval("/**\n * The map of symbols for datatime representation in Snowflake and in Moment.js formatting.\n * The order of tags is important Please don't change it\n */\nfunction formatTagsMap() {\n  return [\n    // proper mappings\n    ['YYYY', 'YYYY'],\n    ['YY', 'YY'],\n    ['MM', 'MM'],\n    ['MON', 'MMM'],\n    ['DD', 'DD'],\n    ['DY', 'ddd'],\n    ['HH24', 'HH'],\n    ['HH12', 'hh'],\n    ['HH', 'HH'],\n    ['AM', 'A'],\n    ['PM', 'A'],\n    ['MI', 'mm'],\n    ['SS', 'ss'],\n    ['TZH:TZM', 'Z'],\n    ['TZHTZM', 'ZZ'],\n\n    // special code needed\n    ['TZH', ''],\n    ['TZM', ''],\n    ['FF', '']\n  ];\n}\n\nfunction convertSnowflakeFormatToMomentFormat(formatSql, scale) {\n  const tags = formatTagsMap();\n\n  // get an upper-case version of the input sql format\n  const formatSqlUpper = formatSql.toUpperCase();\n\n  // iterate over the format string\n  const length = formatSql.length;\n  let formatMoment = '';\n  for (let pos = 0; pos < length;) {\n    let tag = null;\n    let out = null;\n\n    // at each position, check if there's a tag at that position; if so, use\n    // 'out' as the replacement\n    for (let index = 0; index < tags.length; index++) {\n      if (formatSqlUpper.substr(pos).indexOf(tags[index][0]) === 0) {\n        tag = tags[index][0];\n        out = tags[index][1];\n        break;\n      }\n    }\n\n    // if we didn't find a match, just insert the character after escaping it\n    // (by wrapping it in square brackets)\n    if (out === null) {\n      formatMoment += formatSql[pos];\n      pos++;\n    } else {\n      // we found one of our special tags\n      if (out === '') {\n        if (tag === 'TZH') {\n          out = 'Z';\n        } else if (tag === 'FF') {\n          // if 'FF' is followed by a digit, use the digit as the scale\n          let digit = null;\n          if (pos + tag.length < length) {\n            const matches = formatSql[pos + tag.length].match(/[0-9]/);\n            if (matches) {\n              digit = matches[0];\n            }\n          }\n          if (digit !== null) {\n            pos++; // skip the digit as well\n          }\n\n          // if we need to include fractional seconds\n          if (scale > 0) {\n            // divide the nanoSeconds to get the requested number of\n            // meaningful digits\n            // pad with the appropriate number of leading zeros\n            out = (new Array(9).join('S')).substr(-scale);\n          }\n        }\n      }\n\n      // append the 'out' text to the moment format and update the position\n      formatMoment += out;\n      pos += tag.length;\n    }\n  }\n  return formatMoment;\n}\n\nmodule.exports.formatTagsMap = formatTagsMap;\nmodule.exports.convertSnowflakeFormatToMomentFormat = convertSnowflakeFormatToMomentFormat;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9saWIvY29ubmVjdGlvbi9yZXN1bHQvZGF0ZXRpbWVfZm9ybWF0X2NvbnZlcnRlci5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixhQUFhO0FBQ2pDO0FBQ0E7O0FBRUEsa0VBQWtFO0FBQ2xFO0FBQ0Esd0JBQXdCLHFCQUFxQjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDRCQUE0QjtBQUM1QixtREFBbUQiLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWN0b3J3aWxzb24vRGVza3RvcC9wcm9qZWN0cy9FWlZpei9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9saWIvY29ubmVjdGlvbi9yZXN1bHQvZGF0ZXRpbWVfZm9ybWF0X2NvbnZlcnRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoZSBtYXAgb2Ygc3ltYm9scyBmb3IgZGF0YXRpbWUgcmVwcmVzZW50YXRpb24gaW4gU25vd2ZsYWtlIGFuZCBpbiBNb21lbnQuanMgZm9ybWF0dGluZy5cbiAqIFRoZSBvcmRlciBvZiB0YWdzIGlzIGltcG9ydGFudCBQbGVhc2UgZG9uJ3QgY2hhbmdlIGl0XG4gKi9cbmZ1bmN0aW9uIGZvcm1hdFRhZ3NNYXAoKSB7XG4gIHJldHVybiBbXG4gICAgLy8gcHJvcGVyIG1hcHBpbmdzXG4gICAgWydZWVlZJywgJ1lZWVknXSxcbiAgICBbJ1lZJywgJ1lZJ10sXG4gICAgWydNTScsICdNTSddLFxuICAgIFsnTU9OJywgJ01NTSddLFxuICAgIFsnREQnLCAnREQnXSxcbiAgICBbJ0RZJywgJ2RkZCddLFxuICAgIFsnSEgyNCcsICdISCddLFxuICAgIFsnSEgxMicsICdoaCddLFxuICAgIFsnSEgnLCAnSEgnXSxcbiAgICBbJ0FNJywgJ0EnXSxcbiAgICBbJ1BNJywgJ0EnXSxcbiAgICBbJ01JJywgJ21tJ10sXG4gICAgWydTUycsICdzcyddLFxuICAgIFsnVFpIOlRaTScsICdaJ10sXG4gICAgWydUWkhUWk0nLCAnWlonXSxcblxuICAgIC8vIHNwZWNpYWwgY29kZSBuZWVkZWRcbiAgICBbJ1RaSCcsICcnXSxcbiAgICBbJ1RaTScsICcnXSxcbiAgICBbJ0ZGJywgJyddXG4gIF07XG59XG5cbmZ1bmN0aW9uIGNvbnZlcnRTbm93Zmxha2VGb3JtYXRUb01vbWVudEZvcm1hdChmb3JtYXRTcWwsIHNjYWxlKSB7XG4gIGNvbnN0IHRhZ3MgPSBmb3JtYXRUYWdzTWFwKCk7XG5cbiAgLy8gZ2V0IGFuIHVwcGVyLWNhc2UgdmVyc2lvbiBvZiB0aGUgaW5wdXQgc3FsIGZvcm1hdFxuICBjb25zdCBmb3JtYXRTcWxVcHBlciA9IGZvcm1hdFNxbC50b1VwcGVyQ2FzZSgpO1xuXG4gIC8vIGl0ZXJhdGUgb3ZlciB0aGUgZm9ybWF0IHN0cmluZ1xuICBjb25zdCBsZW5ndGggPSBmb3JtYXRTcWwubGVuZ3RoO1xuICBsZXQgZm9ybWF0TW9tZW50ID0gJyc7XG4gIGZvciAobGV0IHBvcyA9IDA7IHBvcyA8IGxlbmd0aDspIHtcbiAgICBsZXQgdGFnID0gbnVsbDtcbiAgICBsZXQgb3V0ID0gbnVsbDtcblxuICAgIC8vIGF0IGVhY2ggcG9zaXRpb24sIGNoZWNrIGlmIHRoZXJlJ3MgYSB0YWcgYXQgdGhhdCBwb3NpdGlvbjsgaWYgc28sIHVzZVxuICAgIC8vICdvdXQnIGFzIHRoZSByZXBsYWNlbWVudFxuICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCB0YWdzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgaWYgKGZvcm1hdFNxbFVwcGVyLnN1YnN0cihwb3MpLmluZGV4T2YodGFnc1tpbmRleF1bMF0pID09PSAwKSB7XG4gICAgICAgIHRhZyA9IHRhZ3NbaW5kZXhdWzBdO1xuICAgICAgICBvdXQgPSB0YWdzW2luZGV4XVsxXTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gaWYgd2UgZGlkbid0IGZpbmQgYSBtYXRjaCwganVzdCBpbnNlcnQgdGhlIGNoYXJhY3RlciBhZnRlciBlc2NhcGluZyBpdFxuICAgIC8vIChieSB3cmFwcGluZyBpdCBpbiBzcXVhcmUgYnJhY2tldHMpXG4gICAgaWYgKG91dCA9PT0gbnVsbCkge1xuICAgICAgZm9ybWF0TW9tZW50ICs9IGZvcm1hdFNxbFtwb3NdO1xuICAgICAgcG9zKys7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHdlIGZvdW5kIG9uZSBvZiBvdXIgc3BlY2lhbCB0YWdzXG4gICAgICBpZiAob3V0ID09PSAnJykge1xuICAgICAgICBpZiAodGFnID09PSAnVFpIJykge1xuICAgICAgICAgIG91dCA9ICdaJztcbiAgICAgICAgfSBlbHNlIGlmICh0YWcgPT09ICdGRicpIHtcbiAgICAgICAgICAvLyBpZiAnRkYnIGlzIGZvbGxvd2VkIGJ5IGEgZGlnaXQsIHVzZSB0aGUgZGlnaXQgYXMgdGhlIHNjYWxlXG4gICAgICAgICAgbGV0IGRpZ2l0ID0gbnVsbDtcbiAgICAgICAgICBpZiAocG9zICsgdGFnLmxlbmd0aCA8IGxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3QgbWF0Y2hlcyA9IGZvcm1hdFNxbFtwb3MgKyB0YWcubGVuZ3RoXS5tYXRjaCgvWzAtOV0vKTtcbiAgICAgICAgICAgIGlmIChtYXRjaGVzKSB7XG4gICAgICAgICAgICAgIGRpZ2l0ID0gbWF0Y2hlc1swXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGRpZ2l0ICE9PSBudWxsKSB7XG4gICAgICAgICAgICBwb3MrKzsgLy8gc2tpcCB0aGUgZGlnaXQgYXMgd2VsbFxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIGlmIHdlIG5lZWQgdG8gaW5jbHVkZSBmcmFjdGlvbmFsIHNlY29uZHNcbiAgICAgICAgICBpZiAoc2NhbGUgPiAwKSB7XG4gICAgICAgICAgICAvLyBkaXZpZGUgdGhlIG5hbm9TZWNvbmRzIHRvIGdldCB0aGUgcmVxdWVzdGVkIG51bWJlciBvZlxuICAgICAgICAgICAgLy8gbWVhbmluZ2Z1bCBkaWdpdHNcbiAgICAgICAgICAgIC8vIHBhZCB3aXRoIHRoZSBhcHByb3ByaWF0ZSBudW1iZXIgb2YgbGVhZGluZyB6ZXJvc1xuICAgICAgICAgICAgb3V0ID0gKG5ldyBBcnJheSg5KS5qb2luKCdTJykpLnN1YnN0cigtc2NhbGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBhcHBlbmQgdGhlICdvdXQnIHRleHQgdG8gdGhlIG1vbWVudCBmb3JtYXQgYW5kIHVwZGF0ZSB0aGUgcG9zaXRpb25cbiAgICAgIGZvcm1hdE1vbWVudCArPSBvdXQ7XG4gICAgICBwb3MgKz0gdGFnLmxlbmd0aDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZvcm1hdE1vbWVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMuZm9ybWF0VGFnc01hcCA9IGZvcm1hdFRhZ3NNYXA7XG5tb2R1bGUuZXhwb3J0cy5jb252ZXJ0U25vd2ZsYWtlRm9ybWF0VG9Nb21lbnRGb3JtYXQgPSBjb252ZXJ0U25vd2ZsYWtlRm9ybWF0VG9Nb21lbnRGb3JtYXQ7XG5cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/lib/connection/result/datetime_format_converter.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/lib/connection/result/doubly_linked_list.js":
/*!********************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/lib/connection/result/doubly_linked_list.js ***!
  \********************************************************************************/
/***/ ((module) => {

eval("function DoublyLinkedList() {\n  this._length = 0;\n  this._head = null;\n  this._tail = null;\n}\n\n/**\n * Returns the length of the list.\n *\n * @returns {number}\n */\nDoublyLinkedList.prototype.getLength = function () {\n  return this._length;\n};\n\n/**\n * Returns the first element in the list.\n *\n * @returns {Object}\n */\nDoublyLinkedList.prototype.getHead = function () {\n  return this._head;\n};\n\n/**\n * Returns the last element in the list.\n *\n * @returns {Object}\n */\nDoublyLinkedList.prototype.getTail = function () {\n  return this._tail;\n};\n\n/**\n * Inserts a value at the end of the list.\n *\n * @param value\n *\n * @returns {Object} the node that was inserted into the list.\n */\nDoublyLinkedList.prototype.insertEnd = function (value) {\n  // create a node from the specified value\n  const node = new Node(value, null, null);\n\n  // if there are no element in the list yet\n  if (this._length === 0) {\n    this._head = node;\n    this._tail = node;\n  } else {\n    // add the node to the end\n    this._tail.setNext(node);\n    node.setPrev(this._tail);\n    this._tail = node;\n  }\n\n  // increment the length\n  this._length++;\n\n  // return the node that was created\n  return node;\n};\n\n/**\n * Removes a given node from the list.\n *\n * @param node\n */\nDoublyLinkedList.prototype.remove = function (node) {\n  // if no node was specified, we have nothing to do\n  if (!node) {\n    return;\n  }\n\n  // if we're removing the first element in the list, adjust the head,\n  // otherwise connect the node's previous to its next\n  if (node.getPrev() === null) {\n    this._head = node.getNext();\n  } else {\n    node.getPrev().setNext(node.getNext());\n  }\n\n  // if we're removing the last element in the list, adjust the tail,\n  // otherwise connect the node's next to its previous\n  if (node.getNext() === null) {\n    this._tail = node.getPrev();\n  } else {\n    node.getNext().setPrev(node.getPrev());\n  }\n\n  // decrement the length\n  this._length--;\n};\n\nfunction Node(value, prev, next) {\n  this._value = value;\n  this._prev = prev;\n  this._next = next;\n}\n\nNode.prototype.getValue = function () {\n  return this._value;\n};\n\nNode.prototype.getPrev = function () {\n  return this._prev;\n};\n\nNode.prototype.setPrev = function (prev) {\n  this._prev = prev;\n};\n\nNode.prototype.getNext = function () {\n  return this._next;\n};\n\nNode.prototype.setNext = function (next) {\n  this._next = next;\n};\n\nmodule.exports = DoublyLinkedList;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9saWIvY29ubmVjdGlvbi9yZXN1bHQvZG91Ymx5X2xpbmtlZF9saXN0LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyIvVXNlcnMvdmljdG9yd2lsc29uL0Rlc2t0b3AvcHJvamVjdHMvRVpWaXovbm9kZV9tb2R1bGVzL3Nub3dmbGFrZS1zZGsvbGliL2Nvbm5lY3Rpb24vcmVzdWx0L2RvdWJseV9saW5rZWRfbGlzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBEb3VibHlMaW5rZWRMaXN0KCkge1xuICB0aGlzLl9sZW5ndGggPSAwO1xuICB0aGlzLl9oZWFkID0gbnVsbDtcbiAgdGhpcy5fdGFpbCA9IG51bGw7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgbGVuZ3RoIG9mIHRoZSBsaXN0LlxuICpcbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKi9cbkRvdWJseUxpbmtlZExpc3QucHJvdG90eXBlLmdldExlbmd0aCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuX2xlbmd0aDtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZmlyc3QgZWxlbWVudCBpbiB0aGUgbGlzdC5cbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fVxuICovXG5Eb3VibHlMaW5rZWRMaXN0LnByb3RvdHlwZS5nZXRIZWFkID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5faGVhZDtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgbGFzdCBlbGVtZW50IGluIHRoZSBsaXN0LlxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9XG4gKi9cbkRvdWJseUxpbmtlZExpc3QucHJvdG90eXBlLmdldFRhaWwgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLl90YWlsO1xufTtcblxuLyoqXG4gKiBJbnNlcnRzIGEgdmFsdWUgYXQgdGhlIGVuZCBvZiB0aGUgbGlzdC5cbiAqXG4gKiBAcGFyYW0gdmFsdWVcbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fSB0aGUgbm9kZSB0aGF0IHdhcyBpbnNlcnRlZCBpbnRvIHRoZSBsaXN0LlxuICovXG5Eb3VibHlMaW5rZWRMaXN0LnByb3RvdHlwZS5pbnNlcnRFbmQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgLy8gY3JlYXRlIGEgbm9kZSBmcm9tIHRoZSBzcGVjaWZpZWQgdmFsdWVcbiAgY29uc3Qgbm9kZSA9IG5ldyBOb2RlKHZhbHVlLCBudWxsLCBudWxsKTtcblxuICAvLyBpZiB0aGVyZSBhcmUgbm8gZWxlbWVudCBpbiB0aGUgbGlzdCB5ZXRcbiAgaWYgKHRoaXMuX2xlbmd0aCA9PT0gMCkge1xuICAgIHRoaXMuX2hlYWQgPSBub2RlO1xuICAgIHRoaXMuX3RhaWwgPSBub2RlO1xuICB9IGVsc2Uge1xuICAgIC8vIGFkZCB0aGUgbm9kZSB0byB0aGUgZW5kXG4gICAgdGhpcy5fdGFpbC5zZXROZXh0KG5vZGUpO1xuICAgIG5vZGUuc2V0UHJldih0aGlzLl90YWlsKTtcbiAgICB0aGlzLl90YWlsID0gbm9kZTtcbiAgfVxuXG4gIC8vIGluY3JlbWVudCB0aGUgbGVuZ3RoXG4gIHRoaXMuX2xlbmd0aCsrO1xuXG4gIC8vIHJldHVybiB0aGUgbm9kZSB0aGF0IHdhcyBjcmVhdGVkXG4gIHJldHVybiBub2RlO1xufTtcblxuLyoqXG4gKiBSZW1vdmVzIGEgZ2l2ZW4gbm9kZSBmcm9tIHRoZSBsaXN0LlxuICpcbiAqIEBwYXJhbSBub2RlXG4gKi9cbkRvdWJseUxpbmtlZExpc3QucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIChub2RlKSB7XG4gIC8vIGlmIG5vIG5vZGUgd2FzIHNwZWNpZmllZCwgd2UgaGF2ZSBub3RoaW5nIHRvIGRvXG4gIGlmICghbm9kZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIGlmIHdlJ3JlIHJlbW92aW5nIHRoZSBmaXJzdCBlbGVtZW50IGluIHRoZSBsaXN0LCBhZGp1c3QgdGhlIGhlYWQsXG4gIC8vIG90aGVyd2lzZSBjb25uZWN0IHRoZSBub2RlJ3MgcHJldmlvdXMgdG8gaXRzIG5leHRcbiAgaWYgKG5vZGUuZ2V0UHJldigpID09PSBudWxsKSB7XG4gICAgdGhpcy5faGVhZCA9IG5vZGUuZ2V0TmV4dCgpO1xuICB9IGVsc2Uge1xuICAgIG5vZGUuZ2V0UHJldigpLnNldE5leHQobm9kZS5nZXROZXh0KCkpO1xuICB9XG5cbiAgLy8gaWYgd2UncmUgcmVtb3ZpbmcgdGhlIGxhc3QgZWxlbWVudCBpbiB0aGUgbGlzdCwgYWRqdXN0IHRoZSB0YWlsLFxuICAvLyBvdGhlcndpc2UgY29ubmVjdCB0aGUgbm9kZSdzIG5leHQgdG8gaXRzIHByZXZpb3VzXG4gIGlmIChub2RlLmdldE5leHQoKSA9PT0gbnVsbCkge1xuICAgIHRoaXMuX3RhaWwgPSBub2RlLmdldFByZXYoKTtcbiAgfSBlbHNlIHtcbiAgICBub2RlLmdldE5leHQoKS5zZXRQcmV2KG5vZGUuZ2V0UHJldigpKTtcbiAgfVxuXG4gIC8vIGRlY3JlbWVudCB0aGUgbGVuZ3RoXG4gIHRoaXMuX2xlbmd0aC0tO1xufTtcblxuZnVuY3Rpb24gTm9kZSh2YWx1ZSwgcHJldiwgbmV4dCkge1xuICB0aGlzLl92YWx1ZSA9IHZhbHVlO1xuICB0aGlzLl9wcmV2ID0gcHJldjtcbiAgdGhpcy5fbmV4dCA9IG5leHQ7XG59XG5cbk5vZGUucHJvdG90eXBlLmdldFZhbHVlID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5fdmFsdWU7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5nZXRQcmV2ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5fcHJldjtcbn07XG5cbk5vZGUucHJvdG90eXBlLnNldFByZXYgPSBmdW5jdGlvbiAocHJldikge1xuICB0aGlzLl9wcmV2ID0gcHJldjtcbn07XG5cbk5vZGUucHJvdG90eXBlLmdldE5leHQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLl9uZXh0O1xufTtcblxuTm9kZS5wcm90b3R5cGUuc2V0TmV4dCA9IGZ1bmN0aW9uIChuZXh0KSB7XG4gIHRoaXMuX25leHQgPSBuZXh0O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBEb3VibHlMaW5rZWRMaXN0OyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/lib/connection/result/doubly_linked_list.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/lib/connection/result/result.js":
/*!********************************************************************!*\
  !*** ./node_modules/snowflake-sdk/lib/connection/result/result.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter);\nconst Util = __webpack_require__(/*! ../../util */ \"(rsc)/./node_modules/snowflake-sdk/lib/util.js\");\nconst Errors = __webpack_require__(/*! ../../errors */ \"(rsc)/./node_modules/snowflake-sdk/lib/errors.js\");\nconst Chunk = __webpack_require__(/*! ./chunk */ \"(rsc)/./node_modules/snowflake-sdk/lib/connection/result/chunk.js\");\nconst ResultStream = __webpack_require__(/*! ./result_stream */ \"(rsc)/./node_modules/snowflake-sdk/lib/connection/result/result_stream.js\");\nconst ChunkCache = __webpack_require__(/*! ./chunk_cache */ \"(rsc)/./node_modules/snowflake-sdk/lib/connection/result/chunk_cache.js\");\nconst Column = __webpack_require__(/*! ./column */ \"(rsc)/./node_modules/snowflake-sdk/lib/connection/result/column.js\");\nconst StatementType = __webpack_require__(/*! ./statement_type */ \"(rsc)/./node_modules/snowflake-sdk/lib/connection/result/statement_type.js\");\nconst ColumnNamesCreator = __webpack_require__(/*! ./unique_column_name_creator */ \"(rsc)/./node_modules/snowflake-sdk/lib/connection/result/unique_column_name_creator.js\");\nconst RowMode = __webpack_require__(/*! ../../constants/row_mode */ \"(rsc)/./node_modules/snowflake-sdk/lib/constants/row_mode.js\");\nconst Logger = __webpack_require__(/*! ../../logger */ \"(rsc)/./node_modules/snowflake-sdk/lib/logger.js\");\n\n/**\n * Creates a new Result.\n *\n * @param {Object} options\n * @constructor\n */\nfunction Result(options) {\n  let chunkHeaders;\n  let length;\n  let index;\n  let parameter;\n  let mapColumnNameToIndices;\n  let columns;\n  let column;\n  let version;\n\n  // assert that options is a valid object that contains a response, statement,\n  // services and connection config\n  Errors.assertInternal(Util.isObject(options));\n  Errors.assertInternal(Util.isObject(options.response));\n  Errors.assertInternal(Util.isObject(options.statement));\n  Errors.assertInternal(Util.isObject(options.services));\n  Errors.assertInternal(Util.isObject(options.connectionConfig));\n\n  // save the statement, services and connection config\n  this._statement = options.statement;\n  this._services = options.services;\n  this._connectionConfig = options.connectionConfig;\n\n  const data = options.response.data;\n\n  this._queryId = data.queryId;\n  this._version = version = String(data.version); // don't rely on the version being a number\n  this._returnedRows = data.returned;\n  this._totalRows = data.total;\n  this._statementTypeId = data.statementTypeId;\n  this._queryContext = data.queryContext;\n\n  // if no chunk headers were specified, but a query-result-master-key (qrmk)\n  // was specified, build the chunk headers from the qrmk\n  chunkHeaders = data.chunkHeaders;\n  if (!Util.isObject(chunkHeaders) && Util.isString(data.qrmk)) {\n    chunkHeaders =\n      {\n        'x-amz-server-side-encryption-customer-algorithm': 'AES256',\n        'x-amz-server-side-encryption-customer-key': data.qrmk\n      };\n  }\n  this._chunkHeaders = chunkHeaders;\n\n  // build a session state object from the response data; this can be used to\n  // get the values of the current role, current warehouse, current database,\n  // etc.\n  this._sessionState = createSessionState(data);\n\n  // convert the parameters array to a map\n  const parametersMap = {};\n  const parametersArray = data.parameters || [];\n  for (index = 0, length = parametersArray.length; index < length; index++) {\n    parameter = parametersArray[index];\n    parametersMap[parameter.name] = parameter.value;\n  }\n\n  // save the parameters array\n  this._parametersArray = parametersArray;\n\n  // TODO: add timezone related information to columns\n\n  // create columns from the rowtype array returned in the result\n  const rowtype = data.rowtype;\n  const numColumns = rowtype.length;\n\n  this._columns = columns = new Array(numColumns);\n\n  // convert the rowtype array to an array of columns and build an inverted\n  // index map in which the keys are the column names and the values are the\n  // indices of the columns with the corresponding names\n  this._mapColumnNameToIndices = mapColumnNameToIndices = {};\n\n  const rowMode = options.rowMode;\n  if (rowMode === RowMode.OBJECT_WITH_RENAMED_DUPLICATED_COLUMNS) {\n    ColumnNamesCreator.addOverridenNamesForDuplicatedColumns(rowtype);\n  }\n\n  Logger.getInstance().trace(`Mapping columns in resultset (total: ${numColumns})`);\n  for (let index = 0; index < numColumns; index++) {\n\n    // create a new column and add it to the columns array\n    columns[index] = column =\n      new Column(rowtype[index], index, parametersMap, version);\n\n    // if we don't already have an index array for a column with this name,\n    // create a new one, otherwise just append to the existing array of indices\n    mapColumnNameToIndices[column.getName()] =\n      mapColumnNameToIndices[column.getName()] || [];\n    mapColumnNameToIndices[column.getName()].push(index);\n  }\n  Logger.getInstance().trace('Finished mapping columns.');\n\n  // create chunks\n  this._chunks = createChunks(\n    data.chunks,\n    data.rowset,\n    this._columns,\n    this._mapColumnNameToIndices,\n    this._chunkHeaders,\n    parametersMap,\n    this._version,\n    this._statement,\n    this._services);\n\n  this.getQueryContext = function () {\n    return this._queryContext;\n  };\n\n  /* Disable the ChunkCache until the implementation is complete.\n   * \n   *   // create a chunk cache and save a reference to it in case we need to\n   *   // TODO: should we be clearing the cache at some point, e.g. when the result\n   *   // is destroyed?\n   *   this._chunkCache = createChunkCache(\n   *   this._chunks,\n   *   this._connectionConfig.getResultChunkCacheSize());\n    */\n}\n\nUtil.inherits(Result, EventEmitter);\n\n/**\n * Refreshes the result by updating the chunk urls.\n *\n * @param response\n */\nResult.prototype.refresh = function (response) {\n  const chunks = this._chunks;\n  const chunkCfgs = response.data.chunks;\n  for (let index = 0, length = chunks.length; index < length; index++) {\n    chunks[index].setUrl(chunkCfgs[index].url);\n  }\n};\n\n/**\n * TODO\n *\n * @param chunks\n * @param capacity\n *\n * @returns {ChunkCache}\n */\n// eslint-disable-next-line no-unused-vars\nfunction createChunkCache(chunks, capacity) {\n  let index;\n  let length;\n\n  // create a chunk cache\n  const chunkCache = new ChunkCache(capacity);\n\n  // every time a chunk is loaded, add it to the cache\n  // TODO: should the caching be based on most recently 'used' or most recently\n  // 'loaded'?\n  const onLoadComplete = function (err, chunk) {\n    if (!err) {\n      chunkCache.put(chunk);\n    }\n  };\n\n  // subscribe to the 'loadcomplete' event on all the chunks\n  for (index = 0, length = chunks.length; index < length; index++) {\n    chunks[index].on('loadcomplete', onLoadComplete);\n  }\n\n  // TODO: do we need to unsubscribe from the loadcomplete event at some point?\n\n  return chunkCache;\n}\n\n/**\n * Creates a session state object from the values of the current role, current\n * warehouse, etc., returned in the result response.\n *\n * @param responseData\n *\n * @returns {Object}\n */\nfunction createSessionState(responseData) {\n  const currentRole = responseData.finalRoleName;\n  const currentWarehouse = responseData.finalWarehouseName;\n  const currentDatabaseProvider = responseData.databaseProvider;\n  const currentDatabase = responseData.finalDatabaseName;\n  const currentSchema = responseData.finalSchemaName;\n\n  return {\n    getCurrentRole: function () {\n      return currentRole;\n    },\n    getCurrentWarehouse: function () {\n      return currentWarehouse;\n    },\n    getCurrentDatabaseProvider: function () {\n      return currentDatabaseProvider;\n    },\n    getCurrentDatabase: function () {\n      return currentDatabase;\n    },\n    getCurrentSchema: function () {\n      return currentSchema;\n    }\n  };\n}\n\n/**\n * Creates an array of Chunk instances from the chunk-related information in the\n * result response.\n *\n * @param chunkCfgs\n * @param rowset\n * @param columns\n * @param mapColumnNameToIndices\n * @param chunkHeaders\n * @param statementParameters\n * @param resultVersion\n * @param statement\n * @param services\n *\n * @returns {Chunk}\n */\nfunction createChunks(chunkCfgs,\n  rowset,\n  columns,\n  mapColumnNameToIndices,\n  chunkHeaders,\n  statementParameters,\n  resultVersion,\n  statement,\n  services) {\n  let startIndex;\n  let index;\n  let chunkCfg;\n\n  // if we don't have any chunks, or if some records were returned inline,\n  // fabricate a config object for the first chunk\n  chunkCfgs = chunkCfgs || [];\n  if (!chunkCfgs || rowset.length > 0) {\n    chunkCfgs.unshift(\n      {\n        rowCount: rowset.length,\n        url: null,\n        rowset: rowset\n      });\n  }\n\n  const chunks = new Array(chunkCfgs.length);\n  Logger.getInstance().trace(`Downloading ${chunkCfgs.length} chunks`);\n\n  // loop over the chunk config objects and build Chunk instances out of them\n  startIndex = 0;\n  const length = chunkCfgs.length;\n  for (index = 0; index < length; index++) {\n    chunkCfg = chunkCfgs[index];\n\n    // augment the chunk config object with additional information\n    chunkCfg.statement = statement;\n    chunkCfg.services = services;\n    chunkCfg.startIndex = startIndex;\n    chunkCfg.columns = columns;\n    chunkCfg.mapColumnNameToIndices = mapColumnNameToIndices;\n    chunkCfg.chunkHeaders = chunkHeaders;\n    chunkCfg.statementParameters = statementParameters;\n    chunkCfg.resultVersion = resultVersion;\n\n    // increment the start index for the next chunk\n    startIndex += chunkCfg.rowCount;\n\n    // create a new Chunk from the config object, and add it to the chunks array\n    chunks[index] = new Chunk(chunkCfg);\n  }\n\n  return chunks;\n}\n\n/**\n * Returns the chunks in this result that overlap with a specified window.\n *\n * @param {Number} start the start index of the window.\n * @param {Number} end the end index of the window.\n *\n * @returns {Chunk[]}\n */\nResult.prototype.findOverlappingChunks = function (start, end) {\n  return findOverlappingChunks(this._chunks, start, end);\n};\n\n/**\n * Fetches the rows from the result.\n *\n * @param {Object} options\n *\n * @returns {EventEmitter}\n */\nResult.prototype.fetchRows = function (options) {\n  // validate options\n  Errors.assertInternal(Util.isObject(options));\n  Errors.assertInternal(Util.isFunction(options.each));\n\n  // if no value was specified for the start index or if the specified start\n  // index is negative, default to 0, otherwise truncate the fractional part\n  let start = options.startIndex;\n  start = (!Util.isNumber(start) || (start < 0)) ? 0 : Math.floor(start);\n\n  // if no value was specified for the end index or if the end index is larger\n  // than the row index of the last row, default to the index of the last row,\n  // otherwise truncate the fractional part\n  const returnedRows = this.getReturnedRows();\n  let end = options.endIndex;\n  end = (!Util.isNumber(end) || (end >= returnedRows)) ? returnedRows - 1 :\n    Math.floor(end);\n\n  // create an EventEmitter that will be returned to the\n  // caller to track progress of the fetch-rows operation\n  const operation = new EventEmitter();\n\n  // define a function to asynchronously complete the operation\n  const asyncComplete = function (err, continueCallback) {\n    process.nextTick(function () {\n      operation.emit('complete', err, continueCallback);\n    });\n  };\n\n  // if the start index is greater than the end index, asynchronously\n  // complete the operation and return the operation\n  if (start > end) {\n    // the operation is now complete\n    asyncComplete();\n    return operation;\n  }\n\n  const connectionConfig = this._connectionConfig;\n\n  // create a context object to store the state of the operation; we could store\n  // the state in the operation itself, but it would be good to keep this state\n  // private\n  const context =\n    {\n      maxNumRowsToProcess: end - start + 1,\n      numRowsProcessed: 0,\n      rowBatchSize: connectionConfig.getResultProcessingBatchSize(),\n      rowBatchDuration: connectionConfig.getResultProcessingBatchDuration()\n    };\n\n  // identify the chunks needed to get the requested rows, and create a stream\n  // to read their contents\n  const resultStream = new ResultStream(\n    {\n      chunks: findOverlappingChunks(this._chunks, start, end),\n      prefetchSize: connectionConfig.getResultPrefetch()\n    });\n\n  // subscribe to the stream's 'close' event\n  resultStream.on('close', function (err, continueCallback) {\n    // the operation is now complete\n    asyncComplete(err, continueCallback);\n  });\n\n  // subscribe to the stream's 'data' event\n  resultStream.on('data', function (chunk) {\n    // start processing the chunk rows\n    processChunk(chunk);\n  });\n\n  /**\n   * Processes the rows in a given chunk.\n   *\n   * @param {Object} chunk\n   */\n  const processChunk = function (chunk) {\n    // get all the rows in the current chunk that overlap with the requested\n    // window\n    const chunkStart = chunk.getStartIndex();\n    const chunkEnd = chunk.getEndIndex();\n    const rows = chunk.getRows().slice(\n      Math.max(chunkStart, start) - chunkStart,\n      Math.min(chunkEnd, end) + 1 - chunkStart);\n\n    let rowIndex = 0;\n    const rowsLength = rows.length;\n\n    // create a function that can be called to batch-process rows\n    const processRows = function () {\n      // get the start position and start time\n      const startIndex = rowIndex;\n      const startTime = Date.now();\n      const each = options.each;\n\n      let stoppedProcessingRows;\n\n      while (rowIndex < rowsLength) {\n        // invoke the each() callback on the current row\n        const ret = each(rows[rowIndex++]);\n\n        context.numRowsProcessed++;\n\n        // if the callback returned false, stop processing rows\n        if (ret === false) {\n          stoppedProcessingRows = true;\n          break;\n        }\n\n        // use the current position and current time to check if we've been\n        // processing rows for too long; if so, leave the rest for the next\n        // tick of the event loop\n        if ((rowIndex - startIndex) >= context.rowBatchSize &&\n          (Date.now() - startTime) > context.rowBatchDuration) {\n          process.nextTick(processRows);\n          break;\n        }\n      }\n\n      // if there are no more rows for us to process in this chunk\n      if (!(rowIndex < rowsLength) || stoppedProcessingRows) {\n        // if we exhausted all the rows in this chunk and we haven't yet\n        // processed all the rows we want to process, ask the result stream to\n        // do another read\n        if (!(rowIndex < rowsLength) &&\n          context.numRowsProcessed !== context.maxNumRowsToProcess) {\n          resultStream.read();\n        } else {\n          // we've either processed all the rows we wanted to process or we\n          // were told to stop processing rows by the each() callback; either\n          // way, close the result stream to complete the operation\n          resultStream.asyncClose();\n        }\n      }\n    };\n\n    // start processing rows\n    processRows();\n  };\n\n  // start reading from the stream in the next tick of the event loop\n  process.nextTick(function () {\n    resultStream.read();\n  });\n\n  return operation;\n};\n\n/**\n * Given a sorted array of chunks, returns a sub-array that overlaps with a\n * specified window.\n *\n * @param chunks\n * @param windowStart\n * @param windowEnd\n *\n * @returns {Array}\n */\nfunction findOverlappingChunks(chunks, windowStart, windowEnd) {\n  const overlappingChunks = [];\n\n  if (chunks.length !== 0) {\n    // get the index of the first chunk that overlaps with the specified window\n    let index = findFirstOverlappingChunk(chunks, windowStart, windowEnd);\n\n    // iterate over the chunks starting with the first overlapping chunk and\n    // keep going until there's no overlap\n    for (let length = chunks.length; index < length; index++) {\n      const chunk = chunks[index];\n      if (chunk.overlapsWithWindow(windowStart, windowEnd)) {\n        overlappingChunks.push(chunk);\n      } else {\n        // no future chunks will overlap because the chunks array is sorted\n        break;\n      }\n    }\n  }\n\n  return overlappingChunks;\n}\n\n/**\n * Given a sorted array of chunks, returns the index of the first chunk in the\n * array that overlaps with a specified window.\n *\n * @param chunks\n * @param windowStartIndex\n * @param windowEndIndex\n *\n * @returns {number}\n */\nfunction findFirstOverlappingChunk(chunks, windowStartIndex, windowEndIndex) {\n  const helper = function (chunks,\n    chunkIndexLeft,\n    chunkIndexRight,\n    windowStartIndex,\n    windowEndIndex) {\n    let result;\n    let middleChunkEndIndex;\n\n    // initialize the return value to -1\n    result = -1;\n\n    // compute the index of the middle chunk and get the middle chunk\n    const chunkIndexMiddle = Math.floor((chunkIndexLeft + chunkIndexRight) / 2);\n    const middleChunk = chunks[chunkIndexMiddle];\n\n    // if we have two or fewer chunks\n    if ((chunkIndexMiddle === chunkIndexLeft) ||\n      (chunkIndexMiddle === chunkIndexRight)) {\n      // if we have just one chunk, and it overlaps with the specified window,\n      // we've found the chunk we were looking for\n      if (chunkIndexLeft === chunkIndexRight) {\n        if (middleChunk.overlapsWithWindow(windowStartIndex, windowEndIndex)) {\n          result = chunkIndexLeft;\n        }\n      } else { // we just have two chunks left to check\n        // if the first chunk overlaps with the specified window, that's the\n        // chunk we were looking for\n        if (chunks[chunkIndexLeft].overlapsWithWindow(\n          windowStartIndex, windowEndIndex)) {\n          result = chunkIndexLeft;\n        } else if (chunks[chunkIndexRight].overlapsWithWindow(\n          windowStartIndex, windowEndIndex)) {\n          // otherwise, if the second chunk overlaps with the specified window,\n          // that's the chunk we were looking for\n          result = chunkIndexRight;\n        }\n      }\n\n      return result;\n    }\n\n    // if the middle chunk does not overlap with the specified window\n    if (!middleChunk.overlapsWithWindow(windowStartIndex, windowEndIndex)) {\n      middleChunkEndIndex = middleChunk.getEndIndex();\n\n      // if the window is to the right of the middle chunk,\n      // recurse on the right half\n      if (windowStartIndex > middleChunkEndIndex) {\n        return helper(\n          chunks,\n          chunkIndexMiddle,\n          chunkIndexRight,\n          windowStartIndex,\n          windowEndIndex);\n      } else {\n        // recurse on the left half\n        return helper(\n          chunks,\n          chunkIndexLeft,\n          chunkIndexMiddle,\n          windowStartIndex,\n          windowEndIndex);\n      }\n    } else {\n      // if the middle chunk overlaps but the chunk before it does not, the\n      // middle chunk is the one we were looking\n      if ((chunkIndexMiddle === 0) ||\n        !chunks[chunkIndexMiddle - 1].overlapsWithWindow(\n          windowStartIndex, windowEndIndex)) {\n        return chunkIndexMiddle;\n      } else {\n        // recurse on the left half\n        return helper(\n          chunks,\n          chunkIndexLeft,\n          chunkIndexMiddle,\n          windowStartIndex,\n          windowEndIndex);\n      }\n    }\n  };\n\n  return helper(chunks, 0, chunks.length - 1, windowStartIndex, windowEndIndex);\n}\n\n/**\n * Returns the columns in this result.\n *\n * @returns {Object[]}\n */\nResult.prototype.getColumns = function () {\n  return this._columns;\n};\n\n/**\n * Given a column identifier, returns the corresponding column. The column\n * identifier can be either the column name (String) or the column index\n * (Number). If a column name is specified and there is more than one column\n * with that name, the first column with the specified name will be returned.\n *\n * @param {String | Number} columnIdentifier\n *\n * @returns {Object}\n */\nResult.prototype.getColumn = function (columnIdentifier) {\n  let columnIndex;\n\n  // if the column identifier is a string, treat it as a column\n  // name and use it to get the index of the specified column\n  if (Util.isString(columnIdentifier)) {\n    // if a valid column name was specified, get the index of the first column\n    // with the specified name\n    if (Object.prototype.hasOwnProperty.call(this._mapColumnNameToIndices, columnIdentifier)) {\n      columnIndex = this._mapColumnNameToIndices[columnIdentifier][0];\n    }\n  } else if (Util.isNumber(columnIdentifier)) {\n    // if the column identifier is a number, treat it as a column index\n    columnIndex = columnIdentifier;\n  }\n\n  return this._columns[columnIndex];\n};\n\n/**\n * Returns the statement id generated by the server for the statement that\n * produced this result.\n *\n * Should use getQueryId instead.\n * @deprecated\n * @returns {string}\n */\nResult.prototype.getStatementId = function () {\n  return this._queryId;\n};\n\n/**\n * Returns the query id generated by the server for the statement that\n * produced this result.\n *\n * @returns {string}\n */\nResult.prototype.getQueryId = function () {\n  return this._queryId;\n};\n\n/**\n * Returns the number of rows in this result.\n *\n * @returns {number}\n */\nResult.prototype.getReturnedRows = function () {\n  return this._returnedRows;\n};\n\n/**\n * Returns the number of rows updated by the statement that produced this\n * result. If the statement isn't a DML, we return -1.\n *\n * @returns {Number}\n */\nResult.prototype.getNumUpdatedRows = function () {\n  // initialize if necessary\n  if (!this._numUpdatedRows) {\n    let numUpdatedRows = -1;\n\n    // the updated-rows metric only applies to dml's\n    const statementTypeId = this._statementTypeId;\n    if (StatementType.isDml(statementTypeId)) {\n      if (StatementType.isInsert(statementTypeId) ||\n        StatementType.isUpdate(statementTypeId) ||\n        StatementType.isDelete(statementTypeId) ||\n        StatementType.isMerge(statementTypeId) ||\n        StatementType.isMultiTableInsert(statementTypeId)) {\n        const chunks = this._chunks;\n        const columns = this._columns;\n\n        // if the statement is a dml, the result should be small,\n        // meaning we only have one chunk\n        Errors.assertInternal(Util.isArray(chunks) && (chunks.length === 1));\n\n        // add up the values in all the columns\n        numUpdatedRows = 0;\n        const rows = chunks[0].getRows();\n        for (let rowIndex = 0, rowsLength = rows.length;\n          rowIndex < rowsLength; rowIndex++) {\n          const row = rows[rowIndex];\n          for (let colIndex = 0, colsLength = columns.length;\n            colIndex < colsLength; colIndex++) {\n            numUpdatedRows += Number(\n              row.getColumnValue(columns[colIndex].getId()));\n          }\n        }\n      }\n      // TODO: handle 'copy' and 'unload'\n    }\n\n    this._numUpdatedRows = numUpdatedRows;\n  }\n\n  return this._numUpdatedRows;\n};\n\n/**\n * Returns the number of rows we would have had in this result if the value of\n * the ROWS_PER_RESULTSET parameter was 0 at the time this statement was\n * executed.\n *\n * @returns {number}\n */\nResult.prototype.getTotalRows = function () {\n  return this._totalRows;\n};\n\n/**\n * Returns the parameters associated with this result. These parameters contain\n * directives about how to consume and present the result.\n *\n * @returns {Object[]}\n */\nResult.prototype.getParametersArray = function () {\n  return this._parametersArray;\n};\n\n/**\n * Returns an object that contains information about the values of the current\n * warehouse, current database, and any other session-related state when the\n * statement that produced this result finished executing.\n *\n * @returns {Object}\n */\nResult.prototype.getSessionState = function () {\n  return this._sessionState;\n};\n\n/**\n * Returns the version associated with this result.\n *\n * @returns {string}\n */\nResult.prototype.getVersion = function () {\n  return this._version;\n};\n\nmodule.exports = Result;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/lib/connection/result/result.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/lib/connection/result/result_stream.js":
/*!***************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/lib/connection/result/result_stream.js ***!
  \***************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter);\nconst Util = __webpack_require__(/*! ../../util */ \"(rsc)/./node_modules/snowflake-sdk/lib/util.js\");\nconst Errors = __webpack_require__(/*! ../../errors */ \"(rsc)/./node_modules/snowflake-sdk/lib/errors.js\");\n\n/**\n * Creates a stream-like object that can be used to read the contents of an\n * array of chunks with the ability to prefetch chunks as we go. Every time the\n * contents of a new chunk become available, a 'data' event is fired. When there\n * are no more chunks to read, a 'close' event is fired to indicate that the\n * read operation is complete. If no chunks are specified in the options, the\n * stream asynchronously fires a 'close' event after it is returned.\n *\n * @param {Object} [options] An options object with the following properties:\n *   {Object[]} chunks       - The chunks to read.\n *   {Number}   prefetchSize - The number of chunks to prefetch every time a new\n *     chunk is read.\n *\n * @constructor\n */\nfunction ResultStream(options) {\n  // options should be an object\n  Errors.assertInternal(Util.isObject(options));\n\n  const chunks = options.chunks;\n  const prefetchSize = options.prefetchSize;\n\n  // chunks should be an array\n  Errors.assertInternal(Util.isArray(chunks));\n\n  // prefetch size should be non-negative\n  Errors.assertInternal(Util.isNumber(prefetchSize) && (prefetchSize >= 0));\n\n  // Current chunk being streamed. Start with the first chunk.\n  let currChunk = 0;\n\n  const self = this;\n\n  /**\n   * Called when a chunk fires a 'loadcomplete' event.\n   *\n   * @param {Error} err\n   * @param {Chunk} chunk\n   */\n  const onLoadComplete = function (err, chunk) {\n    // unsubscribe from the 'loadcomplete' event\n    chunk.removeListener('loadcomplete', onLoadComplete);\n\n    // if the chunk load succeeded\n    if (!err) {\n      // Move on to the next chunk\n      currChunk++;\n\n      // emit an event to signal that new data is available\n      self.emit('data', chunk);\n    } else {\n      // close the stream with an error; also, include a callback when emitting\n      // the event in case someone wants to fix the problem and ask us to\n      // continue from where we got interrupted\n      close(self, err, doLoad);\n    }\n  };\n\n  /**\n   * Identifies the next chunk to load and issues requests to fetch both its\n   * contents plus the contents of the next few chunks. If there are no more\n   * chunks to load, a 'close' event is fired on the stream to notify\n   * subscribers that all the chunks have been successfully read.\n   */\n  const doLoad = function () {\n    // All chunks were loaded, we're done\n    if (currChunk >= chunks.length) {\n      self.asyncClose();\n    } else {\n      // Subscribe to the loadcomplete event on the current chunk being streamed to ensure the\n      // rows are returned in the correct order and not in the order chunk data are received\n      chunks[currChunk].on('loadcomplete', onLoadComplete);\n\n      // Fire off requests to load all the chunks in the buffer that aren't already loading\n      let chunk, index;\n      for (index = currChunk; index < chunks.length && index <= (currChunk + prefetchSize); index++) {\n        chunk = chunks[index];\n        if (!chunk.isLoading()) {\n          chunk.load();\n        }\n      }\n    }\n  };\n\n  /**\n   * Reads the next chunk of data in the result stream.\n   */\n  this.read = function () {\n    // TODO: if there are no more chunks to read, should we raise an error?\n    // TODO: what if we're already in the middle of a read?\n\n    // read the next chunk\n    doLoad();\n  };\n}\n\nUtil.inherits(ResultStream, EventEmitter);\n\n/**\n * Asynchronously closes this stream.\n *\n * @returns {ResultStream}\n */\nResultStream.prototype.asyncClose = function () {\n  // schedule an operation to close the stream in\n  // the next tick of the event loop\n  const self = this;\n  process.nextTick(function () {\n    close(self);\n  });\n\n  return this;\n};\n\n/**\n * Closes a given result stream.\n *\n * @param {ResultStream} stream The stream to close.\n * @param {Error} [err] The error, if any, to fire with the close event.\n * @param {Function} [callback] The callback, if any, to fire with the close\n *   event. This is in case someone wants to fix the problem and ask the stream\n *   to resume from the point of interruption.\n */\nfunction close(stream, err, callback) {\n  stream.emit('close', err, callback);\n}\n\nmodule.exports = ResultStream;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9saWIvY29ubmVjdGlvbi9yZXN1bHQvcmVzdWx0X3N0cmVhbS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxQkFBcUIsMERBQThCO0FBQ25ELGFBQWEsbUJBQU8sQ0FBQyxrRUFBWTtBQUNqQyxlQUFlLG1CQUFPLENBQUMsc0VBQWM7O0FBRXJDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsTUFBTSxVQUFVO0FBQ2hCLE1BQU0sVUFBVTtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsT0FBTztBQUNwQixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE1BQU07QUFDTix5Q0FBeUM7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDhCQUE4Qiw4REFBOEQ7QUFDNUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGNBQWM7QUFDekIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsVUFBVTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWN0b3J3aWxzb24vRGVza3RvcC9wcm9qZWN0cy9FWlZpei9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9saWIvY29ubmVjdGlvbi9yZXN1bHQvcmVzdWx0X3N0cmVhbS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXI7XG5jb25zdCBVdGlsID0gcmVxdWlyZSgnLi4vLi4vdXRpbCcpO1xuY29uc3QgRXJyb3JzID0gcmVxdWlyZSgnLi4vLi4vZXJyb3JzJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIHN0cmVhbS1saWtlIG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlYWQgdGhlIGNvbnRlbnRzIG9mIGFuXG4gKiBhcnJheSBvZiBjaHVua3Mgd2l0aCB0aGUgYWJpbGl0eSB0byBwcmVmZXRjaCBjaHVua3MgYXMgd2UgZ28uIEV2ZXJ5IHRpbWUgdGhlXG4gKiBjb250ZW50cyBvZiBhIG5ldyBjaHVuayBiZWNvbWUgYXZhaWxhYmxlLCBhICdkYXRhJyBldmVudCBpcyBmaXJlZC4gV2hlbiB0aGVyZVxuICogYXJlIG5vIG1vcmUgY2h1bmtzIHRvIHJlYWQsIGEgJ2Nsb3NlJyBldmVudCBpcyBmaXJlZCB0byBpbmRpY2F0ZSB0aGF0IHRoZVxuICogcmVhZCBvcGVyYXRpb24gaXMgY29tcGxldGUuIElmIG5vIGNodW5rcyBhcmUgc3BlY2lmaWVkIGluIHRoZSBvcHRpb25zLCB0aGVcbiAqIHN0cmVhbSBhc3luY2hyb25vdXNseSBmaXJlcyBhICdjbG9zZScgZXZlbnQgYWZ0ZXIgaXQgaXMgcmV0dXJuZWQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBBbiBvcHRpb25zIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqICAge09iamVjdFtdfSBjaHVua3MgICAgICAgLSBUaGUgY2h1bmtzIHRvIHJlYWQuXG4gKiAgIHtOdW1iZXJ9ICAgcHJlZmV0Y2hTaXplIC0gVGhlIG51bWJlciBvZiBjaHVua3MgdG8gcHJlZmV0Y2ggZXZlcnkgdGltZSBhIG5ld1xuICogICAgIGNodW5rIGlzIHJlYWQuXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIFJlc3VsdFN0cmVhbShvcHRpb25zKSB7XG4gIC8vIG9wdGlvbnMgc2hvdWxkIGJlIGFuIG9iamVjdFxuICBFcnJvcnMuYXNzZXJ0SW50ZXJuYWwoVXRpbC5pc09iamVjdChvcHRpb25zKSk7XG5cbiAgY29uc3QgY2h1bmtzID0gb3B0aW9ucy5jaHVua3M7XG4gIGNvbnN0IHByZWZldGNoU2l6ZSA9IG9wdGlvbnMucHJlZmV0Y2hTaXplO1xuXG4gIC8vIGNodW5rcyBzaG91bGQgYmUgYW4gYXJyYXlcbiAgRXJyb3JzLmFzc2VydEludGVybmFsKFV0aWwuaXNBcnJheShjaHVua3MpKTtcblxuICAvLyBwcmVmZXRjaCBzaXplIHNob3VsZCBiZSBub24tbmVnYXRpdmVcbiAgRXJyb3JzLmFzc2VydEludGVybmFsKFV0aWwuaXNOdW1iZXIocHJlZmV0Y2hTaXplKSAmJiAocHJlZmV0Y2hTaXplID49IDApKTtcblxuICAvLyBDdXJyZW50IGNodW5rIGJlaW5nIHN0cmVhbWVkLiBTdGFydCB3aXRoIHRoZSBmaXJzdCBjaHVuay5cbiAgbGV0IGN1cnJDaHVuayA9IDA7XG5cbiAgY29uc3Qgc2VsZiA9IHRoaXM7XG5cbiAgLyoqXG4gICAqIENhbGxlZCB3aGVuIGEgY2h1bmsgZmlyZXMgYSAnbG9hZGNvbXBsZXRlJyBldmVudC5cbiAgICpcbiAgICogQHBhcmFtIHtFcnJvcn0gZXJyXG4gICAqIEBwYXJhbSB7Q2h1bmt9IGNodW5rXG4gICAqL1xuICBjb25zdCBvbkxvYWRDb21wbGV0ZSA9IGZ1bmN0aW9uIChlcnIsIGNodW5rKSB7XG4gICAgLy8gdW5zdWJzY3JpYmUgZnJvbSB0aGUgJ2xvYWRjb21wbGV0ZScgZXZlbnRcbiAgICBjaHVuay5yZW1vdmVMaXN0ZW5lcignbG9hZGNvbXBsZXRlJywgb25Mb2FkQ29tcGxldGUpO1xuXG4gICAgLy8gaWYgdGhlIGNodW5rIGxvYWQgc3VjY2VlZGVkXG4gICAgaWYgKCFlcnIpIHtcbiAgICAgIC8vIE1vdmUgb24gdG8gdGhlIG5leHQgY2h1bmtcbiAgICAgIGN1cnJDaHVuaysrO1xuXG4gICAgICAvLyBlbWl0IGFuIGV2ZW50IHRvIHNpZ25hbCB0aGF0IG5ldyBkYXRhIGlzIGF2YWlsYWJsZVxuICAgICAgc2VsZi5lbWl0KCdkYXRhJywgY2h1bmspO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBjbG9zZSB0aGUgc3RyZWFtIHdpdGggYW4gZXJyb3I7IGFsc28sIGluY2x1ZGUgYSBjYWxsYmFjayB3aGVuIGVtaXR0aW5nXG4gICAgICAvLyB0aGUgZXZlbnQgaW4gY2FzZSBzb21lb25lIHdhbnRzIHRvIGZpeCB0aGUgcHJvYmxlbSBhbmQgYXNrIHVzIHRvXG4gICAgICAvLyBjb250aW51ZSBmcm9tIHdoZXJlIHdlIGdvdCBpbnRlcnJ1cHRlZFxuICAgICAgY2xvc2Uoc2VsZiwgZXJyLCBkb0xvYWQpO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogSWRlbnRpZmllcyB0aGUgbmV4dCBjaHVuayB0byBsb2FkIGFuZCBpc3N1ZXMgcmVxdWVzdHMgdG8gZmV0Y2ggYm90aCBpdHNcbiAgICogY29udGVudHMgcGx1cyB0aGUgY29udGVudHMgb2YgdGhlIG5leHQgZmV3IGNodW5rcy4gSWYgdGhlcmUgYXJlIG5vIG1vcmVcbiAgICogY2h1bmtzIHRvIGxvYWQsIGEgJ2Nsb3NlJyBldmVudCBpcyBmaXJlZCBvbiB0aGUgc3RyZWFtIHRvIG5vdGlmeVxuICAgKiBzdWJzY3JpYmVycyB0aGF0IGFsbCB0aGUgY2h1bmtzIGhhdmUgYmVlbiBzdWNjZXNzZnVsbHkgcmVhZC5cbiAgICovXG4gIGNvbnN0IGRvTG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAvLyBBbGwgY2h1bmtzIHdlcmUgbG9hZGVkLCB3ZSdyZSBkb25lXG4gICAgaWYgKGN1cnJDaHVuayA+PSBjaHVua3MubGVuZ3RoKSB7XG4gICAgICBzZWxmLmFzeW5jQ2xvc2UoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gU3Vic2NyaWJlIHRvIHRoZSBsb2FkY29tcGxldGUgZXZlbnQgb24gdGhlIGN1cnJlbnQgY2h1bmsgYmVpbmcgc3RyZWFtZWQgdG8gZW5zdXJlIHRoZVxuICAgICAgLy8gcm93cyBhcmUgcmV0dXJuZWQgaW4gdGhlIGNvcnJlY3Qgb3JkZXIgYW5kIG5vdCBpbiB0aGUgb3JkZXIgY2h1bmsgZGF0YSBhcmUgcmVjZWl2ZWRcbiAgICAgIGNodW5rc1tjdXJyQ2h1bmtdLm9uKCdsb2FkY29tcGxldGUnLCBvbkxvYWRDb21wbGV0ZSk7XG5cbiAgICAgIC8vIEZpcmUgb2ZmIHJlcXVlc3RzIHRvIGxvYWQgYWxsIHRoZSBjaHVua3MgaW4gdGhlIGJ1ZmZlciB0aGF0IGFyZW4ndCBhbHJlYWR5IGxvYWRpbmdcbiAgICAgIGxldCBjaHVuaywgaW5kZXg7XG4gICAgICBmb3IgKGluZGV4ID0gY3VyckNodW5rOyBpbmRleCA8IGNodW5rcy5sZW5ndGggJiYgaW5kZXggPD0gKGN1cnJDaHVuayArIHByZWZldGNoU2l6ZSk7IGluZGV4KyspIHtcbiAgICAgICAgY2h1bmsgPSBjaHVua3NbaW5kZXhdO1xuICAgICAgICBpZiAoIWNodW5rLmlzTG9hZGluZygpKSB7XG4gICAgICAgICAgY2h1bmsubG9hZCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBSZWFkcyB0aGUgbmV4dCBjaHVuayBvZiBkYXRhIGluIHRoZSByZXN1bHQgc3RyZWFtLlxuICAgKi9cbiAgdGhpcy5yZWFkID0gZnVuY3Rpb24gKCkge1xuICAgIC8vIFRPRE86IGlmIHRoZXJlIGFyZSBubyBtb3JlIGNodW5rcyB0byByZWFkLCBzaG91bGQgd2UgcmFpc2UgYW4gZXJyb3I/XG4gICAgLy8gVE9ETzogd2hhdCBpZiB3ZSdyZSBhbHJlYWR5IGluIHRoZSBtaWRkbGUgb2YgYSByZWFkP1xuXG4gICAgLy8gcmVhZCB0aGUgbmV4dCBjaHVua1xuICAgIGRvTG9hZCgpO1xuICB9O1xufVxuXG5VdGlsLmluaGVyaXRzKFJlc3VsdFN0cmVhbSwgRXZlbnRFbWl0dGVyKTtcblxuLyoqXG4gKiBBc3luY2hyb25vdXNseSBjbG9zZXMgdGhpcyBzdHJlYW0uXG4gKlxuICogQHJldHVybnMge1Jlc3VsdFN0cmVhbX1cbiAqL1xuUmVzdWx0U3RyZWFtLnByb3RvdHlwZS5hc3luY0Nsb3NlID0gZnVuY3Rpb24gKCkge1xuICAvLyBzY2hlZHVsZSBhbiBvcGVyYXRpb24gdG8gY2xvc2UgdGhlIHN0cmVhbSBpblxuICAvLyB0aGUgbmV4dCB0aWNrIG9mIHRoZSBldmVudCBsb29wXG4gIGNvbnN0IHNlbGYgPSB0aGlzO1xuICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICBjbG9zZShzZWxmKTtcbiAgfSk7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIENsb3NlcyBhIGdpdmVuIHJlc3VsdCBzdHJlYW0uXG4gKlxuICogQHBhcmFtIHtSZXN1bHRTdHJlYW19IHN0cmVhbSBUaGUgc3RyZWFtIHRvIGNsb3NlLlxuICogQHBhcmFtIHtFcnJvcn0gW2Vycl0gVGhlIGVycm9yLCBpZiBhbnksIHRvIGZpcmUgd2l0aCB0aGUgY2xvc2UgZXZlbnQuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIFRoZSBjYWxsYmFjaywgaWYgYW55LCB0byBmaXJlIHdpdGggdGhlIGNsb3NlXG4gKiAgIGV2ZW50LiBUaGlzIGlzIGluIGNhc2Ugc29tZW9uZSB3YW50cyB0byBmaXggdGhlIHByb2JsZW0gYW5kIGFzayB0aGUgc3RyZWFtXG4gKiAgIHRvIHJlc3VtZSBmcm9tIHRoZSBwb2ludCBvZiBpbnRlcnJ1cHRpb24uXG4gKi9cbmZ1bmN0aW9uIGNsb3NlKHN0cmVhbSwgZXJyLCBjYWxsYmFjaykge1xuICBzdHJlYW0uZW1pdCgnY2xvc2UnLCBlcnIsIGNhbGxiYWNrKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBSZXN1bHRTdHJlYW07Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/lib/connection/result/result_stream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/lib/connection/result/row_stream.js":
/*!************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/lib/connection/result/row_stream.js ***!
  \************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Readable = (__webpack_require__(/*! stream */ \"stream\").Readable);\nconst Util = __webpack_require__(/*! ../../util */ \"(rsc)/./node_modules/snowflake-sdk/lib/util.js\");\nconst Errors = __webpack_require__(/*! ../../errors */ \"(rsc)/./node_modules/snowflake-sdk/lib/errors.js\");\nconst ResultStream = __webpack_require__(/*! ./result_stream */ \"(rsc)/./node_modules/snowflake-sdk/lib/connection/result/result_stream.js\");\nconst DataTypes = __webpack_require__(/*! ./data_types */ \"(rsc)/./node_modules/snowflake-sdk/lib/connection/result/data_types.js\");\nconst RowMode = __webpack_require__(/*! ./../../constants/row_mode */ \"(rsc)/./node_modules/snowflake-sdk/lib/constants/row_mode.js\");\n\n/**\n * Creates a stream that can be used to read a statement result row by row.\n *\n * @param {Object} statement\n * @param {Object} context\n * @param {Object} options\n * @constructor\n */\nfunction RowStream(statement, context, options) {\n  // validate non-user-specified arguments\n  Errors.assertInternal(Util.exists(statement));\n  Errors.assertInternal(Util.exists(context));\n\n  // call Readable constructor\n  Readable.call(this,\n    {\n      objectMode: true,\n      highWaterMark: context.connectionConfig.getRowStreamHighWaterMark()\n    });\n\n  // extract streaming options\n  let start, end, fetchAsString, rowMode;\n  if (Util.isObject(options)) {\n    start = options.start;\n    end = options.end;\n    fetchAsString = options.fetchAsString;\n  }\n\n  // if a fetchAsString value is not specified in the stream options, try the\n  // statement and connection options (in that order)\n  if (!Util.exists(fetchAsString)) {\n    fetchAsString = context.fetchAsString;\n  }\n  if (!Util.exists(fetchAsString)) {\n    fetchAsString = context.connectionConfig.getFetchAsString();\n  }\n  if (!Util.exists(rowMode)) {\n    rowMode = context.rowMode || context.connectionConfig.getRowMode();\n  }\n\n  let resultStream = null, numResultStreamInterrupts = 0;\n  let rowBuffer = null, rowIndex = 0;\n  let columns, mapColumnIdToExtractFnName;\n  let initialized = false;\n  let previousChunk = null;\n\n  const self = this;\n\n  /**\n   * Reads the next row in the result.\n   *\n   * @private\n   */\n  this._read = function () {\n    // if the stream has been initialized, just read the next row\n    if (initialized) {\n      readNextRow();\n    } else if (context.isFetchingResult) {\n      // if we're still fetching the result, wait for the operation to complete\n      context.on('statement-complete', init);\n    } else if (context.result || isStatementErrorFatal(context)) {\n      // if we have a result or a fatal error, call init() in the next tick of\n      // the event loop\n      process.nextTick(init);\n    } else {\n      if (typeof context.multiResultIds === 'undefined') {\n        // fetch the result again and call init() upon completion of the operation\n        context.refresh(init);\n      } else {\n        //do nothing\n      }\n    }\n  };\n\n  /**\n   * Initializes this stream.\n   */\n  const init = function init() {\n    // the stream has now been initialized\n    initialized = true;\n\n    // if we have a result\n    if (context.result) {\n      // if no value was specified for the start index or if the specified start\n      // index is negative, default to 0, otherwise truncate the fractional part\n      start = (!Util.isNumber(start) || (start < 0)) ? 0 : Math.floor(start);\n\n      // if no value was specified for the end index or if the end index is\n      // larger than the row index of the last row, default to the index of the\n      // last row, otherwise truncate the fractional part\n      const returnedRows = context.result.getReturnedRows();\n      end = (!Util.isNumber(end) || (end >= returnedRows)) ? returnedRows - 1 :\n        Math.floor(end);\n\n      // find all the chunks that overlap with the specified range\n      const overlappingChunks = context.result.findOverlappingChunks(start, end);\n\n      // if no chunks overlap or start is greater than end, we're done\n      if ((overlappingChunks.length === 0) || (start > end)) {\n        process.nextTick(close);\n      } else {\n        // create a result stream from the overlapping chunks\n        resultStream = new ResultStream(\n          {\n            chunks: overlappingChunks,\n            prefetchSize: context.connectionConfig.getResultPrefetch()\n          });\n\n        readNextRow();\n      }\n    } else {\n      close(context.resultError);\n    }\n  };\n\n  /**\n   * Processes the row buffer.\n   */\n  const processRowBuffer = function processRowBuffer() {\n    // get the row to add to the read queue\n    let row = rowBuffer[rowIndex++];\n\n    // if we just read the last row in the row buffer, clear the row buffer and\n    // reset the row index so that we load the next chunk in the result stream\n    // when _read() is called\n    if (rowIndex === rowBuffer.length) {\n      rowBuffer = null;\n      rowIndex = 0;\n    }\n\n    // initialize the columns and column-related maps if necessary\n    if (!columns) {\n      columns = statement.getColumns();\n    }\n    if (!mapColumnIdToExtractFnName) {\n      mapColumnIdToExtractFnName =\n        buildMapColumnExtractFnNames(columns, fetchAsString);\n    }\n\n    // add the next row to the read queue\n    process.nextTick(function () {\n      // check if there are still rows available in the rowBuffer\n      if (rowBuffer && rowIndex > 0) {\n        rowIndex--; // decrement the index to include the previous row in the while loop\n\n        // push() data to readable stream until highWaterMark threshold is reached or all rows are pushed\n        while (rowIndex < rowBuffer.length) {\n          row = rowBuffer[rowIndex++];\n\n          // if buffer has reached the threshold based on the highWaterMark value then\n          // push() will return false and pause sending data to the buffer until the data is read from the buffer\n          if (!self.push(externalizeRow(row, columns, mapColumnIdToExtractFnName, rowMode))) {\n            break;\n          }\n        }\n\n        // check if all rows in rowBuffer has been pushed to the readable stream\n        if (rowIndex === rowBuffer.length) {\n          // reset the buffer and index\n          rowBuffer = null;\n          rowIndex = 0;\n        }\n      } else {\n        // No more rows left in the buffer\n        // Push the last row in the buffer\n        self.push(externalizeRow(row, columns, mapColumnIdToExtractFnName, rowMode));\n      }\n    });\n  };\n\n  /**\n   * Called when the result stream reads a new chunk.\n   *\n   * @param {Chunk} chunk\n   */\n  const onResultStreamData = function onResultStreamData(chunk) {\n    // unsubscribe from the result stream's 'data' and 'close' events\n    resultStream.removeListener('data', onResultStreamData);\n    resultStream.removeListener('close', onResultStreamClose);\n\n    // get all the rows in the chunk that overlap with the requested window,\n    // and use the resulting array as the new row buffer\n    const chunkStart = chunk.getStartIndex();\n    const chunkEnd = chunk.getEndIndex();\n    rowBuffer = chunk.getRows().slice(\n      Math.max(chunkStart, start) - chunkStart,\n      Math.min(chunkEnd, end) + 1 - chunkStart);\n\n    // reset the row index\n    rowIndex = 0;\n\n    // process the row buffer\n    processRowBuffer();\n\n    if (previousChunk && (previousChunk !== chunk)) {\n      previousChunk.clearRows();\n    }\n\n    previousChunk = chunk;\n  };\n\n  /**\n   * Called when there are no more chunks to read in the result stream or an\n   * error is encountered while trying to read the next chunk.\n   *\n   * @param err\n   * @param continueCallback\n   */\n  const onResultStreamClose = function onResultStreamClose(err, continueCallback) {\n    // if the error is retryable and\n    // the result stream hasn't been closed too many times\n    if (isResultStreamErrorRetryable(err) &&\n      (numResultStreamInterrupts <\n        context.connectionConfig.getResultStreamInterrupts())) {\n      numResultStreamInterrupts++;\n\n      // fetch the statement result again\n      context.refresh(function () {\n        if (context.resultError) {\n          close(context.resultError);\n        } else {\n          continueCallback();\n        }\n      });\n    } else {\n      close(err);\n    }\n  };\n\n  /**\n   * Closes the row stream.\n   *\n   * @param {Error} [err]\n   */\n  const close = function (err) {\n    // if we have a result stream, stop listening to events on it\n    if (resultStream) {\n      resultStream.removeListener('data', onResultStreamData);\n      resultStream.removeListener('close', onResultStreamClose);\n    }\n\n    // we're done, so time to clean up\n    rowBuffer = null;\n    rowIndex = 0;\n    resultStream = null;\n    numResultStreamInterrupts = 0;\n    if (previousChunk) {\n      previousChunk.clearRows();\n      previousChunk = null;\n    }\n\n    if (err) {\n      emitError(err);\n    } else {\n      self.push(null);\n    }\n  };\n\n  /**\n   * Called when we're ready to read the next row in the result.\n   */\n  const readNextRow = function readNextRow() {\n    // if we have a row buffer, process it\n    if (rowBuffer) {\n      processRowBuffer();\n    } else {\n      // subscribe to the result stream's 'data' and 'close' events\n      resultStream.on('data', onResultStreamData);\n      resultStream.on('close', onResultStreamClose);\n\n      // issue a request to fetch the next chunk in the result stream\n      resultStream.read();\n    }\n  };\n\n  /**\n   * Externalizes an error and emits it.\n   *\n   * @param {Error} err\n   */\n  const emitError = function emitError(err) {\n    self.emit('error', Errors.externalize(err));\n  };\n}\n\nUtil.inherits(RowStream, Readable);\n\n/**\n * Determines if a statement error is fatal.\n *\n * @returns {Boolean}\n * @param context\n */\nfunction isStatementErrorFatal(context) {\n  const error = context.resultError;\n  return (Errors.isOperationFailedError(error) && error.sqlState) || isFileUploadError(error, context.type);\n}\n\nfunction isFileUploadError(error, contextType) {\n  return error && contextType === 'FILE_PRE_EXEC';\n}\n\n/**\n * Determines if a result stream error is a retryable error.\n *\n * @param {Error} error\n * @returns {Boolean}\n */\nfunction isResultStreamErrorRetryable(error) {\n  return (Errors.isLargeResultSetError(error) && error.response &&\n    (error.response.statusCode === 403)) || (error && (error.code === 'ECONNRESET' || error.code === 'ETIMEDOUT'));\n}\n\n/**\n * Builds a map in which the keys are column ids and the values are the names of\n * the extract functions to use when retrieving row values for the corresponding\n * columns.\n *\n * @param {Object[]} columns\n * @param {String[]} fetchAsString the native types that should be retrieved as\n *   strings.\n *\n * @returns {Object}\n */\nfunction buildMapColumnExtractFnNames(columns, fetchAsString) {\n  const fnNameGetColumnValue = 'getColumnValue';\n  const fnNameGetColumnValueAsString = 'getColumnValueAsString';\n\n  let index, length, column;\n  const mapColumnIdToExtractFnName = {};\n\n  // if no native types need to be retrieved as strings, extract values normally\n  if (!Util.exists(fetchAsString)) {\n    for (index = 0, length = columns.length; index < length; index++) {\n      column = columns[index];\n      mapColumnIdToExtractFnName[column.getId()] = fnNameGetColumnValue;\n    }\n  } else {\n    // build a map that contains all the native types that need to be\n    // retrieved as strings when extracting column values from rows\n    const nativeTypesMap = {};\n    for (index = 0, length = fetchAsString.length; index < length; index++) {\n      nativeTypesMap[fetchAsString[index].toUpperCase()] = true;\n    }\n\n    // for each column, pick the appropriate extract function\n    // based on whether the value needs to be retrieved as a string\n    for (index = 0, length = columns.length; index < length; index++) {\n      column = columns[index];\n      mapColumnIdToExtractFnName[column.getId()] =\n        nativeTypesMap[DataTypes.toNativeType(column.getType())] ?\n          fnNameGetColumnValueAsString : fnNameGetColumnValue;\n    }\n  }\n\n  return mapColumnIdToExtractFnName;\n}\n\n/**\n * Converts an internal representation of a result row to a format appropriate\n * for consumption by the outside world.\n *\n * @param {Object} row\n * @param {Object[]} columns\n * @param {Object} [mapColumnIdToExtractFnName]\n * @param {String?} rowMode - string value ('array', 'object' or 'object_with_renamed_duplicated_columns'). Default is 'object' when parameter isn't set.\n *\n * @returns {Object}\n */\nfunction externalizeRow(row, columns, mapColumnIdToExtractFnName, rowMode) {\n  const isArrayRowMode = rowMode === RowMode.ARRAY;\n\n  const externalizedRow = isArrayRowMode ? [] : {};\n\n  for (let index = 0, length = columns.length; index < length; index++) {\n    const column = columns[index];\n    const extractFnName = mapColumnIdToExtractFnName[column.getId()];\n    externalizedRow[isArrayRowMode ? index : column.getName()] = row[extractFnName](column.getId());\n  }\n\n  return externalizedRow;\n}\n\nmodule.exports = RowStream;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9saWIvY29ubmVjdGlvbi9yZXN1bHQvcm93X3N0cmVhbS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxpQkFBaUIsc0RBQTBCO0FBQzNDLGFBQWEsbUJBQU8sQ0FBQyxrRUFBWTtBQUNqQyxlQUFlLG1CQUFPLENBQUMsc0VBQWM7QUFDckMscUJBQXFCLG1CQUFPLENBQUMsa0dBQWlCO0FBQzlDLGtCQUFrQixtQkFBTyxDQUFDLDRGQUFjO0FBQ3hDLGdCQUFnQixtQkFBTyxDQUFDLGdHQUE0Qjs7QUFFcEQ7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVzs7QUFFWDtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjs7QUFFcEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBLE9BQU87QUFDUCxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxVQUFVO0FBQ3JCLFdBQVcsVUFBVTtBQUNyQjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDZDQUE2QyxnQkFBZ0I7QUFDN0Q7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRCxnQkFBZ0I7QUFDbkU7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsNkNBQTZDLGdCQUFnQjtBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFVBQVU7QUFDckIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsU0FBUztBQUNwQjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsK0NBQStDLGdCQUFnQjtBQUMvRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyIvVXNlcnMvdmljdG9yd2lsc29uL0Rlc2t0b3AvcHJvamVjdHMvRVpWaXovbm9kZV9tb2R1bGVzL3Nub3dmbGFrZS1zZGsvbGliL2Nvbm5lY3Rpb24vcmVzdWx0L3Jvd19zdHJlYW0uanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgUmVhZGFibGUgPSByZXF1aXJlKCdzdHJlYW0nKS5SZWFkYWJsZTtcbmNvbnN0IFV0aWwgPSByZXF1aXJlKCcuLi8uLi91dGlsJyk7XG5jb25zdCBFcnJvcnMgPSByZXF1aXJlKCcuLi8uLi9lcnJvcnMnKTtcbmNvbnN0IFJlc3VsdFN0cmVhbSA9IHJlcXVpcmUoJy4vcmVzdWx0X3N0cmVhbScpO1xuY29uc3QgRGF0YVR5cGVzID0gcmVxdWlyZSgnLi9kYXRhX3R5cGVzJyk7XG5jb25zdCBSb3dNb2RlID0gcmVxdWlyZSgnLi8uLi8uLi9jb25zdGFudHMvcm93X21vZGUnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgc3RyZWFtIHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVhZCBhIHN0YXRlbWVudCByZXN1bHQgcm93IGJ5IHJvdy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhdGVtZW50XG4gKiBAcGFyYW0ge09iamVjdH0gY29udGV4dFxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBSb3dTdHJlYW0oc3RhdGVtZW50LCBjb250ZXh0LCBvcHRpb25zKSB7XG4gIC8vIHZhbGlkYXRlIG5vbi11c2VyLXNwZWNpZmllZCBhcmd1bWVudHNcbiAgRXJyb3JzLmFzc2VydEludGVybmFsKFV0aWwuZXhpc3RzKHN0YXRlbWVudCkpO1xuICBFcnJvcnMuYXNzZXJ0SW50ZXJuYWwoVXRpbC5leGlzdHMoY29udGV4dCkpO1xuXG4gIC8vIGNhbGwgUmVhZGFibGUgY29uc3RydWN0b3JcbiAgUmVhZGFibGUuY2FsbCh0aGlzLFxuICAgIHtcbiAgICAgIG9iamVjdE1vZGU6IHRydWUsXG4gICAgICBoaWdoV2F0ZXJNYXJrOiBjb250ZXh0LmNvbm5lY3Rpb25Db25maWcuZ2V0Um93U3RyZWFtSGlnaFdhdGVyTWFyaygpXG4gICAgfSk7XG5cbiAgLy8gZXh0cmFjdCBzdHJlYW1pbmcgb3B0aW9uc1xuICBsZXQgc3RhcnQsIGVuZCwgZmV0Y2hBc1N0cmluZywgcm93TW9kZTtcbiAgaWYgKFV0aWwuaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICBzdGFydCA9IG9wdGlvbnMuc3RhcnQ7XG4gICAgZW5kID0gb3B0aW9ucy5lbmQ7XG4gICAgZmV0Y2hBc1N0cmluZyA9IG9wdGlvbnMuZmV0Y2hBc1N0cmluZztcbiAgfVxuXG4gIC8vIGlmIGEgZmV0Y2hBc1N0cmluZyB2YWx1ZSBpcyBub3Qgc3BlY2lmaWVkIGluIHRoZSBzdHJlYW0gb3B0aW9ucywgdHJ5IHRoZVxuICAvLyBzdGF0ZW1lbnQgYW5kIGNvbm5lY3Rpb24gb3B0aW9ucyAoaW4gdGhhdCBvcmRlcilcbiAgaWYgKCFVdGlsLmV4aXN0cyhmZXRjaEFzU3RyaW5nKSkge1xuICAgIGZldGNoQXNTdHJpbmcgPSBjb250ZXh0LmZldGNoQXNTdHJpbmc7XG4gIH1cbiAgaWYgKCFVdGlsLmV4aXN0cyhmZXRjaEFzU3RyaW5nKSkge1xuICAgIGZldGNoQXNTdHJpbmcgPSBjb250ZXh0LmNvbm5lY3Rpb25Db25maWcuZ2V0RmV0Y2hBc1N0cmluZygpO1xuICB9XG4gIGlmICghVXRpbC5leGlzdHMocm93TW9kZSkpIHtcbiAgICByb3dNb2RlID0gY29udGV4dC5yb3dNb2RlIHx8IGNvbnRleHQuY29ubmVjdGlvbkNvbmZpZy5nZXRSb3dNb2RlKCk7XG4gIH1cblxuICBsZXQgcmVzdWx0U3RyZWFtID0gbnVsbCwgbnVtUmVzdWx0U3RyZWFtSW50ZXJydXB0cyA9IDA7XG4gIGxldCByb3dCdWZmZXIgPSBudWxsLCByb3dJbmRleCA9IDA7XG4gIGxldCBjb2x1bW5zLCBtYXBDb2x1bW5JZFRvRXh0cmFjdEZuTmFtZTtcbiAgbGV0IGluaXRpYWxpemVkID0gZmFsc2U7XG4gIGxldCBwcmV2aW91c0NodW5rID0gbnVsbDtcblxuICBjb25zdCBzZWxmID0gdGhpcztcblxuICAvKipcbiAgICogUmVhZHMgdGhlIG5leHQgcm93IGluIHRoZSByZXN1bHQuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLl9yZWFkID0gZnVuY3Rpb24gKCkge1xuICAgIC8vIGlmIHRoZSBzdHJlYW0gaGFzIGJlZW4gaW5pdGlhbGl6ZWQsIGp1c3QgcmVhZCB0aGUgbmV4dCByb3dcbiAgICBpZiAoaW5pdGlhbGl6ZWQpIHtcbiAgICAgIHJlYWROZXh0Um93KCk7XG4gICAgfSBlbHNlIGlmIChjb250ZXh0LmlzRmV0Y2hpbmdSZXN1bHQpIHtcbiAgICAgIC8vIGlmIHdlJ3JlIHN0aWxsIGZldGNoaW5nIHRoZSByZXN1bHQsIHdhaXQgZm9yIHRoZSBvcGVyYXRpb24gdG8gY29tcGxldGVcbiAgICAgIGNvbnRleHQub24oJ3N0YXRlbWVudC1jb21wbGV0ZScsIGluaXQpO1xuICAgIH0gZWxzZSBpZiAoY29udGV4dC5yZXN1bHQgfHwgaXNTdGF0ZW1lbnRFcnJvckZhdGFsKGNvbnRleHQpKSB7XG4gICAgICAvLyBpZiB3ZSBoYXZlIGEgcmVzdWx0IG9yIGEgZmF0YWwgZXJyb3IsIGNhbGwgaW5pdCgpIGluIHRoZSBuZXh0IHRpY2sgb2ZcbiAgICAgIC8vIHRoZSBldmVudCBsb29wXG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGluaXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodHlwZW9mIGNvbnRleHQubXVsdGlSZXN1bHRJZHMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIC8vIGZldGNoIHRoZSByZXN1bHQgYWdhaW4gYW5kIGNhbGwgaW5pdCgpIHVwb24gY29tcGxldGlvbiBvZiB0aGUgb3BlcmF0aW9uXG4gICAgICAgIGNvbnRleHQucmVmcmVzaChpbml0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vZG8gbm90aGluZ1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhpcyBzdHJlYW0uXG4gICAqL1xuICBjb25zdCBpbml0ID0gZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAvLyB0aGUgc3RyZWFtIGhhcyBub3cgYmVlbiBpbml0aWFsaXplZFxuICAgIGluaXRpYWxpemVkID0gdHJ1ZTtcblxuICAgIC8vIGlmIHdlIGhhdmUgYSByZXN1bHRcbiAgICBpZiAoY29udGV4dC5yZXN1bHQpIHtcbiAgICAgIC8vIGlmIG5vIHZhbHVlIHdhcyBzcGVjaWZpZWQgZm9yIHRoZSBzdGFydCBpbmRleCBvciBpZiB0aGUgc3BlY2lmaWVkIHN0YXJ0XG4gICAgICAvLyBpbmRleCBpcyBuZWdhdGl2ZSwgZGVmYXVsdCB0byAwLCBvdGhlcndpc2UgdHJ1bmNhdGUgdGhlIGZyYWN0aW9uYWwgcGFydFxuICAgICAgc3RhcnQgPSAoIVV0aWwuaXNOdW1iZXIoc3RhcnQpIHx8IChzdGFydCA8IDApKSA/IDAgOiBNYXRoLmZsb29yKHN0YXJ0KTtcblxuICAgICAgLy8gaWYgbm8gdmFsdWUgd2FzIHNwZWNpZmllZCBmb3IgdGhlIGVuZCBpbmRleCBvciBpZiB0aGUgZW5kIGluZGV4IGlzXG4gICAgICAvLyBsYXJnZXIgdGhhbiB0aGUgcm93IGluZGV4IG9mIHRoZSBsYXN0IHJvdywgZGVmYXVsdCB0byB0aGUgaW5kZXggb2YgdGhlXG4gICAgICAvLyBsYXN0IHJvdywgb3RoZXJ3aXNlIHRydW5jYXRlIHRoZSBmcmFjdGlvbmFsIHBhcnRcbiAgICAgIGNvbnN0IHJldHVybmVkUm93cyA9IGNvbnRleHQucmVzdWx0LmdldFJldHVybmVkUm93cygpO1xuICAgICAgZW5kID0gKCFVdGlsLmlzTnVtYmVyKGVuZCkgfHwgKGVuZCA+PSByZXR1cm5lZFJvd3MpKSA/IHJldHVybmVkUm93cyAtIDEgOlxuICAgICAgICBNYXRoLmZsb29yKGVuZCk7XG5cbiAgICAgIC8vIGZpbmQgYWxsIHRoZSBjaHVua3MgdGhhdCBvdmVybGFwIHdpdGggdGhlIHNwZWNpZmllZCByYW5nZVxuICAgICAgY29uc3Qgb3ZlcmxhcHBpbmdDaHVua3MgPSBjb250ZXh0LnJlc3VsdC5maW5kT3ZlcmxhcHBpbmdDaHVua3Moc3RhcnQsIGVuZCk7XG5cbiAgICAgIC8vIGlmIG5vIGNodW5rcyBvdmVybGFwIG9yIHN0YXJ0IGlzIGdyZWF0ZXIgdGhhbiBlbmQsIHdlJ3JlIGRvbmVcbiAgICAgIGlmICgob3ZlcmxhcHBpbmdDaHVua3MubGVuZ3RoID09PSAwKSB8fCAoc3RhcnQgPiBlbmQpKSB7XG4gICAgICAgIHByb2Nlc3MubmV4dFRpY2soY2xvc2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gY3JlYXRlIGEgcmVzdWx0IHN0cmVhbSBmcm9tIHRoZSBvdmVybGFwcGluZyBjaHVua3NcbiAgICAgICAgcmVzdWx0U3RyZWFtID0gbmV3IFJlc3VsdFN0cmVhbShcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjaHVua3M6IG92ZXJsYXBwaW5nQ2h1bmtzLFxuICAgICAgICAgICAgcHJlZmV0Y2hTaXplOiBjb250ZXh0LmNvbm5lY3Rpb25Db25maWcuZ2V0UmVzdWx0UHJlZmV0Y2goKVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgIHJlYWROZXh0Um93KCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNsb3NlKGNvbnRleHQucmVzdWx0RXJyb3IpO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogUHJvY2Vzc2VzIHRoZSByb3cgYnVmZmVyLlxuICAgKi9cbiAgY29uc3QgcHJvY2Vzc1Jvd0J1ZmZlciA9IGZ1bmN0aW9uIHByb2Nlc3NSb3dCdWZmZXIoKSB7XG4gICAgLy8gZ2V0IHRoZSByb3cgdG8gYWRkIHRvIHRoZSByZWFkIHF1ZXVlXG4gICAgbGV0IHJvdyA9IHJvd0J1ZmZlcltyb3dJbmRleCsrXTtcblxuICAgIC8vIGlmIHdlIGp1c3QgcmVhZCB0aGUgbGFzdCByb3cgaW4gdGhlIHJvdyBidWZmZXIsIGNsZWFyIHRoZSByb3cgYnVmZmVyIGFuZFxuICAgIC8vIHJlc2V0IHRoZSByb3cgaW5kZXggc28gdGhhdCB3ZSBsb2FkIHRoZSBuZXh0IGNodW5rIGluIHRoZSByZXN1bHQgc3RyZWFtXG4gICAgLy8gd2hlbiBfcmVhZCgpIGlzIGNhbGxlZFxuICAgIGlmIChyb3dJbmRleCA9PT0gcm93QnVmZmVyLmxlbmd0aCkge1xuICAgICAgcm93QnVmZmVyID0gbnVsbDtcbiAgICAgIHJvd0luZGV4ID0gMDtcbiAgICB9XG5cbiAgICAvLyBpbml0aWFsaXplIHRoZSBjb2x1bW5zIGFuZCBjb2x1bW4tcmVsYXRlZCBtYXBzIGlmIG5lY2Vzc2FyeVxuICAgIGlmICghY29sdW1ucykge1xuICAgICAgY29sdW1ucyA9IHN0YXRlbWVudC5nZXRDb2x1bW5zKCk7XG4gICAgfVxuICAgIGlmICghbWFwQ29sdW1uSWRUb0V4dHJhY3RGbk5hbWUpIHtcbiAgICAgIG1hcENvbHVtbklkVG9FeHRyYWN0Rm5OYW1lID1cbiAgICAgICAgYnVpbGRNYXBDb2x1bW5FeHRyYWN0Rm5OYW1lcyhjb2x1bW5zLCBmZXRjaEFzU3RyaW5nKTtcbiAgICB9XG5cbiAgICAvLyBhZGQgdGhlIG5leHQgcm93IHRvIHRoZSByZWFkIHF1ZXVlXG4gICAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBjaGVjayBpZiB0aGVyZSBhcmUgc3RpbGwgcm93cyBhdmFpbGFibGUgaW4gdGhlIHJvd0J1ZmZlclxuICAgICAgaWYgKHJvd0J1ZmZlciAmJiByb3dJbmRleCA+IDApIHtcbiAgICAgICAgcm93SW5kZXgtLTsgLy8gZGVjcmVtZW50IHRoZSBpbmRleCB0byBpbmNsdWRlIHRoZSBwcmV2aW91cyByb3cgaW4gdGhlIHdoaWxlIGxvb3BcblxuICAgICAgICAvLyBwdXNoKCkgZGF0YSB0byByZWFkYWJsZSBzdHJlYW0gdW50aWwgaGlnaFdhdGVyTWFyayB0aHJlc2hvbGQgaXMgcmVhY2hlZCBvciBhbGwgcm93cyBhcmUgcHVzaGVkXG4gICAgICAgIHdoaWxlIChyb3dJbmRleCA8IHJvd0J1ZmZlci5sZW5ndGgpIHtcbiAgICAgICAgICByb3cgPSByb3dCdWZmZXJbcm93SW5kZXgrK107XG5cbiAgICAgICAgICAvLyBpZiBidWZmZXIgaGFzIHJlYWNoZWQgdGhlIHRocmVzaG9sZCBiYXNlZCBvbiB0aGUgaGlnaFdhdGVyTWFyayB2YWx1ZSB0aGVuXG4gICAgICAgICAgLy8gcHVzaCgpIHdpbGwgcmV0dXJuIGZhbHNlIGFuZCBwYXVzZSBzZW5kaW5nIGRhdGEgdG8gdGhlIGJ1ZmZlciB1bnRpbCB0aGUgZGF0YSBpcyByZWFkIGZyb20gdGhlIGJ1ZmZlclxuICAgICAgICAgIGlmICghc2VsZi5wdXNoKGV4dGVybmFsaXplUm93KHJvdywgY29sdW1ucywgbWFwQ29sdW1uSWRUb0V4dHJhY3RGbk5hbWUsIHJvd01vZGUpKSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gY2hlY2sgaWYgYWxsIHJvd3MgaW4gcm93QnVmZmVyIGhhcyBiZWVuIHB1c2hlZCB0byB0aGUgcmVhZGFibGUgc3RyZWFtXG4gICAgICAgIGlmIChyb3dJbmRleCA9PT0gcm93QnVmZmVyLmxlbmd0aCkge1xuICAgICAgICAgIC8vIHJlc2V0IHRoZSBidWZmZXIgYW5kIGluZGV4XG4gICAgICAgICAgcm93QnVmZmVyID0gbnVsbDtcbiAgICAgICAgICByb3dJbmRleCA9IDA7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE5vIG1vcmUgcm93cyBsZWZ0IGluIHRoZSBidWZmZXJcbiAgICAgICAgLy8gUHVzaCB0aGUgbGFzdCByb3cgaW4gdGhlIGJ1ZmZlclxuICAgICAgICBzZWxmLnB1c2goZXh0ZXJuYWxpemVSb3cocm93LCBjb2x1bW5zLCBtYXBDb2x1bW5JZFRvRXh0cmFjdEZuTmFtZSwgcm93TW9kZSkpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiB0aGUgcmVzdWx0IHN0cmVhbSByZWFkcyBhIG5ldyBjaHVuay5cbiAgICpcbiAgICogQHBhcmFtIHtDaHVua30gY2h1bmtcbiAgICovXG4gIGNvbnN0IG9uUmVzdWx0U3RyZWFtRGF0YSA9IGZ1bmN0aW9uIG9uUmVzdWx0U3RyZWFtRGF0YShjaHVuaykge1xuICAgIC8vIHVuc3Vic2NyaWJlIGZyb20gdGhlIHJlc3VsdCBzdHJlYW0ncyAnZGF0YScgYW5kICdjbG9zZScgZXZlbnRzXG4gICAgcmVzdWx0U3RyZWFtLnJlbW92ZUxpc3RlbmVyKCdkYXRhJywgb25SZXN1bHRTdHJlYW1EYXRhKTtcbiAgICByZXN1bHRTdHJlYW0ucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgb25SZXN1bHRTdHJlYW1DbG9zZSk7XG5cbiAgICAvLyBnZXQgYWxsIHRoZSByb3dzIGluIHRoZSBjaHVuayB0aGF0IG92ZXJsYXAgd2l0aCB0aGUgcmVxdWVzdGVkIHdpbmRvdyxcbiAgICAvLyBhbmQgdXNlIHRoZSByZXN1bHRpbmcgYXJyYXkgYXMgdGhlIG5ldyByb3cgYnVmZmVyXG4gICAgY29uc3QgY2h1bmtTdGFydCA9IGNodW5rLmdldFN0YXJ0SW5kZXgoKTtcbiAgICBjb25zdCBjaHVua0VuZCA9IGNodW5rLmdldEVuZEluZGV4KCk7XG4gICAgcm93QnVmZmVyID0gY2h1bmsuZ2V0Um93cygpLnNsaWNlKFxuICAgICAgTWF0aC5tYXgoY2h1bmtTdGFydCwgc3RhcnQpIC0gY2h1bmtTdGFydCxcbiAgICAgIE1hdGgubWluKGNodW5rRW5kLCBlbmQpICsgMSAtIGNodW5rU3RhcnQpO1xuXG4gICAgLy8gcmVzZXQgdGhlIHJvdyBpbmRleFxuICAgIHJvd0luZGV4ID0gMDtcblxuICAgIC8vIHByb2Nlc3MgdGhlIHJvdyBidWZmZXJcbiAgICBwcm9jZXNzUm93QnVmZmVyKCk7XG5cbiAgICBpZiAocHJldmlvdXNDaHVuayAmJiAocHJldmlvdXNDaHVuayAhPT0gY2h1bmspKSB7XG4gICAgICBwcmV2aW91c0NodW5rLmNsZWFyUm93cygpO1xuICAgIH1cblxuICAgIHByZXZpb3VzQ2h1bmsgPSBjaHVuaztcbiAgfTtcblxuICAvKipcbiAgICogQ2FsbGVkIHdoZW4gdGhlcmUgYXJlIG5vIG1vcmUgY2h1bmtzIHRvIHJlYWQgaW4gdGhlIHJlc3VsdCBzdHJlYW0gb3IgYW5cbiAgICogZXJyb3IgaXMgZW5jb3VudGVyZWQgd2hpbGUgdHJ5aW5nIHRvIHJlYWQgdGhlIG5leHQgY2h1bmsuXG4gICAqXG4gICAqIEBwYXJhbSBlcnJcbiAgICogQHBhcmFtIGNvbnRpbnVlQ2FsbGJhY2tcbiAgICovXG4gIGNvbnN0IG9uUmVzdWx0U3RyZWFtQ2xvc2UgPSBmdW5jdGlvbiBvblJlc3VsdFN0cmVhbUNsb3NlKGVyciwgY29udGludWVDYWxsYmFjaykge1xuICAgIC8vIGlmIHRoZSBlcnJvciBpcyByZXRyeWFibGUgYW5kXG4gICAgLy8gdGhlIHJlc3VsdCBzdHJlYW0gaGFzbid0IGJlZW4gY2xvc2VkIHRvbyBtYW55IHRpbWVzXG4gICAgaWYgKGlzUmVzdWx0U3RyZWFtRXJyb3JSZXRyeWFibGUoZXJyKSAmJlxuICAgICAgKG51bVJlc3VsdFN0cmVhbUludGVycnVwdHMgPFxuICAgICAgICBjb250ZXh0LmNvbm5lY3Rpb25Db25maWcuZ2V0UmVzdWx0U3RyZWFtSW50ZXJydXB0cygpKSkge1xuICAgICAgbnVtUmVzdWx0U3RyZWFtSW50ZXJydXB0cysrO1xuXG4gICAgICAvLyBmZXRjaCB0aGUgc3RhdGVtZW50IHJlc3VsdCBhZ2FpblxuICAgICAgY29udGV4dC5yZWZyZXNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGNvbnRleHQucmVzdWx0RXJyb3IpIHtcbiAgICAgICAgICBjbG9zZShjb250ZXh0LnJlc3VsdEVycm9yKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb250aW51ZUNhbGxiYWNrKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjbG9zZShlcnIpO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQ2xvc2VzIHRoZSByb3cgc3RyZWFtLlxuICAgKlxuICAgKiBAcGFyYW0ge0Vycm9yfSBbZXJyXVxuICAgKi9cbiAgY29uc3QgY2xvc2UgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgLy8gaWYgd2UgaGF2ZSBhIHJlc3VsdCBzdHJlYW0sIHN0b3AgbGlzdGVuaW5nIHRvIGV2ZW50cyBvbiBpdFxuICAgIGlmIChyZXN1bHRTdHJlYW0pIHtcbiAgICAgIHJlc3VsdFN0cmVhbS5yZW1vdmVMaXN0ZW5lcignZGF0YScsIG9uUmVzdWx0U3RyZWFtRGF0YSk7XG4gICAgICByZXN1bHRTdHJlYW0ucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgb25SZXN1bHRTdHJlYW1DbG9zZSk7XG4gICAgfVxuXG4gICAgLy8gd2UncmUgZG9uZSwgc28gdGltZSB0byBjbGVhbiB1cFxuICAgIHJvd0J1ZmZlciA9IG51bGw7XG4gICAgcm93SW5kZXggPSAwO1xuICAgIHJlc3VsdFN0cmVhbSA9IG51bGw7XG4gICAgbnVtUmVzdWx0U3RyZWFtSW50ZXJydXB0cyA9IDA7XG4gICAgaWYgKHByZXZpb3VzQ2h1bmspIHtcbiAgICAgIHByZXZpb3VzQ2h1bmsuY2xlYXJSb3dzKCk7XG4gICAgICBwcmV2aW91c0NodW5rID0gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoZXJyKSB7XG4gICAgICBlbWl0RXJyb3IoZXJyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2VsZi5wdXNoKG51bGwpO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQ2FsbGVkIHdoZW4gd2UncmUgcmVhZHkgdG8gcmVhZCB0aGUgbmV4dCByb3cgaW4gdGhlIHJlc3VsdC5cbiAgICovXG4gIGNvbnN0IHJlYWROZXh0Um93ID0gZnVuY3Rpb24gcmVhZE5leHRSb3coKSB7XG4gICAgLy8gaWYgd2UgaGF2ZSBhIHJvdyBidWZmZXIsIHByb2Nlc3MgaXRcbiAgICBpZiAocm93QnVmZmVyKSB7XG4gICAgICBwcm9jZXNzUm93QnVmZmVyKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHN1YnNjcmliZSB0byB0aGUgcmVzdWx0IHN0cmVhbSdzICdkYXRhJyBhbmQgJ2Nsb3NlJyBldmVudHNcbiAgICAgIHJlc3VsdFN0cmVhbS5vbignZGF0YScsIG9uUmVzdWx0U3RyZWFtRGF0YSk7XG4gICAgICByZXN1bHRTdHJlYW0ub24oJ2Nsb3NlJywgb25SZXN1bHRTdHJlYW1DbG9zZSk7XG5cbiAgICAgIC8vIGlzc3VlIGEgcmVxdWVzdCB0byBmZXRjaCB0aGUgbmV4dCBjaHVuayBpbiB0aGUgcmVzdWx0IHN0cmVhbVxuICAgICAgcmVzdWx0U3RyZWFtLnJlYWQoKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEV4dGVybmFsaXplcyBhbiBlcnJvciBhbmQgZW1pdHMgaXQuXG4gICAqXG4gICAqIEBwYXJhbSB7RXJyb3J9IGVyclxuICAgKi9cbiAgY29uc3QgZW1pdEVycm9yID0gZnVuY3Rpb24gZW1pdEVycm9yKGVycikge1xuICAgIHNlbGYuZW1pdCgnZXJyb3InLCBFcnJvcnMuZXh0ZXJuYWxpemUoZXJyKSk7XG4gIH07XG59XG5cblV0aWwuaW5oZXJpdHMoUm93U3RyZWFtLCBSZWFkYWJsZSk7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyBpZiBhIHN0YXRlbWVudCBlcnJvciBpcyBmYXRhbC5cbiAqXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAqIEBwYXJhbSBjb250ZXh0XG4gKi9cbmZ1bmN0aW9uIGlzU3RhdGVtZW50RXJyb3JGYXRhbChjb250ZXh0KSB7XG4gIGNvbnN0IGVycm9yID0gY29udGV4dC5yZXN1bHRFcnJvcjtcbiAgcmV0dXJuIChFcnJvcnMuaXNPcGVyYXRpb25GYWlsZWRFcnJvcihlcnJvcikgJiYgZXJyb3Iuc3FsU3RhdGUpIHx8IGlzRmlsZVVwbG9hZEVycm9yKGVycm9yLCBjb250ZXh0LnR5cGUpO1xufVxuXG5mdW5jdGlvbiBpc0ZpbGVVcGxvYWRFcnJvcihlcnJvciwgY29udGV4dFR5cGUpIHtcbiAgcmV0dXJuIGVycm9yICYmIGNvbnRleHRUeXBlID09PSAnRklMRV9QUkVfRVhFQyc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lcyBpZiBhIHJlc3VsdCBzdHJlYW0gZXJyb3IgaXMgYSByZXRyeWFibGUgZXJyb3IuXG4gKlxuICogQHBhcmFtIHtFcnJvcn0gZXJyb3JcbiAqIEByZXR1cm5zIHtCb29sZWFufVxuICovXG5mdW5jdGlvbiBpc1Jlc3VsdFN0cmVhbUVycm9yUmV0cnlhYmxlKGVycm9yKSB7XG4gIHJldHVybiAoRXJyb3JzLmlzTGFyZ2VSZXN1bHRTZXRFcnJvcihlcnJvcikgJiYgZXJyb3IucmVzcG9uc2UgJiZcbiAgICAoZXJyb3IucmVzcG9uc2Uuc3RhdHVzQ29kZSA9PT0gNDAzKSkgfHwgKGVycm9yICYmIChlcnJvci5jb2RlID09PSAnRUNPTk5SRVNFVCcgfHwgZXJyb3IuY29kZSA9PT0gJ0VUSU1FRE9VVCcpKTtcbn1cblxuLyoqXG4gKiBCdWlsZHMgYSBtYXAgaW4gd2hpY2ggdGhlIGtleXMgYXJlIGNvbHVtbiBpZHMgYW5kIHRoZSB2YWx1ZXMgYXJlIHRoZSBuYW1lcyBvZlxuICogdGhlIGV4dHJhY3QgZnVuY3Rpb25zIHRvIHVzZSB3aGVuIHJldHJpZXZpbmcgcm93IHZhbHVlcyBmb3IgdGhlIGNvcnJlc3BvbmRpbmdcbiAqIGNvbHVtbnMuXG4gKlxuICogQHBhcmFtIHtPYmplY3RbXX0gY29sdW1uc1xuICogQHBhcmFtIHtTdHJpbmdbXX0gZmV0Y2hBc1N0cmluZyB0aGUgbmF0aXZlIHR5cGVzIHRoYXQgc2hvdWxkIGJlIHJldHJpZXZlZCBhc1xuICogICBzdHJpbmdzLlxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9XG4gKi9cbmZ1bmN0aW9uIGJ1aWxkTWFwQ29sdW1uRXh0cmFjdEZuTmFtZXMoY29sdW1ucywgZmV0Y2hBc1N0cmluZykge1xuICBjb25zdCBmbk5hbWVHZXRDb2x1bW5WYWx1ZSA9ICdnZXRDb2x1bW5WYWx1ZSc7XG4gIGNvbnN0IGZuTmFtZUdldENvbHVtblZhbHVlQXNTdHJpbmcgPSAnZ2V0Q29sdW1uVmFsdWVBc1N0cmluZyc7XG5cbiAgbGV0IGluZGV4LCBsZW5ndGgsIGNvbHVtbjtcbiAgY29uc3QgbWFwQ29sdW1uSWRUb0V4dHJhY3RGbk5hbWUgPSB7fTtcblxuICAvLyBpZiBubyBuYXRpdmUgdHlwZXMgbmVlZCB0byBiZSByZXRyaWV2ZWQgYXMgc3RyaW5ncywgZXh0cmFjdCB2YWx1ZXMgbm9ybWFsbHlcbiAgaWYgKCFVdGlsLmV4aXN0cyhmZXRjaEFzU3RyaW5nKSkge1xuICAgIGZvciAoaW5kZXggPSAwLCBsZW5ndGggPSBjb2x1bW5zLmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIGNvbHVtbiA9IGNvbHVtbnNbaW5kZXhdO1xuICAgICAgbWFwQ29sdW1uSWRUb0V4dHJhY3RGbk5hbWVbY29sdW1uLmdldElkKCldID0gZm5OYW1lR2V0Q29sdW1uVmFsdWU7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIGJ1aWxkIGEgbWFwIHRoYXQgY29udGFpbnMgYWxsIHRoZSBuYXRpdmUgdHlwZXMgdGhhdCBuZWVkIHRvIGJlXG4gICAgLy8gcmV0cmlldmVkIGFzIHN0cmluZ3Mgd2hlbiBleHRyYWN0aW5nIGNvbHVtbiB2YWx1ZXMgZnJvbSByb3dzXG4gICAgY29uc3QgbmF0aXZlVHlwZXNNYXAgPSB7fTtcbiAgICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gZmV0Y2hBc1N0cmluZy5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICBuYXRpdmVUeXBlc01hcFtmZXRjaEFzU3RyaW5nW2luZGV4XS50b1VwcGVyQ2FzZSgpXSA9IHRydWU7XG4gICAgfVxuXG4gICAgLy8gZm9yIGVhY2ggY29sdW1uLCBwaWNrIHRoZSBhcHByb3ByaWF0ZSBleHRyYWN0IGZ1bmN0aW9uXG4gICAgLy8gYmFzZWQgb24gd2hldGhlciB0aGUgdmFsdWUgbmVlZHMgdG8gYmUgcmV0cmlldmVkIGFzIGEgc3RyaW5nXG4gICAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IGNvbHVtbnMubGVuZ3RoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgY29sdW1uID0gY29sdW1uc1tpbmRleF07XG4gICAgICBtYXBDb2x1bW5JZFRvRXh0cmFjdEZuTmFtZVtjb2x1bW4uZ2V0SWQoKV0gPVxuICAgICAgICBuYXRpdmVUeXBlc01hcFtEYXRhVHlwZXMudG9OYXRpdmVUeXBlKGNvbHVtbi5nZXRUeXBlKCkpXSA/XG4gICAgICAgICAgZm5OYW1lR2V0Q29sdW1uVmFsdWVBc1N0cmluZyA6IGZuTmFtZUdldENvbHVtblZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBtYXBDb2x1bW5JZFRvRXh0cmFjdEZuTmFtZTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhbiBpbnRlcm5hbCByZXByZXNlbnRhdGlvbiBvZiBhIHJlc3VsdCByb3cgdG8gYSBmb3JtYXQgYXBwcm9wcmlhdGVcbiAqIGZvciBjb25zdW1wdGlvbiBieSB0aGUgb3V0c2lkZSB3b3JsZC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcm93XG4gKiBAcGFyYW0ge09iamVjdFtdfSBjb2x1bW5zXG4gKiBAcGFyYW0ge09iamVjdH0gW21hcENvbHVtbklkVG9FeHRyYWN0Rm5OYW1lXVxuICogQHBhcmFtIHtTdHJpbmc/fSByb3dNb2RlIC0gc3RyaW5nIHZhbHVlICgnYXJyYXknLCAnb2JqZWN0JyBvciAnb2JqZWN0X3dpdGhfcmVuYW1lZF9kdXBsaWNhdGVkX2NvbHVtbnMnKS4gRGVmYXVsdCBpcyAnb2JqZWN0JyB3aGVuIHBhcmFtZXRlciBpc24ndCBzZXQuXG4gKlxuICogQHJldHVybnMge09iamVjdH1cbiAqL1xuZnVuY3Rpb24gZXh0ZXJuYWxpemVSb3cocm93LCBjb2x1bW5zLCBtYXBDb2x1bW5JZFRvRXh0cmFjdEZuTmFtZSwgcm93TW9kZSkge1xuICBjb25zdCBpc0FycmF5Um93TW9kZSA9IHJvd01vZGUgPT09IFJvd01vZGUuQVJSQVk7XG5cbiAgY29uc3QgZXh0ZXJuYWxpemVkUm93ID0gaXNBcnJheVJvd01vZGUgPyBbXSA6IHt9O1xuXG4gIGZvciAobGV0IGluZGV4ID0gMCwgbGVuZ3RoID0gY29sdW1ucy5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgY29uc3QgY29sdW1uID0gY29sdW1uc1tpbmRleF07XG4gICAgY29uc3QgZXh0cmFjdEZuTmFtZSA9IG1hcENvbHVtbklkVG9FeHRyYWN0Rm5OYW1lW2NvbHVtbi5nZXRJZCgpXTtcbiAgICBleHRlcm5hbGl6ZWRSb3dbaXNBcnJheVJvd01vZGUgPyBpbmRleCA6IGNvbHVtbi5nZXROYW1lKCldID0gcm93W2V4dHJhY3RGbk5hbWVdKGNvbHVtbi5nZXRJZCgpKTtcbiAgfVxuXG4gIHJldHVybiBleHRlcm5hbGl6ZWRSb3c7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUm93U3RyZWFtOyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/lib/connection/result/row_stream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/lib/connection/result/sf_timestamp.js":
/*!**************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/lib/connection/result/sf_timestamp.js ***!
  \**************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Moment = __webpack_require__(/*! moment-timezone */ \"(rsc)/./node_modules/moment-timezone/index.js\");\nconst Util = __webpack_require__(/*! ../../util */ \"(rsc)/./node_modules/snowflake-sdk/lib/util.js\");\nconst datetimeFormatConverter = __webpack_require__(/*! ./datetime_format_converter */ \"(rsc)/./node_modules/snowflake-sdk/lib/connection/result/datetime_format_converter.js\");\n/**\n * Creates a new SfTimestamp instance.\n *\n * @param {Number} epochSeconds the epoch time in seconds.\n * @param {Number} nanoSeconds the number of nano seconds (incremental, not\n *   epoch).\n * @param {Number} scale the precision for the fractional part of the timestamp.\n * @param {String | Number} [timezone] the timezone name as a string\n *   (e.g. 'America/New_York') or the timezone offset in minutes (e.g. -240).\n * @param {String} [format] the SQL format to use to format the timestamp.\n * @constructor\n */\nfunction SfTimestamp(epochSeconds, nanoSeconds, scale, timezone, format) {\n  // pick reasonable defaults for the inputs if needed\n  epochSeconds = Util.isNumber(epochSeconds) ? epochSeconds : 0;\n  nanoSeconds = Util.isNumber(nanoSeconds) ? nanoSeconds : 0;\n  scale = Util.isNumber(scale) ? scale : 0;\n  format = Util.isString(format) ? format : '';\n\n  // save any information we'll need later\n  this.epochSeconds = epochSeconds;\n  this.nanoSeconds = nanoSeconds;\n  this.scale = scale;\n  this.timezone = timezone;\n  this.format = format;\n\n  // Milliseconds are truncated to avoid rounding issues, and the decimal part is not useful since Moment only supports milliseconds precision\n  const milliseconds = Math.trunc(nanoSeconds / 1000000);\n  let moment = Moment((epochSeconds * 1000) + milliseconds);\n\n  // set the moment's timezone\n  if (Util.isString(timezone)) {\n    moment = moment.tz(timezone);\n  } else if (Util.isNumber(timezone)) {\n    moment = moment.utcOffset(timezone);\n  }\n\n  // save the moment\n  this.moment = moment;\n}\n\n/**\n * Returns a string representing the specified SfTimestamp instance.\n *\n * @returns {String}\n */\nSfTimestamp.prototype.toString = function () {\n  // use cached value if possible\n  if (this._valueAsString) {\n    return this._valueAsString;\n  }\n\n  const moment = this.moment;\n  const nanoSeconds = this.nanoSeconds;\n  let scale = this.scale;\n  const formatSql = this.format;\n\n  // get an upper-case version of the input sql format\n  const formatSqlUpper = formatSql.toUpperCase();\n\n  const tags = datetimeFormatConverter.formatTagsMap();\n\n  // iterate over the format string\n  const length = formatSql.length;\n  let formatMoment = '';\n  for (let pos = 0; pos < length;) {\n    let tag = null;\n    let out = null;\n\n    // at each position, check if there's a tag at that position; if so, use\n    // 'out' as the replacement\n    for (let index = 0; index < tags.length; index++) {\n      if (formatSqlUpper.substr(pos).indexOf(tags[index][0]) === 0) {\n        tag = tags[index][0];\n        out = tags[index][1];\n        break;\n      }\n    }\n\n    // if we didn't find a match, just insert the character after escaping it\n    // (by wrapping it in square brackets)\n    if (out === null) {\n      formatMoment += '[' + formatSql[pos] + ']';\n      pos++;\n    } else {\n      // we found one of our special tags\n      if (out === '') {\n        if (tag === 'TZH') {\n          // format the moment to get the timezone string and extract the\n          // hours; for example, '-0700' will be converted to '-07'\n          out = moment.format('ZZ').substr(0, 3);\n        } else if (tag === 'TZM') {\n          // format the moment to get the timezone string and extract the\n          // minutes; for example, '-0700' will be converted to '00\n          out = moment.format('ZZ').substr(3);\n        } else if (tag === 'FF') {\n          // if 'FF' is followed by a digit, use the digit as the scale\n          let digit = null;\n          if (pos + tag.length < length) {\n            const matches = formatSql[pos + tag.length].match(/[0-9]/);\n            if (matches) {\n              digit = matches[0];\n            }\n          }\n          if (digit !== null) {\n            scale = digit;\n            pos++; // skip the digit as well\n          }\n\n          // if we need to include fractional seconds\n          if (scale > 0) {\n            // divide the nanoSeconds to get the requested number of\n            // meaningful digits\n            const scaled = Math.floor(nanoSeconds / Math.pow(10, 9 - scale));\n\n            // pad with the appropriate number of leading zeros\n            out = (new Array(9).join('0') + scaled).substr(-scale);\n          }\n        }\n      }\n\n      // append the 'out' text to the moment format and update the position\n      formatMoment += out;\n      pos += tag.length;\n    }\n  }\n  // format the moment and cache the result\n  const timezone = this.timezone.name || this.timezone;\n  if (timezone) {\n    if (typeof timezone === 'number') {\n      this._valueAsString = moment.utcOffset(timezone).format(formatMoment);\n    } else {\n      this._valueAsString = moment.tz(timezone).format(formatMoment);\n    }\n  } else {\n    this._valueAsString = moment.format(formatMoment);\n  }\n  return this._valueAsString;\n};\n\n/**\n * Converts this SfTimestamp to an SfDate that's just a normal JavaScript Date\n * with some additional methods like getEpochSeconds(), getNanoSeconds(),\n * getTimezone(), etc.\n *\n * @returns {Date}\n */\nSfTimestamp.prototype.toSfDate = function () {\n  // create a Date from the moment\n  const date = this.moment.toDate();\n\n  const self = this;\n\n  date.getEpochSeconds = function () {\n    return self.epochSeconds;\n  };\n\n  date.getNanoSeconds = function () {\n    return self.nanoSeconds;\n  };\n\n  date.getScale = function () {\n    return self.scale;\n  };\n\n  date.getTimezone = function () {\n    return self.timezone;\n  };\n\n  date.getFormat = function () {\n    return self.format;\n  };\n\n  date.toJSON = function () {\n    return self.toString();\n  };\n\n  return date;\n};\n\n/**\n * Converts this SfTimestamp to an SfTime, which is just a JavaScript Object\n * with some methods: getMidnightSeconds(), getNanoSeconds(), etc.\n *\n * @returns {Object}\n */\nSfTimestamp.prototype.toSfTime = function () {\n  const self = this;\n  return {\n    getMidnightSeconds: function () {\n      return self.epochSeconds;\n    },\n    getNanoSeconds: function () {\n      return self.nanoSeconds;\n    },\n    getScale: function () {\n      return self.scale;\n    },\n    getFormat: function () {\n      return self.format;\n    },\n    toJSON: function () {\n      return self.toString();\n    }\n  };\n};\n\nmodule.exports = SfTimestamp;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/lib/connection/result/sf_timestamp.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/lib/connection/result/statement_type.js":
/*!****************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/lib/connection/result/statement_type.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("exports.isDml = function (statementTypeId) {\n  return (statementTypeId >= 0x3000 && statementTypeId < 0x4000);\n};\n\nexports.isInsert = function (statementTypeId) {\n  return (statementTypeId === 0x3100);\n};\n\nexports.isUpdate = function (statementTypeId) {\n  return (statementTypeId === 0x3200);\n};\n\nexports.isDelete = function (statementTypeId) {\n  return (statementTypeId === 0x3300);\n};\n\nexports.isMerge = function (statementTypeId) {\n  return (statementTypeId === 0x3400);\n};\n\nexports.isMultiTableInsert = function (statementTypeId) {\n  return (statementTypeId === 0x3500);\n};\n\nexports.isDdl = function (statementTypeId) {\n  return (statementTypeId >= 0x6000);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9saWIvY29ubmVjdGlvbi9yZXN1bHQvc3RhdGVtZW50X3R5cGUuanMiLCJtYXBwaW5ncyI6IkFBQUEsYUFBYTtBQUNiO0FBQ0E7O0FBRUEsZ0JBQWdCO0FBQ2hCO0FBQ0E7O0FBRUEsZ0JBQWdCO0FBQ2hCO0FBQ0E7O0FBRUEsZ0JBQWdCO0FBQ2hCO0FBQ0E7O0FBRUEsZUFBZTtBQUNmO0FBQ0E7O0FBRUEsMEJBQTBCO0FBQzFCO0FBQ0E7O0FBRUEsYUFBYTtBQUNiO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWN0b3J3aWxzb24vRGVza3RvcC9wcm9qZWN0cy9FWlZpei9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9saWIvY29ubmVjdGlvbi9yZXN1bHQvc3RhdGVtZW50X3R5cGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0cy5pc0RtbCA9IGZ1bmN0aW9uIChzdGF0ZW1lbnRUeXBlSWQpIHtcbiAgcmV0dXJuIChzdGF0ZW1lbnRUeXBlSWQgPj0gMHgzMDAwICYmIHN0YXRlbWVudFR5cGVJZCA8IDB4NDAwMCk7XG59O1xuXG5leHBvcnRzLmlzSW5zZXJ0ID0gZnVuY3Rpb24gKHN0YXRlbWVudFR5cGVJZCkge1xuICByZXR1cm4gKHN0YXRlbWVudFR5cGVJZCA9PT0gMHgzMTAwKTtcbn07XG5cbmV4cG9ydHMuaXNVcGRhdGUgPSBmdW5jdGlvbiAoc3RhdGVtZW50VHlwZUlkKSB7XG4gIHJldHVybiAoc3RhdGVtZW50VHlwZUlkID09PSAweDMyMDApO1xufTtcblxuZXhwb3J0cy5pc0RlbGV0ZSA9IGZ1bmN0aW9uIChzdGF0ZW1lbnRUeXBlSWQpIHtcbiAgcmV0dXJuIChzdGF0ZW1lbnRUeXBlSWQgPT09IDB4MzMwMCk7XG59O1xuXG5leHBvcnRzLmlzTWVyZ2UgPSBmdW5jdGlvbiAoc3RhdGVtZW50VHlwZUlkKSB7XG4gIHJldHVybiAoc3RhdGVtZW50VHlwZUlkID09PSAweDM0MDApO1xufTtcblxuZXhwb3J0cy5pc011bHRpVGFibGVJbnNlcnQgPSBmdW5jdGlvbiAoc3RhdGVtZW50VHlwZUlkKSB7XG4gIHJldHVybiAoc3RhdGVtZW50VHlwZUlkID09PSAweDM1MDApO1xufTtcblxuZXhwb3J0cy5pc0RkbCA9IGZ1bmN0aW9uIChzdGF0ZW1lbnRUeXBlSWQpIHtcbiAgcmV0dXJuIChzdGF0ZW1lbnRUeXBlSWQgPj0gMHg2MDAwKTtcbn07Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/lib/connection/result/statement_type.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/lib/connection/result/unique_column_name_creator.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/lib/connection/result/unique_column_name_creator.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("const resultContainsDuplicatedColumns = (rowtype) => {\n  const columnNames = rowtype.map(rt => rt.name);\n  return columnNames.length !== new Set(columnNames).size;\n};\n\nfunction addOverriddenNamesForDuplicatedColumns(rowtype) {\n\n  //Prepare renamed columns for duplicates if row mode was set to 'object_with_renamed_duplicated_columns'\n  if (resultContainsDuplicatedColumns(rowtype)) {\n\n    const columnNames = new Set(rowtype.map(el => el.name));\n    const quntityOfColumnNames = new Map();\n\n    for (let index = 0; index < rowtype.length; index++) {\n      const columnName = rowtype[index].name;\n      if (columnName) {\n        if (quntityOfColumnNames.has(columnName)) {\n          let times = quntityOfColumnNames.get(columnName) + 1;\n          let newColumnName = columnName + '_' + times;\n          while (columnNames.has(newColumnName)) {\n            times += 1;\n            newColumnName = columnName + '_' + times;\n          }\n          quntityOfColumnNames.set(columnName, times);\n          rowtype[index].overriddenName = newColumnName;\n          columnNames.add(newColumnName);\n        } else {\n          quntityOfColumnNames.set(columnName, 1);\n        }\n      }\n    }\n  }\n}\nexports.addOverridenNamesForDuplicatedColumns = addOverriddenNamesForDuplicatedColumns;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9saWIvY29ubmVjdGlvbi9yZXN1bHQvdW5pcXVlX2NvbHVtbl9uYW1lX2NyZWF0b3IuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBLHdCQUF3Qix3QkFBd0I7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QyIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcndpbHNvbi9EZXNrdG9wL3Byb2plY3RzL0VaVml6L25vZGVfbW9kdWxlcy9zbm93Zmxha2Utc2RrL2xpYi9jb25uZWN0aW9uL3Jlc3VsdC91bmlxdWVfY29sdW1uX25hbWVfY3JlYXRvci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCByZXN1bHRDb250YWluc0R1cGxpY2F0ZWRDb2x1bW5zID0gKHJvd3R5cGUpID0+IHtcbiAgY29uc3QgY29sdW1uTmFtZXMgPSByb3d0eXBlLm1hcChydCA9PiBydC5uYW1lKTtcbiAgcmV0dXJuIGNvbHVtbk5hbWVzLmxlbmd0aCAhPT0gbmV3IFNldChjb2x1bW5OYW1lcykuc2l6ZTtcbn07XG5cbmZ1bmN0aW9uIGFkZE92ZXJyaWRkZW5OYW1lc0ZvckR1cGxpY2F0ZWRDb2x1bW5zKHJvd3R5cGUpIHtcblxuICAvL1ByZXBhcmUgcmVuYW1lZCBjb2x1bW5zIGZvciBkdXBsaWNhdGVzIGlmIHJvdyBtb2RlIHdhcyBzZXQgdG8gJ29iamVjdF93aXRoX3JlbmFtZWRfZHVwbGljYXRlZF9jb2x1bW5zJ1xuICBpZiAocmVzdWx0Q29udGFpbnNEdXBsaWNhdGVkQ29sdW1ucyhyb3d0eXBlKSkge1xuXG4gICAgY29uc3QgY29sdW1uTmFtZXMgPSBuZXcgU2V0KHJvd3R5cGUubWFwKGVsID0+IGVsLm5hbWUpKTtcbiAgICBjb25zdCBxdW50aXR5T2ZDb2x1bW5OYW1lcyA9IG5ldyBNYXAoKTtcblxuICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCByb3d0eXBlLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgY29uc3QgY29sdW1uTmFtZSA9IHJvd3R5cGVbaW5kZXhdLm5hbWU7XG4gICAgICBpZiAoY29sdW1uTmFtZSkge1xuICAgICAgICBpZiAocXVudGl0eU9mQ29sdW1uTmFtZXMuaGFzKGNvbHVtbk5hbWUpKSB7XG4gICAgICAgICAgbGV0IHRpbWVzID0gcXVudGl0eU9mQ29sdW1uTmFtZXMuZ2V0KGNvbHVtbk5hbWUpICsgMTtcbiAgICAgICAgICBsZXQgbmV3Q29sdW1uTmFtZSA9IGNvbHVtbk5hbWUgKyAnXycgKyB0aW1lcztcbiAgICAgICAgICB3aGlsZSAoY29sdW1uTmFtZXMuaGFzKG5ld0NvbHVtbk5hbWUpKSB7XG4gICAgICAgICAgICB0aW1lcyArPSAxO1xuICAgICAgICAgICAgbmV3Q29sdW1uTmFtZSA9IGNvbHVtbk5hbWUgKyAnXycgKyB0aW1lcztcbiAgICAgICAgICB9XG4gICAgICAgICAgcXVudGl0eU9mQ29sdW1uTmFtZXMuc2V0KGNvbHVtbk5hbWUsIHRpbWVzKTtcbiAgICAgICAgICByb3d0eXBlW2luZGV4XS5vdmVycmlkZGVuTmFtZSA9IG5ld0NvbHVtbk5hbWU7XG4gICAgICAgICAgY29sdW1uTmFtZXMuYWRkKG5ld0NvbHVtbk5hbWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHF1bnRpdHlPZkNvbHVtbk5hbWVzLnNldChjb2x1bW5OYW1lLCAxKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuZXhwb3J0cy5hZGRPdmVycmlkZW5OYW1lc0ZvckR1cGxpY2F0ZWRDb2x1bW5zID0gYWRkT3ZlcnJpZGRlbk5hbWVzRm9yRHVwbGljYXRlZENvbHVtbnM7Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/lib/connection/result/unique_column_name_creator.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/lib/connection/statement.js":
/*!****************************************************************!*\
  !*** ./node_modules/snowflake-sdk/lib/connection/statement.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("const { v4: uuidv4 } = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/uuid/dist/esm-node/index.js\");\n\nconst Url = __webpack_require__(/*! url */ \"url\");\nconst QueryString = __webpack_require__(/*! querystring */ \"querystring\");\nconst EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter);\nconst Util = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/snowflake-sdk/lib/util.js\");\nconst Result = __webpack_require__(/*! ./result/result */ \"(rsc)/./node_modules/snowflake-sdk/lib/connection/result/result.js\");\nconst Parameters = __webpack_require__(/*! ../parameters */ \"(rsc)/./node_modules/snowflake-sdk/lib/parameters.js\");\nconst RowStream = __webpack_require__(/*! ./result/row_stream */ \"(rsc)/./node_modules/snowflake-sdk/lib/connection/result/row_stream.js\");\nconst Errors = __webpack_require__(/*! ../errors */ \"(rsc)/./node_modules/snowflake-sdk/lib/errors.js\");\nconst ErrorCodes = Errors.codes;\nconst Logger = __webpack_require__(/*! ../logger */ \"(rsc)/./node_modules/snowflake-sdk/lib/logger.js\");\nconst NativeTypes = (__webpack_require__(/*! ./result/data_types */ \"(rsc)/./node_modules/snowflake-sdk/lib/connection/result/data_types.js\").NativeTypes);\nconst FileTransferAgent = __webpack_require__(/*! ../file_transfer_agent/file_transfer_agent */ \"(rsc)/./node_modules/snowflake-sdk/lib/file_transfer_agent/file_transfer_agent.js\");\nconst Bind = __webpack_require__(/*! ./bind_uploader */ \"(rsc)/./node_modules/snowflake-sdk/lib/connection/bind_uploader.js\");\nconst RowMode = __webpack_require__(/*! ./../constants/row_mode */ \"(rsc)/./node_modules/snowflake-sdk/lib/constants/row_mode.js\");\n\nconst states =\n  {\n    FETCHING: 'fetching',\n    COMPLETE: 'complete'\n  };\n\nconst statementTypes =\n  {\n    ROW_PRE_EXEC: 'ROW_PRE_EXEC',\n    ROW_POST_EXEC: 'ROW_POST_EXEC',\n    FILE_PRE_EXEC: 'FILE_PRE_EXEC',\n    FILE_POST_EXEC: 'FILE_POST_EXEC'\n  };\n\nconst queryCodes = {\n  QUERY_IN_PROGRESS: '333333',       // GS code: the query is in progress\n  QUERY_IN_PROGRESS_ASYNC: '333334'  // GS code: the query is detached\n};\n\nexports.createContext = function (\n  options, services, connectionConfig) {\n  // create a statement context for a pre-exec statement\n  const context = createContextPreExec(\n    options, services, connectionConfig);\n\n  context.type = statementTypes.FILE_PRE_EXEC;\n\n  createStatement(options, context, services, connectionConfig);\n\n  // add the result request headers to the context\n  context.resultRequestHeaders = buildResultRequestHeadersFile();\n\n  return context;\n\n};\n\nfunction createStatement(\n  statementOptions, context, services, connectionConfig) {\n  // call super\n  BaseStatement.apply(this, [statementOptions, context, services, connectionConfig]);\n}\n\n/**\n * Check the type of command to execute.\n *\n * @param {Object} options\n * @param {Object} services\n * @param {Object} connectionConfig\n *\n * @returns {Object}\n */\nexports.createStatementPreExec = function (\n  options, services, connectionConfig) {\n  Logger.getInstance().debug('--createStatementPreExec');\n  // create a statement context for a pre-exec statement\n  const context = createContextPreExec(\n    options, services, connectionConfig);\n\n  if (options.sqlText && (Util.isPutCommand(options.sqlText) || Util.isGetCommand(options.sqlText))) {\n    if (options.fileStream) {\n      context.fileStream = options.fileStream;\n      options.fileStream = null;\n    }\n    return createFileStatementPreExec(\n      options, context, services, connectionConfig);\n  }\n\n  const numBinds = countBinding(context.binds);\n  Logger.getInstance().debug('numBinds = %d', numBinds);\n  let threshold = Parameters.getValue(Parameters.names.CLIENT_STAGE_ARRAY_BINDING_THRESHOLD);\n  if (connectionConfig.getbindThreshold()) {\n    threshold = connectionConfig.getbindThreshold();\n  }\n  Logger.getInstance().debug('threshold = %d', threshold);\n\n  // check array binding,\n  if (numBinds > threshold) {\n    return createStageStatementpreExec(options, context, services, connectionConfig);\n  } else {\n    return createRowStatementPreExec(\n      options, context, services, connectionConfig);\n  }\n};\n\n/**\n * Executes a statement and returns a statement object that can be used to fetch\n * its result.\n *\n * @param {Object} statementOptions\n * @param {Object} statementContext\n * @param {Object} services\n * @param {Object} connectionConfig\n *\n * @returns {Object}\n */\nfunction createRowStatementPreExec(\n  statementOptions, statementContext, services, connectionConfig) {\n  // set the statement type\n  statementContext.type = statementTypes.ROW_PRE_EXEC;\n\n  return new RowStatementPreExec(\n    statementOptions, statementContext, services, connectionConfig);\n}\n\n/**\n * Creates a statement object that can be used to fetch the result of a\n * previously executed statement.\n *\n * @param {Object} statementOptions\n * @param {Object} services\n * @param {Object} connectionConfig\n *\n * @returns {Object}\n */\nexports.createStatementPostExec = function (\n  statementOptions, services, connectionConfig) {\n  // check for missing options\n  Errors.checkArgumentExists(Util.exists(statementOptions),\n    ErrorCodes.ERR_CONN_FETCH_RESULT_MISSING_OPTIONS);\n\n  // check for invalid options\n  Errors.checkArgumentValid(Util.isObject(statementOptions),\n    ErrorCodes.ERR_CONN_FETCH_RESULT_INVALID_OPTIONS);\n\n  // check for missing query id\n  Errors.checkArgumentExists(Util.exists(statementOptions.queryId),\n    ErrorCodes.ERR_CONN_FETCH_RESULT_MISSING_QUERY_ID);\n\n  // check for invalid query id\n  Errors.checkArgumentValid(Util.isString(statementOptions.queryId),\n    ErrorCodes.ERR_CONN_FETCH_RESULT_INVALID_QUERY_ID);\n\n  // check for invalid complete callback\n  const complete = statementOptions.complete;\n  if (Util.exists(complete)) {\n    Errors.checkArgumentValid(Util.isFunction(complete),\n      ErrorCodes.ERR_CONN_FETCH_RESULT_INVALID_COMPLETE);\n  }\n\n  // check for invalid streamResult\n  if (Util.exists(statementOptions.streamResult)) {\n    Errors.checkArgumentValid(Util.isBoolean(statementOptions.streamResult),\n      ErrorCodes.ERR_CONN_FETCH_RESULT_INVALID_STREAM_RESULT);\n  }\n\n  // check for invalid fetchAsString\n  const fetchAsString = statementOptions.fetchAsString;\n  if (Util.exists(fetchAsString)) {\n    // check that the value is an array\n    Errors.checkArgumentValid(Util.isArray(fetchAsString),\n      ErrorCodes.ERR_CONN_FETCH_RESULT_INVALID_FETCH_AS_STRING);\n\n    // check that all the array elements are valid\n    const invalidValueIndex = NativeTypes.findInvalidValue(fetchAsString);\n    Errors.checkArgumentValid(invalidValueIndex === -1,\n      ErrorCodes.ERR_CONN_FETCH_RESULT_INVALID_FETCH_AS_STRING_VALUES,\n      JSON.stringify(fetchAsString[invalidValueIndex]));\n  }\n\n  const rowMode = statementOptions.rowMode;\n  if (Util.exists(rowMode)) {\n    RowMode.checkRowModeValid(rowMode);\n  }\n  const cwd = statementOptions.cwd;\n  if (Util.exists(cwd)) {\n    Errors.checkArgumentValid(Util.isString(cwd), ErrorCodes.ERR_CONN_FETCH_RESULT_INVALID_CWD);\n  }\n\n  // validate non-user-specified arguments\n  Errors.assertInternal(Util.isObject(services));\n  Errors.assertInternal(Util.isObject(connectionConfig));\n\n  // create a statement context\n  const statementContext = createStatementContext();\n\n  statementContext.queryId = statementOptions.queryId;\n  statementContext.complete = complete;\n  statementContext.streamResult = statementOptions.streamResult;\n  statementContext.fetchAsString = statementOptions.fetchAsString;\n  statementContext.multiResultIds = statementOptions.multiResultIds;\n  statementContext.multiCurId = statementOptions.multiCurId;\n  statementContext.rowMode = statementOptions.rowMode;\n  statementContext.cwd = statementOptions.cwd;\n\n  // set the statement type\n  statementContext.type = (statementContext.type === statementTypes.ROW_PRE_EXEC) ? statementTypes.ROW_POST_EXEC : statementTypes.FILE_POST_EXEC;\n\n  return new StatementPostExec(\n    statementOptions, statementContext, services, connectionConfig);\n};\n\n/**\n * Creates a new statement context object.\n *\n * @returns {Object}\n */\nfunction createStatementContext() {\n  return new EventEmitter();\n}\n\n/**\n * Creates a statement object that can be used to execute a PUT or GET file\n * operation.\n *\n * @param {Object} statementOptions\n * @param {Object} statementContext\n * @param {Object} services\n * @param {Object} connectionConfig\n *\n * @returns {Object}\n */\nfunction createFileStatementPreExec(\n  statementOptions, statementContext, services, connectionConfig) {\n  // set the statement type\n  statementContext.type = statementTypes.FILE_PRE_EXEC;\n\n  return new FileStatementPreExec(\n    statementOptions, statementContext, services, connectionConfig);\n}\n\n/**\n * Creates a statement object that can be used to execute stage binding\n * operation.\n *\n * @param {Object} statementOptions\n * @param {Object} statementContext\n * @param {Object} services\n * @param {Object} connectionConfig\n *\n * @returns {Object}\n */\nfunction createStageStatementpreExec(\n  statementOptions, statementContext, services, connectionConfig) {\n  return new StageBindingStatementPreExec(statementOptions, statementContext, services, connectionConfig);\n}\n\n/**\n * Creates a statement context object for pre-exec statement.\n *\n * @param {Object} statementOptions\n * @param {Object} services\n * @param {Object} connectionConfig\n *\n * @returns {Object}\n */\nfunction createContextPreExec(\n  statementOptions, services, connectionConfig) {\n  // check for missing options\n  Errors.checkArgumentExists(Util.exists(statementOptions),\n    ErrorCodes.ERR_CONN_EXEC_STMT_MISSING_OPTIONS);\n\n  // check for invalid options\n  Errors.checkArgumentValid(Util.isObject(statementOptions),\n    ErrorCodes.ERR_CONN_EXEC_STMT_INVALID_OPTIONS);\n\n  if (!Util.exists(statementOptions.requestId)) {\n    // check for missing sql text\n    Errors.checkArgumentExists(Util.exists(statementOptions.sqlText),\n      ErrorCodes.ERR_CONN_EXEC_STMT_MISSING_SQL_TEXT);\n\n    // check for invalid sql text\n    Errors.checkArgumentValid(Util.isString(statementOptions.sqlText),\n      ErrorCodes.ERR_CONN_EXEC_STMT_INVALID_SQL_TEXT);\n  }\n\n  // check for invalid complete callback\n  const complete = statementOptions.complete;\n  if (Util.exists(complete)) {\n    Errors.checkArgumentValid(Util.isFunction(complete),\n      ErrorCodes.ERR_CONN_EXEC_STMT_INVALID_COMPLETE);\n  }\n\n  // check for invalid streamResult\n  if (Util.exists(statementOptions.streamResult)) {\n    Errors.checkArgumentValid(Util.isBoolean(statementOptions.streamResult),\n      ErrorCodes.ERR_CONN_EXEC_STMT_INVALID_STREAM_RESULT);\n  }\n\n  // check for invalid fetchAsString\n  const fetchAsString = statementOptions.fetchAsString;\n  if (Util.exists(fetchAsString)) {\n    // check that the value is an array\n    Errors.checkArgumentValid(Util.isArray(fetchAsString),\n      ErrorCodes.ERR_CONN_EXEC_STMT_INVALID_FETCH_AS_STRING);\n\n    // check that all the array elements are valid\n    const invalidValueIndex = NativeTypes.findInvalidValue(fetchAsString);\n    Errors.checkArgumentValid(invalidValueIndex === -1,\n      ErrorCodes.ERR_CONN_EXEC_STMT_INVALID_FETCH_AS_STRING_VALUES,\n      JSON.stringify(fetchAsString[invalidValueIndex]));\n  }\n\n  // check for invalid requestId\n  if (Util.exists(statementOptions.requestId)) {\n    Errors.checkArgumentValid(Util.isString(statementOptions.requestId),\n      ErrorCodes.ERR_CONN_EXEC_STMT_INVALID_REQUEST_ID);\n  }\n\n  // if parameters are specified, make sure the specified value is an object\n  if (Util.exists(statementOptions.parameters)) {\n    Errors.checkArgumentValid(Util.isObject(statementOptions.parameters),\n      ErrorCodes.ERR_CONN_EXEC_STMT_INVALID_PARAMETERS);\n  }\n\n  // if binds are specified\n  const binds = statementOptions.binds;\n  if (Util.exists(binds)) {\n    // make sure the specified value is an array\n    Errors.checkArgumentValid(Util.isArray(binds),\n      ErrorCodes.ERR_CONN_EXEC_STMT_INVALID_BINDS);\n\n    // make sure everything in the binds array is stringifiable\n    for (let index = 0, length = binds.length; index < length; index++) {\n      Errors.checkArgumentValid(JSON.stringify(binds[index]) !== undefined,\n        ErrorCodes.ERR_CONN_EXEC_STMT_INVALID_BIND_VALUES, binds[index]);\n    }\n  }\n\n  // if an internal option is specified, make sure it's boolean\n  if (Util.exists(statementOptions.internal)) {\n    Errors.checkArgumentValid(Util.isBoolean(statementOptions.internal),\n      ErrorCodes.ERR_CONN_EXEC_STMT_INVALID_INTERNAL);\n  }\n  const rowMode = statementOptions.rowMode;\n  if (Util.exists(rowMode)) {\n    RowMode.checkRowModeValid(rowMode);\n  }\n\n  // if an asyncExec flag is specified, make sure it's boolean\n  if (Util.exists(statementOptions.asyncExec)) {\n    Errors.checkArgumentValid(Util.isBoolean(statementOptions.asyncExec),\n      ErrorCodes.ERR_CONN_EXEC_STMT_INVALID_ASYNC_EXEC);\n  }\n\n  // if a describeOnly flag is specified, make sure it's boolean\n  if (Util.exists(statementOptions.describeOnly)) {\n    Errors.checkArgumentValid(Util.isBoolean(statementOptions.describeOnly),\n      ErrorCodes.ERR_CONN_EXEC_STMT_INVALID_DESCRIBE_ONLY);\n  }\n\n  // create a statement context\n  const statementContext = createStatementContext();\n\n  statementContext.sqlText = statementOptions.sqlText;\n  statementContext.complete = complete;\n  statementContext.streamResult = statementOptions.streamResult;\n  statementContext.fetchAsString = statementOptions.fetchAsString;\n  statementContext.multiResultIds = statementOptions.multiResultIds;\n  statementContext.multiCurId = statementOptions.multiCurId;\n  statementContext.rowMode = statementOptions.rowMode;\n  statementContext.asyncExec = statementOptions.asyncExec;\n\n  // if a binds array is specified, add it to the statement context\n  if (Util.exists(statementOptions.binds)) {\n    statementContext.binds = statementOptions.binds;\n  }\n\n  // if parameters are specified, add them to the statement context\n  if (Util.exists(statementOptions.parameters)) {\n    statementContext.parameters = statementOptions.parameters;\n  }\n\n  // if the internal flag is specified, add it to the statement context\n  if (Util.exists(statementOptions.internal)) {\n    statementContext.internal = statementOptions.internal;\n  }\n\n  if (Util.exists(statementOptions.cwd)) {\n    statementContext.cwd = statementOptions.cwd;\n  }\n\n  // if the describeOnly flag is specified, add it to the statement context\n  if (Util.exists(statementOptions.describeOnly)) {\n    statementContext.describeOnly = statementOptions.describeOnly;\n  }\n\n  // validate non-user-specified arguments\n  Errors.assertInternal(Util.isObject(services));\n  Errors.assertInternal(Util.isObject(connectionConfig));\n\n  // use request id passed by user\n  if (statementOptions.requestId) {\n    statementContext.requestId = statementOptions.requestId;\n    statementContext.resubmitRequest = true;\n  } else {\n    // use a random uuid for the statement request id\n    statementContext.requestId = uuidv4();\n  }\n\n  return statementContext;\n}\n\n/**\n * Creates a new BaseStatement.\n *\n * @param statementOptions\n * @param context\n * @param services\n * @param connectionConfig\n * @constructor\n */\nfunction BaseStatement(\n  statementOptions, context, services, connectionConfig) {\n  // call super\n  EventEmitter.call(this);\n\n  // validate input\n  Errors.assertInternal(Util.isObject(statementOptions));\n  Errors.assertInternal(Util.isObject(context));\n\n  context.services = services;\n  context.connectionConfig = connectionConfig;\n  context.isFetchingResult = true;\n  context.rowMode = statementOptions.rowMode || connectionConfig.getRowMode();\n\n  // TODO: add the parameters map to the statement context\n\n  const statement = this;\n\n  /**\n   * Returns this statement's SQL text.\n   *\n   * @returns {String}\n   */\n  this.getSqlText = function () {\n    return context.sqlText;\n  };\n\n  /**\n   * Returns the current status of this statement.\n   *\n   * @returns {String}\n   */\n  this.getStatus = function () {\n    return context.isFetchingResult ? states.FETCHING : states.COMPLETE;\n  };\n\n  /**\n   * Returns the columns produced by this statement.\n   *\n   * @returns {Object[]}\n   */\n  this.getColumns = function () {\n    return context.result ? context.result.getColumns() : undefined;\n  };\n\n  /**\n   * Given a column identifier, returns the corresponding column. The column\n   * identifier can be either the column name (String) or the column index\n   * (Number). If a column is specified and there is more than one column with\n   * that name, the first column with the specified name will be returned.\n   *\n   * @param {String | Number} columnIdentifier\n   *\n   * @returns {Object}\n   */\n  this.getColumn = function (columnIdentifier) {\n    return context.result ? context.result.getColumn(columnIdentifier) :\n      undefined;\n  };\n\n  /**\n   * Returns the number of rows returned by this statement.\n   *\n   * @returns {Number}\n   */\n  this.getNumRows = function () {\n    return context.result ? context.result.getReturnedRows() : undefined;\n  };\n\n  /**\n   * Returns the number of rows updated by this statement.\n   *\n   * @returns {Number}\n   */\n  this.getNumUpdatedRows = function () {\n    return context.result ? context.result.getNumUpdatedRows() : undefined;\n  };\n\n  /**\n   * Returns an object that contains information about the values of the\n   * current warehouse, current database, etc., when this statement finished\n   * executing.\n   *\n   * @returns {Object}\n   */\n  this.getSessionState = function () {\n    return context.result ? context.result.getSessionState() : undefined;\n  };\n\n  /**\n   * Returns the request id that was used when the statement was issued.\n   *\n   * @returns {String}\n   */\n  this.getRequestId = function () {\n    return context.requestId;\n  };\n\n  /**\n   * Returns the query id generated by the server for this statement.\n   * If the statement is still executing and we don't know the query id\n   * yet, this method will return undefined.\n   *\n   * Should use getQueryId instead.\n   * @deprecated \n   * @returns {String}\n   */\n  this.getStatementId = function () {\n    return context.queryId;\n  };\n\n  /**\n   * Returns the query id generated by the server for this statement.\n   * If the statement is still executing and we don't know the query id\n   * yet, this method will return undefined.\n   *\n   * @returns {String}\n   */\n  this.getQueryId = function () {\n    return context.queryId;\n  };\n\n  /**\n   * Cancels this statement if possible.\n   *\n   * @param {Function} [callback]\n   */\n  this.cancel = function (callback) {\n    sendCancelStatement(context, statement, callback);\n  };\n\n  //Integration Testing purpose.\n  this.getQueryContextCacheSize = function () {\n    return services.sf.getQueryContextCacheSize();\n  };\n\n  this.getQueryContextDTOSize = function () {\n    return services.sf.getQueryContextDTO().entries.length;\n  };\n\n  /**\n   * Issues a request to get the statement result again.\n   *\n   * @param {Function} callback\n   */\n  context.refresh = function (callback) {\n    // pick the appropriate function to get the result based on whether we\n    // have the query id or request id (we should have at least one)\n    const sendRequestFn = context.queryId ?\n      sendRequestPostExec : sendRequestPreExec;\n\n    // the current result error might be transient,\n    // so issue a request to get the result again\n    sendRequestFn(context, function (err, body) {\n      // refresh the result\n      context.onStatementRequestComp(err, body);\n\n      // if a callback was specified, invoke it\n      if (Util.isFunction(callback)) {\n        callback(context);\n      }\n    });\n  };\n\n  /**\n   * Called when the statement request is complete.\n   *\n   * @param err\n   * @param body\n   */\n  context.onStatementRequestComp = async function (err, body) {\n    // if we already have a result or a result error, we invoked the complete\n    // callback once, so don't invoke it again\n    const suppressComplete = context.result || context.resultError;\n\n    // clear the previous result error\n    context.resultError = null;\n\n    // if there was no error, call the success function\n    if (!err) {\n      await context.onStatementRequestSucc(body);\n    } else {\n      // save the error\n      context.resultError = err;\n\n      // if we don't have a query id and we got a response from GS, extract\n      // the query id from the data\n      if (!context.queryId &&\n        Errors.isOperationFailedError(err) && err.data) {\n        context.queryId = err.data.queryId;\n      }\n    }\n\n    // we're no longer fetching the result\n    context.isFetchingResult = false;\n\n    if (!suppressComplete) {\n      // emit a complete event\n      context.emit('statement-complete', Errors.externalize(err), statement);\n\n      // if a complete function was specified, invoke it\n      if (Util.exists(context.complete)) {\n        invokeStatementComplete(statement, context);\n      }\n    } else {\n      Logger.getInstance().debug('refreshed result of statement with %s',\n        context.requestId ?\n          Util.format('request id = %s', context.requestId) :\n          Util.format('query id = %s', context.queryId));\n    }\n  };\n\n  /**\n   * Called when the statement request is successful. Subclasses must provide\n   * their own implementation.\n   */\n  context.onStatementRequestSucc = function () {\n  };\n}\n\nUtil.inherits(BaseStatement, EventEmitter);\n\n/**\n * Invokes the statement complete callback.\n *\n * @param {Object} statement\n * @param {Object} context\n */\nfunction invokeStatementComplete(statement, context) {\n  // find out if the result will be streamed;\n  // if a value is not specified, get it from the connection\n  let streamResult = context.streamResult;\n  if (!Util.exists(streamResult)) {\n    streamResult = context.connectionConfig.getStreamResult();\n  }\n\n  // if the result will be streamed later or in asyncExec mode,\n  // invoke the complete callback right away\n  if (streamResult) {\n    context.complete(Errors.externalize(context.resultError), statement);\n  } else if (context.asyncExec) {\n    // return the result object with the query ID inside.\n    context.complete(null, statement, context.result);\n  } else {\n    process.nextTick(function () {\n      // aggregate all the rows into an array and pass this\n      // array to the complete callback as the last argument\n      const rows = [];\n      statement.streamRows()\n        .on('readable', function () {\n          // read only when data is available\n          let row;\n\n          // while there are rows available to read, push row to results array\n          while ((row = this.read()) !== null) {\n            rows.push(row);\n          }\n        })\n        .on('end', function () {\n          context.complete(null, statement, rows);\n        })\n        .on('error', function (err) {\n          context.complete(Errors.externalize(err), statement);\n        });\n    });\n  }\n}\n\n/**\n * Creates a new RowStatementPreExec instance.\n *\n * @param {Object} statementOptions\n * @param {Object} context\n * @param {Object} services\n * @param {Object} connectionConfig\n * @constructor\n */\nfunction RowStatementPreExec(\n  statementOptions,\n  context,\n  services,\n  connectionConfig) {\n  Logger.getInstance().debug('RowStatementPreExec');\n  // call super\n  BaseStatement.apply(this, [statementOptions, context, services, connectionConfig]);\n\n  // add the result request headers to the context\n  context.resultRequestHeaders = buildResultRequestHeadersRow();\n\n  /**\n   * Called when the request to get the statement result is successful.\n   *\n   * @param {Object} body\n   */\n  context.onStatementRequestSucc =\n    createOnStatementRequestSuccRow(this, context);\n\n  /**\n   * Fetches the rows in this statement's result and invokes the each()\n   * callback on each row. If start and end values are specified, the each()\n   * callback will only be invoked on rows in the specified range.\n   *\n   * @param {Object} options\n   */\n  this.fetchRows = createFnFetchRows(this, context);\n\n  /**\n   * Streams the rows in this statement's result. If start and end values are\n   * specified, only rows in the specified range are streamed.\n   *\n   * @param {Object} options\n   */\n  this.streamRows = createFnStreamRows(this, context);\n\n  // send a request to execute the statement\n  sendRequestPreExec(context, context.onStatementRequestComp);\n}\n\nUtil.inherits(RowStatementPreExec, BaseStatement);\n\n/**\n * Creates a function that can be used by row statements to process the response\n * when the request is successful.\n *\n * @param statement\n * @param context\n * @returns {Function}\n */\nfunction createOnStatementRequestSuccRow(statement, context) {\n  return function (body) {\n    // if we don't already have a result\n    if (!context.result) {\n      if (body.code === queryCodes.QUERY_IN_PROGRESS_ASYNC) {\n        context.result = {\n          queryId: body.data.queryId\n        };\n        return;\n      }\n      if (body.data.resultIds != null && body.data.resultIds.length > 0) {\n        //multi statements\n        this._resultIds = body.data.resultIds.split(',');\n        context.isMulti = true;\n        context.multiResultIds = this._resultIds;\n        context.multiCurId = 0;\n        context.queryId = this._resultIds[context.multiCurId];\n        exports.createStatementPostExec(context, context.services, context.connectionConfig);\n      } else {\n        // build a result from the response\n        context.result = new Result(\n          {\n            response: body,\n            statement: statement,\n            services: context.services,\n            connectionConfig: context.connectionConfig,\n            rowMode: context.rowMode\n          });\n\n        context.queryId = context.result.getQueryId();\n        this.services.sf.deserializeQueryContext(context.result.getQueryContext());\n      }\n    } else {\n      // refresh the existing result\n      context.result.refresh(body);\n    }\n\n    if (context.isMulti == null || context.isMulti === false) {\n      // only update the parameters if the statement isn't a post-exec statement\n      if (context.type !== statementTypes.ROW_POST_EXEC || context.type !== statementTypes.FILE_POST_EXEC) {\n        Parameters.update(context.result.getParametersArray());\n      }\n    }\n  };\n}\n\n/**\n * Creates a new FileStatementPreExec instance.\n *\n * @param {Object} statementOptions\n * @param {Object} context\n * @param {Object} services\n * @param {Object} connectionConfig\n * @constructor\n */\nfunction FileStatementPreExec(\n  statementOptions, context, services, connectionConfig) {\n  // call super\n  BaseStatement.apply(this, [statementOptions, context, services, connectionConfig]);\n\n  // add the result request headers to the context\n  context.resultRequestHeaders = buildResultRequestHeadersFile();\n\n  /**\n   * Called when the statement request is successful.\n   *\n   * @param {Object} body\n   */\n  context.onStatementRequestSucc = async function (body) {\n    await executeFileTransferRequest(context, body, this);\n  };\n\n  /**\n   * Streams the rows in this statement's result. If start and end values are\n   * specified, only rows in the specified range are streamed.\n   *\n   * @param {Object} options\n   */\n  this.streamRows = createFnStreamRows(this, context);\n  this.hasNext = hasNextResult(this, context);\n  this.NextResult = createNextReuslt(this, context);\n\n  /**\n   * Returns the file metadata generated by the statement.\n   *\n   * @returns {Object}\n   */\n  this.getFileMetadata = function () {\n    return context.fileMetadata;\n  };\n\n  // send a request to execute the file statement\n  sendRequestPreExec(context, context.onStatementRequestComp);\n}\n\nasync function executeFileTransferRequest(context, body, statement, fileTransferAgent) {\n  context.fileMetadata = body;\n\n  const fta = fileTransferAgent ?? new FileTransferAgent(context);\n  await fta.execute();\n\n  try {\n    // build a result from the response\n    const result = fta.result();\n\n    // init result and meta\n    body.data = {\n      rowset: result.rowset,\n      returned: result.rowset.length,\n      rowtype: result.rowtype,\n      parameters: [],\n    };\n\n    context.result = new Result({\n      response: body,\n      statement: statement,\n      services: context.services,\n      connectionConfig: context.connectionConfig\n    });\n  } catch (error) {\n    context.resultError = error;\n  }\n}\n\nexports.executeFileTransferRequest = executeFileTransferRequest;\n\nUtil.inherits(FileStatementPreExec, BaseStatement);\n\n/**\n * Creates a new StageBindingStatementPreExec instance.\n *\n * @param {Object} statementOptions\n * @param {Object} context\n * @param {Object} services\n * @param {Object} connectionConfig\n * @constructor\n */\nfunction StageBindingStatementPreExec(\n  statementOptions, context, services, connectionConfig) {\n  // call super\n  BaseStatement.apply(this, arguments);\n\n  // add the result request headers to the context\n  context.resultRequestHeaders = buildResultRequestHeadersFile();\n\n  /**\n   * Called when the statement request is successful. Subclasses must provide\n   * their own implementation.\n   */\n  context.onStatementRequestSucc = function () {\n    //do nothing\n  };\n\n  /**\n   * Called the stage binding request\n   *\n   * @param {Object} options\n   * @param {Object} context\n   * @param {Object} services\n   * @param {Object} connectionConfig\n   */\n  this.StageBindingRequest = async function (options, context, services, connectionConfig) {\n    try {\n      const bindUploaderRequestId = uuidv4();\n      const bind = new Bind.BindUploader(options, services, connectionConfig, bindUploaderRequestId);\n      context.bindStage = Bind.GetStageName(bindUploaderRequestId);\n      await bind.Upload(context.binds);\n      return createRowStatementPreExec(\n        options, context, services, connectionConfig);\n    } catch (error) {\n      context.bindStage = null;\n      return createRowStatementPreExec(\n        options, context, services, connectionConfig);\n    }\n  };\n   \n  /**\n   * Fetches the rows in this statement's result and invokes the each()\n   * callback on each row. If start and end values are specified, the each()\n   * callback will only be invoked on rows in the specified range.\n   *\n   * @param {Object} options\n   */\n  this.fetchRows = createFnFetchRows(this, context);\n\n  /**\n   * Streams the rows in this statement's result. If start and end values are\n   * specified, only rows in the specified range are streamed.\n   *\n   * @param {Object} options\n   */\n  this.streamRows = createFnStreamRows(this, context);\n  this.hasNext = hasNextResult(this, context);\n  this.NextResult = createNextReuslt(this, context);\n\n  this.StageBindingRequest(statementOptions, context, services, connectionConfig);\n  \n}\n\nUtil.inherits(StageBindingStatementPreExec, BaseStatement);\n\n/**\n * Creates a new StatementPostExec instance.\n *\n * @param {Object} statementOptions\n * @param {Object} context\n * @param {Object} services\n * @param {Object} connectionConfig\n * @constructor\n */\nfunction StatementPostExec(\n  statementOptions, context, services, connectionConfig) {\n  // call super\n  BaseStatement.apply(this, [statementOptions, context, services, connectionConfig]);\n\n  // add the result request headers to the context\n  context.resultRequestHeaders = buildResultRequestHeadersRow();\n\n  /**\n   * Called when the statement request is successful.\n   *\n   * @param {Object} body\n   */\n  context.onStatementRequestSucc =\n    createOnStatementRequestSuccRow(this, context);\n\n  /**\n   * Fetches the rows in this statement's result and invokes the each()\n   * callback on each row. If startIndex and endIndex values are specified, the\n   * each() callback will only be invoked on rows in the requested range. The\n   * end() callback will be invoked when either all the requested rows have been\n   * successfully processed, or if an error was encountered while trying to\n   * fetch the requested rows.\n   *\n   * @param {Object} options\n   */\n  this.fetchRows = createFnFetchRows(this, context);\n\n  /**\n   * Streams the rows in this statement's result. If start and end values are\n   * specified, only rows in the specified range are streamed.\n   *\n   * @param {Object} options\n   */\n  this.streamRows = createFnStreamRows(this, context);\n  this.hasNext = hasNextResult(this, context);\n  this.NextResult = createNextReuslt(this, context);\n  \n  // send a request to fetch the result\n  sendRequestPostExec(context, context.onStatementRequestComp);\n}\n\nUtil.inherits(StatementPostExec, BaseStatement);\n\n/**\n * Creates a function that fetches the rows in a statement's result and\n * invokes the each() callback on each row. If start and end values are\n * specified, the each() callback will only be invoked on rows in the\n * specified range.\n *\n * @param statement\n * @param context\n */\nfunction createFnFetchRows(statement, context) {\n  return function (options) {\n    // check for missing options\n    Errors.checkArgumentExists(Util.exists(options),\n      ErrorCodes.ERR_STMT_FETCH_ROWS_MISSING_OPTIONS);\n\n    // check for invalid options\n    Errors.checkArgumentValid(Util.isObject(options),\n      ErrorCodes.ERR_STMT_FETCH_ROWS_INVALID_OPTIONS);\n\n    // check for missing each()\n    Errors.checkArgumentExists(Util.exists(options.each),\n      ErrorCodes.ERR_STMT_FETCH_ROWS_MISSING_EACH);\n\n    // check for invalid each()\n    Errors.checkArgumentValid(Util.isFunction(options.each),\n      ErrorCodes.ERR_STMT_FETCH_ROWS_INVALID_EACH);\n\n    // check for missing end()\n    Errors.checkArgumentExists(Util.exists(options.end),\n      ErrorCodes.ERR_STMT_FETCH_ROWS_MISSING_END);\n\n    // check for invalid end()\n    Errors.checkArgumentValid(Util.isFunction(options.end),\n      ErrorCodes.ERR_STMT_FETCH_ROWS_INVALID_END);\n\n    const rowMode = options.rowMode;\n    if (Util.exists(rowMode)) {\n      RowMode.checkRowModeValid(rowMode);\n    }\n\n    // if we're still trying to fetch the result, create an error of our own\n    // and invoke the end() callback\n    if (context.isFetchingResult) {\n      process.nextTick(function () {\n        options.end(Errors.createClientError(\n          ErrorCodes.ERR_STMT_FETCH_ROWS_FETCHING_RESULT).externalize(),\n        statement);\n      });\n    } else if (context.resultError) {\n      // if there was an error the last time we tried to get the result\n      // if we have a fatal error, end the fetch rows operation since we're not\n      // going to be able to get any rows, either because the statement failed\n      // or because the result's been purged\n      if (Errors.isOperationFailedError(context.resultError) &&\n        context.resultError.sqlState) {\n        process.nextTick(function () {\n          endFetchRows(options, statement, context);\n        });\n      } else {\n        context.refresh(function () {\n          // if there was no error, fetch rows from the result\n          if (!context.resultError) {\n            fetchRowsFromResult(options, statement, context);\n          } else {\n            // give up because it's unlikely we'll succeed if we retry again\n            endFetchRows(options, statement, context);\n          }\n        });\n      }\n    } else {\n      fetchRowsFromResult(options, statement, context);\n    }\n  };\n}\n\n/**\n * Creates a function that streams the rows in a statement's result. If start\n * and end values are specified, only rows in the specified range are streamed.\n *\n * @param statement\n * @param context\n */\nfunction createFnStreamRows(statement, context) {\n  return function (options) {\n    // if some options are specified\n    if (Util.exists(options)) {\n      // check for invalid options\n      Errors.checkArgumentValid(Util.isObject(options),\n        ErrorCodes.ERR_STMT_FETCH_ROWS_INVALID_OPTIONS);\n\n      // check for invalid start\n      if (Util.exists(options.start)) {\n        Errors.checkArgumentValid(Util.isNumber(options.start),\n          ErrorCodes.ERR_STMT_STREAM_ROWS_INVALID_START);\n      }\n\n      // check for invalid end\n      if (Util.exists(options.end)) {\n        Errors.checkArgumentValid(Util.isNumber(options.end),\n          ErrorCodes.ERR_STMT_STREAM_ROWS_INVALID_END);\n      }\n\n      // check for invalid fetchAsString\n      const fetchAsString = options.fetchAsString;\n      if (Util.exists(fetchAsString)) {\n        // check that the value is an array\n        Errors.checkArgumentValid(Util.isArray(fetchAsString),\n          ErrorCodes.ERR_STMT_STREAM_ROWS_INVALID_FETCH_AS_STRING);\n\n        // check that all the array elements are valid\n        const invalidValueIndex = NativeTypes.findInvalidValue(fetchAsString);\n        Errors.checkArgumentValid(invalidValueIndex === -1,\n          ErrorCodes.ERR_STMT_STREAM_ROWS_INVALID_FETCH_AS_STRING_VALUES,\n          JSON.stringify(fetchAsString[invalidValueIndex]));\n      }\n\n      const rowMode = context.rowMode;\n      if (Util.exists(rowMode)) {\n        RowMode.checkRowModeValid(rowMode);\n      }\n    }\n\n    return new RowStream(statement, context, options);\n  };\n}\n\n/**\n * Ends the fetchRows() operation.\n *\n * @param {Object} options the options passed to fetchRows().\n * @param {Object} statement\n * @param {Object} context\n */\nfunction endFetchRows(options, statement, context) {\n  options.end(Errors.externalize(context.resultError), statement);\n}\n\n/**\n * Fetches rows from the statement's result.\n *\n * @param {Object} options the options passed to fetchRows().\n * @param {Object} statement\n * @param {Object} context\n */\nfunction fetchRowsFromResult(options, statement, context) {\n  let numInterrupts = 0;\n\n  // forward to the result to get a FetchRowsOperation object\n  const operation = context.result.fetchRows(options);\n\n  // subscribe to the operation's 'complete' event\n  operation.on('complete', function (err, continueCallback) {\n    // we want to retry if the error is retryable and the\n    // result stream hasn't been closed too many times\n    if (Errors.isLargeResultSetError(err) && err.response &&\n      (err.response.statusCode === 403) &&\n      (numInterrupts <\n        context.connectionConfig.getResultStreamInterrupts())) {\n      // increment the interrupt counter\n      numInterrupts++;\n\n      // issue a request to fetch the result again\n      sendRequestPostExec(context, function (err, body) {\n        // refresh the result\n        context.onStatementRequestComp(err, body);\n\n        // if there was no error, continue from where we got interrupted\n        if (!err) {\n          continueCallback();\n        }\n      });\n    } else {\n      endFetchRows(options, statement, context);\n    }\n  });\n}\n\n/**\n * Issues a request to cancel a statement.\n *\n * @param {Object} statementContext\n * @param {Object} statement\n * @param {Function} callback\n */\nfunction sendCancelStatement(statementContext, statement, callback) {\n  let url;\n  let json;\n\n  // use different rest endpoints based on whether the query id is available\n  if (statementContext.queryId) {\n    url = '/queries/' + statementContext.queryId + '/abort-request';\n  } else {\n    url = '/queries/v1/abort-request';\n    json =\n      {\n        requestId: statementContext.requestId\n      };\n  }\n\n  // issue a request to cancel the statement\n  statementContext.services.sf.request(\n    {\n      method: 'POST',\n      url: url,\n      json: json,\n      callback: function (err) {\n        // if a callback was specified, invoke it\n        if (Util.isFunction(callback)) {\n          callback(Errors.externalize(err), statement);\n        }\n      }\n    });\n}\n\n/**\n * Issues a request to get the result of a statement that hasn't been previously\n * executed.\n *\n * @param statementContext\n * @param onResultAvailable\n */\nfunction sendRequestPreExec(statementContext, onResultAvailable) {\n  // get the request headers\n  const headers = statementContext.resultRequestHeaders;\n\n  // build the basic json for the request\n  const json =\n  {\n    disableOfflineChunks: false,\n  };\n  json.sqlText = statementContext.sqlText;\n\n  if (statementContext.resubmitRequest && !json.sqlText) {\n    json.sqlText = `SELECT 'Error retrieving query results for request id: ${statementContext.requestId}, `\n       + 'please use RESULT_SCAN instead\\' AS ErrorMessage;';\n  }\n\n  Logger.getInstance().debug('context.bindStage=' + statementContext.bindStage);\n  if (Util.exists(statementContext.bindStage)) {\n    json.bindStage = statementContext.bindStage;\n  } else if (Util.exists(statementContext.binds)) {\n    // if binds are specified, build a binds map and include it in the request\n    json.bindings = buildBindsMap(statementContext.binds);\n  }\n\n  // include statement parameters if a value was specified\n  if (Util.exists(statementContext.parameters)) {\n    json.parameters = statementContext.parameters;\n    Logger.getInstance().debug('context.parameters=' + statementContext.parameters);\n  }\n\n  // include the internal flag if a value was specified\n  if (Util.exists(statementContext.internal)) {\n    json.isInternal = statementContext.internal;\n  }\n\n  if (!statementContext.disableQueryContextCache){\n    json.queryContextDTO = statementContext.services.sf.getQueryContextDTO();\n  }\n\n  // include the asyncExec flag if a value was specified\n  if (Util.exists(statementContext.asyncExec)) {\n    json.asyncExec = statementContext.asyncExec;\n  }\n\n  // include describeOnly flag if a value was specified\n  if (Util.exists(statementContext.describeOnly)) {\n    json.describeOnly = statementContext.describeOnly;\n  }\n\n  // use the snowflake service to issue the request\n  sendSfRequest(statementContext,\n    {\n      method: 'POST',\n      headers: headers,\n      url: Url.format(\n        {\n          pathname: '/queries/v1/query-request',\n          search: QueryString.stringify(\n            {\n              requestId: statementContext.requestId\n            })\n        }),\n      json: json,\n      callback: buildResultRequestCallback(\n        statementContext, headers, onResultAvailable)\n    },\n    true);\n}\n\nthis.sendRequest = function (statementContext, onResultAvailable) {\n  // get the request headers\n  const headers = statementContext.resultRequestHeaders;\n\n  // build the basic json for the request\n  const json =\n  {\n    disableOfflineChunks: false,\n    sqlText: statementContext.sqlText\n  };\n\n  Logger.getInstance().debug('context.bindStage=' + statementContext.bindStage);\n  if (Util.exists(statementContext.bindStage)) {\n    json.bindStage = statementContext.bindStage;\n  } else if (Util.exists(statementContext.binds)) {\n    // if binds are specified, build a binds map and include it in the request\n    json.bindings = buildBindsMap(statementContext.binds);\n  }\n\n  // include statement parameters if a value was specified\n  if (Util.exists(statementContext.parameters)) {\n    json.parameters = statementContext.parameters;\n  }\n\n  // include the internal flag if a value was specified\n  if (Util.exists(statementContext.internal)) {\n    json.isInternal = statementContext.internal;\n  }\n\n  if (!statementContext.disableQueryContextCache){\n    json.queryContextDTO = statementContext.services.sf.getQueryContextDTO();\n  }\n\n  let options =\n  {\n    method: 'POST',\n    headers: headers,\n    url: Url.format(\n      {\n        pathname: '/queries/v1/query-request',\n        search: QueryString.stringify(\n          {\n            requestId: statementContext.requestId\n          })\n      }),\n    json: json,\n    callback: buildResultRequestCallback(\n      statementContext, headers, onResultAvailable)\n  };\n\n  const sf = statementContext.services.sf;\n\n  // clone the options\n  options = Util.apply({}, options);\n\n  return new Promise((resolve) => {\n    resolve(sf.postAsync(options));\n  });\n};\n\n/**\n * Converts a bind variables array to a map that can be included in the\n * POST-body when issuing a pre-exec statement request.\n *\n * @param bindsArray\n *\n * @returns {Object}\n */\nfunction buildBindsMap(bindsArray) {\n  const bindsMap = {};\n  const isArrayBinding = bindsArray.length > 0 && Util.isArray(bindsArray[0]);\n  const singleArray = isArrayBinding ? bindsArray[0] : bindsArray;\n\n  for (let index = 0, length = singleArray.length; index < length; index++) {\n    let value = singleArray[index];\n\n    // pick the appropriate logical data type based on the bind value\n    let type;\n    if (Util.isBoolean(value)) {\n      type = 'BOOLEAN';\n    } else if (Util.isObject(value) || Util.isArray(value)) {\n      type = 'VARIANT';\n    } else if (Util.isNumber(value)) {\n      if (Number(value) === value && value % 1 === 0) {\n        // if value is integer\n        type = 'FIXED';\n      } else {\n        type = 'REAL';\n      }\n    } else {\n      type = 'TEXT';\n    }\n\n    // convert non-null values to a string if necessary; we don't convert null\n    // because the client might want to run something like\n    //   sql text = update t set name = :1 where id = 1;, binds = [null]\n    // and converting null to a string would result in us executing\n    //   sql text = update t set name = 'null' where id = 1;\n    // instead of\n    //   sql text = update t set name = null where id = 1;\n    if (!isArrayBinding) {\n      if (value !== null && !Util.isString(value)) {\n        if (value instanceof Date) {\n          value = value.toJSON();\n        } else {\n          value = JSON.stringify(value);\n        }\n      }\n    } else {\n      value = [];\n      for (let rowIndex = 0; rowIndex < bindsArray.length; rowIndex++) {\n        let value0 = bindsArray[rowIndex][index];\n        if (value0 !== null && !Util.isString(value0)) {\n          if (value0 instanceof Date) {\n            value0 = value0.toJSON();\n          } else {\n            value0 = JSON.stringify(value0);\n          }\n        }\n        value.push(value0);\n      }\n    }\n\n    // add an entry for the bind variable to the map\n    bindsMap[index + 1] =\n      {\n        type: type,\n        value: value\n      };\n  }\n\n  return bindsMap;\n}\n\n/**\n * Issues a request to get the result of a statement that has been previously\n * executed.\n *\n * @param statementContext\n * @param onResultAvailable\n */\nfunction sendRequestPostExec(statementContext, onResultAvailable) {\n  // get the request headers\n  const headers = statementContext.resultRequestHeaders;\n\n  // use the snowflake service to issue the request\n  sendSfRequest(statementContext,\n    {\n      method: 'GET',\n      headers: headers,\n      url: Url.format(\n        {\n          pathname: '/queries/' + statementContext.queryId + '/result',\n          search: QueryString.stringify(\n            {\n              disableOfflineChunks: false\n            })\n        }),\n      callback: buildResultRequestCallback(\n        statementContext, headers, onResultAvailable)\n    });\n}\n\n/**\n * Issues a statement-related request using the Snowflake service.\n *\n * @param {Object} statementContext the statement context.\n * @param {Object} options the request options.\n * @param {Boolean} [appendQueryParamOnRetry] whether retry=true should be\n *   appended to the url if the request is retried.\n */\nfunction sendSfRequest(statementContext, options, appendQueryParamOnRetry) {\n  const sf = statementContext.services.sf;\n  const connectionConfig = statementContext.connectionConfig;\n\n  // clone the options\n  options = Util.apply({}, options);\n\n  // get the original url and callback\n  const urlOrig = options.url;\n  const callbackOrig = options.callback;\n\n  let numRetries = 0;\n  const maxNumRetries = connectionConfig.getRetrySfMaxNumRetries();\n  let sleep = connectionConfig.getRetrySfStartingSleepTime();\n  let lastStatusCodeForRetry;\n\n  // create a function to send the request\n  const sendRequest = function () {\n    // if this is a retry and a query parameter should be appended to the url on\n    // retry, update the url\n    if ((numRetries > 0) && appendQueryParamOnRetry) {\n      const retryOption = {\n        url: urlOrig,\n        retryCount: numRetries,\n        retryReason: lastStatusCodeForRetry,\n        includeRetryReason: connectionConfig.getIncludeRetryReason(),\n      };\n      \n      options.url = Util.url.appendRetryParam(retryOption);\n    }\n\n    sf.request(options);\n  };\n\n  // replace the specified callback with a new one that retries\n  options.callback = async function (err) {\n    // if we haven't exceeded the maximum number of retries yet and the server\n    // came back with a retryable error code\n    if (numRetries < maxNumRetries &&\n      err && Util.isRetryableHttpError(\n      err.response, false // no retry for HTTP 403\n    )) {\n      // increment the retry count\n      numRetries++;\n      lastStatusCodeForRetry = err.response ? err.response.statusCode : 0;\n\n      // use exponential backoff with decorrelated jitter to compute the\n      // next sleep time.\n      const cap = connectionConfig.getRetrySfMaxSleepTime();\n      sleep = Util.nextSleepTime(1, cap, sleep);\n\n      Logger.getInstance().debug(\n        'Retrying statement with request id %s, retry count = %s',\n        statementContext.requestId, numRetries);\n\n      // wait the appropriate amount of time before retrying the request\n      setTimeout(sendRequest, sleep * 1000);\n    } else {\n      // invoke the original callback\n      await callbackOrig.apply(this, arguments);\n    }\n  };\n\n  // issue the request\n  sendRequest();\n}\n\n/**\n * Builds a callback for use in an exec-statement or fetch-result request.\n *\n * @param statementContext\n * @param headers\n * @param onResultAvailable\n *\n * @returns {Function}\n */\nfunction buildResultRequestCallback(\n  statementContext, headers, onResultAvailable) {\n  const callback = async function (err, body) {\n    if (err) {\n      await onResultAvailable.call(null, err, null);\n    } else {\n      // extract the query id from the response and save it\n      statementContext.queryId = body.data.queryId;\n\n      // if the result is not ready yet, extract the result url from the response\n      // and issue a GET request to try to fetch the result again unless asyncExec is enabled.\n      if (body && (body.code === queryCodes.QUERY_IN_PROGRESS\n        || body.code === queryCodes.QUERY_IN_PROGRESS_ASYNC)) {\n\n        if (statementContext.asyncExec) {\n          await onResultAvailable.call(null, err, body);\n          return;\n        }\n\n        // extract the result url from the response and try to get the result\n        // again\n        sendSfRequest(statementContext,\n          {\n            method: 'GET',\n            headers: headers,\n            url: body.data.getResultUrl,\n            callback: callback\n          });\n      } else {\n        await onResultAvailable.call(null, err, body);\n      }\n    }\n  };\n\n  return callback;\n}\n\n/**\n * Builds the request headers for a row statement request.\n *\n * @returns {Object}\n */\nfunction buildResultRequestHeadersRow() {\n  return {\n    'Accept': 'application/snowflake'\n  };\n}\n\n/**\n * Builds the request headers for a file statement request.\n *\n * @returns {Object}\n */\nfunction buildResultRequestHeadersFile() {\n  return {\n    'Accept': 'application/json'\n  };\n}\n\n/**\n * Count number of bindings\n * \n * @returns {int}\n */\nfunction countBinding(binds) {\n  if (!Util.isArray(binds)) {\n    return 0;\n  }\n  Logger.getInstance().debug('-- binds.length= %d', binds.length);\n  let count = 0;\n  for (let index = 0; index < binds.length; index++) {\n    if (binds[index] != null && Util.isArray(binds[index])) {\n      count += binds[index].length;\n    }\n  }\n  return count;\n}\n\nfunction hasNextResult(statement, context) {\n  return function () {\n    return (context.multiResultIds != null && context.multiCurId + 1 < context.multiResultIds.length);\n  };\n}\n\nfunction createNextReuslt(statement, context) {\n  return function () {\n    if (hasNextResult(statement, context)) {\n      context.multiCurId++;\n      context.queryId = context.multiResultIds[context.multiCurId];\n      exports.createStatementPostExec(context, context.services, context.connectionConfig);\n    }\n  };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/lib/connection/statement.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/lib/constants/connection_constants.js":
/*!**************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/lib/constants/connection_constants.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("exports.HEARTBEAT_FREQUENCY_MASTER_VALIDITY = 14400;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9saWIvY29uc3RhbnRzL2Nvbm5lY3Rpb25fY29uc3RhbnRzLmpzIiwibWFwcGluZ3MiOiJBQUFBLDJDQUEyQyIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcndpbHNvbi9EZXNrdG9wL3Byb2plY3RzL0VaVml6L25vZGVfbW9kdWxlcy9zbm93Zmxha2Utc2RrL2xpYi9jb25zdGFudHMvY29ubmVjdGlvbl9jb25zdGFudHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0cy5IRUFSVEJFQVRfRlJFUVVFTkNZX01BU1RFUl9WQUxJRElUWSA9IDE0NDAwO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/lib/constants/connection_constants.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/lib/constants/error_messages.js":
/*!********************************************************************!*\
  !*** ./node_modules/snowflake-sdk/lib/constants/error_messages.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("// 400001\nexports[400001] = 'An internal error has occurred. Please contact Snowflake support.';\nexports[400002] = 'You are using an unsupported version of Node.js. Please use %s or above.';\n\n// 401001\nexports[401001] = 'Network error. Could not reach Snowflake.';\nexports[401002] = 'Request to Snowflake failed.';\nexports[401003] = 'Snowflake responded with non-JSON content.';\nexports[401004] = 'Request to Snowflake failed.  Invalid token';\n\n// 402001\nexports[402001] = 'Network error. Could not reach S3/Blob.';\nexports[402002] = 'Request to S3/Blob failed.';\n\n// 403001\nexports[403001] = 'Invalid logLevel. The specified value must be one of these five levels: error, warn, debug, info and trace.';\nexports[403002] = 'Invalid disableOCSPChecks option. The specified value must be a boolean.';\nexports[403003] = 'Invalid OCSP mode. The specified value must be FAIL_CLOSED, FAIL_OPEN, or INSECURE_MODE.';\nexports[403004] = 'Invalid custom JSON parser. The specified value must be a function.';\nexports[403005] = 'Invalid custom XML parser. The specified value must be a function.';\nexports[403006] = 'Invalid keep alive value. The specified value must be a boolean.';\nexports[403007] = 'Invalid custom credential manager value. The specified value must be an object, and it should have three methods: write, read, remove';\nexports[403008] = 'Invalid useEnvProxy value. The specified value must be a boolean.';\n\n// 404001\nexports[404001] = 'Connection options must be specified.';\nexports[404002] = 'Invalid connection options. The specified value must be an object.';\nexports[404003] = 'A user name must be specified.';\nexports[404004] = 'Invalid user name. The specified value must be a string.';\nexports[404005] = 'A password must be specified.';\nexports[404006] = 'Invalid password. The specified value must be a string.';\nexports[404007] = 'An account must be specified.';\nexports[404008] = 'Invalid account. The specified value must be a string.';\nexports[404009] = 'An accessUrl must be specified.';\nexports[404010] = 'Invalid accessUrl. The specified value must be a string.';\nexports[404011] = 'Invalid warehouse. The specified value must be a string.';\nexports[404012] = 'Invalid database. The specified value must be a string.';\nexports[404013] = 'Invalid schema. The specified value must be a string.';\nexports[404014] = 'Invalid role. The specified value must be a string.';\nexports[404015] = 'A proxyHost must be specified';\nexports[404016] = 'Invalid proxyHost. The specified value must be a string.';\nexports[404017] = 'A proxyPort must be specified.';\nexports[404018] = 'Invalid proxyPort. The specified value must be a number.';\nexports[404019] = 'Invalid streamResult flag. The specified value must be a boolean.';\nexports[404020] = 'Invalid fetchAsString option. The specified value must be an Array.';\nexports[404021] = 'Invalid fetchAsString type: %s. The supported types are: String, Boolean, Number, Date, Buffer, and JSON.';\nexports[404022] = 'Invalid region. The specified value must be a string.';\nexports[404023] = 'Invalid clientSessionKeepAlive. The specified value must be a boolean.';\nexports[404024] = 'Invalid clientSessionKeepAliveHeartbeatFrequency. The specified value must be a number.';\nexports[404025] = 'Invalid jsTreatIntegerAsBigInt. The specified value must be a boolean';\nexports[404026] = 'Invalid private key. The specified value must be a string in pem format of type pkcs8';\nexports[404027] = 'Invalid private key file location. The specified value must be a string';\nexports[404028] = 'Invalid private key passphrase. The specified value must be a string';\nexports[404029] = 'Invalid oauth token. The specified value must be a string';\nexports[404030] = 'Invalid validate default parameters value. The specified value must be a boolean';\nexports[404031] = 'Invalid application value. The specified value must be a string that starts with a letter and a length between 1-50';\nexports[404032] = 'A proxyUser must be specified';\nexports[404033] = 'Invalid proxyUser. The specified value must be a string.';\nexports[404034] = 'A proxyPassword must be specified.';\nexports[404035] = 'Invalid proxyPassword. The specified value must be a string.';\nexports[404036] = 'Invalid noProxy. The specified value must be a string.';\nexports[404037] = 'Invalid arrayBindingThreshold. The specified value must be a number.';\nexports[404038] = 'Invalid gcsUseDownscopedCredential. The specified value must be a boolean.';\nexports[404039] = 'Invalid forceStageBindError. The specified value must be a number.';\nexports[404040] = 'Invalid browser timeout value. The specified value must be a positive number.';\nexports[404041] = 'Invalid disableQueryContextCache. The specified value must be a boolean.';\nexports[404042] = 'Invalid includeRetryReason. The specified value must be a boolean.';\nexports[404043] = 'Invalid clientConfigFile value. The specified value must be a string.';\nexports[404044] = 'Invalid retryTimeout value. The specified value must be a number.';\nexports[404045] = 'Invalid account. The specified value must be a valid subdomain string.';\nexports[404046] = 'Invalid region. The specified value must be a valid subdomain string.';\nexports[404047] = 'Invalid disableConsoleLogin. The specified value must be a boolean';\nexports[404048] = 'Invalid disableGCPTokenUpload. The specified value must be a boolean';\nexports[404048] = 'Invalid forceGCPUseDownscopedCredential. The specified value must be a boolean';\nexports[404049] = 'Invalid clientStoreTemporaryCredential. The specified value must be a boolean.';\nexports[404050] = 'Invalid representNullAsStringNull. The specified value must be a boolean';\nexports[404051] = 'Invalid disableSamlURLCheck. The specified value must be a boolean';\nexports[404052] = 'Invalid clientRequestMFAToken. The specified value must be a boolean.';\nexports[404053] = 'A host must be specified.';\nexports[404054] = 'Invalid host. The specified value must be a string.';\nexports[404055] = 'Invalid passcodeInPassword. The specified value must be a boolean';\nexports[404056] = 'Invalid passcode. The specified value must be a string';\n\n// 405001\nexports[405001] = 'Invalid callback. The specified value must be a function.';\n\n// 405501\nexports[405501] = 'Connection already in progress.';\nexports[405502] = 'Already connected.';\nexports[405503] = 'Connection already terminated. Cannot connect again.';\nexports[405504] = 'connect() does not work with external browser or okta authenticators, call connectAsync() instead';\nexports[405505] = 'Configuration from client config file failed';\n\n// 406001\nexports[406001] = 'Invalid callback. The specified value must be a function.';\n\n// 406501\nexports[406501] = 'Not connected, so nothing to destroy.';\nexports[406502] = 'Already disconnected.';\n\n// 407001\nexports[407001] = 'Unable to perform operation because a connection was never established.';\nexports[407002] = 'Unable to perform operation using terminated connection.';\n\n// 408001\nexports[408001] = 'A serializedConnection must be specified.';\nexports[408002] = 'Invalid serializedConnection. The specified value must be a string.';\nexports[408003] = 'Invalid serializedConnection. The value must be a string obtained by calling another connection\\'s serialize() method.';\n\n// 409001\nexports[409001] = 'Execute options must be specified.';\nexports[409002] = 'Invalid execute options. The specified value must be an object.';\nexports[409003] = 'A sqlText value must be specified.';\nexports[409004] = 'Invalid sqlText. The specified value must be a string.';\nexports[409005] = 'Invalid internal flag. The specified value must be a boolean.';\nexports[409006] = 'Invalid parameters. The specified value must be an object.';\nexports[409007] = 'Invalid binds. The specified value must be an array.';\nexports[409008] = 'Invalid bind variable: %s. Only stringifiable values are supported.';\nexports[409009] = 'Invalid complete callback. The specified value must be a function.';\nexports[409010] = 'Invalid streamResult flag. The specified value must be a boolean.';\nexports[409011] = 'Invalid fetchAsString value. The specified value must be an Array.';\nexports[409012] = 'Invalid fetchAsString type: %s. The supported types are: String, Boolean, Number, Date, Buffer, and JSON.';\nexports[409013] = 'Invalid requestId. The specified value must be a string.';\nexports[409014] = 'Invalid asyncExec. The specified value must be a boolean.';\nexports[409015] = 'Invalid describeOnly. The specified value must be a boolean.';\n\n// 410001\nexports[410001] = 'Fetch-result options must be specified.';\nexports[410002] = 'Invalid options. The specified value must be an object.';\nexports[410003] = 'A query id/statement id must be specified.';\nexports[410004] = 'Invalid query id/statement id. The specified value must be a string.';\nexports[410005] = 'Invalid complete callback. The specified value must be a function.';\nexports[410006] = 'Invalid streamResult flag. The specified value must be a boolean.';\nexports[410007] = 'Invalid fetchAsString value. The specified value must be an Array.';\nexports[410008] = 'Invalid fetchAsString type: %s. The supported types are: String, Boolean, Number, Date, Buffer, and JSON.';\nexports[410009] = 'Invalid cwd (current working directory) type: %s. The specified value must be a string.';\n\n// 411001\nexports[411001] = 'Invalid options. The specified value must be an object.';\nexports[411002] = 'Invalid start index. The specified value must be a number.';\nexports[411003] = 'Invalid end index. The specified value must be a number.';\nexports[411004] = 'Invalid fetchAsString value. The specified value must be an Array.';\nexports[411005] = 'Invalid fetchAsString type: %s. The supported types are: String, Boolean, Number, Date, Buffer, and JSON.';\nexports[411006] = 'Invalid row mode value. The specified value should be array or object or object_with_renamed_duplicated_columns';\n\nexports[412001] = 'Certificate is REVOKED.';\nexports[412002] = 'Certificate status is UNKNOWN.';\nexports[412003] = 'Not recognize signature algorithm.';\nexports[412004] = 'Invalid signature.';\nexports[412005] = 'No OCSP response data is attached.';\nexports[412006] = 'Invalid validity.';\nexports[412007] = 'Could not verify the certificate revocation status.';\nexports[412008] = 'Not two elements are in the cache.';\nexports[412009] = 'Cache entry expired.';\nexports[412010] = 'Failed to parse OCSP response.';\nexports[412011] = 'Invalid Signing Certificate validity.';\nexports[412012] = 'Timeout OCSP responder.';\nexports[412013] = 'Timeout OCSP Cache server.';\nexports[412014] = 'Failed to obtain OCSP response: %s';\n\n// 450001\nexports[450001] = 'Fetch-row options must be specified.';\nexports[450002] = 'Invalid options. The specified value must be an object.';\nexports[450003] = 'An each() callback must be specified.';\nexports[450004] = 'Invalid each() callback. The specified value must be a function.';\nexports[450005] = 'An end() callback must be specified.';\nexports[450006] = 'Invalid end() callback. The specified value must be a function.';\nexports[450007] = 'Operation failed because the statement is still in progress.';\n\n// 460001\nexports[460001] = 'Invalid queryId: %s';\nexports[460002] = 'Cannot retrieve data. No information returned from server for query %s';\nexports[460003] = 'Status of query %s is %s, results are unavailable';\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/lib/constants/error_messages.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/lib/constants/gs_errors.js":
/*!***************************************************************!*\
  !*** ./node_modules/snowflake-sdk/lib/constants/gs_errors.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("const code = {};\n\ncode.INCORRECT_USERNAME_PASSWORD = '390100';\ncode.SESSION_TOKEN_INVALID = '390104';\ncode.GONE_SESSION = '390111';\ncode.SESSION_TOKEN_EXPIRED = '390112';\ncode.MASTER_TOKEN_EXPIRED = '390114';\ncode.ID_TOKEN_INVALID = '390195';\n\nexports.code = code;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9saWIvY29uc3RhbnRzL2dzX2Vycm9ycy5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsWUFBWSIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcndpbHNvbi9EZXNrdG9wL3Byb2plY3RzL0VaVml6L25vZGVfbW9kdWxlcy9zbm93Zmxha2Utc2RrL2xpYi9jb25zdGFudHMvZ3NfZXJyb3JzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGNvZGUgPSB7fTtcblxuY29kZS5JTkNPUlJFQ1RfVVNFUk5BTUVfUEFTU1dPUkQgPSAnMzkwMTAwJztcbmNvZGUuU0VTU0lPTl9UT0tFTl9JTlZBTElEID0gJzM5MDEwNCc7XG5jb2RlLkdPTkVfU0VTU0lPTiA9ICczOTAxMTEnO1xuY29kZS5TRVNTSU9OX1RPS0VOX0VYUElSRUQgPSAnMzkwMTEyJztcbmNvZGUuTUFTVEVSX1RPS0VOX0VYUElSRUQgPSAnMzkwMTE0JztcbmNvZGUuSURfVE9LRU5fSU5WQUxJRCA9ICczOTAxOTUnO1xuXG5leHBvcnRzLmNvZGUgPSBjb2RlOyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/lib/constants/gs_errors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/lib/constants/query_status.js":
/*!******************************************************************!*\
  !*** ./node_modules/snowflake-sdk/lib/constants/query_status.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("const code = {};\n\ncode.RUNNING = 'RUNNING';\ncode.ABORTING = 'ABORTING';\ncode.SUCCESS = 'SUCCESS';\ncode.FAILED_WITH_ERROR = 'FAILED_WITH_ERROR';\ncode.ABORTED = 'ABORTED';\ncode.QUEUED = 'QUEUED';\ncode.FAILED_WITH_INCIDENT = 'FAILED_WITH_INCIDENT';\ncode.DISCONNECTED = 'DISCONNECTED';\ncode.RESUMING_WAREHOUSE = 'RESUMING_WAREHOUSE';\n// purposeful typo.Is present in QueryDTO.java\ncode.QUEUED_REPARING_WAREHOUSE = 'QUEUED_REPARING_WAREHOUSE';\ncode.RESTARTED = 'RESTARTED';\ncode.BLOCKED = 'BLOCKED';\ncode.NO_DATA = 'NO_DATA';\ncode.NO_QUERY_DATA = 'NO_QUERY_DATA';\n\n// All running query statuses\nconst runningStatuses =\n  [\n    code.RUNNING,\n    code.RESUMING_WAREHOUSE,\n    code.QUEUED,\n    code.QUEUED_REPARING_WAREHOUSE,\n    code.NO_DATA,\n  ];\n\n// All error query statuses\nconst errorStatuses =\n  [\n    code.ABORTING,\n    code.FAILED_WITH_ERROR,\n    code.ABORTED,\n    code.FAILED_WITH_INCIDENT,\n    code.DISCONNECTED,\n    code.BLOCKED,\n  ];\n\nexports.code = code;\nexports.runningStatuses = runningStatuses;\nexports.errorStatuses = errorStatuses;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9saWIvY29uc3RhbnRzL3F1ZXJ5X3N0YXR1cy5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFlBQVk7QUFDWix1QkFBdUI7QUFDdkIscUJBQXFCIiwic291cmNlcyI6WyIvVXNlcnMvdmljdG9yd2lsc29uL0Rlc2t0b3AvcHJvamVjdHMvRVpWaXovbm9kZV9tb2R1bGVzL3Nub3dmbGFrZS1zZGsvbGliL2NvbnN0YW50cy9xdWVyeV9zdGF0dXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgY29kZSA9IHt9O1xuXG5jb2RlLlJVTk5JTkcgPSAnUlVOTklORyc7XG5jb2RlLkFCT1JUSU5HID0gJ0FCT1JUSU5HJztcbmNvZGUuU1VDQ0VTUyA9ICdTVUNDRVNTJztcbmNvZGUuRkFJTEVEX1dJVEhfRVJST1IgPSAnRkFJTEVEX1dJVEhfRVJST1InO1xuY29kZS5BQk9SVEVEID0gJ0FCT1JURUQnO1xuY29kZS5RVUVVRUQgPSAnUVVFVUVEJztcbmNvZGUuRkFJTEVEX1dJVEhfSU5DSURFTlQgPSAnRkFJTEVEX1dJVEhfSU5DSURFTlQnO1xuY29kZS5ESVNDT05ORUNURUQgPSAnRElTQ09OTkVDVEVEJztcbmNvZGUuUkVTVU1JTkdfV0FSRUhPVVNFID0gJ1JFU1VNSU5HX1dBUkVIT1VTRSc7XG4vLyBwdXJwb3NlZnVsIHR5cG8uSXMgcHJlc2VudCBpbiBRdWVyeURUTy5qYXZhXG5jb2RlLlFVRVVFRF9SRVBBUklOR19XQVJFSE9VU0UgPSAnUVVFVUVEX1JFUEFSSU5HX1dBUkVIT1VTRSc7XG5jb2RlLlJFU1RBUlRFRCA9ICdSRVNUQVJURUQnO1xuY29kZS5CTE9DS0VEID0gJ0JMT0NLRUQnO1xuY29kZS5OT19EQVRBID0gJ05PX0RBVEEnO1xuY29kZS5OT19RVUVSWV9EQVRBID0gJ05PX1FVRVJZX0RBVEEnO1xuXG4vLyBBbGwgcnVubmluZyBxdWVyeSBzdGF0dXNlc1xuY29uc3QgcnVubmluZ1N0YXR1c2VzID1cbiAgW1xuICAgIGNvZGUuUlVOTklORyxcbiAgICBjb2RlLlJFU1VNSU5HX1dBUkVIT1VTRSxcbiAgICBjb2RlLlFVRVVFRCxcbiAgICBjb2RlLlFVRVVFRF9SRVBBUklOR19XQVJFSE9VU0UsXG4gICAgY29kZS5OT19EQVRBLFxuICBdO1xuXG4vLyBBbGwgZXJyb3IgcXVlcnkgc3RhdHVzZXNcbmNvbnN0IGVycm9yU3RhdHVzZXMgPVxuICBbXG4gICAgY29kZS5BQk9SVElORyxcbiAgICBjb2RlLkZBSUxFRF9XSVRIX0VSUk9SLFxuICAgIGNvZGUuQUJPUlRFRCxcbiAgICBjb2RlLkZBSUxFRF9XSVRIX0lOQ0lERU5ULFxuICAgIGNvZGUuRElTQ09OTkVDVEVELFxuICAgIGNvZGUuQkxPQ0tFRCxcbiAgXTtcblxuZXhwb3J0cy5jb2RlID0gY29kZTtcbmV4cG9ydHMucnVubmluZ1N0YXR1c2VzID0gcnVubmluZ1N0YXR1c2VzO1xuZXhwb3J0cy5lcnJvclN0YXR1c2VzID0gZXJyb3JTdGF0dXNlcztcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/lib/constants/query_status.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/lib/constants/row_mode.js":
/*!**************************************************************!*\
  !*** ./node_modules/snowflake-sdk/lib/constants/row_mode.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const Errors = __webpack_require__(/*! ../errors */ \"(rsc)/./node_modules/snowflake-sdk/lib/errors.js\");\n\nconst ErrorCodes = Errors.codes;\nconst ARRAY = 'array';\nconst OBJECT = 'object';\nconst OBJECT_WITH_RENAMED_DUPLICATED_COLUMNS = 'object_with_renamed_duplicated_columns';\n\nconst isValidRowMode = (rowMode) => [ARRAY, OBJECT, OBJECT_WITH_RENAMED_DUPLICATED_COLUMNS].includes(rowMode);\n\nconst checkRowModeValid = (rowMode) => {\n  Errors.checkArgumentValid(isValidRowMode(rowMode),\n    ErrorCodes.ERR_STMT_STREAM_ROWS_INVALID_ROW_MODE, JSON.stringify(rowMode));\n};\n\nexports.ARRAY = ARRAY;\nexports.OBJECT = OBJECT;\nexports.OBJECT_WITH_RENAMED_DUPLICATED_COLUMNS = OBJECT_WITH_RENAMED_DUPLICATED_COLUMNS;\nexports.isValidRowMode = isValidRowMode;\nexports.checkRowModeValid = checkRowModeValid;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9saWIvY29uc3RhbnRzL3Jvd19tb2RlLmpzIiwibWFwcGluZ3MiOiJBQUFBLGVBQWUsbUJBQU8sQ0FBQyxtRUFBVzs7QUFFbEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsYUFBYTtBQUNiLGNBQWM7QUFDZCw4Q0FBOEM7QUFDOUMsc0JBQXNCO0FBQ3RCLHlCQUF5QiIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcndpbHNvbi9EZXNrdG9wL3Byb2plY3RzL0VaVml6L25vZGVfbW9kdWxlcy9zbm93Zmxha2Utc2RrL2xpYi9jb25zdGFudHMvcm93X21vZGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgRXJyb3JzID0gcmVxdWlyZSgnLi4vZXJyb3JzJyk7XG5cbmNvbnN0IEVycm9yQ29kZXMgPSBFcnJvcnMuY29kZXM7XG5jb25zdCBBUlJBWSA9ICdhcnJheSc7XG5jb25zdCBPQkpFQ1QgPSAnb2JqZWN0JztcbmNvbnN0IE9CSkVDVF9XSVRIX1JFTkFNRURfRFVQTElDQVRFRF9DT0xVTU5TID0gJ29iamVjdF93aXRoX3JlbmFtZWRfZHVwbGljYXRlZF9jb2x1bW5zJztcblxuY29uc3QgaXNWYWxpZFJvd01vZGUgPSAocm93TW9kZSkgPT4gW0FSUkFZLCBPQkpFQ1QsIE9CSkVDVF9XSVRIX1JFTkFNRURfRFVQTElDQVRFRF9DT0xVTU5TXS5pbmNsdWRlcyhyb3dNb2RlKTtcblxuY29uc3QgY2hlY2tSb3dNb2RlVmFsaWQgPSAocm93TW9kZSkgPT4ge1xuICBFcnJvcnMuY2hlY2tBcmd1bWVudFZhbGlkKGlzVmFsaWRSb3dNb2RlKHJvd01vZGUpLFxuICAgIEVycm9yQ29kZXMuRVJSX1NUTVRfU1RSRUFNX1JPV1NfSU5WQUxJRF9ST1dfTU9ERSwgSlNPTi5zdHJpbmdpZnkocm93TW9kZSkpO1xufTtcblxuZXhwb3J0cy5BUlJBWSA9IEFSUkFZO1xuZXhwb3J0cy5PQkpFQ1QgPSBPQkpFQ1Q7XG5leHBvcnRzLk9CSkVDVF9XSVRIX1JFTkFNRURfRFVQTElDQVRFRF9DT0xVTU5TID0gT0JKRUNUX1dJVEhfUkVOQU1FRF9EVVBMSUNBVEVEX0NPTFVNTlM7XG5leHBvcnRzLmlzVmFsaWRSb3dNb2RlID0gaXNWYWxpZFJvd01vZGU7XG5leHBvcnRzLmNoZWNrUm93TW9kZVZhbGlkID0gY2hlY2tSb3dNb2RlVmFsaWQ7Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/lib/constants/row_mode.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/lib/constants/sf_params.js":
/*!***************************************************************!*\
  !*** ./node_modules/snowflake-sdk/lib/constants/sf_params.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("exports.paramsNames = Object.freeze({\n  SF_REQUEST_GUID: 'request_guid',\n  SF_REQUEST_ID: 'requestId',\n  SF_TOKEN: 'token',\n  SF_WAREHOUSE_NAME: 'warehouse',\n  SF_DB_NAME: 'databaseName',\n  SF_SCHEMA_NAME: 'schemaName',\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9saWIvY29uc3RhbnRzL3NmX3BhcmFtcy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcndpbHNvbi9EZXNrdG9wL3Byb2plY3RzL0VaVml6L25vZGVfbW9kdWxlcy9zbm93Zmxha2Utc2RrL2xpYi9jb25zdGFudHMvc2ZfcGFyYW1zLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydHMucGFyYW1zTmFtZXMgPSBPYmplY3QuZnJlZXplKHtcbiAgU0ZfUkVRVUVTVF9HVUlEOiAncmVxdWVzdF9ndWlkJyxcbiAgU0ZfUkVRVUVTVF9JRDogJ3JlcXVlc3RJZCcsXG4gIFNGX1RPS0VOOiAndG9rZW4nLFxuICBTRl9XQVJFSE9VU0VfTkFNRTogJ3dhcmVob3VzZScsXG4gIFNGX0RCX05BTUU6ICdkYXRhYmFzZU5hbWUnLFxuICBTRl9TQ0hFTUFfTkFNRTogJ3NjaGVtYU5hbWUnLFxufSk7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/lib/constants/sf_params.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/lib/core.js":
/*!************************************************!*\
  !*** ./node_modules/snowflake-sdk/lib/core.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Util = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/snowflake-sdk/lib/util.js\");\nconst Errors = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/snowflake-sdk/lib/errors.js\");\nconst ErrorCodes = Errors.codes;\nconst Connection = __webpack_require__(/*! ./connection/connection */ \"(rsc)/./node_modules/snowflake-sdk/lib/connection/connection.js\");\nconst ConnectionConfig = __webpack_require__(/*! ./connection/connection_config */ \"(rsc)/./node_modules/snowflake-sdk/lib/connection/connection_config.js\");\nconst ConnectionContext = __webpack_require__(/*! ./connection/connection_context */ \"(rsc)/./node_modules/snowflake-sdk/lib/connection/connection_context.js\");\nconst GenericPool = __webpack_require__(/*! generic-pool */ \"(rsc)/./node_modules/generic-pool/index.js\");\nconst Logger = __webpack_require__(/*! ./logger */ \"(rsc)/./node_modules/snowflake-sdk/lib/logger.js\");\nconst LoggerCore = __webpack_require__(/*! ./logger/core */ \"(rsc)/./node_modules/snowflake-sdk/lib/logger/core.js\");\nconst DataTypes = __webpack_require__(/*! ./connection/result/data_types */ \"(rsc)/./node_modules/snowflake-sdk/lib/connection/result/data_types.js\");\nconst GlobalConfig = __webpack_require__(/*! ./global_config */ \"(rsc)/./node_modules/snowflake-sdk/lib/global_config.js\");\nconst { loadConnectionConfiguration } = __webpack_require__(/*! ./configuration/connection_configuration */ \"(rsc)/./node_modules/snowflake-sdk/lib/configuration/connection_configuration.js\");\n\n/**\n * Creates a new instance of the Snowflake core module.\n *\n * @param {Object} options\n *\n * @returns {Object}\n * @constructor\n */\nfunction Core(options) {\n  // validate input\n  Errors.assertInternal(Util.isObject(options));\n  Errors.assertInternal(\n    Util.exists(options.httpClient || options.httpClientClass));\n  Errors.assertInternal(Util.exists(options.loggerClass));\n\n  // set the logger instance\n  Logger.setInstance(new (options.loggerClass)());\n  Logger.getInstance().trace('Logger was initialized.');\n\n  // if a connection class is specified, it must be an object or function\n  let connectionClass = options.connectionClass;\n  if (Util.exists(connectionClass)) {\n    Errors.assertInternal(\n      Util.isObject(connectionClass) || Util.isFunction(connectionClass));\n    Logger.getInstance().debug('Connection class provided in driver core options will be used.');\n  } else {\n    // fall back to Connection\n    connectionClass = Connection;\n    Logger.getInstance().debug('Connection class was not overridden. Default connection class will be used.');\n  }\n\n  const qaMode = options.qaMode;\n  const clientInfo = options.client;\n  const ocspModes = GlobalConfig.ocspModes;\n\n  /**\n   * Creates a new Connection instance.\n   *\n   * @param {Object} connectionOptions\n   * @param {Object} [config]\n   *\n   * @returns {Object}\n   */\n  const createConnection = function createConnection(connectionOptions, config) {\n    // create a new ConnectionConfig and skip credential-validation if a config\n    // object has been specified; this is because if a config object has been\n    // specified, we're trying to deserialize a connection and the account name,\n    // username and password don't need to be specified because the config\n    // object already contains the tokens we need\n    // Alternatively, if the connectionOptions includes token information then we will use that\n    // instead of the username/password\n\n    Logger.getInstance().info('Creating new connection object');\n\n    if (connectionOptions == null) {\n      Logger.getInstance().info('Connection options were not specified. Loading connection configuration.');\n      try {\n        connectionOptions = loadConnectionConfiguration();\n      } catch ( error ) {\n        Logger.getInstance().error('Unable to load the connection configuration. Error: %s',  error.message);\n        Errors.checkArgumentExists(Util.exists(connectionOptions),\n          ErrorCodes.ERR_CONN_CREATE_MISSING_OPTIONS);\n      }\n    }\n\n    const validateCredentials = !config && (connectionOptions && !connectionOptions.sessionToken);\n\n    const connectionConfig =\n      new ConnectionConfig(connectionOptions, validateCredentials, qaMode, clientInfo);\n    Logger.getInstance().debug('Connection configuration object created');\n\n    // if an http client was specified in the options passed to the module, use\n    // it, otherwise create a new HttpClient\n    const httpClient = options.httpClient ||\n      new options.httpClientClass(connectionConfig);\n    Logger.getInstance().debug('HttpClient setup finished');\n\n\n    const connection = new connectionClass(\n      new ConnectionContext(connectionConfig, httpClient, config)\n    );\n\n    Logger.getInstance().info('Connection[id: %s] - connection object created successfully.', connection.getId());\n    return connection;\n  };\n\n  const instance =\n    {\n      ocspModes: ocspModes,\n      /**\n       * Creates a connection object that can be used to communicate with\n       * Snowflake.\n       *\n       * @param {Object} options\n       *\n       * @returns {Object}\n       */\n      createConnection: function (options) {\n        return createConnection(options);\n      },\n\n      /**\n      * Creates a connection pool for Snowflake connections\n      *\n      * @param {Object} connectionOptions\n      * @param {Object} poolOptions\n      *\n      * @returns {Object}\n      */\n      createPool: function (connectionOptions, poolOptions) {\n        return createPool(connectionOptions, poolOptions);\n      },\n\n      /**\n       * Deserializes a serialized connection.\n       *\n       * @param {Object} options\n       * @param {String} serializedConnection\n       *\n       * @returns {Object}\n       */\n      deserializeConnection: function (options, serializedConnection) {\n        // check for missing serializedConfig\n        Logger.getInstance().trace('Deserializing connection');\n\n        Errors.checkArgumentExists(Util.exists(serializedConnection),\n          ErrorCodes.ERR_CONN_DESERIALIZE_MISSING_CONFIG);\n\n        // check for invalid serializedConfig\n        Errors.checkArgumentValid(Util.isString(serializedConnection),\n          ErrorCodes.ERR_CONN_DESERIALIZE_INVALID_CONFIG_TYPE);\n\n        Logger.getInstance().debug('Deserializing connection from string object');\n\n        // try to json-parse serializedConfig\n        let config;\n        try {\n          config = JSON.parse(serializedConnection);\n        } finally {\n          // if serializedConfig can't be parsed to json, throw an error\n          Errors.checkArgumentValid(Util.isObject(config),\n            ErrorCodes.ERR_CONN_DESERIALIZE_INVALID_CONFIG_FORM);\n        }\n        Logger.getInstance().debug('Connection deserialized successfully');\n\n        return createConnection(options, config);\n      },\n\n      /**\n       * Serializes a given connection.\n       *\n       * @param {Object} connection\n       *\n       * @returns {String} a serialized version of the connection.\n       */\n      serializeConnection: function (connection) {\n        Logger.getInstance().trace('Connection[id: %s] - serializing connection.', connection.getId());\n        return connection ? connection.serialize() : connection;\n      },\n\n      /**\n       * Configures this instance of the Snowflake core module.\n       *\n       * @param {Object} options\n       */\n      configure: function (options) {\n        Logger.getInstance().debug('Configuring Snowflake core module.');\n        const logLevel = extractLogLevel(options);\n        const logFilePath = options.logFilePath;\n        const additionalLogToConsole = options.additionalLogToConsole;\n\n        if (logLevel != null || logFilePath) {\n          Logger.getInstance().configure(\n            {\n              level: logLevel,\n              filePath: logFilePath,\n              additionalLogToConsole: additionalLogToConsole\n            });\n          Logger.getInstance().info('Configuring logger with level: %s, filePath: %s, additionalLogToConsole: %s', logLevel, logFilePath, additionalLogToConsole);\n        }\n\n        const disableOCSPChecks = options.disableOCSPChecks;\n        if (Util.exists(disableOCSPChecks)) {\n          // check that the specified value is a boolean\n          Errors.checkArgumentValid(Util.isBoolean(disableOCSPChecks),\n            ErrorCodes.ERR_GLOBAL_CONFIGURE_INVALID_DISABLE_OCSP_CHECKS);\n\n          GlobalConfig.setDisableOCSPChecks(disableOCSPChecks);\n          Logger.getInstance().debug('Setting disableOCSPChecks to value from core options: %s', disableOCSPChecks);\n        }\n\n        const ocspFailOpen = options.ocspFailOpen;\n        if (Util.exists(ocspFailOpen)) {\n          Errors.checkArgumentValid(Util.isBoolean(ocspFailOpen),\n            ErrorCodes.ERR_GLOBAL_CONFIGURE_INVALID_OCSP_MODE);\n\n          GlobalConfig.setOcspFailOpen(ocspFailOpen);\n          Logger.getInstance().debug('Setting ocspFailOpen to value from core options: %s ', ocspFailOpen);\n        }\n\n        const jsonColumnVariantParser = options.jsonColumnVariantParser;\n        if (Util.exists(jsonColumnVariantParser)) {\n          Errors.checkArgumentValid(Util.isFunction(jsonColumnVariantParser),\n            ErrorCodes.ERR_GLOBAL_CONFIGURE_INVALID_JSON_PARSER);\n\n          GlobalConfig.setJsonColumnVariantParser(jsonColumnVariantParser);\n          Logger.getInstance().debug('Setting JSON Column Variant Parser to value from core options');\n        }\n\n        const xmlColumnVariantParser = options.xmlColumnVariantParser;\n        const xmlParserConfig = options.xmlParserConfig;\n        if (Util.exists(xmlColumnVariantParser)) {\n          Errors.checkArgumentValid(Util.isFunction(xmlColumnVariantParser),\n            ErrorCodes.ERR_GLOBAL_CONFIGURE_INVALID_XML_PARSER);\n\n          GlobalConfig.setXmlColumnVariantParser(xmlColumnVariantParser);\n          Logger.getInstance().debug('Setting XML Column Variant Parser to value from core options');\n        } else if (Util.exists(xmlParserConfig)) {\n          GlobalConfig.createXmlColumnVariantParserWithParameters(xmlParserConfig);\n          Logger.getInstance().debug('Creating XML Column Variant Parser with parameters from core options');\n        }\n\n        const keepAlive = options.keepAlive;\n        if (Util.exists(keepAlive)) {\n          Errors.checkArgumentValid(Util.isBoolean(keepAlive),\n            ErrorCodes.ERR_GLOBAL_CONFIGURE_INVALID_KEEP_ALIVE);\n\n          GlobalConfig.setKeepAlive(keepAlive);\n          Logger.getInstance().debug('Setting keepAlive to value from core options: %s', keepAlive);\n        }\n\n        const useEnvProxy = options.useEnvProxy;\n        if (Util.exists(useEnvProxy)) {\n          Errors.checkArgumentValid(Util.isBoolean(useEnvProxy),\n            ErrorCodes.ERR_GLOBAL_CONFIGURE_INVALID_USE_ENV_PROXY);\n\n          GlobalConfig.setEnvProxy(useEnvProxy);\n        }\n\n        const customCredentialManager = options.customCredentialManager;\n        if (Util.exists(customCredentialManager)) {\n          Errors.checkArgumentValid(Util.isObject(customCredentialManager),\n            ErrorCodes.ERR_GLOBAL_CONFIGURE_INVALID_CUSTOM_CREDENTIAL_MANAGER);\n\n          GlobalConfig.setCustomCredentialManager(customCredentialManager);\n          Logger.getInstance().debug('Setting customCredentialManager to value from core options %s', customCredentialManager);\n        }\n      }\n    };\n\n  function extractLogLevel(options) {\n    const logTag = options.logLevel;\n    if (Util.exists(logTag)) {\n      Errors.checkArgumentValid(LoggerCore.isValidLogTag(logTag),\n        ErrorCodes.ERR_GLOBAL_CONFIGURE_INVALID_LOG_LEVEL);\n\n      return LoggerCore.logTagToLevel(logTag);\n    }\n    return null;\n  }\n\n  // add some read-only constants\n  const nativeTypeValues = DataTypes.NativeTypes.values;\n  Object.defineProperties(instance,\n    {\n      STRING: { value: nativeTypeValues.STRING },\n      BOOLEAN: { value: nativeTypeValues.BOOLEAN },\n      NUMBER: { value: nativeTypeValues.NUMBER },\n      DATE: { value: nativeTypeValues.DATE },\n      OBJECT: { value: nativeTypeValues.OBJECT },\n      ARRAY: { value: nativeTypeValues.ARRAY },\n      MAP: { value: nativeTypeValues.MAP },\n      JSON: { value: nativeTypeValues.JSON }\n    });\n\n  /**\n  * Factory for Snowflake connections based on Generic Pool\n  *\n  * @param {Object} connectionOptions\n  *\n  * @returns {null}\n  */\n  function ConnectionFactory(connectionOptions) {\n    /**\n     * Creates a new connection instance.\n     *\n     * @returns {Object}\n     */\n    this.create = function () {\n      Logger.getInstance().debug('Creating new connection from factory.');\n      const connection = new createConnection(connectionOptions);\n\n      return new Promise((resolve, reject) => {\n        connection.connect(\n          function (err, conn) {\n            if (err) {\n              Logger.getInstance().error('Connection[id: %s] - Unable to connect. Error: %s', conn.getId(), err.message);\n              reject(new Error(err.message));\n            } else {\n              Logger.getInstance().debug('Connection[id: %s] - connected successfully. Callback called.', conn.getId());\n              resolve(conn);\n            }\n          }\n        );\n      });\n    };\n\n    /**\n    * Destroys the specified connection instance.\n    *\n    * @param {Object} connection\n    *\n    * @returns {Object}\n    */\n    this.destroy = function (connection) {\n      Logger.getInstance().debug('Destroying connection instance.');\n      return new Promise((resolve) => {\n        connection.destroy(function (err, conn) {\n          if (err) {\n            Logger.getInstance().error('Connection[id: %s] - disconnecting failed with error: %s', conn.getId(), err.message);\n          } else {\n            Logger.getInstance().debug('Connection[id: %s] - connection disconnected successfully. Callback called.', conn.getId());\n          }\n          resolve();\n        });\n      });\n    };\n\n    /**\n    * Returns the status of the connection.\n    *\n    * @param {Object} connection\n    *\n    * @returns {Boolean}\n    */\n    this.validate = async function (connection) {\n      Logger.getInstance().debug('Connection[id: %s] - validating connection instance', connection.getId());\n      return await connection.isValidAsync();\n    };\n  }\n\n  /**\n  * Creates a connection pool for Snowflake connections\n  *\n  * @param {Object} connectionOptions\n  * @param {Object} poolOptions\n  *\n  * @returns {Object}\n  */\n  const createPool = function createPool(connectionOptions, poolOptions) {\n    Logger.getInstance().info('Creating connection pool with provided options');\n\n    const connectionPool = GenericPool.createPool(\n      new ConnectionFactory(connectionOptions),\n      poolOptions\n    );\n    Logger.getInstance().debug('Base for connection pool created');\n\n    // avoid infinite loop if factory creation fails\n    connectionPool.on('factoryCreateError', function (err) {\n      Logger.getInstance().error('Connection pool factory creation failed: %s',  err.message);\n      const clientResourceRequest = connectionPool._waitingClientsQueue.dequeue();\n      if (clientResourceRequest) {\n        clientResourceRequest.reject(err);\n      }\n    });\n\n    Logger.getInstance().info('Connection pool object created successfully');\n\n    return connectionPool;\n  };\n\n  return instance;\n}\n\nmodule.exports = Core;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/lib/core.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/lib/errors.js":
/*!**************************************************!*\
  !*** ./node_modules/snowflake-sdk/lib/errors.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const Util = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/snowflake-sdk/lib/util.js\");\nconst errorMessages = __webpack_require__(/*! ./constants/error_messages */ \"(rsc)/./node_modules/snowflake-sdk/lib/constants/error_messages.js\");\n\nconst codes = {};\n\n// 400001\ncodes.ERR_INTERNAL_ASSERT_FAILED = 400001;\ncodes.ERR_UNSUPPORTED_NODE_JS_VERSION = 400002;\n\n// 401001\ncodes.ERR_SF_NETWORK_COULD_NOT_CONNECT = 401001;\ncodes.ERR_SF_RESPONSE_FAILURE = 401002;\ncodes.ERR_SF_RESPONSE_NOT_JSON = 401003;\ncodes.ERR_SF_RESPONSE_INVALID_TOKEN = 401004;\n\n// 402001\ncodes.ERR_LARGE_RESULT_SET_NETWORK_COULD_NOT_CONNECT = 402001;\ncodes.ERR_LARGE_RESULT_SET_RESPONSE_FAILURE = 402002;\n\n// 403001\ncodes.ERR_GLOBAL_CONFIGURE_INVALID_LOG_LEVEL = 403001;\ncodes.ERR_GLOBAL_CONFIGURE_INVALID_DISABLE_OCSP_CHECKS = 403002;\ncodes.ERR_GLOBAL_CONFIGURE_INVALID_OCSP_MODE = 403003;\ncodes.ERR_GLOBAL_CONFIGURE_INVALID_JSON_PARSER = 403004;\ncodes.ERR_GLOBAL_CONFIGURE_INVALID_XML_PARSER = 403005;\ncodes.ERR_GLOBAL_CONFIGURE_INVALID_KEEP_ALIVE = 403006;\ncodes.ERR_GLOBAL_CONFIGURE_INVALID_CUSTOM_CREDENTIAL_MANAGER = 403007;\ncodes.ERR_GLOBAL_CONFIGURE_INVALID_USE_ENV_PROXY = 403008;\n\n// 404001\ncodes.ERR_CONN_CREATE_MISSING_OPTIONS = 404001;\ncodes.ERR_CONN_CREATE_INVALID_OPTIONS = 404002;\ncodes.ERR_CONN_CREATE_MISSING_USERNAME = 404003;\ncodes.ERR_CONN_CREATE_INVALID_USERNAME = 404004;\ncodes.ERR_CONN_CREATE_MISSING_PASSWORD = 404005;\ncodes.ERR_CONN_CREATE_INVALID_PASSWORD = 404006;\ncodes.ERR_CONN_CREATE_MISSING_ACCOUNT = 404007;\ncodes.ERR_CONN_CREATE_INVALID_ACCOUNT = 404008;\ncodes.ERR_CONN_CREATE_MISSING_ACCESS_URL = 404009;\ncodes.ERR_CONN_CREATE_INVALID_ACCESS_URL = 404010;\ncodes.ERR_CONN_CREATE_INVALID_WAREHOUSE = 404011;\ncodes.ERR_CONN_CREATE_INVALID_DATABASE = 404012;\ncodes.ERR_CONN_CREATE_INVALID_SCHEMA = 404013;\ncodes.ERR_CONN_CREATE_INVALID_ROLE = 404014;\ncodes.ERR_CONN_CREATE_MISSING_PROXY_HOST = 404015;\ncodes.ERR_CONN_CREATE_INVALID_PROXY_HOST = 404016;\ncodes.ERR_CONN_CREATE_MISSING_PROXY_PORT = 404017;\ncodes.ERR_CONN_CREATE_INVALID_PROXY_PORT = 404018;\ncodes.ERR_CONN_CREATE_INVALID_STREAM_RESULT = 404019;\ncodes.ERR_CONN_CREATE_INVALID_FETCH_AS_STRING = 404020;\ncodes.ERR_CONN_CREATE_INVALID_FETCH_AS_STRING_VALUES = 404021;\ncodes.ERR_CONN_CREATE_INVALID_REGION = 404022;\ncodes.ERR_CONN_CREATE_INVALID_KEEP_ALIVE = 404023;\ncodes.ERR_CONN_CREATE_INVALID_KEEP_ALIVE_HEARTBEAT_FREQ = 404024;\ncodes.ERR_CONN_CREATE_INVALID_TREAT_INTEGER_AS_BIGINT = 404025;\ncodes.ERR_CONN_CREATE_INVALID_PRIVATE_KEY = 404026;\ncodes.ERR_CONN_CREATE_INVALID_PRIVATE_KEY_PATH = 404027;\ncodes.ERR_CONN_CREATE_INVALID_PRIVATE_KEY_PASS = 404028;\ncodes.ERR_CONN_CREATE_INVALID_OAUTH_TOKEN = 404029;\ncodes.ERR_CONN_CREATE_INVALID_VALIDATE_DEFAULT_PARAMETERS = 404030;\ncodes.ERR_CONN_CREATE_INVALID_APPLICATION = 404031;\ncodes.ERR_CONN_CREATE_MISSING_PROXY_USER = 404032;\ncodes.ERR_CONN_CREATE_INVALID_PROXY_USER = 404033;\ncodes.ERR_CONN_CREATE_MISSING_PROXY_PASS = 404034;\ncodes.ERR_CONN_CREATE_INVALID_PROXY_PASS = 404035;\ncodes.ERR_CONN_CREATE_INVALID_NO_PROXY = 404036;\ncodes.ERR_CONN_CREATE_INVALID_ARRAY_BINDING_THRESHOLD = 404037;\ncodes.ERR_CONN_CREATE_INVALID_GCS_USE_DOWNSCOPED_CREDENTIAL = 404038;\ncodes.ERR_CONN_CREATE_INVALID_FORCE_STAGE_BIND_ERROR = 404039;\ncodes.ERR_CONN_CREATE_INVALID_BROWSER_TIMEOUT = 404040;\ncodes.ERR_CONN_CREATE_INVALID_DISABLED_QUERY_CONTEXT_CACHE = 404041;\ncodes.ERR_CONN_CREATE_INVALID_INCLUDE_RETRY_REASON = 404042;\ncodes.ERR_CONN_CREATE_INVALID_CLIENT_CONFIG_FILE = 404043;\ncodes.ERR_CONN_CREATE_INVALID_RETRY_TIMEOUT = 404044;\ncodes.ERR_CONN_CREATE_INVALID_ACCOUNT_REGEX = 404045;\ncodes.ERR_CONN_CREATE_INVALID_REGION_REGEX = 404046;\ncodes.ERR_CONN_CREATE_INVALID_DISABLE_CONSOLE_LOGIN = 404047;\ncodes.ERR_CONN_CREATE_INVALID_FORCE_GCP_USE_DOWNSCOPED_CREDENTIAL = 404048;\ncodes.ERR_CONN_CREATE_INVALID_CLIENT_STORE_TEMPORARY_CREDENTIAL = 404049;\ncodes.ERR_CONN_CREATE_INVALID_REPRESENT_NULL_AS_STRING_NULL = 404050;\ncodes.ERR_CONN_CREATE_INVALID_DISABLE_SAML_URL_CHECK = 404051;\ncodes.ERR_CONN_CREATE_INVALID_CLIENT_REQUEST_MFA_TOKEN = 404052;\ncodes.ERR_CONN_CREATE_MISSING_HOST = 404053;\ncodes.ERR_CONN_CREATE_INVALID_HOST = 404054;\ncodes.ERR_CONN_CREATE_INVALID_PASSCODE_IN_PASSWORD = 404055;\ncodes.ERR_CONN_CREATE_INVALID_PASSCODE = 404056;\n\n// 405001\ncodes.ERR_CONN_CONNECT_INVALID_CALLBACK = 405001;\n\n// 405501\ncodes.ERR_CONN_CONNECT_STATUS_CONNECTING = 405501; // sql state: 08002\ncodes.ERR_CONN_CONNECT_STATUS_CONNECTED = 405502; // sql state: 08002\ncodes.ERR_CONN_CONNECT_STATUS_DISCONNECTED = 405503; // sql state: 08002\ncodes.ERR_CONN_CREATE_INVALID_AUTH_CONNECT = 405504;\ncodes.ERR_CONN_CONNECT_INVALID_CLIENT_CONFIG = 405505;\n\n// 406001\ncodes.ERR_CONN_DESTROY_INVALID_CALLBACK = 406001;\n\n// 406501\ncodes.ERR_CONN_DESTROY_STATUS_PRISTINE = 406501;\ncodes.ERR_CONN_DESTROY_STATUS_DISCONNECTED = 406502;\n\n// 407001\ncodes.ERR_CONN_REQUEST_STATUS_PRISTINE = 407001; // sql state: 08003\ncodes.ERR_CONN_REQUEST_STATUS_DISCONNECTED = 407002; // sql state: 08003\n\n// 408001\ncodes.ERR_CONN_DESERIALIZE_MISSING_CONFIG = 408001;\ncodes.ERR_CONN_DESERIALIZE_INVALID_CONFIG_TYPE = 408002;\ncodes.ERR_CONN_DESERIALIZE_INVALID_CONFIG_FORM = 408003;\n\n// 409001\ncodes.ERR_CONN_EXEC_STMT_MISSING_OPTIONS = 409001;\ncodes.ERR_CONN_EXEC_STMT_INVALID_OPTIONS = 409002;\ncodes.ERR_CONN_EXEC_STMT_MISSING_SQL_TEXT = 409003;\ncodes.ERR_CONN_EXEC_STMT_INVALID_SQL_TEXT = 409004;\ncodes.ERR_CONN_EXEC_STMT_INVALID_INTERNAL = 409005;\ncodes.ERR_CONN_EXEC_STMT_INVALID_PARAMETERS = 409006;\ncodes.ERR_CONN_EXEC_STMT_INVALID_BINDS = 409007;\ncodes.ERR_CONN_EXEC_STMT_INVALID_BIND_VALUES = 409008;\ncodes.ERR_CONN_EXEC_STMT_INVALID_COMPLETE = 409009;\ncodes.ERR_CONN_EXEC_STMT_INVALID_STREAM_RESULT = 409010;\ncodes.ERR_CONN_EXEC_STMT_INVALID_FETCH_AS_STRING = 409011;\ncodes.ERR_CONN_EXEC_STMT_INVALID_FETCH_AS_STRING_VALUES = 409012;\ncodes.ERR_CONN_EXEC_STMT_INVALID_REQUEST_ID = 409013;\ncodes.ERR_CONN_EXEC_STMT_INVALID_ASYNC_EXEC = 409014;\ncodes.ERR_CONN_EXEC_STMT_INVALID_DESCRIBE_ONLY = 409015;\n\n// 410001\ncodes.ERR_CONN_FETCH_RESULT_MISSING_OPTIONS = 410001;\ncodes.ERR_CONN_FETCH_RESULT_INVALID_OPTIONS = 410002;\ncodes.ERR_CONN_FETCH_RESULT_MISSING_QUERY_ID = 410003;\ncodes.ERR_CONN_FETCH_RESULT_INVALID_QUERY_ID = 410004;\ncodes.ERR_CONN_FETCH_RESULT_INVALID_COMPLETE = 410005;\ncodes.ERR_CONN_FETCH_RESULT_INVALID_STREAM_RESULT = 410006;\ncodes.ERR_CONN_FETCH_RESULT_INVALID_FETCH_AS_STRING = 410007;\ncodes.ERR_CONN_FETCH_RESULT_INVALID_FETCH_AS_STRING_VALUES = 410008;\ncodes.ERR_CONN_FETCH_RESULT_INVALID_CWD = 410009;\n\n// 411001\ncodes.ERR_STMT_STREAM_ROWS_INVALID_OPTIONS = 411001;\ncodes.ERR_STMT_STREAM_ROWS_INVALID_START = 411002;\ncodes.ERR_STMT_STREAM_ROWS_INVALID_END = 411003;\ncodes.ERR_STMT_STREAM_ROWS_INVALID_FETCH_AS_STRING = 411004;\ncodes.ERR_STMT_STREAM_ROWS_INVALID_FETCH_AS_STRING_VALUES = 411005;\ncodes.ERR_STMT_STREAM_ROWS_INVALID_ROW_MODE = 411006;\n\n// 412001\ncodes.ERR_OCSP_REVOKED = 412001;\ncodes.ERR_OCSP_UNKNOWN = 412002;\ncodes.ERR_OCSP_NO_SIGNATURE_ALGORITHM = 412003;\ncodes.ERR_OCSP_INVALID_SIGNATURE = 412004;\ncodes.ERR_OCSP_NO_RESPONSE = 412005;\ncodes.ERR_OCSP_INVALID_VALIDITY = 412006;\ncodes.ERR_OCSP_UNKNOWN_STATE = 412007;\ncodes.ERR_OCSP_NOT_TWO_ELEMENTS = 412008;\ncodes.ERR_OCSP_CACHE_EXPIRED = 412009;\ncodes.ERR_OCSP_FAILED_PARSE_RESPONSE = 412010;\ncodes.ERR_OCSP_INVALID_CERTIFICATE_VALIDITY = 412011;\ncodes.ERR_OCSP_RESPONDER_TIMEOUT = 412012;\ncodes.ERR_OCSP_CACHE_SERVER_TIMEOUT = 412013;\ncodes.ERR_OCSP_FAILED_OBTAIN_OCSP_RESPONSE = 412014;\n\n// 450001\ncodes.ERR_STMT_FETCH_ROWS_MISSING_OPTIONS = 450001;\ncodes.ERR_STMT_FETCH_ROWS_INVALID_OPTIONS = 450002;\ncodes.ERR_STMT_FETCH_ROWS_MISSING_EACH = 450003;\ncodes.ERR_STMT_FETCH_ROWS_INVALID_EACH = 450004;\ncodes.ERR_STMT_FETCH_ROWS_MISSING_END = 450005;\ncodes.ERR_STMT_FETCH_ROWS_INVALID_END = 450006;\ncodes.ERR_STMT_FETCH_ROWS_FETCHING_RESULT = 450007;\n\n// 460001\ncodes.ERR_GET_RESPONSE_QUERY_INVALID_UUID = 460001;\ncodes.ERR_GET_RESULTS_QUERY_ID_NO_DATA = 460002;\ncodes.ERR_GET_RESULTS_QUERY_ID_NOT_SUCCESS_STATUS = 460003;\n\nexports.codes = codes;\n\n/**\n * A map in which the keys are the error codes and the values are the\n * corresponding SQL-states.\n */\nconst errCodeToSqlState = exports.mapErrorCodeToSqlState =\n  {\n    405501: '08002',\n    405502: '08002',\n    405503: '08003',\n    407001: '08003',\n    407002: '08003'\n  };\n\n/**\n * An enumeration of all the different types of errors we create.\n */\nconst errorTypes =\n  {\n    // internal synchronous errors\n    InternalAssertError: 'InternalAssertError',\n\n    // external synchronous errors\n    MissingParameterError: 'MissingParameterError',\n    InvalidParameterError: 'InvalidParameterError',\n\n    // external asynchronous errors\n    NetworkError: 'NetworkError',\n    RequestFailedError: 'RequestFailedError',\n    UnexpectedContentError: 'UnexpectedContentError',\n    OperationFailedError: 'OperationFailedError',\n    LargeResultSetError: 'LargeResultSetError',\n    ClientError: 'ClientError',\n    OCSPError: 'OCSPError'\n  };\n\n/**\n * Ensures the truth of an expression. Used to catch internal programming\n * errors. If the given expression is false, an InternalAssertError will be\n * thrown.\n *\n * @param {Boolean} expression a boolean expression.\n * @param {String} [message] a message for the error should the check fail.\n */\nexports.assertInternal = function (expression, message) {\n  if (!expression) {\n    throw createError(errorTypes.InternalAssertError,\n      {\n        code: codes.ERR_INTERNAL_ASSERT_FAILED,\n        message: message,\n        synchronous: true\n      });\n  }\n};\n\n/**\n * Ensures the truth of an expression. Used to make sure all required arguments\n * are passed in to a method. If the specified expression is false, a\n * MissingParameterError will be thrown.\n *\n * @param {Boolean} expression a boolean expression.\n * @param {Number} errorCode a code for the error should the check fail.\n *\n * @throws will throw an MissingParameter error if the expression is false.\n */\nexports.checkArgumentExists = function (expression, errorCode) {\n  if (!expression) {\n    throw createError(errorTypes.MissingParameterError,\n      {\n        code: errorCode,\n        messageArgs: Array.prototype.slice.call(arguments, 2),\n        synchronous: true\n      });\n  }\n};\n\n/**\n * Ensures the truth of an expression. Used for validating arguments to methods.\n * If the specified expression is false, an InvalidParameterError will be\n * thrown.\n *\n * @param {Boolean} expression a boolean expression.\n * @param {Number} errorCode a code for the error should the check fail.\n *\n * @throws will throw an InvalidParameter error if the expression is false.\n */\nexports.checkArgumentValid = function (expression, errorCode) {\n  if (!expression) {\n    throw createError(errorTypes.InvalidParameterError,\n      {\n        code: errorCode,\n        messageArgs: Array.prototype.slice.call(arguments, 2),\n        synchronous: true\n      });\n  }\n};\n\n/**\n * Creates a new NetworkError.\n *\n * @param {Number} errorCode the error code to use when building the error.\n * @param {Error} cause the underlying cause of the network error.\n *\n * @returns {Error}\n */\nexports.createNetworkError = function (errorCode, cause) {\n  return createError(errorTypes.NetworkError,\n    {\n      code: errorCode,\n      cause: cause\n    });\n};\n\n/**\n * Creates a new RequestFailedError.\n *\n * @param {Number} errorCode the error code to use when building the error.\n * @param {Object} response the response sent by Global Services.\n *\n * @returns {Error}\n */\nexports.createRequestFailedError = function (errorCode, response) {\n  return createError(errorTypes.RequestFailedError,\n    {\n      code: errorCode,\n      response: response\n    });\n};\n\n/**\n * Creates a new UnexpectedContentError.\n *\n * @param {Number} errorCode the error code to use when building the error.\n * @param {String} responseBody the response body sent by Global Services.\n *\n * @returns {Error}\n */\nexports.createUnexpectedContentError = function (errorCode, responseBody) {\n  return createError(errorTypes.UnexpectedContentError,\n    {\n      code: errorCode,\n      responseBody: responseBody\n    });\n};\n\n/**\n * Creates a new OperationFailedError.\n *\n * @param {Number} errorCode the error code to use when building the error.\n * @param {Object} data the data sent by Global Services.\n * @param {String} message the error message sent by Global Services.\n * @param {String} sqlState the sql state sent by Global Services.\n *\n * @returns {Error}\n */\nexports.createOperationFailedError = function (\n  errorCode, data, message, sqlState) {\n  return createError(errorTypes.OperationFailedError,\n    {\n      code: errorCode,\n      data: data,\n      message: message,\n      sqlState: sqlState\n    });\n};\n\n/**\n * Creates a new LargeResultSetError.\n *\n * @param {Number} errorCode the error code to use when building the error.\n * @param {Object} response the response sent by S3/Blob.\n *\n * @returns {Error}\n */\nexports.createLargeResultSetError = function (errorCode, response) {\n  return createError(errorTypes.LargeResultSetError,\n    {\n      code: errorCode,\n      response: response\n    });\n};\n\n/**\n * Creates a new ClientError.\n *\n * @param {Number} errorCode the error code to use when building the error.\n * @param {Object} [isFatal] whether the error is fatal.\n *\n * @return {Error}\n */\nexports.createClientError = function (errorCode, isFatal) {\n  return createError(errorTypes.ClientError,\n    {\n      code: errorCode,\n      isFatal: isFatal,\n      messageArgs: Array.prototype.slice.call(arguments, 2)\n    });\n};\n\n/**\n * Creates a OCSPError\n *\n * @param {Number} errorCode the error code to use when building the error.\n * @param {String} message\n * @returns {Error}\n */\nexports.createOCSPError = function (errorCode) {\n  return createError(errorTypes.OCSPError,\n    {\n      code: errorCode,\n      messageArgs: Array.prototype.slice.call(arguments, 1)\n    }\n  );\n};\n\n/**\n * Creates a new error by combining the error messages from the json parser and xml parser\n *\n * @param {Object} jsonParseError contains the JSON parse error message\n * @param {Object} xmlParseError contains the XML parse error message\n * @returns {Error}\n */\nexports.VariantParseError = function (jsonParseError, xmlParseError) {\n  const errMessage = 'VariantParseError: Variant cannot be parsed neither as JSON nor as XML:\\n' +\n    ` - JSON parse error message: ${jsonParseError.message}\\n` +\n    ` - XML parse error message: ${xmlParseError.message}`;\n  return new Error(errMessage);\n};\n\n/**\n * Determines if a given error is an InternalAssertError.\n *\n * @param {Error} error\n *\n * @returns {Boolean}\n */\nexports.isInternalAssertError = function (error) {\n  return isErrorOfType(error, errorTypes.InternalAssertError);\n};\n\n/**\n * Determines if a given error is a MissingParameterError.\n *\n * @param {Error} error\n *\n * @returns {Boolean}\n */\nexports.isMissingParameterError = function (error) {\n  return isErrorOfType(error, errorTypes.MissingParameterError);\n};\n\n/**\n * Determines if a given error is an InvalidParameterError.\n *\n * @param {Error} error\n *\n * @returns {Boolean}\n */\nexports.isInvalidParameterError = function (error) {\n  return isErrorOfType(error, errorTypes.InvalidParameterError);\n};\n\n/**\n * Determines if a given error is a NetworkError.\n *\n * @param {Error} error\n *\n * @returns {Boolean}\n */\nexports.isNetworkError = function (error) {\n  return isErrorOfType(error, errorTypes.NetworkError);\n};\n\n/**\n * Determines if a given error is a RequestFailedError.\n *\n * @param {Error} error\n *\n * @returns {Boolean}\n */\nexports.isRequestFailedError = function (error) {\n  return isErrorOfType(error, errorTypes.RequestFailedError);\n};\n\n/**\n * Determines if a given error is an UnexpectedContentError.\n *\n * @param {Error} error\n *\n * @returns {Boolean}\n */\nexports.isUnexpectedContentError = function (error) {\n  return isErrorOfType(error, errorTypes.UnexpectedContentError);\n};\n\n/**\n * Determines if a given error is an OperationFailedError.\n *\n * @param {Error} error\n *\n * @returns {Boolean}\n */\nexports.isOperationFailedError = function (error) {\n  return isErrorOfType(error, errorTypes.OperationFailedError);\n};\n\n/**\n * Determines if a given error is an LargeResultSetError.\n *\n * @param {Error} error\n *\n * @returns {Boolean}\n */\nexports.isLargeResultSetError = function (error) {\n  return isErrorOfType(error, errorTypes.LargeResultSetError);\n};\n\n/**\n * Externalizes an error.\n *\n * @param {Error} error\n *\n * @returns {Error}\n */\nexports.externalize = function (error) {\n  return error && error.externalize ? error.externalize() : error;\n};\n\n/**\n * Determines if a given error is of a specific type.\n *\n * @param {Error} error\n * @param {String} type\n *\n * @returns {Boolean}\n */\nfunction isErrorOfType(error, type) {\n  return error && (error.name === type);\n}\n\n/**\n * Creates a generic error.\n *\n * @param {String} name\n * @param {Object} options\n *\n * @returns {Error}\n */\nfunction createError(name, options) {\n  // TODO: validate that name is a string and options is an object\n\n  // TODO: this code is a bit of a mess and needs to be cleaned up\n\n  // create a new error\n  const error = new Error();\n\n  // set its name\n  error.name = name;\n\n  // set the error code\n  let code;\n  error.code = code = options.code;\n\n  // if no error message was specified in the options\n  let message = options.message;\n  if (!message) {\n    // use the error code to get the error message template\n    const messageTemplate = errorMessages[code];\n\n    // if some error message arguments were specified, substitute them into the\n    // error message template to get the full error message, otherwise just use\n    // the error message template as the error message\n    let messageArgs = options.messageArgs;\n    if (messageArgs) {\n      messageArgs = messageArgs.slice();\n      messageArgs.unshift(messageTemplate);\n      message = Util.format.apply(Util, messageArgs);\n    } else {\n      message = messageTemplate;\n    }\n  }\n  error.message = message;\n\n  // if no sql state was specified in the options, use the error code to try to\n  // get the appropriate sql state\n  let sqlState = options.sqlState;\n  if (!sqlState) {\n    sqlState = errCodeToSqlState[code];\n  }\n  error.sqlState = sqlState;\n\n  // set the error data\n  error.data = options.data;\n\n  // set the error response and response body\n  error.response = options.response;\n  error.responseBody = options.responseBody;\n\n  // set the error cause\n  error.cause = options.cause;\n\n  // set the error's fatal flag\n  error.isFatal = options.isFatal;\n\n  // if the error is not synchronous, add an externalize() method\n  if (!options.synchronous) {\n    error.externalize = function () {\n      const propNames =\n        [\n          'name',\n          'code',\n          'message',\n          'sqlState',\n          'data',\n          'response',\n          'responseBody',\n          'cause',\n          'isFatal',\n          'stack'\n        ];\n\n      const externalizedError = new Error();\n\n      let propName, propValue;\n      for (let index = 0, length = propNames.length; index < length; index++) {\n        propName = propNames[index];\n        propValue = this[propName];\n        if (Util.exists(propValue)) {\n          externalizedError[propName] = propValue;\n        }\n      }\n\n      return externalizedError;\n    };\n  }\n\n  return error;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/lib/errors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/lib/file_transfer_agent/azure_util.js":
/*!**************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/lib/file_transfer_agent/azure_util.js ***!
  \**************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const EncryptionMetadata = (__webpack_require__(/*! ./encrypt_util */ \"(rsc)/./node_modules/snowflake-sdk/lib/file_transfer_agent/encrypt_util.js\").EncryptionMetadata);\nconst FileHeader = (__webpack_require__(/*! ../file_util */ \"(rsc)/./node_modules/snowflake-sdk/lib/file_util.js\").FileHeader);\nconst expandTilde = __webpack_require__(/*! expand-tilde */ \"(rsc)/./node_modules/expand-tilde/index.js\");\nconst resultStatus = (__webpack_require__(/*! ../file_util */ \"(rsc)/./node_modules/snowflake-sdk/lib/file_util.js\").resultStatus);\nconst ProxyUtil = __webpack_require__(/*! ../proxy_util */ \"(rsc)/./node_modules/snowflake-sdk/lib/proxy_util.js\");\nconst { isBypassProxy } = __webpack_require__(/*! ../http/node */ \"(rsc)/./node_modules/snowflake-sdk/lib/http/node.js\");\nconst Logger = __webpack_require__(/*! ../logger */ \"(rsc)/./node_modules/snowflake-sdk/lib/logger.js\");\n\nconst EXPIRED_TOKEN = 'ExpiredToken';\n\n// Azure Location\nfunction AzureLocation(containerName, path) {\n  return {\n    'containerName': containerName,\n    'path': path\n  };\n}\n\n/**\n * Creates an Azure utility object.\n *\n * @param {module} azure\n * @param {module} filestream\n *\n * @returns {Object}\n * @constructor\n */\nfunction AzureUtil(connectionConfig, azure, filestream) {\n  const AZURE = typeof azure !== 'undefined' ? azure : __webpack_require__(/*! @azure/storage-blob */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/index.js\");\n  const fs = typeof filestream !== 'undefined' ? filestream : __webpack_require__(/*! fs */ \"fs\");\n\n  /**\n  * Create a blob service client using an Azure SAS token.\n  *\n  * @param {Object} stageInfo\n  *\n  * @returns {String}\n  */\n  this.createClient = function (stageInfo) {\n    const stageCredentials = stageInfo['creds'];\n    const sasToken = stageCredentials['AZURE_SAS_TOKEN'];\n\n    const account = stageInfo['storageAccount'];\n    const connectionString = `https://${account}.blob.core.windows.net${sasToken}`;\n    let proxy = ProxyUtil.getProxy(connectionConfig.getProxy(), 'Azure Util');\n    if (proxy && !isBypassProxy(proxy, connectionString)) {\n      Logger.getInstance().debug(`The destination host is: ${ProxyUtil.getHostFromURL(connectionString)} and the proxy host is: ${proxy.host}`);\n      Logger.getInstance().trace(`Initializing the proxy information for the Azure Client: ${ProxyUtil.describeProxy(proxy)}`);\n\n      proxy = ProxyUtil.getAzureProxy(proxy);\n    }\n    ProxyUtil.hideEnvironmentProxy();\n    const blobServiceClient = new AZURE.BlobServiceClient(\n      connectionString, null,\n      {\n        proxyOptions: proxy,\n      }\n    );\n    ProxyUtil.restoreEnvironmentProxy();\n    return blobServiceClient;\n  };\n\n  /**\n  * Extract the container name and path from the metadata's stage location.\n  *\n  * @param {String} stageLocation\n  *\n  * @returns {Object}\n  */\n  this.extractContainerNameAndPath = function (stageLocation) {\n    // expand '~' and '~user' expressions\n    if (process.platform !== 'win32') {\n      stageLocation = expandTilde(stageLocation);\n    }\n\n    let containerName = stageLocation;\n    let path;\n\n    // split stage location as bucket name and path\n    if (stageLocation.includes('/')) {\n      containerName = stageLocation.substring(0, stageLocation.indexOf('/'));\n\n      path = stageLocation.substring(stageLocation.indexOf('/') + 1, stageLocation.length);\n      if (path && !path.endsWith('/')) {\n        path += '/';\n      }\n    }\n\n    return AzureLocation(containerName, path);\n  };\n\n  /**\n  * Create file header based on file being uploaded or not.\n  *\n  * @param {Object} meta\n  * @param {String} filename\n  *\n  * @returns {Object}\n  */\n  this.getFileHeader = async function (meta, filename) {\n    const stageInfo = meta['stageInfo'];\n    const client = this.createClient(stageInfo);\n    const azureLocation = this.extractContainerNameAndPath(stageInfo['location']);\n\n    const containerClient = client.getContainerClient(azureLocation.containerName);\n    const blobClient = containerClient.getBlobClient(azureLocation.path + filename);\n\n    let blobDetails;\n\n    try {\n      await blobClient.getProperties()\n        .then(function (data) {\n          blobDetails = data;\n        });\n    } catch (err) {\n      if (err['code'] === EXPIRED_TOKEN) {\n        meta['resultStatus'] = resultStatus.RENEW_TOKEN;\n        return null;\n      } else if (err['statusCode'] === 404) {\n        meta['resultStatus'] = resultStatus.NOT_FOUND_FILE;\n        return FileHeader(null, null, null);\n      } else if (err['statusCode'] === 400) {\n        meta['resultStatus'] = resultStatus.RENEW_TOKEN;\n        return null;\n      } else {\n        meta['resultStatus'] = resultStatus.ERROR;\n        return null;\n      }\n    }\n\n    meta['resultStatus'] = resultStatus.UPLOADED;\n\n    let encryptionMetadata = null;\n    if (blobDetails.metadata['encryptiondata']) {\n      const encryptionData = JSON.parse(blobDetails.metadata['encryptiondata']);\n      encryptionMetadata = EncryptionMetadata(\n        encryptionData['WrappedContentKey']['EncryptedKey'],\n        encryptionData['ContentEncryptionIV'],\n        blobDetails.metadata['matdesc']\n      );\n    }\n\n    return FileHeader(\n      blobDetails.metadata['sfcdigest'],\n      blobDetails.contentLength,\n      encryptionMetadata\n    );\n  };\n\n  /**\n  * Create the file metadata then upload the file.\n  *\n  * @param {String} dataFile\n  * @param {Object} meta\n  * @param {Object} encryptionMetadata\n  * @param {Number} maxConcurrency\n  *\n  * @returns {null}\n  */\n  this.uploadFile = async function (dataFile, meta, encryptionMetadata, maxConcurrency) {\n    const fileStream = fs.readFileSync(dataFile);\n    await this.uploadFileStream(fileStream, meta, encryptionMetadata, maxConcurrency);\n  };\n\n  /**\n  * Create the file metadata then upload the file stream.\n  *\n  * @param {String} fileStream\n  * @param {Object} meta\n  * @param {Object} encryptionMetadata\n  *\n  * @returns {null}\n  */\n  this.uploadFileStream = async function (fileStream, meta, encryptionMetadata) {\n    const azureMetadata = {\n      'sfcdigest': meta['SHA256_DIGEST']\n    };\n\n    if (encryptionMetadata) {\n      azureMetadata['encryptiondata'] =\n        JSON.stringify({\n          'EncryptionMode': 'FullBlob',\n          'WrappedContentKey': {\n            'KeyId': 'symmKey1',\n            'EncryptedKey': encryptionMetadata.key,\n            'Algorithm': 'AES_CBC_256'\n          },\n          'EncryptionAgent': {\n            'Protocol': '1.0',\n            'EncryptionAlgorithm': 'AES_CBC_128',\n          },\n          'ContentEncryptionIV': encryptionMetadata.iv,\n          'KeyWrappingMetadata': {\n            'EncryptionLibrary': 'Java 5.3.0'\n          }\n        });\n      azureMetadata['matdesc'] = encryptionMetadata.matDesc;\n    }\n\n    const stageInfo = meta['stageInfo'];\n    const client = this.createClient(stageInfo);\n    const azureLocation = this.extractContainerNameAndPath(stageInfo['location']);\n    const blobName = azureLocation.path + meta['dstFileName'];\n\n    const containerClient = client.getContainerClient(azureLocation.containerName);\n    const blockBlobClient = containerClient.getBlockBlobClient(blobName);\n\n    try {\n      await blockBlobClient.upload(fileStream, fileStream.length, {\n        metadata: azureMetadata,\n        blobHTTPHeaders:\n        {\n          blobContentEncoding: 'UTF-8',\n          blobContentType: 'application/octet-stream'\n        }\n      });\n    } catch (err) {\n      if (err['statusCode'] === 403 && detectAzureTokenExpireError(err)) {\n        meta['lastError'] = err;\n        meta['resultStatus'] = resultStatus.RENEW_TOKEN;\n        return;\n      } else {\n        meta['lastError'] = err;\n        meta['resultStatus'] = resultStatus.NEED_RETRY;\n      }\n      return;\n    }\n    meta['dstFileSize'] = meta['uploadSize'];\n    meta['resultStatus'] = resultStatus.UPLOADED;\n  };\n\n  /**\n   * Download the file blob then write the file.\n   *\n   * @param {Object} meta\n   * @param fullDstPath\n   *\n   * @returns {null}\n   */\n  this.nativeDownloadFile = async function (meta, fullDstPath) {\n    const stageInfo = meta['stageInfo'];\n    const client = this.createClient(stageInfo);\n    const azureLocation = this.extractContainerNameAndPath(stageInfo['location']);\n    const blobName = azureLocation.path + meta['srcFileName'];\n\n    const containerClient = client.getContainerClient(azureLocation.containerName);\n    const blockBlobClient = containerClient.getBlockBlobClient(blobName);\n\n    try {\n      const downloadBlockBlobResponse  = await blockBlobClient.download(0);\n      const readableStream = downloadBlockBlobResponse.readableStreamBody;\n\n      await new Promise((resolve, reject) => {\n        const writer = fs.createWriteStream(fullDstPath);\n        readableStream.on('data', (data) => {\n          writer.write(data);\n        });\n        readableStream.on('end', () => {\n          writer.end(resolve);\n        });\n        readableStream.on('error', reject);\n      });\n    } catch (err) {\n      if (err['statusCode'] === 403 && detectAzureTokenExpireError(err)) {\n        meta['lastError'] = err;\n        meta['resultStatus'] = resultStatus.RENEW_TOKEN;\n        return;\n      } else {\n        meta['lastError'] = err;\n        meta['resultStatus'] = resultStatus.NEED_RETRY;\n      }\n      return;\n    }\n    meta['resultStatus'] = resultStatus.DOWNLOADED;\n  };\n\n  /**\n  * Detect if the Azure token has expired.\n  *\n  * @param {Object} err\n  *\n  * @returns {Boolean}\n  */\n  function detectAzureTokenExpireError(err) {\n    if (err['statusCode'] !== 403) {\n      return false;\n    }\n    const errstr = err.toString();\n    return errstr.includes('Signature not valid in the specified time frame') ||\n      errstr.includes('Server failed to authenticate the request.');\n  }\n}\nmodule.exports = AzureUtil;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/lib/file_transfer_agent/azure_util.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/lib/file_transfer_agent/encrypt_util.js":
/*!****************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/lib/file_transfer_agent/encrypt_util.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const path = __webpack_require__(/*! path */ \"path\");\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst os = __webpack_require__(/*! os */ \"os\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst Logger = __webpack_require__(/*! ../logger */ \"(rsc)/./node_modules/snowflake-sdk/lib/logger.js\");\nconst AES_BLOCK_SIZE = 128;\nconst blockSize = parseInt(AES_BLOCK_SIZE / 8);  // in bytes\n\nconst QUERY_STAGE_MASTER_KEY = 'queryStageMasterKey';\nconst BASE64 = 'base64';\nconst DEFAULT_AAD = Buffer.from('');\nconst AUTH_TAG_LENGTH_IN_BYTES = 16;\n\nconst AES_CBC = {\n  cipherName: function (keySizeInBytes) {\n    return `aes-${keySizeInBytes * 8}-cbc`;\n  },\n  ivSize: 16\n};\n\nconst AES_ECB = {\n  cipherName: function (keySizeInBytes) {\n    return `aes-${keySizeInBytes * 8}-ecb`;\n  }\n};\n\nconst AES_GCM = {\n  cipherName: function (keySizeInBytes) {\n    return `aes-${keySizeInBytes * 8}-gcm`;\n  },\n  ivSize: 12\n};\n\n// Material Descriptor\nfunction MaterialDescriptor(smkId, queryId, keySize) {\n  return {\n    'smkId': smkId,\n    'queryId': queryId,\n    'keySize': keySize\n  };\n}\n\n// Encryption Material\nfunction EncryptionMetadata(key, dataIv, matDesc, keyIv, dataAad, keyAad) {\n  return {\n    'key': key,\n    'iv': dataIv,\n    'matDesc': matDesc,\n    'keyIv': keyIv,\n    'dataAad': dataAad,\n    'keyAad': keyAad\n  };\n}\n\nexports.EncryptionMetadata = EncryptionMetadata;\n\nfunction TempFileGenerator() {\n\n  this.fileSync = function (option = { dir: os.tmpdir(), prefix: '', postfix: '', extension: '' }) {\n    const randomName = crypto.randomUUID();\n    const fileName = `${option.prefix || ''}${randomName}${option.postfix || ''}${'.' + option.extension || 0}`;\n\n    if (!this.checkDirInTemp(option.dir)) {\n      option.dir = os.tmpdir();\n    }\n\n    const fullpath = path.join(option.dir, fileName);\n    \n    fs.writeFileSync(fullpath, '');\n    const fileDescriptor = fs.openSync(fullpath);\n    return { name: fullpath, fd: fileDescriptor };\n  };\n  \n  this.file = function (option = { dir: os.tmpdir(), prefix: '', postfix: '', extension: '' }, callback) {\n    try {\n      const { name, fd } = this.fileSync(option);\n      callback(null, name, fd);\n    } catch (err) {\n      callback(err);\n    }\n  };\n  \n  this.checkDirInTemp = function (directoryPath) {\n    if (!directoryPath || directoryPath.length === 0) {\n      return false;\n    }\n  \n    if (directoryPath.includes(os.tmpdir())) {\n      if (fs.existsSync(directoryPath)) {\n        return true;\n      } else {\n        Logger.getInstance().warn(`no such file or directory, open ${directoryPath}`);\n      }\n    } else {\n      Logger.getInstance().warn(`dir option must be relative to ${os.tmpdir()}, found ${directoryPath}`);\n    }\n    return false;\n  };\n}\n\n/**\n * Creates an encryption utility object.\n *\n * @param {module} encrypt\n * @param {module} filestream\n * @param {module} temp\n * \n * @returns {Object}\n * @constructor\n */\nfunction EncryptUtil(encrypt, filestream, temp) {\n  const crypto = typeof encrypt !== 'undefined' ? encrypt : __webpack_require__(/*! crypto */ \"crypto\");\n  // TODO: SNOW-1814883: Replace 'fs' with 'fs/promises'\n  const fs = typeof filestream !== 'undefined' ? filestream : __webpack_require__(/*! fs */ \"fs\");\n  const tmp = typeof temp !== 'undefined' ? temp : new TempFileGenerator();\n\n  /**\n   * Generate a buffer with random bytes given a size.\n   *\n   * @param {Number} byteLength\n   *\n   * @returns {Buffer} of size byteLength\n   */\n  function getSecureRandom(byteLength) {\n    return crypto.randomBytes(byteLength);\n  }\n\n  /**\n  * Convert a material descriptor object's values to unicode.\n  *\n  * @param {Object} matDesc\n  *\n  * @returns {Object}\n  */\n  function matDescToUnicode(matDesc) {\n    matDesc['smkId'] = matDesc['smkId'].toString();\n    matDesc['keySize'] = matDesc['keySize'].toString();\n    const newMatDesc = JSON.stringify(matDesc);\n    return newMatDesc;\n  }\n\n  function createEncryptionMetadata(encryptionMaterial, keySize, encryptedKey, dataIv, keyIv = null, dataAad = null, keyAad = null) {\n    const matDesc = new MaterialDescriptor(\n      encryptionMaterial.smkId,\n      encryptionMaterial.queryId,\n      keySize * 8\n    );\n\n    return new EncryptionMetadata(\n      encryptedKey.toString(BASE64),\n      dataIv.toString(BASE64),\n      matDescToUnicode(matDesc),\n      keyIv ? keyIv.toString(BASE64) : null,\n      dataAad ? dataAad.toString(BASE64) : null,\n      keyAad ? keyAad.toString(BASE64) : null\n    );\n  }\n\n  /**\n   * Encrypt content using AES-CBC algorithm.\n   */\n  this.encryptFileStream = async function (encryptionMaterial, content) {\n    return this.encryptDataCBC(encryptionMaterial, content);\n  };\n\n  this.encryptDataCBC = function (encryptionMaterial, data) {\n    const decodedKek = Buffer.from(encryptionMaterial[QUERY_STAGE_MASTER_KEY], BASE64);\n    const keySize = decodedKek.length;\n\n    const dataIv = getSecureRandom(AES_CBC.ivSize);\n    const fileKey = getSecureRandom(keySize);\n\n    const dataCipher = crypto.createCipheriv(AES_CBC.cipherName(keySize), fileKey, dataIv);\n    const encryptedData = performCrypto(dataCipher, data);\n\n    const keyCipher = crypto.createCipheriv(AES_ECB.cipherName(keySize), decodedKek, null);\n    const encryptedKey = performCrypto(keyCipher, fileKey);\n\n    return {\n      encryptionMetadata: createEncryptionMetadata(encryptionMaterial, keySize, encryptedKey, dataIv),\n      dataStream: encryptedData\n    };\n  };\n\n  //TODO: SNOW-940981: Add proper usage when feature is ready\n  this.encryptDataGCM = function (encryptionMaterial, data) {\n    const decodedKek = Buffer.from(encryptionMaterial[QUERY_STAGE_MASTER_KEY], BASE64);\n    const keySize = decodedKek.length;\n\n    const dataIv = getSecureRandom(AES_GCM.ivSize);\n    const fileKey = getSecureRandom(keySize);\n\n    const encryptedData = this.encryptGCM(data, fileKey, dataIv, DEFAULT_AAD);\n\n    const keyIv = getSecureRandom(AES_GCM.ivSize);\n    const encryptedKey = this.encryptGCM(fileKey, decodedKek, keyIv, DEFAULT_AAD);\n    return {\n      encryptionMetadata: createEncryptionMetadata(encryptionMaterial, keySize, encryptedKey, dataIv, keyIv, DEFAULT_AAD, DEFAULT_AAD),\n      dataStream: encryptedData\n    };\n  };\n\n  this.encryptGCM = function (data, key, iv, aad) {\n    const cipher = crypto.createCipheriv(AES_GCM.cipherName(key.length), key, iv, { authTagLength: AUTH_TAG_LENGTH_IN_BYTES });\n    if (aad) {\n      cipher.setAAD(aad);\n    }\n    const encryptedData = performCrypto(cipher, data);\n    return Buffer.concat([encryptedData, cipher.getAuthTag()]);\n  };\n\n  this.decryptGCM = function (data, key, iv, aad) {\n    const decipher = crypto.createDecipheriv(AES_GCM.cipherName(key.length), key, iv, { authTagLength: AUTH_TAG_LENGTH_IN_BYTES });\n    if (aad) {\n      decipher.setAAD(aad);\n    }\n    // last 16 bytes of data is the authentication tag\n    const authTag = data.slice(data.length - AUTH_TAG_LENGTH_IN_BYTES, data.length);\n    const cipherText = data.slice(0, data.length - AUTH_TAG_LENGTH_IN_BYTES);\n    decipher.setAuthTag(authTag);\n    return performCrypto(decipher, cipherText);\n  };\n  \n  /**\n   * Encrypt file using AES algorithm.\n   */\n  this.encryptFile = async function (encryptionMaterial, inputFilePath,\n    tmpDir = null, chunkSize = blockSize * 4 * 1024) {\n    return await this.encryptFileCBC(encryptionMaterial, inputFilePath, tmpDir, chunkSize);\n  };\n\n  this.encryptFileCBC = async function (encryptionMaterial, inputFilePath,\n    tmpDir = null, chunkSize = blockSize * 4 * 1024) {\n    const decodedKek = Buffer.from(encryptionMaterial[QUERY_STAGE_MASTER_KEY], BASE64);\n    const keySize = decodedKek.length;\n\n    const dataIv = getSecureRandom(AES_CBC.ivSize);\n    const fileKey = getSecureRandom(keySize);\n    const dataCipher = crypto.createCipheriv(AES_CBC.cipherName(keySize), fileKey, dataIv);\n    const encryptedFilePath = await performFileStreamCrypto(dataCipher, tmpDir, inputFilePath, chunkSize);\n\n    const keyCipher = crypto.createCipheriv(AES_ECB.cipherName(keySize), decodedKek, null);\n    const encryptedKey = performCrypto(keyCipher, fileKey);\n\n    return {\n      encryptionMetadata: createEncryptionMetadata(encryptionMaterial, keySize, encryptedKey, dataIv),\n      dataFile: encryptedFilePath\n    };\n  };\n\n  //TODO: SNOW-940981: Add proper usage when feature is ready\n  this.encryptFileGCM = async function (encryptionMaterial, inputFilePath, tmpDir = null) {\n    const decodedKek = Buffer.from(encryptionMaterial[QUERY_STAGE_MASTER_KEY], BASE64);\n\n    const dataIv = getSecureRandom(AES_GCM.ivSize);\n    const fileKey = getSecureRandom(decodedKek.length);\n\n    const fileContent = await new Promise((resolve, reject) => {\n      fs.readFile(inputFilePath, (err, data) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(data);\n        }\n      });\n    });\n\n    const encryptedData = this.encryptGCM(fileContent, fileKey, dataIv, DEFAULT_AAD);\n    const encryptedFilePath = await writeContentToFile(tmpDir, path.basename(inputFilePath) + '#', encryptedData);\n\n    const keyIv = getSecureRandom(AES_GCM.ivSize);\n    const encryptedKey = this.encryptGCM(fileKey, decodedKek, keyIv, DEFAULT_AAD);\n\n    return {\n      encryptionMetadata: createEncryptionMetadata(encryptionMaterial, fileKey.length, encryptedKey, dataIv, keyIv, DEFAULT_AAD, DEFAULT_AAD),\n      dataFile: encryptedFilePath\n    };\n  };\n\n  /**\n   * Decrypt file using AES algorithm.\n   */\n  this.decryptFile = async function (metadata, encryptionMaterial, inputFilePath,\n    tmpDir = null, chunkSize = blockSize * 4 * 1024) {\n    return await this.decryptFileCBC(metadata, encryptionMaterial, inputFilePath, tmpDir, chunkSize);\n  };\n\n  this.decryptFileCBC = async function (metadata, encryptionMaterial, inputFilePath,\n    tmpDir = null, chunkSize = blockSize * 4 * 1024) {\n    const decodedKek = Buffer.from(encryptionMaterial[QUERY_STAGE_MASTER_KEY], BASE64);\n    const keyBytes = new Buffer.from(metadata.key, BASE64);\n    const ivBytes = new Buffer.from(metadata.iv, BASE64);\n    const keyDecipher = crypto.createDecipheriv(AES_ECB.cipherName(decodedKek.length), decodedKek, null);\n    const fileKey = performCrypto(keyDecipher, keyBytes);\n\n    const dataDecipher = crypto.createDecipheriv(AES_CBC.cipherName(fileKey.length), fileKey, ivBytes);\n    return await performFileStreamCrypto(dataDecipher, tmpDir, inputFilePath, chunkSize);\n  };\n\n  //TODO: SNOW-940981: Add proper usage when feature is ready\n  this.decryptFileGCM = async function (metadata, encryptionMaterial, inputFilePath, tmpDir = null) {\n    const decodedKek = Buffer.from(encryptionMaterial[QUERY_STAGE_MASTER_KEY], BASE64);\n    const keyBytes = new Buffer.from(metadata.key, BASE64);\n    const keyIvBytes = new Buffer.from(metadata.keyIv, BASE64);\n    const dataIvBytes = new Buffer.from(metadata.iv, BASE64);\n    const dataAadBytes = new Buffer.from(metadata.dataAad, BASE64);\n    const keyAadBytes = new Buffer.from(metadata.keyAad, BASE64);\n\n    const fileKey = this.decryptGCM(keyBytes, decodedKek, keyIvBytes, keyAadBytes);\n\n    const fileContent = await new Promise((resolve, reject) => {\n      fs.readFile(inputFilePath, (err, data) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(data);\n        }\n      });\n    });\n\n    const decryptedData = this.decryptGCM(fileContent, fileKey, dataIvBytes, dataAadBytes);\n    return await writeContentToFile(tmpDir, path.basename(inputFilePath) + '#', decryptedData);\n  };\n  \n  function performCrypto(cipherOrDecipher, data) {\n    const encryptedOrDecrypted = cipherOrDecipher.update(data);\n    const final = cipherOrDecipher.final();\n    return Buffer.concat([encryptedOrDecrypted, final]);\n  }\n\n  async function performFileStreamCrypto(cipherOrDecipher, tmpDir, inputFilePath, chunkSize) {\n    const outputFile = await new Promise((resolve, reject) => {\n      tmp.file({ dir: tmpDir, prefix: path.basename(inputFilePath) + '#' }, (err, path, fd) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve({ path, fd });\n        }\n      });\n    });\n    await new Promise(function (resolve) {\n      const inputStream = fs.createReadStream(inputFilePath, { highWaterMark: chunkSize });\n      const outputStream = fs.createWriteStream(outputFile.path);\n\n      inputStream.on('data', function (chunk) {\n        const encrypted = cipherOrDecipher.update(chunk);\n        outputStream.write(encrypted);\n      });\n      inputStream.on('close', function () {\n        outputStream.write(cipherOrDecipher.final());\n        outputStream.close(resolve);\n      });\n    });\n\n    await new Promise((resolve, reject) => {\n      fs.close(outputFile.fd, (err) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    });\n    return outputFile.path;\n  }\n\n  async function writeContentToFile(tmpDir, prefix, content,) {\n    const outputFile = await new Promise((resolve, reject) => {\n      tmp.file({ dir: tmpDir, prefix: prefix }, (err, path, fd) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve({ path, fd });\n        }\n      });\n    });\n    await new Promise((resolve, reject) => {\n      fs.writeFile(outputFile.path, content, err => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    });\n    await new Promise((resolve, reject) => {\n      fs.close(outputFile.fd, (err) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    });\n    return outputFile.path;\n  }\n}\n\nexports.EncryptUtil = EncryptUtil;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9saWIvZmlsZV90cmFuc2Zlcl9hZ2VudC9lbmNyeXB0X3V0aWwuanMiLCJtYXBwaW5ncyI6IkFBQUEsYUFBYSxtQkFBTyxDQUFDLGtCQUFNO0FBQzNCLGVBQWUsbUJBQU8sQ0FBQyxzQkFBUTtBQUMvQixXQUFXLG1CQUFPLENBQUMsY0FBSTtBQUN2QixXQUFXLG1CQUFPLENBQUMsY0FBSTtBQUN2QixlQUFlLG1CQUFPLENBQUMsbUVBQVc7QUFDbEM7QUFDQSxpREFBaUQ7O0FBRWpEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxrQkFBa0IsbUJBQW1CO0FBQ3JDLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQSxrQkFBa0IsbUJBQW1CO0FBQ3JDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGtCQUFrQixtQkFBbUI7QUFDckMsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDBCQUEwQjs7QUFFMUI7O0FBRUEsdUNBQXVDLDBEQUEwRDtBQUNqRztBQUNBLHdCQUF3QixvQkFBb0IsRUFBRSxXQUFXLEVBQUUscUJBQXFCLEVBQUUsMEJBQTBCLENBQUUsQ0FBQzs7QUFFL0c7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxtQ0FBbUMsMERBQTBEO0FBQzdGO0FBQ0EsY0FBYyxXQUFXO0FBQ3pCO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUixxRUFBcUUsY0FBYztBQUNuRjtBQUNBLE1BQU07QUFDTixrRUFBa0UsWUFBWSxVQUFVLGNBQWM7QUFDdEc7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkI7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsNERBQTRELG1CQUFPLENBQUMsc0JBQVE7QUFDNUU7QUFDQSw4REFBOEQsbUJBQU8sQ0FBQyxjQUFJO0FBQzFFOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQjtBQUNBLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLFFBQVE7QUFDcEI7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG9GQUFvRix5Q0FBeUM7QUFDN0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esd0ZBQXdGLHlDQUF5QztBQUNqSTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7O0FBRUw7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsaUJBQWlCLHlEQUF5RDtBQUMxRTtBQUNBO0FBQ0EsVUFBVTtBQUNWLG9CQUFvQixVQUFVO0FBQzlCO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBLCtEQUErRCwwQkFBMEI7QUFDekY7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGlCQUFpQiw2QkFBNkI7QUFDOUM7QUFDQTtBQUNBLFVBQVU7QUFDVixvQkFBb0IsVUFBVTtBQUM5QjtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBLG1CQUFtQiIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcndpbHNvbi9EZXNrdG9wL3Byb2plY3RzL0VaVml6L25vZGVfbW9kdWxlcy9zbm93Zmxha2Utc2RrL2xpYi9maWxlX3RyYW5zZmVyX2FnZW50L2VuY3J5cHRfdXRpbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuY29uc3QgY3J5cHRvID0gcmVxdWlyZSgnY3J5cHRvJyk7XG5jb25zdCBvcyA9IHJlcXVpcmUoJ29zJyk7XG5jb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5jb25zdCBMb2dnZXIgPSByZXF1aXJlKCcuLi9sb2dnZXInKTtcbmNvbnN0IEFFU19CTE9DS19TSVpFID0gMTI4O1xuY29uc3QgYmxvY2tTaXplID0gcGFyc2VJbnQoQUVTX0JMT0NLX1NJWkUgLyA4KTsgIC8vIGluIGJ5dGVzXG5cbmNvbnN0IFFVRVJZX1NUQUdFX01BU1RFUl9LRVkgPSAncXVlcnlTdGFnZU1hc3RlcktleSc7XG5jb25zdCBCQVNFNjQgPSAnYmFzZTY0JztcbmNvbnN0IERFRkFVTFRfQUFEID0gQnVmZmVyLmZyb20oJycpO1xuY29uc3QgQVVUSF9UQUdfTEVOR1RIX0lOX0JZVEVTID0gMTY7XG5cbmNvbnN0IEFFU19DQkMgPSB7XG4gIGNpcGhlck5hbWU6IGZ1bmN0aW9uIChrZXlTaXplSW5CeXRlcykge1xuICAgIHJldHVybiBgYWVzLSR7a2V5U2l6ZUluQnl0ZXMgKiA4fS1jYmNgO1xuICB9LFxuICBpdlNpemU6IDE2XG59O1xuXG5jb25zdCBBRVNfRUNCID0ge1xuICBjaXBoZXJOYW1lOiBmdW5jdGlvbiAoa2V5U2l6ZUluQnl0ZXMpIHtcbiAgICByZXR1cm4gYGFlcy0ke2tleVNpemVJbkJ5dGVzICogOH0tZWNiYDtcbiAgfVxufTtcblxuY29uc3QgQUVTX0dDTSA9IHtcbiAgY2lwaGVyTmFtZTogZnVuY3Rpb24gKGtleVNpemVJbkJ5dGVzKSB7XG4gICAgcmV0dXJuIGBhZXMtJHtrZXlTaXplSW5CeXRlcyAqIDh9LWdjbWA7XG4gIH0sXG4gIGl2U2l6ZTogMTJcbn07XG5cbi8vIE1hdGVyaWFsIERlc2NyaXB0b3JcbmZ1bmN0aW9uIE1hdGVyaWFsRGVzY3JpcHRvcihzbWtJZCwgcXVlcnlJZCwga2V5U2l6ZSkge1xuICByZXR1cm4ge1xuICAgICdzbWtJZCc6IHNta0lkLFxuICAgICdxdWVyeUlkJzogcXVlcnlJZCxcbiAgICAna2V5U2l6ZSc6IGtleVNpemVcbiAgfTtcbn1cblxuLy8gRW5jcnlwdGlvbiBNYXRlcmlhbFxuZnVuY3Rpb24gRW5jcnlwdGlvbk1ldGFkYXRhKGtleSwgZGF0YUl2LCBtYXREZXNjLCBrZXlJdiwgZGF0YUFhZCwga2V5QWFkKSB7XG4gIHJldHVybiB7XG4gICAgJ2tleSc6IGtleSxcbiAgICAnaXYnOiBkYXRhSXYsXG4gICAgJ21hdERlc2MnOiBtYXREZXNjLFxuICAgICdrZXlJdic6IGtleUl2LFxuICAgICdkYXRhQWFkJzogZGF0YUFhZCxcbiAgICAna2V5QWFkJzoga2V5QWFkXG4gIH07XG59XG5cbmV4cG9ydHMuRW5jcnlwdGlvbk1ldGFkYXRhID0gRW5jcnlwdGlvbk1ldGFkYXRhO1xuXG5mdW5jdGlvbiBUZW1wRmlsZUdlbmVyYXRvcigpIHtcblxuICB0aGlzLmZpbGVTeW5jID0gZnVuY3Rpb24gKG9wdGlvbiA9IHsgZGlyOiBvcy50bXBkaXIoKSwgcHJlZml4OiAnJywgcG9zdGZpeDogJycsIGV4dGVuc2lvbjogJycgfSkge1xuICAgIGNvbnN0IHJhbmRvbU5hbWUgPSBjcnlwdG8ucmFuZG9tVVVJRCgpO1xuICAgIGNvbnN0IGZpbGVOYW1lID0gYCR7b3B0aW9uLnByZWZpeCB8fCAnJ30ke3JhbmRvbU5hbWV9JHtvcHRpb24ucG9zdGZpeCB8fCAnJ30keycuJyArIG9wdGlvbi5leHRlbnNpb24gfHwgJyd9YDtcblxuICAgIGlmICghdGhpcy5jaGVja0RpckluVGVtcChvcHRpb24uZGlyKSkge1xuICAgICAgb3B0aW9uLmRpciA9IG9zLnRtcGRpcigpO1xuICAgIH1cblxuICAgIGNvbnN0IGZ1bGxwYXRoID0gcGF0aC5qb2luKG9wdGlvbi5kaXIsIGZpbGVOYW1lKTtcbiAgICBcbiAgICBmcy53cml0ZUZpbGVTeW5jKGZ1bGxwYXRoLCAnJyk7XG4gICAgY29uc3QgZmlsZURlc2NyaXB0b3IgPSBmcy5vcGVuU3luYyhmdWxscGF0aCk7XG4gICAgcmV0dXJuIHsgbmFtZTogZnVsbHBhdGgsIGZkOiBmaWxlRGVzY3JpcHRvciB9O1xuICB9O1xuICBcbiAgdGhpcy5maWxlID0gZnVuY3Rpb24gKG9wdGlvbiA9IHsgZGlyOiBvcy50bXBkaXIoKSwgcHJlZml4OiAnJywgcG9zdGZpeDogJycsIGV4dGVuc2lvbjogJycgfSwgY2FsbGJhY2spIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgeyBuYW1lLCBmZCB9ID0gdGhpcy5maWxlU3luYyhvcHRpb24pO1xuICAgICAgY2FsbGJhY2sobnVsbCwgbmFtZSwgZmQpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgY2FsbGJhY2soZXJyKTtcbiAgICB9XG4gIH07XG4gIFxuICB0aGlzLmNoZWNrRGlySW5UZW1wID0gZnVuY3Rpb24gKGRpcmVjdG9yeVBhdGgpIHtcbiAgICBpZiAoIWRpcmVjdG9yeVBhdGggfHwgZGlyZWN0b3J5UGF0aC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIFxuICAgIGlmIChkaXJlY3RvcnlQYXRoLmluY2x1ZGVzKG9zLnRtcGRpcigpKSkge1xuICAgICAgaWYgKGZzLmV4aXN0c1N5bmMoZGlyZWN0b3J5UGF0aCkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBMb2dnZXIuZ2V0SW5zdGFuY2UoKS53YXJuKGBubyBzdWNoIGZpbGUgb3IgZGlyZWN0b3J5LCBvcGVuICR7ZGlyZWN0b3J5UGF0aH1gKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgTG9nZ2VyLmdldEluc3RhbmNlKCkud2FybihgZGlyIG9wdGlvbiBtdXN0IGJlIHJlbGF0aXZlIHRvICR7b3MudG1wZGlyKCl9LCBmb3VuZCAke2RpcmVjdG9yeVBhdGh9YCk7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGFuIGVuY3J5cHRpb24gdXRpbGl0eSBvYmplY3QuXG4gKlxuICogQHBhcmFtIHttb2R1bGV9IGVuY3J5cHRcbiAqIEBwYXJhbSB7bW9kdWxlfSBmaWxlc3RyZWFtXG4gKiBAcGFyYW0ge21vZHVsZX0gdGVtcFxuICogXG4gKiBAcmV0dXJucyB7T2JqZWN0fVxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIEVuY3J5cHRVdGlsKGVuY3J5cHQsIGZpbGVzdHJlYW0sIHRlbXApIHtcbiAgY29uc3QgY3J5cHRvID0gdHlwZW9mIGVuY3J5cHQgIT09ICd1bmRlZmluZWQnID8gZW5jcnlwdCA6IHJlcXVpcmUoJ2NyeXB0bycpO1xuICAvLyBUT0RPOiBTTk9XLTE4MTQ4ODM6IFJlcGxhY2UgJ2ZzJyB3aXRoICdmcy9wcm9taXNlcydcbiAgY29uc3QgZnMgPSB0eXBlb2YgZmlsZXN0cmVhbSAhPT0gJ3VuZGVmaW5lZCcgPyBmaWxlc3RyZWFtIDogcmVxdWlyZSgnZnMnKTtcbiAgY29uc3QgdG1wID0gdHlwZW9mIHRlbXAgIT09ICd1bmRlZmluZWQnID8gdGVtcCA6IG5ldyBUZW1wRmlsZUdlbmVyYXRvcigpO1xuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBhIGJ1ZmZlciB3aXRoIHJhbmRvbSBieXRlcyBnaXZlbiBhIHNpemUuXG4gICAqXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBieXRlTGVuZ3RoXG4gICAqXG4gICAqIEByZXR1cm5zIHtCdWZmZXJ9IG9mIHNpemUgYnl0ZUxlbmd0aFxuICAgKi9cbiAgZnVuY3Rpb24gZ2V0U2VjdXJlUmFuZG9tKGJ5dGVMZW5ndGgpIHtcbiAgICByZXR1cm4gY3J5cHRvLnJhbmRvbUJ5dGVzKGJ5dGVMZW5ndGgpO1xuICB9XG5cbiAgLyoqXG4gICogQ29udmVydCBhIG1hdGVyaWFsIGRlc2NyaXB0b3Igb2JqZWN0J3MgdmFsdWVzIHRvIHVuaWNvZGUuXG4gICpcbiAgKiBAcGFyYW0ge09iamVjdH0gbWF0RGVzY1xuICAqXG4gICogQHJldHVybnMge09iamVjdH1cbiAgKi9cbiAgZnVuY3Rpb24gbWF0RGVzY1RvVW5pY29kZShtYXREZXNjKSB7XG4gICAgbWF0RGVzY1snc21rSWQnXSA9IG1hdERlc2NbJ3Nta0lkJ10udG9TdHJpbmcoKTtcbiAgICBtYXREZXNjWydrZXlTaXplJ10gPSBtYXREZXNjWydrZXlTaXplJ10udG9TdHJpbmcoKTtcbiAgICBjb25zdCBuZXdNYXREZXNjID0gSlNPTi5zdHJpbmdpZnkobWF0RGVzYyk7XG4gICAgcmV0dXJuIG5ld01hdERlc2M7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVFbmNyeXB0aW9uTWV0YWRhdGEoZW5jcnlwdGlvbk1hdGVyaWFsLCBrZXlTaXplLCBlbmNyeXB0ZWRLZXksIGRhdGFJdiwga2V5SXYgPSBudWxsLCBkYXRhQWFkID0gbnVsbCwga2V5QWFkID0gbnVsbCkge1xuICAgIGNvbnN0IG1hdERlc2MgPSBuZXcgTWF0ZXJpYWxEZXNjcmlwdG9yKFxuICAgICAgZW5jcnlwdGlvbk1hdGVyaWFsLnNta0lkLFxuICAgICAgZW5jcnlwdGlvbk1hdGVyaWFsLnF1ZXJ5SWQsXG4gICAgICBrZXlTaXplICogOFxuICAgICk7XG5cbiAgICByZXR1cm4gbmV3IEVuY3J5cHRpb25NZXRhZGF0YShcbiAgICAgIGVuY3J5cHRlZEtleS50b1N0cmluZyhCQVNFNjQpLFxuICAgICAgZGF0YUl2LnRvU3RyaW5nKEJBU0U2NCksXG4gICAgICBtYXREZXNjVG9Vbmljb2RlKG1hdERlc2MpLFxuICAgICAga2V5SXYgPyBrZXlJdi50b1N0cmluZyhCQVNFNjQpIDogbnVsbCxcbiAgICAgIGRhdGFBYWQgPyBkYXRhQWFkLnRvU3RyaW5nKEJBU0U2NCkgOiBudWxsLFxuICAgICAga2V5QWFkID8ga2V5QWFkLnRvU3RyaW5nKEJBU0U2NCkgOiBudWxsXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBFbmNyeXB0IGNvbnRlbnQgdXNpbmcgQUVTLUNCQyBhbGdvcml0aG0uXG4gICAqL1xuICB0aGlzLmVuY3J5cHRGaWxlU3RyZWFtID0gYXN5bmMgZnVuY3Rpb24gKGVuY3J5cHRpb25NYXRlcmlhbCwgY29udGVudCkge1xuICAgIHJldHVybiB0aGlzLmVuY3J5cHREYXRhQ0JDKGVuY3J5cHRpb25NYXRlcmlhbCwgY29udGVudCk7XG4gIH07XG5cbiAgdGhpcy5lbmNyeXB0RGF0YUNCQyA9IGZ1bmN0aW9uIChlbmNyeXB0aW9uTWF0ZXJpYWwsIGRhdGEpIHtcbiAgICBjb25zdCBkZWNvZGVkS2VrID0gQnVmZmVyLmZyb20oZW5jcnlwdGlvbk1hdGVyaWFsW1FVRVJZX1NUQUdFX01BU1RFUl9LRVldLCBCQVNFNjQpO1xuICAgIGNvbnN0IGtleVNpemUgPSBkZWNvZGVkS2VrLmxlbmd0aDtcblxuICAgIGNvbnN0IGRhdGFJdiA9IGdldFNlY3VyZVJhbmRvbShBRVNfQ0JDLml2U2l6ZSk7XG4gICAgY29uc3QgZmlsZUtleSA9IGdldFNlY3VyZVJhbmRvbShrZXlTaXplKTtcblxuICAgIGNvbnN0IGRhdGFDaXBoZXIgPSBjcnlwdG8uY3JlYXRlQ2lwaGVyaXYoQUVTX0NCQy5jaXBoZXJOYW1lKGtleVNpemUpLCBmaWxlS2V5LCBkYXRhSXYpO1xuICAgIGNvbnN0IGVuY3J5cHRlZERhdGEgPSBwZXJmb3JtQ3J5cHRvKGRhdGFDaXBoZXIsIGRhdGEpO1xuXG4gICAgY29uc3Qga2V5Q2lwaGVyID0gY3J5cHRvLmNyZWF0ZUNpcGhlcml2KEFFU19FQ0IuY2lwaGVyTmFtZShrZXlTaXplKSwgZGVjb2RlZEtlaywgbnVsbCk7XG4gICAgY29uc3QgZW5jcnlwdGVkS2V5ID0gcGVyZm9ybUNyeXB0byhrZXlDaXBoZXIsIGZpbGVLZXkpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGVuY3J5cHRpb25NZXRhZGF0YTogY3JlYXRlRW5jcnlwdGlvbk1ldGFkYXRhKGVuY3J5cHRpb25NYXRlcmlhbCwga2V5U2l6ZSwgZW5jcnlwdGVkS2V5LCBkYXRhSXYpLFxuICAgICAgZGF0YVN0cmVhbTogZW5jcnlwdGVkRGF0YVxuICAgIH07XG4gIH07XG5cbiAgLy9UT0RPOiBTTk9XLTk0MDk4MTogQWRkIHByb3BlciB1c2FnZSB3aGVuIGZlYXR1cmUgaXMgcmVhZHlcbiAgdGhpcy5lbmNyeXB0RGF0YUdDTSA9IGZ1bmN0aW9uIChlbmNyeXB0aW9uTWF0ZXJpYWwsIGRhdGEpIHtcbiAgICBjb25zdCBkZWNvZGVkS2VrID0gQnVmZmVyLmZyb20oZW5jcnlwdGlvbk1hdGVyaWFsW1FVRVJZX1NUQUdFX01BU1RFUl9LRVldLCBCQVNFNjQpO1xuICAgIGNvbnN0IGtleVNpemUgPSBkZWNvZGVkS2VrLmxlbmd0aDtcblxuICAgIGNvbnN0IGRhdGFJdiA9IGdldFNlY3VyZVJhbmRvbShBRVNfR0NNLml2U2l6ZSk7XG4gICAgY29uc3QgZmlsZUtleSA9IGdldFNlY3VyZVJhbmRvbShrZXlTaXplKTtcblxuICAgIGNvbnN0IGVuY3J5cHRlZERhdGEgPSB0aGlzLmVuY3J5cHRHQ00oZGF0YSwgZmlsZUtleSwgZGF0YUl2LCBERUZBVUxUX0FBRCk7XG5cbiAgICBjb25zdCBrZXlJdiA9IGdldFNlY3VyZVJhbmRvbShBRVNfR0NNLml2U2l6ZSk7XG4gICAgY29uc3QgZW5jcnlwdGVkS2V5ID0gdGhpcy5lbmNyeXB0R0NNKGZpbGVLZXksIGRlY29kZWRLZWssIGtleUl2LCBERUZBVUxUX0FBRCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGVuY3J5cHRpb25NZXRhZGF0YTogY3JlYXRlRW5jcnlwdGlvbk1ldGFkYXRhKGVuY3J5cHRpb25NYXRlcmlhbCwga2V5U2l6ZSwgZW5jcnlwdGVkS2V5LCBkYXRhSXYsIGtleUl2LCBERUZBVUxUX0FBRCwgREVGQVVMVF9BQUQpLFxuICAgICAgZGF0YVN0cmVhbTogZW5jcnlwdGVkRGF0YVxuICAgIH07XG4gIH07XG5cbiAgdGhpcy5lbmNyeXB0R0NNID0gZnVuY3Rpb24gKGRhdGEsIGtleSwgaXYsIGFhZCkge1xuICAgIGNvbnN0IGNpcGhlciA9IGNyeXB0by5jcmVhdGVDaXBoZXJpdihBRVNfR0NNLmNpcGhlck5hbWUoa2V5Lmxlbmd0aCksIGtleSwgaXYsIHsgYXV0aFRhZ0xlbmd0aDogQVVUSF9UQUdfTEVOR1RIX0lOX0JZVEVTIH0pO1xuICAgIGlmIChhYWQpIHtcbiAgICAgIGNpcGhlci5zZXRBQUQoYWFkKTtcbiAgICB9XG4gICAgY29uc3QgZW5jcnlwdGVkRGF0YSA9IHBlcmZvcm1DcnlwdG8oY2lwaGVyLCBkYXRhKTtcbiAgICByZXR1cm4gQnVmZmVyLmNvbmNhdChbZW5jcnlwdGVkRGF0YSwgY2lwaGVyLmdldEF1dGhUYWcoKV0pO1xuICB9O1xuXG4gIHRoaXMuZGVjcnlwdEdDTSA9IGZ1bmN0aW9uIChkYXRhLCBrZXksIGl2LCBhYWQpIHtcbiAgICBjb25zdCBkZWNpcGhlciA9IGNyeXB0by5jcmVhdGVEZWNpcGhlcml2KEFFU19HQ00uY2lwaGVyTmFtZShrZXkubGVuZ3RoKSwga2V5LCBpdiwgeyBhdXRoVGFnTGVuZ3RoOiBBVVRIX1RBR19MRU5HVEhfSU5fQllURVMgfSk7XG4gICAgaWYgKGFhZCkge1xuICAgICAgZGVjaXBoZXIuc2V0QUFEKGFhZCk7XG4gICAgfVxuICAgIC8vIGxhc3QgMTYgYnl0ZXMgb2YgZGF0YSBpcyB0aGUgYXV0aGVudGljYXRpb24gdGFnXG4gICAgY29uc3QgYXV0aFRhZyA9IGRhdGEuc2xpY2UoZGF0YS5sZW5ndGggLSBBVVRIX1RBR19MRU5HVEhfSU5fQllURVMsIGRhdGEubGVuZ3RoKTtcbiAgICBjb25zdCBjaXBoZXJUZXh0ID0gZGF0YS5zbGljZSgwLCBkYXRhLmxlbmd0aCAtIEFVVEhfVEFHX0xFTkdUSF9JTl9CWVRFUyk7XG4gICAgZGVjaXBoZXIuc2V0QXV0aFRhZyhhdXRoVGFnKTtcbiAgICByZXR1cm4gcGVyZm9ybUNyeXB0byhkZWNpcGhlciwgY2lwaGVyVGV4dCk7XG4gIH07XG4gIFxuICAvKipcbiAgICogRW5jcnlwdCBmaWxlIHVzaW5nIEFFUyBhbGdvcml0aG0uXG4gICAqL1xuICB0aGlzLmVuY3J5cHRGaWxlID0gYXN5bmMgZnVuY3Rpb24gKGVuY3J5cHRpb25NYXRlcmlhbCwgaW5wdXRGaWxlUGF0aCxcbiAgICB0bXBEaXIgPSBudWxsLCBjaHVua1NpemUgPSBibG9ja1NpemUgKiA0ICogMTAyNCkge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmVuY3J5cHRGaWxlQ0JDKGVuY3J5cHRpb25NYXRlcmlhbCwgaW5wdXRGaWxlUGF0aCwgdG1wRGlyLCBjaHVua1NpemUpO1xuICB9O1xuXG4gIHRoaXMuZW5jcnlwdEZpbGVDQkMgPSBhc3luYyBmdW5jdGlvbiAoZW5jcnlwdGlvbk1hdGVyaWFsLCBpbnB1dEZpbGVQYXRoLFxuICAgIHRtcERpciA9IG51bGwsIGNodW5rU2l6ZSA9IGJsb2NrU2l6ZSAqIDQgKiAxMDI0KSB7XG4gICAgY29uc3QgZGVjb2RlZEtlayA9IEJ1ZmZlci5mcm9tKGVuY3J5cHRpb25NYXRlcmlhbFtRVUVSWV9TVEFHRV9NQVNURVJfS0VZXSwgQkFTRTY0KTtcbiAgICBjb25zdCBrZXlTaXplID0gZGVjb2RlZEtlay5sZW5ndGg7XG5cbiAgICBjb25zdCBkYXRhSXYgPSBnZXRTZWN1cmVSYW5kb20oQUVTX0NCQy5pdlNpemUpO1xuICAgIGNvbnN0IGZpbGVLZXkgPSBnZXRTZWN1cmVSYW5kb20oa2V5U2l6ZSk7XG4gICAgY29uc3QgZGF0YUNpcGhlciA9IGNyeXB0by5jcmVhdGVDaXBoZXJpdihBRVNfQ0JDLmNpcGhlck5hbWUoa2V5U2l6ZSksIGZpbGVLZXksIGRhdGFJdik7XG4gICAgY29uc3QgZW5jcnlwdGVkRmlsZVBhdGggPSBhd2FpdCBwZXJmb3JtRmlsZVN0cmVhbUNyeXB0byhkYXRhQ2lwaGVyLCB0bXBEaXIsIGlucHV0RmlsZVBhdGgsIGNodW5rU2l6ZSk7XG5cbiAgICBjb25zdCBrZXlDaXBoZXIgPSBjcnlwdG8uY3JlYXRlQ2lwaGVyaXYoQUVTX0VDQi5jaXBoZXJOYW1lKGtleVNpemUpLCBkZWNvZGVkS2VrLCBudWxsKTtcbiAgICBjb25zdCBlbmNyeXB0ZWRLZXkgPSBwZXJmb3JtQ3J5cHRvKGtleUNpcGhlciwgZmlsZUtleSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgZW5jcnlwdGlvbk1ldGFkYXRhOiBjcmVhdGVFbmNyeXB0aW9uTWV0YWRhdGEoZW5jcnlwdGlvbk1hdGVyaWFsLCBrZXlTaXplLCBlbmNyeXB0ZWRLZXksIGRhdGFJdiksXG4gICAgICBkYXRhRmlsZTogZW5jcnlwdGVkRmlsZVBhdGhcbiAgICB9O1xuICB9O1xuXG4gIC8vVE9ETzogU05PVy05NDA5ODE6IEFkZCBwcm9wZXIgdXNhZ2Ugd2hlbiBmZWF0dXJlIGlzIHJlYWR5XG4gIHRoaXMuZW5jcnlwdEZpbGVHQ00gPSBhc3luYyBmdW5jdGlvbiAoZW5jcnlwdGlvbk1hdGVyaWFsLCBpbnB1dEZpbGVQYXRoLCB0bXBEaXIgPSBudWxsKSB7XG4gICAgY29uc3QgZGVjb2RlZEtlayA9IEJ1ZmZlci5mcm9tKGVuY3J5cHRpb25NYXRlcmlhbFtRVUVSWV9TVEFHRV9NQVNURVJfS0VZXSwgQkFTRTY0KTtcblxuICAgIGNvbnN0IGRhdGFJdiA9IGdldFNlY3VyZVJhbmRvbShBRVNfR0NNLml2U2l6ZSk7XG4gICAgY29uc3QgZmlsZUtleSA9IGdldFNlY3VyZVJhbmRvbShkZWNvZGVkS2VrLmxlbmd0aCk7XG5cbiAgICBjb25zdCBmaWxlQ29udGVudCA9IGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGZzLnJlYWRGaWxlKGlucHV0RmlsZVBhdGgsIChlcnIsIGRhdGEpID0+IHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc29sdmUoZGF0YSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgY29uc3QgZW5jcnlwdGVkRGF0YSA9IHRoaXMuZW5jcnlwdEdDTShmaWxlQ29udGVudCwgZmlsZUtleSwgZGF0YUl2LCBERUZBVUxUX0FBRCk7XG4gICAgY29uc3QgZW5jcnlwdGVkRmlsZVBhdGggPSBhd2FpdCB3cml0ZUNvbnRlbnRUb0ZpbGUodG1wRGlyLCBwYXRoLmJhc2VuYW1lKGlucHV0RmlsZVBhdGgpICsgJyMnLCBlbmNyeXB0ZWREYXRhKTtcblxuICAgIGNvbnN0IGtleUl2ID0gZ2V0U2VjdXJlUmFuZG9tKEFFU19HQ00uaXZTaXplKTtcbiAgICBjb25zdCBlbmNyeXB0ZWRLZXkgPSB0aGlzLmVuY3J5cHRHQ00oZmlsZUtleSwgZGVjb2RlZEtlaywga2V5SXYsIERFRkFVTFRfQUFEKTtcblxuICAgIHJldHVybiB7XG4gICAgICBlbmNyeXB0aW9uTWV0YWRhdGE6IGNyZWF0ZUVuY3J5cHRpb25NZXRhZGF0YShlbmNyeXB0aW9uTWF0ZXJpYWwsIGZpbGVLZXkubGVuZ3RoLCBlbmNyeXB0ZWRLZXksIGRhdGFJdiwga2V5SXYsIERFRkFVTFRfQUFELCBERUZBVUxUX0FBRCksXG4gICAgICBkYXRhRmlsZTogZW5jcnlwdGVkRmlsZVBhdGhcbiAgICB9O1xuICB9O1xuXG4gIC8qKlxuICAgKiBEZWNyeXB0IGZpbGUgdXNpbmcgQUVTIGFsZ29yaXRobS5cbiAgICovXG4gIHRoaXMuZGVjcnlwdEZpbGUgPSBhc3luYyBmdW5jdGlvbiAobWV0YWRhdGEsIGVuY3J5cHRpb25NYXRlcmlhbCwgaW5wdXRGaWxlUGF0aCxcbiAgICB0bXBEaXIgPSBudWxsLCBjaHVua1NpemUgPSBibG9ja1NpemUgKiA0ICogMTAyNCkge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmRlY3J5cHRGaWxlQ0JDKG1ldGFkYXRhLCBlbmNyeXB0aW9uTWF0ZXJpYWwsIGlucHV0RmlsZVBhdGgsIHRtcERpciwgY2h1bmtTaXplKTtcbiAgfTtcblxuICB0aGlzLmRlY3J5cHRGaWxlQ0JDID0gYXN5bmMgZnVuY3Rpb24gKG1ldGFkYXRhLCBlbmNyeXB0aW9uTWF0ZXJpYWwsIGlucHV0RmlsZVBhdGgsXG4gICAgdG1wRGlyID0gbnVsbCwgY2h1bmtTaXplID0gYmxvY2tTaXplICogNCAqIDEwMjQpIHtcbiAgICBjb25zdCBkZWNvZGVkS2VrID0gQnVmZmVyLmZyb20oZW5jcnlwdGlvbk1hdGVyaWFsW1FVRVJZX1NUQUdFX01BU1RFUl9LRVldLCBCQVNFNjQpO1xuICAgIGNvbnN0IGtleUJ5dGVzID0gbmV3IEJ1ZmZlci5mcm9tKG1ldGFkYXRhLmtleSwgQkFTRTY0KTtcbiAgICBjb25zdCBpdkJ5dGVzID0gbmV3IEJ1ZmZlci5mcm9tKG1ldGFkYXRhLml2LCBCQVNFNjQpO1xuICAgIGNvbnN0IGtleURlY2lwaGVyID0gY3J5cHRvLmNyZWF0ZURlY2lwaGVyaXYoQUVTX0VDQi5jaXBoZXJOYW1lKGRlY29kZWRLZWsubGVuZ3RoKSwgZGVjb2RlZEtlaywgbnVsbCk7XG4gICAgY29uc3QgZmlsZUtleSA9IHBlcmZvcm1DcnlwdG8oa2V5RGVjaXBoZXIsIGtleUJ5dGVzKTtcblxuICAgIGNvbnN0IGRhdGFEZWNpcGhlciA9IGNyeXB0by5jcmVhdGVEZWNpcGhlcml2KEFFU19DQkMuY2lwaGVyTmFtZShmaWxlS2V5Lmxlbmd0aCksIGZpbGVLZXksIGl2Qnl0ZXMpO1xuICAgIHJldHVybiBhd2FpdCBwZXJmb3JtRmlsZVN0cmVhbUNyeXB0byhkYXRhRGVjaXBoZXIsIHRtcERpciwgaW5wdXRGaWxlUGF0aCwgY2h1bmtTaXplKTtcbiAgfTtcblxuICAvL1RPRE86IFNOT1ctOTQwOTgxOiBBZGQgcHJvcGVyIHVzYWdlIHdoZW4gZmVhdHVyZSBpcyByZWFkeVxuICB0aGlzLmRlY3J5cHRGaWxlR0NNID0gYXN5bmMgZnVuY3Rpb24gKG1ldGFkYXRhLCBlbmNyeXB0aW9uTWF0ZXJpYWwsIGlucHV0RmlsZVBhdGgsIHRtcERpciA9IG51bGwpIHtcbiAgICBjb25zdCBkZWNvZGVkS2VrID0gQnVmZmVyLmZyb20oZW5jcnlwdGlvbk1hdGVyaWFsW1FVRVJZX1NUQUdFX01BU1RFUl9LRVldLCBCQVNFNjQpO1xuICAgIGNvbnN0IGtleUJ5dGVzID0gbmV3IEJ1ZmZlci5mcm9tKG1ldGFkYXRhLmtleSwgQkFTRTY0KTtcbiAgICBjb25zdCBrZXlJdkJ5dGVzID0gbmV3IEJ1ZmZlci5mcm9tKG1ldGFkYXRhLmtleUl2LCBCQVNFNjQpO1xuICAgIGNvbnN0IGRhdGFJdkJ5dGVzID0gbmV3IEJ1ZmZlci5mcm9tKG1ldGFkYXRhLml2LCBCQVNFNjQpO1xuICAgIGNvbnN0IGRhdGFBYWRCeXRlcyA9IG5ldyBCdWZmZXIuZnJvbShtZXRhZGF0YS5kYXRhQWFkLCBCQVNFNjQpO1xuICAgIGNvbnN0IGtleUFhZEJ5dGVzID0gbmV3IEJ1ZmZlci5mcm9tKG1ldGFkYXRhLmtleUFhZCwgQkFTRTY0KTtcblxuICAgIGNvbnN0IGZpbGVLZXkgPSB0aGlzLmRlY3J5cHRHQ00oa2V5Qnl0ZXMsIGRlY29kZWRLZWssIGtleUl2Qnl0ZXMsIGtleUFhZEJ5dGVzKTtcblxuICAgIGNvbnN0IGZpbGVDb250ZW50ID0gYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgZnMucmVhZEZpbGUoaW5wdXRGaWxlUGF0aCwgKGVyciwgZGF0YSkgPT4ge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzb2x2ZShkYXRhKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBjb25zdCBkZWNyeXB0ZWREYXRhID0gdGhpcy5kZWNyeXB0R0NNKGZpbGVDb250ZW50LCBmaWxlS2V5LCBkYXRhSXZCeXRlcywgZGF0YUFhZEJ5dGVzKTtcbiAgICByZXR1cm4gYXdhaXQgd3JpdGVDb250ZW50VG9GaWxlKHRtcERpciwgcGF0aC5iYXNlbmFtZShpbnB1dEZpbGVQYXRoKSArICcjJywgZGVjcnlwdGVkRGF0YSk7XG4gIH07XG4gIFxuICBmdW5jdGlvbiBwZXJmb3JtQ3J5cHRvKGNpcGhlck9yRGVjaXBoZXIsIGRhdGEpIHtcbiAgICBjb25zdCBlbmNyeXB0ZWRPckRlY3J5cHRlZCA9IGNpcGhlck9yRGVjaXBoZXIudXBkYXRlKGRhdGEpO1xuICAgIGNvbnN0IGZpbmFsID0gY2lwaGVyT3JEZWNpcGhlci5maW5hbCgpO1xuICAgIHJldHVybiBCdWZmZXIuY29uY2F0KFtlbmNyeXB0ZWRPckRlY3J5cHRlZCwgZmluYWxdKTtcbiAgfVxuXG4gIGFzeW5jIGZ1bmN0aW9uIHBlcmZvcm1GaWxlU3RyZWFtQ3J5cHRvKGNpcGhlck9yRGVjaXBoZXIsIHRtcERpciwgaW5wdXRGaWxlUGF0aCwgY2h1bmtTaXplKSB7XG4gICAgY29uc3Qgb3V0cHV0RmlsZSA9IGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRtcC5maWxlKHsgZGlyOiB0bXBEaXIsIHByZWZpeDogcGF0aC5iYXNlbmFtZShpbnB1dEZpbGVQYXRoKSArICcjJyB9LCAoZXJyLCBwYXRoLCBmZCkgPT4ge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzb2x2ZSh7IHBhdGgsIGZkIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBhd2FpdCBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgY29uc3QgaW5wdXRTdHJlYW0gPSBmcy5jcmVhdGVSZWFkU3RyZWFtKGlucHV0RmlsZVBhdGgsIHsgaGlnaFdhdGVyTWFyazogY2h1bmtTaXplIH0pO1xuICAgICAgY29uc3Qgb3V0cHV0U3RyZWFtID0gZnMuY3JlYXRlV3JpdGVTdHJlYW0ob3V0cHV0RmlsZS5wYXRoKTtcblxuICAgICAgaW5wdXRTdHJlYW0ub24oJ2RhdGEnLCBmdW5jdGlvbiAoY2h1bmspIHtcbiAgICAgICAgY29uc3QgZW5jcnlwdGVkID0gY2lwaGVyT3JEZWNpcGhlci51cGRhdGUoY2h1bmspO1xuICAgICAgICBvdXRwdXRTdHJlYW0ud3JpdGUoZW5jcnlwdGVkKTtcbiAgICAgIH0pO1xuICAgICAgaW5wdXRTdHJlYW0ub24oJ2Nsb3NlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBvdXRwdXRTdHJlYW0ud3JpdGUoY2lwaGVyT3JEZWNpcGhlci5maW5hbCgpKTtcbiAgICAgICAgb3V0cHV0U3RyZWFtLmNsb3NlKHJlc29sdmUpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBmcy5jbG9zZShvdXRwdXRGaWxlLmZkLCAoZXJyKSA9PiB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiBvdXRwdXRGaWxlLnBhdGg7XG4gIH1cblxuICBhc3luYyBmdW5jdGlvbiB3cml0ZUNvbnRlbnRUb0ZpbGUodG1wRGlyLCBwcmVmaXgsIGNvbnRlbnQsKSB7XG4gICAgY29uc3Qgb3V0cHV0RmlsZSA9IGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRtcC5maWxlKHsgZGlyOiB0bXBEaXIsIHByZWZpeDogcHJlZml4IH0sIChlcnIsIHBhdGgsIGZkKSA9PiB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXNvbHZlKHsgcGF0aCwgZmQgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGZzLndyaXRlRmlsZShvdXRwdXRGaWxlLnBhdGgsIGNvbnRlbnQsIGVyciA9PiB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGZzLmNsb3NlKG91dHB1dEZpbGUuZmQsIChlcnIpID0+IHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIG91dHB1dEZpbGUucGF0aDtcbiAgfVxufVxuXG5leHBvcnRzLkVuY3J5cHRVdGlsID0gRW5jcnlwdFV0aWw7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/lib/file_transfer_agent/encrypt_util.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/lib/file_transfer_agent/file_compression_type.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/lib/file_transfer_agent/file_compression_type.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("const Types = [\n  {\n    'name': 'GZIP',\n    'file_extension': '.gz',\n    'mime_type': 'application',\n    'mime_subtypes': ['gzip', 'x-gzip'],\n    'is_supported': true,\n  },\n  {\n    'name': 'DEFLATE',\n    'file_extension': '.deflate',\n    'mime_type': 'application',\n    'mime_subtypes': ['zlib', 'deflate'],\n    'is_supported': true,\n  },\n  {\n    'name': 'RAW_DEFLATE',\n    'file_extension': '.raw_deflate',\n    'mime_type': 'application',\n    'mime_subtypes': ['raw_deflate'],\n    'is_supported': true,\n  },\n  {\n    'name': 'BZIP2',\n    'file_extension': '.bz2',\n    'mime_type': 'application',\n    'mime_subtypes': ['bzip2', 'x-bzip2', 'x-bz2', 'x-bzip', 'bz2'],\n    'is_supported': true,\n  },\n  {\n    'name': 'LZIP',\n    'file_extension': '.lz',\n    'mime_type': 'application',\n    'mime_subtypes': ['lzip', 'x-lzip'],\n    'is_supported': false,\n  },\n  {\n    'name': 'LZMA',\n    'file_extension': '.lzma',\n    'mime_type': 'application',\n    'mime_subtypes': ['lzma', 'x-lzma'],\n    'is_supported': false,\n  },\n  {\n    'name': 'LZO',\n    'file_extension': '.lzo',\n    'mime_type': 'application',\n    'mime_subtypes': ['lzo', 'x-lzo'],\n    'is_supported': false,\n  },\n  {\n    'name': 'XZ',\n    'file_extension': '.xz',\n    'mime_type': 'application',\n    'mime_subtypes': ['xz', 'x-xz'],\n    'is_supported': false,\n  },\n  {\n    'name': 'COMPRESS',\n    'file_extension': '.Z',\n    'mime_type': 'application',\n    'mime_subtypes': ['compress', 'x-compress'],\n    'is_supported': false,\n  },\n  {\n    'name': 'PARQUET',\n    'file_extension': '.parquet',\n    'mime_type': 'snowflake',\n    'mime_subtypes': ['parquet'],\n    'is_supported': true,\n  },\n  {\n    'name': 'ZSTD',\n    'file_extension': '.zst',\n    'mime_type': 'application',\n    'mime_subtypes': ['zstd', 'x-zstd'],\n    'is_supported': true,\n  },\n  {\n    'name': 'BROTLI',\n    'file_extension': '.br',\n    'mime_type': 'application',\n    'mime_subtypes': ['br', 'x-br'],\n    'is_supported': true,\n  },\n  {\n    'name': 'ORC',\n    'file_extension': '.orc',\n    'mime_type': 'snowflake',\n    'mime_subtypes': ['orc'],\n    'is_supported': true,\n  }\n];\n\nconst subtypeToMeta = [];\nfor (const type of Types) {\n  for (const ms of type['mime_subtypes']) {\n    subtypeToMeta[ms] = type;\n  }\n}\n\n/**\n * Return the file compression type based on subtype.\n *\n * @param {String} subtype\n *\n * @returns {Object} the file compression object\n */\nexports.lookupByMimeSubType = function lookupByMimeSubType(subtype) {\n  return subtypeToMeta[subtype.toLowerCase()];  \n};\n\n/**\n * Return the file compression type based on encoding.\n *\n * @param {String} encoding\n *\n * @returns {Object} the file compression object\n */\nexports.lookupByEncoding = function lookupByEncoding(encoding) {\n  encoding = encoding.substring(encoding.indexOf('/') + 1);\n  return subtypeToMeta[encoding];\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9saWIvZmlsZV90cmFuc2Zlcl9hZ2VudC9maWxlX2NvbXByZXNzaW9uX3R5cGUuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQSxhQUFhLFFBQVE7QUFDckI7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQSxhQUFhLFFBQVE7QUFDckI7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvdmljdG9yd2lsc29uL0Rlc2t0b3AvcHJvamVjdHMvRVpWaXovbm9kZV9tb2R1bGVzL3Nub3dmbGFrZS1zZGsvbGliL2ZpbGVfdHJhbnNmZXJfYWdlbnQvZmlsZV9jb21wcmVzc2lvbl90eXBlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFR5cGVzID0gW1xuICB7XG4gICAgJ25hbWUnOiAnR1pJUCcsXG4gICAgJ2ZpbGVfZXh0ZW5zaW9uJzogJy5neicsXG4gICAgJ21pbWVfdHlwZSc6ICdhcHBsaWNhdGlvbicsXG4gICAgJ21pbWVfc3VidHlwZXMnOiBbJ2d6aXAnLCAneC1nemlwJ10sXG4gICAgJ2lzX3N1cHBvcnRlZCc6IHRydWUsXG4gIH0sXG4gIHtcbiAgICAnbmFtZSc6ICdERUZMQVRFJyxcbiAgICAnZmlsZV9leHRlbnNpb24nOiAnLmRlZmxhdGUnLFxuICAgICdtaW1lX3R5cGUnOiAnYXBwbGljYXRpb24nLFxuICAgICdtaW1lX3N1YnR5cGVzJzogWyd6bGliJywgJ2RlZmxhdGUnXSxcbiAgICAnaXNfc3VwcG9ydGVkJzogdHJ1ZSxcbiAgfSxcbiAge1xuICAgICduYW1lJzogJ1JBV19ERUZMQVRFJyxcbiAgICAnZmlsZV9leHRlbnNpb24nOiAnLnJhd19kZWZsYXRlJyxcbiAgICAnbWltZV90eXBlJzogJ2FwcGxpY2F0aW9uJyxcbiAgICAnbWltZV9zdWJ0eXBlcyc6IFsncmF3X2RlZmxhdGUnXSxcbiAgICAnaXNfc3VwcG9ydGVkJzogdHJ1ZSxcbiAgfSxcbiAge1xuICAgICduYW1lJzogJ0JaSVAyJyxcbiAgICAnZmlsZV9leHRlbnNpb24nOiAnLmJ6MicsXG4gICAgJ21pbWVfdHlwZSc6ICdhcHBsaWNhdGlvbicsXG4gICAgJ21pbWVfc3VidHlwZXMnOiBbJ2J6aXAyJywgJ3gtYnppcDInLCAneC1iejInLCAneC1iemlwJywgJ2J6MiddLFxuICAgICdpc19zdXBwb3J0ZWQnOiB0cnVlLFxuICB9LFxuICB7XG4gICAgJ25hbWUnOiAnTFpJUCcsXG4gICAgJ2ZpbGVfZXh0ZW5zaW9uJzogJy5seicsXG4gICAgJ21pbWVfdHlwZSc6ICdhcHBsaWNhdGlvbicsXG4gICAgJ21pbWVfc3VidHlwZXMnOiBbJ2x6aXAnLCAneC1semlwJ10sXG4gICAgJ2lzX3N1cHBvcnRlZCc6IGZhbHNlLFxuICB9LFxuICB7XG4gICAgJ25hbWUnOiAnTFpNQScsXG4gICAgJ2ZpbGVfZXh0ZW5zaW9uJzogJy5sem1hJyxcbiAgICAnbWltZV90eXBlJzogJ2FwcGxpY2F0aW9uJyxcbiAgICAnbWltZV9zdWJ0eXBlcyc6IFsnbHptYScsICd4LWx6bWEnXSxcbiAgICAnaXNfc3VwcG9ydGVkJzogZmFsc2UsXG4gIH0sXG4gIHtcbiAgICAnbmFtZSc6ICdMWk8nLFxuICAgICdmaWxlX2V4dGVuc2lvbic6ICcubHpvJyxcbiAgICAnbWltZV90eXBlJzogJ2FwcGxpY2F0aW9uJyxcbiAgICAnbWltZV9zdWJ0eXBlcyc6IFsnbHpvJywgJ3gtbHpvJ10sXG4gICAgJ2lzX3N1cHBvcnRlZCc6IGZhbHNlLFxuICB9LFxuICB7XG4gICAgJ25hbWUnOiAnWFonLFxuICAgICdmaWxlX2V4dGVuc2lvbic6ICcueHonLFxuICAgICdtaW1lX3R5cGUnOiAnYXBwbGljYXRpb24nLFxuICAgICdtaW1lX3N1YnR5cGVzJzogWyd4eicsICd4LXh6J10sXG4gICAgJ2lzX3N1cHBvcnRlZCc6IGZhbHNlLFxuICB9LFxuICB7XG4gICAgJ25hbWUnOiAnQ09NUFJFU1MnLFxuICAgICdmaWxlX2V4dGVuc2lvbic6ICcuWicsXG4gICAgJ21pbWVfdHlwZSc6ICdhcHBsaWNhdGlvbicsXG4gICAgJ21pbWVfc3VidHlwZXMnOiBbJ2NvbXByZXNzJywgJ3gtY29tcHJlc3MnXSxcbiAgICAnaXNfc3VwcG9ydGVkJzogZmFsc2UsXG4gIH0sXG4gIHtcbiAgICAnbmFtZSc6ICdQQVJRVUVUJyxcbiAgICAnZmlsZV9leHRlbnNpb24nOiAnLnBhcnF1ZXQnLFxuICAgICdtaW1lX3R5cGUnOiAnc25vd2ZsYWtlJyxcbiAgICAnbWltZV9zdWJ0eXBlcyc6IFsncGFycXVldCddLFxuICAgICdpc19zdXBwb3J0ZWQnOiB0cnVlLFxuICB9LFxuICB7XG4gICAgJ25hbWUnOiAnWlNURCcsXG4gICAgJ2ZpbGVfZXh0ZW5zaW9uJzogJy56c3QnLFxuICAgICdtaW1lX3R5cGUnOiAnYXBwbGljYXRpb24nLFxuICAgICdtaW1lX3N1YnR5cGVzJzogWyd6c3RkJywgJ3gtenN0ZCddLFxuICAgICdpc19zdXBwb3J0ZWQnOiB0cnVlLFxuICB9LFxuICB7XG4gICAgJ25hbWUnOiAnQlJPVExJJyxcbiAgICAnZmlsZV9leHRlbnNpb24nOiAnLmJyJyxcbiAgICAnbWltZV90eXBlJzogJ2FwcGxpY2F0aW9uJyxcbiAgICAnbWltZV9zdWJ0eXBlcyc6IFsnYnInLCAneC1iciddLFxuICAgICdpc19zdXBwb3J0ZWQnOiB0cnVlLFxuICB9LFxuICB7XG4gICAgJ25hbWUnOiAnT1JDJyxcbiAgICAnZmlsZV9leHRlbnNpb24nOiAnLm9yYycsXG4gICAgJ21pbWVfdHlwZSc6ICdzbm93Zmxha2UnLFxuICAgICdtaW1lX3N1YnR5cGVzJzogWydvcmMnXSxcbiAgICAnaXNfc3VwcG9ydGVkJzogdHJ1ZSxcbiAgfVxuXTtcblxuY29uc3Qgc3VidHlwZVRvTWV0YSA9IFtdO1xuZm9yIChjb25zdCB0eXBlIG9mIFR5cGVzKSB7XG4gIGZvciAoY29uc3QgbXMgb2YgdHlwZVsnbWltZV9zdWJ0eXBlcyddKSB7XG4gICAgc3VidHlwZVRvTWV0YVttc10gPSB0eXBlO1xuICB9XG59XG5cbi8qKlxuICogUmV0dXJuIHRoZSBmaWxlIGNvbXByZXNzaW9uIHR5cGUgYmFzZWQgb24gc3VidHlwZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3VidHlwZVxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9IHRoZSBmaWxlIGNvbXByZXNzaW9uIG9iamVjdFxuICovXG5leHBvcnRzLmxvb2t1cEJ5TWltZVN1YlR5cGUgPSBmdW5jdGlvbiBsb29rdXBCeU1pbWVTdWJUeXBlKHN1YnR5cGUpIHtcbiAgcmV0dXJuIHN1YnR5cGVUb01ldGFbc3VidHlwZS50b0xvd2VyQ2FzZSgpXTsgIFxufTtcblxuLyoqXG4gKiBSZXR1cm4gdGhlIGZpbGUgY29tcHJlc3Npb24gdHlwZSBiYXNlZCBvbiBlbmNvZGluZy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZW5jb2RpbmdcbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fSB0aGUgZmlsZSBjb21wcmVzc2lvbiBvYmplY3RcbiAqL1xuZXhwb3J0cy5sb29rdXBCeUVuY29kaW5nID0gZnVuY3Rpb24gbG9va3VwQnlFbmNvZGluZyhlbmNvZGluZykge1xuICBlbmNvZGluZyA9IGVuY29kaW5nLnN1YnN0cmluZyhlbmNvZGluZy5pbmRleE9mKCcvJykgKyAxKTtcbiAgcmV0dXJuIHN1YnR5cGVUb01ldGFbZW5jb2RpbmddO1xufTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/lib/file_transfer_agent/file_compression_type.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/lib/file_transfer_agent/file_transfer_agent.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/lib/file_transfer_agent/file_transfer_agent.js ***!
  \***********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const binascii = __webpack_require__(/*! binascii */ \"(rsc)/./node_modules/binascii/index.js\");\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst os = __webpack_require__(/*! os */ \"os\");\nconst mime = __webpack_require__(/*! mime-types */ \"(rsc)/./node_modules/mime-types/index.js\");\nconst path = __webpack_require__(/*! path */ \"path\");\n\nconst statement = __webpack_require__(/*! ../connection/statement */ \"(rsc)/./node_modules/snowflake-sdk/lib/connection/statement.js\");\nconst fileCompressionType = __webpack_require__(/*! ./file_compression_type */ \"(rsc)/./node_modules/snowflake-sdk/lib/file_transfer_agent/file_compression_type.js\");\nconst expandTilde = __webpack_require__(/*! expand-tilde */ \"(rsc)/./node_modules/expand-tilde/index.js\");\nconst SnowflakeRemoteStorageUtil = (__webpack_require__(/*! ./remote_storage_util */ \"(rsc)/./node_modules/snowflake-sdk/lib/file_transfer_agent/remote_storage_util.js\").RemoteStorageUtil);\nconst LocalUtil = (__webpack_require__(/*! ./local_util */ \"(rsc)/./node_modules/snowflake-sdk/lib/file_transfer_agent/local_util.js\").LocalUtil);\nconst SnowflakeFileEncryptionMaterial = (__webpack_require__(/*! ./remote_storage_util */ \"(rsc)/./node_modules/snowflake-sdk/lib/file_transfer_agent/remote_storage_util.js\").SnowflakeFileEncryptionMaterial);\nconst SnowflakeS3Util = __webpack_require__(/*! ./s3_util */ \"(rsc)/./node_modules/snowflake-sdk/lib/file_transfer_agent/s3_util.js\");\nconst { FileUtil, getMatchingFilePaths } = __webpack_require__(/*! ../file_util */ \"(rsc)/./node_modules/snowflake-sdk/lib/file_util.js\");\nconst resultStatus = (__webpack_require__(/*! ../file_util */ \"(rsc)/./node_modules/snowflake-sdk/lib/file_util.js\").resultStatus);\n\nconst SnowflakeFileUtil = new FileUtil();\nconst SnowflakeLocalUtil = new LocalUtil();\nconst S3_FS = 'S3';\nconst AZURE_FS = 'AZURE';\nconst GCS_FS = 'GCS';\nconst LOCAL_FS = 'LOCAL_FS';\nconst CMD_TYPE_UPLOAD = 'UPLOAD';\nconst CMD_TYPE_DOWNLOAD = 'DOWNLOAD';\nconst FILE_PROTOCOL = 'file://';\n\nconst INJECT_WAIT_IN_PUT = 0;\n\n\nconst RESULT_TEXT_COLUMN_DESC = function (name) {\n  return {\n    'name': name,\n    'type': 'text',\n    'length': 16777216,\n    'precision': null,\n    'scale': null,\n    'nullable': false\n  };\n};\nconst RESULT_FIXED_COLUMN_DESC = function (name) {\n  return {\n    'name': name,\n    'type': 'fixed',\n    'length': 5,\n    'precision': 0,\n    'scale': 0,\n    'nullable': false\n  };\n};\n/**\n * Creates a file transfer agent.\n *\n * @param {Object} context\n *\n * @returns {Object}\n * @constructor\n */\nfunction FileTransferAgent(context) {\n  const remoteStorageUtil = new SnowflakeRemoteStorageUtil(context.connectionConfig);\n  const response = context.fileMetadata;\n  const command = context.sqlText;\n  const cwd = context.cwd;\n\n  let commandType;\n  const encryptionMaterial = [];\n  let fileName;\n  const fileStream = context.fileStream ? context.fileStream : null;\n\n  let autoCompress;\n  let sourceCompression;\n  let parallel;\n  let stageInfo;\n  let stageLocationType;\n  let presignedUrls;\n  let overwrite;\n\n  let useAccelerateEndpoint = false;\n\n  let srcFiles;\n  const srcFilesToEncryptionMaterial = {};\n  let localLocation;\n\n  const results = [];\n\n  // Store info of files retrieved\n  const filesToPut = [];\n\n  // Store metadata of files retrieved\n  const fileMetadata = [];\n  const smallFileMetas = [];\n  const largeFileMetas = [];\n\n  /**\n  * Execute PUT or GET command.\n  *\n  * @returns {null}\n  */\n  this.execute = async function () {\n    if (fileStream) {\n      const data = response['data'];\n      commandType = data['command'];\n      autoCompress = data['autoCompress'];\n      sourceCompression = data['sourceCompression'];\n      parallel = data['parallel'];\n      stageInfo = data['stageInfo'];\n      stageLocationType = stageInfo['locationType'];\n      presignedUrls = data['presignedUrls'];\n      overwrite = data['overwrite'];\n\n      if (commandType !== CMD_TYPE_UPLOAD) {\n        throw new Error('Incorrect UploadFileStream command');\n      }\n\n      const currFileObj = {};\n      currFileObj['srcFileName'] = data.src_locations[0];\n      currFileObj['srcFilePath'] = '';\n      currFileObj['srcFileSize'] = fileStream.length;\n      filesToPut.push(currFileObj);\n\n      initEncryptionMaterial();\n      initFileMetadata();\n\n      await transferAccelerateConfig();\n      await updateFileMetasWithPresignedUrl();\n\n      if (fileMetadata.length !== 1) {\n        throw new Error('UploadFileStream only allow 1 file');\n      }\n\n      //upload \n      const storageClient = getStorageClient(stageLocationType);\n      const client = storageClient.createClient(stageInfo, false);\n      const meta = fileMetadata[0];\n      meta['parallel'] = parallel;\n      meta['client'] = client;\n      meta['fileStream'] = fileStream;\n\n      //for digest\n      const hash = crypto.createHash('sha256')\n        .update(fileStream)\n        .digest('base64');\n      meta['SHA256_DIGEST'] = hash;\n      meta['uploadSize'] = fileStream.length;\n      meta['dstCompressionType'] = fileCompressionType.lookupByEncoding(sourceCompression);\n      meta['requireCompress'] = false;\n      meta['dstFileName'] = meta['srcFileName'];\n\n      await storageClient.uploadOneFileStream(meta);\n    } else {\n      parseCommand();\n      initFileMetadata();\n\n      if (commandType === CMD_TYPE_UPLOAD) {\n        if (filesToPut.length === 0) {\n          throw new Error('No file found for: ' + fileName);\n        }\n\n        processFileCompressionType();\n      }\n\n      if (commandType === CMD_TYPE_DOWNLOAD) {\n        if (!fs.existsSync(localLocation)) {\n          fs.mkdirSync(localLocation);\n        }\n      }\n\n      if (stageLocationType === LOCAL_FS) {\n        process.umask(0);\n        if (!fs.existsSync(stageInfo['location'])) {\n          fs.mkdirSync(stageInfo['location'], { mode: 0o777, recursive: true });\n        }\n      }\n\n      await transferAccelerateConfig();\n      await updateFileMetasWithPresignedUrl();\n\n      for (const meta of fileMetadata) {\n        if (meta['srcFileSize'] > SnowflakeS3Util.DATA_SIZE_THRESHOLD) {\n          // Add to large file metas\n          meta['parallel'] = parallel;\n          largeFileMetas.push(meta);\n        } else {\n          // Add to small file metas and set parallel to 1\n          meta['parallel'] = 1;\n          smallFileMetas.push(meta);\n        }\n      }\n\n      if (commandType === CMD_TYPE_UPLOAD) {\n        await upload(largeFileMetas, smallFileMetas);\n      }\n\n      if (commandType === CMD_TYPE_DOWNLOAD) {\n        await download(largeFileMetas, smallFileMetas);\n      }\n    }\n  };\n\n  /**\n  * Generate the rowset and rowset types using the file metadatas.\n  *\n  * @returns {Object}\n  */\n  this.result = function () {\n    const rowset = [];\n    if (commandType === CMD_TYPE_UPLOAD) {\n      let srcFileSize;\n      let dstFileSize;\n      let srcCompressionType;\n      let dstCompressionType;\n      let errorDetails;\n\n      if (results) {\n        for (const meta of results) {\n          if (meta['resultStatus'] === 'ERROR') {\n            errorDetails = meta['errorDetails'];\n            if (!errorDetails) {\n              errorDetails = `Unknown error during PUT of file: ${meta['srcFilePath']}`;\n            }\n            throw new Error(errorDetails);\n          }\n          if (meta['srcCompressionType']) {\n            srcCompressionType = meta['srcCompressionType']['name'];\n          } else {\n            srcCompressionType = null;\n          }\n\n          if (meta['dstCompressionType']) {\n            dstCompressionType = meta['dstCompressionType']['name'];\n          } else {\n            dstCompressionType = null;\n          }\n\n          errorDetails = meta['errorDetails'];\n\n          srcFileSize = meta['srcFileSize'].toString();\n          dstFileSize = meta['dstFileSize'].toString();\n\n          rowset.push([\n            meta['srcFileName'],\n            meta['dstFileName'],\n            srcFileSize,\n            dstFileSize,\n            srcCompressionType,\n            dstCompressionType,\n            meta['resultStatus'],\n            errorDetails\n          ]);\n        }\n      }\n      return {\n        'rowset': rowset,\n        'rowtype': [\n          RESULT_TEXT_COLUMN_DESC('source'),\n          RESULT_TEXT_COLUMN_DESC('target'),\n          RESULT_FIXED_COLUMN_DESC('sourceSize'),\n          RESULT_FIXED_COLUMN_DESC('targetSize'),\n          RESULT_TEXT_COLUMN_DESC('sourceCompression'),\n          RESULT_TEXT_COLUMN_DESC('targetCompression'),\n          RESULT_TEXT_COLUMN_DESC('status'),\n          RESULT_TEXT_COLUMN_DESC('message'),\n        ]\n      };\n    } else if (commandType === CMD_TYPE_DOWNLOAD) {\n      let dstFileSize;\n      let errorDetails;\n\n      if (results) {\n        for (const meta of results) {\n          errorDetails = meta['errorDetails'];\n          dstFileSize = meta['dstFileSize'];\n\n          rowset.push([\n            meta['dstFileName'],\n            dstFileSize,\n            meta['resultStatus'],\n            errorDetails\n          ]);\n        }\n      }\n\n      return {\n        'rowset': rowset,\n        'rowtype': [\n          RESULT_TEXT_COLUMN_DESC('file'),\n          RESULT_FIXED_COLUMN_DESC('size'),\n          RESULT_TEXT_COLUMN_DESC('status'),\n          RESULT_TEXT_COLUMN_DESC('message')\n        ]\n      };\n    }\n  };\n\n  /**\n  * Upload files in the metadata list.\n  *\n  * @returns {null}\n  */\n  async function upload(largeFileMetas, smallFileMetas) {\n    const storageClient = getStorageClient(stageLocationType);\n    const client = storageClient.createClient(stageInfo, false);\n\n    for (const meta of smallFileMetas) {\n      meta['client'] = client;\n    }\n    for (const meta of largeFileMetas) {\n      meta['client'] = client;\n    }\n\n    if (smallFileMetas.length > 0) {\n      //await uploadFilesinParallel(smallFileMetas);\n      await uploadFilesinSequential(smallFileMetas);\n    }\n    if (largeFileMetas.length > 0) {\n      await uploadFilesinSequential(largeFileMetas);\n    }\n  }\n\n  /**\n  * Upload a file sequentially.\n  *\n  * @param {Object} fileMeta\n  *\n  * @returns {null}\n  */\n  async function uploadFilesinSequential(fileMeta) {\n    let index = 0;\n    const fileMetaLen = fileMeta.length;\n\n    while (index < fileMetaLen) {\n      const result = await uploadOneFile(fileMeta[index]);\n      if (result['resultStatus'] === resultStatus.RENEW_TOKEN) {\n        const client = renewExpiredClient();\n        for (let index2 = index; index2 < fileMetaLen; index2++) {\n          fileMeta[index2]['client'] = client;\n        }\n        continue;\n      } else if (result['resultStatus'] === resultStatus.RENEW_PRESIGNED_URL) {\n        await updateFileMetasWithPresignedUrl();\n        continue;\n      }\n      results.push(result);\n      if (result['resultStatus'] === resultStatus.ERROR) {\n        break;\n      }\n      index += 1;\n      if (INJECT_WAIT_IN_PUT > 0) {\n        await new Promise(resolve => setTimeout(resolve, INJECT_WAIT_IN_PUT));\n      }\n    }\n  }\n\n  /**\n  * Generate a temporary directory for the file then upload.\n  *\n  * @param {Object} meta\n  *\n  * @returns {Object}\n  */\n  async function uploadOneFile(meta) {\n    meta['realSrcFilePath'] = meta['srcFilePath'];\n    const tmpDir = fs.mkdtempSync(path.join(os.tmpdir(), 'tmp'));\n    meta['tmpDir'] = tmpDir;\n    try {\n      if (meta['requireCompress']) {\n        const result = await SnowflakeFileUtil.compressFileWithGZIP(meta['srcFilePath'], meta['tmpDir']);\n        meta['realSrcFilePath'] = result.name;\n      }\n      const result = await SnowflakeFileUtil.getDigestAndSizeForFile(meta['realSrcFilePath']);\n      const sha256Digest = result.digest;\n      const uploadSize = result.size;\n\n      meta['SHA256_DIGEST'] = sha256Digest;\n      meta['uploadSize'] = uploadSize;\n\n      const storageClient = getStorageClient(meta['stageLocationType']);\n      await storageClient.uploadOneFileWithRetry(meta);\n    } catch (err) {\n      meta['dstFileSize'] = 0;\n      if (meta['resultStatus']) {\n        meta['resultStatus'] = resultStatus.ERROR;\n\n      }\n      meta['errorDetails'] = err.toString();\n      meta['errorDetails'] += ` file=${meta['srcFileName']}, real file=${meta['realSrcFilePath']}`;\n    } finally {\n      // Remove all files inside tmp folder\n      const matchingFileNames = getMatchingFilePaths(meta['tmpDir'], meta['srcFileName'] + '*');\n      for (const matchingFileName of matchingFileNames) {\n        await new Promise((resolve, reject) => {\n          fs.unlink(matchingFileName, err => {\n            if (err) {\n              reject(err);\n            }\n            resolve();\n          });\n        });\n      }\n      // Delete tmp folder\n      fs.rmdir(meta['tmpDir'], (err) => {\n        if (err) {\n          throw (err);\n        }\n\n      });\n    }\n\n    return meta;\n  }\n\n  /**\n  * Download files in the metadata list.\n  *\n  * @returns {null}\n  */\n  async function download(largeFileMetas, smallFileMetas) {\n    const storageClient = getStorageClient(stageLocationType);\n    const client = storageClient.createClient(stageInfo, false);\n\n    for (const meta of smallFileMetas) {\n      meta['client'] = client;\n    }\n    for (const meta of largeFileMetas) {\n      meta['client'] = client;\n    }\n\n    if (smallFileMetas.length > 0) {\n      //await downloadFilesinParallel(smallFileMetas);\n      await downloadFilesinSequential(smallFileMetas);\n    }\n    if (largeFileMetas.length > 0) {\n      await downloadFilesinSequential(largeFileMetas);\n    }\n  }\n\n  /**\n  * Download a file sequentially.\n  *\n  * @param {Object} fileMeta\n  *\n  * @returns {null}\n  */\n  async function downloadFilesinSequential(fileMeta) {\n    let index = 0;\n    const fileMetaLen = fileMeta.length;\n\n    while (index < fileMetaLen) {\n      const result = await downloadOneFile(fileMeta[index]);\n      if (result['resultStatus'] === resultStatus.RENEW_TOKEN) {\n        const client = renewExpiredClient();\n        for (let index2 = index; index2 < fileMetaLen; index2++) {\n          fileMeta[index2]['client'] = client;\n        }\n        continue;\n      } else if (result['resultStatus'] === resultStatus.RENEW_PRESIGNED_URL) {\n        await updateFileMetasWithPresignedUrl();\n        continue;\n      }\n      results.push(result);\n      index += 1;\n      if (INJECT_WAIT_IN_PUT > 0) {\n        await new Promise(resolve => setTimeout(resolve, INJECT_WAIT_IN_PUT));\n      }\n    }\n  }\n\n  /**\n  * Download a file and place into the target directory.\n  *\n  * @param {Object} meta\n  *\n  * @returns {Object}\n  */\n  async function downloadOneFile(meta) {\n    meta['tmpDir'] = await new Promise((resolve, reject) => {\n      fs.mkdtemp(path.join(os.tmpdir(), 'tmp'), (err, dir) => {\n        if (err) {\n          reject(err);\n        }\n        resolve(dir);\n      });\n    });\n    try {\n      const storageClient = getStorageClient(meta['stageLocationType']);\n      await storageClient.downloadOneFile(meta);\n    } catch (err) {\n      meta['dstFileSize'] = -1;\n      if (meta['resultStatus']) {\n        meta['resultStatus'] = resultStatus.ERROR;\n\n      }\n      meta['errorDetails'] = err.toString();\n      meta['errorDetails'] += ` file=${meta['dstFileName']}`;\n    }\n\n    return meta;\n  }\n\n  /**\n  * Determine whether to acceleration configuration for S3 clients.\n  *\n  * @returns {null}\n  */\n  async function transferAccelerateConfig() {\n    if (stageLocationType === S3_FS) {\n      const client = remoteStorageUtil.createClient(stageInfo, false);\n      const s3location = SnowflakeS3Util.extractBucketNameAndPath(stageInfo['location']);\n\n      await client.getBucketAccelerateConfiguration({ Bucket: s3location.bucketName })\n        .then(function (data) {\n          useAccelerateEndpoint = data['Status'] === 'Enabled';\n        }).catch(function (err) {\n          if (err['code'] === 'AccessDenied') {\n            return;\n          }\n        });\n    }\n  }\n\n  /**\n  * Update presigned URLs of file metadata when using GCS client.\n  *\n  * @returns {null}\n  */\n  async function updateFileMetasWithPresignedUrl() {\n    const storageClient = getStorageClient(stageLocationType);\n\n    // presigned url only applies to remote storage\n    if (storageClient === remoteStorageUtil) {\n      // presigned url only applies to GCS\n      if (stageLocationType === GCS_FS) {\n        if (commandType === CMD_TYPE_UPLOAD) {\n          const filePathToReplace = getFileNameFromPutCommand(command);\n\n          for (const meta of fileMetadata) {\n            const fileNameToReplaceWith = meta['dstFileName'];\n            let commandWithSingleFile = command;\n            commandWithSingleFile = commandWithSingleFile.replace(filePathToReplace, fileNameToReplaceWith);\n\n            const options = { sqlText: commandWithSingleFile };\n            const newContext = statement.createContext(options, context.services, context.connectionConfig);\n\n            const ret = await statement.sendRequest(newContext);\n            meta['stageInfo'] = ret['data']['data']['stageInfo'];\n            meta['presignedUrl'] = meta['stageInfo']['presignedUrl'];\n          }\n        } else if (commandType === CMD_TYPE_DOWNLOAD) {\n          for (let index = 0; index < fileMetadata.length; index++) {\n            fileMetadata[index]['presignedUrl'] = presignedUrls[index];\n          }\n        }\n      }\n    }\n  }\n\n  /**\n  * Returns the local file path.\n  *\n  * @param {String} command\n  *\n  * @returns {String}\n  */\n  function getFileNameFromPutCommand(command) {\n    // Extract file path from PUT command:\n    // E.g. \"PUT file://C:<path-to-file> @DB.SCHEMA.%TABLE;\"\n    const startIndex = command.indexOf(FILE_PROTOCOL) + FILE_PROTOCOL.length;\n    const spaceIndex = command.substring(startIndex).indexOf(' ');\n    const quoteIndex = command.substring(startIndex).indexOf('\\'');\n    let endIndex = spaceIndex;\n    if (quoteIndex !== -1 && quoteIndex < spaceIndex) {\n      endIndex = quoteIndex; \n    }\n    const filePath = command.substring(startIndex, startIndex + endIndex);\n    return filePath;\n  }\n\n  /**\n  * Get the storage client based on stage location type.\n  *\n  * @param {String} stageLocationType\n  *\n  * @returns {Object}\n  */\n  function getStorageClient(stageLocationType) {\n    if (stageLocationType === LOCAL_FS) {\n      return SnowflakeLocalUtil;\n    } else if (stageLocationType === S3_FS ||\n      stageLocationType === AZURE_FS ||\n      stageLocationType === GCS_FS) {\n      return remoteStorageUtil;\n    } else {\n      return null;\n    }\n  }\n\n  /**\n  * Parse the command and get list of files to upload/download.\n  *\n  * @returns {null}\n  */\n  function parseCommand() {\n    const data = response['data'];\n    commandType = data['command'];\n\n    if (commandType === CMD_TYPE_UPLOAD) {\n      const src = data['src_locations'][0];\n\n      // Get root directory of file path\n      let root = path.dirname(src);\n\n      // If cwd exists and root is relative . then replace with context's cwd\n      // Used for VS Code extension where extension cwd differs from user workspace dir      \n      if (cwd && !path.isAbsolute(src)) {\n        const absolutePath = path.resolve(cwd, src);\n        root = path.dirname(absolutePath);\n      }\n\n      let dir;\n\n      // Check root directory exists\n      if (fs.existsSync(root)) {\n        // Check the root path is a directory\n        dir = fs.statSync(root);\n\n        if (dir.isDirectory()) {\n          // Get file name to upload\n          fileName = path.basename(src);\n\n          // Full path name of the file\n          const fileNameFullPath = path.join(root, fileName);\n\n          // If file name has a wildcard\n          if (fileName.includes('*')) {\n            // Get all file names that matches the wildcard\n            const matchingFileNames = getMatchingFilePaths(root, fileName);\n\n            for (const matchingFileName of matchingFileNames) {\n              initEncryptionMaterial();\n\n              const fileInfo = fs.statSync(matchingFileName);\n              const currFileObj = {};\n              currFileObj['srcFileName'] = path.basename(matchingFileName);\n              currFileObj['srcFilePath'] = matchingFileName;\n              currFileObj['srcFileSize'] = fileInfo.size;\n\n              filesToPut.push(currFileObj);\n            }\n          } else {\n            // No wildcard, get single file\n            if (fs.existsSync(root)) {\n              initEncryptionMaterial();\n\n              const fileInfo = fs.statSync(fileNameFullPath);\n\n              const currFileObj = {};\n              currFileObj['srcFileName'] = fileName;\n              currFileObj['srcFilePath'] = fileNameFullPath;\n              currFileObj['srcFileSize'] = fileInfo.size;\n\n              filesToPut.push(currFileObj);\n            }\n          }\n        }\n      } else {\n        throw new Error(dir + ' is not a directory');\n      }\n\n      autoCompress = data['autoCompress'];\n      sourceCompression = data['sourceCompression'];\n    } else if (commandType === CMD_TYPE_DOWNLOAD) {\n      initEncryptionMaterial();\n      srcFiles = data['src_locations'];\n\n      if (srcFiles.length === encryptionMaterial.length) {\n        for (const idx in srcFiles) {\n          srcFilesToEncryptionMaterial[srcFiles[idx]] = encryptionMaterial[idx];\n        }\n      } else if (encryptionMaterial.length !== 0) {\n        // some encryption material exists. Zero means no encryption\n        throw new Error('The number of downloading files doesn\\'t match');\n      }\n      localLocation = expandTilde(data['localLocation']);\n\n      // If cwd exists and root is relative . then replace with context's cwd\n      // Used for VS Code extension where extension cwd differs from user workspace dir     \n      if (cwd && !path.isAbsolute(localLocation)) {\n        const absolutePath = path.resolve(cwd, localLocation);\n        localLocation = absolutePath;\n      }\n\n      const dir = fs.statSync(localLocation);\n      if (!dir.isDirectory()) {\n        throw new Error('The local path is not a directory: ' + localLocation);\n      }\n    }\n\n    parallel = data['parallel'];\n    stageInfo = data['stageInfo'];\n    stageLocationType = stageInfo['locationType'];\n    presignedUrls = data['presignedUrls'];\n    overwrite = data['overwrite'];\n  }\n\n  /**\n  * Generate encryption material for each metadata.\n  *\n  * @returns {null}\n  */\n  function initEncryptionMaterial() {\n    if (response['data'] && response['data']['encryptionMaterial']) {\n      const rootNode = response['data']['encryptionMaterial'];\n\n      if (commandType === CMD_TYPE_UPLOAD) {\n        encryptionMaterial.push(new SnowflakeFileEncryptionMaterial(\n          rootNode['queryStageMasterKey'],\n          rootNode['queryId'],\n          rootNode['smkId']));\n      } else if (commandType === CMD_TYPE_DOWNLOAD) {\n        for (const elem in rootNode) {\n          encryptionMaterial.push(new SnowflakeFileEncryptionMaterial(\n            rootNode[elem]['queryStageMasterKey'],\n            rootNode[elem]['queryId'],\n            rootNode[elem]['smkId']));\n        }\n      }\n    }\n  }\n\n  /**\n  * Generate metadata for files to upload/download.\n  *\n  * @returns {null}\n  */\n  function initFileMetadata() {\n    if (commandType === CMD_TYPE_UPLOAD) {\n      for (const file of filesToPut) {\n        const currFileObj = {};\n        currFileObj['srcFilePath'] = file['srcFilePath'];\n        currFileObj['srcFileName'] = file['srcFileName'];\n        currFileObj['srcFileSize'] = file['srcFileSize'];\n        currFileObj['stageLocationType'] = stageLocationType;\n        currFileObj['stageInfo'] = stageInfo;\n        currFileObj['overwrite'] = overwrite;\n\n        fileMetadata.push(currFileObj);\n      }\n    } else if (commandType === CMD_TYPE_DOWNLOAD) {\n      for (const fileName of srcFiles) {\n        const currFileObj = {};\n        currFileObj['srcFileName'] = fileName;\n        currFileObj['dstFileName'] = fileName;\n        currFileObj['stageLocationType'] = stageLocationType;\n        currFileObj['stageInfo'] = stageInfo;\n        currFileObj['useAccelerateEndpoint'] = useAccelerateEndpoint;\n        currFileObj['localLocation'] = localLocation;\n        currFileObj['encryptionMaterial'] = srcFilesToEncryptionMaterial[fileName];\n\n        fileMetadata.push(currFileObj);\n      }\n    }\n\n    if (encryptionMaterial.length > 0) {\n      let i = 0;\n      for (const file of fileMetadata) {\n        file['encryptionMaterial'] = encryptionMaterial[i];\n        i++;\n      }\n    }\n  }\n\n  /**\n  * Get the compression type of the file.\n  *\n  * @returns {null}\n  */\n  function processFileCompressionType() {\n    let userSpecifiedSourceCompression;\n    let autoDetect;\n    if (sourceCompression === 'auto_detect') {\n      autoDetect = true;\n\n    } else if (sourceCompression === typeof('undefined')) {\n      autoDetect = false;\n    } else {\n      userSpecifiedSourceCompression = fileCompressionType.lookupByMimeSubType(sourceCompression);\n      if (userSpecifiedSourceCompression === typeof ('undefined') || !userSpecifiedSourceCompression['is_supported']) {\n        throw new Error(sourceCompression + ' is not a supported compression type');\n      }\n      autoDetect = false;\n    }\n\n    for (const meta of fileMetadata) {\n      const fileName = meta['srcFileName'];\n      const filePath = meta['srcFilePath'];\n\n      let currentFileCompressionType;\n      let encoding;\n\n      if (autoDetect) {\n        encoding = mime.lookup(fileName);\n\n        if (!encoding) {\n          const test = Buffer.alloc(4);\n          const fd = fs.openSync(filePath, 'r+');\n          fs.readSync(fd, test, 0, 4, 0);\n          fs.closeSync(fd);\n\n          if (fileName.substring(fileName.lastIndexOf('.')) === '.br') {\n            encoding = 'br';\n          } else if (fileName.substring(fileName.lastIndexOf('.')) === '.deflate') {\n            encoding = 'deflate';\n          } else if (fileName.substring(fileName.lastIndexOf('.')) === '.raw_deflate') {\n            encoding = 'raw_deflate';\n          } else if (Buffer.from(test.toString()).slice(0, 3) === Buffer.from('ORC')) {\n            encoding = 'orc';\n          } else if (Buffer.from(test.toString()) === Buffer.from('PAR1')) {\n            encoding = 'parquet';\n          } else if (binascii.hexlify(test.toString()) === '28fd2ffd' ||\n            fileName.substring(fileName.lastIndexOf('.')) === '.zst') {\n            encoding = 'zstd';\n          }\n        }\n\n        if (encoding) {\n          currentFileCompressionType = fileCompressionType.lookupByEncoding(encoding);\n        }\n        // else {} No file encoding detected\n\n        if (currentFileCompressionType && !currentFileCompressionType['is_supported']) {\n          throw new Error(encoding + ' is not a a supported compression type');\n        }\n      } else {\n        currentFileCompressionType = userSpecifiedSourceCompression;\n      }\n\n      if (currentFileCompressionType) {\n        if (currentFileCompressionType['is_supported']) {\n          meta['dstCompressionType'] = currentFileCompressionType;\n          meta['requireCompress'] = false;\n          meta['dstFileName'] = meta['srcFileName'];\n        } else {\n          throw new Error(encoding + ' is not a a supported compression type');\n        }\n      } else {\n        meta['requireCompress'] = autoCompress;\n        meta['srcCompressionType'] = null;\n\n        // If requireCompress is true, destination file extension is changed to zip\n        if (autoCompress) {\n          // Compress with gzip\n          meta['dstCompressionType'] = fileCompressionType.lookupByMimeSubType('GZIP');\n          meta['dstFileName'] = meta['srcFileName'] + meta['dstCompressionType']['file_extension'];\n        } else {\n          meta['dstFileName'] = meta['srcFileName'];\n          meta['dstCompressionType'] = null;\n        }\n      }\n    }\n  }\n}\n\n//TODO SNOW-992387: Create a function to renew expired client\nfunction renewExpiredClient() {}\n\nmodule.exports = FileTransferAgent;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/lib/file_transfer_agent/file_transfer_agent.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/lib/file_transfer_agent/gcs_util.js":
/*!************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/lib/file_transfer_agent/gcs_util.js ***!
  \************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const EncryptionMetadata = (__webpack_require__(/*! ./encrypt_util */ \"(rsc)/./node_modules/snowflake-sdk/lib/file_transfer_agent/encrypt_util.js\").EncryptionMetadata);\nconst FileHeader = (__webpack_require__(/*! ../file_util */ \"(rsc)/./node_modules/snowflake-sdk/lib/file_util.js\").FileHeader);\nconst getProxyAgent = (__webpack_require__(/*! ../http/node */ \"(rsc)/./node_modules/snowflake-sdk/lib/http/node.js\").getProxyAgent);\nconst ProxyUtil = __webpack_require__(/*! ../proxy_util */ \"(rsc)/./node_modules/snowflake-sdk/lib/proxy_util.js\");\nconst Util = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/snowflake-sdk/lib/util.js\");\nconst { shouldPerformGCPBucket, lstrip } = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/snowflake-sdk/lib/util.js\");\n\nconst GCS_METADATA_PREFIX = 'x-goog-meta-';\nconst SFC_DIGEST = 'sfc-digest';\nconst MATDESC_KEY = 'matdesc';\nconst ENCRYPTIONDATAPROP = 'encryptiondata';\nconst GCS_METADATA_SFC_DIGEST = GCS_METADATA_PREFIX + SFC_DIGEST;\nconst GCS_METADATA_MATDESC_KEY = GCS_METADATA_PREFIX + MATDESC_KEY;\nconst GCS_METADATA_ENCRYPTIONDATAPROP = GCS_METADATA_PREFIX + ENCRYPTIONDATAPROP;\nconst GCS_FILE_HEADER_DIGEST = 'gcs-file-header-digest';\nconst GCS_FILE_HEADER_CONTENT_LENGTH = 'gcs-file-header-content-length';\nconst GCS_FILE_HEADER_ENCRYPTION_METADATA = 'gcs-file-header-encryption-metadata';\n\nconst HTTP_HEADER_CONTENT_ENCODING = 'Content-Encoding';\nconst resultStatus = (__webpack_require__(/*! ../file_util */ \"(rsc)/./node_modules/snowflake-sdk/lib/file_util.js\").resultStatus);\n\nconst { Storage } = __webpack_require__(/*! @google-cloud/storage */ \"(rsc)/./node_modules/@google-cloud/storage/build/cjs/src/index.js\");\n\nconst EXPIRED_TOKEN = 'ExpiredToken';\n\nconst ERRORNO_WSAECONNABORTED = 10053;  // network connection was aborted\n\n/** \n * @typedef {object} GCSLocation\n * @property {string} bucketName\n * @property {string} path \n */\nfunction GCSLocation(bucketName, path) {\n  return {\n    'bucketName': bucketName,\n    'path': path\n  };\n}\n\n/**\n * Creates an GCS utility object.\n * @param {module} connectionConfig\n * @param {module} httpClient\n * @param {module} fileStream\n *\n * @returns {Object}\n * @constructor\n */\nfunction GCSUtil(connectionConfig, httpClient, fileStream) {\n  let axios = httpClient;\n  const fs = typeof fileStream !== 'undefined' ? fileStream : __webpack_require__(/*! fs */ \"fs\");\n  let isProxyEnabled = false;\n\n  /**\n  * Retrieve the GCS token from the stage info metadata.\n  *\n  * @param {Object} stageInfo\n  *\n  * @returns {String}\n  */\n  this.createClient = function (stageInfo) {\n    const stageCredentials = stageInfo['creds'];\n    const gcsToken = stageCredentials['GCS_ACCESS_TOKEN'];\n    //TODO: SNOW-1789759 the value is hardcoded now, but it should be server driven\n    const isRegionalUrlEnabled = (stageInfo.region).toLowerCase() === 'me-central2' || stageInfo.useRegionalUrl;\n    let endPoint = null;\n    if (stageInfo['endPoint']) {\n      endPoint = stageInfo['endPoint'];\n    } else if (isRegionalUrlEnabled) {\n      endPoint = `storage.${stageInfo.region.toLowerCase()}.rep.googleapis.com`;\n    }\n\n    let client;\n    if (gcsToken) {\n      const interceptors = [];\n      interceptors.push({\n        request: (requestConfig) => {\n          requestConfig.headers = requestConfig.headers || {};\n          Object.assign(requestConfig.headers, { Authorization: `Bearer ${gcsToken}` });\n          return requestConfig;\n        }\n      });\n\n      const storage = Util.exists(endPoint) ? new Storage({ interceptors_: interceptors, apiEndpoint: endPoint }) : new Storage({ interceptors_: interceptors });\n      client = { gcsToken: gcsToken, gcsClient: storage };\n    } else {\n      client = null;\n    }\n\n    process.nextTick(() => this.setupHttpClient(endPoint));\n\n    return client;\n  };\n\n  /**\n  * Extract the bucket name and path from the metadata's stage location.\n  *\n  * @param {String} stageLocation\n  *\n  * @returns {GCSLocation}\n  */\n  this.extractBucketNameAndPath = function (stageLocation) {\n    let containerName = stageLocation;\n    let path = '';\n\n    // split stage location as bucket name and path\n    if (stageLocation.includes('/')) {\n      containerName = stageLocation.substring(0, stageLocation.indexOf('/'));\n\n      path = stageLocation.substring(stageLocation.indexOf('/') + 1, stageLocation.length);\n      if (path && !path.endsWith('/')) {\n        path += '/';\n      }\n    }\n\n    return GCSLocation(containerName, path);\n  };\n\n  /**\n  * Create file header based on file being uploaded or not.\n  *\n  * @param {Object} meta\n  * @param {String} filename\n  *\n  * @returns {Object}\n  */\n  this.getFileHeader = async function (meta, filename) {\n    if (meta['resultStatus'] === resultStatus.UPLOADED ||\n      meta['resultStatus'] === resultStatus.DOWNLOADED) {\n      return FileHeader(\n        meta[GCS_FILE_HEADER_DIGEST],\n        meta[GCS_FILE_HEADER_CONTENT_LENGTH],\n        meta[GCS_FILE_HEADER_ENCRYPTION_METADATA]\n      );\n    } else {\n      if (meta['presignedUrl']) {\n        await axios.get(meta['presignedUrl'])\n          .catch(err => {\n            if ([401, 403, 404].includes(err.response.status)) {\n              meta['resultStatus'] = resultStatus.NOT_FOUND_FILE;\n            }\n          });\n      } else {\n        const url = this.generateFileURL(meta.stageInfo, lstrip(filename, '/'));\n        const accessToken = meta['client'].gcsToken;\n        const gcsHeaders = { 'Authorization': `Bearer ${accessToken}` };\n        let encryptionMetadata;\n        let digest;\n        let contentLength;\n        let encryptionDataProp;\n        let matDescKey;\n\n        try {\n          if (shouldPerformGCPBucket(accessToken) && !isProxyEnabled) {\n            const gcsLocation = this.extractBucketNameAndPath(meta['stageInfo']['location']);\n            const metadata = await meta['client'].gcsClient\n              .bucket(gcsLocation.bucketName)\n              .file(gcsLocation.path + filename)\n              .getMetadata();\n\n            digest = metadata[0].metadata[SFC_DIGEST];\n            contentLength = metadata[0].size;\n            encryptionDataProp = metadata[0].metadata[ENCRYPTIONDATAPROP];\n            matDescKey = metadata[0].metadata[MATDESC_KEY];\n          } else {\n            const response = await axios.head(url, { headers: gcsHeaders });\n\n            digest = response.headers[GCS_METADATA_SFC_DIGEST];\n            contentLength = response.headers['content-length'];\n            encryptionDataProp = response.headers[GCS_METADATA_ENCRYPTIONDATAPROP];\n            matDescKey = response.headers[GCS_METADATA_MATDESC_KEY];\n          }\n\n          if (encryptionDataProp) {\n            const encryptionData = JSON.parse(encryptionDataProp);\n            if (encryptionData) {\n              encryptionMetadata = EncryptionMetadata(\n                encryptionData['WrappedContentKey']['EncryptedKey'],\n                encryptionData['ContentEncryptionIV'],\n                matDescKey ? matDescKey : null\n              );\n            }\n          }\n\n          meta['resultStatus'] = resultStatus.UPLOADED;\n\n          return FileHeader(\n            digest,\n            contentLength,\n            encryptionMetadata\n          );\n        } catch (err) {\n          const errCode = !isNaN(err['code']) && !isNaN(parseInt(err['code'])) ? err['code'] : err.response.status;\n\n          if ([403, 408, 429, 500, 503].includes(errCode)) {\n            meta['lastError'] = err;\n            meta['resultStatus'] = resultStatus.NEED_RETRY;\n            return;\n          }\n          if (errCode === 404) {\n            meta['resultStatus'] = resultStatus.NOT_FOUND_FILE;\n          } else if (errCode === 401) {\n            meta['lastError'] = err;\n            meta['resultStatus'] = resultStatus.RENEW_TOKEN;\n          } else {\n            meta['lastError'] = err;\n            meta['resultStatus'] = resultStatus.ERROR;\n            throw err;\n          }\n        }\n      }\n    }\n    return FileHeader(null, null, null);\n  };\n\n  /**\n  * Create the file metadata then upload the file.\n  *\n  * @param {String} dataFile\n  * @param {Object} meta\n  * @param {Object} encryptionMetadata\n  * @param {Number} maxConcurrency\n  *\n  * @returns {null}\n  */\n  this.uploadFile = async function (dataFile, meta, encryptionMetadata, maxConcurrency) {\n    const fileStream = fs.readFileSync(dataFile);\n    await this.uploadFileStream(fileStream, meta, encryptionMetadata, maxConcurrency);\n  };\n\n  /**\n    * Create the file metadata then upload the file stream.\n    *\n    * @param {String} fileStream\n    * @param {Object} meta\n    * @param {Object} encryptionMetadata\n    *\n    * @returns {null}\n    */\n  this.uploadFileStream = async function (fileStream, meta, encryptionMetadata) {\n    let uploadUrl = meta['presignedUrl'];\n    let accessToken = null;\n\n    if (!uploadUrl) {\n      const tempFilename = meta['dstFileName'].substring(meta['dstFileName'].indexOf('/') + 1, meta['dstFileName'].length);\n\n      uploadUrl = this.generateFileURL(meta.stageInfo, tempFilename);\n      accessToken = meta['client'].gcsToken;\n    }\n    let contentEncoding = '';\n\n    if (meta['dstCompressionType']) {\n      contentEncoding = meta['dstCompressionType']['name'];\n      contentEncoding = contentEncoding.toLowerCase();\n    }\n\n    // We set the contentEncoding to blank for the following file types\n    if (['gzip', 'bzip2', 'brotli', 'deflate', 'raw_deflate', 'zstd'].includes(contentEncoding)) {\n      contentEncoding = '';\n    }\n\n    const gcsHeaders = {\n      [HTTP_HEADER_CONTENT_ENCODING]: contentEncoding,\n      [GCS_METADATA_SFC_DIGEST]: meta['SHA256_DIGEST'],\n    };\n\n    if (accessToken) {\n      gcsHeaders['Authorization'] = `Bearer ${accessToken}`;\n    }\n\n    if (encryptionMetadata) {\n      gcsHeaders[GCS_METADATA_ENCRYPTIONDATAPROP] =\n        JSON.stringify({\n          'EncryptionMode': 'FullBlob',\n          'WrappedContentKey': {\n            'KeyId': 'symmKey1',\n            'EncryptedKey': encryptionMetadata.key,\n            'Algorithm': 'AES_CBC_256'\n          },\n          'EncryptionAgent': {\n            'Protocol': '1.0',\n            'EncryptionAlgorithm': 'AES_CBC_256',\n          },\n          'ContentEncryptionIV': encryptionMetadata.iv,\n          'KeyWrappingMetadata': {\n            'EncryptionLibrary': 'Java 5.3.0'\n          }\n        });\n      gcsHeaders[GCS_METADATA_MATDESC_KEY] = encryptionMetadata.matDesc;\n    }\n\n    try {\n      if (shouldPerformGCPBucket(accessToken) && !isProxyEnabled) {\n        const gcsLocation = this.extractBucketNameAndPath(meta['stageInfo']['location']);\n\n        await meta['client'].gcsClient\n          .bucket(gcsLocation.bucketName)\n          .file(gcsLocation.path + meta['dstFileName'])\n          .save(fileStream, {\n            resumable: false,\n            metadata: {\n              metadata: {\n                [ENCRYPTIONDATAPROP]: gcsHeaders[GCS_METADATA_ENCRYPTIONDATAPROP],\n                [MATDESC_KEY]: gcsHeaders[GCS_METADATA_MATDESC_KEY],\n                [SFC_DIGEST]: gcsHeaders[GCS_METADATA_SFC_DIGEST]\n              }\n            }\n          });\n      } else {\n        // Set maxBodyLength to allow large file uploading\n        await axios.put(uploadUrl, fileStream, { maxBodyLength: Infinity, headers: gcsHeaders });\n      }\n    } catch (err) {\n      if ([403, 408, 429, 500, 503].includes(err['code'])) {\n        meta['lastError'] = err;\n        meta['resultStatus'] = resultStatus.NEED_RETRY;\n      } else if (!accessToken && err['code'] === 400 &&\n        (!meta['lastError'] || meta['lastError']['code'] !== 400)) {\n        // Only attempt to renew urls if this isn't the second time this happens\n        meta['lastError'] = err;\n        meta['resultStatus'] = resultStatus.RENEW_PRESIGNED_URL;\n      } else if (accessToken && err['code'] === 401) {\n\n        meta['lastError'] = err;\n        meta['resultStatus'] = resultStatus.RENEW_TOKEN;\n      }\n      return;\n    }\n\n    meta['dstFileSize'] = meta['uploadSize'];\n    meta['resultStatus'] = resultStatus.UPLOADED;\n\n    meta[GCS_FILE_HEADER_DIGEST] = gcsHeaders[GCS_METADATA_SFC_DIGEST];\n    meta[GCS_FILE_HEADER_CONTENT_LENGTH] = meta['uploadSize'];\n    meta[GCS_FILE_HEADER_ENCRYPTION_METADATA] = gcsHeaders[GCS_METADATA_ENCRYPTIONDATAPROP];\n  };\n\n\n  /**\n   * Download the file.\n   *\n   * @param {Object} meta\n   * @param fullDstPath\n   *\n   * @returns {null}\n   */\n  this.nativeDownloadFile = async function (meta, fullDstPath) {\n    let downloadUrl = meta['presignedUrl'];\n    let accessToken = null;\n    let gcsHeaders = {};\n\n    if (!downloadUrl) {\n      downloadUrl = this.generateFileURL(\n        meta.stageInfo, lstrip(meta['srcFileName'], '/')\n      );\n      accessToken = meta['client'].gcsToken;\n      gcsHeaders = { 'Authorization': `Bearer ${accessToken}` };\n    }\n\n    let encryptionDataprop;\n    let matDescKey;\n    let sfcDigest;\n    let size;\n\n    try {\n      if (shouldPerformGCPBucket(accessToken) && !isProxyEnabled) {\n        const gcsLocation = this.extractBucketNameAndPath(meta['stageInfo']['location']);\n        await meta['client'].gcsClient\n          .bucket(gcsLocation.bucketName)\n          .file(gcsLocation.path + meta['srcFileName'])\n          .download({\n            destination: fullDstPath\n          });\n\n        const metadata = await meta['client'].gcsClient\n          .bucket(gcsLocation.bucketName)\n          .file(gcsLocation.path + meta['srcFileName'])\n          .getMetadata();\n\n        encryptionDataprop = metadata[0].metadata[ENCRYPTIONDATAPROP];\n        matDescKey = metadata[0].metadata[MATDESC_KEY];\n        sfcDigest = metadata[0].metadata[SFC_DIGEST];\n        size = metadata[0].size;\n      } else {\n        let response;\n        await axios.get(downloadUrl, {\n          headers: gcsHeaders,\n          responseType: 'stream'\n        }).then(async (res) => {\n          response = res;\n          await new Promise((resolve, reject) => {\n            const writer = fs.createWriteStream(fullDstPath);\n            response.data.pipe(writer);\n            writer.on('error', err => {\n              writer.close();\n              reject(err);\n            });\n            writer.on('close', () => {\n              resolve();\n            });\n          });\n        });\n\n        encryptionDataprop = response.headers[GCS_METADATA_ENCRYPTIONDATAPROP];\n        matDescKey = response.headers[GCS_METADATA_MATDESC_KEY];\n        sfcDigest = response.headers[GCS_METADATA_SFC_DIGEST];\n        size = response.headers['content-length'];\n      }\n    } catch (err) {\n      if (err['code'] === EXPIRED_TOKEN) {\n        meta['resultStatus'] = resultStatus.RENEW_TOKEN;\n      } else {\n        meta['lastError'] = err;\n        if (err['code'] === ERRORNO_WSAECONNABORTED) {\n          meta['resultStatus'] = resultStatus.NEED_RETRY_WITH_LOWER_CONCURRENCY;\n        } else {\n          meta['resultStatus'] = resultStatus.NEED_RETRY;\n        }\n      }\n      return;\n    }\n\n    let encryptionData;\n    if (encryptionDataprop) {\n      encryptionData = JSON.parse(encryptionDataprop);\n    }\n\n    let encryptionMetadata;\n    if (encryptionData) {\n      encryptionMetadata = EncryptionMetadata(\n        encryptionData['WrappedContentKey']['EncryptedKey'],\n        encryptionData['ContentEncryptionIV'],\n        matDescKey\n      );\n    }\n\n    const fileInfo = fs.statSync(fullDstPath);\n    meta['srcFileSize'] = fileInfo.size;\n\n    meta['resultStatus'] = resultStatus.DOWNLOADED;\n\n    meta[GCS_FILE_HEADER_DIGEST] = sfcDigest;\n    meta[GCS_FILE_HEADER_CONTENT_LENGTH] = size;\n    meta[GCS_FILE_HEADER_ENCRYPTION_METADATA] = encryptionMetadata;\n  };\n\n  /**\n  * Generate file URL based on bucket.\n  *\n  * @param {Object} stageInfo\n  * @param {String} filename\n  *\n  * @returns {String}\n  */\n  this.generateFileURL = function (stageInfo, filename) {\n    const gcsLocation = this.extractBucketNameAndPath(stageInfo.location);\n    const fullFilePath = `${gcsLocation.path}${filename}`;\n    const endPoint = this.getGCSCustomEndPoint(stageInfo);\n    const link = `${endPoint != null ? endPoint : 'https://storage.googleapis.com'}/${gcsLocation.bucketName}/${fullFilePath}`;\n    return link.startsWith('https://') ? link : `https://${link}`;\n  };\n\n  this.getGCSCustomEndPoint = function (stageInfo) {\n    //TODO: SNOW-1789759 hardcoded region will be replaced in the future\n    const isRegionalUrlEnabled = (stageInfo.region).toLowerCase() === 'me-central2' || stageInfo.useRegionalUrl;\n    let endPoint = null;\n    if (stageInfo['endPoint']) {\n      endPoint = stageInfo['endPoint'];\n    } else if (isRegionalUrlEnabled) {\n      endPoint = `storage.${stageInfo.region.toLowerCase()}.rep.googleapis.com`;\n    }\n    return endPoint;\n  };\n\n  this.setupHttpClient = function (endPoint) {\n    if (typeof httpClient === 'undefined') {\n      const proxy = ProxyUtil.getProxy(connectionConfig.getProxy(), 'GCS Util');\n\n      //When http_proxy is enabled, the driver should use Axios for HTTPS requests to avoid relying on HTTP_PROXY in GCS.\n      if (proxy || Util.getEnvVar('http_proxy')) {\n        isProxyEnabled = true;\n        const proxyAgent = getProxyAgent(proxy, new URL(connectionConfig.accessUrl), endPoint || 'storage.googleapis.com');\n        axios = (__webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/dist/node/axios.cjs\").create)({\n          proxy: false,\n          httpAgent: proxyAgent,\n          httpsAgent: proxyAgent,\n        });\n      } else {\n        axios = __webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/dist/node/axios.cjs\");\n      }\n    }\n  };\n}\n\nmodule.exports = GCSUtil;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/lib/file_transfer_agent/gcs_util.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/lib/file_transfer_agent/local_util.js":
/*!**************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/lib/file_transfer_agent/local_util.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const fs = __webpack_require__(/*! fs */ \"fs\");\nconst path = __webpack_require__(/*! path */ \"path\");\nconst expandTilde = __webpack_require__(/*! expand-tilde */ \"(rsc)/./node_modules/expand-tilde/index.js\");\nconst resultStatus = (__webpack_require__(/*! ../file_util */ \"(rsc)/./node_modules/snowflake-sdk/lib/file_util.js\").resultStatus);\n\n/**\n * Creates a local utility object.\n *\n * @returns {Object}\n * @constructor\n */\nfunction LocalUtil() {\n  this.createClient = function () {\n    return null;\n  };\n\n  /**\n  * Write file to upload.\n  *\n  * @param {Object} meta\n  *\n  * @returns {null}\n  */\n  this.uploadOneFileWithRetry = async function (meta) {\n    await new Promise(function (resolve) {\n      // Create stream object for reader and writer\n      const reader = fs.createReadStream(meta['realSrcFilePath']);\n      // Create directory if doesn't exist\n      if (!fs.existsSync(meta['stageInfo']['location'])) {\n        fs.mkdirSync(meta['stageInfo']['location'], { recursive: true });\n      }\n\n      let output = path.join(meta['stageInfo']['location'], meta['dstFileName']);\n\n      // expand '~' and '~user' expressions\n      if (process.platform !== 'win32') {\n        output = expandTilde(output);\n      }\n\n      const writer = fs.createWriteStream(output);\n      // Write file\n      const result = reader.pipe(writer);\n      result.on('finish', function () {\n        resolve();\n      });\n    });\n\n    meta['dstFileSize'] = meta['uploadSize'];\n    meta['resultStatus'] = resultStatus.UPLOADED;\n  };\n\n  /**\n  * Write file to download.\n  *\n  * @param {Object} meta\n  *\n  * @returns {null}\n  */\n  this.downloadOneFile = async function (meta) {\n    let output;\n    await new Promise(function (resolve) {\n      const srcFilePath = expandTilde(meta['stageInfo']['location']);\n\n      // Create stream object for reader and writer\n      const realSrcFilePath = path.join(srcFilePath, meta['srcFileName']);\n      const reader = fs.createReadStream(realSrcFilePath);\n\n      // Create directory if doesn't exist\n      if (!fs.existsSync(meta['localLocation'])) {\n        fs.mkdirSync(meta['localLocation'], { recursive: true });\n      }\n\n      output = path.join(meta['localLocation'], meta['dstFileName']);\n\n      const writer = fs.createWriteStream(output);\n      // Write file\n      const result = reader.pipe(writer);\n      result.on('finish', function () {\n        resolve();\n      });\n    });\n\n    const fileStat = fs.statSync(output);\n    meta['dstFileSize'] = fileStat.size;\n    meta['resultStatus'] = resultStatus.DOWNLOADED;\n  };\n}\n\nexports.LocalUtil = LocalUtil;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9saWIvZmlsZV90cmFuc2Zlcl9hZ2VudC9sb2NhbF91dGlsLmpzIiwibWFwcGluZ3MiOiJBQUFBLFdBQVcsbUJBQU8sQ0FBQyxjQUFJO0FBQ3ZCLGFBQWEsbUJBQU8sQ0FBQyxrQkFBTTtBQUMzQixvQkFBb0IsbUJBQU8sQ0FBQyxnRUFBYztBQUMxQyxxQkFBcUIsNkdBQW9DOztBQUV6RDtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFlBQVksUUFBUTtBQUNwQjtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRCxpQkFBaUI7QUFDdkU7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLOztBQUVMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLFFBQVE7QUFDcEI7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDhDQUE4QyxpQkFBaUI7QUFDL0Q7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsaUJBQWlCIiwic291cmNlcyI6WyIvVXNlcnMvdmljdG9yd2lsc29uL0Rlc2t0b3AvcHJvamVjdHMvRVpWaXovbm9kZV9tb2R1bGVzL3Nub3dmbGFrZS1zZGsvbGliL2ZpbGVfdHJhbnNmZXJfYWdlbnQvbG9jYWxfdXRpbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuY29uc3QgZXhwYW5kVGlsZGUgPSByZXF1aXJlKCdleHBhbmQtdGlsZGUnKTtcbmNvbnN0IHJlc3VsdFN0YXR1cyA9IHJlcXVpcmUoJy4uL2ZpbGVfdXRpbCcpLnJlc3VsdFN0YXR1cztcblxuLyoqXG4gKiBDcmVhdGVzIGEgbG9jYWwgdXRpbGl0eSBvYmplY3QuXG4gKlxuICogQHJldHVybnMge09iamVjdH1cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBMb2NhbFV0aWwoKSB7XG4gIHRoaXMuY3JlYXRlQ2xpZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIC8qKlxuICAqIFdyaXRlIGZpbGUgdG8gdXBsb2FkLlxuICAqXG4gICogQHBhcmFtIHtPYmplY3R9IG1ldGFcbiAgKlxuICAqIEByZXR1cm5zIHtudWxsfVxuICAqL1xuICB0aGlzLnVwbG9hZE9uZUZpbGVXaXRoUmV0cnkgPSBhc3luYyBmdW5jdGlvbiAobWV0YSkge1xuICAgIGF3YWl0IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAvLyBDcmVhdGUgc3RyZWFtIG9iamVjdCBmb3IgcmVhZGVyIGFuZCB3cml0ZXJcbiAgICAgIGNvbnN0IHJlYWRlciA9IGZzLmNyZWF0ZVJlYWRTdHJlYW0obWV0YVsncmVhbFNyY0ZpbGVQYXRoJ10pO1xuICAgICAgLy8gQ3JlYXRlIGRpcmVjdG9yeSBpZiBkb2Vzbid0IGV4aXN0XG4gICAgICBpZiAoIWZzLmV4aXN0c1N5bmMobWV0YVsnc3RhZ2VJbmZvJ11bJ2xvY2F0aW9uJ10pKSB7XG4gICAgICAgIGZzLm1rZGlyU3luYyhtZXRhWydzdGFnZUluZm8nXVsnbG9jYXRpb24nXSwgeyByZWN1cnNpdmU6IHRydWUgfSk7XG4gICAgICB9XG5cbiAgICAgIGxldCBvdXRwdXQgPSBwYXRoLmpvaW4obWV0YVsnc3RhZ2VJbmZvJ11bJ2xvY2F0aW9uJ10sIG1ldGFbJ2RzdEZpbGVOYW1lJ10pO1xuXG4gICAgICAvLyBleHBhbmQgJ34nIGFuZCAnfnVzZXInIGV4cHJlc3Npb25zXG4gICAgICBpZiAocHJvY2Vzcy5wbGF0Zm9ybSAhPT0gJ3dpbjMyJykge1xuICAgICAgICBvdXRwdXQgPSBleHBhbmRUaWxkZShvdXRwdXQpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCB3cml0ZXIgPSBmcy5jcmVhdGVXcml0ZVN0cmVhbShvdXRwdXQpO1xuICAgICAgLy8gV3JpdGUgZmlsZVxuICAgICAgY29uc3QgcmVzdWx0ID0gcmVhZGVyLnBpcGUod3JpdGVyKTtcbiAgICAgIHJlc3VsdC5vbignZmluaXNoJywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXNvbHZlKCk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIG1ldGFbJ2RzdEZpbGVTaXplJ10gPSBtZXRhWyd1cGxvYWRTaXplJ107XG4gICAgbWV0YVsncmVzdWx0U3RhdHVzJ10gPSByZXN1bHRTdGF0dXMuVVBMT0FERUQ7XG4gIH07XG5cbiAgLyoqXG4gICogV3JpdGUgZmlsZSB0byBkb3dubG9hZC5cbiAgKlxuICAqIEBwYXJhbSB7T2JqZWN0fSBtZXRhXG4gICpcbiAgKiBAcmV0dXJucyB7bnVsbH1cbiAgKi9cbiAgdGhpcy5kb3dubG9hZE9uZUZpbGUgPSBhc3luYyBmdW5jdGlvbiAobWV0YSkge1xuICAgIGxldCBvdXRwdXQ7XG4gICAgYXdhaXQgbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgIGNvbnN0IHNyY0ZpbGVQYXRoID0gZXhwYW5kVGlsZGUobWV0YVsnc3RhZ2VJbmZvJ11bJ2xvY2F0aW9uJ10pO1xuXG4gICAgICAvLyBDcmVhdGUgc3RyZWFtIG9iamVjdCBmb3IgcmVhZGVyIGFuZCB3cml0ZXJcbiAgICAgIGNvbnN0IHJlYWxTcmNGaWxlUGF0aCA9IHBhdGguam9pbihzcmNGaWxlUGF0aCwgbWV0YVsnc3JjRmlsZU5hbWUnXSk7XG4gICAgICBjb25zdCByZWFkZXIgPSBmcy5jcmVhdGVSZWFkU3RyZWFtKHJlYWxTcmNGaWxlUGF0aCk7XG5cbiAgICAgIC8vIENyZWF0ZSBkaXJlY3RvcnkgaWYgZG9lc24ndCBleGlzdFxuICAgICAgaWYgKCFmcy5leGlzdHNTeW5jKG1ldGFbJ2xvY2FsTG9jYXRpb24nXSkpIHtcbiAgICAgICAgZnMubWtkaXJTeW5jKG1ldGFbJ2xvY2FsTG9jYXRpb24nXSwgeyByZWN1cnNpdmU6IHRydWUgfSk7XG4gICAgICB9XG5cbiAgICAgIG91dHB1dCA9IHBhdGguam9pbihtZXRhWydsb2NhbExvY2F0aW9uJ10sIG1ldGFbJ2RzdEZpbGVOYW1lJ10pO1xuXG4gICAgICBjb25zdCB3cml0ZXIgPSBmcy5jcmVhdGVXcml0ZVN0cmVhbShvdXRwdXQpO1xuICAgICAgLy8gV3JpdGUgZmlsZVxuICAgICAgY29uc3QgcmVzdWx0ID0gcmVhZGVyLnBpcGUod3JpdGVyKTtcbiAgICAgIHJlc3VsdC5vbignZmluaXNoJywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXNvbHZlKCk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGNvbnN0IGZpbGVTdGF0ID0gZnMuc3RhdFN5bmMob3V0cHV0KTtcbiAgICBtZXRhWydkc3RGaWxlU2l6ZSddID0gZmlsZVN0YXQuc2l6ZTtcbiAgICBtZXRhWydyZXN1bHRTdGF0dXMnXSA9IHJlc3VsdFN0YXR1cy5ET1dOTE9BREVEO1xuICB9O1xufVxuXG5leHBvcnRzLkxvY2FsVXRpbCA9IExvY2FsVXRpbDtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/lib/file_transfer_agent/local_util.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/lib/file_transfer_agent/remote_storage_util.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/lib/file_transfer_agent/remote_storage_util.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const fs = __webpack_require__(/*! fs */ \"fs\");\nconst path = __webpack_require__(/*! path */ \"path\");\nconst SnowflakeS3Util = (__webpack_require__(/*! ./s3_util */ \"(rsc)/./node_modules/snowflake-sdk/lib/file_transfer_agent/s3_util.js\").S3Util);\nconst SnowflakeAzureUtil = __webpack_require__(/*! ./azure_util */ \"(rsc)/./node_modules/snowflake-sdk/lib/file_transfer_agent/azure_util.js\");\nconst SnowflakeGCSUtil = __webpack_require__(/*! ./gcs_util */ \"(rsc)/./node_modules/snowflake-sdk/lib/file_transfer_agent/gcs_util.js\");\n\nconst SnowflakeEncryptionUtil = new ((__webpack_require__(/*! ./encrypt_util */ \"(rsc)/./node_modules/snowflake-sdk/lib/file_transfer_agent/encrypt_util.js\").EncryptUtil))();\nconst resultStatus = (__webpack_require__(/*! ../file_util */ \"(rsc)/./node_modules/snowflake-sdk/lib/file_util.js\").resultStatus);\n\nconst DEFAULT_CONCURRENCY = 1;\nconst DEFAULT_MAX_RETRY = 5;\n\n// File Encryption Material\nfunction SnowflakeFileEncryptionMaterial(key, qid, smkid) {\n  const smkidString = '' + smkid;\n  return {\n    'queryStageMasterKey': key, // query stage master key\n    'queryId': qid, // query id\n    'smkId': smkidString  // SMK id\n  };\n}\n\nexports.SnowflakeFileEncryptionMaterial = SnowflakeFileEncryptionMaterial;\n\n/**\n * Creates a remote storage utility object.\n *\n * @returns {Object}\n * @constructor\n */\nfunction RemoteStorageUtil(connectionConfig) {\n  let client = null;\n\n  /**\n  * Get storage type based on location type.\n  *\n  * @param {String} type\n  *\n  * @returns {Object}\n  */\n  this.getForStorageType = function (type) {\n    if (client) {\n      return client;\n    }\n    if (type === 'S3') {\n      client = new SnowflakeS3Util(connectionConfig);\n    } else if (type === 'AZURE') {\n      client = new SnowflakeAzureUtil(connectionConfig);\n    } else if (type === 'GCS') {\n      client = new SnowflakeGCSUtil(connectionConfig);\n    }\n    return client;\n  };\n\n  /**\n  * Create the client based on the location type.\n  */\n  this.createClient = function (stageInfo, useAccelerateEndpoint = false) {\n    const utilClass = this.getForStorageType(stageInfo['locationType']);\n    return utilClass.createClient(stageInfo, useAccelerateEndpoint);\n  };\n\n  /**\n   * Encrypt then upload one file stream.\n   *\n   * @param {Object} meta\n   *\n   * @returns {null}\n   */\n  this.uploadOneFileStream = async function (meta) {\n    let encryptionMetadata;\n    let dataFileStream = meta['fileStream'];\n    \n    if (meta['encryptionMaterial']) {\n      const result = await SnowflakeEncryptionUtil.encryptFileStream(\n        meta['encryptionMaterial'],\n        meta['fileStream']);\n      encryptionMetadata = result.encryptionMetadata;\n      dataFileStream = result.dataStream;\n    }\n\n    const utilClass = this.getForStorageType(meta['stageInfo']['locationType']);\n\n    let maxConcurrency = meta['parallel'];\n    let lastErr;\n    const maxRetry = DEFAULT_MAX_RETRY;\n\n    for (let retry = 0; retry < maxRetry; retry++) {\n      if (!meta['overwrite']) {\n        const fileHeader = await utilClass.getFileHeader(meta, meta['dstFileName']);\n\n        if (fileHeader && meta['resultStatus'] === resultStatus.UPLOADED) {\n          // File already exists\n          meta['dstFileSize'] = 0;\n          meta['resultStatus'] = resultStatus.SKIPPED;\n          return;\n        }\n      }\n      if (meta['overwrite'] || meta['resultStatus'] === resultStatus.NOT_FOUND_FILE) {\n        await utilClass.uploadFileStream(\n          dataFileStream,\n          meta,\n          encryptionMetadata,\n          maxConcurrency);\n      }\n\n      if (meta['resultStatus'] === resultStatus.UPLOADED) {\n        return;\n      } else if (meta['resultStatus'] === resultStatus.RENEW_TOKEN) {\n        return;\n      } else if (meta['resultStatus'] === resultStatus.RENEW_PRESIGNED_URL) {\n        return;\n      } else if (meta['resultStatus'] === resultStatus.NEED_RETRY) {\n        lastErr = meta['lastError'];\n        // Failed to upload file, retrying\n        if (!meta['noSleepingTime']) {\n          const sleepingTime = Math.min(Math.pow(2, retry), 16);\n          await new Promise(resolve => setTimeout(resolve, sleepingTime));\n        }\n      } else if (meta['resultStatus'] === resultStatus.NEED_RETRY_WITH_LOWER_CONCURRENCY) {\n        lastErr = meta['lastError'];\n        // Failed to upload file, retrying with max concurrency\n        maxConcurrency = meta['parallel'] - parseInt(retry * meta['parallel'] / maxRetry);\n        maxConcurrency = Math.max(DEFAULT_CONCURRENCY, maxConcurrency);\n        meta['lastMaxConcurrency'] = maxConcurrency;\n\n        if (!meta['noSleepingTime']) {\n          const sleepingTime = Math.min(Math.pow(2, retry), 16);\n          await new Promise(resolve => setTimeout(resolve, sleepingTime));\n        }\n      }\n    }\n    if (lastErr) {\n      throw new Error(lastErr);\n    } else {\n      const msg = 'Unknown Error in uploading a file: ' + meta['srcFileName'];\n      throw new Error(msg);\n    }\n  };\n\n  /**\n  * Encrypt then upload one file.\n  *\n  * @param {Object} meta\n  *\n  * @returns {null}\n  */\n  this.uploadOneFile = async function (meta) {\n    let encryptionMetadata;\n    let dataFile;\n\n    if (meta['encryptionMaterial']) {\n      const result = await SnowflakeEncryptionUtil.encryptFile(\n        meta['encryptionMaterial'],\n        meta['realSrcFilePath'],\n        meta['tmpDir']);\n      encryptionMetadata = result.encryptionMetadata;\n      dataFile = result.dataFile;\n    } else {\n      dataFile = meta['realSrcFilePath'];\n    }\n\n    const utilClass = this.getForStorageType(meta['stageInfo']['locationType']);\n\n    let maxConcurrency = meta['parallel'];\n    let lastErr;\n    const maxRetry = DEFAULT_MAX_RETRY;\n\n    for (let retry = 0; retry < maxRetry; retry++) {\n      if (!meta['overwrite']) {\n        const fileHeader = await utilClass.getFileHeader(meta, meta['dstFileName']);\n\n        if (fileHeader && meta['resultStatus'] === resultStatus.UPLOADED) {\n          // File already exists\n          meta['dstFileSize'] = 0;\n          meta['resultStatus'] = resultStatus.SKIPPED;\n          return;\n        }\n      }\n      if (meta['overwrite'] || meta['resultStatus'] === resultStatus.NOT_FOUND_FILE) {\n        await utilClass.uploadFile(\n          dataFile,\n          meta,\n          encryptionMetadata,\n          maxConcurrency);\n      }\n\n      if (meta['resultStatus'] === resultStatus.UPLOADED) {\n        return;\n      } else if (meta['resultStatus'] === resultStatus.RENEW_TOKEN) {\n        return;\n      } else if (meta['resultStatus'] === resultStatus.RENEW_PRESIGNED_URL) {\n        return;\n      } else if (meta['resultStatus'] === resultStatus.NEED_RETRY) {\n        lastErr = meta['lastError'];\n        // Failed to upload file, retrying\n        if (!meta['noSleepingTime']) {\n          const sleepingTime = Math.min(Math.pow(2, retry), 16);\n          await new Promise(resolve => setTimeout(resolve, sleepingTime));\n        }\n      } else if (meta['resultStatus'] === resultStatus.NEED_RETRY_WITH_LOWER_CONCURRENCY) {\n        lastErr = meta['lastError'];\n        // Failed to upload file, retrying with max concurrency\n        maxConcurrency = meta['parallel'] - parseInt(retry * meta['parallel'] / maxRetry);\n        maxConcurrency = Math.max(DEFAULT_CONCURRENCY, maxConcurrency);\n        meta['lastMaxConcurrency'] = maxConcurrency;\n\n        if (!meta['noSleepingTime']) {\n          const sleepingTime = Math.min(Math.pow(2, retry), 16);\n          await new Promise(resolve => setTimeout(resolve, sleepingTime));\n        }\n      }\n    }\n    if (lastErr) {\n      throw new Error(lastErr);\n    } else {\n      const msg = 'Unknown Error in uploading a file: ' + dataFile;\n      throw new Error(msg);\n    }\n  };\n\n  /**\n  * Attempt upload of a file and retry if fails.\n  *\n  * @param {Object} meta\n  *\n  * @returns {null}\n  */\n  this.uploadOneFileWithRetry = async function (meta) {\n    const utilClass = this.getForStorageType(meta['stageInfo']['locationType']);\n\n    let breakFlag = false;\n    for (let x = 0; x < 10; x++) {\n      await this.uploadOneFile(meta);\n\n      if (meta['resultStatus'] === resultStatus.UPLOADED) {\n        for (let y = 0; y < 10; y++) {\n          await utilClass.getFileHeader(meta, meta['dstFileName']);\n          if (meta['resultStatus'] === resultStatus.NOT_FOUND_FILE) {\n            // Wait 1 second\n            await new Promise(resolve => setTimeout(resolve, 1000));\n            continue;\n          }\n          break;\n        }\n      }\n      breakFlag = true;\n      break;\n    }\n    if (!breakFlag) {\n      // Could not upload a file even after retry\n      meta['resultStatus'] = resultStatus.ERROR;\n    }\n  };\n\n  /**\n  * Download a file.\n  *\n  * @param {Object} meta\n  *\n  * @returns {null}\n  */\n  this.downloadOneFile = async function (meta) {\n    // Downloads a file from S3\n    let fullDstPath = meta['localLocation'];\n    await new Promise((resolve, reject) => {\n      fs.realpath(fullDstPath, (err, basePath) => {\n        if (err) {\n          reject(err); \n        }\n        fullDstPath = path.join(basePath, path.basename(meta['dstFileName']));\n        resolve();\n      });\n    });\n\n    // TODO: validate fullDstPath is under the writable directory\n    const baseDir = path.dirname(fullDstPath);\n    await new Promise((resolve) => {\n      fs.exists(baseDir, (exists) => {\n        if (!exists) {\n          fs.mkdir(baseDir, () => {\n            resolve();\n          });\n        } else {\n          resolve();\n        }\n      });\n    });\n\n    const utilClass = this.getForStorageType(meta['stageInfo']['locationType']);\n    let fileHeader = await utilClass.getFileHeader(meta, meta['srcFileName']);\n\n    if (fileHeader) {\n      meta['srcFileSize'] = fileHeader.contentLength;\n    }\n\n    let maxConcurrency = meta['parallel'];\n    let lastErr;\n    const maxRetry = DEFAULT_MAX_RETRY;\n\n    for (let retry = 0; retry < maxRetry; retry++) {\n      // Download the file\n      await utilClass.nativeDownloadFile(meta, fullDstPath, maxConcurrency);\n\n      if (meta['resultStatus'] === resultStatus.DOWNLOADED) {\n        if (meta['encryptionMaterial']) {\n          /**\n            * For storage utils that do not have the privilege of\n            * getting the metadata early, both object and metadata\n            * are downloaded at once.In which case, the file meta will\n            * be updated with all the metadata that we need and\n            * then we can call getFileHeader to get just that and also\n            * preserve the idea of getting metadata in the first place.\n            * One example of this is the utils that use presigned url\n            * for upload / download and not the storage client library.\n            **/\n          if (meta['presignedUrl']) {\n            fileHeader = await utilClass.getFileHeader(meta, meta['srcFilePath']);\n          }\n\n          const tmpDstName = await SnowflakeEncryptionUtil.decryptFile(\n            fileHeader.encryptionMetadata,\n            meta['encryptionMaterial'],\n            fullDstPath,\n            meta['tmpDir']);\n\n          // Copy decrypted tmp file to target destination path\n          await new Promise((resolve, reject) => {\n            fs.copyFile(tmpDstName, fullDstPath, async (err) => {\n              if (err) {\n                reject(err); \n              }\n              resolve();\n            });\n          });\n\n          // Delete tmp file\n          await new Promise((resolve, reject) => {\n            fs.unlink(tmpDstName, (err) => {\n              if (err) {\n                reject(err); \n              }\n              resolve();\n            });\n          });\n\n          // Delete tmp folder\n          await new Promise((resolve, reject) => {\n            fs.rmdir(meta['tmpDir'], (err) => {\n              if (err) {\n                reject(err);\n              }\n              resolve();\n            });\n          });\n        }\n        await new Promise((resolve) => {\n          fs.stat(fullDstPath, (err, stat) => {\n            meta['dstFileSize'] = stat.size;\n            resolve();\n          });\n        });\n\n        return;\n      } else if (meta['resultStatus'] === resultStatus.RENEW_TOKEN) {\n        return;\n      } else if (meta['resultStatus'] === resultStatus.RENEW_PRESIGNED_URL) {\n        return;\n      } else if (meta['resultStatus'] === resultStatus.NEED_RETRY_WITH_LOWER_CONCURRENCY) {\n        lastErr = meta['lastError'];\n        // Failed to download file, retrying with max concurrency\n        maxConcurrency = meta['parallel'] - parseInt(retry * meta['parallel'] / maxRetry);\n        maxConcurrency = Math.max(DEFAULT_CONCURRENCY, maxConcurrency);\n        meta['lastMaxConcurrency'] = maxConcurrency;\n\n        if (!meta['noSleepingTime']) {\n          const sleepingTime = Math.min(Math.pow(2, retry), 16);\n          await new Promise(resolve => setTimeout(resolve, sleepingTime));\n        }\n      } else if (meta['resultStatus'] === resultStatus.NEED_RETRY) {\n        lastErr = meta['lastError'];\n        // Failed to download file, retrying\n        if (!meta['noSleepingTime']) {\n          const sleepingTime = Math.min(Math.pow(2, retry), 16);\n          await new Promise(resolve => setTimeout(resolve, sleepingTime));\n        }\n      }        \n    }\n    if (lastErr) {\n      throw new Error(lastErr);\n    } else {\n      const msg = 'Unknown Error in uploading a file: ' + meta['srcFileName'];\n      throw new Error(msg);\n    }\n  };  \n}\n\nexports.RemoteStorageUtil = RemoteStorageUtil;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/lib/file_transfer_agent/remote_storage_util.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/lib/file_transfer_agent/s3_util.js":
/*!***********************************************************************!*\
  !*** ./node_modules/snowflake-sdk/lib/file_transfer_agent/s3_util.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const { NodeHttpHandler } = __webpack_require__(/*! @smithy/node-http-handler */ \"(rsc)/./node_modules/@smithy/node-http-handler/dist-es/index.js\");\nconst EncryptionMetadata = (__webpack_require__(/*! ./encrypt_util */ \"(rsc)/./node_modules/snowflake-sdk/lib/file_transfer_agent/encrypt_util.js\").EncryptionMetadata);\nconst FileHeader = (__webpack_require__(/*! ../file_util */ \"(rsc)/./node_modules/snowflake-sdk/lib/file_util.js\").FileHeader);\nconst expandTilde = __webpack_require__(/*! expand-tilde */ \"(rsc)/./node_modules/expand-tilde/index.js\");\nconst getProxyAgent = (__webpack_require__(/*! ../http/node */ \"(rsc)/./node_modules/snowflake-sdk/lib/http/node.js\").getProxyAgent);\nconst ProxyUtil = __webpack_require__(/*! ../proxy_util */ \"(rsc)/./node_modules/snowflake-sdk/lib/proxy_util.js\");\n\nconst AMZ_IV = 'x-amz-iv';\nconst AMZ_KEY = 'x-amz-key';\nconst AMZ_MATDESC = 'x-amz-matdesc';\nconst SFC_DIGEST = 'sfc-digest';\n\nconst EXPIRED_TOKEN = 'ExpiredToken';\nconst NO_SUCH_KEY = 'NoSuchKey';\nconst SNOWFLAKE_S3_DESTINATION = 's3.amazonaws.com';\n\nconst ERRORNO_WSAECONNABORTED = 10053;  // network connection was aborted\nconst DATA_SIZE_THRESHOLD = 67108864; // magic number, given from  error message.\n\nconst resultStatus = (__webpack_require__(/*! ../file_util */ \"(rsc)/./node_modules/snowflake-sdk/lib/file_util.js\").resultStatus);\n\nconst HTTP_HEADER_VALUE_OCTET_STREAM = 'application/octet-stream';\n\n// S3 Location: S3 bucket name + path\nfunction S3Location(bucketName, s3path) {\n  return {\n    'bucketName': bucketName, // S3 bucket name\n    's3path': s3path // S3 path name\n  };\n}\n\n/**\n * Creates an S3 utility object.\n *\n * @param connectionConfig\n *\n * @param s3 - used for tests, mock can be supplied\n * @param filestream - used for tests, mock can be supplied\n * @returns {Object}\n * @constructor\n */\nfunction S3Util(connectionConfig, s3, filestream) {\n  const AWS = typeof s3 !== 'undefined' ? s3 : __webpack_require__(/*! @aws-sdk/client-s3 */ \"@aws-sdk/client-s3\");\n  const fs = typeof filestream !== 'undefined' ? filestream : __webpack_require__(/*! fs */ \"fs\");\n  /**\n   * Create an AWS S3 client using an AWS token.\n   */\n  this.createClient = function (stageInfo, useAccelerateEndpoint) {\n    const stageCredentials = stageInfo['creds'];\n    const securityToken = stageCredentials['AWS_TOKEN'];\n    const isRegionalUrlEnabled = stageInfo.useRegionalUrl || stageInfo.useS3RegionalUrl;\n    \n    // if GS sends us an endpoint, it's likely for FIPS. Use it.\n    let endPoint = null;\n    if (stageInfo['endPoint']) {\n      endPoint = `https://${stageInfo['endPoint']}`;\n    } else {\n      if (stageInfo.region && isRegionalUrlEnabled) {\n        const domainSuffixForRegionalUrl = (stageInfo.region).toLowerCase().startsWith('cn-') ? 'amazonaws.com.cn' : 'amazonaws.com';\n        endPoint = `https://s3.${stageInfo.region}.${domainSuffixForRegionalUrl}`;\n      }\n    }\n  \n    const config = {\n      apiVersion: '2006-03-01',\n      region: stageInfo['region'],\n      credentials: {\n        accessKeyId: stageCredentials['AWS_KEY_ID'],\n        secretAccessKey: stageCredentials['AWS_SECRET_KEY'],\n        sessionToken: securityToken,\n      },\n      endpoint: endPoint,\n      useAccelerateEndpoint: useAccelerateEndpoint\n    };\n\n    const proxy = ProxyUtil.getProxy(connectionConfig.getProxy(), 'S3 Util');\n    if (proxy) {\n      const proxyAgent = getProxyAgent(proxy, new URL(connectionConfig.accessUrl), endPoint || SNOWFLAKE_S3_DESTINATION);\n      config.requestHandler = new NodeHttpHandler({\n        httpAgent: proxyAgent,\n        httpsAgent: proxyAgent\n      });\n    }\n\n    return new AWS.S3(config);\n  };\n\n  /**\n   * Get file header based on file being uploaded or not.\n   *\n   * @param {Object} meta\n   * @param {String} filename\n   *\n   * @returns {Object}\n   */\n  this.getFileHeader = async function (meta, filename) {\n    const stageInfo = meta['stageInfo'];\n    const client = this.createClient(stageInfo);\n    const s3location = extractBucketNameAndPath(stageInfo['location']);\n\n    const params = {\n      Bucket: s3location.bucketName,\n      Key: s3location.s3path + filename\n    };\n\n    let akey;\n\n    try {\n      await client.getObject(params)\n        .then(function (data) {\n          akey = data;\n        });\n    } catch (err) {\n      if (err['Code'] === EXPIRED_TOKEN) {\n        meta['resultStatus'] = resultStatus.RENEW_TOKEN;\n        return null;\n      } else if (err['Code'] === NO_SUCH_KEY) {\n        meta['resultStatus'] = resultStatus.NOT_FOUND_FILE;\n        return FileHeader(null, null, null);\n      } else if (err['Code'] === '400') {\n        meta['resultStatus'] = resultStatus.RENEW_TOKEN;\n        return null;\n      } else {\n        meta['resultStatus'] = resultStatus.ERROR;\n        return null;\n      }\n    }\n\n    meta['resultStatus'] = resultStatus.UPLOADED;\n\n    let encryptionMetadata;\n    if (akey && akey.Metadata[AMZ_KEY]) {\n      encryptionMetadata = EncryptionMetadata(\n        akey.Metadata[AMZ_KEY],\n        akey.Metadata[AMZ_IV],\n        akey.Metadata[AMZ_MATDESC]\n      );\n    }\n\n    return FileHeader(\n      akey.Metadata[SFC_DIGEST],\n      akey.ContentLength,\n      encryptionMetadata\n    );\n  };\n\n  /**\n   * Create the file metadata then upload the file.\n   *\n   * @param {String} dataFile\n   * @param {Object} meta\n   * @param {Object} encryptionMetadata\n   */\n  this.uploadFile = async function (dataFile, meta, encryptionMetadata) {\n    const fileStream = fs.readFileSync(dataFile);\n    await this.uploadFileStream(fileStream, meta, encryptionMetadata);\n  };\n\n  /**\n   * Create the file metadata then upload the file stream.\n   *\n   * @param {String} fileStream\n   * @param {Object} meta\n   * @param {Object} encryptionMetadata\n   */\n  this.uploadFileStream = async function (fileStream, meta, encryptionMetadata) {\n    const s3Metadata = {\n      HTTP_HEADER_CONTENT_TYPE: HTTP_HEADER_VALUE_OCTET_STREAM,\n      SFC_DIGEST: meta['SHA256_DIGEST']\n    };\n\n    if (encryptionMetadata) {\n      s3Metadata[AMZ_IV] = encryptionMetadata.iv;\n      s3Metadata[AMZ_KEY] = encryptionMetadata.key;\n      s3Metadata[AMZ_MATDESC] = encryptionMetadata.matDesc;\n    }\n\n    const stageInfo = meta['stageInfo'];\n    const client = this.createClient(stageInfo);\n\n    const s3location = extractBucketNameAndPath(meta['stageInfo']['location']);\n\n    const params = {\n      Bucket: s3location.bucketName,\n      Body: fileStream,\n      Key: s3location.s3path + meta['dstFileName'],\n      Metadata: s3Metadata\n    };\n\n    // call S3 to upload file to specified bucket\n    try {\n      await client.putObject(params);\n    } catch (err) {\n      if (err['Code'] === EXPIRED_TOKEN) {\n        meta['resultStatus'] = resultStatus.RENEW_TOKEN;\n      } else {\n        meta['lastError'] = err;\n        if (err['Code'] === ERRORNO_WSAECONNABORTED.toString()) {\n          meta['resultStatus'] = resultStatus.NEED_RETRY_WITH_LOWER_CONCURRENCY;\n        } else {\n          meta['resultStatus'] = resultStatus.NEED_RETRY;\n        }\n      }\n      return;\n    }\n\n    meta['dstFileSize'] = meta['uploadSize'];\n    meta['resultStatus'] = resultStatus.UPLOADED;\n  };\n\n  /**\n   * Download the file.\n   *\n   * @param {String} dataFile\n   * @param {Object} meta\n   * @param {Object} encryptionMetadata\n   */\n  this.nativeDownloadFile = async function (meta, fullDstPath) {\n    const stageInfo = meta['stageInfo'];\n    const client = this.createClient(stageInfo);\n\n    const s3location = extractBucketNameAndPath(meta['stageInfo']['location']);\n\n    const params = {\n      Bucket: s3location.bucketName,\n      Key: s3location.s3path + meta['dstFileName'],\n    };\n\n    // call S3 to download file to specified bucket\n    try {\n      await client.getObject(params)\n        .then(data => data.Body.transformToByteArray())\n        .then((data) => {\n          return new Promise((resolve, reject) => {\n            fs.writeFile(fullDstPath, data, 'binary', (err) => {\n              if (err) {\n                reject(err);\n              }\n              resolve();\n            });\n          });\n        });\n    } catch (err) {\n      if (err['Code'] === EXPIRED_TOKEN) {\n        meta['resultStatus'] = resultStatus.RENEW_TOKEN;\n      } else {\n        meta['lastError'] = err;\n        if (err['Code'] === ERRORNO_WSAECONNABORTED.toString()) {\n          meta['resultStatus'] = resultStatus.NEED_RETRY_WITH_LOWER_CONCURRENCY;\n        } else {\n          meta['resultStatus'] = resultStatus.NEED_RETRY;\n        }\n      }\n      return;\n    }\n    meta['resultStatus'] = resultStatus.DOWNLOADED;\n  };\n}\n\n/**\n * Extract the bucket name and path from the metadata's stage location.\n *\n * @param {String} stageLocation\n *\n * @returns {Object}\n */\nfunction extractBucketNameAndPath(stageLocation) {\n  // expand '~' and '~user' expressions\n  if (process.platform !== 'win32') {\n    stageLocation = expandTilde(stageLocation);\n  }\n\n  let bucketName = stageLocation;\n  let s3path;\n\n  // split stage location as bucket name and path\n  if (stageLocation.includes('/')) {\n    bucketName = stageLocation.substring(0, stageLocation.indexOf('/'));\n\n    s3path = stageLocation.substring(stageLocation.indexOf('/') + 1, stageLocation.length);\n    if (s3path && !s3path.endsWith('/')) {\n      s3path += '/';\n    }\n  }\n  return S3Location(bucketName, s3path);\n}\n\nmodule.exports = { S3Util, SNOWFLAKE_S3_DESTINATION, DATA_SIZE_THRESHOLD, extractBucketNameAndPath };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/lib/file_transfer_agent/s3_util.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/lib/file_util.js":
/*!*****************************************************!*\
  !*** ./node_modules/snowflake-sdk/lib/file_util.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst fs =  __webpack_require__(/*! fs */ \"fs\");\nconst path = __webpack_require__(/*! path */ \"path\");\nconst struct = __webpack_require__(/*! python-struct */ \"(rsc)/./node_modules/python-struct/src/node_adapter.js\");\nconst zlib = __webpack_require__(/*! zlib */ \"zlib\");\nconst os = __webpack_require__(/*! os */ \"os\");\nconst glob = __webpack_require__(/*! glob */ \"(rsc)/./node_modules/glob/dist/commonjs/index.js\");\nconst Logger = __webpack_require__(/*! ./logger */ \"(rsc)/./node_modules/snowflake-sdk/lib/logger.js\");\n\nconst resultStatus = {\n  ERROR: 'ERROR',\n  UPLOADED: 'UPLOADED',\n  DOWNLOADED: 'DOWNLOADED',\n  COLLISION: 'COLLISION',\n  SKIPPED: 'SKIPPED',\n  RENEW_TOKEN: 'RENEW_TOKEN',\n  RENEW_PRESIGNED_URL: 'RENEW_PRESIGNED_URL',\n  NOT_FOUND_FILE: 'NOT_FOUND_FILE',\n  NEED_RETRY: 'NEED_RETRY',\n  NEED_RETRY_WITH_LOWER_CONCURRENCY: 'NEED_RETRY_WITH_LOWER_CONCURRENCY'\n};\n\nexports.resultStatus = resultStatus;\n\n// File Header\nfunction FileHeader(digest, contentLength, encryptionMetadata) {\n  return {\n    'digest': digest,\n    'contentLength': contentLength,\n    'encryptionMetadata': encryptionMetadata\n  };\n}\n\nexports.FileHeader = FileHeader;\n\n/**\n * Creates a file utility object.\n *\n * @returns {Object}\n * @constructor\n */\nfunction FileUtil() {\n  /**\n  * Compress file with GZIP.\n  *\n  * @param {String} fileName\n  * @param {String} tmpDir\n  *\n  * @returns {Object}\n  */\n  this.compressFileWithGZIP = async function (fileName, tmpDir) {\n    // Set file name and path for compressed file\n    const baseName = path.basename(fileName);\n    const gzipFileName = path.join(tmpDir, baseName + '_c.gz');\n\n    await new Promise(function (resolve) {\n      // Create gzip object\n      const gzip = zlib.createGzip();\n      // Create stream object for reader and writer\n      const reader = fs.createReadStream(fileName);\n      const writer = fs.createWriteStream(gzipFileName);\n      // Write and compress file\n      const result = reader.pipe(gzip).pipe(writer);\n      result.on('finish', function () {\n        resolve();\n      });\n    });\n\n    await this.normalizeGzipHeader(gzipFileName);\n\n    const fileInfo = fs.statSync(gzipFileName);\n\n    return {\n      name: gzipFileName,\n      size: fileInfo.size\n    };\n  };\n\n  /**\n  * Normalize the header by removing the timestamp.\n  * Note: GZIP in python includes the file name when compressing but\n  * nodejs does not so there is no need to remove it here.\n  * \n  * @param {String} gzipFileName\n  *\n  * @returns {null}\n  */\n  this.normalizeGzipHeader = async function (gzipFileName) {\n    const fd = fs.openSync(gzipFileName, 'rs+');\n\n    // Reset the timestamp in gzip header\n    // Write at position 4\n    fs.writeSync(fd, struct.pack('<L', 0), 0, 1, 4);\n\n    fs.closeSync(fd);\n  };\n\n  /**\n  * Get file digest and size.\n  *\n  * @param {String} fileName\n  *\n  * @returns {Object}\n  */\n  this.getDigestAndSizeForFile = async function (fileName) {\n    const chunkSize = 16 * 4 * 1024;\n\n    const fileInfo = fs.statSync(fileName);\n    const bufferSize = fileInfo.size;\n\n    let buffer = [];\n    await new Promise(function (resolve) {\n      // Create reader stream and set maximum chunk size\n      const infile = fs.createReadStream(fileName, { highWaterMark: chunkSize });\n      infile.on('data', function (chunk) {\n        buffer.push(chunk);\n      });\n      infile.on('close', function () {\n        buffer = Buffer.concat(buffer);\n        resolve();\n      });\n    });\n\n    const hash = crypto.createHash('sha256')\n      .update(buffer)\n      .digest('base64');\n\n    return {\n      digest: hash,\n      size: bufferSize\n    };\n  };\n}\nexports.FileUtil = FileUtil;\n\nexports.getMatchingFilePaths = function (dir, fileName) {\n  const pathWithWildcard = path.join(dir, fileName);\n  const pathWithWildcardDependsOnPlatform = os.platform() === 'win32'\n    ? pathWithWildcard.replace(/\\\\/g, '/')\n    : pathWithWildcard;\n  return glob.sync(pathWithWildcardDependsOnPlatform);\n};\n\n\n/**\n * Checks if the provided file or directory is writable only by the user and os tha file owner is the same as os user. FsPromises can be provided.\n * @param filePath\n * @param expectedMode\n * @param fsPromises\n * @returns {Promise<boolean>} resolves always to true for Windows\n */\nexports.validateOnlyUserReadWritePermissionAndOwner = async function (filePath, fsPromises) {\n  const fsp = fsPromises ? fsPromises : __webpack_require__(/*! fs/promises */ \"fs/promises\");\n  if (os.platform() === 'win32') {\n    return;\n  }\n  try {\n    const stats = await fsp.stat(filePath);\n    const mode = stats.mode;\n    const permission = mode & 0o777;\n\n    //This should be 600 permission, which means the file permission has not been changed by others.\n    const octalPermissions = permission.toString(8);\n    if (octalPermissions === '600') {\n      Logger.getInstance().debug(`Validated that the user has only read and write permission for file: ${filePath}, Permission: ${permission}`);\n    } else {\n      throw new Error(`Invalid file permissions (${octalPermissions} for file ${filePath}). Make sure you have read and write permissions and other users do not have access to it. Please remove the file and re-run the driver.`);\n    }\n\n    const userInfo = os.userInfo();\n    if (stats.uid === userInfo.uid) {\n      Logger.getInstance().debug('Validated file owner');\n    } else {\n      throw new Error(`Invalid file owner for file ${filePath}). Make sure the system user are the owner of the file otherwise please remove the file and re-run the driver.`);\n    }\n  } catch (err) {\n    //When file doesn't exist - return\n    if (err.code === 'ENOENT') {\n      return;\n    } else {\n      throw err;\n    }\n  }\n};\n\n/**\n * Checks if the provided file or directory permissions are correct.\n * @param filePath\n * @param expectedMode\n * @param fsPromises\n * @returns {Promise<boolean>} resolves always to true for Windows\n */\nexports.isFileModeCorrect = async function (filePath, expectedMode, fsPromises) {\n  if (os.platform() === 'win32') {\n    return true;\n  }\n  return await fsPromises.stat(filePath).then((stats) => {\n    // we have to limit the number of LSB bits to 9 with the mask, as the stats.mode starts with the file type,\n    // e.g. the directory with permissions 755 will have stats.mask of 40755.\n    const mask = (1 << 9) - 1;\n    return (stats.mode & mask) === expectedMode;\n  });\n};\n\n/**\n * Checks if the provided file or directory is writable only by the user.\n * @param configFilePath\n * @param fsPromises\n * @returns {Promise<boolean>} resolves always to true for Windows\n */\nexports.isFileNotWritableByGroupOrOthers = async function (configFilePath, fsPromises) {\n  if (os.platform() === 'win32') {\n    return true;\n  }\n  const stats = await fsPromises.stat(configFilePath);\n  return (stats.mode & (1 << 4)) === 0 && (stats.mode & (1 << 1)) === 0;\n};\n\n/**\n * Generate checksum for given text. The algorithm and encoding can be provided.\n * @param text\n * @param algorithm\n * @param encoding\n * @returns {Promise<String>} resolves always to true for Windows\n */\nexports.generateChecksum = function (text, algorithm, encoding) {\n  return crypto\n    .createHash(algorithm || 'sha256')\n    .update(text, 'utf8')\n    .digest(encoding || 'hex')\n    .substring(0, 32); \n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/lib/file_util.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/lib/global_config.js":
/*!*********************************************************!*\
  !*** ./node_modules/snowflake-sdk/lib/global_config.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const os = __webpack_require__(/*! os */ \"os\");\nconst path = __webpack_require__(/*! path */ \"path\");\nconst mkdirp = __webpack_require__(/*! mkdirp */ \"(rsc)/./node_modules/mkdirp/index.js\");\nconst Errors = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/snowflake-sdk/lib/errors.js\");\nconst ErrorCodes = Errors.codes;\nconst Util = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/snowflake-sdk/lib/util.js\");\nconst Logger = __webpack_require__(/*! ./logger */ \"(rsc)/./node_modules/snowflake-sdk/lib/logger.js\");\nconst { XMLParser, XMLValidator } = __webpack_require__(/*! fast-xml-parser */ \"(rsc)/./node_modules/fast-xml-parser/src/fxp.js\");\n\nlet disableOCSPChecks = false;\n\n/**\n * Updates the value of the 'disableOCSPChecks' parameter.\n *\n * @param {boolean} value\n */\nexports.setDisableOCSPChecks = function (value) {\n  // validate input\n  Errors.assertInternal(Util.isBoolean(value));\n\n  disableOCSPChecks = value;\n};\n\n/**\n * Returns the value of the 'disableOCSPChecks' parameter.\n *\n * @returns {boolean}\n */\nexports.isOCSPChecksDisabled = function () {\n  return disableOCSPChecks;\n};\n\nlet ocspFailOpen = true;\nexports.ocspFailOpen = ocspFailOpen;\n\n/**\n * Updates the value of the 'ocspFailOpen' parameter.\n *\n * @param {boolean} value\n */\nexports.setOcspFailOpen = function (value) {\n  // validate input\n  Errors.assertInternal(Util.isBoolean(value));\n\n  ocspFailOpen = value;\n};\n\n/**\n * Returns the value of the 'ocspFailOpen' parameter.\n *\n * @param {boolean} value\n */\nexports.getOcspFailOpen = function () {\n  return ocspFailOpen;\n};\n\nconst ocspModes = {\n  FAIL_CLOSED: 'FAIL_CLOSED',\n  FAIL_OPEN: 'FAIL_OPEN',\n  INSECURE: 'INSECURE'\n};\nexports.ocspModes = ocspModes;\n\n/**\n * Returns the OCSP mode\n *\n * @returns {string}\n */\nexports.getOcspMode = function () {\n  if (disableOCSPChecks) {\n    return ocspModes.INSECURE;\n  } else if (!ocspFailOpen) {\n    return ocspModes.FAIL_CLOSED;\n  }\n  return ocspModes.FAIL_OPEN;\n};\n\n/**\n * Returns the upper limit for number of entries we can have in the OCSP response cache.\n *\n * @returns {number}\n */\nexports.getOcspResponseCacheSizeLimit = function () {\n  return 1000;\n};\n\n/**\n * Returns the maximum time in seconds that entries can live in the OCSP\n * response cache.\n *\n * @returns {number}\n */\nexports.getOcspResponseCacheMaxAge = function () {\n  // 24 hours, in seconds\n  // It was in millionseconds before but the timestamp we save in\n  // cache file was in seconds. Compare that with max age in millionseconds\n  // would makes the cache never expire.\n  // change max age here because customer would have local cache file exist\n  // already and we need to keep that valid with new version of the driver.\n  // use small value for test only\n  let maxage = Number(process.env.SF_OCSP_TEST_CACHE_MAXAGE) || 86400;\n  if ((maxage > 86400) || (maxage <= 0)) {\n    maxage = 86400;\n  }\n  return maxage;\n};\n\n/**\n * Creates a cache directory.\n *\n * @returns {string}\n */\nexports.mkdirCacheDir = function () {\n  let cacheRootDir = process.env.SF_OCSP_RESPONSE_CACHE_DIR;\n  if (!Util.exists(cacheRootDir)) {\n    cacheRootDir = os.homedir();\n  }\n  if (!Util.exists(cacheRootDir)) {\n    cacheRootDir = os.tmpdir(); // fallback to TMP if user home doesn't exist.\n  }\n\n  let cacheDir;\n  const platform = os.platform();\n  if (platform === 'darwin') {\n    cacheDir = path.join(cacheRootDir, 'Library', 'Caches', 'Snowflake');\n  } else if (platform === 'win32') {\n    cacheDir = path.join(cacheRootDir, 'AppData', 'Local', 'Snowflake', 'Caches');\n  } else {\n    // linux\n    cacheDir = path.join(cacheRootDir, '.cache', 'snowflake');\n  }\n  try {\n    mkdirp.sync(cacheDir);\n  } catch (e) {\n    Logger.getInstance().debug('Failed to create a cache directory %s, err: %s', cacheDir, e);\n  }\n  return cacheDir;\n};\n\nconst rest = {\n  HTTPS_PORT: 443,\n  HTTPS_PROTOCOL: 'https'\n};\nexports.rest = rest;\n\n// The default JSON parser\nexports.jsonColumnVariantParser = rawColumnValue => new Function(`return (${rawColumnValue});`)();\n\n/**\n * Updates the value of the 'jsonColumnVariantParser' parameter.\n *\n * @param {function: (rawColumnValue: string) => any} value\n */\nexports.setJsonColumnVariantParser = function (value){\n  // validate input\n  Errors.assertInternal(Util.isFunction(value));\n\n  exports.jsonColumnVariantParser = value;\n};\n\n/**\n * As a default we set parameters values identical like in fast-xml-parser lib defaults\n * thus preserving backward compatibility if customer doesn't set custom configuration\n * and give possibility to set only part of parameters\n */\nconst defaultXmlParserConfiguration = {\n  ignoreAttributes: true,\n  alwaysCreateTextNode: false,\n  attributeNamePrefix: '@_',\n  attributesGroupName: false\n};\n\n// The default XML parser\nexports.xmlColumnVariantParser = createXmlColumnVariantParser(defaultXmlParserConfiguration);\n\n/**\n * Updates the value of the 'xmlColumnVariantParser' parameter.\n * Return fucntion with custom XmlParser configuration or default if not set.\n *\n * @param {function: (rawColumnValue: string) => any} value\n */\nexports.setXmlColumnVariantParser = function (value){\n  // validate input\n  Errors.assertInternal(Util.isFunction(value));\n\n  exports.xmlColumnVariantParser = value;\n};\n/**\n * Create and update the 'xmlColumnVariantParser' parameter using custom parser configuration.\n *\n * @param {function: (rawColumnValue: string) => any} params\n */\nexports.createXmlColumnVariantParserWithParameters = function (params){\n  exports.xmlColumnVariantParser = createXmlColumnVariantParser(params);\n};\n\n/**\n * Create function to parse XML using XMlParser with custom configuration.\n * Parametrs that you can override:\n *  ignoreAttributes: true,\n *  attributeNamePrefix: '@_',\n *  attributesGroupName: false,\n *  alwaysCreateTextNode: false\n *\n * @param {object} config\n */\nfunction createXmlColumnVariantParser(config) {\n  let parserConfiguration;\n  if (!Util.isObject(config)) {\n    parserConfiguration = defaultXmlParserConfiguration;\n  } else {\n    parserConfiguration = {\n      ignoreAttributes: Util.exists(config.ignoreAttributes) ? config.ignoreAttributes : defaultXmlParserConfiguration.ignoreAttributes,\n      attributeNamePrefix: Util.exists(config.attributeNamePrefix) ? config.attributeNamePrefix : defaultXmlParserConfiguration.attributeNamePrefix,\n      //For attributesGroupName null value is acceptable and mean no grouping\n      attributesGroupName: config.attributesGroupName !== undefined ? config.attributesGroupName : defaultXmlParserConfiguration.attributesGroupName,\n      alwaysCreateTextNode: Util.exists(config.alwaysCreateTextNode) ? config.alwaysCreateTextNode : defaultXmlParserConfiguration.alwaysCreateTextNode,\n    };\n  }\n  return rawColumnValue => {\n    // check if raw string is in XML format\n    // ensure each tag is enclosed and all attributes and elements are valid\n    // XMLValidator.validate returns true if valid, returns an error if invalid\n    const validateResult = XMLValidator.validate(rawColumnValue);\n    if (validateResult === true) {\n      // use XML parser\n      return new XMLParser(parserConfiguration).parse(rawColumnValue);\n    } else {\n      throw new Error(validateResult.err.msg);\n    }\n  };\n}\n\nlet keepAlive = true;\n\n/**\n * Updates the value of the 'keepAlive' parameter.\n *\n * @param {boolean} value\n */\nexports.setKeepAlive = function (value) {\n  Errors.assertInternal(Util.isBoolean(value));\n  keepAlive = value;\n};\n\n/**\n * Returns the overriden value of 'keepAlive' or default if not set. Default value is true\n *\n * @param {boolean} value\n */\nexports.getKeepAlive = function () {\n  return keepAlive;\n};\n\nlet credentialManager = null;\n\nexports.setCustomCredentialManager = function (customCredentialManager) {\n  Errors.checkArgumentValid(Util.checkValidCustomCredentialManager(customCredentialManager),\n    ErrorCodes.ERR_GLOBAL_CONFIGURE_INVALID_CUSTOM_CREDENTIAL_MANAGER);\n  \n  credentialManager =  customCredentialManager;\n  Logger.getInstance().info('Custom credential manager is set by a user.');\n};\n\nexports.getCredentialManager = function () { \n  return credentialManager;  \n};\n\nlet envProxy = true;\nexports.setEnvProxy = function (value) {\n  Errors.assertInternal(Util.isBoolean(value));\n  envProxy = value;\n};\n\nexports.isEnvProxyActive = function () {\n  return envProxy;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9saWIvZ2xvYmFsX2NvbmZpZy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxXQUFXLG1CQUFPLENBQUMsY0FBSTtBQUN2QixhQUFhLG1CQUFPLENBQUMsa0JBQU07QUFDM0IsZUFBZSxtQkFBTyxDQUFDLG9EQUFRO0FBQy9CLGVBQWUsbUJBQU8sQ0FBQyxrRUFBVTtBQUNqQztBQUNBLGFBQWEsbUJBQU8sQ0FBQyw4REFBUTtBQUM3QixlQUFlLG1CQUFPLENBQUMsa0VBQVU7QUFDakMsUUFBUSwwQkFBMEIsRUFBRSxtQkFBTyxDQUFDLHdFQUFpQjs7QUFFN0Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQTs7QUFFQTtBQUNBLG9CQUFvQjs7QUFFcEI7QUFDQTtBQUNBO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFNBQVM7QUFDcEI7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCOztBQUVqQjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxxQ0FBcUM7QUFDckM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLGtDQUFrQztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTs7QUFFWjtBQUNBLCtCQUErQiw2Q0FBNkMsZUFBZSxFQUFFOztBQUU3RjtBQUNBO0FBQ0E7QUFDQSxXQUFXLDJDQUEyQztBQUN0RDtBQUNBLGtDQUFrQztBQUNsQztBQUNBOztBQUVBLEVBQUUsK0JBQStCO0FBQ2pDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw4QkFBOEI7O0FBRTlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVywyQ0FBMkM7QUFDdEQ7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQTs7QUFFQSxFQUFFLDhCQUE4QjtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsMkNBQTJDO0FBQ3REO0FBQ0Esa0RBQWtEO0FBQ2xELEVBQUUsOEJBQThCO0FBQ2hDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFNBQVM7QUFDcEI7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsU0FBUztBQUNwQjtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBOztBQUVBOztBQUVBLGtDQUFrQztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsNEJBQTRCO0FBQzVCO0FBQ0E7O0FBRUE7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBOztBQUVBLHdCQUF3QjtBQUN4QjtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvdmljdG9yd2lsc29uL0Rlc2t0b3AvcHJvamVjdHMvRVpWaXovbm9kZV9tb2R1bGVzL3Nub3dmbGFrZS1zZGsvbGliL2dsb2JhbF9jb25maWcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3Qgb3MgPSByZXF1aXJlKCdvcycpO1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IG1rZGlycCA9IHJlcXVpcmUoJ21rZGlycCcpO1xuY29uc3QgRXJyb3JzID0gcmVxdWlyZSgnLi9lcnJvcnMnKTtcbmNvbnN0IEVycm9yQ29kZXMgPSBFcnJvcnMuY29kZXM7XG5jb25zdCBVdGlsID0gcmVxdWlyZSgnLi91dGlsJyk7XG5jb25zdCBMb2dnZXIgPSByZXF1aXJlKCcuL2xvZ2dlcicpO1xuY29uc3QgeyBYTUxQYXJzZXIsIFhNTFZhbGlkYXRvciB9ID0gcmVxdWlyZSgnZmFzdC14bWwtcGFyc2VyJyk7XG5cbmxldCBkaXNhYmxlT0NTUENoZWNrcyA9IGZhbHNlO1xuXG4vKipcbiAqIFVwZGF0ZXMgdGhlIHZhbHVlIG9mIHRoZSAnZGlzYWJsZU9DU1BDaGVja3MnIHBhcmFtZXRlci5cbiAqXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHZhbHVlXG4gKi9cbmV4cG9ydHMuc2V0RGlzYWJsZU9DU1BDaGVja3MgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgLy8gdmFsaWRhdGUgaW5wdXRcbiAgRXJyb3JzLmFzc2VydEludGVybmFsKFV0aWwuaXNCb29sZWFuKHZhbHVlKSk7XG5cbiAgZGlzYWJsZU9DU1BDaGVja3MgPSB2YWx1ZTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgdmFsdWUgb2YgdGhlICdkaXNhYmxlT0NTUENoZWNrcycgcGFyYW1ldGVyLlxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5leHBvcnRzLmlzT0NTUENoZWNrc0Rpc2FibGVkID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZGlzYWJsZU9DU1BDaGVja3M7XG59O1xuXG5sZXQgb2NzcEZhaWxPcGVuID0gdHJ1ZTtcbmV4cG9ydHMub2NzcEZhaWxPcGVuID0gb2NzcEZhaWxPcGVuO1xuXG4vKipcbiAqIFVwZGF0ZXMgdGhlIHZhbHVlIG9mIHRoZSAnb2NzcEZhaWxPcGVuJyBwYXJhbWV0ZXIuXG4gKlxuICogQHBhcmFtIHtib29sZWFufSB2YWx1ZVxuICovXG5leHBvcnRzLnNldE9jc3BGYWlsT3BlbiA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAvLyB2YWxpZGF0ZSBpbnB1dFxuICBFcnJvcnMuYXNzZXJ0SW50ZXJuYWwoVXRpbC5pc0Jvb2xlYW4odmFsdWUpKTtcblxuICBvY3NwRmFpbE9wZW4gPSB2YWx1ZTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgdmFsdWUgb2YgdGhlICdvY3NwRmFpbE9wZW4nIHBhcmFtZXRlci5cbiAqXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHZhbHVlXG4gKi9cbmV4cG9ydHMuZ2V0T2NzcEZhaWxPcGVuID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gb2NzcEZhaWxPcGVuO1xufTtcblxuY29uc3Qgb2NzcE1vZGVzID0ge1xuICBGQUlMX0NMT1NFRDogJ0ZBSUxfQ0xPU0VEJyxcbiAgRkFJTF9PUEVOOiAnRkFJTF9PUEVOJyxcbiAgSU5TRUNVUkU6ICdJTlNFQ1VSRSdcbn07XG5leHBvcnRzLm9jc3BNb2RlcyA9IG9jc3BNb2RlcztcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBPQ1NQIG1vZGVcbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5leHBvcnRzLmdldE9jc3BNb2RlID0gZnVuY3Rpb24gKCkge1xuICBpZiAoZGlzYWJsZU9DU1BDaGVja3MpIHtcbiAgICByZXR1cm4gb2NzcE1vZGVzLklOU0VDVVJFO1xuICB9IGVsc2UgaWYgKCFvY3NwRmFpbE9wZW4pIHtcbiAgICByZXR1cm4gb2NzcE1vZGVzLkZBSUxfQ0xPU0VEO1xuICB9XG4gIHJldHVybiBvY3NwTW9kZXMuRkFJTF9PUEVOO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSB1cHBlciBsaW1pdCBmb3IgbnVtYmVyIG9mIGVudHJpZXMgd2UgY2FuIGhhdmUgaW4gdGhlIE9DU1AgcmVzcG9uc2UgY2FjaGUuXG4gKlxuICogQHJldHVybnMge251bWJlcn1cbiAqL1xuZXhwb3J0cy5nZXRPY3NwUmVzcG9uc2VDYWNoZVNpemVMaW1pdCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIDEwMDA7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIG1heGltdW0gdGltZSBpbiBzZWNvbmRzIHRoYXQgZW50cmllcyBjYW4gbGl2ZSBpbiB0aGUgT0NTUFxuICogcmVzcG9uc2UgY2FjaGUuXG4gKlxuICogQHJldHVybnMge251bWJlcn1cbiAqL1xuZXhwb3J0cy5nZXRPY3NwUmVzcG9uc2VDYWNoZU1heEFnZSA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gMjQgaG91cnMsIGluIHNlY29uZHNcbiAgLy8gSXQgd2FzIGluIG1pbGxpb25zZWNvbmRzIGJlZm9yZSBidXQgdGhlIHRpbWVzdGFtcCB3ZSBzYXZlIGluXG4gIC8vIGNhY2hlIGZpbGUgd2FzIGluIHNlY29uZHMuIENvbXBhcmUgdGhhdCB3aXRoIG1heCBhZ2UgaW4gbWlsbGlvbnNlY29uZHNcbiAgLy8gd291bGQgbWFrZXMgdGhlIGNhY2hlIG5ldmVyIGV4cGlyZS5cbiAgLy8gY2hhbmdlIG1heCBhZ2UgaGVyZSBiZWNhdXNlIGN1c3RvbWVyIHdvdWxkIGhhdmUgbG9jYWwgY2FjaGUgZmlsZSBleGlzdFxuICAvLyBhbHJlYWR5IGFuZCB3ZSBuZWVkIHRvIGtlZXAgdGhhdCB2YWxpZCB3aXRoIG5ldyB2ZXJzaW9uIG9mIHRoZSBkcml2ZXIuXG4gIC8vIHVzZSBzbWFsbCB2YWx1ZSBmb3IgdGVzdCBvbmx5XG4gIGxldCBtYXhhZ2UgPSBOdW1iZXIocHJvY2Vzcy5lbnYuU0ZfT0NTUF9URVNUX0NBQ0hFX01BWEFHRSkgfHwgODY0MDA7XG4gIGlmICgobWF4YWdlID4gODY0MDApIHx8IChtYXhhZ2UgPD0gMCkpIHtcbiAgICBtYXhhZ2UgPSA4NjQwMDtcbiAgfVxuICByZXR1cm4gbWF4YWdlO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgY2FjaGUgZGlyZWN0b3J5LlxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmV4cG9ydHMubWtkaXJDYWNoZURpciA9IGZ1bmN0aW9uICgpIHtcbiAgbGV0IGNhY2hlUm9vdERpciA9IHByb2Nlc3MuZW52LlNGX09DU1BfUkVTUE9OU0VfQ0FDSEVfRElSO1xuICBpZiAoIVV0aWwuZXhpc3RzKGNhY2hlUm9vdERpcikpIHtcbiAgICBjYWNoZVJvb3REaXIgPSBvcy5ob21lZGlyKCk7XG4gIH1cbiAgaWYgKCFVdGlsLmV4aXN0cyhjYWNoZVJvb3REaXIpKSB7XG4gICAgY2FjaGVSb290RGlyID0gb3MudG1wZGlyKCk7IC8vIGZhbGxiYWNrIHRvIFRNUCBpZiB1c2VyIGhvbWUgZG9lc24ndCBleGlzdC5cbiAgfVxuXG4gIGxldCBjYWNoZURpcjtcbiAgY29uc3QgcGxhdGZvcm0gPSBvcy5wbGF0Zm9ybSgpO1xuICBpZiAocGxhdGZvcm0gPT09ICdkYXJ3aW4nKSB7XG4gICAgY2FjaGVEaXIgPSBwYXRoLmpvaW4oY2FjaGVSb290RGlyLCAnTGlicmFyeScsICdDYWNoZXMnLCAnU25vd2ZsYWtlJyk7XG4gIH0gZWxzZSBpZiAocGxhdGZvcm0gPT09ICd3aW4zMicpIHtcbiAgICBjYWNoZURpciA9IHBhdGguam9pbihjYWNoZVJvb3REaXIsICdBcHBEYXRhJywgJ0xvY2FsJywgJ1Nub3dmbGFrZScsICdDYWNoZXMnKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBsaW51eFxuICAgIGNhY2hlRGlyID0gcGF0aC5qb2luKGNhY2hlUm9vdERpciwgJy5jYWNoZScsICdzbm93Zmxha2UnKTtcbiAgfVxuICB0cnkge1xuICAgIG1rZGlycC5zeW5jKGNhY2hlRGlyKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIExvZ2dlci5nZXRJbnN0YW5jZSgpLmRlYnVnKCdGYWlsZWQgdG8gY3JlYXRlIGEgY2FjaGUgZGlyZWN0b3J5ICVzLCBlcnI6ICVzJywgY2FjaGVEaXIsIGUpO1xuICB9XG4gIHJldHVybiBjYWNoZURpcjtcbn07XG5cbmNvbnN0IHJlc3QgPSB7XG4gIEhUVFBTX1BPUlQ6IDQ0MyxcbiAgSFRUUFNfUFJPVE9DT0w6ICdodHRwcydcbn07XG5leHBvcnRzLnJlc3QgPSByZXN0O1xuXG4vLyBUaGUgZGVmYXVsdCBKU09OIHBhcnNlclxuZXhwb3J0cy5qc29uQ29sdW1uVmFyaWFudFBhcnNlciA9IHJhd0NvbHVtblZhbHVlID0+IG5ldyBGdW5jdGlvbihgcmV0dXJuICgke3Jhd0NvbHVtblZhbHVlfSk7YCkoKTtcblxuLyoqXG4gKiBVcGRhdGVzIHRoZSB2YWx1ZSBvZiB0aGUgJ2pzb25Db2x1bW5WYXJpYW50UGFyc2VyJyBwYXJhbWV0ZXIuXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbjogKHJhd0NvbHVtblZhbHVlOiBzdHJpbmcpID0+IGFueX0gdmFsdWVcbiAqL1xuZXhwb3J0cy5zZXRKc29uQ29sdW1uVmFyaWFudFBhcnNlciA9IGZ1bmN0aW9uICh2YWx1ZSl7XG4gIC8vIHZhbGlkYXRlIGlucHV0XG4gIEVycm9ycy5hc3NlcnRJbnRlcm5hbChVdGlsLmlzRnVuY3Rpb24odmFsdWUpKTtcblxuICBleHBvcnRzLmpzb25Db2x1bW5WYXJpYW50UGFyc2VyID0gdmFsdWU7XG59O1xuXG4vKipcbiAqIEFzIGEgZGVmYXVsdCB3ZSBzZXQgcGFyYW1ldGVycyB2YWx1ZXMgaWRlbnRpY2FsIGxpa2UgaW4gZmFzdC14bWwtcGFyc2VyIGxpYiBkZWZhdWx0c1xuICogdGh1cyBwcmVzZXJ2aW5nIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkgaWYgY3VzdG9tZXIgZG9lc24ndCBzZXQgY3VzdG9tIGNvbmZpZ3VyYXRpb25cbiAqIGFuZCBnaXZlIHBvc3NpYmlsaXR5IHRvIHNldCBvbmx5IHBhcnQgb2YgcGFyYW1ldGVyc1xuICovXG5jb25zdCBkZWZhdWx0WG1sUGFyc2VyQ29uZmlndXJhdGlvbiA9IHtcbiAgaWdub3JlQXR0cmlidXRlczogdHJ1ZSxcbiAgYWx3YXlzQ3JlYXRlVGV4dE5vZGU6IGZhbHNlLFxuICBhdHRyaWJ1dGVOYW1lUHJlZml4OiAnQF8nLFxuICBhdHRyaWJ1dGVzR3JvdXBOYW1lOiBmYWxzZVxufTtcblxuLy8gVGhlIGRlZmF1bHQgWE1MIHBhcnNlclxuZXhwb3J0cy54bWxDb2x1bW5WYXJpYW50UGFyc2VyID0gY3JlYXRlWG1sQ29sdW1uVmFyaWFudFBhcnNlcihkZWZhdWx0WG1sUGFyc2VyQ29uZmlndXJhdGlvbik7XG5cbi8qKlxuICogVXBkYXRlcyB0aGUgdmFsdWUgb2YgdGhlICd4bWxDb2x1bW5WYXJpYW50UGFyc2VyJyBwYXJhbWV0ZXIuXG4gKiBSZXR1cm4gZnVjbnRpb24gd2l0aCBjdXN0b20gWG1sUGFyc2VyIGNvbmZpZ3VyYXRpb24gb3IgZGVmYXVsdCBpZiBub3Qgc2V0LlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb246IChyYXdDb2x1bW5WYWx1ZTogc3RyaW5nKSA9PiBhbnl9IHZhbHVlXG4gKi9cbmV4cG9ydHMuc2V0WG1sQ29sdW1uVmFyaWFudFBhcnNlciA9IGZ1bmN0aW9uICh2YWx1ZSl7XG4gIC8vIHZhbGlkYXRlIGlucHV0XG4gIEVycm9ycy5hc3NlcnRJbnRlcm5hbChVdGlsLmlzRnVuY3Rpb24odmFsdWUpKTtcblxuICBleHBvcnRzLnhtbENvbHVtblZhcmlhbnRQYXJzZXIgPSB2YWx1ZTtcbn07XG4vKipcbiAqIENyZWF0ZSBhbmQgdXBkYXRlIHRoZSAneG1sQ29sdW1uVmFyaWFudFBhcnNlcicgcGFyYW1ldGVyIHVzaW5nIGN1c3RvbSBwYXJzZXIgY29uZmlndXJhdGlvbi5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9uOiAocmF3Q29sdW1uVmFsdWU6IHN0cmluZykgPT4gYW55fSBwYXJhbXNcbiAqL1xuZXhwb3J0cy5jcmVhdGVYbWxDb2x1bW5WYXJpYW50UGFyc2VyV2l0aFBhcmFtZXRlcnMgPSBmdW5jdGlvbiAocGFyYW1zKXtcbiAgZXhwb3J0cy54bWxDb2x1bW5WYXJpYW50UGFyc2VyID0gY3JlYXRlWG1sQ29sdW1uVmFyaWFudFBhcnNlcihwYXJhbXMpO1xufTtcblxuLyoqXG4gKiBDcmVhdGUgZnVuY3Rpb24gdG8gcGFyc2UgWE1MIHVzaW5nIFhNbFBhcnNlciB3aXRoIGN1c3RvbSBjb25maWd1cmF0aW9uLlxuICogUGFyYW1ldHJzIHRoYXQgeW91IGNhbiBvdmVycmlkZTpcbiAqICBpZ25vcmVBdHRyaWJ1dGVzOiB0cnVlLFxuICogIGF0dHJpYnV0ZU5hbWVQcmVmaXg6ICdAXycsXG4gKiAgYXR0cmlidXRlc0dyb3VwTmFtZTogZmFsc2UsXG4gKiAgYWx3YXlzQ3JlYXRlVGV4dE5vZGU6IGZhbHNlXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZ1xuICovXG5mdW5jdGlvbiBjcmVhdGVYbWxDb2x1bW5WYXJpYW50UGFyc2VyKGNvbmZpZykge1xuICBsZXQgcGFyc2VyQ29uZmlndXJhdGlvbjtcbiAgaWYgKCFVdGlsLmlzT2JqZWN0KGNvbmZpZykpIHtcbiAgICBwYXJzZXJDb25maWd1cmF0aW9uID0gZGVmYXVsdFhtbFBhcnNlckNvbmZpZ3VyYXRpb247XG4gIH0gZWxzZSB7XG4gICAgcGFyc2VyQ29uZmlndXJhdGlvbiA9IHtcbiAgICAgIGlnbm9yZUF0dHJpYnV0ZXM6IFV0aWwuZXhpc3RzKGNvbmZpZy5pZ25vcmVBdHRyaWJ1dGVzKSA/IGNvbmZpZy5pZ25vcmVBdHRyaWJ1dGVzIDogZGVmYXVsdFhtbFBhcnNlckNvbmZpZ3VyYXRpb24uaWdub3JlQXR0cmlidXRlcyxcbiAgICAgIGF0dHJpYnV0ZU5hbWVQcmVmaXg6IFV0aWwuZXhpc3RzKGNvbmZpZy5hdHRyaWJ1dGVOYW1lUHJlZml4KSA/IGNvbmZpZy5hdHRyaWJ1dGVOYW1lUHJlZml4IDogZGVmYXVsdFhtbFBhcnNlckNvbmZpZ3VyYXRpb24uYXR0cmlidXRlTmFtZVByZWZpeCxcbiAgICAgIC8vRm9yIGF0dHJpYnV0ZXNHcm91cE5hbWUgbnVsbCB2YWx1ZSBpcyBhY2NlcHRhYmxlIGFuZCBtZWFuIG5vIGdyb3VwaW5nXG4gICAgICBhdHRyaWJ1dGVzR3JvdXBOYW1lOiBjb25maWcuYXR0cmlidXRlc0dyb3VwTmFtZSAhPT0gdW5kZWZpbmVkID8gY29uZmlnLmF0dHJpYnV0ZXNHcm91cE5hbWUgOiBkZWZhdWx0WG1sUGFyc2VyQ29uZmlndXJhdGlvbi5hdHRyaWJ1dGVzR3JvdXBOYW1lLFxuICAgICAgYWx3YXlzQ3JlYXRlVGV4dE5vZGU6IFV0aWwuZXhpc3RzKGNvbmZpZy5hbHdheXNDcmVhdGVUZXh0Tm9kZSkgPyBjb25maWcuYWx3YXlzQ3JlYXRlVGV4dE5vZGUgOiBkZWZhdWx0WG1sUGFyc2VyQ29uZmlndXJhdGlvbi5hbHdheXNDcmVhdGVUZXh0Tm9kZSxcbiAgICB9O1xuICB9XG4gIHJldHVybiByYXdDb2x1bW5WYWx1ZSA9PiB7XG4gICAgLy8gY2hlY2sgaWYgcmF3IHN0cmluZyBpcyBpbiBYTUwgZm9ybWF0XG4gICAgLy8gZW5zdXJlIGVhY2ggdGFnIGlzIGVuY2xvc2VkIGFuZCBhbGwgYXR0cmlidXRlcyBhbmQgZWxlbWVudHMgYXJlIHZhbGlkXG4gICAgLy8gWE1MVmFsaWRhdG9yLnZhbGlkYXRlIHJldHVybnMgdHJ1ZSBpZiB2YWxpZCwgcmV0dXJucyBhbiBlcnJvciBpZiBpbnZhbGlkXG4gICAgY29uc3QgdmFsaWRhdGVSZXN1bHQgPSBYTUxWYWxpZGF0b3IudmFsaWRhdGUocmF3Q29sdW1uVmFsdWUpO1xuICAgIGlmICh2YWxpZGF0ZVJlc3VsdCA9PT0gdHJ1ZSkge1xuICAgICAgLy8gdXNlIFhNTCBwYXJzZXJcbiAgICAgIHJldHVybiBuZXcgWE1MUGFyc2VyKHBhcnNlckNvbmZpZ3VyYXRpb24pLnBhcnNlKHJhd0NvbHVtblZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHZhbGlkYXRlUmVzdWx0LmVyci5tc2cpO1xuICAgIH1cbiAgfTtcbn1cblxubGV0IGtlZXBBbGl2ZSA9IHRydWU7XG5cbi8qKlxuICogVXBkYXRlcyB0aGUgdmFsdWUgb2YgdGhlICdrZWVwQWxpdmUnIHBhcmFtZXRlci5cbiAqXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHZhbHVlXG4gKi9cbmV4cG9ydHMuc2V0S2VlcEFsaXZlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIEVycm9ycy5hc3NlcnRJbnRlcm5hbChVdGlsLmlzQm9vbGVhbih2YWx1ZSkpO1xuICBrZWVwQWxpdmUgPSB2YWx1ZTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgb3ZlcnJpZGVuIHZhbHVlIG9mICdrZWVwQWxpdmUnIG9yIGRlZmF1bHQgaWYgbm90IHNldC4gRGVmYXVsdCB2YWx1ZSBpcyB0cnVlXG4gKlxuICogQHBhcmFtIHtib29sZWFufSB2YWx1ZVxuICovXG5leHBvcnRzLmdldEtlZXBBbGl2ZSA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGtlZXBBbGl2ZTtcbn07XG5cbmxldCBjcmVkZW50aWFsTWFuYWdlciA9IG51bGw7XG5cbmV4cG9ydHMuc2V0Q3VzdG9tQ3JlZGVudGlhbE1hbmFnZXIgPSBmdW5jdGlvbiAoY3VzdG9tQ3JlZGVudGlhbE1hbmFnZXIpIHtcbiAgRXJyb3JzLmNoZWNrQXJndW1lbnRWYWxpZChVdGlsLmNoZWNrVmFsaWRDdXN0b21DcmVkZW50aWFsTWFuYWdlcihjdXN0b21DcmVkZW50aWFsTWFuYWdlciksXG4gICAgRXJyb3JDb2Rlcy5FUlJfR0xPQkFMX0NPTkZJR1VSRV9JTlZBTElEX0NVU1RPTV9DUkVERU5USUFMX01BTkFHRVIpO1xuICBcbiAgY3JlZGVudGlhbE1hbmFnZXIgPSAgY3VzdG9tQ3JlZGVudGlhbE1hbmFnZXI7XG4gIExvZ2dlci5nZXRJbnN0YW5jZSgpLmluZm8oJ0N1c3RvbSBjcmVkZW50aWFsIG1hbmFnZXIgaXMgc2V0IGJ5IGEgdXNlci4nKTtcbn07XG5cbmV4cG9ydHMuZ2V0Q3JlZGVudGlhbE1hbmFnZXIgPSBmdW5jdGlvbiAoKSB7IFxuICByZXR1cm4gY3JlZGVudGlhbE1hbmFnZXI7ICBcbn07XG5cbmxldCBlbnZQcm94eSA9IHRydWU7XG5leHBvcnRzLnNldEVudlByb3h5ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIEVycm9ycy5hc3NlcnRJbnRlcm5hbChVdGlsLmlzQm9vbGVhbih2YWx1ZSkpO1xuICBlbnZQcm94eSA9IHZhbHVlO1xufTtcblxuZXhwb3J0cy5pc0VudlByb3h5QWN0aXZlID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZW52UHJveHk7XG59OyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/lib/global_config.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/lib/http/base.js":
/*!*****************************************************!*\
  !*** ./node_modules/snowflake-sdk/lib/http/base.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const zlib = __webpack_require__(/*! zlib */ \"zlib\");\nconst Util = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/snowflake-sdk/lib/util.js\");\nconst Logger = __webpack_require__(/*! ../logger */ \"(rsc)/./node_modules/snowflake-sdk/lib/logger.js\");\nconst ExecutionTimer = __webpack_require__(/*! ../logger/execution_timer */ \"(rsc)/./node_modules/snowflake-sdk/lib/logger/execution_timer.js\");\nconst axios = __webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/dist/node/axios.cjs\");\nconst URL = (__webpack_require__(/*! node:url */ \"node:url\").URL);\nconst requestUtil = __webpack_require__(/*! ./request_util */ \"(rsc)/./node_modules/snowflake-sdk/lib/http/request_util.js\");\n\nconst DEFAULT_REQUEST_TIMEOUT = 360000;\n\n/**\n * Creates a new HTTP client.\n *\n * @param connectionConfig\n * @constructor\n */\nfunction HttpClient(connectionConfig) {\n  // save the connection config\n  Logger.getInstance().trace('Initializing base HttpClient with Connection Config[%s]',\n    connectionConfig.describeIdentityAttributes());\n  this._connectionConfig = connectionConfig;\n}\n\n/**\n * Issues an HTTP request.\n *\n * @param {Object} options\n *\n * @returns {Object} an object representing the request that was issued.\n */\nHttpClient.prototype.request = function (options) {\n  Logger.getInstance().trace('Request%s - preparing for sending.', requestUtil.describeRequestFromOptions(options));\n\n  const requestObject = {};\n  const requestAbortController = new AbortController();\n  const requestHandlers = { signal: requestAbortController.signal };\n  const requestOptions = prepareRequestOptions.call(this, options, requestHandlers);\n\n  let sendRequest = async function sendRequest() {\n    Logger.getInstance().trace('Request%s - sending.', requestUtil.describeRequestFromOptions(requestOptions));\n    const timer = new ExecutionTimer().start();\n    requestObject.requestPromise = axios.request(requestOptions).then(response => {\n      const httpResponseTime = timer.getDuration();\n      Logger.getInstance().debug('Request%s - response received after %s milliseconds with status %s.', requestUtil.describeRequestFromOptions(requestOptions), httpResponseTime, response.status);\n      sanitizeAxiosResponse(response);\n      if (Util.isFunction(options.callback)) {\n        Logger.getInstance().trace('Request%s - calling callback function.', requestUtil.describeRequestFromOptions(requestOptions));\n        return options.callback(null, normalizeResponse(response), response.data);\n      } else {\n        Logger.getInstance().trace('Request%s - callback function was not provided.', requestUtil.describeRequestFromOptions(requestOptions));\n        return null;\n      }\n    }).catch(err => {\n      const httpResponseTime = timer.getDuration();\n      Logger.getInstance().debug('Request%s - failed after %s milliseconds.', requestUtil.describeRequestFromOptions(requestOptions), httpResponseTime);\n      sanitizeAxiosError(err);\n      if (Util.isFunction(options.callback)) {\n        if (err.response) { // axios returns error for not 2xx responses - let's unwrap it\n          Logger.getInstance().trace('Request%s - calling callback function for error from response. Received code: ', requestUtil.describeRequestFromOptions(requestOptions), err.response.status);\n          options.callback(null, normalizeResponse(err.response), err.response.data);\n        } else {\n          Logger.getInstance().trace('Request%s - calling callback function for error without response.', requestUtil.describeRequestFromOptions(requestOptions));\n          options.callback(err, normalizeResponse(null), null);\n        }\n        return null;\n      } else {\n        Logger.getInstance().warn('Request%s - callback function was not provided. Error will be re-raised.', requestUtil.describeRequestFromOptions(requestOptions));\n        throw err;\n      }\n    });\n  };\n  sendRequest = sendRequest.bind(this);\n\n  Logger.getInstance().trace('Request%s - issued for the next tick.', requestUtil.describeRequestFromOptions(requestOptions));\n  process.nextTick(sendRequest);\n\n  // return an externalized request object that only contains\n  // methods we're comfortable exposing to the outside world\n  requestObject.abort = function () {\n    if (requestAbortController) {\n      Logger.getInstance().trace('Request%s - aborting.', requestUtil.describeRequestFromOptions(requestOptions));\n      requestAbortController.abort();\n      Logger.getInstance().debug('Request%s - aborted.', requestUtil.describeRequestFromOptions(requestOptions));\n    }\n  };\n\n  return requestObject;\n};\n\n/**\n * Issues an HTTP request.\n *\n * @param {Object} options\n *\n * @returns {Object} an object representing the request that was issued.\n */\nHttpClient.prototype.requestAsync = async function (options) {\n  Logger.getInstance().trace('Request%s - preparing for async sending.', requestUtil.describeRequestFromOptions(options));\n  const timer = new ExecutionTimer();\n  try {\n    const requestOptions = prepareRequestOptions.call(this, options);\n\n    timer.start();\n    const response = await axios.request(requestOptions);\n    const httpResponseTime = timer.getDuration();\n    Logger.getInstance().debug('Request%s - response received after %s milliseconds with status %s.', requestUtil.describeRequestFromOptions(requestOptions), httpResponseTime, response.status);\n    parseResponseData(response);\n    sanitizeAxiosResponse(response);\n    return normalizeResponse(response);\n  } catch (err) {\n    const httpResponseTime = timer.getDuration();\n    Logger.getInstance().debug('Request%s - failed after %s milliseconds. Error will be re-raised.', requestUtil.describeRequestFromOptions(options), httpResponseTime);\n    sanitizeAxiosError(err);\n    throw err;\n  }\n};\n\nfunction parseResponseData(response) {\n  Logger.getInstance().trace('Request%s - parsing response data.', requestUtil.describeRequestFromResponse(response));\n  parseIfJSONData(response);\n}\n\nfunction parseIfJSONData(response) {\n  if (Util.isString(response['data']) &&\n      response['headers']['content-type'] === 'application/json') {\n    response['data'] = JSON.parse(response['data']);\n  }\n}\n\n/**\n * Issues an HTTP POST request.\n *\n * @param {String} url\n * @param {String} body\n * @param {Object} options\n *\n * @returns {Object} an object representing the request that was issued.\n */\nHttpClient.prototype.post = async function (url, body, options) {\n  return this.requestAsync({\n    url: url,\n    method: 'POST',\n    data: body,\n    ...options\n  });\n};\n\n/**\n * Issues an HTTP GET request.\n *\n * @param {String} url\n * @param {Object} params\n *\n * @returns {Object} an object representing the request that was issued.\n */\nHttpClient.prototype.get = async function (url, params) {\n  return this.requestAsync({\n    url: url,\n    method: 'GET',\n    ...params,\n  });\n};\n\n/**\n * Issues an HTTP HEAD request.\n *\n * @param {String} url\n * @param {Object} config\n *\n * @returns {Object} an object representing the request that was issued.\n */\nHttpClient.prototype.head = async function (url, config) {\n  return this.requestAsync({\n    url: url,\n    method: 'HEAD',\n    ...config\n  });\n};\n\n/**\n * Issues an HTTP PUT request.\n *\n * @param {String} url\n * @param {Object} data\n * @param {Object} config\n *\n * @returns {Object} an object representing the request that was issued.\n */\nHttpClient.prototype.put = async function (url, data, config) {\n  return this.requestAsync({\n    url: url,\n    method: 'PUT',\n    data: data,\n    ...config\n  });\n};\n\n/**\n * @abstract\n * Returns the module to use when making HTTP requests. Subclasses must override\n * and provide their own implementations.\n *\n * @returns {*}\n */\nHttpClient.prototype.getRequestModule = function () {\n  return null;\n};\n\n/**\n * Returns the agent and proxy options.\n *\n * @returns {*}\n */\nHttpClient.prototype.getAgent = function () {\n  return null;\n};\n\nmodule.exports = HttpClient;\n\nfunction sanitizeAxiosResponse(response) {\n  Logger.getInstance().trace('Request%s - sanitizing response data.', requestUtil.describeRequestFromResponse(response));\n  response.request = undefined;\n  if (response.config) {\n    response.config.data = undefined;\n    response.config.headers = undefined;\n  }\n}\n\nfunction sanitizeAxiosError(error) {\n  error.request = undefined;\n  error.config = undefined;\n  if (error.response) {\n    Logger.getInstance().trace('Request%s - sanitizing response error data.', requestUtil.describeRequestFromResponse(error.response));\n    sanitizeAxiosResponse(error.response);\n  }\n}\n\nfunction prepareRequestOptions(options, requestHandlers = {}) {\n  Logger.getInstance().trace('Request%s - constructing options.', requestUtil.describeRequestFromOptions(options));\n  const headers = normalizeHeaders(options.headers) || {};\n\n  const timeout = options.timeout ||\n    this._connectionConfig.getTimeout() ||\n    DEFAULT_REQUEST_TIMEOUT;\n\n  let data = options.data || options.json;\n\n  if (data) {\n    const bufferUncompressed = Buffer.from(JSON.stringify(data), 'utf8');\n    zlib.gzip(bufferUncompressed, null, function (err, bufferCompressed) {\n      // if the compression was successful\n      if (!err) {\n        data = bufferCompressed;\n        headers['Content-Encoding'] = 'gzip';\n        Logger.getInstance().debug('Request%s - original buffer length: %d bytes. Compressed buffer length: %d bytes.', requestUtil.describeRequestFromOptions(options), bufferUncompressed.buffer.byteLength, bufferCompressed.buffer.byteLength);\n      } else {\n        // Logging 'err' variable value should not be done, since it may contain compressed customer's data.\n        // It can be added only for debugging purposes.\n        Logger.getInstance().warn('Request%s - could not compress request data.', requestUtil.describeRequestFromOptions(options));\n      }\n    });\n  }\n\n  const params = options.params;\n\n  let mock;\n  if (this._connectionConfig.agentClass) {\n    mock = {\n      agentClass: this._connectionConfig.agentClass\n    };\n  }\n  const backoffStrategy = this.constructExponentialBackoffStrategy();\n  const requestOptions =  {\n    method: options.method,\n    url: options.url,\n    headers: headers,\n    data: data,\n    params: params,\n    timeout: timeout,\n    requestOCSP: true,\n    retryDelay: backoffStrategy,\n    rejectUnauthorized: true,\n    // we manually parse jsons or other structures from the server so they need to be text\n    responseType: options.responseType || 'text',\n    proxy: false,\n    ...requestHandlers\n  };\n\n  const url = new URL(options.url);\n  const isHttps = url.protocol === 'https:';\n  const agent = this.getAgent(url, this._connectionConfig.getProxy(), mock);\n  if (isHttps) {\n    requestOptions.httpsAgent = agent;\n  } else {\n    requestOptions.httpAgent = agent;\n  }\n\n  Logger.getInstance().debug('Request%s - options - timeout: %s, retryDelay: %s, responseType: %s', requestUtil.describeRequestFromOptions(options), requestOptions.timeout, requestOptions.retryDelay, requestOptions.responseType);\n  return requestOptions;\n}\n\n/**\n * Normalizes a request headers object so that we get the same behavior\n * regardless of whether we're using request.js or browser-request.js.\n *\n * @param {Object} headers\n *\n * @returns {Object}\n */\nfunction normalizeHeaders(headers) {\n  Logger.getInstance().trace('Normalizing headers');\n  if (Util.isObject(headers)) {\n    const normalizedHeaders = {\n      'user-agent': Util.userAgent\n    };\n\n    // shallow copy the headers object and convert some headers like 'Accept'\n    // and 'Content-Type' to lower case while copying; this is necessary\n    // because the browser-request module, which we use to make http requests in\n    // the browser, does not do case-insensitive checks when deciding whether to\n    // insert default values for the 'accept' and 'content-type' headers; in\n    // otherwise, if someone specifies an 'Accept': 'application/json' header,\n    // browser-request will inject its own 'accept': 'application/json' header\n    // and the browser XMLHttpRequest object will concatenate the two values and\n    // send 'Accept': 'application/json, application/json' with the request\n    let headerNameLowerCase;\n    for (const headerName in headers) {\n      if (Object.prototype.hasOwnProperty.call(headers, headerName)) {\n        headerNameLowerCase = headerName.toLowerCase();\n        if ((headerNameLowerCase === 'accept') ||\n          (headerNameLowerCase === 'content-type')) {\n          normalizedHeaders[headerNameLowerCase] = headers[headerName];\n        } else {\n          normalizedHeaders[headerName] = headers[headerName];\n        }\n      }\n    }\n    Logger.getInstance().trace('Headers were normalized');\n    return normalizedHeaders;\n  } else {\n    Logger.getInstance().trace('Headers were not an object. Original value will be returned.');\n    return headers;\n  }\n\n}\n\n/**\n * Normalizes the response object so that we can extract response headers from\n * it in a uniform way regardless of whether we're using request.js or\n * browser-request.js.\n *\n * @param {Object} response\n *\n * @return {Object}\n */\nfunction normalizeResponse(response) {\n  // if the response doesn't already have a getResponseHeader() method, add one\n  if (response && !response.getResponseHeader) {\n    Logger.getInstance().trace('Request%s - normalizing.', requestUtil.describeRequestFromResponse(response));\n    response.getResponseHeader = function (header) {\n      return response.headers && response.headers[\n        Util.isString(header) ? header.toLowerCase() : header];\n    };\n  }\n\n  if (response) {\n    response.body = response.data; // converting axios response body to old expected body attribute\n    response.statusCode = response.status; // converting axios status to old expected statusCode\n  }\n\n  return response;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/lib/http/base.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/lib/http/node.js":
/*!*****************************************************!*\
  !*** ./node_modules/snowflake-sdk/lib/http/node.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Util = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/snowflake-sdk/lib/util.js\");\nconst ProxyUtil = __webpack_require__(/*! ../proxy_util */ \"(rsc)/./node_modules/snowflake-sdk/lib/proxy_util.js\");\nconst Base = __webpack_require__(/*! ./base */ \"(rsc)/./node_modules/snowflake-sdk/lib/http/base.js\");\nconst HttpsAgent = __webpack_require__(/*! ../agent/https_ocsp_agent */ \"(rsc)/./node_modules/snowflake-sdk/lib/agent/https_ocsp_agent.js\");\nconst HttpsProxyAgent = __webpack_require__(/*! ../agent/https_proxy_agent */ \"(rsc)/./node_modules/snowflake-sdk/lib/agent/https_proxy_agent.js\");\nconst HttpAgent = (__webpack_require__(/*! http */ \"http\").Agent);\nconst GlobalConfig = __webpack_require__(/*! ../../lib/global_config */ \"(rsc)/./node_modules/snowflake-sdk/lib/global_config.js\");\nconst Logger = __webpack_require__(/*! ../logger */ \"(rsc)/./node_modules/snowflake-sdk/lib/logger.js\");\nconst RequestUtil = __webpack_require__(/*! ../http/request_util */ \"(rsc)/./node_modules/snowflake-sdk/lib/http/request_util.js\");\n\n/**\n * Returns the delay time calculated by exponential backoff with\n * decorrelated jitter. For more details, check out:\n * http://www.awsarchitectureblog.com/2015/03/backoff.html\n * @return  {Number} number of milliseconds to wait before retrying again the request.\n */\nNodeHttpClient.prototype.constructExponentialBackoffStrategy = function () {\n  Logger.getInstance().trace('Calculating exponential backoff strategy');\n\n  const previousSleepTime = this._connectionConfig.getRetrySfStartingSleepTime();\n  // maximum seconds\n  const cap = this._connectionConfig.getRetrySfMaxSleepTime();\n  // minimum seconds\n  const base = 1;\n  const nextSleepTime = Util.nextSleepTime(base, cap, previousSleepTime);\n  const nextSleepTimeInMilliseconds = nextSleepTime * 1000;\n  Logger.getInstance().trace('Calculated exponential backoff strategy sleep time: %d', nextSleepTimeInMilliseconds);\n  return nextSleepTimeInMilliseconds;\n};\n\n/**\n * Creates a client that can be used to make requests in Node.js.\n *\n * @param {ConnectionConfig} connectionConfig\n * @constructor\n */\nfunction NodeHttpClient(connectionConfig) {\n  Logger.getInstance().trace('Initializing NodeHttpClient with Connection Config[%s]',\n    connectionConfig.describeIdentityAttributes());\n  Base.apply(this, [connectionConfig]);\n}\n\nUtil.inherits(NodeHttpClient, Base);\n\nconst httpsAgentCache = new Map();\n\nfunction getFromCacheOrCreate(agentClass, options, agentId) {\n  Logger.getInstance().trace('Agent[id: %s] - trying to retrieve from cache or create.', agentId);\n  let agent = {};\n  function createAgent(agentClass, agentOptions, agentId) {\n    Logger.getInstance().trace('Agent[id: %s] - creating a new agent instance.', agentId);\n    const agent = agentClass(agentOptions);\n    httpsAgentCache.set(agentId, agent);\n    Logger.getInstance().trace('Agent[id: %s] - new instance stored in cache.', agentId);\n\n    // detect and log PROXY envvar + agent proxy settings\n    const compareAndLogEnvAndAgentProxies = ProxyUtil.getCompareAndLogEnvAndAgentProxies(agentOptions);\n    Logger.getInstance().debug('Agent[id: %s] - proxy settings used in requests: %s', agentId, compareAndLogEnvAndAgentProxies.messages);\n    // if there's anything to warn on (e.g. both envvar + agent proxy used, and they are different)\n    // log warnings on them\n    if (compareAndLogEnvAndAgentProxies.warnings) {\n      Logger.getInstance().warn('Agent[id: %s] - %s', agentId, compareAndLogEnvAndAgentProxies.warnings);\n    }\n\n    return agent;\n  }\n\n  if (httpsAgentCache.has(agentId)) {\n    Logger.getInstance().trace('Agent[id: %s] - retrieving an agent instance from cache.', agentId);\n    agent = httpsAgentCache.get(agentId);\n  } else {\n    agent = createAgent(agentClass, options, agentId);\n  }\n  return agent;\n}\n\nfunction enrichAgentOptionsWithProxyConfig(agentOptions, proxy) {\n  agentOptions.host = proxy.host;\n  agentOptions.port = proxy.port;\n  agentOptions.protocol = proxy.protocol;\n  if (proxy.user && proxy.password) {\n    agentOptions.user = proxy.user;\n    agentOptions.password = proxy.password;\n  }\n}\n\nfunction isBypassProxy(proxy, destination, agentId) {\n  if (proxy && proxy.noProxy) {\n    const bypassList = proxy.noProxy.split('|');\n    for (let i = 0; i < bypassList.length; i++) {\n      let host = bypassList[i].trim();\n      host = host.replace('*', '.*?');\n      const matches = destination.match(host);\n      if (matches) {\n        Logger.getInstance().debug('Agent[id: %s] - bypassing proxy allowed for destination: %s', agentId, destination);\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\n/**\n * @inheritDoc\n */\nNodeHttpClient.prototype.getAgent = function (parsedUrl, proxy, mock) {\n  Logger.getInstance().trace('Agent[url: %s] - getting an agent instance.', RequestUtil.describeURL(parsedUrl.href));\n  if (!proxy && GlobalConfig.isEnvProxyActive()) {\n    const isHttps = parsedUrl.protocol === 'https:';\n    proxy = ProxyUtil.getProxyFromEnv(isHttps);\n    if (proxy) {\n      Logger.getInstance().debug('Agent[url: %s] - proxy info loaded from the environment variable. Proxy host: %s', RequestUtil.describeURL(parsedUrl.href), proxy.host);\n    }\n  }\n  return getProxyAgent(proxy, parsedUrl, parsedUrl.href, mock);\n};\n\nfunction getProxyAgent(proxyOptions, parsedUrl, destination, mock) {\n  Logger.getInstance().trace('Agent[url: %s] - getting a proxy agent instance.', RequestUtil.describeURL(parsedUrl.href));\n  const agentOptions = {\n    protocol: parsedUrl.protocol,\n    hostname: parsedUrl.hostname,\n    keepAlive: GlobalConfig.getKeepAlive()\n  };\n\n  if (mock) {\n    const mockAgent = mock.agentClass(agentOptions);\n    if (mockAgent.protocol === parsedUrl.protocol) {\n      Logger.getInstance().debug('Agent[url: %s] - the mock agent will be used.', RequestUtil.describeURL(parsedUrl.href));\n      return mockAgent;\n    }\n  }\n\n  const destHost = ProxyUtil.getHostFromURL(destination);\n  const agentId = createAgentId(agentOptions.protocol, agentOptions.hostname, destHost, agentOptions.keepAlive);\n  Logger.getInstance().debug('Agent[id: %s] - the destination host is: %s.', agentId, destHost);\n\n  const bypassProxy = isBypassProxy(proxyOptions, destination, agentId);\n  let agent;\n  const isHttps = agentOptions.protocol === 'https:';\n\n  if (isHttps) {\n    if (proxyOptions && !bypassProxy) {\n      Logger.getInstance().trace('Agent[id: %s] - using HTTPS agent enriched with proxy options.', agentId);\n      enrichAgentOptionsWithProxyConfig(agentOptions, proxyOptions);\n      agent = getFromCacheOrCreate(HttpsProxyAgent, agentOptions, agentId);\n    } else {\n      Logger.getInstance().trace('Agent[id: %s] - using HTTPS agent without proxy.', agentId);\n      agent = getFromCacheOrCreate(HttpsAgent, agentOptions, agentId);\n    }\n  } else if (proxyOptions && !bypassProxy) {\n    Logger.getInstance().trace('Agent[id: %s] - using HTTP agent enriched with proxy options.', agentId);\n    enrichAgentOptionsWithProxyConfig(agentOptions, proxyOptions);\n    agent = getFromCacheOrCreate(HttpAgent, agentOptions, agentId);\n  } else {\n    Logger.getInstance().trace('Agent[id: %s] - using HTTP agent without proxy.', agentId);\n    agent = getFromCacheOrCreate(HttpAgent, agentOptions, agentId);\n  }\n  return agent;\n}\n\nfunction createAgentId(protocol, hostname, destination, keepAlive) {\n  return `${protocol}//${hostname}-${destination}-${keepAlive ? 'keepAlive' : 'noKeepAlive'}`;\n}\n\n//This is for the testing purpose.\nfunction getAgentCacheSize() {\n  return httpsAgentCache.size;\n}\n\nmodule.exports = { NodeHttpClient, getProxyAgent, getAgentCacheSize, isBypassProxy };//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9saWIvaHR0cC9ub2RlLmpzIiwibWFwcGluZ3MiOiJBQUFBLGFBQWEsbUJBQU8sQ0FBQywrREFBUztBQUM5QixrQkFBa0IsbUJBQU8sQ0FBQywyRUFBZTtBQUN6QyxhQUFhLG1CQUFPLENBQUMsbUVBQVE7QUFDN0IsbUJBQW1CLG1CQUFPLENBQUMsbUdBQTJCO0FBQ3RELHdCQUF3QixtQkFBTyxDQUFDLHFHQUE0QjtBQUM1RCxrQkFBa0IsK0NBQXFCO0FBQ3ZDLHFCQUFxQixtQkFBTyxDQUFDLHdGQUF5QjtBQUN0RCxlQUFlLG1CQUFPLENBQUMsbUVBQVc7QUFDbEMsb0JBQW9CLG1CQUFPLENBQUMseUZBQXNCOztBQUVsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxrQkFBa0I7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsdUJBQXVCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsWUFBWSxTQUFTLElBQUksU0FBUyxHQUFHLFlBQVksR0FBRyx3Q0FBd0M7QUFDNUY7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsbUJBQW1CIiwic291cmNlcyI6WyIvVXNlcnMvdmljdG9yd2lsc29uL0Rlc2t0b3AvcHJvamVjdHMvRVpWaXovbm9kZV9tb2R1bGVzL3Nub3dmbGFrZS1zZGsvbGliL2h0dHAvbm9kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBVdGlsID0gcmVxdWlyZSgnLi4vdXRpbCcpO1xuY29uc3QgUHJveHlVdGlsID0gcmVxdWlyZSgnLi4vcHJveHlfdXRpbCcpO1xuY29uc3QgQmFzZSA9IHJlcXVpcmUoJy4vYmFzZScpO1xuY29uc3QgSHR0cHNBZ2VudCA9IHJlcXVpcmUoJy4uL2FnZW50L2h0dHBzX29jc3BfYWdlbnQnKTtcbmNvbnN0IEh0dHBzUHJveHlBZ2VudCA9IHJlcXVpcmUoJy4uL2FnZW50L2h0dHBzX3Byb3h5X2FnZW50Jyk7XG5jb25zdCBIdHRwQWdlbnQgPSByZXF1aXJlKCdodHRwJykuQWdlbnQ7XG5jb25zdCBHbG9iYWxDb25maWcgPSByZXF1aXJlKCcuLi8uLi9saWIvZ2xvYmFsX2NvbmZpZycpO1xuY29uc3QgTG9nZ2VyID0gcmVxdWlyZSgnLi4vbG9nZ2VyJyk7XG5jb25zdCBSZXF1ZXN0VXRpbCA9IHJlcXVpcmUoJy4uL2h0dHAvcmVxdWVzdF91dGlsJyk7XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZGVsYXkgdGltZSBjYWxjdWxhdGVkIGJ5IGV4cG9uZW50aWFsIGJhY2tvZmYgd2l0aFxuICogZGVjb3JyZWxhdGVkIGppdHRlci4gRm9yIG1vcmUgZGV0YWlscywgY2hlY2sgb3V0OlxuICogaHR0cDovL3d3dy5hd3NhcmNoaXRlY3R1cmVibG9nLmNvbS8yMDE1LzAzL2JhY2tvZmYuaHRtbFxuICogQHJldHVybiAge051bWJlcn0gbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB3YWl0IGJlZm9yZSByZXRyeWluZyBhZ2FpbiB0aGUgcmVxdWVzdC5cbiAqL1xuTm9kZUh0dHBDbGllbnQucHJvdG90eXBlLmNvbnN0cnVjdEV4cG9uZW50aWFsQmFja29mZlN0cmF0ZWd5ID0gZnVuY3Rpb24gKCkge1xuICBMb2dnZXIuZ2V0SW5zdGFuY2UoKS50cmFjZSgnQ2FsY3VsYXRpbmcgZXhwb25lbnRpYWwgYmFja29mZiBzdHJhdGVneScpO1xuXG4gIGNvbnN0IHByZXZpb3VzU2xlZXBUaW1lID0gdGhpcy5fY29ubmVjdGlvbkNvbmZpZy5nZXRSZXRyeVNmU3RhcnRpbmdTbGVlcFRpbWUoKTtcbiAgLy8gbWF4aW11bSBzZWNvbmRzXG4gIGNvbnN0IGNhcCA9IHRoaXMuX2Nvbm5lY3Rpb25Db25maWcuZ2V0UmV0cnlTZk1heFNsZWVwVGltZSgpO1xuICAvLyBtaW5pbXVtIHNlY29uZHNcbiAgY29uc3QgYmFzZSA9IDE7XG4gIGNvbnN0IG5leHRTbGVlcFRpbWUgPSBVdGlsLm5leHRTbGVlcFRpbWUoYmFzZSwgY2FwLCBwcmV2aW91c1NsZWVwVGltZSk7XG4gIGNvbnN0IG5leHRTbGVlcFRpbWVJbk1pbGxpc2Vjb25kcyA9IG5leHRTbGVlcFRpbWUgKiAxMDAwO1xuICBMb2dnZXIuZ2V0SW5zdGFuY2UoKS50cmFjZSgnQ2FsY3VsYXRlZCBleHBvbmVudGlhbCBiYWNrb2ZmIHN0cmF0ZWd5IHNsZWVwIHRpbWU6ICVkJywgbmV4dFNsZWVwVGltZUluTWlsbGlzZWNvbmRzKTtcbiAgcmV0dXJuIG5leHRTbGVlcFRpbWVJbk1pbGxpc2Vjb25kcztcbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsaWVudCB0aGF0IGNhbiBiZSB1c2VkIHRvIG1ha2UgcmVxdWVzdHMgaW4gTm9kZS5qcy5cbiAqXG4gKiBAcGFyYW0ge0Nvbm5lY3Rpb25Db25maWd9IGNvbm5lY3Rpb25Db25maWdcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBOb2RlSHR0cENsaWVudChjb25uZWN0aW9uQ29uZmlnKSB7XG4gIExvZ2dlci5nZXRJbnN0YW5jZSgpLnRyYWNlKCdJbml0aWFsaXppbmcgTm9kZUh0dHBDbGllbnQgd2l0aCBDb25uZWN0aW9uIENvbmZpZ1slc10nLFxuICAgIGNvbm5lY3Rpb25Db25maWcuZGVzY3JpYmVJZGVudGl0eUF0dHJpYnV0ZXMoKSk7XG4gIEJhc2UuYXBwbHkodGhpcywgW2Nvbm5lY3Rpb25Db25maWddKTtcbn1cblxuVXRpbC5pbmhlcml0cyhOb2RlSHR0cENsaWVudCwgQmFzZSk7XG5cbmNvbnN0IGh0dHBzQWdlbnRDYWNoZSA9IG5ldyBNYXAoKTtcblxuZnVuY3Rpb24gZ2V0RnJvbUNhY2hlT3JDcmVhdGUoYWdlbnRDbGFzcywgb3B0aW9ucywgYWdlbnRJZCkge1xuICBMb2dnZXIuZ2V0SW5zdGFuY2UoKS50cmFjZSgnQWdlbnRbaWQ6ICVzXSAtIHRyeWluZyB0byByZXRyaWV2ZSBmcm9tIGNhY2hlIG9yIGNyZWF0ZS4nLCBhZ2VudElkKTtcbiAgbGV0IGFnZW50ID0ge307XG4gIGZ1bmN0aW9uIGNyZWF0ZUFnZW50KGFnZW50Q2xhc3MsIGFnZW50T3B0aW9ucywgYWdlbnRJZCkge1xuICAgIExvZ2dlci5nZXRJbnN0YW5jZSgpLnRyYWNlKCdBZ2VudFtpZDogJXNdIC0gY3JlYXRpbmcgYSBuZXcgYWdlbnQgaW5zdGFuY2UuJywgYWdlbnRJZCk7XG4gICAgY29uc3QgYWdlbnQgPSBhZ2VudENsYXNzKGFnZW50T3B0aW9ucyk7XG4gICAgaHR0cHNBZ2VudENhY2hlLnNldChhZ2VudElkLCBhZ2VudCk7XG4gICAgTG9nZ2VyLmdldEluc3RhbmNlKCkudHJhY2UoJ0FnZW50W2lkOiAlc10gLSBuZXcgaW5zdGFuY2Ugc3RvcmVkIGluIGNhY2hlLicsIGFnZW50SWQpO1xuXG4gICAgLy8gZGV0ZWN0IGFuZCBsb2cgUFJPWFkgZW52dmFyICsgYWdlbnQgcHJveHkgc2V0dGluZ3NcbiAgICBjb25zdCBjb21wYXJlQW5kTG9nRW52QW5kQWdlbnRQcm94aWVzID0gUHJveHlVdGlsLmdldENvbXBhcmVBbmRMb2dFbnZBbmRBZ2VudFByb3hpZXMoYWdlbnRPcHRpb25zKTtcbiAgICBMb2dnZXIuZ2V0SW5zdGFuY2UoKS5kZWJ1ZygnQWdlbnRbaWQ6ICVzXSAtIHByb3h5IHNldHRpbmdzIHVzZWQgaW4gcmVxdWVzdHM6ICVzJywgYWdlbnRJZCwgY29tcGFyZUFuZExvZ0VudkFuZEFnZW50UHJveGllcy5tZXNzYWdlcyk7XG4gICAgLy8gaWYgdGhlcmUncyBhbnl0aGluZyB0byB3YXJuIG9uIChlLmcuIGJvdGggZW52dmFyICsgYWdlbnQgcHJveHkgdXNlZCwgYW5kIHRoZXkgYXJlIGRpZmZlcmVudClcbiAgICAvLyBsb2cgd2FybmluZ3Mgb24gdGhlbVxuICAgIGlmIChjb21wYXJlQW5kTG9nRW52QW5kQWdlbnRQcm94aWVzLndhcm5pbmdzKSB7XG4gICAgICBMb2dnZXIuZ2V0SW5zdGFuY2UoKS53YXJuKCdBZ2VudFtpZDogJXNdIC0gJXMnLCBhZ2VudElkLCBjb21wYXJlQW5kTG9nRW52QW5kQWdlbnRQcm94aWVzLndhcm5pbmdzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWdlbnQ7XG4gIH1cblxuICBpZiAoaHR0cHNBZ2VudENhY2hlLmhhcyhhZ2VudElkKSkge1xuICAgIExvZ2dlci5nZXRJbnN0YW5jZSgpLnRyYWNlKCdBZ2VudFtpZDogJXNdIC0gcmV0cmlldmluZyBhbiBhZ2VudCBpbnN0YW5jZSBmcm9tIGNhY2hlLicsIGFnZW50SWQpO1xuICAgIGFnZW50ID0gaHR0cHNBZ2VudENhY2hlLmdldChhZ2VudElkKTtcbiAgfSBlbHNlIHtcbiAgICBhZ2VudCA9IGNyZWF0ZUFnZW50KGFnZW50Q2xhc3MsIG9wdGlvbnMsIGFnZW50SWQpO1xuICB9XG4gIHJldHVybiBhZ2VudDtcbn1cblxuZnVuY3Rpb24gZW5yaWNoQWdlbnRPcHRpb25zV2l0aFByb3h5Q29uZmlnKGFnZW50T3B0aW9ucywgcHJveHkpIHtcbiAgYWdlbnRPcHRpb25zLmhvc3QgPSBwcm94eS5ob3N0O1xuICBhZ2VudE9wdGlvbnMucG9ydCA9IHByb3h5LnBvcnQ7XG4gIGFnZW50T3B0aW9ucy5wcm90b2NvbCA9IHByb3h5LnByb3RvY29sO1xuICBpZiAocHJveHkudXNlciAmJiBwcm94eS5wYXNzd29yZCkge1xuICAgIGFnZW50T3B0aW9ucy51c2VyID0gcHJveHkudXNlcjtcbiAgICBhZ2VudE9wdGlvbnMucGFzc3dvcmQgPSBwcm94eS5wYXNzd29yZDtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc0J5cGFzc1Byb3h5KHByb3h5LCBkZXN0aW5hdGlvbiwgYWdlbnRJZCkge1xuICBpZiAocHJveHkgJiYgcHJveHkubm9Qcm94eSkge1xuICAgIGNvbnN0IGJ5cGFzc0xpc3QgPSBwcm94eS5ub1Byb3h5LnNwbGl0KCd8Jyk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBieXBhc3NMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgaG9zdCA9IGJ5cGFzc0xpc3RbaV0udHJpbSgpO1xuICAgICAgaG9zdCA9IGhvc3QucmVwbGFjZSgnKicsICcuKj8nKTtcbiAgICAgIGNvbnN0IG1hdGNoZXMgPSBkZXN0aW5hdGlvbi5tYXRjaChob3N0KTtcbiAgICAgIGlmIChtYXRjaGVzKSB7XG4gICAgICAgIExvZ2dlci5nZXRJbnN0YW5jZSgpLmRlYnVnKCdBZ2VudFtpZDogJXNdIC0gYnlwYXNzaW5nIHByb3h5IGFsbG93ZWQgZm9yIGRlc3RpbmF0aW9uOiAlcycsIGFnZW50SWQsIGRlc3RpbmF0aW9uKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBAaW5oZXJpdERvY1xuICovXG5Ob2RlSHR0cENsaWVudC5wcm90b3R5cGUuZ2V0QWdlbnQgPSBmdW5jdGlvbiAocGFyc2VkVXJsLCBwcm94eSwgbW9jaykge1xuICBMb2dnZXIuZ2V0SW5zdGFuY2UoKS50cmFjZSgnQWdlbnRbdXJsOiAlc10gLSBnZXR0aW5nIGFuIGFnZW50IGluc3RhbmNlLicsIFJlcXVlc3RVdGlsLmRlc2NyaWJlVVJMKHBhcnNlZFVybC5ocmVmKSk7XG4gIGlmICghcHJveHkgJiYgR2xvYmFsQ29uZmlnLmlzRW52UHJveHlBY3RpdmUoKSkge1xuICAgIGNvbnN0IGlzSHR0cHMgPSBwYXJzZWRVcmwucHJvdG9jb2wgPT09ICdodHRwczonO1xuICAgIHByb3h5ID0gUHJveHlVdGlsLmdldFByb3h5RnJvbUVudihpc0h0dHBzKTtcbiAgICBpZiAocHJveHkpIHtcbiAgICAgIExvZ2dlci5nZXRJbnN0YW5jZSgpLmRlYnVnKCdBZ2VudFt1cmw6ICVzXSAtIHByb3h5IGluZm8gbG9hZGVkIGZyb20gdGhlIGVudmlyb25tZW50IHZhcmlhYmxlLiBQcm94eSBob3N0OiAlcycsIFJlcXVlc3RVdGlsLmRlc2NyaWJlVVJMKHBhcnNlZFVybC5ocmVmKSwgcHJveHkuaG9zdCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBnZXRQcm94eUFnZW50KHByb3h5LCBwYXJzZWRVcmwsIHBhcnNlZFVybC5ocmVmLCBtb2NrKTtcbn07XG5cbmZ1bmN0aW9uIGdldFByb3h5QWdlbnQocHJveHlPcHRpb25zLCBwYXJzZWRVcmwsIGRlc3RpbmF0aW9uLCBtb2NrKSB7XG4gIExvZ2dlci5nZXRJbnN0YW5jZSgpLnRyYWNlKCdBZ2VudFt1cmw6ICVzXSAtIGdldHRpbmcgYSBwcm94eSBhZ2VudCBpbnN0YW5jZS4nLCBSZXF1ZXN0VXRpbC5kZXNjcmliZVVSTChwYXJzZWRVcmwuaHJlZikpO1xuICBjb25zdCBhZ2VudE9wdGlvbnMgPSB7XG4gICAgcHJvdG9jb2w6IHBhcnNlZFVybC5wcm90b2NvbCxcbiAgICBob3N0bmFtZTogcGFyc2VkVXJsLmhvc3RuYW1lLFxuICAgIGtlZXBBbGl2ZTogR2xvYmFsQ29uZmlnLmdldEtlZXBBbGl2ZSgpXG4gIH07XG5cbiAgaWYgKG1vY2spIHtcbiAgICBjb25zdCBtb2NrQWdlbnQgPSBtb2NrLmFnZW50Q2xhc3MoYWdlbnRPcHRpb25zKTtcbiAgICBpZiAobW9ja0FnZW50LnByb3RvY29sID09PSBwYXJzZWRVcmwucHJvdG9jb2wpIHtcbiAgICAgIExvZ2dlci5nZXRJbnN0YW5jZSgpLmRlYnVnKCdBZ2VudFt1cmw6ICVzXSAtIHRoZSBtb2NrIGFnZW50IHdpbGwgYmUgdXNlZC4nLCBSZXF1ZXN0VXRpbC5kZXNjcmliZVVSTChwYXJzZWRVcmwuaHJlZikpO1xuICAgICAgcmV0dXJuIG1vY2tBZ2VudDtcbiAgICB9XG4gIH1cblxuICBjb25zdCBkZXN0SG9zdCA9IFByb3h5VXRpbC5nZXRIb3N0RnJvbVVSTChkZXN0aW5hdGlvbik7XG4gIGNvbnN0IGFnZW50SWQgPSBjcmVhdGVBZ2VudElkKGFnZW50T3B0aW9ucy5wcm90b2NvbCwgYWdlbnRPcHRpb25zLmhvc3RuYW1lLCBkZXN0SG9zdCwgYWdlbnRPcHRpb25zLmtlZXBBbGl2ZSk7XG4gIExvZ2dlci5nZXRJbnN0YW5jZSgpLmRlYnVnKCdBZ2VudFtpZDogJXNdIC0gdGhlIGRlc3RpbmF0aW9uIGhvc3QgaXM6ICVzLicsIGFnZW50SWQsIGRlc3RIb3N0KTtcblxuICBjb25zdCBieXBhc3NQcm94eSA9IGlzQnlwYXNzUHJveHkocHJveHlPcHRpb25zLCBkZXN0aW5hdGlvbiwgYWdlbnRJZCk7XG4gIGxldCBhZ2VudDtcbiAgY29uc3QgaXNIdHRwcyA9IGFnZW50T3B0aW9ucy5wcm90b2NvbCA9PT0gJ2h0dHBzOic7XG5cbiAgaWYgKGlzSHR0cHMpIHtcbiAgICBpZiAocHJveHlPcHRpb25zICYmICFieXBhc3NQcm94eSkge1xuICAgICAgTG9nZ2VyLmdldEluc3RhbmNlKCkudHJhY2UoJ0FnZW50W2lkOiAlc10gLSB1c2luZyBIVFRQUyBhZ2VudCBlbnJpY2hlZCB3aXRoIHByb3h5IG9wdGlvbnMuJywgYWdlbnRJZCk7XG4gICAgICBlbnJpY2hBZ2VudE9wdGlvbnNXaXRoUHJveHlDb25maWcoYWdlbnRPcHRpb25zLCBwcm94eU9wdGlvbnMpO1xuICAgICAgYWdlbnQgPSBnZXRGcm9tQ2FjaGVPckNyZWF0ZShIdHRwc1Byb3h5QWdlbnQsIGFnZW50T3B0aW9ucywgYWdlbnRJZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIExvZ2dlci5nZXRJbnN0YW5jZSgpLnRyYWNlKCdBZ2VudFtpZDogJXNdIC0gdXNpbmcgSFRUUFMgYWdlbnQgd2l0aG91dCBwcm94eS4nLCBhZ2VudElkKTtcbiAgICAgIGFnZW50ID0gZ2V0RnJvbUNhY2hlT3JDcmVhdGUoSHR0cHNBZ2VudCwgYWdlbnRPcHRpb25zLCBhZ2VudElkKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAocHJveHlPcHRpb25zICYmICFieXBhc3NQcm94eSkge1xuICAgIExvZ2dlci5nZXRJbnN0YW5jZSgpLnRyYWNlKCdBZ2VudFtpZDogJXNdIC0gdXNpbmcgSFRUUCBhZ2VudCBlbnJpY2hlZCB3aXRoIHByb3h5IG9wdGlvbnMuJywgYWdlbnRJZCk7XG4gICAgZW5yaWNoQWdlbnRPcHRpb25zV2l0aFByb3h5Q29uZmlnKGFnZW50T3B0aW9ucywgcHJveHlPcHRpb25zKTtcbiAgICBhZ2VudCA9IGdldEZyb21DYWNoZU9yQ3JlYXRlKEh0dHBBZ2VudCwgYWdlbnRPcHRpb25zLCBhZ2VudElkKTtcbiAgfSBlbHNlIHtcbiAgICBMb2dnZXIuZ2V0SW5zdGFuY2UoKS50cmFjZSgnQWdlbnRbaWQ6ICVzXSAtIHVzaW5nIEhUVFAgYWdlbnQgd2l0aG91dCBwcm94eS4nLCBhZ2VudElkKTtcbiAgICBhZ2VudCA9IGdldEZyb21DYWNoZU9yQ3JlYXRlKEh0dHBBZ2VudCwgYWdlbnRPcHRpb25zLCBhZ2VudElkKTtcbiAgfVxuICByZXR1cm4gYWdlbnQ7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUFnZW50SWQocHJvdG9jb2wsIGhvc3RuYW1lLCBkZXN0aW5hdGlvbiwga2VlcEFsaXZlKSB7XG4gIHJldHVybiBgJHtwcm90b2NvbH0vLyR7aG9zdG5hbWV9LSR7ZGVzdGluYXRpb259LSR7a2VlcEFsaXZlID8gJ2tlZXBBbGl2ZScgOiAnbm9LZWVwQWxpdmUnfWA7XG59XG5cbi8vVGhpcyBpcyBmb3IgdGhlIHRlc3RpbmcgcHVycG9zZS5cbmZ1bmN0aW9uIGdldEFnZW50Q2FjaGVTaXplKCkge1xuICByZXR1cm4gaHR0cHNBZ2VudENhY2hlLnNpemU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0geyBOb2RlSHR0cENsaWVudCwgZ2V0UHJveHlBZ2VudCwgZ2V0QWdlbnRDYWNoZVNpemUsIGlzQnlwYXNzUHJveHkgfTsiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/lib/http/node.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/lib/http/request_util.js":
/*!*************************************************************!*\
  !*** ./node_modules/snowflake-sdk/lib/http/request_util.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const LoggingUtil = __webpack_require__(/*! ../logger/logging_util */ \"(rsc)/./node_modules/snowflake-sdk/lib/logger/logging_util.js\");\nconst sfParams = __webpack_require__(/*! ../constants/sf_params */ \"(rsc)/./node_modules/snowflake-sdk/lib/constants/sf_params.js\");\n\n// Initial whitelist for attributes - they will be described with values\nconst DEFAULT_ATTRIBUTES_DESCRIBING_REQUEST_WITH_VALUES = [\n  'baseUrl',\n  'path',\n  'method',\n  sfParams.paramsNames.SF_REQUEST_ID,\n  sfParams.paramsNames.SF_REQUEST_GUID,\n  sfParams.paramsNames.SF_WAREHOUSE_NAME,\n  sfParams.paramsNames.SF_DB_NAME,\n  sfParams.paramsNames.SF_SCHEMA_NAME,\n];\n\n// Initial blacklist for attributes - described as present/not present only\nconst DEFAULT_ATTRIBUTES_DESCRIBING_REQUEST_WITHOUT_VALUES = [\n  sfParams.paramsNames.SF_TOKEN\n];\n\n// Helper function to resolve attributes arrays given defaults and overrides.\nfunction resolveAttributeList(defaultAttrs, overrideAttrs) {\n  return overrideAttrs || defaultAttrs;\n}\n\n/**\n * Describes a request based on its options.\n * Should work with not-yet-parsed options as well (before calling prepareRequestOptions method).\n *\n * @param {Object} requestOptions - Object representing the request data with top-level keys.\n * @param {Object} [options] - Options for describing attributes.\n * @param {Array<string>} [options.overrideAttributesDescribedWithValues]\n * @param {Array<string>} [options.overrideAttributesDescribedWithoutValues]\n * @returns {string} A string representation of the request data.\n */\nfunction describeRequestFromOptions(\n  requestOptions,\n  {\n    overrideAttributesDescribedWithValues,\n    overrideAttributesDescribedWithoutValues\n  } = {}\n) {\n  const describingAttributesWithValues = resolveAttributeList(\n    DEFAULT_ATTRIBUTES_DESCRIBING_REQUEST_WITH_VALUES,\n    overrideAttributesDescribedWithValues\n  );\n\n  const describingAttributesWithoutValues = resolveAttributeList(\n    DEFAULT_ATTRIBUTES_DESCRIBING_REQUEST_WITHOUT_VALUES,\n    overrideAttributesDescribedWithoutValues\n  );\n\n  const { method, url, params } = requestOptions || {};\n\n  return describeRequestData(\n    { method, url, params },\n    describingAttributesWithValues,\n    describingAttributesWithoutValues\n  );\n}\n\n/**\n * Creates a string that represents request data from a response.\n * Helps to identify the request that was the source of the response.\n *\n * @param {Object} response - Axios response object.\n * @param {Object} [options] - Options for describing attributes.\n * @param {Array<string>} [options.overrideAttributesDescribedWithValues]\n * @param {Array<string>} [options.overrideAttributesDescribedWithoutValues]\n * @returns {string} A string representation of the request data.\n */\nfunction describeRequestFromResponse(\n  response,\n  {\n    overrideAttributesDescribedWithValues,\n    overrideAttributesDescribedWithoutValues\n  } = {}\n) {\n  let method;\n  let url;\n  let params;\n  const responseConfig = response?.config;\n\n  const describingAttributesWithValues = resolveAttributeList(\n    DEFAULT_ATTRIBUTES_DESCRIBING_REQUEST_WITH_VALUES,\n    overrideAttributesDescribedWithValues\n  );\n\n  const describingAttributesWithoutValues = resolveAttributeList(\n    DEFAULT_ATTRIBUTES_DESCRIBING_REQUEST_WITHOUT_VALUES,\n    overrideAttributesDescribedWithoutValues\n  );\n\n  if (responseConfig) {\n    method = responseConfig.method;\n    url = responseConfig.url;\n    params = responseConfig.params;\n  }\n\n  return describeRequestData(\n    { method, url, params },\n    describingAttributesWithValues,\n    describingAttributesWithoutValues\n  );\n}\n\n/**\n * Constructs a string representation of request data.\n *\n * @param {Object} requestData - Object containing the method, url, and parameters.\n * @param {string} requestData.method - HTTP method.\n * @param {string} requestData.url - Request URL.\n * @param {Object} [requestData.params] - Additional query parameters.\n * @param {Array<string>} attributesWithValues - Attributes to describe with values.\n * @param {Array<string>} attributesWithoutValues - Attributes to describe without values.\n * @returns {string} A string describing the request data.\n */\nfunction describeRequestData(\n  { method, url, params } = {},\n  attributesWithValues,\n  attributesWithoutValues\n) {\n  const requestObject = {\n    // Ensure consistent casing for methods to match request-response pairs in logs.\n    method: method?.toUpperCase(),\n    ...constructURLData(url, params),\n  };\n\n  return LoggingUtil.describeAttributes(\n    requestObject,\n    attributesWithValues,\n    attributesWithoutValues\n  );\n}\n\n/**\n * Constructs an object representing URL data including the base URL, path, and query parameters.\n *\n * @param {string} url - The full URL.\n * @param {Object} [params] - Additional query parameters.\n * @returns {Object} Contains baseUrl, path, and merged query parameters.\n */\nfunction constructURLData(url, params = {}) {\n  if (!url) {\n    return { baseUrl: undefined, path: undefined, queryParams: {} };\n  }\n\n  const urlObj = new URL(url);\n  const queryParams = { ...params };\n\n  urlObj.searchParams.forEach((value, key) => {\n    queryParams[key] = value;\n  });\n\n  const baseUrl = `${urlObj.protocol}//${urlObj.hostname}${urlObj.port ? `:${urlObj.port}` : ''}`;\n\n  return {\n    baseUrl: baseUrl,\n    path: urlObj.pathname,\n    ...queryParams,\n  };\n}\n\n/**\n * @param {string} url - The URL to describe.\n * @param {Object} [options] - Options for describing attributes.\n * @param {Array<string>} [options.overrideAttributesDescribedWithValues]\n * @param {Array<string>} [options.overrideAttributesDescribedWithoutValues]\n * @returns {string} A string describing the URL.\n */\nfunction describeURL(\n  url,\n  {\n    overrideAttributesDescribedWithValues,\n    overrideAttributesDescribedWithoutValues\n  } = {}\n) {\n  const describingAttributesWithValues = resolveAttributeList(\n    DEFAULT_ATTRIBUTES_DESCRIBING_REQUEST_WITH_VALUES,\n    overrideAttributesDescribedWithValues\n  );\n\n  const describingAttributesWithoutValues = resolveAttributeList(\n    DEFAULT_ATTRIBUTES_DESCRIBING_REQUEST_WITHOUT_VALUES,\n    overrideAttributesDescribedWithoutValues\n  );\n\n  const urlData = constructURLData(url);\n\n  return LoggingUtil.describeAttributes(\n    urlData,\n    describingAttributesWithValues,\n    describingAttributesWithoutValues\n  );\n}\n\nexports.DEFAULT_ATTRIBUTES_DESCRIBING_REQUEST_WITH_VALUES = DEFAULT_ATTRIBUTES_DESCRIBING_REQUEST_WITH_VALUES;\nexports.DEFAULT_ATTRIBUTES_DESCRIBING_REQUEST_WITHOUT_VALUES = DEFAULT_ATTRIBUTES_DESCRIBING_REQUEST_WITHOUT_VALUES;\n\nexports.describeRequestFromOptions = describeRequestFromOptions;\nexports.describeRequestFromResponse = describeRequestFromResponse;\nexports.describeURL = describeURL;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/lib/http/request_util.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/lib/logger.js":
/*!**************************************************!*\
  !*** ./node_modules/snowflake-sdk/lib/logger.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const BrowserLogger = __webpack_require__(/*! ./logger/browser */ \"(rsc)/./node_modules/snowflake-sdk/lib/logger/browser.js\");\n\nlet instance;\n\n/**\n * Sets the logger instance. For internal use only.\n *\n * @param {*} newInstance\n */\nexports.setInstance = function (newInstance) {\n  instance = newInstance;\n};\n\n/**\n * Returns the current logger instance.\n *\n * @returns {Logger}\n */\nexports.getInstance = function () {\n  // use the browser implementation of logger as the default implementation;\n  // we do this so that unit tests don't fail when the modules they're testing\n  // log messages\n  if (!instance) {\n    instance = new BrowserLogger();\n  }\n\n  return instance;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9saWIvbG9nZ2VyLmpzIiwibWFwcGluZ3MiOiJBQUFBLHNCQUFzQixtQkFBTyxDQUFDLGtGQUFrQjs7QUFFaEQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxHQUFHO0FBQ2Q7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWN0b3J3aWxzb24vRGVza3RvcC9wcm9qZWN0cy9FWlZpei9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9saWIvbG9nZ2VyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEJyb3dzZXJMb2dnZXIgPSByZXF1aXJlKCcuL2xvZ2dlci9icm93c2VyJyk7XG5cbmxldCBpbnN0YW5jZTtcblxuLyoqXG4gKiBTZXRzIHRoZSBsb2dnZXIgaW5zdGFuY2UuIEZvciBpbnRlcm5hbCB1c2Ugb25seS5cbiAqXG4gKiBAcGFyYW0geyp9IG5ld0luc3RhbmNlXG4gKi9cbmV4cG9ydHMuc2V0SW5zdGFuY2UgPSBmdW5jdGlvbiAobmV3SW5zdGFuY2UpIHtcbiAgaW5zdGFuY2UgPSBuZXdJbnN0YW5jZTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgY3VycmVudCBsb2dnZXIgaW5zdGFuY2UuXG4gKlxuICogQHJldHVybnMge0xvZ2dlcn1cbiAqL1xuZXhwb3J0cy5nZXRJbnN0YW5jZSA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gdXNlIHRoZSBicm93c2VyIGltcGxlbWVudGF0aW9uIG9mIGxvZ2dlciBhcyB0aGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbjtcbiAgLy8gd2UgZG8gdGhpcyBzbyB0aGF0IHVuaXQgdGVzdHMgZG9uJ3QgZmFpbCB3aGVuIHRoZSBtb2R1bGVzIHRoZXkncmUgdGVzdGluZ1xuICAvLyBsb2cgbWVzc2FnZXNcbiAgaWYgKCFpbnN0YW5jZSkge1xuICAgIGluc3RhbmNlID0gbmV3IEJyb3dzZXJMb2dnZXIoKTtcbiAgfVxuXG4gIHJldHVybiBpbnN0YW5jZTtcbn07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/lib/logger.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/lib/logger/browser.js":
/*!**********************************************************!*\
  !*** ./node_modules/snowflake-sdk/lib/logger/browser.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Util = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/snowflake-sdk/lib/util.js\");\nconst Core = __webpack_require__(/*! ./core */ \"(rsc)/./node_modules/snowflake-sdk/lib/logger/core.js\");\n\n/**\n * Creates a new Logger instance for when we're running in the browser.\n *\n * @param {Object} [options]\n *\n * @constructor\n */\nfunction Logger(options) {\n  /**\n   * The array to which all log messages will be added.\n   *\n   * @type {String[]}\n   */\n  const buffer = [];\n\n  /**\n   * Logs a message at a given level.\n   *\n   * @param {String} levelTag the tag associated with the level at which to log\n   *   the message.\n   * @param {String} message the message to log.\n   * @param {Number} bufferMaxLength the maximum size to which the message\n   *   buffer can grow.\n   */\n  const logMessage = function (levelTag, message, bufferMaxLength) {\n    // add the log level tag (e.g. info, warn, etc.) to the front of the message\n    message = Util.format('%s: %s', levelTag, message);\n\n    // if the buffer is full, evict old messages\n    while (buffer.length >= bufferMaxLength) {\n      buffer.shift();\n    }\n\n    // add the new message to the buffer\n    buffer.push(message);\n  };\n\n  // create an inner implementation to which all our methods will be forwarded\n  const common = Core.createLogger(options, logMessage);\n\n  /**\n   * Configures this logger.\n   *\n   * @param {Object} options\n   */\n  this.configure = function (options) {\n    common.configure(options);\n  };\n\n  /**\n   * Returns the current log level.\n   *\n   * @returns {Number}\n   */\n  this.getLevel = function () {\n    return common.getLevelNumber();\n  };\n\n  /**\n   * Logs a given message at the error level.\n   *\n   * @param {String} message\n   * @param params\n   */\n  this.error = function (message, ...params) {\n    common.error.apply(common, [message, ...params]);\n  };\n\n  /**\n   * Logs a given message at the warning level.\n   *\n   * @param {String} message\n   * @param params\n   */\n  this.warn = function (message, ...params) {\n    common.warn.apply(common, [message, ...params]);\n  };\n\n  /**\n   * Logs a given message at the info level.\n   *\n   * @param {String} message\n   * @param params\n   */\n  this.info = function (message, ...params) {\n    common.info.apply(common, [message, ...params]);\n  };\n\n  /**\n   * Logs a given message at the debug level.\n   *\n   * @param {String} message\n   * @param params\n   */\n  this.debug = function (message, ...params) {\n    common.debug.apply(common, [message, ...params]);\n  };\n\n  /**\n   * Logs a given message at the trace level.\n   *\n   * @param {String} message\n   * @param params\n   */\n  this.trace = function (message, ...params ) {\n    common.trace.apply(common, [message, ...params]);\n  };\n\n  /**\n   * Returns the log buffer.\n   *\n   * @returns {String[]}\n   */\n  this.getLogBuffer = function () {\n    // return a copy of the buffer array; calling slice() shallow-copies the\n    // original array, but that's sufficient in this case because the array\n    // contains strings\n    return buffer.slice();\n  };\n}\n\nmodule.exports = Logger;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9saWIvbG9nZ2VyL2Jyb3dzZXIuanMiLCJtYXBwaW5ncyI6IkFBQUEsYUFBYSxtQkFBTyxDQUFDLCtEQUFTO0FBQzlCLGFBQWEsbUJBQU8sQ0FBQyxxRUFBUTs7QUFFN0I7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQSwwQ0FBMEM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcndpbHNvbi9EZXNrdG9wL3Byb2plY3RzL0VaVml6L25vZGVfbW9kdWxlcy9zbm93Zmxha2Utc2RrL2xpYi9sb2dnZXIvYnJvd3Nlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBVdGlsID0gcmVxdWlyZSgnLi4vdXRpbCcpO1xuY29uc3QgQ29yZSA9IHJlcXVpcmUoJy4vY29yZScpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgTG9nZ2VyIGluc3RhbmNlIGZvciB3aGVuIHdlJ3JlIHJ1bm5pbmcgaW4gdGhlIGJyb3dzZXIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBMb2dnZXIob3B0aW9ucykge1xuICAvKipcbiAgICogVGhlIGFycmF5IHRvIHdoaWNoIGFsbCBsb2cgbWVzc2FnZXMgd2lsbCBiZSBhZGRlZC5cbiAgICpcbiAgICogQHR5cGUge1N0cmluZ1tdfVxuICAgKi9cbiAgY29uc3QgYnVmZmVyID0gW107XG5cbiAgLyoqXG4gICAqIExvZ3MgYSBtZXNzYWdlIGF0IGEgZ2l2ZW4gbGV2ZWwuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBsZXZlbFRhZyB0aGUgdGFnIGFzc29jaWF0ZWQgd2l0aCB0aGUgbGV2ZWwgYXQgd2hpY2ggdG8gbG9nXG4gICAqICAgdGhlIG1lc3NhZ2UuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIHRoZSBtZXNzYWdlIHRvIGxvZy5cbiAgICogQHBhcmFtIHtOdW1iZXJ9IGJ1ZmZlck1heExlbmd0aCB0aGUgbWF4aW11bSBzaXplIHRvIHdoaWNoIHRoZSBtZXNzYWdlXG4gICAqICAgYnVmZmVyIGNhbiBncm93LlxuICAgKi9cbiAgY29uc3QgbG9nTWVzc2FnZSA9IGZ1bmN0aW9uIChsZXZlbFRhZywgbWVzc2FnZSwgYnVmZmVyTWF4TGVuZ3RoKSB7XG4gICAgLy8gYWRkIHRoZSBsb2cgbGV2ZWwgdGFnIChlLmcuIGluZm8sIHdhcm4sIGV0Yy4pIHRvIHRoZSBmcm9udCBvZiB0aGUgbWVzc2FnZVxuICAgIG1lc3NhZ2UgPSBVdGlsLmZvcm1hdCgnJXM6ICVzJywgbGV2ZWxUYWcsIG1lc3NhZ2UpO1xuXG4gICAgLy8gaWYgdGhlIGJ1ZmZlciBpcyBmdWxsLCBldmljdCBvbGQgbWVzc2FnZXNcbiAgICB3aGlsZSAoYnVmZmVyLmxlbmd0aCA+PSBidWZmZXJNYXhMZW5ndGgpIHtcbiAgICAgIGJ1ZmZlci5zaGlmdCgpO1xuICAgIH1cblxuICAgIC8vIGFkZCB0aGUgbmV3IG1lc3NhZ2UgdG8gdGhlIGJ1ZmZlclxuICAgIGJ1ZmZlci5wdXNoKG1lc3NhZ2UpO1xuICB9O1xuXG4gIC8vIGNyZWF0ZSBhbiBpbm5lciBpbXBsZW1lbnRhdGlvbiB0byB3aGljaCBhbGwgb3VyIG1ldGhvZHMgd2lsbCBiZSBmb3J3YXJkZWRcbiAgY29uc3QgY29tbW9uID0gQ29yZS5jcmVhdGVMb2dnZXIob3B0aW9ucywgbG9nTWVzc2FnZSk7XG5cbiAgLyoqXG4gICAqIENvbmZpZ3VyZXMgdGhpcyBsb2dnZXIuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAqL1xuICB0aGlzLmNvbmZpZ3VyZSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgY29tbW9uLmNvbmZpZ3VyZShvcHRpb25zKTtcbiAgfTtcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgY3VycmVudCBsb2cgbGV2ZWwuXG4gICAqXG4gICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAqL1xuICB0aGlzLmdldExldmVsID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBjb21tb24uZ2V0TGV2ZWxOdW1iZXIoKTtcbiAgfTtcblxuICAvKipcbiAgICogTG9ncyBhIGdpdmVuIG1lc3NhZ2UgYXQgdGhlIGVycm9yIGxldmVsLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAcGFyYW0gcGFyYW1zXG4gICAqL1xuICB0aGlzLmVycm9yID0gZnVuY3Rpb24gKG1lc3NhZ2UsIC4uLnBhcmFtcykge1xuICAgIGNvbW1vbi5lcnJvci5hcHBseShjb21tb24sIFttZXNzYWdlLCAuLi5wYXJhbXNdKTtcbiAgfTtcblxuICAvKipcbiAgICogTG9ncyBhIGdpdmVuIG1lc3NhZ2UgYXQgdGhlIHdhcm5pbmcgbGV2ZWwuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBwYXJhbSBwYXJhbXNcbiAgICovXG4gIHRoaXMud2FybiA9IGZ1bmN0aW9uIChtZXNzYWdlLCAuLi5wYXJhbXMpIHtcbiAgICBjb21tb24ud2Fybi5hcHBseShjb21tb24sIFttZXNzYWdlLCAuLi5wYXJhbXNdKTtcbiAgfTtcblxuICAvKipcbiAgICogTG9ncyBhIGdpdmVuIG1lc3NhZ2UgYXQgdGhlIGluZm8gbGV2ZWwuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBwYXJhbSBwYXJhbXNcbiAgICovXG4gIHRoaXMuaW5mbyA9IGZ1bmN0aW9uIChtZXNzYWdlLCAuLi5wYXJhbXMpIHtcbiAgICBjb21tb24uaW5mby5hcHBseShjb21tb24sIFttZXNzYWdlLCAuLi5wYXJhbXNdKTtcbiAgfTtcblxuICAvKipcbiAgICogTG9ncyBhIGdpdmVuIG1lc3NhZ2UgYXQgdGhlIGRlYnVnIGxldmVsLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAcGFyYW0gcGFyYW1zXG4gICAqL1xuICB0aGlzLmRlYnVnID0gZnVuY3Rpb24gKG1lc3NhZ2UsIC4uLnBhcmFtcykge1xuICAgIGNvbW1vbi5kZWJ1Zy5hcHBseShjb21tb24sIFttZXNzYWdlLCAuLi5wYXJhbXNdKTtcbiAgfTtcblxuICAvKipcbiAgICogTG9ncyBhIGdpdmVuIG1lc3NhZ2UgYXQgdGhlIHRyYWNlIGxldmVsLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAcGFyYW0gcGFyYW1zXG4gICAqL1xuICB0aGlzLnRyYWNlID0gZnVuY3Rpb24gKG1lc3NhZ2UsIC4uLnBhcmFtcyApIHtcbiAgICBjb21tb24udHJhY2UuYXBwbHkoY29tbW9uLCBbbWVzc2FnZSwgLi4ucGFyYW1zXSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGxvZyBidWZmZXIuXG4gICAqXG4gICAqIEByZXR1cm5zIHtTdHJpbmdbXX1cbiAgICovXG4gIHRoaXMuZ2V0TG9nQnVmZmVyID0gZnVuY3Rpb24gKCkge1xuICAgIC8vIHJldHVybiBhIGNvcHkgb2YgdGhlIGJ1ZmZlciBhcnJheTsgY2FsbGluZyBzbGljZSgpIHNoYWxsb3ctY29waWVzIHRoZVxuICAgIC8vIG9yaWdpbmFsIGFycmF5LCBidXQgdGhhdCdzIHN1ZmZpY2llbnQgaW4gdGhpcyBjYXNlIGJlY2F1c2UgdGhlIGFycmF5XG4gICAgLy8gY29udGFpbnMgc3RyaW5nc1xuICAgIHJldHVybiBidWZmZXIuc2xpY2UoKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBMb2dnZXI7Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/lib/logger/browser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/lib/logger/core.js":
/*!*******************************************************!*\
  !*** ./node_modules/snowflake-sdk/lib/logger/core.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const moment = __webpack_require__(/*! moment */ \"(rsc)/./node_modules/moment/moment.js\");\nconst Util = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/snowflake-sdk/lib/util.js\");\nconst Errors = __webpack_require__(/*! ../errors */ \"(rsc)/./node_modules/snowflake-sdk/lib/errors.js\");\nconst SecretDetector = new (__webpack_require__(/*! ../secret_detector.js */ \"(rsc)/./node_modules/snowflake-sdk/lib/secret_detector.js\"))();\n\nconst LOG_LEVEL_OFF =\n  {\n    tag: 'OFF',\n    level: -1\n  };\n\nconst LOG_LEVEL_ERROR =\n  {\n    tag: 'ERROR',\n    level: 0\n  };\n\nconst LOG_LEVEL_WARN =\n  {\n    tag: 'WARN',\n    level: 1\n  };\n\nconst LOG_LEVEL_INFO =\n  {\n    tag: 'INFO',\n    level: 2\n  };\n\nconst LOG_LEVEL_DEBUG =\n  {\n    tag: 'DEBUG',\n    level: 3\n  };\n\nconst LOG_LEVEL_TRACE =\n  {\n    tag: 'TRACE',\n    level: 4\n  };\n\nconst LOG_LEVELS =\n  [\n    LOG_LEVEL_OFF,\n    LOG_LEVEL_ERROR,\n    LOG_LEVEL_WARN,\n    LOG_LEVEL_INFO,\n    LOG_LEVEL_DEBUG,\n    LOG_LEVEL_TRACE\n  ];\n\nconst LOG_LEVEL_TAGS = {\n  OFF: LOG_LEVEL_OFF.tag,\n  ERROR: LOG_LEVEL_ERROR.tag,\n  WARN: LOG_LEVEL_WARN.tag,\n  INFO: LOG_LEVEL_INFO.tag,\n  DEBUG: LOG_LEVEL_DEBUG.tag,\n  TRACE: LOG_LEVEL_TRACE.tag,\n};\nexports.LOG_LEVEL_TAGS = LOG_LEVEL_TAGS;\n\n// create two maps, one in which the key is the log level and the value is the\n// corresponding log level object, and another in which the key is the log tag\n// and the value is the corresponding log level\nconst MAP_LOG_LEVEL_TO_OBJECT = {};\nconst MAP_LOG_TAG_TO_LEVEL = {};\nfor (let index = 0, length = LOG_LEVELS.length; index < length; index++) {\n  const logLevelObject = LOG_LEVELS[index];\n  MAP_LOG_LEVEL_TO_OBJECT[logLevelObject.level] = logLevelObject;\n  MAP_LOG_TAG_TO_LEVEL[logLevelObject.tag] = logLevelObject.level;\n}\n\nconst DEFAULT_BUFFER_MAX_LENGTH = 500;\nconst DEFAULT_MESSAGE_MAX_LENGTH = 500;\nconst DEFAULT_LEVEL = LOG_LEVEL_INFO;\n\n/**\n * Creates a new Logger instance.\n *\n * @param options {Object}\n * @param logMessage {Function}\n * @param reconfigureOperation {Function} Action to perform to change log destination file\n *\n * @returns {Object}\n */\nexports.createLogger = function (options, logMessage, reconfigureOperation) {\n  // a log function must be specified\n  Errors.assertInternal(Util.isFunction(logMessage));\n\n  /**\n   * Whether to include the current timestamp in the log message.\n   */\n  let includeTimestamp;\n\n  /**\n   * The maximum size (in terms of number of messages) to which the log buffer\n   * can grow.\n   *\n   * @type {Number}\n   */\n  let bufferMaxLength;\n\n  /**\n   * The maximum message length. Longer messages will be truncated.\n   *\n   * @type {Number}\n   */\n  let messageMaxLength;\n\n  /**\n   * The current log level. Any message logged at a lower level won't be added\n   * to the log buffer.\n   *\n   * @type {Object}\n   */\n  let currlevelObject;\n\n  // create a new logger instance\n  const logger = {\n    /**\n     * Configures this logger.\n     *\n     * @param {Object} options\n     */\n    configure: function (options) {\n      let localIncludeTimestamp;\n      let localBufferMaxLength;\n      let localMessageMaxLength;\n      let localLevel;\n      let localFilePath;\n      let localAdditionalLogToConsole;\n\n      // if an options argument is specified\n      if (Util.exists(options)) {\n        // make sure it's an object\n        Errors.assertInternal(Util.isObject(options));\n\n        localIncludeTimestamp = options.includeTimestamp;\n        localBufferMaxLength = options.bufferMaxLength;\n        localMessageMaxLength = options.messageMaxLength;\n        localLevel = options.level;\n        localFilePath = options.filePath;\n        localAdditionalLogToConsole = options.additionalLogToConsole;\n      }\n\n      // if an includeTimestamp options is specified, convert it to a boolean\n      if (Util.exists(localIncludeTimestamp)) {\n        includeTimestamp = !!localIncludeTimestamp;\n      } else if (!Util.exists(includeTimestamp)) {\n        // default to true\n        includeTimestamp = true;\n      }\n\n      // if a bufferMaxLength option is specified, make sure\n      // it's a positive integer before updating the logger option\n      if (Util.exists(localBufferMaxLength)) {\n        Errors.assertInternal(\n          Util.number.isPositiveInteger(localBufferMaxLength));\n        bufferMaxLength = localBufferMaxLength;\n      } else if (!Util.exists(bufferMaxLength)) { // initialize logger option if configure() hasn't been called before\n        bufferMaxLength = DEFAULT_BUFFER_MAX_LENGTH;\n      }\n\n      // if a messageMaxLength option is specified, make sure\n      // it's a positive integer before updating the logger option\n      if (Util.exists(localMessageMaxLength)) {\n        Errors.assertInternal(\n          Util.number.isPositiveInteger(localMessageMaxLength));\n        messageMaxLength = localMessageMaxLength;\n      } else if (!Util.exists(messageMaxLength)) { // initialize logger option if configure() hasn't been called before\n        messageMaxLength = DEFAULT_MESSAGE_MAX_LENGTH;\n      }\n\n      // if a level option is specified, make sure\n      // it's valid before updating the logger option\n      if (Util.exists(localLevel)) {\n        Errors.assertInternal(\n          Object.prototype.hasOwnProperty.call(MAP_LOG_LEVEL_TO_OBJECT, localLevel));\n        currlevelObject = MAP_LOG_LEVEL_TO_OBJECT[localLevel];\n      } else if (!Util.exists(currlevelObject)) { // initialize logger option if configure() hasn't been called before\n        currlevelObject = DEFAULT_LEVEL;\n      }\n\n      if (Util.isFunction(reconfigureOperation)) {\n        reconfigureOperation(localFilePath, localAdditionalLogToConsole);\n      }\n    },\n\n    /**\n     * Logs a given message at the error level.\n     *\n     * @param {String} message\n     */\n    error: function (message) {\n      log(LOG_LEVEL_ERROR, message, getMessageArgs(arguments));\n    },\n\n    /**\n     * Logs a given message at the warn level.\n     *\n     * @param {String} message\n     */\n    warn: function (message) {\n      log(LOG_LEVEL_WARN, message, getMessageArgs(arguments));\n    },\n\n    /**\n     * Logs a given message at the info level.\n     *\n     * @param {String} message\n     */\n    info: function (message) {\n      log(LOG_LEVEL_INFO, message, getMessageArgs(arguments));\n    },\n\n    /**\n     * Logs a given message at the debug level.\n     *\n     * @param {String} message\n     */\n    debug: function (message) {\n      log(LOG_LEVEL_DEBUG, message, getMessageArgs(arguments));\n    },\n\n    /**\n     * Logs a given message at the trace level.\n     *\n     * @param {String} message\n     */\n    trace: function (message) {\n      log(LOG_LEVEL_TRACE, message, getMessageArgs(arguments));\n    },\n\n    /**\n     * Returns the log buffer.\n     *\n     * @returns {String[]}\n     */\n    getLogBuffer: function () {\n      return [];\n    },\n\n    /**\n     * Returns the level number associated with the current log level.\n     *\n     * @returns {Number}\n     */\n    getLevelNumber: function () {\n      return currlevelObject.level;\n    },\n\n    /**\n     * Returns the tag associated with the current log level.\n     *\n     * @returns {String}\n     */\n    getLevelTag: function () {\n      return currlevelObject.tag;\n    },\n\n    /**\n     * Returns a map in which the keys are the level tags and the values are the\n     * corresponding log levels.\n     *\n     * @returns {Object}\n     */\n    getLevelTagsMap: function () {\n      return MAP_LOG_TAG_TO_LEVEL;\n    }\n  };\n\n  // configure the logger\n  logger.configure(options);\n\n  /**\n   * Logs a message at a given level.\n   *\n   * @param {Object} targetLevelObject the level at which to log the message.\n   * @param {String} message the message template.\n   * @param {String[]} messageArgs any arguments to substitute into the message.\n   */\n  const log = function (targetLevelObject, message, messageArgs) {\n    // the message should not be logged if the target\n    // level is more verbose than the current level\n    if (targetLevelObject.level <= currlevelObject.level) {\n      // substitute the messageArgs into the message template\n      messageArgs.unshift(message);\n      message = Util.format.apply(Util, messageArgs);\n\n      // truncate the message if it's too long\n      if (message.length > messageMaxLength) {\n        message = message.slice(0, messageMaxLength);\n      }\n\n      // if needed, add the current time to the front of the message\n      if (includeTimestamp) {\n        message = Util.format(\n          '[%s]: %s', moment().format('h:mm:ss.SSS A'), message);\n      }\n\n      // mask secrets\n      message = SecretDetector.maskSecrets(message).maskedtxt;\n\n      // log the message\n      logMessage(targetLevelObject.tag, message, bufferMaxLength);\n    }\n  };\n\n  return logger;\n};\n\nexports.isValidLogTag = function (logTag) {\n  if (!Util.isString(logTag)) {\n    return false;\n  }\n\n  return (Object.prototype.hasOwnProperty.call(MAP_LOG_TAG_TO_LEVEL, logTag.toUpperCase()));\n\n};\n\nexports.logTagToLevel = function (logTag) {\n  Errors.assertInternal(Util.isString(logTag));\n  return MAP_LOG_TAG_TO_LEVEL[logTag.toUpperCase()];\n};\n\n/**\n * Helper method to extract the messageArgs from the arguments passed to\n * trace(), debug(), info(), warn() and error().\n *\n * @param {Object} args\n *\n * @returns {*}\n */\nfunction getMessageArgs(args) {\n  return Array.prototype.slice.call(args, 1);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/lib/logger/core.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/lib/logger/easy_logging_starter.js":
/*!***********************************************************************!*\
  !*** ./node_modules/snowflake-sdk/lib/logger/easy_logging_starter.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const os = __webpack_require__(/*! os */ \"os\");\nconst path = __webpack_require__(/*! path */ \"path\");\nconst fsPromises = __webpack_require__(/*! fs/promises */ \"fs/promises\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst { logTagToLevel } = __webpack_require__(/*! ./core */ \"(rsc)/./node_modules/snowflake-sdk/lib/logger/core.js\");\nconst { ConfigurationUtil, Levels } = __webpack_require__(/*! ../configuration/client_configuration */ \"(rsc)/./node_modules/snowflake-sdk/lib/configuration/client_configuration.js\");\nconst Logger = __webpack_require__(/*! ../logger */ \"(rsc)/./node_modules/snowflake-sdk/lib/logger.js\");\nconst { isFileModeCorrect } = __webpack_require__(/*! ../file_util */ \"(rsc)/./node_modules/snowflake-sdk/lib/file_util.js\");\nconst { exists } = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/snowflake-sdk/lib/util.js\");\nconst clientConfiguration = new ConfigurationUtil();\nconst getClientConfig = clientConfiguration.getClientConfig;\n\nlet initTrialParameters;\n\n/**\n * @param {string} configFilePathFromConnectionString\n * @returns {Promise<void>}\n */\nexports.init = async function (configFilePathFromConnectionString) {\n  try {\n    if (!allowedToInitialize(configFilePathFromConnectionString)) {\n      return;\n    }\n    Logger.getInstance().info('Trying to initialize Easy Logging');\n    const config = await getClientConfig(configFilePathFromConnectionString);\n    if (!config) {\n      Logger.getInstance().info('Easy Logging is disabled as no config has been found');\n      initTrialParameters = {\n        configFilePathFromConnectionString: configFilePathFromConnectionString\n      };\n      return;\n    }\n    const logLevel = mapLogLevel(config);\n    const logPath = await getLogPath(config);\n    const logger = Logger.getInstance();\n    logger.info('Initializing Easy Logging with logPath=%s and logLevel=%s from file: %s', logPath, config.loggingConfig.logLevel, config.configPath);\n    logger.configure({\n      level: logLevel,\n      filePath: path.join(logPath, 'snowflake.log'),\n      additionalLogToConsole: false\n    });\n    logger.easyLoggingConfigureCounter = (logger.easyLoggingConfigureCounter ?? 0) + 1;\n    initTrialParameters = {\n      configFilePathFromConnectionString: configFilePathFromConnectionString\n    };\n  } catch (err) {\n    const error = new EasyLoggingError('Failed to initialize easy logging', err);\n    Logger.getInstance().error(error);\n    throw error;\n  }\n};\n\nexports.reset = function () {\n  initTrialParameters = undefined;\n  Logger.getInstance().easyLoggingConfigureCounter = undefined;\n};\n\nfunction allowedToInitialize(configFilePathFromConnectionString) {\n  const everTriedToInitialize = !!initTrialParameters;\n  const triedToInitializeWithoutConfigFile = everTriedToInitialize && initTrialParameters.configFilePathFromConnectionString == null;\n  const isGivenConfigFilePath = !!configFilePathFromConnectionString;\n  const isAllowedToInitialize = !everTriedToInitialize || (triedToInitializeWithoutConfigFile && isGivenConfigFilePath);\n  if (!isAllowedToInitialize && initTrialParameters.configFilePathFromConnectionString !== configFilePathFromConnectionString) {\n    Logger.getInstance().warn(`Easy logging will not be configured for CLIENT_CONFIG_FILE=${configFilePathFromConnectionString} because it was previously configured for a different client config`);\n  }\n  return isAllowedToInitialize;\n}\n\nfunction mapLogLevel(config) {\n  const configLogLevel = getLogLevel(config);\n  const logLevelNumber = logTagToLevel(configLogLevel);\n  if (logLevelNumber === null || logLevelNumber === undefined) {\n    throw new Error('Failed to convert configuration log level into internal one');\n  }\n  return logLevelNumber;\n}\n\nfunction getLogLevel(config) {\n  const logLevel = config.loggingConfig.logLevel;\n  if (!logLevel) {\n    Logger.getInstance().warn('LogLevel in client config not found. Using default value: OFF');\n    return Levels.Off;\n  }\n  return logLevel;\n}\n\nasync function getLogPath(config) {\n  let logPath = config.loggingConfig.logPath;\n  if (!logPath) {\n    Logger.getInstance().warn('LogPath in client config not found. Using home directory as a default value');\n    logPath = os.homedir();\n    if (!exists(logPath)) {\n      throw new EasyLoggingError('Home directory does not exist');\n    }\n  }\n  const pathWithNodeJsSubdirectory = path.join(logPath, 'nodejs');\n  await fsPromises.access(pathWithNodeJsSubdirectory, fs.constants.F_OK)\n    .then(async () => {\n      if (!(await isFileModeCorrect(pathWithNodeJsSubdirectory, 0o700, fsPromises))) {\n        Logger.getInstance().warn('Log directory: %s could potentially be accessed by others', pathWithNodeJsSubdirectory);\n      }\n    })\n    .catch(async () => {\n      try {\n        await fsPromises.mkdir(pathWithNodeJsSubdirectory, { recursive: true, mode: 0o700 });\n      } catch (err) {\n        throw new EasyLoggingError(`Failed to create the directory for logs: ${pathWithNodeJsSubdirectory}`);\n      }\n    });\n  return pathWithNodeJsSubdirectory;\n}\n\nclass EasyLoggingError extends Error {\n  name = 'EasyLoggingError';\n\n  constructor(message, cause) {\n    super(message);\n    this.cause = cause;\n    Error.captureStackTrace(this, this.constructor);\n  }\n\n  toString() {\n    return this.message + ': ' + this.cause.toString();\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/lib/logger/easy_logging_starter.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/lib/logger/execution_timer.js":
/*!******************************************************************!*\
  !*** ./node_modules/snowflake-sdk/lib/logger/execution_timer.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const { performance } = __webpack_require__(/*! perf_hooks */ \"perf_hooks\");\nconst Logger = __webpack_require__(/*! ../logger */ \"(rsc)/./node_modules/snowflake-sdk/lib/logger.js\");\nconst Util = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/snowflake-sdk/lib/util.js\");\n\nfunction ExecutionTimer() {\n  let startTime = null;\n  let endTime = null;\n\n  // Private function to log and check if the timer was started\n  function wasStarted() {\n    return Util.exists(startTime);\n\n  }\n\n  this.start = function () {\n    startTime = performance.now();\n    endTime = null; // Reset endTime if the timer is reused\n    return this;\n  };\n\n\n  this.stop = function () {\n    if (!wasStarted()) {\n      // Returning this to allow chaining even after invalid call.\n      // startTime can be used to check, if any start point was ever recorded.\n      Logger.getInstance().debug('Tried to stop timer, that was not started');\n      return this;\n    }\n    endTime = performance.now();\n    return this;\n  };\n\n  // Get the duration in milliseconds\n  this.getDuration = function () {\n    if (!wasStarted()) {\n      return;\n    }\n    if (endTime === null) {\n      endTime = performance.now();\n    }\n    return endTime - startTime;\n  };\n}\n\nmodule.exports = ExecutionTimer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9saWIvbG9nZ2VyL2V4ZWN1dGlvbl90aW1lci5qcyIsIm1hcHBpbmdzIjoiQUFBQSxRQUFRLGNBQWMsRUFBRSxtQkFBTyxDQUFDLDhCQUFZO0FBQzVDLGVBQWUsbUJBQU8sQ0FBQyxtRUFBVztBQUNsQyxhQUFhLG1CQUFPLENBQUMsK0RBQVM7O0FBRTlCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyIvVXNlcnMvdmljdG9yd2lsc29uL0Rlc2t0b3AvcHJvamVjdHMvRVpWaXovbm9kZV9tb2R1bGVzL3Nub3dmbGFrZS1zZGsvbGliL2xvZ2dlci9leGVjdXRpb25fdGltZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBwZXJmb3JtYW5jZSB9ID0gcmVxdWlyZSgncGVyZl9ob29rcycpO1xuY29uc3QgTG9nZ2VyID0gcmVxdWlyZSgnLi4vbG9nZ2VyJyk7XG5jb25zdCBVdGlsID0gcmVxdWlyZSgnLi4vdXRpbCcpO1xuXG5mdW5jdGlvbiBFeGVjdXRpb25UaW1lcigpIHtcbiAgbGV0IHN0YXJ0VGltZSA9IG51bGw7XG4gIGxldCBlbmRUaW1lID0gbnVsbDtcblxuICAvLyBQcml2YXRlIGZ1bmN0aW9uIHRvIGxvZyBhbmQgY2hlY2sgaWYgdGhlIHRpbWVyIHdhcyBzdGFydGVkXG4gIGZ1bmN0aW9uIHdhc1N0YXJ0ZWQoKSB7XG4gICAgcmV0dXJuIFV0aWwuZXhpc3RzKHN0YXJ0VGltZSk7XG5cbiAgfVxuXG4gIHRoaXMuc3RhcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgc3RhcnRUaW1lID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgZW5kVGltZSA9IG51bGw7IC8vIFJlc2V0IGVuZFRpbWUgaWYgdGhlIHRpbWVyIGlzIHJldXNlZFxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG5cbiAgdGhpcy5zdG9wID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghd2FzU3RhcnRlZCgpKSB7XG4gICAgICAvLyBSZXR1cm5pbmcgdGhpcyB0byBhbGxvdyBjaGFpbmluZyBldmVuIGFmdGVyIGludmFsaWQgY2FsbC5cbiAgICAgIC8vIHN0YXJ0VGltZSBjYW4gYmUgdXNlZCB0byBjaGVjaywgaWYgYW55IHN0YXJ0IHBvaW50IHdhcyBldmVyIHJlY29yZGVkLlxuICAgICAgTG9nZ2VyLmdldEluc3RhbmNlKCkuZGVidWcoJ1RyaWVkIHRvIHN0b3AgdGltZXIsIHRoYXQgd2FzIG5vdCBzdGFydGVkJyk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgZW5kVGltZSA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIEdldCB0aGUgZHVyYXRpb24gaW4gbWlsbGlzZWNvbmRzXG4gIHRoaXMuZ2V0RHVyYXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF3YXNTdGFydGVkKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGVuZFRpbWUgPT09IG51bGwpIHtcbiAgICAgIGVuZFRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICB9XG4gICAgcmV0dXJuIGVuZFRpbWUgLSBzdGFydFRpbWU7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRXhlY3V0aW9uVGltZXI7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/lib/logger/execution_timer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/lib/logger/logging_util.js":
/*!***************************************************************!*\
  !*** ./node_modules/snowflake-sdk/lib/logger/logging_util.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const Util = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/snowflake-sdk/lib/util.js\");\n\nconst PROVIDED_TEXT = 'provided';\nconst NOT_PROVIDED_TEXT = 'not provided';\n\n/**\n * Describes the presence of a given value. If the value is not empty (as a string),\n * returns the corresponding text (by default: 'provided' or 'not provided').\n *\n * @param {*} valueToDescribe - The value to check for presence.\n * @param {Object} [options] - Optional overrides for the \"provided\" and \"not provided\" text.\n * @param {string} [options.overrideProvidedText]\n * @param {string} [options.overrideNotProvidedText]\n * @returns {string} A string indicating the presence of `valueToDescribe`.\n */\nexports.describePresence = function (valueToDescribe, { overrideProvidedText, overrideNotProvidedText } = {}) {\n  const providedText = overrideProvidedText || PROVIDED_TEXT;\n  const notProvidedText = overrideNotProvidedText || NOT_PROVIDED_TEXT;\n  return Util.isNotEmptyAsString(valueToDescribe) ? providedText : notProvidedText;\n};\n\n/**\n * @param {Object} sourceObject - The object holding attribute values.\n * @param {Array<string>} attributesWithValues - Attributes to show with their values.\n * @param {Array<string>} attributesWithoutValues - Attributes to show as present/not present.\n * @returns {string} Comma-separated string describing the attributes.\n */\nexports.attributesToString = function (\n  sourceObject = {},\n  attributesWithValues = [],\n  attributesWithoutValues = []\n) {\n  const withValues = attributesWithValues\n    .filter(attr => sourceObject[attr] !== undefined)\n    .map(attr => `${attr}=${String(sourceObject[attr])}`);\n\n  const withoutValues = attributesWithoutValues\n    .filter(attr => sourceObject[attr] !== undefined)\n    .map(attr => `${attr} is ${exports.describePresence(sourceObject[attr])}`);\n\n  return [...withValues, ...withoutValues].join(', ');\n};\n\n/**\n * @param {Object} sourceObject - The object holding attribute values.\n * @param {Array<string>} attributesWithValues - Attributes to show with their values.\n * @param {Array<string>} attributesWithoutValues - Attributes to show as present/not present.\n * @returns {string} A bracketed string of described attributes.\n */\nexports.describeAttributes = function (\n  sourceObject,\n  attributesWithValues,\n  attributesWithoutValues\n) {\n  const attributesDescription = exports.attributesToString(\n    sourceObject,\n    attributesWithValues,\n    attributesWithoutValues\n  );\n  return `[${attributesDescription}]`;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9saWIvbG9nZ2VyL2xvZ2dpbmdfdXRpbC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxhQUFhLG1CQUFPLENBQUMsK0RBQVM7O0FBRTlCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEdBQUc7QUFDZCxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixhQUFhLFFBQVE7QUFDckI7QUFDQSx3QkFBd0IsZ0NBQWdDLGdEQUFnRCxJQUFJO0FBQzVHO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsZUFBZTtBQUMxQixXQUFXLGVBQWU7QUFDMUIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0EsMEJBQTBCO0FBQzFCLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLEtBQUssR0FBRywyQkFBMkI7O0FBRXZEO0FBQ0E7QUFDQSxvQkFBb0IsTUFBTSxLQUFLLDZDQUE2Qzs7QUFFNUU7QUFDQTs7QUFFQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLGVBQWU7QUFDMUIsV0FBVyxlQUFlO0FBQzFCLGFBQWEsUUFBUTtBQUNyQjtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLHNCQUFzQjtBQUNuQyIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcndpbHNvbi9EZXNrdG9wL3Byb2plY3RzL0VaVml6L25vZGVfbW9kdWxlcy9zbm93Zmxha2Utc2RrL2xpYi9sb2dnZXIvbG9nZ2luZ191dGlsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFV0aWwgPSByZXF1aXJlKCcuLi91dGlsJyk7XG5cbmNvbnN0IFBST1ZJREVEX1RFWFQgPSAncHJvdmlkZWQnO1xuY29uc3QgTk9UX1BST1ZJREVEX1RFWFQgPSAnbm90IHByb3ZpZGVkJztcblxuLyoqXG4gKiBEZXNjcmliZXMgdGhlIHByZXNlbmNlIG9mIGEgZ2l2ZW4gdmFsdWUuIElmIHRoZSB2YWx1ZSBpcyBub3QgZW1wdHkgKGFzIGEgc3RyaW5nKSxcbiAqIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgdGV4dCAoYnkgZGVmYXVsdDogJ3Byb3ZpZGVkJyBvciAnbm90IHByb3ZpZGVkJykuXG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZVRvRGVzY3JpYmUgLSBUaGUgdmFsdWUgdG8gY2hlY2sgZm9yIHByZXNlbmNlLlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSAtIE9wdGlvbmFsIG92ZXJyaWRlcyBmb3IgdGhlIFwicHJvdmlkZWRcIiBhbmQgXCJub3QgcHJvdmlkZWRcIiB0ZXh0LlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLm92ZXJyaWRlUHJvdmlkZWRUZXh0XVxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLm92ZXJyaWRlTm90UHJvdmlkZWRUZXh0XVxuICogQHJldHVybnMge3N0cmluZ30gQSBzdHJpbmcgaW5kaWNhdGluZyB0aGUgcHJlc2VuY2Ugb2YgYHZhbHVlVG9EZXNjcmliZWAuXG4gKi9cbmV4cG9ydHMuZGVzY3JpYmVQcmVzZW5jZSA9IGZ1bmN0aW9uICh2YWx1ZVRvRGVzY3JpYmUsIHsgb3ZlcnJpZGVQcm92aWRlZFRleHQsIG92ZXJyaWRlTm90UHJvdmlkZWRUZXh0IH0gPSB7fSkge1xuICBjb25zdCBwcm92aWRlZFRleHQgPSBvdmVycmlkZVByb3ZpZGVkVGV4dCB8fCBQUk9WSURFRF9URVhUO1xuICBjb25zdCBub3RQcm92aWRlZFRleHQgPSBvdmVycmlkZU5vdFByb3ZpZGVkVGV4dCB8fCBOT1RfUFJPVklERURfVEVYVDtcbiAgcmV0dXJuIFV0aWwuaXNOb3RFbXB0eUFzU3RyaW5nKHZhbHVlVG9EZXNjcmliZSkgPyBwcm92aWRlZFRleHQgOiBub3RQcm92aWRlZFRleHQ7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2VPYmplY3QgLSBUaGUgb2JqZWN0IGhvbGRpbmcgYXR0cmlidXRlIHZhbHVlcy5cbiAqIEBwYXJhbSB7QXJyYXk8c3RyaW5nPn0gYXR0cmlidXRlc1dpdGhWYWx1ZXMgLSBBdHRyaWJ1dGVzIHRvIHNob3cgd2l0aCB0aGVpciB2YWx1ZXMuXG4gKiBAcGFyYW0ge0FycmF5PHN0cmluZz59IGF0dHJpYnV0ZXNXaXRob3V0VmFsdWVzIC0gQXR0cmlidXRlcyB0byBzaG93IGFzIHByZXNlbnQvbm90IHByZXNlbnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBDb21tYS1zZXBhcmF0ZWQgc3RyaW5nIGRlc2NyaWJpbmcgdGhlIGF0dHJpYnV0ZXMuXG4gKi9cbmV4cG9ydHMuYXR0cmlidXRlc1RvU3RyaW5nID0gZnVuY3Rpb24gKFxuICBzb3VyY2VPYmplY3QgPSB7fSxcbiAgYXR0cmlidXRlc1dpdGhWYWx1ZXMgPSBbXSxcbiAgYXR0cmlidXRlc1dpdGhvdXRWYWx1ZXMgPSBbXVxuKSB7XG4gIGNvbnN0IHdpdGhWYWx1ZXMgPSBhdHRyaWJ1dGVzV2l0aFZhbHVlc1xuICAgIC5maWx0ZXIoYXR0ciA9PiBzb3VyY2VPYmplY3RbYXR0cl0gIT09IHVuZGVmaW5lZClcbiAgICAubWFwKGF0dHIgPT4gYCR7YXR0cn09JHtTdHJpbmcoc291cmNlT2JqZWN0W2F0dHJdKX1gKTtcblxuICBjb25zdCB3aXRob3V0VmFsdWVzID0gYXR0cmlidXRlc1dpdGhvdXRWYWx1ZXNcbiAgICAuZmlsdGVyKGF0dHIgPT4gc291cmNlT2JqZWN0W2F0dHJdICE9PSB1bmRlZmluZWQpXG4gICAgLm1hcChhdHRyID0+IGAke2F0dHJ9IGlzICR7ZXhwb3J0cy5kZXNjcmliZVByZXNlbmNlKHNvdXJjZU9iamVjdFthdHRyXSl9YCk7XG5cbiAgcmV0dXJuIFsuLi53aXRoVmFsdWVzLCAuLi53aXRob3V0VmFsdWVzXS5qb2luKCcsICcpO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlT2JqZWN0IC0gVGhlIG9iamVjdCBob2xkaW5nIGF0dHJpYnV0ZSB2YWx1ZXMuXG4gKiBAcGFyYW0ge0FycmF5PHN0cmluZz59IGF0dHJpYnV0ZXNXaXRoVmFsdWVzIC0gQXR0cmlidXRlcyB0byBzaG93IHdpdGggdGhlaXIgdmFsdWVzLlxuICogQHBhcmFtIHtBcnJheTxzdHJpbmc+fSBhdHRyaWJ1dGVzV2l0aG91dFZhbHVlcyAtIEF0dHJpYnV0ZXMgdG8gc2hvdyBhcyBwcmVzZW50L25vdCBwcmVzZW50LlxuICogQHJldHVybnMge3N0cmluZ30gQSBicmFja2V0ZWQgc3RyaW5nIG9mIGRlc2NyaWJlZCBhdHRyaWJ1dGVzLlxuICovXG5leHBvcnRzLmRlc2NyaWJlQXR0cmlidXRlcyA9IGZ1bmN0aW9uIChcbiAgc291cmNlT2JqZWN0LFxuICBhdHRyaWJ1dGVzV2l0aFZhbHVlcyxcbiAgYXR0cmlidXRlc1dpdGhvdXRWYWx1ZXNcbikge1xuICBjb25zdCBhdHRyaWJ1dGVzRGVzY3JpcHRpb24gPSBleHBvcnRzLmF0dHJpYnV0ZXNUb1N0cmluZyhcbiAgICBzb3VyY2VPYmplY3QsXG4gICAgYXR0cmlidXRlc1dpdGhWYWx1ZXMsXG4gICAgYXR0cmlidXRlc1dpdGhvdXRWYWx1ZXNcbiAgKTtcbiAgcmV0dXJuIGBbJHthdHRyaWJ1dGVzRGVzY3JpcHRpb259XWA7XG59O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/lib/logger/logging_util.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/lib/logger/node.js":
/*!*******************************************************!*\
  !*** ./node_modules/snowflake-sdk/lib/logger/node.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const winston = __webpack_require__(/*! winston */ \"(rsc)/./node_modules/winston/lib/winston.js\");\nconst Core = __webpack_require__(/*! ./core */ \"(rsc)/./node_modules/snowflake-sdk/lib/logger/core.js\");\nconst Util = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/snowflake-sdk/lib/util.js\");\nconst Errors = __webpack_require__(/*! ../errors */ \"(rsc)/./node_modules/snowflake-sdk/lib/errors.js\");\n\nconst DEFAULT_ADDITIONAL_LOG_TO_CONSOLE = true;\n\n/**\n * Creates a new Logger instance for when we're running in node.\n *\n * @param {Object} [options]\n *\n * @constructor\n */\nfunction Logger(options) {\n  let winstonLogger;\n  const defaultFilePath = 'snowflake.log';\n  let filePath = getFilePath(options);\n  let additionalLogToConsole = DEFAULT_ADDITIONAL_LOG_TO_CONSOLE;\n  let transportLabels = [];\n\n  this.setLogger = function (logger) {\n    winstonLogger = logger;\n  };\n\n  /**\n   * This operation is for purpose of tests only. The idea is to force flushing logs to files.\n   * Winston logger emits 'finish' event before flushes all the transports so waiting for this event on logger is not good enough.\n   * For simplicity, we just close each transport without waiting here.\n   */\n  this.closeTransports = function () {\n    if (transportsCreated()) {\n      for (const transport of winstonLogger.transports) {\n        closeTransport(transport);\n      }\n    }\n  };\n\n  function transportsCreated() {\n    try {\n      winstonLogger.transports;\n      return true;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  function closeTransport(transport) {\n    if (!transport.close) {\n      return;\n    }\n    transport.close();\n  }\n\n  function reconfigureWinstonLogger(filePathInput, additionalLogToConsoleInput) {\n    const currentWinstonLogger = winstonLogger;\n    filePath = filePathInput ?? filePath;\n    if (Util.isBoolean(additionalLogToConsoleInput)) {\n      additionalLogToConsole = additionalLogToConsoleInput;\n    } else {\n      additionalLogToConsole = DEFAULT_ADDITIONAL_LOG_TO_CONSOLE;\n    }\n    winstonLogger = null; // it will be created for the first log operation\n    if (currentWinstonLogger) {\n      currentWinstonLogger.close();\n    }\n  }\n\n  function setTransportLabels(transportLabelsInput) {\n    transportLabels = transportLabelsInput;\n  }\n\n  this.getTransportLabels = function () {\n    return transportLabels;\n  };\n\n  /**\n   * Logs a message at a given level.\n   *\n   * @param {String} levelTag the tag associated with the level at which to log\n   *   the message.\n   * @param {String} message the message to log.\n   */\n  const logMessage = function (levelTag, message) {\n    // initialize the winston logger if needed\n    if (!winstonLogger) {\n      let transports;\n      let transportLabels;\n\n      if ('STDOUT' === filePath.toUpperCase()) {\n        transports = [new (winston.transports.Console)()];\n        transportLabels = ['Console'];\n      } else if (additionalLogToConsole === true) {\n        transports = [new (winston.transports.Console)(), new (winston.transports.File)({ filename: filePath })];\n        transportLabels = ['Console', 'File'];\n      } else {\n        transports = [new (winston.transports.File)({ filename: filePath })];\n        transportLabels = ['File'];\n      }\n\n      winstonLogger = new winston.createLogger(\n        {\n          transports: transports,\n          level: common.getLevelTag(),\n          levels: common.getLevelTagsMap()\n        });\n      setTransportLabels(transportLabels);\n    }\n\n    // get the appropriate logging method using the level tag and use this\n    // method to log the message\n    winstonLogger[levelTag](message);\n  };\n\n  // create an inner implementation to which all our methods will be forwarded\n  const common = Core.createLogger(options, logMessage, reconfigureWinstonLogger);\n\n  function getFilePath(options) {\n    if (Util.exists(options)) {\n      Errors.assertInternal(Util.isObject(options));\n      return options.filePath ?? defaultFilePath;\n    }\n    return defaultFilePath;\n  }\n\n  this.getLevelTag = function () {\n    return common.getLevelTag();\n  };\n\n  this.getLevelTagsMap = function () {\n    return common.getLevelTagsMap();\n  };\n\n  /**\n   * Configures this logger.\n   *\n   * @param {Object} options\n   */\n  this.configure = function (options) {\n    if (Util.isBoolean(options.additionalLogToConsole)) {\n      additionalLogToConsole = options.additionalLogToConsole;\n    } else {\n      additionalLogToConsole = DEFAULT_ADDITIONAL_LOG_TO_CONSOLE;\n    }\n    common.configure(options);\n  };\n\n  /**\n   * Returns the current log level.\n   *\n   * @returns {Number}\n   */\n  this.getLevel = function () {\n    return common.getLevelNumber();\n  };\n\n  /**\n   * Logs a given message at the error level.\n   *\n   * @param {String} message\n   * @param params\n   */\n  this.error = function (message, ...params) {\n    common.error.apply(common, [message, ...params]);\n  };\n\n  /**\n   * Logs a given message at the warning level.\n   *\n   * @param {String} message\n   * @param params\n   */\n  this.warn = function (message, ...params) {\n    common.warn.apply(common, [message, ...params]);\n  };\n\n  /**\n   * Logs a given message at the info level.\n   *\n   * @param {String} message\n   * @param params\n   */\n  this.info = function (message, ...params) {\n    common.info.apply(common, [message, ...params]);\n  };\n\n  /**\n   * Logs a given message at the debug level.\n   *\n   * @param {String} message\n   * @param params\n   */\n  this.debug = function (message, ...params) {\n    common.debug.apply(common, [message, ...params]);\n  };\n\n  /**\n   * Logs a given message at the trace level.\n   *\n   * @param {String} message\n   * @param params\n   */\n  this.trace = function (message, ...params) {\n    common.trace.apply(common, [message, ...params]);\n  };\n\n  /**\n   * Returns the log buffer.\n   *\n   * @returns {String[]}\n   */\n  this.getLogBuffer = function () {\n    return common.getLogBuffer();\n  };\n}\n\nmodule.exports = Logger;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/lib/logger/node.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/lib/parameters.js":
/*!******************************************************!*\
  !*** ./node_modules/snowflake-sdk/lib/parameters.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const Util = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/snowflake-sdk/lib/util.js\");\nconst Errors = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/snowflake-sdk/lib/errors.js\");\n\n/**\n * Creates a new Parameter.\n *\n * @param {Object} options\n * @constructor\n */\nfunction Parameter(options) {\n  // validate input\n  Errors.assertInternal(Util.isObject(options));\n  Errors.assertInternal(Util.isString(options.name));\n  Errors.assertInternal(Util.exists(options.value));\n\n  const name = options.name;\n  let value = options.value;\n\n  /**\n   * Returns the name of the parameter.\n   *\n   * @returns {String}\n   */\n  this.getName = function () {\n    return name;\n  };\n\n  /**\n   * Returns the value of the parameter.\n   *\n   * @returns {*}\n   */\n  this.getValue = function () {\n    return value;\n  };\n\n  /**\n   * Updates the value of the parameter.\n   *\n   * @param {*} targetValue\n   */\n  this.setValue = function (targetValue) {\n    value = targetValue;\n  };\n}\n\nconst names = exports.names = {};\nnames.JS_DRIVER_DISABLE_OCSP_FOR_NON_SF_ENDPOINTS = 'JS_DRIVER_DISABLE_OCSP_FOR_NON_SF_ENDPOINTS';\nnames.SERVICE_NAME = 'SERVICE_NAME';\nnames.CLIENT_SESSION_KEEP_ALIVE = 'CLIENT_SESSION_KEEP_ALIVE';\nnames.CLIENT_SESSION_KEEP_ALIVE_HEARTBEAT_FREQUENCY = 'CLIENT_SESSION_KEEP_ALIVE_HEARTBEAT_FREQUENCY';\nnames.JS_TREAT_INTEGER_AS_BIGINT = 'JS_TREAT_INTEGER_AS_BIGINT';\nnames.CLIENT_STAGE_ARRAY_BINDING_THRESHOLD = 'CLIENT_STAGE_ARRAY_BINDING_THRESHOLD';\nnames.MULTI_STATEMENT_COUNT = 'MULTI_STATEMENT_COUNT';\nnames.QUERY_CONTEXT_CACHE_SIZE = 'QUERY_CONTEXT_CACHE_SIZE';\n\nconst parameters =\n  [\n    new Parameter(\n      {\n        name: names.JS_DRIVER_DISABLE_OCSP_FOR_NON_SF_ENDPOINTS,\n        value: false,\n        desc: 'Whether to disable OCSP validation in the JavaScript driver ' +\n          'when communicating with non-Snowflake endpoints (e.g. S3/Blob).'\n      }),\n    new Parameter(\n      {\n        name: names.SERVICE_NAME,\n        value: '',\n        desc: 'Hint for load balancer.'\n      }),\n    new Parameter(\n      {\n        name: names.CLIENT_SESSION_KEEP_ALIVE,\n        value: false,\n        desc: 'When true, enables the driver to keep the session alive indefinitely'\n      }),\n    new Parameter(\n      {\n        name: names.CLIENT_SESSION_KEEP_ALIVE_HEARTBEAT_FREQUENCY,\n        value: 3600,\n        desc: 'The amount of time (in seconds) between subsequent heartbeat requests to the server.'\n      }),\n    new Parameter(\n      {\n        name: names.JS_TREAT_INTEGER_AS_BIGINT,\n        value: false,\n        desc: 'When true, enables the driver converts integer columns into BigInt'\n      }),\n    new Parameter(\n      {\n        name: names.CLIENT_STAGE_ARRAY_BINDING_THRESHOLD,\n        value: 100000,\n        desc: 'The client stage array binding threshold'\n      }),\n    new Parameter(\n      {\n        name: names.MULTI_STATEMENT_COUNT,\n        value: 1,\n        desc: 'When 1, multi statement is disable, when 0, multi statement is unlimited'\n      }),\n    new Parameter(\n      {\n        name: names.QUERY_CONTEXT_CACHE_SIZE,\n        value: 5,\n        desc: 'Query Context Cache Size'\n      }),\n  ];\n\n// put all the parameters in a map so they're easy to retrieve and update\nconst mapParamNameToParam = {};\nfor (let index = 0, length = parameters.length; index < length; index++) {\n  const parameter = parameters[index];\n  mapParamNameToParam[parameter.getName()] = parameter;\n}\n\n/**\n * Returns the value of a given parameter.\n *\n * @param {String} parameterName\n *\n * @returns {*}\n */\nexports.getValue = function (parameterName) {\n  // resolve the parameter name\n  const parameter = mapParamNameToParam[parameterName];\n\n  // verify that a valid parameter name was specified\n  Errors.assertInternal(\n    Util.exists(parameter), 'invalid parameter name: ' + parameterName);\n\n  return parameter.getValue();\n};\n\n/**\n * Updates the parameter values.\n *\n * @param {Object[]} parametersConfig\n */\nexports.update = function (parametersConfig) {\n  // if an input is specified\n  if (Util.exists(parametersConfig)) {\n    Errors.assertInternal(Util.isArray(parametersConfig));\n\n    // if any of the items in the configs array matches a known\n    // parameter, update the corresponding parameter's value\n    for (let index = 0, length = parametersConfig.length;\n      index < length; index++) {\n      const parameterConfig = parametersConfig[index];\n      if (Object.prototype.hasOwnProperty.call(mapParamNameToParam, parameterConfig.name)) {\n        const parameter = mapParamNameToParam[parameterConfig.name];\n        parameter.setValue(parameterConfig.value);\n      }\n    }\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9saWIvcGFyYW1ldGVycy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxhQUFhLG1CQUFPLENBQUMsOERBQVE7QUFDN0IsZUFBZSxtQkFBTyxDQUFDLGtFQUFVOztBQUVqQztBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsR0FBRztBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGNBQWMsYUFBYTtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBO0FBQ0EsZ0RBQWdELGdCQUFnQjtBQUNoRTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxVQUFVO0FBQ3JCO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcndpbHNvbi9EZXNrdG9wL3Byb2plY3RzL0VaVml6L25vZGVfbW9kdWxlcy9zbm93Zmxha2Utc2RrL2xpYi9wYXJhbWV0ZXJzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFV0aWwgPSByZXF1aXJlKCcuL3V0aWwnKTtcbmNvbnN0IEVycm9ycyA9IHJlcXVpcmUoJy4vZXJyb3JzJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBQYXJhbWV0ZXIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBQYXJhbWV0ZXIob3B0aW9ucykge1xuICAvLyB2YWxpZGF0ZSBpbnB1dFxuICBFcnJvcnMuYXNzZXJ0SW50ZXJuYWwoVXRpbC5pc09iamVjdChvcHRpb25zKSk7XG4gIEVycm9ycy5hc3NlcnRJbnRlcm5hbChVdGlsLmlzU3RyaW5nKG9wdGlvbnMubmFtZSkpO1xuICBFcnJvcnMuYXNzZXJ0SW50ZXJuYWwoVXRpbC5leGlzdHMob3B0aW9ucy52YWx1ZSkpO1xuXG4gIGNvbnN0IG5hbWUgPSBvcHRpb25zLm5hbWU7XG4gIGxldCB2YWx1ZSA9IG9wdGlvbnMudmFsdWU7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIG5hbWUgb2YgdGhlIHBhcmFtZXRlci5cbiAgICpcbiAgICogQHJldHVybnMge1N0cmluZ31cbiAgICovXG4gIHRoaXMuZ2V0TmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbmFtZTtcbiAgfTtcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgdmFsdWUgb2YgdGhlIHBhcmFtZXRlci5cbiAgICpcbiAgICogQHJldHVybnMgeyp9XG4gICAqL1xuICB0aGlzLmdldFZhbHVlID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfTtcblxuICAvKipcbiAgICogVXBkYXRlcyB0aGUgdmFsdWUgb2YgdGhlIHBhcmFtZXRlci5cbiAgICpcbiAgICogQHBhcmFtIHsqfSB0YXJnZXRWYWx1ZVxuICAgKi9cbiAgdGhpcy5zZXRWYWx1ZSA9IGZ1bmN0aW9uICh0YXJnZXRWYWx1ZSkge1xuICAgIHZhbHVlID0gdGFyZ2V0VmFsdWU7XG4gIH07XG59XG5cbmNvbnN0IG5hbWVzID0gZXhwb3J0cy5uYW1lcyA9IHt9O1xubmFtZXMuSlNfRFJJVkVSX0RJU0FCTEVfT0NTUF9GT1JfTk9OX1NGX0VORFBPSU5UUyA9ICdKU19EUklWRVJfRElTQUJMRV9PQ1NQX0ZPUl9OT05fU0ZfRU5EUE9JTlRTJztcbm5hbWVzLlNFUlZJQ0VfTkFNRSA9ICdTRVJWSUNFX05BTUUnO1xubmFtZXMuQ0xJRU5UX1NFU1NJT05fS0VFUF9BTElWRSA9ICdDTElFTlRfU0VTU0lPTl9LRUVQX0FMSVZFJztcbm5hbWVzLkNMSUVOVF9TRVNTSU9OX0tFRVBfQUxJVkVfSEVBUlRCRUFUX0ZSRVFVRU5DWSA9ICdDTElFTlRfU0VTU0lPTl9LRUVQX0FMSVZFX0hFQVJUQkVBVF9GUkVRVUVOQ1knO1xubmFtZXMuSlNfVFJFQVRfSU5URUdFUl9BU19CSUdJTlQgPSAnSlNfVFJFQVRfSU5URUdFUl9BU19CSUdJTlQnO1xubmFtZXMuQ0xJRU5UX1NUQUdFX0FSUkFZX0JJTkRJTkdfVEhSRVNIT0xEID0gJ0NMSUVOVF9TVEFHRV9BUlJBWV9CSU5ESU5HX1RIUkVTSE9MRCc7XG5uYW1lcy5NVUxUSV9TVEFURU1FTlRfQ09VTlQgPSAnTVVMVElfU1RBVEVNRU5UX0NPVU5UJztcbm5hbWVzLlFVRVJZX0NPTlRFWFRfQ0FDSEVfU0laRSA9ICdRVUVSWV9DT05URVhUX0NBQ0hFX1NJWkUnO1xuXG5jb25zdCBwYXJhbWV0ZXJzID1cbiAgW1xuICAgIG5ldyBQYXJhbWV0ZXIoXG4gICAgICB7XG4gICAgICAgIG5hbWU6IG5hbWVzLkpTX0RSSVZFUl9ESVNBQkxFX09DU1BfRk9SX05PTl9TRl9FTkRQT0lOVFMsXG4gICAgICAgIHZhbHVlOiBmYWxzZSxcbiAgICAgICAgZGVzYzogJ1doZXRoZXIgdG8gZGlzYWJsZSBPQ1NQIHZhbGlkYXRpb24gaW4gdGhlIEphdmFTY3JpcHQgZHJpdmVyICcgK1xuICAgICAgICAgICd3aGVuIGNvbW11bmljYXRpbmcgd2l0aCBub24tU25vd2ZsYWtlIGVuZHBvaW50cyAoZS5nLiBTMy9CbG9iKS4nXG4gICAgICB9KSxcbiAgICBuZXcgUGFyYW1ldGVyKFxuICAgICAge1xuICAgICAgICBuYW1lOiBuYW1lcy5TRVJWSUNFX05BTUUsXG4gICAgICAgIHZhbHVlOiAnJyxcbiAgICAgICAgZGVzYzogJ0hpbnQgZm9yIGxvYWQgYmFsYW5jZXIuJ1xuICAgICAgfSksXG4gICAgbmV3IFBhcmFtZXRlcihcbiAgICAgIHtcbiAgICAgICAgbmFtZTogbmFtZXMuQ0xJRU5UX1NFU1NJT05fS0VFUF9BTElWRSxcbiAgICAgICAgdmFsdWU6IGZhbHNlLFxuICAgICAgICBkZXNjOiAnV2hlbiB0cnVlLCBlbmFibGVzIHRoZSBkcml2ZXIgdG8ga2VlcCB0aGUgc2Vzc2lvbiBhbGl2ZSBpbmRlZmluaXRlbHknXG4gICAgICB9KSxcbiAgICBuZXcgUGFyYW1ldGVyKFxuICAgICAge1xuICAgICAgICBuYW1lOiBuYW1lcy5DTElFTlRfU0VTU0lPTl9LRUVQX0FMSVZFX0hFQVJUQkVBVF9GUkVRVUVOQ1ksXG4gICAgICAgIHZhbHVlOiAzNjAwLFxuICAgICAgICBkZXNjOiAnVGhlIGFtb3VudCBvZiB0aW1lIChpbiBzZWNvbmRzKSBiZXR3ZWVuIHN1YnNlcXVlbnQgaGVhcnRiZWF0IHJlcXVlc3RzIHRvIHRoZSBzZXJ2ZXIuJ1xuICAgICAgfSksXG4gICAgbmV3IFBhcmFtZXRlcihcbiAgICAgIHtcbiAgICAgICAgbmFtZTogbmFtZXMuSlNfVFJFQVRfSU5URUdFUl9BU19CSUdJTlQsXG4gICAgICAgIHZhbHVlOiBmYWxzZSxcbiAgICAgICAgZGVzYzogJ1doZW4gdHJ1ZSwgZW5hYmxlcyB0aGUgZHJpdmVyIGNvbnZlcnRzIGludGVnZXIgY29sdW1ucyBpbnRvIEJpZ0ludCdcbiAgICAgIH0pLFxuICAgIG5ldyBQYXJhbWV0ZXIoXG4gICAgICB7XG4gICAgICAgIG5hbWU6IG5hbWVzLkNMSUVOVF9TVEFHRV9BUlJBWV9CSU5ESU5HX1RIUkVTSE9MRCxcbiAgICAgICAgdmFsdWU6IDEwMDAwMCxcbiAgICAgICAgZGVzYzogJ1RoZSBjbGllbnQgc3RhZ2UgYXJyYXkgYmluZGluZyB0aHJlc2hvbGQnXG4gICAgICB9KSxcbiAgICBuZXcgUGFyYW1ldGVyKFxuICAgICAge1xuICAgICAgICBuYW1lOiBuYW1lcy5NVUxUSV9TVEFURU1FTlRfQ09VTlQsXG4gICAgICAgIHZhbHVlOiAxLFxuICAgICAgICBkZXNjOiAnV2hlbiAxLCBtdWx0aSBzdGF0ZW1lbnQgaXMgZGlzYWJsZSwgd2hlbiAwLCBtdWx0aSBzdGF0ZW1lbnQgaXMgdW5saW1pdGVkJ1xuICAgICAgfSksXG4gICAgbmV3IFBhcmFtZXRlcihcbiAgICAgIHtcbiAgICAgICAgbmFtZTogbmFtZXMuUVVFUllfQ09OVEVYVF9DQUNIRV9TSVpFLFxuICAgICAgICB2YWx1ZTogNSxcbiAgICAgICAgZGVzYzogJ1F1ZXJ5IENvbnRleHQgQ2FjaGUgU2l6ZSdcbiAgICAgIH0pLFxuICBdO1xuXG4vLyBwdXQgYWxsIHRoZSBwYXJhbWV0ZXJzIGluIGEgbWFwIHNvIHRoZXkncmUgZWFzeSB0byByZXRyaWV2ZSBhbmQgdXBkYXRlXG5jb25zdCBtYXBQYXJhbU5hbWVUb1BhcmFtID0ge307XG5mb3IgKGxldCBpbmRleCA9IDAsIGxlbmd0aCA9IHBhcmFtZXRlcnMubGVuZ3RoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuICBjb25zdCBwYXJhbWV0ZXIgPSBwYXJhbWV0ZXJzW2luZGV4XTtcbiAgbWFwUGFyYW1OYW1lVG9QYXJhbVtwYXJhbWV0ZXIuZ2V0TmFtZSgpXSA9IHBhcmFtZXRlcjtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSB2YWx1ZSBvZiBhIGdpdmVuIHBhcmFtZXRlci5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcGFyYW1ldGVyTmFtZVxuICpcbiAqIEByZXR1cm5zIHsqfVxuICovXG5leHBvcnRzLmdldFZhbHVlID0gZnVuY3Rpb24gKHBhcmFtZXRlck5hbWUpIHtcbiAgLy8gcmVzb2x2ZSB0aGUgcGFyYW1ldGVyIG5hbWVcbiAgY29uc3QgcGFyYW1ldGVyID0gbWFwUGFyYW1OYW1lVG9QYXJhbVtwYXJhbWV0ZXJOYW1lXTtcblxuICAvLyB2ZXJpZnkgdGhhdCBhIHZhbGlkIHBhcmFtZXRlciBuYW1lIHdhcyBzcGVjaWZpZWRcbiAgRXJyb3JzLmFzc2VydEludGVybmFsKFxuICAgIFV0aWwuZXhpc3RzKHBhcmFtZXRlciksICdpbnZhbGlkIHBhcmFtZXRlciBuYW1lOiAnICsgcGFyYW1ldGVyTmFtZSk7XG5cbiAgcmV0dXJuIHBhcmFtZXRlci5nZXRWYWx1ZSgpO1xufTtcblxuLyoqXG4gKiBVcGRhdGVzIHRoZSBwYXJhbWV0ZXIgdmFsdWVzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0W119IHBhcmFtZXRlcnNDb25maWdcbiAqL1xuZXhwb3J0cy51cGRhdGUgPSBmdW5jdGlvbiAocGFyYW1ldGVyc0NvbmZpZykge1xuICAvLyBpZiBhbiBpbnB1dCBpcyBzcGVjaWZpZWRcbiAgaWYgKFV0aWwuZXhpc3RzKHBhcmFtZXRlcnNDb25maWcpKSB7XG4gICAgRXJyb3JzLmFzc2VydEludGVybmFsKFV0aWwuaXNBcnJheShwYXJhbWV0ZXJzQ29uZmlnKSk7XG5cbiAgICAvLyBpZiBhbnkgb2YgdGhlIGl0ZW1zIGluIHRoZSBjb25maWdzIGFycmF5IG1hdGNoZXMgYSBrbm93blxuICAgIC8vIHBhcmFtZXRlciwgdXBkYXRlIHRoZSBjb3JyZXNwb25kaW5nIHBhcmFtZXRlcidzIHZhbHVlXG4gICAgZm9yIChsZXQgaW5kZXggPSAwLCBsZW5ndGggPSBwYXJhbWV0ZXJzQ29uZmlnLmxlbmd0aDtcbiAgICAgIGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICBjb25zdCBwYXJhbWV0ZXJDb25maWcgPSBwYXJhbWV0ZXJzQ29uZmlnW2luZGV4XTtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobWFwUGFyYW1OYW1lVG9QYXJhbSwgcGFyYW1ldGVyQ29uZmlnLm5hbWUpKSB7XG4gICAgICAgIGNvbnN0IHBhcmFtZXRlciA9IG1hcFBhcmFtTmFtZVRvUGFyYW1bcGFyYW1ldGVyQ29uZmlnLm5hbWVdO1xuICAgICAgICBwYXJhbWV0ZXIuc2V0VmFsdWUocGFyYW1ldGVyQ29uZmlnLnZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/lib/parameters.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/lib/proxy_util.js":
/*!******************************************************!*\
  !*** ./node_modules/snowflake-sdk/lib/proxy_util.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const Logger = __webpack_require__(/*! ./logger */ \"(rsc)/./node_modules/snowflake-sdk/lib/logger.js\");\nconst Errors = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/snowflake-sdk/lib/errors.js\");\nconst Util = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/snowflake-sdk/lib/util.js\");\nconst GlobalConfig = __webpack_require__(/*! ./global_config */ \"(rsc)/./node_modules/snowflake-sdk/lib/global_config.js\");\nconst LoggingUtil = __webpack_require__(/*! ./logger/logging_util */ \"(rsc)/./node_modules/snowflake-sdk/lib/logger/logging_util.js\");\nconst ErrorCodes = Errors.codes;\n\n/**\n * @typedef {object} Proxy\n * @property {string} host - The host address of the proxy.\n * @property {string} protocol - The protocol used by the proxy (e.g., \"http\" or \"https\")\n * @property {string} user - The username for the proxy\n * @property {number} port - The port number.\n * @property {string} password - The password for the proxy\n * @property {string} noProxy -  Optional list of domains that should bypass the prox\n */\n\n/**\n* remove http:// or https:// from the input, e.g. used with proxy URL\n* @param input\n* @returns {string}\n*/\nexports.removeScheme = function (input) {\n  return input.toString().replace(/(^\\w+:|^)\\/\\//, '');\n};\n\n/**\n * Try to get the PROXY environmental variables\n * On Windows, envvar name is case-insensitive, but on *nix, it's case-sensitive\n *\n * Compare them with the proxy specified on the Connection, if any\n * Return with the log constructed from the components detection and comparison\n * If there's something to warn the user about, return that too\n *\n * @param {Proxy} agentOptions from agent creation\n * @returns {{messages: string, warnings: string}} log messages\n */\nexports.getCompareAndLogEnvAndAgentProxies = function (agentOptions) {\n  const envProxy = {};\n  const logMessages = { 'messages': '', 'warnings': '' };\n  envProxy.httpProxy = process.env.http_proxy || process.env.HTTP_PROXY;\n  envProxy.httpsProxy = process.env.https_proxy || process.env.HTTPS_PROXY;\n  envProxy.noProxy = process.env.no_proxy || process.env.NO_PROXY;\n  \n  envProxy.logHttpProxy = envProxy.httpProxy ?\n    'HTTP_PROXY: ' + envProxy.httpProxy : 'HTTP_PROXY: <unset>';\n  envProxy.logHttpsProxy = envProxy.httpsProxy ?\n    'HTTPS_PROXY: ' + envProxy.httpsProxy : 'HTTPS_PROXY: <unset>';\n  envProxy.logNoProxy = envProxy.noProxy ?\n    'NO_PROXY: ' + envProxy.noProxy : 'NO_PROXY: <unset>';\n  \n  // log PROXY envvars\n  if (envProxy.httpProxy || envProxy.httpsProxy) {\n    logMessages.messages = logMessages.messages + ' // PROXY environment variables: '\n        + `${envProxy.logHttpProxy} ${envProxy.logHttpsProxy} ${envProxy.logNoProxy}.`;\n  }\n  \n  // log proxy config on Connection, if any set\n  if (agentOptions.host) {\n    const proxyHostAndPort = agentOptions.host + ':' + agentOptions.port;\n    const proxyProtocolHostAndPort = agentOptions.protocol ?\n      ' protocol=' + agentOptions.protocol + ' proxy=' + proxyHostAndPort\n      : ' proxy=' + proxyHostAndPort;\n    const proxyUsername = agentOptions.user ? ' user=' + agentOptions.user : '';\n    const proxyString = `${Util.exists(agentOptions.user) ? `${agentOptions.user}:${agentOptions.password}@` : ''}${proxyHostAndPort}`.toLowerCase();\n    logMessages.messages = logMessages.messages + ` // Proxy configured in Agent:${proxyProtocolHostAndPort}${proxyUsername}`;\n  \n    // check if both the PROXY envvars and Connection proxy config is set\n    // generate warnings if they are, and are also different\n    if (envProxy.httpProxy &&\n            this.removeScheme(envProxy.httpProxy).toLowerCase() !== proxyString.toLowerCase()) {\n      logMessages.warnings = logMessages.warnings + ` Using both the HTTP_PROXY (${this.describeProxy(this.getProxyFromEnv(false))})`\n            + ` and the Connection proxy (${this.describeProxy(agentOptions)}), but with different values.`\n            + ' If you experience connectivity issues, try unsetting one of them.';\n    }\n    if (envProxy.httpsProxy && this.removeScheme(envProxy.httpsProxy).toLowerCase() !== proxyString.toLowerCase()) {\n      logMessages.warnings = logMessages.warnings + ` Using both the HTTPS_PROXY (${this.describeProxy(this.getProxyFromEnv(true))})`\n            + ` and the Connection proxy (${this.describeProxy(agentOptions)}) settings to connect, but with different values.`\n            + ' If you experience connectivity issues, try unsetting one of them.';\n    }\n  }\n  logMessages.messages = logMessages.messages ? logMessages.messages : ' none.';\n  \n  return logMessages;\n};\n\n/**\n * Validate whether the proxy object has the appropriate information\n *\n * @param {Proxy} proxy\n * @returns {Proxy}\n */\nexports.validateProxy = function (proxy) {\n  const { host, port, noProxy, user, password } = proxy;\n  // check for missing proxyHost\n  Errors.checkArgumentExists(Util.exists(host),\n    ErrorCodes.ERR_CONN_CREATE_MISSING_PROXY_HOST);\n  \n  // check for invalid proxyHost\n  Errors.checkArgumentValid(Util.isString(host),\n    ErrorCodes.ERR_CONN_CREATE_INVALID_PROXY_HOST);\n  \n  // check for missing proxyPort\n  Errors.checkArgumentExists(Util.exists(port),\n    ErrorCodes.ERR_CONN_CREATE_MISSING_PROXY_PORT);\n  \n  // check for invalid proxyPort\n  Errors.checkArgumentValid(Util.isNumber(port),\n    ErrorCodes.ERR_CONN_CREATE_INVALID_PROXY_PORT);\n  \n  if (Util.exists(noProxy)) {\n    // check for invalid noProxy\n    Errors.checkArgumentValid(Util.isString(noProxy),\n      ErrorCodes.ERR_CONN_CREATE_INVALID_NO_PROXY);\n  }\n  \n  if (Util.exists(user) || Util.exists(password)) {\n    // check for missing proxyUser\n    Errors.checkArgumentExists(Util.exists(user),\n      ErrorCodes.ERR_CONN_CREATE_MISSING_PROXY_USER);\n  \n    // check for invalid proxyUser\n    Errors.checkArgumentValid(Util.isString(user),\n      ErrorCodes.ERR_CONN_CREATE_INVALID_PROXY_USER);\n  \n    // check for missing proxyPassword\n    Errors.checkArgumentExists(Util.exists(password),\n      ErrorCodes.ERR_CONN_CREATE_MISSING_PROXY_PASS);\n  \n    // check for invalid proxyPassword\n    Errors.checkArgumentValid(Util.isString(password),\n      ErrorCodes.ERR_CONN_CREATE_INVALID_PROXY_PASS);\n  \n  } else {\n    delete proxy.user;\n    delete proxy.password;\n  }\n};\n\n/**\n * Obtain the proxy information from the environment variable.\n *\n * @param {boolean} isHttps \n * @returns {Proxy}\n */\nexports.getProxyFromEnv = function (isHttps = true) {\n  const getDefaultPortIfNotSet = (proxyFromEnv) => {\n    const isProxyProtocolHttps = proxyFromEnv.protocol === 'https:';\n    if (!proxyFromEnv.port) {\n      return isProxyProtocolHttps ? 443 : 80;\n    } else {\n      return proxyFromEnv.port;\n    }\n  };\n  \n  const protocol = isHttps ? 'https' : 'http';\n  let proxyFromEnv = Util.getEnvVar(`${protocol}_proxy`);\n  if (!proxyFromEnv){\n    return null;\n  }\n  \n  Logger.getInstance().debug(`Util.getProxyEnv: Using ${protocol.toUpperCase()}_PROXY from the environment variable`);\n  if (proxyFromEnv.indexOf('://') === -1) {\n    Logger.getInstance().info('Util.getProxyEnv: the protocol was missing from the environment proxy. Use the HTTP protocol.');\n    proxyFromEnv = 'http' + '://' + proxyFromEnv;\n  }\n  proxyFromEnv = new URL(proxyFromEnv);\n  const port = getDefaultPortIfNotSet(proxyFromEnv);\n  const proxy = {\n    host: Util.validateEmptyString(proxyFromEnv.hostname),\n    port: Number(port),\n    user: Util.validateEmptyString(proxyFromEnv.username),\n    password: Util.validateEmptyString(proxyFromEnv.password),\n    protocol: Util.validateEmptyString(proxyFromEnv.protocol),\n    noProxy: this.getNoProxyEnv(),\n  };\n  this.validateProxy(proxy);\n  return proxy;\n};\n\n/**\n * Obtain the no proxy information from the environment variable.\n * \n * @returns {string | undefined}\n */  \nexports.getNoProxyEnv = function () {\n  const noProxy = Util.getEnvVar('no_proxy');\n  if (noProxy) {\n    return noProxy.split(',').join('|');\n  }\n  return undefined;\n};\n\n/**\n * Extract the host from the destination URL to check whether the same agent already exists or not.\n *\n * @param {string} destination\n * @returns {string} \n */  \nexports.getHostFromURL = function (destination) {\n  if (destination.indexOf('://') === -1) {\n    destination = 'https' + '://' + destination;\n  }\n  \n  try {\n    return new URL(destination).hostname;\n  } catch (err) {\n    Logger.getInstance().error(`Failed to parse the destination to URL with the error: ${err}. Return destination as the host: ${destination}`);\n    return destination;\n  }\n};\n\n/**\n * if proxy exists, return the proxy. If not and the useEnvProxy is true, return the proxy from the environment variable.\n * @param {Proxy} proxy\n * @param {string} moduleName\n * @param {string} isHttp\n *\n * @returns {Proxy}\n */ \nexports.getProxy = function (proxy, moduleName, isHttps) {\n  if (!proxy && GlobalConfig.isEnvProxyActive()) {\n    proxy = this.getProxyFromEnv(isHttps);\n    if (proxy) {\n      Logger.getInstance().debug(`${moduleName} loads the proxy info from the environment variable host: ${proxy.host}`);\n    }\n  }\n  return proxy;\n};\n\n/**\n * The proxy configuration fields in Azure are different from the proxy fields in the snowflake node.js driver.\n * Because of that, this function converts the snowflake proxy info to the Azure proxy info.\n * @param {Proxy} proxy\n * @returns {{host:string, port:number, user?:string, password?:string}}}\n */ \nexports.getAzureProxy = function (proxy) {\n  const AzureProxy = {\n    ...proxy, host: `${proxy.protocol}${(proxy.protocol).endsWith(':') ? '' : ':'}//${proxy.host}`, \n  };\n  delete AzureProxy.noProxy;\n  delete AzureProxy.protocol;\n\n  if (!Util.exists(AzureProxy.user) || !Util.exists(AzureProxy.password)) {\n    delete AzureProxy.user;\n    delete AzureProxy.password;\n  }\n  return AzureProxy;\n};\n\n/**\n * Currently, there is no way to disable loading the proxy information from the environment path in Azure/blob.\n * To control this proxy option on the driver side, A temporary workaround is hide(remove) the environment proxy from the process\n * when the client is created (At this time, the client loads the proxy from the environment variables internally). \n * After the client is created, restore them with the 'restoreEnvironmentProxy' function.\n */\nlet envProxyList;\nconst proxyEnvList = ['http_proxy', 'https_proxy', 'no_proxy'];\nexports.hideEnvironmentProxy = function () {\n  if (GlobalConfig.isEnvProxyActive()) {\n    return;\n  }\n  Logger.getInstance().debug('As the useEnvProxy option is disabled, the proxy environment variables are temporarily hidden during the creation of an Azure client');\n  envProxyList = [];\n  for (const envVar of proxyEnvList) {\n    saveProxyInfoInList(envVar);\n    if (!Util.isWindows()) {\n      saveProxyInfoInList(envVar.toUpperCase());\n    }\n  }\n};\n\nfunction saveProxyInfoInList(envVar) {\n  const proxyEnv = process.env[envVar];\n  envProxyList.push(process.env[envVar]);\n  delete process.env[envVar];\n\n  if (Util.exists(proxyEnv)) {\n    Logger.getInstance().debug(`Temporarily exclude ${envVar} from the environment variable value: ${proxyEnv}`);\n  } else {\n    Logger.getInstance().debug(`${envVar} was not defined, nothing to do`);\n  }\n}\n\nexports.restoreEnvironmentProxy = function () {\n  if (GlobalConfig.isEnvProxyActive()) {\n    return;\n  }\n\n  const iterator = envProxyList[Symbol.iterator]();\n  let nextValue = iterator.next().value;\n  for (const envVar of proxyEnvList) {\n    if (Util.exists(nextValue)) {\n      Logger.getInstance().debug(`The ${envVar} value exists with the value: ${nextValue} Restore back the proxy environment variable values`);\n      process.env[envVar] = nextValue;\n    }\n    nextValue = iterator.next().value;\n\n    if (!Util.isWindows()) {\n      if (Util.exists(nextValue)) {\n        Logger.getInstance().debug(`The ${envVar.toUpperCase()} value exists with the value: ${nextValue} Restore back the proxy environment variable values (for Non-Windows machine)`);\n        process.env[envVar.toUpperCase()] = nextValue;\n      }\n      nextValue = iterator.next().value;\n    }\n  }\n  Logger.getInstance().debug('An Azure client has been created. Restore back the proxy environment variable values');\n};\n\n/**\n * Provide the details of the proxy info.\n * @param proxy\n * @returns {string} \n */\nexports.describeProxy = function (proxy) {\n  if (Util.exists(proxy)) {\n    return `proxyHost: ${proxy.host}, proxyPort: ${proxy.port}, ` +\n  `${Util.exists(proxy.user) ? `proxyUser: ${proxy.user}, proxyPassword is ${LoggingUtil.describePresence(proxy.password)}, ` : ''}` + \n  `proxyProtocol: ${proxy.protocol}, noProxy: ${proxy.noProxy}`;\n  } else {\n    return 'proxy was not configured';\n  }\n};\n\n/**\n * Make the proxy string with the proxy info (json format)\n * @param proxy\n * @returns {string} \n */\nexports.stringifyProxy = function (proxy) {\n  if (Util.isEmptyObject(proxy)) {\n    return null;\n  }\n  return `${(proxy.protocol).startsWith('https') ? 'https' : 'http'}://` + \n  `${Util.exists(proxy.user) ? `${proxy.user}:${proxy.password}@` : ''}` +\n  `${proxy.host}:${proxy.port}`;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/lib/proxy_util.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/lib/queryContextCache.js":
/*!*************************************************************!*\
  !*** ./node_modules/snowflake-sdk/lib/queryContextCache.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Logger = __webpack_require__(/*! ./logger */ \"(rsc)/./node_modules/snowflake-sdk/lib/logger.js\");\n\n/**\n *\n * @param {String} id \n * @param {Number} timestamp \n * @param {Number} priority \n * @param {String} context \n */\nfunction QueryContextElement(id, timestamp, priority, context) {\n  this.id = id;\n  this.timestamp = timestamp;\n  this.priority = priority;\n  this.context = context;\n}\n\n/**\n * Most Recently Used and Priority based cache. A separate cache for each connection in the driver.\n */\n\n/**\n * @param {Number} capacity Maximum capacity of the cache.\n * @param {Number} sessionId Session for which the cache is created.\n */\nfunction QueryContextCache(capacity, sessionId) {\n  Logger.getInstance().debug(`Creating new QueryContextCache with capacity ${capacity} for session ${sessionId}`);\n  this.sessionId = sessionId;\n  this.capacity = capacity;\n  this.idMap = new Map(); // Map for id and QCC\n  this.treeSet = new Set(); // Order data as per priority\n  this.priorityMap = new Map(); // Map for priority and QCC\n}\n\nQueryContextCache.prototype.sortTreeSet = function () {\n  this.treeSet = new Set(Array.from(this.treeSet).sort((a, b) => a.priority - b.priority));\n};\n\nQueryContextCache.prototype.addQCE = function (qce) {\n  this.idMap.set(qce.id, qce);\n  this.priorityMap.set(qce.priority, qce);\n  this.treeSet.add(qce);\n  this.sortTreeSet();\n  Logger.getInstance().trace(`QCC session ${this.sessionId} - Added QCE: ${JSON.stringify(qce)}`);\n};\n\n/**\n   * Remove an element from the cache.\n   *\n   * @param {Object} qce element to remove.\n   */\nQueryContextCache.prototype.removeQCE = function (qce) {\n  this.idMap.delete(qce.id);\n  this.priorityMap.delete(qce.priority);\n  this.treeSet.delete(qce);\n  Logger.getInstance().trace(`QCC session ${this.sessionId} - Removed QCE: ${JSON.stringify(qce)}`);\n};\n\n/**\n   * Replace the cache element with a new response element. Remove old element exist in the cache\n   * and add a new element received.\n   *\n   * @param {Object} oldQCE an element exist in the cache\n   * @param {Object} newQCE a new element just received.\n   */\nQueryContextCache.prototype.replaceQCE = function (oldQCE, newQCE) {\n\n  // Remove old element from the cache\n  this.removeQCE(oldQCE);\n  // Add new element in the cache\n  this.addQCE(newQCE);\n\n  Logger.getInstance().debug(`QCC session ${this.sessionId} - Replaced QCE: ${JSON.stringify(oldQCE)} with ${JSON.stringify(newQCE)}`);\n};\n\n/**\n   * Merge a new element comes from the server with the existing cache. Merge is based on read time\n   * stamp for the same id and based on priority for two different ids.\n   *\n   * @param {Number} id \n   * @param {Number} timestamp \n   * @param {Number} priority \n   * @param {String} context\n   * \n   */\nQueryContextCache.prototype.merge = function (newQCE) {\n  Logger.getInstance().debug(`QCC session ${this.sessionId} - Merging QCE: ${JSON.stringify(newQCE)}`);\n  if (this.idMap.has(newQCE.id)) {\n    Logger.getInstance().debug(`QCC session ${this.sessionId} - Element id ${newQCE.id} found in cache`);\n\n    // ID found in the cache\n    const qce = this.idMap.get(newQCE.id);\n    if (newQCE.timestamp > qce.timestamp) {\n      Logger.getInstance().trace(`QCC session ${this.sessionId} - New element is more recent. Current timestamp: ${qce.timestamp}, new timestamp: ${newQCE.timestamp}`);\n      if (qce.priority === newQCE.priority) {\n        Logger.getInstance().trace(`QCC session ${this.sessionId} - Element priority (${qce.priority}) is the same`);\n        // Same priority, overwrite new data at same place\n        qce.timestamp = newQCE.timestamp;\n        qce.context = newQCE.context;\n      } else {\n        Logger.getInstance().trace(`QCC session ${this.sessionId} - Element priority changed. Current priority: ${qce.priority}, new priority: ${newQCE.priority}`);\n        // Change in priority\n        this.replaceQCE(qce, newQCE);\n      } \n    } else if (newQCE.timestamp === qce.timestamp && qce.priority !== newQCE.priority) {\n      Logger.getInstance().trace(`QCC session ${this.sessionId} - Element timestamp is the same, but priority changes. Current priority: ${qce.priority}, new priority: ${newQCE.priority}`);\n      // Same read timestamp but change in priority\n      this.replaceQCE(qce, newQCE);\n    } else {\n      Logger.getInstance().trace(`QCC session ${this.sessionId} - Element is the same. Doing nothing.`);\n    }\n  } else {\n    Logger.getInstance().trace(`QCC session ${this.sessionId} - New element`);\n    // new id\n    if (this.priorityMap.has(newQCE.priority)) {\n\n      // Same priority with different id\n      const qce = this.priorityMap.get(newQCE.priority);\n\n      Logger.getInstance().trace(`QCC session ${this.sessionId} - Element with the same priority found: ${JSON.stringify(qce)}. Replacing with new element: ${JSON.stringify(newQCE)}`);\n      // Replace with new data\n      this.replaceQCE(qce, newQCE);\n    } else {\n      Logger.getInstance().debug(`QCC session ${this.sessionId} - Adding new element to the cache: ${JSON.stringify(newQCE)}`);\n      // new priority\n      // Add new element in the cache\n      this.addQCE(newQCE, newQCE);\n    }\n  }\n};\n\n/**\n   * After the merge, loop through priority list and make sure cache is at most capacity. Remove all\n   * other elements from the list based on priority.\n   */\nQueryContextCache.prototype.checkCacheCapacity = function () {\n  Logger.getInstance().trace(\n    `QCC session ${this.sessionId} - checkCacheCapacity() called. treeSet size ${this.treeSet.size}, cache capacity ${this.capacity}`);\n\n  // remove elements based on priority\n  while (this.treeSet.size > this.capacity) {\n    const qce = Array.from(this.treeSet).pop();\n    this.removeQCE(qce);\n  }\n  Logger.getInstance().trace(\n    `QCC session ${this.sessionId} - checkCacheCapacity() returns. treeSet size ${this.treeSet.size}, cache capacity ${this.capacity}`);\n};\n\n/** Clear the cache. */\nQueryContextCache.prototype.clearCache = function () {\n  Logger.getInstance().trace(`QCC session ${this.sessionId} - clearCache() called`);\n  this.idMap.clear();\n  this.priorityMap.clear();\n  this.treeSet.clear();\n  Logger.getInstance().trace(`QCC session ${this.sessionId} - clearCache() returns. Number of entries in cache now ${this.treeSet.size}`);\n};\n\nQueryContextCache.prototype.getElements = function () {\n  return this.treeSet;\n};\n\n/**\n * @param data: the QueryContext Object serialized as a JSON format string\n */\nQueryContextCache.prototype.deserializeQueryContext = function (data) {\n  const stringifyData = JSON.stringify(data);\n  Logger.getInstance().debug(`QCC session ${this.sessionId} - deserializeQueryContext() called: data from server: ${stringifyData}`);\n  if (!data || stringifyData === '{}' || data.entries === null) {\n\n    this.clearCache();\n    Logger.getInstance().trace(`QCC session ${this.sessionId} - deserializeQueryContext() returns`);\n    this.logCacheEntries();\n    return;\n  }\n  try {\n    // Deserialize the entries. The first entry with priority is the main entry. An example JSON is:\n    // {\n    //   \"entries\": [\n    //    {\n    //     \"id\": 0,\n    //     \"readtimestamp\": 123456789,\n    //     \"priority\": 0,\n    //     \"context\": \"base64 encoded context\"\n    //    },\n    //     {\n    //       \"id\": 1,\n    //       \"readtimestamp\": 123456789,\n    //       \"priority\": 1,\n    //       \"context\": \"base64 encoded context\"\n    //     },\n    //     {\n    //       \"id\": 2,\n    //       \"readtimestamp\": 123456789,\n    //       \"priority\": 2,\n    //       \"context\": \"base64 encoded context\"\n    //     }\n    //   ]\n\n    const entries = data.entries;\n    if (entries !== null && Array.isArray(entries)) {\n      for (const entryNode of entries) {\n        const entry = this.deserializeQueryContextElement(entryNode);\n        if (entry != null) {\n          this.merge(entry);\n        } else {\n          Logger.getInstance().warn(\n            `QCC session ${this.sessionId} - deserializeQueryContextJson: deserializeQueryContextElement meets mismatch field type. Clear the QueryContextCache.`);\n          this.clearCache();\n          return;\n        }\n      }\n     \n    }\n  } catch (e) {\n    Logger.getInstance().debug(`QCC session ${this.sessionId} - deserializeQueryContextJson: Exception = ${e.getMessage}`);\n\n    // Not rethrowing. clear the cache as incomplete merge can lead to unexpected behavior.\n    this.clearCache();\n  }\n\n  this.checkCacheCapacity();\n  this.logCacheEntries();\n}; \n\nQueryContextCache.prototype.deserializeQueryContextElement = function (node) {\n  const { id, timestamp, priority, context } = node;\n  const entry = new QueryContextElement (id, timestamp, priority, null);\n\n  if (typeof context === 'string'){\n    entry.context = context;\n  } else if (context === null || context === undefined) {  \n    entry.context = null;\n    Logger.getInstance().debug(`QCC session ${this.sessionId} - deserializeQueryContextElement \\`context\\` field is empty`);\n  } else {\n    Logger.getInstance().warn(`QCC session ${this.sessionId} - deserializeQueryContextElement: \\`context\\` field is not String type`);\n    return null;\n  }\n\n  return entry;\n};\n\nQueryContextCache.prototype.logCacheEntries = function () {\n\n  this.treeSet.forEach(function (elem) {\n    Logger.getInstance().debug(\n      `QCC session ${this.sessionId} - Cache Entry: id: ${elem.id} timestamp: ${elem.timestamp} priority: ${elem.priority}`);\n  }, this);\n};\n\nQueryContextCache.prototype.getSize = function () {\n  return this.treeSet.size;\n};\n\nQueryContextCache.prototype.getQueryContextDTO = function () {\n  const arr = [];\n  const querycontexts = Array.from(this.getElements());\n  for (let i = 0; i < this.treeSet.size; i++) {\n    arr.push({ id: querycontexts[i].id, timestamp: querycontexts[i].timestamp,\n      priority: querycontexts[i].priority, context: { base64Data: querycontexts[i].context } || null });\n  }\n  return {\n    entries: arr\n  };\n};\n\nQueryContextCache.prototype.getSerializeQueryContext = function () {\n  const arr = [];\n  const querycontexts = Array.from(this.getElements());\n  for (let i = 0; i < this.treeSet.size; i++) {\n    arr.push({ id: querycontexts[i].id, timestamp: querycontexts[i].timestamp, priority: querycontexts[i].priority, context: querycontexts[i].context || null });\n  }\n\n  return {\n    entries: arr\n  };\n};\n\nmodule.exports = QueryContextCache;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9saWIvcXVlcnlDb250ZXh0Q2FjaGUuanMiLCJtYXBwaW5ncyI6IkFBQUEsZUFBZSxtQkFBTyxDQUFDLGtFQUFVOztBQUVqQztBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBLDZFQUE2RSxVQUFVLGNBQWMsVUFBVTtBQUMvRztBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCLDRCQUE0QjtBQUM1QixnQ0FBZ0M7QUFDaEM7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsZ0JBQWdCLGVBQWUsb0JBQW9CO0FBQy9GOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLGdCQUFnQixpQkFBaUIsb0JBQW9CO0FBQ2pHOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDRDQUE0QyxnQkFBZ0Isa0JBQWtCLHdCQUF3QixPQUFPLHVCQUF1QjtBQUNwSTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsZ0JBQWdCLGlCQUFpQix1QkFBdUI7QUFDcEc7QUFDQSw4Q0FBOEMsZ0JBQWdCLGVBQWUsV0FBVzs7QUFFeEY7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdELGdCQUFnQixtREFBbUQsY0FBYyxtQkFBbUIsaUJBQWlCO0FBQ3JLO0FBQ0Esa0RBQWtELGdCQUFnQixzQkFBc0IsYUFBYTtBQUNyRztBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1Isa0RBQWtELGdCQUFnQixnREFBZ0QsYUFBYSxrQkFBa0IsZ0JBQWdCO0FBQ2pLO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTixnREFBZ0QsZ0JBQWdCLDJFQUEyRSxhQUFhLGtCQUFrQixnQkFBZ0I7QUFDMUw7QUFDQTtBQUNBLE1BQU07QUFDTixnREFBZ0QsZ0JBQWdCO0FBQ2hFO0FBQ0EsSUFBSTtBQUNKLDhDQUE4QyxnQkFBZ0I7QUFDOUQ7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGdEQUFnRCxnQkFBZ0IsMENBQTBDLG9CQUFvQixnQ0FBZ0MsdUJBQXVCO0FBQ3JMO0FBQ0E7QUFDQSxNQUFNO0FBQ04sZ0RBQWdELGdCQUFnQixxQ0FBcUMsdUJBQXVCO0FBQzVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsZ0JBQWdCLDhDQUE4QyxrQkFBa0IsbUJBQW1CLGNBQWM7O0FBRXBJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixnQkFBZ0IsK0NBQStDLGtCQUFrQixtQkFBbUIsY0FBYztBQUNySTs7QUFFQTtBQUNBO0FBQ0EsNENBQTRDLGdCQUFnQjtBQUM1RDtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsZ0JBQWdCLHlEQUF5RCxrQkFBa0I7QUFDdkk7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsZ0JBQWdCLHdEQUF3RCxjQUFjO0FBQ2xJLG9DQUFvQzs7QUFFcEM7QUFDQSw4Q0FBOEMsZ0JBQWdCO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBLDJCQUEyQixnQkFBZ0I7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLDhDQUE4QyxnQkFBZ0IsNkNBQTZDLGFBQWE7O0FBRXhIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxVQUFVLG1DQUFtQztBQUM3Qzs7QUFFQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsOENBQThDLGdCQUFnQjtBQUM5RCxJQUFJO0FBQ0osNkNBQTZDLGdCQUFnQjtBQUM3RDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLHFCQUFxQixnQkFBZ0IscUJBQXFCLFNBQVMsYUFBYSxnQkFBZ0IsWUFBWSxjQUFjO0FBQzFILEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHVCQUF1QjtBQUN6QyxlQUFlO0FBQ2Ysc0RBQXNELHVDQUF1QyxTQUFTO0FBQ3RHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHVCQUF1QjtBQUN6QyxlQUFlLGdKQUFnSjtBQUMvSjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcndpbHNvbi9EZXNrdG9wL3Byb2plY3RzL0VaVml6L25vZGVfbW9kdWxlcy9zbm93Zmxha2Utc2RrL2xpYi9xdWVyeUNvbnRleHRDYWNoZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBMb2dnZXIgPSByZXF1aXJlKCcuL2xvZ2dlcicpO1xuXG4vKipcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gaWQgXG4gKiBAcGFyYW0ge051bWJlcn0gdGltZXN0YW1wIFxuICogQHBhcmFtIHtOdW1iZXJ9IHByaW9yaXR5IFxuICogQHBhcmFtIHtTdHJpbmd9IGNvbnRleHQgXG4gKi9cbmZ1bmN0aW9uIFF1ZXJ5Q29udGV4dEVsZW1lbnQoaWQsIHRpbWVzdGFtcCwgcHJpb3JpdHksIGNvbnRleHQpIHtcbiAgdGhpcy5pZCA9IGlkO1xuICB0aGlzLnRpbWVzdGFtcCA9IHRpbWVzdGFtcDtcbiAgdGhpcy5wcmlvcml0eSA9IHByaW9yaXR5O1xuICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xufVxuXG4vKipcbiAqIE1vc3QgUmVjZW50bHkgVXNlZCBhbmQgUHJpb3JpdHkgYmFzZWQgY2FjaGUuIEEgc2VwYXJhdGUgY2FjaGUgZm9yIGVhY2ggY29ubmVjdGlvbiBpbiB0aGUgZHJpdmVyLlxuICovXG5cbi8qKlxuICogQHBhcmFtIHtOdW1iZXJ9IGNhcGFjaXR5IE1heGltdW0gY2FwYWNpdHkgb2YgdGhlIGNhY2hlLlxuICogQHBhcmFtIHtOdW1iZXJ9IHNlc3Npb25JZCBTZXNzaW9uIGZvciB3aGljaCB0aGUgY2FjaGUgaXMgY3JlYXRlZC5cbiAqL1xuZnVuY3Rpb24gUXVlcnlDb250ZXh0Q2FjaGUoY2FwYWNpdHksIHNlc3Npb25JZCkge1xuICBMb2dnZXIuZ2V0SW5zdGFuY2UoKS5kZWJ1ZyhgQ3JlYXRpbmcgbmV3IFF1ZXJ5Q29udGV4dENhY2hlIHdpdGggY2FwYWNpdHkgJHtjYXBhY2l0eX0gZm9yIHNlc3Npb24gJHtzZXNzaW9uSWR9YCk7XG4gIHRoaXMuc2Vzc2lvbklkID0gc2Vzc2lvbklkO1xuICB0aGlzLmNhcGFjaXR5ID0gY2FwYWNpdHk7XG4gIHRoaXMuaWRNYXAgPSBuZXcgTWFwKCk7IC8vIE1hcCBmb3IgaWQgYW5kIFFDQ1xuICB0aGlzLnRyZWVTZXQgPSBuZXcgU2V0KCk7IC8vIE9yZGVyIGRhdGEgYXMgcGVyIHByaW9yaXR5XG4gIHRoaXMucHJpb3JpdHlNYXAgPSBuZXcgTWFwKCk7IC8vIE1hcCBmb3IgcHJpb3JpdHkgYW5kIFFDQ1xufVxuXG5RdWVyeUNvbnRleHRDYWNoZS5wcm90b3R5cGUuc29ydFRyZWVTZXQgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMudHJlZVNldCA9IG5ldyBTZXQoQXJyYXkuZnJvbSh0aGlzLnRyZWVTZXQpLnNvcnQoKGEsIGIpID0+IGEucHJpb3JpdHkgLSBiLnByaW9yaXR5KSk7XG59O1xuXG5RdWVyeUNvbnRleHRDYWNoZS5wcm90b3R5cGUuYWRkUUNFID0gZnVuY3Rpb24gKHFjZSkge1xuICB0aGlzLmlkTWFwLnNldChxY2UuaWQsIHFjZSk7XG4gIHRoaXMucHJpb3JpdHlNYXAuc2V0KHFjZS5wcmlvcml0eSwgcWNlKTtcbiAgdGhpcy50cmVlU2V0LmFkZChxY2UpO1xuICB0aGlzLnNvcnRUcmVlU2V0KCk7XG4gIExvZ2dlci5nZXRJbnN0YW5jZSgpLnRyYWNlKGBRQ0Mgc2Vzc2lvbiAke3RoaXMuc2Vzc2lvbklkfSAtIEFkZGVkIFFDRTogJHtKU09OLnN0cmluZ2lmeShxY2UpfWApO1xufTtcblxuLyoqXG4gICAqIFJlbW92ZSBhbiBlbGVtZW50IGZyb20gdGhlIGNhY2hlLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gcWNlIGVsZW1lbnQgdG8gcmVtb3ZlLlxuICAgKi9cblF1ZXJ5Q29udGV4dENhY2hlLnByb3RvdHlwZS5yZW1vdmVRQ0UgPSBmdW5jdGlvbiAocWNlKSB7XG4gIHRoaXMuaWRNYXAuZGVsZXRlKHFjZS5pZCk7XG4gIHRoaXMucHJpb3JpdHlNYXAuZGVsZXRlKHFjZS5wcmlvcml0eSk7XG4gIHRoaXMudHJlZVNldC5kZWxldGUocWNlKTtcbiAgTG9nZ2VyLmdldEluc3RhbmNlKCkudHJhY2UoYFFDQyBzZXNzaW9uICR7dGhpcy5zZXNzaW9uSWR9IC0gUmVtb3ZlZCBRQ0U6ICR7SlNPTi5zdHJpbmdpZnkocWNlKX1gKTtcbn07XG5cbi8qKlxuICAgKiBSZXBsYWNlIHRoZSBjYWNoZSBlbGVtZW50IHdpdGggYSBuZXcgcmVzcG9uc2UgZWxlbWVudC4gUmVtb3ZlIG9sZCBlbGVtZW50IGV4aXN0IGluIHRoZSBjYWNoZVxuICAgKiBhbmQgYWRkIGEgbmV3IGVsZW1lbnQgcmVjZWl2ZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvbGRRQ0UgYW4gZWxlbWVudCBleGlzdCBpbiB0aGUgY2FjaGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG5ld1FDRSBhIG5ldyBlbGVtZW50IGp1c3QgcmVjZWl2ZWQuXG4gICAqL1xuUXVlcnlDb250ZXh0Q2FjaGUucHJvdG90eXBlLnJlcGxhY2VRQ0UgPSBmdW5jdGlvbiAob2xkUUNFLCBuZXdRQ0UpIHtcblxuICAvLyBSZW1vdmUgb2xkIGVsZW1lbnQgZnJvbSB0aGUgY2FjaGVcbiAgdGhpcy5yZW1vdmVRQ0Uob2xkUUNFKTtcbiAgLy8gQWRkIG5ldyBlbGVtZW50IGluIHRoZSBjYWNoZVxuICB0aGlzLmFkZFFDRShuZXdRQ0UpO1xuXG4gIExvZ2dlci5nZXRJbnN0YW5jZSgpLmRlYnVnKGBRQ0Mgc2Vzc2lvbiAke3RoaXMuc2Vzc2lvbklkfSAtIFJlcGxhY2VkIFFDRTogJHtKU09OLnN0cmluZ2lmeShvbGRRQ0UpfSB3aXRoICR7SlNPTi5zdHJpbmdpZnkobmV3UUNFKX1gKTtcbn07XG5cbi8qKlxuICAgKiBNZXJnZSBhIG5ldyBlbGVtZW50IGNvbWVzIGZyb20gdGhlIHNlcnZlciB3aXRoIHRoZSBleGlzdGluZyBjYWNoZS4gTWVyZ2UgaXMgYmFzZWQgb24gcmVhZCB0aW1lXG4gICAqIHN0YW1wIGZvciB0aGUgc2FtZSBpZCBhbmQgYmFzZWQgb24gcHJpb3JpdHkgZm9yIHR3byBkaWZmZXJlbnQgaWRzLlxuICAgKlxuICAgKiBAcGFyYW0ge051bWJlcn0gaWQgXG4gICAqIEBwYXJhbSB7TnVtYmVyfSB0aW1lc3RhbXAgXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBwcmlvcml0eSBcbiAgICogQHBhcmFtIHtTdHJpbmd9IGNvbnRleHRcbiAgICogXG4gICAqL1xuUXVlcnlDb250ZXh0Q2FjaGUucHJvdG90eXBlLm1lcmdlID0gZnVuY3Rpb24gKG5ld1FDRSkge1xuICBMb2dnZXIuZ2V0SW5zdGFuY2UoKS5kZWJ1ZyhgUUNDIHNlc3Npb24gJHt0aGlzLnNlc3Npb25JZH0gLSBNZXJnaW5nIFFDRTogJHtKU09OLnN0cmluZ2lmeShuZXdRQ0UpfWApO1xuICBpZiAodGhpcy5pZE1hcC5oYXMobmV3UUNFLmlkKSkge1xuICAgIExvZ2dlci5nZXRJbnN0YW5jZSgpLmRlYnVnKGBRQ0Mgc2Vzc2lvbiAke3RoaXMuc2Vzc2lvbklkfSAtIEVsZW1lbnQgaWQgJHtuZXdRQ0UuaWR9IGZvdW5kIGluIGNhY2hlYCk7XG5cbiAgICAvLyBJRCBmb3VuZCBpbiB0aGUgY2FjaGVcbiAgICBjb25zdCBxY2UgPSB0aGlzLmlkTWFwLmdldChuZXdRQ0UuaWQpO1xuICAgIGlmIChuZXdRQ0UudGltZXN0YW1wID4gcWNlLnRpbWVzdGFtcCkge1xuICAgICAgTG9nZ2VyLmdldEluc3RhbmNlKCkudHJhY2UoYFFDQyBzZXNzaW9uICR7dGhpcy5zZXNzaW9uSWR9IC0gTmV3IGVsZW1lbnQgaXMgbW9yZSByZWNlbnQuIEN1cnJlbnQgdGltZXN0YW1wOiAke3FjZS50aW1lc3RhbXB9LCBuZXcgdGltZXN0YW1wOiAke25ld1FDRS50aW1lc3RhbXB9YCk7XG4gICAgICBpZiAocWNlLnByaW9yaXR5ID09PSBuZXdRQ0UucHJpb3JpdHkpIHtcbiAgICAgICAgTG9nZ2VyLmdldEluc3RhbmNlKCkudHJhY2UoYFFDQyBzZXNzaW9uICR7dGhpcy5zZXNzaW9uSWR9IC0gRWxlbWVudCBwcmlvcml0eSAoJHtxY2UucHJpb3JpdHl9KSBpcyB0aGUgc2FtZWApO1xuICAgICAgICAvLyBTYW1lIHByaW9yaXR5LCBvdmVyd3JpdGUgbmV3IGRhdGEgYXQgc2FtZSBwbGFjZVxuICAgICAgICBxY2UudGltZXN0YW1wID0gbmV3UUNFLnRpbWVzdGFtcDtcbiAgICAgICAgcWNlLmNvbnRleHQgPSBuZXdRQ0UuY29udGV4dDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIExvZ2dlci5nZXRJbnN0YW5jZSgpLnRyYWNlKGBRQ0Mgc2Vzc2lvbiAke3RoaXMuc2Vzc2lvbklkfSAtIEVsZW1lbnQgcHJpb3JpdHkgY2hhbmdlZC4gQ3VycmVudCBwcmlvcml0eTogJHtxY2UucHJpb3JpdHl9LCBuZXcgcHJpb3JpdHk6ICR7bmV3UUNFLnByaW9yaXR5fWApO1xuICAgICAgICAvLyBDaGFuZ2UgaW4gcHJpb3JpdHlcbiAgICAgICAgdGhpcy5yZXBsYWNlUUNFKHFjZSwgbmV3UUNFKTtcbiAgICAgIH0gXG4gICAgfSBlbHNlIGlmIChuZXdRQ0UudGltZXN0YW1wID09PSBxY2UudGltZXN0YW1wICYmIHFjZS5wcmlvcml0eSAhPT0gbmV3UUNFLnByaW9yaXR5KSB7XG4gICAgICBMb2dnZXIuZ2V0SW5zdGFuY2UoKS50cmFjZShgUUNDIHNlc3Npb24gJHt0aGlzLnNlc3Npb25JZH0gLSBFbGVtZW50IHRpbWVzdGFtcCBpcyB0aGUgc2FtZSwgYnV0IHByaW9yaXR5IGNoYW5nZXMuIEN1cnJlbnQgcHJpb3JpdHk6ICR7cWNlLnByaW9yaXR5fSwgbmV3IHByaW9yaXR5OiAke25ld1FDRS5wcmlvcml0eX1gKTtcbiAgICAgIC8vIFNhbWUgcmVhZCB0aW1lc3RhbXAgYnV0IGNoYW5nZSBpbiBwcmlvcml0eVxuICAgICAgdGhpcy5yZXBsYWNlUUNFKHFjZSwgbmV3UUNFKTtcbiAgICB9IGVsc2Uge1xuICAgICAgTG9nZ2VyLmdldEluc3RhbmNlKCkudHJhY2UoYFFDQyBzZXNzaW9uICR7dGhpcy5zZXNzaW9uSWR9IC0gRWxlbWVudCBpcyB0aGUgc2FtZS4gRG9pbmcgbm90aGluZy5gKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgTG9nZ2VyLmdldEluc3RhbmNlKCkudHJhY2UoYFFDQyBzZXNzaW9uICR7dGhpcy5zZXNzaW9uSWR9IC0gTmV3IGVsZW1lbnRgKTtcbiAgICAvLyBuZXcgaWRcbiAgICBpZiAodGhpcy5wcmlvcml0eU1hcC5oYXMobmV3UUNFLnByaW9yaXR5KSkge1xuXG4gICAgICAvLyBTYW1lIHByaW9yaXR5IHdpdGggZGlmZmVyZW50IGlkXG4gICAgICBjb25zdCBxY2UgPSB0aGlzLnByaW9yaXR5TWFwLmdldChuZXdRQ0UucHJpb3JpdHkpO1xuXG4gICAgICBMb2dnZXIuZ2V0SW5zdGFuY2UoKS50cmFjZShgUUNDIHNlc3Npb24gJHt0aGlzLnNlc3Npb25JZH0gLSBFbGVtZW50IHdpdGggdGhlIHNhbWUgcHJpb3JpdHkgZm91bmQ6ICR7SlNPTi5zdHJpbmdpZnkocWNlKX0uIFJlcGxhY2luZyB3aXRoIG5ldyBlbGVtZW50OiAke0pTT04uc3RyaW5naWZ5KG5ld1FDRSl9YCk7XG4gICAgICAvLyBSZXBsYWNlIHdpdGggbmV3IGRhdGFcbiAgICAgIHRoaXMucmVwbGFjZVFDRShxY2UsIG5ld1FDRSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIExvZ2dlci5nZXRJbnN0YW5jZSgpLmRlYnVnKGBRQ0Mgc2Vzc2lvbiAke3RoaXMuc2Vzc2lvbklkfSAtIEFkZGluZyBuZXcgZWxlbWVudCB0byB0aGUgY2FjaGU6ICR7SlNPTi5zdHJpbmdpZnkobmV3UUNFKX1gKTtcbiAgICAgIC8vIG5ldyBwcmlvcml0eVxuICAgICAgLy8gQWRkIG5ldyBlbGVtZW50IGluIHRoZSBjYWNoZVxuICAgICAgdGhpcy5hZGRRQ0UobmV3UUNFLCBuZXdRQ0UpO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gICAqIEFmdGVyIHRoZSBtZXJnZSwgbG9vcCB0aHJvdWdoIHByaW9yaXR5IGxpc3QgYW5kIG1ha2Ugc3VyZSBjYWNoZSBpcyBhdCBtb3N0IGNhcGFjaXR5LiBSZW1vdmUgYWxsXG4gICAqIG90aGVyIGVsZW1lbnRzIGZyb20gdGhlIGxpc3QgYmFzZWQgb24gcHJpb3JpdHkuXG4gICAqL1xuUXVlcnlDb250ZXh0Q2FjaGUucHJvdG90eXBlLmNoZWNrQ2FjaGVDYXBhY2l0eSA9IGZ1bmN0aW9uICgpIHtcbiAgTG9nZ2VyLmdldEluc3RhbmNlKCkudHJhY2UoXG4gICAgYFFDQyBzZXNzaW9uICR7dGhpcy5zZXNzaW9uSWR9IC0gY2hlY2tDYWNoZUNhcGFjaXR5KCkgY2FsbGVkLiB0cmVlU2V0IHNpemUgJHt0aGlzLnRyZWVTZXQuc2l6ZX0sIGNhY2hlIGNhcGFjaXR5ICR7dGhpcy5jYXBhY2l0eX1gKTtcblxuICAvLyByZW1vdmUgZWxlbWVudHMgYmFzZWQgb24gcHJpb3JpdHlcbiAgd2hpbGUgKHRoaXMudHJlZVNldC5zaXplID4gdGhpcy5jYXBhY2l0eSkge1xuICAgIGNvbnN0IHFjZSA9IEFycmF5LmZyb20odGhpcy50cmVlU2V0KS5wb3AoKTtcbiAgICB0aGlzLnJlbW92ZVFDRShxY2UpO1xuICB9XG4gIExvZ2dlci5nZXRJbnN0YW5jZSgpLnRyYWNlKFxuICAgIGBRQ0Mgc2Vzc2lvbiAke3RoaXMuc2Vzc2lvbklkfSAtIGNoZWNrQ2FjaGVDYXBhY2l0eSgpIHJldHVybnMuIHRyZWVTZXQgc2l6ZSAke3RoaXMudHJlZVNldC5zaXplfSwgY2FjaGUgY2FwYWNpdHkgJHt0aGlzLmNhcGFjaXR5fWApO1xufTtcblxuLyoqIENsZWFyIHRoZSBjYWNoZS4gKi9cblF1ZXJ5Q29udGV4dENhY2hlLnByb3RvdHlwZS5jbGVhckNhY2hlID0gZnVuY3Rpb24gKCkge1xuICBMb2dnZXIuZ2V0SW5zdGFuY2UoKS50cmFjZShgUUNDIHNlc3Npb24gJHt0aGlzLnNlc3Npb25JZH0gLSBjbGVhckNhY2hlKCkgY2FsbGVkYCk7XG4gIHRoaXMuaWRNYXAuY2xlYXIoKTtcbiAgdGhpcy5wcmlvcml0eU1hcC5jbGVhcigpO1xuICB0aGlzLnRyZWVTZXQuY2xlYXIoKTtcbiAgTG9nZ2VyLmdldEluc3RhbmNlKCkudHJhY2UoYFFDQyBzZXNzaW9uICR7dGhpcy5zZXNzaW9uSWR9IC0gY2xlYXJDYWNoZSgpIHJldHVybnMuIE51bWJlciBvZiBlbnRyaWVzIGluIGNhY2hlIG5vdyAke3RoaXMudHJlZVNldC5zaXplfWApO1xufTtcblxuUXVlcnlDb250ZXh0Q2FjaGUucHJvdG90eXBlLmdldEVsZW1lbnRzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy50cmVlU2V0O1xufTtcblxuLyoqXG4gKiBAcGFyYW0gZGF0YTogdGhlIFF1ZXJ5Q29udGV4dCBPYmplY3Qgc2VyaWFsaXplZCBhcyBhIEpTT04gZm9ybWF0IHN0cmluZ1xuICovXG5RdWVyeUNvbnRleHRDYWNoZS5wcm90b3R5cGUuZGVzZXJpYWxpemVRdWVyeUNvbnRleHQgPSBmdW5jdGlvbiAoZGF0YSkge1xuICBjb25zdCBzdHJpbmdpZnlEYXRhID0gSlNPTi5zdHJpbmdpZnkoZGF0YSk7XG4gIExvZ2dlci5nZXRJbnN0YW5jZSgpLmRlYnVnKGBRQ0Mgc2Vzc2lvbiAke3RoaXMuc2Vzc2lvbklkfSAtIGRlc2VyaWFsaXplUXVlcnlDb250ZXh0KCkgY2FsbGVkOiBkYXRhIGZyb20gc2VydmVyOiAke3N0cmluZ2lmeURhdGF9YCk7XG4gIGlmICghZGF0YSB8fCBzdHJpbmdpZnlEYXRhID09PSAne30nIHx8IGRhdGEuZW50cmllcyA9PT0gbnVsbCkge1xuXG4gICAgdGhpcy5jbGVhckNhY2hlKCk7XG4gICAgTG9nZ2VyLmdldEluc3RhbmNlKCkudHJhY2UoYFFDQyBzZXNzaW9uICR7dGhpcy5zZXNzaW9uSWR9IC0gZGVzZXJpYWxpemVRdWVyeUNvbnRleHQoKSByZXR1cm5zYCk7XG4gICAgdGhpcy5sb2dDYWNoZUVudHJpZXMoKTtcbiAgICByZXR1cm47XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBEZXNlcmlhbGl6ZSB0aGUgZW50cmllcy4gVGhlIGZpcnN0IGVudHJ5IHdpdGggcHJpb3JpdHkgaXMgdGhlIG1haW4gZW50cnkuIEFuIGV4YW1wbGUgSlNPTiBpczpcbiAgICAvLyB7XG4gICAgLy8gICBcImVudHJpZXNcIjogW1xuICAgIC8vICAgIHtcbiAgICAvLyAgICAgXCJpZFwiOiAwLFxuICAgIC8vICAgICBcInJlYWR0aW1lc3RhbXBcIjogMTIzNDU2Nzg5LFxuICAgIC8vICAgICBcInByaW9yaXR5XCI6IDAsXG4gICAgLy8gICAgIFwiY29udGV4dFwiOiBcImJhc2U2NCBlbmNvZGVkIGNvbnRleHRcIlxuICAgIC8vICAgIH0sXG4gICAgLy8gICAgIHtcbiAgICAvLyAgICAgICBcImlkXCI6IDEsXG4gICAgLy8gICAgICAgXCJyZWFkdGltZXN0YW1wXCI6IDEyMzQ1Njc4OSxcbiAgICAvLyAgICAgICBcInByaW9yaXR5XCI6IDEsXG4gICAgLy8gICAgICAgXCJjb250ZXh0XCI6IFwiYmFzZTY0IGVuY29kZWQgY29udGV4dFwiXG4gICAgLy8gICAgIH0sXG4gICAgLy8gICAgIHtcbiAgICAvLyAgICAgICBcImlkXCI6IDIsXG4gICAgLy8gICAgICAgXCJyZWFkdGltZXN0YW1wXCI6IDEyMzQ1Njc4OSxcbiAgICAvLyAgICAgICBcInByaW9yaXR5XCI6IDIsXG4gICAgLy8gICAgICAgXCJjb250ZXh0XCI6IFwiYmFzZTY0IGVuY29kZWQgY29udGV4dFwiXG4gICAgLy8gICAgIH1cbiAgICAvLyAgIF1cblxuICAgIGNvbnN0IGVudHJpZXMgPSBkYXRhLmVudHJpZXM7XG4gICAgaWYgKGVudHJpZXMgIT09IG51bGwgJiYgQXJyYXkuaXNBcnJheShlbnRyaWVzKSkge1xuICAgICAgZm9yIChjb25zdCBlbnRyeU5vZGUgb2YgZW50cmllcykge1xuICAgICAgICBjb25zdCBlbnRyeSA9IHRoaXMuZGVzZXJpYWxpemVRdWVyeUNvbnRleHRFbGVtZW50KGVudHJ5Tm9kZSk7XG4gICAgICAgIGlmIChlbnRyeSAhPSBudWxsKSB7XG4gICAgICAgICAgdGhpcy5tZXJnZShlbnRyeSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgTG9nZ2VyLmdldEluc3RhbmNlKCkud2FybihcbiAgICAgICAgICAgIGBRQ0Mgc2Vzc2lvbiAke3RoaXMuc2Vzc2lvbklkfSAtIGRlc2VyaWFsaXplUXVlcnlDb250ZXh0SnNvbjogZGVzZXJpYWxpemVRdWVyeUNvbnRleHRFbGVtZW50IG1lZXRzIG1pc21hdGNoIGZpZWxkIHR5cGUuIENsZWFyIHRoZSBRdWVyeUNvbnRleHRDYWNoZS5gKTtcbiAgICAgICAgICB0aGlzLmNsZWFyQ2FjaGUoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgXG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgTG9nZ2VyLmdldEluc3RhbmNlKCkuZGVidWcoYFFDQyBzZXNzaW9uICR7dGhpcy5zZXNzaW9uSWR9IC0gZGVzZXJpYWxpemVRdWVyeUNvbnRleHRKc29uOiBFeGNlcHRpb24gPSAke2UuZ2V0TWVzc2FnZX1gKTtcblxuICAgIC8vIE5vdCByZXRocm93aW5nLiBjbGVhciB0aGUgY2FjaGUgYXMgaW5jb21wbGV0ZSBtZXJnZSBjYW4gbGVhZCB0byB1bmV4cGVjdGVkIGJlaGF2aW9yLlxuICAgIHRoaXMuY2xlYXJDYWNoZSgpO1xuICB9XG5cbiAgdGhpcy5jaGVja0NhY2hlQ2FwYWNpdHkoKTtcbiAgdGhpcy5sb2dDYWNoZUVudHJpZXMoKTtcbn07IFxuXG5RdWVyeUNvbnRleHRDYWNoZS5wcm90b3R5cGUuZGVzZXJpYWxpemVRdWVyeUNvbnRleHRFbGVtZW50ID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgY29uc3QgeyBpZCwgdGltZXN0YW1wLCBwcmlvcml0eSwgY29udGV4dCB9ID0gbm9kZTtcbiAgY29uc3QgZW50cnkgPSBuZXcgUXVlcnlDb250ZXh0RWxlbWVudCAoaWQsIHRpbWVzdGFtcCwgcHJpb3JpdHksIG51bGwpO1xuXG4gIGlmICh0eXBlb2YgY29udGV4dCA9PT0gJ3N0cmluZycpe1xuICAgIGVudHJ5LmNvbnRleHQgPSBjb250ZXh0O1xuICB9IGVsc2UgaWYgKGNvbnRleHQgPT09IG51bGwgfHwgY29udGV4dCA9PT0gdW5kZWZpbmVkKSB7ICBcbiAgICBlbnRyeS5jb250ZXh0ID0gbnVsbDtcbiAgICBMb2dnZXIuZ2V0SW5zdGFuY2UoKS5kZWJ1ZyhgUUNDIHNlc3Npb24gJHt0aGlzLnNlc3Npb25JZH0gLSBkZXNlcmlhbGl6ZVF1ZXJ5Q29udGV4dEVsZW1lbnQgXFxgY29udGV4dFxcYCBmaWVsZCBpcyBlbXB0eWApO1xuICB9IGVsc2Uge1xuICAgIExvZ2dlci5nZXRJbnN0YW5jZSgpLndhcm4oYFFDQyBzZXNzaW9uICR7dGhpcy5zZXNzaW9uSWR9IC0gZGVzZXJpYWxpemVRdWVyeUNvbnRleHRFbGVtZW50OiBcXGBjb250ZXh0XFxgIGZpZWxkIGlzIG5vdCBTdHJpbmcgdHlwZWApO1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIGVudHJ5O1xufTtcblxuUXVlcnlDb250ZXh0Q2FjaGUucHJvdG90eXBlLmxvZ0NhY2hlRW50cmllcyA9IGZ1bmN0aW9uICgpIHtcblxuICB0aGlzLnRyZWVTZXQuZm9yRWFjaChmdW5jdGlvbiAoZWxlbSkge1xuICAgIExvZ2dlci5nZXRJbnN0YW5jZSgpLmRlYnVnKFxuICAgICAgYFFDQyBzZXNzaW9uICR7dGhpcy5zZXNzaW9uSWR9IC0gQ2FjaGUgRW50cnk6IGlkOiAke2VsZW0uaWR9IHRpbWVzdGFtcDogJHtlbGVtLnRpbWVzdGFtcH0gcHJpb3JpdHk6ICR7ZWxlbS5wcmlvcml0eX1gKTtcbiAgfSwgdGhpcyk7XG59O1xuXG5RdWVyeUNvbnRleHRDYWNoZS5wcm90b3R5cGUuZ2V0U2l6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMudHJlZVNldC5zaXplO1xufTtcblxuUXVlcnlDb250ZXh0Q2FjaGUucHJvdG90eXBlLmdldFF1ZXJ5Q29udGV4dERUTyA9IGZ1bmN0aW9uICgpIHtcbiAgY29uc3QgYXJyID0gW107XG4gIGNvbnN0IHF1ZXJ5Y29udGV4dHMgPSBBcnJheS5mcm9tKHRoaXMuZ2V0RWxlbWVudHMoKSk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy50cmVlU2V0LnNpemU7IGkrKykge1xuICAgIGFyci5wdXNoKHsgaWQ6IHF1ZXJ5Y29udGV4dHNbaV0uaWQsIHRpbWVzdGFtcDogcXVlcnljb250ZXh0c1tpXS50aW1lc3RhbXAsXG4gICAgICBwcmlvcml0eTogcXVlcnljb250ZXh0c1tpXS5wcmlvcml0eSwgY29udGV4dDogeyBiYXNlNjREYXRhOiBxdWVyeWNvbnRleHRzW2ldLmNvbnRleHQgfSB8fCBudWxsIH0pO1xuICB9XG4gIHJldHVybiB7XG4gICAgZW50cmllczogYXJyXG4gIH07XG59O1xuXG5RdWVyeUNvbnRleHRDYWNoZS5wcm90b3R5cGUuZ2V0U2VyaWFsaXplUXVlcnlDb250ZXh0ID0gZnVuY3Rpb24gKCkge1xuICBjb25zdCBhcnIgPSBbXTtcbiAgY29uc3QgcXVlcnljb250ZXh0cyA9IEFycmF5LmZyb20odGhpcy5nZXRFbGVtZW50cygpKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnRyZWVTZXQuc2l6ZTsgaSsrKSB7XG4gICAgYXJyLnB1c2goeyBpZDogcXVlcnljb250ZXh0c1tpXS5pZCwgdGltZXN0YW1wOiBxdWVyeWNvbnRleHRzW2ldLnRpbWVzdGFtcCwgcHJpb3JpdHk6IHF1ZXJ5Y29udGV4dHNbaV0ucHJpb3JpdHksIGNvbnRleHQ6IHF1ZXJ5Y29udGV4dHNbaV0uY29udGV4dCB8fCBudWxsIH0pO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBlbnRyaWVzOiBhcnJcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUXVlcnlDb250ZXh0Q2FjaGU7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/lib/queryContextCache.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/lib/secret_detector.js":
/*!***********************************************************!*\
  !*** ./node_modules/snowflake-sdk/lib/secret_detector.js ***!
  \***********************************************************/
/***/ ((module) => {

eval("/**\n * The secret detector detects sensitive information.\n * It masks secrets that might be leaked from two potential avenues\n *  1. Out of Band Telemetry\n *  2. Logging\n *  \n* @param {Object} customPatterns contains 'regex' and 'mask' for customized masking\n * @param {Object} mock\n * \n * @returns {Object}\n * @constructor\n */\nfunction SecretDetector(customPatterns, mock) {\n  const CUSTOM_PATTERNS_REGEX = [];\n  const CUSTOM_PATTERNS_MASK = [];\n  let CUSTOM_PATTERNS_LENGTH;\n\n  if (customPatterns) {\n    // Check that the customPatterns object contains the keys 'regex' and 'mask\n    if (!customPatterns.regex) {\n      throw new Error('The customPatterns object must contain the \\'regex\\' key');\n    }\n    if (!customPatterns.mask) {\n      throw new Error('The customPatterns object must contain the \\'mask\\' key');\n    }\n    // Also check that their lengths are equal\n    if (customPatterns.regex.length !== customPatterns.mask.length) {\n      throw new Error('The customPatterns object must have equal length for both \\'regex\\' and \\'mask\\'');\n    }\n\n    CUSTOM_PATTERNS_LENGTH = customPatterns.regex.length;\n\n    // Push the regex and mask elements onto their respective arrays\n    for (let index = 0; index < CUSTOM_PATTERNS_LENGTH; index++) {\n      CUSTOM_PATTERNS_REGEX.push(new RegExp(`${customPatterns.regex[index]}`, 'gi'));\n      CUSTOM_PATTERNS_MASK.push(String.raw`${customPatterns.mask[index]}`);\n    }\n  }\n\n  function maskCustomPattern(text) {\n    let result;\n    for (let index = 0; index < CUSTOM_PATTERNS_LENGTH; index++) {\n      result = text.replace(CUSTOM_PATTERNS_REGEX[index], CUSTOM_PATTERNS_MASK[index]);\n      // If the text is replaced, return the result\n      if (text !== result) {\n        return result;\n      }\n    }\n    // If text is unchanged, return the original\n    return text;\n  }\n\n  const AWS_KEY_PATTERN = new RegExp(String.raw`(aws_key_id|aws_secret_key|access_key_id|secret_access_key)\\s*=\\s*'([^']+)'`,\n    'gi');\n  const AWS_TOKEN_PATTERN = new RegExp(String.raw`(accessToken|tempToken|keySecret)\\s*:\\s*\"([a-z0-9/+]{32,}={0,2})\"`,\n    'gi');\n  const SAS_TOKEN_PATTERN = new RegExp(String.raw`(sig|signature|AWSAccessKeyId|password|passcode)=(\\?P<secret>[a-z0-9%/+]{16,})`,\n    'gi');\n  const PRIVATE_KEY_PATTERN = new RegExp(String.raw`-----BEGIN PRIVATE KEY-----\\\\n([a-z0-9/+=\\\\n]{32,})\\\\n-----END PRIVATE KEY-----`, // pragma: allowlist secret\n    'gim');\n  const PRIVATE_KEY_DATA_PATTERN = new RegExp(String.raw`\"privateKeyData\": \"([a-z0-9/+=\\\\n]{10,})\"`,\n    'gim');\n  // Colon in the group ([a-z0-9=/:_%-+]{8,}) was added to detect tokens that contain additional details before the actual token.\n  // Such as version or hint (token=ver:1-hint:1233-realToken...).\n  const CONNECTION_TOKEN_PATTERN = new RegExp(String.raw`(token|assertion content)([\\'\\\"\\s:=]+)([a-z0-9=/:_\\%\\-\\+]{8,})`,\n    'gi');\n  const PASSWORD_PATTERN = new RegExp(\n    String.raw`(password|pwd)([\\'\\\"\\s:=]+)([a-z0-9!\\\"#\\$%&\\\\\\'\\(\\)\\*\\+\\,-\\./:;<=>\\?\\@\\[\\]\\^_` +\n    '`' +\n    String.raw`\\{\\|\\}~]{8,})`,\n    'gi');\n  const PASSCODE_PATTERN = new RegExp(String.raw`(passcode|otp|pin|otac)\\s*([:=])\\s*([0-9]{4,6})`, 'gi');\n\n\n  function maskAwsKeys(text) {\n    return text.replace(AWS_KEY_PATTERN, String.raw`$1$2****`);\n  }\n\n  function maskAwsToken(text) {\n    return text.replace(AWS_TOKEN_PATTERN, String.raw`$1\":\"XXXX\"`);\n  }\n\n  function maskSasToken(text) {\n    return text.replace(SAS_TOKEN_PATTERN, String.raw`$1=****`);\n  }\n\n  function maskPrivateKey(text) {\n    return text.replace(PRIVATE_KEY_PATTERN, String.raw`-----BEGIN PRIVATE KEY-----\\\\\\\\nXXXX\\\\\\\\n-----END PRIVATE KEY-----`); // pragma: allowlist secret\n  }\n\n  function maskPrivateKeyData(text) {\n    return text.replace(PRIVATE_KEY_DATA_PATTERN, String.raw`\"privateKeyData\": \"XXXX\"`);\n  }\n\n  function maskConnectionToken(text) {\n    return text.replace(CONNECTION_TOKEN_PATTERN, String.raw`$1$2****`);\n  }\n\n  function maskPassword(text) {\n    return text.replace(PASSWORD_PATTERN, String.raw`$1$2****`);\n  }\n\n  function maskPasscode(text) {\n    return text.replace(PASSCODE_PATTERN, String.raw`$1$2****`);\n  }\n\n\n  /**\n   * Masks any secrets.\n   *\n   * @param {String} text may contain a secret.\n   *\n   * @returns {Object} the masked string.\n   */\n  this.maskSecrets = function (text) {\n    let result;\n    if (!text) {\n      result =\n      {\n        masked: false,\n        maskedtxt: text,\n        errstr: null\n      };\n      return result;\n    }\n\n    let masked = false;\n    let maskedtxt = '';\n    let errstr = null;\n    try {\n      if (mock) {\n        mock.execute();\n      }\n\n      maskedtxt =\n        maskPasscode(\n          maskConnectionToken(\n            maskPassword(\n              maskPrivateKeyData(\n                maskPrivateKey(\n                  maskAwsToken(\n                    maskSasToken(\n                      maskAwsKeys(text)\n                    )\n                  )\n                )\n              )\n            )\n          )\n        );\n      if (CUSTOM_PATTERNS_LENGTH > 0) {\n        maskedtxt = maskCustomPattern(maskedtxt);\n      }\n      if (maskedtxt !== text) {\n        masked = true;\n      }\n    } catch (err) {\n      masked = true;\n      maskedtxt = err.toString();\n      errstr = err.toString();\n    }\n\n    result =\n    {\n      masked: masked,\n      maskedtxt: maskedtxt,\n      errstr: errstr\n    };\n    return result;\n  };\n}\n\nmodule.exports = SecretDetector;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9saWIvc2VjcmV0X2RldGVjdG9yLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsUUFBUTtBQUNsQixXQUFXLFFBQVE7QUFDbkI7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLHdCQUF3QixnQ0FBZ0M7QUFDeEQsK0NBQStDLDRCQUE0QjtBQUMzRSw2Q0FBNkMsMkJBQTJCO0FBQ3hFO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHdCQUF3QixnQ0FBZ0M7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx1R0FBdUcsSUFBSSxFQUFFLElBQUk7QUFDakg7QUFDQSwySEFBMkgsSUFBSTtBQUMvSDtBQUNBLGtHQUFrRyxJQUFJO0FBQ3RHO0FBQ0EsNEZBQTRGLElBQUk7QUFDaEc7QUFDQSx5Q0FBeUMsR0FBRztBQUM1QztBQUNBLG1IQUFtSCxHQUFHO0FBQ3RIO0FBQ0E7QUFDQSw4RUFBOEU7QUFDOUU7QUFDQSxpQkFBaUIsSUFBSSxHQUFHLEdBQUc7QUFDM0I7QUFDQSwyRkFBMkYsSUFBSTs7O0FBRy9GO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsOEhBQThIO0FBQzlIOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWN0b3J3aWxzb24vRGVza3RvcC9wcm9qZWN0cy9FWlZpei9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9saWIvc2VjcmV0X2RldGVjdG9yLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhlIHNlY3JldCBkZXRlY3RvciBkZXRlY3RzIHNlbnNpdGl2ZSBpbmZvcm1hdGlvbi5cbiAqIEl0IG1hc2tzIHNlY3JldHMgdGhhdCBtaWdodCBiZSBsZWFrZWQgZnJvbSB0d28gcG90ZW50aWFsIGF2ZW51ZXNcbiAqICAxLiBPdXQgb2YgQmFuZCBUZWxlbWV0cnlcbiAqICAyLiBMb2dnaW5nXG4gKiAgXG4qIEBwYXJhbSB7T2JqZWN0fSBjdXN0b21QYXR0ZXJucyBjb250YWlucyAncmVnZXgnIGFuZCAnbWFzaycgZm9yIGN1c3RvbWl6ZWQgbWFza2luZ1xuICogQHBhcmFtIHtPYmplY3R9IG1vY2tcbiAqIFxuICogQHJldHVybnMge09iamVjdH1cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBTZWNyZXREZXRlY3RvcihjdXN0b21QYXR0ZXJucywgbW9jaykge1xuICBjb25zdCBDVVNUT01fUEFUVEVSTlNfUkVHRVggPSBbXTtcbiAgY29uc3QgQ1VTVE9NX1BBVFRFUk5TX01BU0sgPSBbXTtcbiAgbGV0IENVU1RPTV9QQVRURVJOU19MRU5HVEg7XG5cbiAgaWYgKGN1c3RvbVBhdHRlcm5zKSB7XG4gICAgLy8gQ2hlY2sgdGhhdCB0aGUgY3VzdG9tUGF0dGVybnMgb2JqZWN0IGNvbnRhaW5zIHRoZSBrZXlzICdyZWdleCcgYW5kICdtYXNrXG4gICAgaWYgKCFjdXN0b21QYXR0ZXJucy5yZWdleCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgY3VzdG9tUGF0dGVybnMgb2JqZWN0IG11c3QgY29udGFpbiB0aGUgXFwncmVnZXhcXCcga2V5Jyk7XG4gICAgfVxuICAgIGlmICghY3VzdG9tUGF0dGVybnMubWFzaykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgY3VzdG9tUGF0dGVybnMgb2JqZWN0IG11c3QgY29udGFpbiB0aGUgXFwnbWFza1xcJyBrZXknKTtcbiAgICB9XG4gICAgLy8gQWxzbyBjaGVjayB0aGF0IHRoZWlyIGxlbmd0aHMgYXJlIGVxdWFsXG4gICAgaWYgKGN1c3RvbVBhdHRlcm5zLnJlZ2V4Lmxlbmd0aCAhPT0gY3VzdG9tUGF0dGVybnMubWFzay5sZW5ndGgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIGN1c3RvbVBhdHRlcm5zIG9iamVjdCBtdXN0IGhhdmUgZXF1YWwgbGVuZ3RoIGZvciBib3RoIFxcJ3JlZ2V4XFwnIGFuZCBcXCdtYXNrXFwnJyk7XG4gICAgfVxuXG4gICAgQ1VTVE9NX1BBVFRFUk5TX0xFTkdUSCA9IGN1c3RvbVBhdHRlcm5zLnJlZ2V4Lmxlbmd0aDtcblxuICAgIC8vIFB1c2ggdGhlIHJlZ2V4IGFuZCBtYXNrIGVsZW1lbnRzIG9udG8gdGhlaXIgcmVzcGVjdGl2ZSBhcnJheXNcbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgQ1VTVE9NX1BBVFRFUk5TX0xFTkdUSDsgaW5kZXgrKykge1xuICAgICAgQ1VTVE9NX1BBVFRFUk5TX1JFR0VYLnB1c2gobmV3IFJlZ0V4cChgJHtjdXN0b21QYXR0ZXJucy5yZWdleFtpbmRleF19YCwgJ2dpJykpO1xuICAgICAgQ1VTVE9NX1BBVFRFUk5TX01BU0sucHVzaChTdHJpbmcucmF3YCR7Y3VzdG9tUGF0dGVybnMubWFza1tpbmRleF19YCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbWFza0N1c3RvbVBhdHRlcm4odGV4dCkge1xuICAgIGxldCByZXN1bHQ7XG4gICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IENVU1RPTV9QQVRURVJOU19MRU5HVEg7IGluZGV4KyspIHtcbiAgICAgIHJlc3VsdCA9IHRleHQucmVwbGFjZShDVVNUT01fUEFUVEVSTlNfUkVHRVhbaW5kZXhdLCBDVVNUT01fUEFUVEVSTlNfTUFTS1tpbmRleF0pO1xuICAgICAgLy8gSWYgdGhlIHRleHQgaXMgcmVwbGFjZWQsIHJldHVybiB0aGUgcmVzdWx0XG4gICAgICBpZiAodGV4dCAhPT0gcmVzdWx0KSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIElmIHRleHQgaXMgdW5jaGFuZ2VkLCByZXR1cm4gdGhlIG9yaWdpbmFsXG4gICAgcmV0dXJuIHRleHQ7XG4gIH1cblxuICBjb25zdCBBV1NfS0VZX1BBVFRFUk4gPSBuZXcgUmVnRXhwKFN0cmluZy5yYXdgKGF3c19rZXlfaWR8YXdzX3NlY3JldF9rZXl8YWNjZXNzX2tleV9pZHxzZWNyZXRfYWNjZXNzX2tleSlcXHMqPVxccyonKFteJ10rKSdgLFxuICAgICdnaScpO1xuICBjb25zdCBBV1NfVE9LRU5fUEFUVEVSTiA9IG5ldyBSZWdFeHAoU3RyaW5nLnJhd2AoYWNjZXNzVG9rZW58dGVtcFRva2VufGtleVNlY3JldClcXHMqOlxccypcIihbYS16MC05LytdezMyLH09ezAsMn0pXCJgLFxuICAgICdnaScpO1xuICBjb25zdCBTQVNfVE9LRU5fUEFUVEVSTiA9IG5ldyBSZWdFeHAoU3RyaW5nLnJhd2Aoc2lnfHNpZ25hdHVyZXxBV1NBY2Nlc3NLZXlJZHxwYXNzd29yZHxwYXNzY29kZSk9KFxcP1A8c2VjcmV0PlthLXowLTklLytdezE2LH0pYCxcbiAgICAnZ2knKTtcbiAgY29uc3QgUFJJVkFURV9LRVlfUEFUVEVSTiA9IG5ldyBSZWdFeHAoU3RyaW5nLnJhd2AtLS0tLUJFR0lOIFBSSVZBVEUgS0VZLS0tLS1cXFxcbihbYS16MC05Lys9XFxcXG5dezMyLH0pXFxcXG4tLS0tLUVORCBQUklWQVRFIEtFWS0tLS0tYCwgLy8gcHJhZ21hOiBhbGxvd2xpc3Qgc2VjcmV0XG4gICAgJ2dpbScpO1xuICBjb25zdCBQUklWQVRFX0tFWV9EQVRBX1BBVFRFUk4gPSBuZXcgUmVnRXhwKFN0cmluZy5yYXdgXCJwcml2YXRlS2V5RGF0YVwiOiBcIihbYS16MC05Lys9XFxcXG5dezEwLH0pXCJgLFxuICAgICdnaW0nKTtcbiAgLy8gQ29sb24gaW4gdGhlIGdyb3VwIChbYS16MC05PS86XyUtK117OCx9KSB3YXMgYWRkZWQgdG8gZGV0ZWN0IHRva2VucyB0aGF0IGNvbnRhaW4gYWRkaXRpb25hbCBkZXRhaWxzIGJlZm9yZSB0aGUgYWN0dWFsIHRva2VuLlxuICAvLyBTdWNoIGFzIHZlcnNpb24gb3IgaGludCAodG9rZW49dmVyOjEtaGludDoxMjMzLXJlYWxUb2tlbi4uLikuXG4gIGNvbnN0IENPTk5FQ1RJT05fVE9LRU5fUEFUVEVSTiA9IG5ldyBSZWdFeHAoU3RyaW5nLnJhd2AodG9rZW58YXNzZXJ0aW9uIGNvbnRlbnQpKFtcXCdcXFwiXFxzOj1dKykoW2EtejAtOT0vOl9cXCVcXC1cXCtdezgsfSlgLFxuICAgICdnaScpO1xuICBjb25zdCBQQVNTV09SRF9QQVRURVJOID0gbmV3IFJlZ0V4cChcbiAgICBTdHJpbmcucmF3YChwYXNzd29yZHxwd2QpKFtcXCdcXFwiXFxzOj1dKykoW2EtejAtOSFcXFwiI1xcJCUmXFxcXFxcJ1xcKFxcKVxcKlxcK1xcLC1cXC4vOjs8PT5cXD9cXEBcXFtcXF1cXF5fYCArXG4gICAgJ2AnICtcbiAgICBTdHJpbmcucmF3YFxce1xcfFxcfX5dezgsfSlgLFxuICAgICdnaScpO1xuICBjb25zdCBQQVNTQ09ERV9QQVRURVJOID0gbmV3IFJlZ0V4cChTdHJpbmcucmF3YChwYXNzY29kZXxvdHB8cGlufG90YWMpXFxzKihbOj1dKVxccyooWzAtOV17NCw2fSlgLCAnZ2knKTtcblxuXG4gIGZ1bmN0aW9uIG1hc2tBd3NLZXlzKHRleHQpIHtcbiAgICByZXR1cm4gdGV4dC5yZXBsYWNlKEFXU19LRVlfUEFUVEVSTiwgU3RyaW5nLnJhd2AkMSQyKioqKmApO1xuICB9XG5cbiAgZnVuY3Rpb24gbWFza0F3c1Rva2VuKHRleHQpIHtcbiAgICByZXR1cm4gdGV4dC5yZXBsYWNlKEFXU19UT0tFTl9QQVRURVJOLCBTdHJpbmcucmF3YCQxXCI6XCJYWFhYXCJgKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1hc2tTYXNUb2tlbih0ZXh0KSB7XG4gICAgcmV0dXJuIHRleHQucmVwbGFjZShTQVNfVE9LRU5fUEFUVEVSTiwgU3RyaW5nLnJhd2AkMT0qKioqYCk7XG4gIH1cblxuICBmdW5jdGlvbiBtYXNrUHJpdmF0ZUtleSh0ZXh0KSB7XG4gICAgcmV0dXJuIHRleHQucmVwbGFjZShQUklWQVRFX0tFWV9QQVRURVJOLCBTdHJpbmcucmF3YC0tLS0tQkVHSU4gUFJJVkFURSBLRVktLS0tLVxcXFxcXFxcblhYWFhcXFxcXFxcXG4tLS0tLUVORCBQUklWQVRFIEtFWS0tLS0tYCk7IC8vIHByYWdtYTogYWxsb3dsaXN0IHNlY3JldFxuICB9XG5cbiAgZnVuY3Rpb24gbWFza1ByaXZhdGVLZXlEYXRhKHRleHQpIHtcbiAgICByZXR1cm4gdGV4dC5yZXBsYWNlKFBSSVZBVEVfS0VZX0RBVEFfUEFUVEVSTiwgU3RyaW5nLnJhd2BcInByaXZhdGVLZXlEYXRhXCI6IFwiWFhYWFwiYCk7XG4gIH1cblxuICBmdW5jdGlvbiBtYXNrQ29ubmVjdGlvblRva2VuKHRleHQpIHtcbiAgICByZXR1cm4gdGV4dC5yZXBsYWNlKENPTk5FQ1RJT05fVE9LRU5fUEFUVEVSTiwgU3RyaW5nLnJhd2AkMSQyKioqKmApO1xuICB9XG5cbiAgZnVuY3Rpb24gbWFza1Bhc3N3b3JkKHRleHQpIHtcbiAgICByZXR1cm4gdGV4dC5yZXBsYWNlKFBBU1NXT1JEX1BBVFRFUk4sIFN0cmluZy5yYXdgJDEkMioqKipgKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1hc2tQYXNzY29kZSh0ZXh0KSB7XG4gICAgcmV0dXJuIHRleHQucmVwbGFjZShQQVNTQ09ERV9QQVRURVJOLCBTdHJpbmcucmF3YCQxJDIqKioqYCk7XG4gIH1cblxuXG4gIC8qKlxuICAgKiBNYXNrcyBhbnkgc2VjcmV0cy5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IHRleHQgbWF5IGNvbnRhaW4gYSBzZWNyZXQuXG4gICAqXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IHRoZSBtYXNrZWQgc3RyaW5nLlxuICAgKi9cbiAgdGhpcy5tYXNrU2VjcmV0cyA9IGZ1bmN0aW9uICh0ZXh0KSB7XG4gICAgbGV0IHJlc3VsdDtcbiAgICBpZiAoIXRleHQpIHtcbiAgICAgIHJlc3VsdCA9XG4gICAgICB7XG4gICAgICAgIG1hc2tlZDogZmFsc2UsXG4gICAgICAgIG1hc2tlZHR4dDogdGV4dCxcbiAgICAgICAgZXJyc3RyOiBudWxsXG4gICAgICB9O1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBsZXQgbWFza2VkID0gZmFsc2U7XG4gICAgbGV0IG1hc2tlZHR4dCA9ICcnO1xuICAgIGxldCBlcnJzdHIgPSBudWxsO1xuICAgIHRyeSB7XG4gICAgICBpZiAobW9jaykge1xuICAgICAgICBtb2NrLmV4ZWN1dGUoKTtcbiAgICAgIH1cblxuICAgICAgbWFza2VkdHh0ID1cbiAgICAgICAgbWFza1Bhc3Njb2RlKFxuICAgICAgICAgIG1hc2tDb25uZWN0aW9uVG9rZW4oXG4gICAgICAgICAgICBtYXNrUGFzc3dvcmQoXG4gICAgICAgICAgICAgIG1hc2tQcml2YXRlS2V5RGF0YShcbiAgICAgICAgICAgICAgICBtYXNrUHJpdmF0ZUtleShcbiAgICAgICAgICAgICAgICAgIG1hc2tBd3NUb2tlbihcbiAgICAgICAgICAgICAgICAgICAgbWFza1Nhc1Rva2VuKFxuICAgICAgICAgICAgICAgICAgICAgIG1hc2tBd3NLZXlzKHRleHQpXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIClcbiAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgICBpZiAoQ1VTVE9NX1BBVFRFUk5TX0xFTkdUSCA+IDApIHtcbiAgICAgICAgbWFza2VkdHh0ID0gbWFza0N1c3RvbVBhdHRlcm4obWFza2VkdHh0KTtcbiAgICAgIH1cbiAgICAgIGlmIChtYXNrZWR0eHQgIT09IHRleHQpIHtcbiAgICAgICAgbWFza2VkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIG1hc2tlZCA9IHRydWU7XG4gICAgICBtYXNrZWR0eHQgPSBlcnIudG9TdHJpbmcoKTtcbiAgICAgIGVycnN0ciA9IGVyci50b1N0cmluZygpO1xuICAgIH1cblxuICAgIHJlc3VsdCA9XG4gICAge1xuICAgICAgbWFza2VkOiBtYXNrZWQsXG4gICAgICBtYXNrZWR0eHQ6IG1hc2tlZHR4dCxcbiAgICAgIGVycnN0cjogZXJyc3RyXG4gICAgfTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNlY3JldERldGVjdG9yO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/lib/secret_detector.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/lib/services/large_result_set.js":
/*!*********************************************************************!*\
  !*** ./node_modules/snowflake-sdk/lib/services/large_result_set.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter);\nconst Util = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/snowflake-sdk/lib/util.js\");\nconst Errors = __webpack_require__(/*! ../errors */ \"(rsc)/./node_modules/snowflake-sdk/lib/errors.js\");\nconst Logger = __webpack_require__(/*! ../logger */ \"(rsc)/./node_modules/snowflake-sdk/lib/logger.js\");\nconst ErrorCodes = Errors.codes;\n\n/**\n * Creates a new instance of an LargeResultSetService.\n *\n * @param {Object} connectionConfig\n * @param {Object} httpClient\n * @constructor\n */\nfunction LargeResultSetService(connectionConfig, httpClient) {\n  // validate input\n  Errors.assertInternal(Util.isObject(connectionConfig));\n  Errors.assertInternal(Util.isObject(httpClient));\n\n  /**\n   * Should HTTP client error be retried\n   * @param err Client error or null/undefined\n   * @return {boolean}\n   */\n  function isRetryableClientError(err) {\n    return err && (\n      err.code === 'ECONNRESET' ||\n        err.code === 'ETIMEDOUT' ||\n        // error code ECONNABORTED is thrown from axios on timeout\n        (err.name === 'AxiosError' && err.code === 'ECONNABORTED')\n    );\n  }\n\n  function isRetryableError(response, err) {\n    // https://aws.amazon.com/articles/1904 (Handling Errors)\n    // Note: 403's are retried because of a bug in S3/Blob\n    return Util.isRetryableHttpError(response, true) || isRetryableClientError(err);\n  }\n\n  function isUnsuccessfulResponse(response) {\n    // even for 200 OK S3 can return xml error (large files are normally binary)\n    return response && (response.statusCode !== 200 || response.getResponseHeader('Content-Type') === 'application/xml');\n  }\n\n  /**\n   * Issues a request to get an object from S3/Blob.\n   *\n   * @param {Object} options\n   */\n  this.getObject = function getObject(options) {\n    let numRetries = 0, sleep = 1;\n\n    // get the maximum number of retries\n    let maxNumRetries = options.maxNumRetries;\n    if (!Util.exists(maxNumRetries)) {\n      maxNumRetries = connectionConfig.getRetryLargeResultSetMaxNumRetries();\n    }\n    Errors.assertInternal(Util.isNumber(maxNumRetries) && maxNumRetries >= 0);\n\n    // invoked when the request completes\n    const callback = function callback(err, response, body) {\n      // err happens on timeouts and response is passed when server responded\n      if (err || isUnsuccessfulResponse(response)) {\n        // if we're running in DEBUG loglevel, probably we want to see the full error too\n        const logErr = err ? JSON.stringify(err, Object.getOwnPropertyNames(err))\n          : `status: ${JSON.stringify(response.status)} ${JSON.stringify(response.statusText)}`\n            + ` headers: ${JSON.stringify(response.headers)}`;\n        Logger.getInstance().debug('Encountered an error when getting data from cloud storage: ' + logErr);\n        // if we haven't exceeded the maximum number of retries yet and the\n        // server came back with a retryable error code.\n        if (numRetries < maxNumRetries && isRetryableError(response, err)) {\n          // increment the number of retries\n          numRetries++;\n\n          // use exponential backoff with decorrelated jitter to compute the\n          // next sleep time:\n          const cap = connectionConfig.getRetryLargeResultSetMaxSleepTime();\n          sleep = Util.nextSleepTime(1, cap, sleep);\n\n          // wait the appropriate amount of time before retrying the request\n          const nextSendRequestWaitTimeMs = sleep * 1000;\n          Logger.getInstance().trace('Request will be retried after %d milliseconds', Math.floor(nextSendRequestWaitTimeMs));\n          setTimeout(sendRequest, nextSendRequestWaitTimeMs);\n          return;\n        } else {\n          Logger.getInstance().trace('Request won\\'t be retried');\n          if (isUnsuccessfulResponse(response)) {\n            err = Errors.createLargeResultSetError(ErrorCodes.ERR_LARGE_RESULT_SET_RESPONSE_FAILURE, response);\n          } else {\n            err = Errors.createNetworkError(ErrorCodes.ERR_LARGE_RESULT_SET_NETWORK_COULD_NOT_CONNECT, err);\n          }\n        }\n      }\n      if (response) {\n        Logger.getInstance().trace(`Response headers are: ${JSON.stringify(response.headers)}`);\n      }\n      // if we have an error, clear the body\n      if (err) {\n        body = null;\n      }\n\n      // if a callback was specified, invoke it\n      if (Util.isFunction(options.callback)) {\n        try {\n          options.callback(err, body);\n        } catch (e) {\n          Logger.getInstance().error(`Callback failed with ${e}`);\n        }\n      }\n    };\n\n    const sendRequest = function sendRequest() {\n      // issue a request to get the object from S3/Blob\n      httpClient.request(\n        {\n          method: 'GET',\n          url: options.url,\n          headers: options.headers,\n          gzip: true, // gunzip the response\n          appendRequestId: false,\n          callback,\n        });\n    };\n\n    sendRequest();\n  };\n}\n\nUtil.inherits(LargeResultSetService, EventEmitter);\n\nmodule.exports = LargeResultSetService;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/lib/services/large_result_set.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/lib/services/sf.js":
/*!*******************************************************!*\
  !*** ./node_modules/snowflake-sdk/lib/services/sf.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n  SnowflakeService state machine\n\n  Preconnected - enter()      - Preconnected\n               - connect()    - Connecting\n               - request()    - Connecting\n               - destroy()    - Preconnected\n\n  Connecting   - enter()      - async operation\n                                - Connected if operation succeeds\n                                - Disconnected if network error (we need another PreConnected state)\n                                - Disconnected if operation fails\n                 connect()    - error\n                 request()    - enqueue\n                 destroy()    - enqueue\n\n  Connected    - enter()      - Connected\n                 connect()    - error\n                 request()    - async operation\n                                - Connected if operation succeeds\n                                - Connected if network error\n                                - Renewing if GS says session token has expired\n                                - Disconnected if GS says session token is invalid\n                 destroy()    - async operation\n                              - Disconnected if operation succeeds\n                              - Connected if network error\n                              - Connected if operation fails\n\n  Renewing     - enter()      - async operation\n                                - Connected if operation succeeds\n                                - Connected if network error\n                                - Disconnected if operation fails\n               - connect()    - error\n               - request()    - enqueue\n               - destroy()    - enqueue\n\n  Disconnected - enter()      - Disconnected\n               - connect()    - Disconnected\n               - request()    - Disconnected\n               - destroy()    - Disconnected\n */\n\nconst { v4: uuidv4 } = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/uuid/dist/esm-node/index.js\");\nconst EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter);\nconst Util = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/snowflake-sdk/lib/util.js\");\nconst Errors = __webpack_require__(/*! ../errors */ \"(rsc)/./node_modules/snowflake-sdk/lib/errors.js\");\nconst ErrorCodes = Errors.codes;\nconst Url = __webpack_require__(/*! url */ \"url\");\nconst QueryString = __webpack_require__(/*! querystring */ \"querystring\");\nconst Parameters = __webpack_require__(/*! ../parameters */ \"(rsc)/./node_modules/snowflake-sdk/lib/parameters.js\");\nconst GSErrors = __webpack_require__(/*! ../constants/gs_errors */ \"(rsc)/./node_modules/snowflake-sdk/lib/constants/gs_errors.js\");\nconst QueryContextCache = __webpack_require__(/*! ../queryContextCache */ \"(rsc)/./node_modules/snowflake-sdk/lib/queryContextCache.js\");\nconst Logger = __webpack_require__(/*! ../logger */ \"(rsc)/./node_modules/snowflake-sdk/lib/logger.js\");\nconst GlobalConfig = __webpack_require__(/*! ../global_config */ \"(rsc)/./node_modules/snowflake-sdk/lib/global_config.js\");\nconst AuthenticationTypes  = __webpack_require__(/*! ../authentication/authentication_types */ \"(rsc)/./node_modules/snowflake-sdk/lib/authentication/authentication_types.js\");\nconst AuthOkta = __webpack_require__(/*! ../authentication/auth_okta */ \"(rsc)/./node_modules/snowflake-sdk/lib/authentication/auth_okta.js\");\nconst AuthKeypair = __webpack_require__(/*! ../authentication/auth_keypair */ \"(rsc)/./node_modules/snowflake-sdk/lib/authentication/auth_keypair.js\");\nconst Authenticator = __webpack_require__(/*! ../authentication/authentication */ \"(rsc)/./node_modules/snowflake-sdk/lib/authentication/authentication.js\");\nconst sfParams = __webpack_require__(/*! ../constants/sf_params */ \"(rsc)/./node_modules/snowflake-sdk/lib/constants/sf_params.js\");\n\nfunction isRetryableNetworkError(err) {\n  // anything other than REVOKED error can be retryable.\n  return !Object.prototype.hasOwnProperty.call(err, 'cause') ||\n    err.cause === undefined ||\n    !Object.prototype.hasOwnProperty.call(err.cause, 'code') ||\n    (\n      err.cause.code !== ErrorCodes.ERR_OCSP_REVOKED &&\n      err.cause.code !== 'DEPTH_ZERO_SELF_SIGNED_CERT' &&\n      err.cause.code !== 'CERT_HAS_EXPIRED' &&\n      err.cause.code !== 'UNABLE_TO_VERIFY_LEAF_SIGNATURE' &&\n      err.cause.code !== 'SELF_SIGNED_CERT_IN_CHAIN'\n    );\n}\n\nfunction isRetryableHttpError(err) {\n  return Object.prototype.hasOwnProperty.call(err, 'response') &&\n    Util.isRetryableHttpError(err.response, false);\n}\n\n/**\n * Creates a new SnowflakeService instance.\n *\n * @param {Object} connectionConfig\n * @param {Object} httpClient\n * @param {Object} [config]\n * @constructor\n */\nfunction SnowflakeService(connectionConfig, httpClient, config) {\n  // validate input\n  Errors.assertInternal(Util.isObject(connectionConfig));\n  Errors.assertInternal(Util.isObject(httpClient));\n  Errors.assertInternal(!Util.exists(config) || Util.isObject(config));\n\n  // if a config object was specified, verify\n  // that it has all the information we need\n  let tokenInfoConfig;\n  if (Util.exists(config)) {\n    Errors.assertInternal(Util.isObject(config));\n    Errors.assertInternal(Util.isObject(config.tokenInfo));\n\n    tokenInfoConfig = config.tokenInfo;\n  } else if (connectionConfig.sessionToken) {\n    tokenInfoConfig = {\n      sessionToken: connectionConfig.sessionToken,\n      masterToken: connectionConfig.masterToken || connectionConfig.sessionToken,\n      sessionTokenExpirationTime: connectionConfig.sessionTokenExpirationTime || Date.now() + 1000 * 60 * 60 * 24,\n      masterTokenExpirationTime: connectionConfig.masterTokenExpirationTime || Date.now() + 1000 * 60 * 60 * 24\n    };\n  }\n\n  // create a new TokenInfo instance\n  const tokenInfo = new TokenInfo(tokenInfoConfig);\n\n  this.authenticator = Authenticator.getAuthenticator(connectionConfig, httpClient);\n\n  // create state objects for all the different states we can be in\n  const stateOptions =\n    {\n      snowflakeService: this,\n      httpClient: httpClient,\n      connectionConfig: connectionConfig,\n      tokenInfo: tokenInfo\n    };\n  const statePristine = new StatePristine(stateOptions);\n  const stateConnecting = new StateConnecting(stateOptions);\n  const stateConnected = new StateConnected(stateOptions);\n  const stateRenewing = new StateRenewing(stateOptions);\n  const stateDisconnected = new StateDisconnected(stateOptions);\n\n  let currentState;\n\n  /**\n   * Transitions to a given state.\n   *\n   * @param {Object} state\n   * @param {Object} [transitionContext]\n   */\n  const transitionTo = function (state, transitionContext) {\n    // this check is necessary to make sure we don't re-enter a transient state\n    // like Renewing when we're already in it\n    if (currentState !== state) {\n      // if we have a current state, exit it; the null check is necessary\n      // because the currentState is undefined at bootstrap time when we\n      // transition to the first state\n      if (currentState) {\n        currentState.exit();\n      }\n\n      // update the current state\n      currentState = state;\n\n      // enter the new state\n      currentState.enter(transitionContext);\n    }\n  };\n\n  /**\n   * Set the session id for the current SnowflakeService\n   * @param sessionId\n   */\n  this.setSessionId = function (sessionId) {\n    this.sessionId = sessionId;\n  };\n\n  /**\n   * Get the session id.\n   * @returns {number}\n   */\n  this.getSessionId = function () {\n    return this.sessionId;\n  };\n\n  /**\n   * Transitions to the Pristine state.\n   *\n   * {Object} [transitionContext]\n   */\n  this.transitionToPristine = function (transitionContext) {\n    transitionTo(statePristine, transitionContext);\n  };\n\n  /**\n   * Transitions to the Connecting state.\n   *\n   * {Object} [transitionContext]\n   */\n  this.transitionToConnecting = function (transitionContext) {\n    transitionTo(stateConnecting, transitionContext);\n  };\n\n  /**\n   * Transitions to the Connected state.\n   *\n   * {Object} [transitionContext]\n   */\n  this.transitionToConnected = function (transitionContext) {\n    transitionTo(stateConnected, transitionContext);\n  };\n\n  /**\n   * Transitions to the Renewing state.\n   *\n   * {Object} [transitionContext]\n   */\n  this.transitionToRenewing = function (transitionContext) {\n    transitionTo(stateRenewing, transitionContext);\n  };\n\n  /**\n   * Transitions to the Disconnected state.\n   *\n   * {Object} [transitionContext]\n   */\n  this.transitionToDisconnected = function (transitionContext) {\n    transitionTo(stateDisconnected, transitionContext);\n\n    // clear the tokens because we're in a fatal state and we don't want the\n    // tokens to be available via getConfig() anymore\n    tokenInfo.clearTokens();\n  };\n\n  /**\n   * Returns a configuration object that can be passed to the SnowflakeService\n   * constructor to get an equivalent SnowflakeService object.\n   *\n   * @returns {Object}\n   */\n  this.getConfig = function () {\n    return {\n      tokenInfo: tokenInfo.getConfig()\n    };\n  };\n\n  /**\n   * Establishes a connection to Snowflake.\n   *\n   * @param {Object} options\n   */\n  this.connect = function (options) {\n    new OperationConnect(options).validate().execute();\n  };\n\n  /**\n   * Issues a connect-continue request to Snowflake.\n   *\n   * @param {Object} [options]\n   */\n  this.continue = function (options) {\n    new OperationContinue(options).validate().execute();\n  };\n\n  /**\n   * Issues a generic request to Snowflake.\n   *\n   * @param {Object} options\n   */\n  this.request = function (options) {\n    new OperationRequest(options).validate().execute();\n  };\n\n  /**\n   * Issues a generic async request to Snowflake.\n   *\n   * @param {Object} options\n   */\n  this.requestAsync = async function (options) {\n    return await new OperationRequest(options).validate().executeAsync();\n  };\n\n  /**\n   * Terminates the current connection to Snowflake.\n   *\n   * @param {Object} options\n   */\n  this.destroy = function (options) {\n    this.clearCache();\n    new OperationDestroy(options).validate().execute();\n  };\n\n  /**\n   * Creates a new OperationAbstract.\n   *\n   * @param {Object} options\n   * @constructor\n   */\n  function OperationAbstract(options) {\n    this.options = options;\n  }\n\n  /**\n   * Validates the operation options.\n   *\n   * @returns {Object} the operation.\n   */\n  OperationAbstract.prototype.validate = function () {\n    return this;\n  };\n\n  /**\n   * Executes the operation.\n   */\n  OperationAbstract.prototype.execute = function () {\n  };\n\n  /**\n   * Creates a new OperationConnect.\n   *\n   * @param {Object} options\n   * @constructor\n   */\n  function OperationConnect(options) {\n    OperationAbstract.apply(this, [options]);\n  }\n\n  Util.inherits(OperationConnect, OperationAbstract);\n\n  /**\n   * @inheritDoc\n   */\n  OperationConnect.prototype.validate = function () {\n    // verify that the options object contains a callback function\n    const options = this.options;\n    Errors.assertInternal(\n      (Util.isObject(options) && Util.isFunction(options.callback)));\n\n    return this;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  OperationConnect.prototype.execute = function () {\n    currentState.connect(this.options);\n  };\n\n  /**\n   * Creates a new OperationContinue.\n   *\n   * @param {Object} options\n   * @constructor\n   */\n  function OperationContinue(options) {\n    OperationAbstract.apply(this, [options]);\n  }\n\n  Util.inherits(OperationContinue, OperationAbstract);\n\n  /**\n   * @inheritDoc\n   */\n  OperationContinue.prototype.validate = function () {\n    // verify that the options contain a json object\n    const options = this.options;\n    Errors.assertInternal(\n      Util.isObject(options) && Util.isObject(options.json));\n\n    return this;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  OperationContinue.prototype.execute = function () {\n    currentState.continue(this.options);\n  };\n\n  /**\n   * Creates a new OperationRequest.\n   *\n   * @param {Object} options\n   * @constructor\n   */\n  function OperationRequest(options) {\n    OperationAbstract.apply(this, [options]);\n  }\n\n  Util.inherits(OperationRequest, OperationAbstract);\n\n  /**\n   * @inheritDoc\n   */\n  OperationRequest.prototype.validate = function () {\n    // verify that the options object contains all the necessary information\n    const options = this.options;\n    Errors.assertInternal(Util.isObject(options));\n    Errors.assertInternal(Util.isString(options.method));\n    Errors.assertInternal(\n      !Util.exists(options.headers) || Util.isObject(options.headers));\n    Errors.assertInternal(Util.isString(options.url));\n    Errors.assertInternal(\n      !Util.exists(options.json) || Util.isObject(options.json));\n\n    return this;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  OperationRequest.prototype.execute = function () {\n    currentState.request(this.options);\n  };\n\n  /**\n  * @inheritDoc\n  */\n  OperationRequest.prototype.executeAsync = async function () {\n    return await currentState.requestAsync(this.options);\n  };\n\n  /**\n   * Creates a new OperationDestroy.\n   *\n   * @param {Object} options\n   * @constructor\n   */\n  function OperationDestroy(options) {\n    OperationAbstract.apply(this, [options]);\n  }\n\n  Util.inherits(OperationDestroy, OperationAbstract);\n\n  /**\n   * @inheritDoc\n   */\n  OperationDestroy.prototype.validate = function () {\n    // verify that the options object contains a callback function\n    const options = this.options;\n    Errors.assertInternal(Util.isObject(options) &&\n      Util.isFunction(options.callback));\n\n    return this;\n  };\n\n  /**\n   * @inheritDoc\n   */\n  OperationDestroy.prototype.execute = function () {\n    // delegate to current state\n    currentState.destroy(this.options);\n  };\n\n  /* All queued operations will be added to this array */\n  const operationQueue = [];\n\n  /**\n   * Appends a request operation to the queue.\n   *\n   * @param {Object} options\n   */\n  this.enqueueRequest = function (options) {\n    operationQueue.push(new OperationRequest(options));\n  };\n\n  /**\n   * Appends a destroy operation to the queue.\n   *\n   * @param {Object} options\n   */\n  this.enqueueDestroy = function (options) {\n    operationQueue.push(new OperationDestroy(options));\n  };\n\n  /**\n   * Executes all the operations in the queue.\n   */\n  this.drainOperationQueue = function () {\n    // execute all the operations in the queue\n    for (let index = 0, length = operationQueue.length; index < length; index++) {\n      operationQueue[index].execute();\n    }\n\n    // empty the queue\n    operationQueue.length = 0;\n  };\n\n  this.isConnected = function () {\n    return currentState === stateConnected ||\n      currentState === stateConnecting ||\n      currentState === stateRenewing;\n  };\n\n  this.getServiceName = function () {\n    return Parameters.getValue(Parameters.names.SERVICE_NAME);\n  };\n\n  this.getClientSessionKeepAlive = function () {\n    return Parameters.getValue(Parameters.names.CLIENT_SESSION_KEEP_ALIVE);\n  };\n\n  this.getClientSessionKeepAliveHeartbeatFrequency = function () {\n    return Parameters.getValue(Parameters.names.CLIENT_SESSION_KEEP_ALIVE_HEARTBEAT_FREQUENCY);\n  };\n\n  this.getJsTreatIntegerAsBigInt = function () {\n    return Parameters.getValue(Parameters.names.JS_TREAT_INTEGER_AS_BIGINT);\n  };\n\n  this.getAuthenticator = function () {\n    return this.authenticator;\n  };\n\n  // if we don't have any tokens, start out as pristine\n  if (tokenInfo.isEmpty()) {\n    this.transitionToPristine();\n  } else {\n    // we're already connected\n    this.transitionToConnected();\n  }\n\n  /**\n  * Issues a post request to Snowflake.\n  *\n  * @param {Object} options\n  */\n  this.postAsync = function (options) {\n    return new OperationRequest(options).validate().executeAsync();\n  };\n\n  this.getQueryContextDTO = function () {\n    if (!this.qcc){\n      return;\n    }\n    return this.qcc.getQueryContextDTO();\n  };\n\n  this.deserializeQueryContext = function (data) {\n    if (!this.qcc){\n      return;\n    }\n    this.qcc.deserializeQueryContext(data);\n  };\n\n  this.clearCache = function () {\n    if (!this.qcc){\n      return;\n    }\n    this.qcc.clearCache(); \n  };\n\n  this.initializeQueryContextCache = function (size) {\n    if (!connectionConfig.getDisableQueryContextCache()){\n      this.qcc = new QueryContextCache(size, this.getSessionId());\n    } else {\n      Logger.getInstance().debug(`QueryContextCache initialization skipped as it is disabled for connection with sessionId: ${this.sessionId}`);\n    }\n  };\n\n  // testing purpose\n  this.getQueryContextCacheSize = function () {\n    if (!this.qcc){\n      return;\n    }\n    return this.qcc.getSize();\n  };\n}\n\nUtil.inherits(SnowflakeService, EventEmitter);\n\nmodule.exports = SnowflakeService;\n\n\n///////////////////////////////////////////////////////////////////////////\n////                StateAbstract                                      ////\n///////////////////////////////////////////////////////////////////////////\n\n/**\n * Creates a new StateAbstract instance.\n *\n * @param {Object} options\n * @constructor\n */\nfunction StateAbstract(options) {\n  /**\n   * Issues an http request to Snowflake.\n   *\n   * @param {Object} requestOptions\n   * @param {Object} httpClient\n   * @param {Object} auth\n   * @returns {Object} the http request object.\n   */\n  function sendHttpRequest(requestOptions, httpClient, auth) {\n\n    const params = requestOptions.params || {};\n    if (!requestOptions.excludeGuid) {\n      addGuidToParams(params);\n    }\n\n    const realRequestOptions =\n      {\n        method: requestOptions.method,\n        headers: requestOptions.headers,\n        url: requestOptions.absoluteUrl,\n        gzip: requestOptions.gzip,\n        json: requestOptions.json,\n        params: params,\n        callback: async function (err, response, body) {\n          // if we got an error, wrap it into a network error\n          if (err) {\n            // if we're running in DEBUG loglevel, probably we want to see the full error instead\n            Logger.getInstance().debug('Encountered an error when sending the request. Details: '\n                + JSON.stringify(err, Object.getOwnPropertyNames(err)));\n\n            err = Errors.createNetworkError(\n              ErrorCodes.ERR_SF_NETWORK_COULD_NOT_CONNECT, err);\n          } else if (!response) {\n            // empty response\n            err = Errors.createUnexpectedContentError(\n              ErrorCodes.ERR_SF_RESPONSE_NOT_JSON, '(EMPTY)');\n          } else if (Object.prototype.hasOwnProperty.call(response, 'statusCode') &&\n            response.statusCode !== 200) {\n            // if we didn't get a 200, the request failed\n            if (response.statusCode === 401 && response.body) {\n              let innerCode;\n              try {\n                innerCode = JSON.parse(response.body).code;\n              } catch (e) {\n                err = Errors.createRequestFailedError(\n                  ErrorCodes.ERR_SF_RESPONSE_FAILURE, response);\n                Logger.getInstance().debug('HTTP Error: %s', response.statusCode);\n              }\n              if (innerCode === '390104') {\n                err = Errors.createRequestFailedError(\n                  ErrorCodes.ERR_SF_RESPONSE_INVALID_TOKEN, response);\n                Logger.getInstance().debug('HTTP Error: %s', response.statusCode);\n              } else {\n                err = Errors.createRequestFailedError(\n                  ErrorCodes.ERR_SF_RESPONSE_FAILURE, response);\n                Logger.getInstance().debug('HTTP Error: %s', response.statusCode);\n              }\n            } else {\n              err = Errors.createRequestFailedError(\n                ErrorCodes.ERR_SF_RESPONSE_FAILURE, response);\n              Logger.getInstance().debug('HTTP Error: %s', response.statusCode);\n            }\n          } else {\n            // if the response body is a non-empty string and the response is\n            // supposed to contain json, try to json-parse the body\n            if (Util.isString(body) &&\n              response.getResponseHeader('Content-Type') ===\n              'application/json') {\n              try {\n                if (body.includes('smkId')) {\n                  body = Util.convertSmkIdToString(body);\n                }\n                body = JSON.parse(body);\n              } catch (parseError) {\n                // we expected to get json\n                err = Errors.createUnexpectedContentError(\n                  ErrorCodes.ERR_SF_RESPONSE_NOT_JSON, response.body);\n              }\n            }\n\n            // if we were able to successfully json-parse the body and the\n            // success flag is false, the operation we tried to perform failed\n            if (body && !body.success) {\n              const data = body.data;\n\n              if (body.code === GSErrors.code.ID_TOKEN_INVALID && data.authnMethod === 'TOKEN') {\n                Logger.getInstance().debug('ID Token being used has expired. Reauthenticating');\n                const key = Util.buildCredentialCacheKey(connectionConfig.host,\n                  connectionConfig.username, AuthenticationTypes.ID_TOKEN_AUTHENTICATOR);\n                await GlobalConfig.getCredentialManager().remove(key);\n                await auth.reauthenticate(requestOptions.json);\n                return httpClient.request(realRequestOptions);\n              }\n\n              err = Errors.createOperationFailedError(\n                body.code, data, body.message,\n                data && data.sqlState ? data.sqlState : undefined);\n            }\n          }\n          \n          // if we have an error, clear the body\n          if (err) {\n            body = undefined;\n          }\n\n          // if a callback was specified, invoke it\n          if (Util.isFunction(requestOptions.callback)) {\n            await requestOptions.callback.apply(requestOptions.scope, [err, body]);\n          }\n        }\n      };\n\n    if (requestOptions.retry > 2) {\n      const includesParam = requestOptions.url.includes('?');\n      realRequestOptions.url += (includesParam ? '&' : '?');\n      realRequestOptions.url +=\n        ('clientStartTime=' + requestOptions.startTime\n          + '&' + 'retryCount=' + (requestOptions.retry - 1));\n    }\n\n    return httpClient.request(realRequestOptions);\n  }\n\n  this.snowflakeService = options.snowflakeService;\n  this.httpClient = options.httpClient;\n  this.connectionConfig = options.connectionConfig;\n  this.tokenInfo = options.tokenInfo;\n\n  const connectionConfig = options.connectionConfig;\n  const snowflakeService = options.snowflakeService;\n  const httpClient = options.httpClient;\n\n  ///////////////////////////////////////////////////////////////////////////\n  ////                Request                                            ////\n  ///////////////////////////////////////////////////////////////////////////\n\n  /**\n   * Creates a new Request to Snowflake.\n   *\n   * @param {Object} requestOptions\n   * @constructor\n   */\n  function Request(requestOptions) {\n    this.requestOptions = requestOptions;\n  }\n\n  /**\n  * Sends out the request.\n  *\n  * @returns {Object} the request that was issued.\n  */\n  Request.prototype.sendAsync = async function () {\n    // pre-process the request options\n    this.preprocessOptions(this.requestOptions);\n\n    const params = this.requestOptions.params || {};\n    if (!this.requestOptions.excludeGuid) {\n      addGuidToParams(params);\n    }\n    const options =\n    {\n      method: this.requestOptions.method,\n      headers: this.requestOptions.headers,\n      url: this.requestOptions.absoluteUrl,\n      json: this.requestOptions.json,\n      params: params\n    };\n\n    // issue the async http request\n    //TODO: this should be wrapped with the same operations, as in the synchronous send method's callback.\n    return await httpClient.requestAsync(options);\n  };\n\n  function addGuidToParams(params) {\n    // In case of repeated requests for the same request ID,\n    // the Global UID is added for better traceability.\n    const guid = uuidv4();\n    params[sfParams.paramsNames.SF_REQUEST_GUID] = guid;\n  }\n\n  /**\n   * Sends out the request.\n   *\n   * @returns {Object} the request that was issued.\n   */\n  Request.prototype.send = function () {\n    // pre-process the request options\n    this.preprocessOptions(this.requestOptions);\n\n    // issue the http request\n    sendHttpRequest(this.requestOptions, httpClient, snowflakeService.getAuthenticator());\n  };\n\n  /**\n   * Pre-processes the request options just before the request is sent.\n   *\n   * @param {Object} requestOptions\n   */\n  Request.prototype.preprocessOptions = function (requestOptions) {\n    // augment the headers with the default request headers\n    requestOptions.headers =\n      Util.apply(this.getDefaultReqHeaders(), requestOptions.headers || {});\n\n    if (Util.isLoginRequest(requestOptions.url)) {\n      Util.apply(requestOptions.headers, {\n        'CLIENT_APP_VERSION': requestOptions.json.data.CLIENT_APP_VERSION,\n        'CLIENT_APP_ID': requestOptions.json.data.CLIENT_APP_ID,\n      });\n    }\n\n    // augment the options with the absolute url\n    requestOptions.absoluteUrl = this.buildFullUrl(requestOptions.url);\n\n    requestOptions.excludeGuid = !Util.exists(requestOptions.excludeGuid) ? false : requestOptions.excludeGuid;\n  };\n\n  /**\n   * Converts a relative url to an absolute url.\n   *\n   * @param {String} relativeUrl\n   *\n   * @returns {String}\n   */\n  Request.prototype.buildFullUrl = function (relativeUrl) {\n    return connectionConfig.accessUrl + relativeUrl;\n  };\n\n  /**\n   * Returns the default headers to send with every request.\n   *\n   * @returns {Object}\n   */\n  Request.prototype.getDefaultReqHeaders = function () {\n    return {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    };\n  };\n\n  ///////////////////////////////////////////////////////////////////////////\n  ////                SessionTokenRequest                                ////\n  ///////////////////////////////////////////////////////////////////////////\n\n  /**\n   * @constructor\n   */\n  function SessionTokenRequest() {\n    Request.apply(this, arguments);\n  }\n\n  Util.inherits(SessionTokenRequest, Request);\n\n  /**\n   * @inheritDoc\n   */\n  SessionTokenRequest.prototype.preprocessOptions = function (requestOptions) {\n    // call super\n    Request.prototype.preprocessOptions.apply(this, arguments);\n\n    // add the current session token to the request headers\n    requestOptions.headers = requestOptions.headers || {};\n    requestOptions.headers.Authorization =\n      'Snowflake Token=\"' + options.tokenInfo.getSessionToken() + '\"';\n    if (Util.string.isNotNullOrEmpty(\n      Parameters.getValue(Parameters.names.SERVICE_NAME))) {\n      requestOptions.headers['X-Snowflake-Service'] =\n        Parameters.getValue(Parameters.names.SERVICE_NAME);\n    }\n  };\n\n  ///////////////////////////////////////////////////////////////////////////\n  ////                MasterTokenRequest                                 ////\n  ///////////////////////////////////////////////////////////////////////////\n\n  /**\n   * @constructor\n   */\n  function MasterTokenRequest() {\n    Request.apply(this, arguments);\n  }\n\n  Util.inherits(MasterTokenRequest, Request);\n\n  /**\n   * @inheritDoc\n   */\n  MasterTokenRequest.prototype.preprocessOptions = function (requestOptions) {\n    // call super\n    Request.prototype.preprocessOptions.apply(this, arguments);\n\n    // add the current master token to the request headers\n    requestOptions.headers = requestOptions.headers || {};\n    requestOptions.headers.Authorization =\n      'Snowflake Token=\"' + options.tokenInfo.getMasterToken() + '\"';\n  };\n\n  ///////////////////////////////////////////////////////////////////////////\n  ////                UnauthenticatedRequest                             ////\n  ///////////////////////////////////////////////////////////////////////////\n\n  /**\n   * Creates a new UnauthenticatedRequest.\n   *\n   * @constructor\n   */\n  function UnauthenticatedRequest() {\n    Request.apply(this, arguments);\n  }\n\n  Util.inherits(UnauthenticatedRequest, Request);\n\n  /**\n   * Creates a new SessionTokenRequest.\n   *\n   * @param {Object} requestOptions\n   *\n   * @returns {Object}\n   */\n  this.createSessionTokenRequest = function (requestOptions) {\n    return new SessionTokenRequest(requestOptions);\n  };\n\n  /**\n   * Creates a new MasterTokenRequest.\n   *\n   * @param {Object} requestOptions\n   *\n   * @returns {Object}\n   */\n  this.createMasterTokenRequest = function (requestOptions) {\n    return new MasterTokenRequest(requestOptions);\n  };\n\n  /**\n   * Creates a new UnauthenticatedRequest.\n   *\n   * @param {Object} requestOptions\n   *\n   * @returns {Object}\n   */\n  this.createUnauthenticatedRequest = function (requestOptions) {\n    return new UnauthenticatedRequest(requestOptions);\n  };\n}\n\n/**\n * Enters this state.\n * @abstract\n */\nStateAbstract.prototype.enter = function () {\n};\n\n/**\n * Exits this state.\n * @abstract\n */\nStateAbstract.prototype.exit = function () {\n};\n\n/**\n * Establishes a connection to Snowflake.\n *\n * @abstract\n */\nStateAbstract.prototype.connect = function () {\n};\n\n/**\n * Issues a connect-continue request to Snowflake.\n *\n * @abstract\n */\nStateAbstract.prototype.continue = function () {\n};\n\n/**\n * Issues a generic request to Snowflake.\n *\n * @abstract\n */\nStateAbstract.prototype.request = function () {\n};\n\n/**\n * Terminates the current connection to Snowflake.\n *\n * @abstract\n */\nStateAbstract.prototype.destroy = function () {\n};\n\n///////////////////////////////////////////////////////////////////////////\n////                StatePristine                                      ////\n///////////////////////////////////////////////////////////////////////////\n\nfunction StatePristine() {\n  StateAbstract.apply(this, arguments);\n}\n\nUtil.inherits(StatePristine, StateAbstract);\n\n/**\n * @inheritDoc\n */\nStatePristine.prototype.connect = function (options) {\n  // transition to the Connecting state with the callback in the transition\n  // context\n  this.snowflakeService.transitionToConnecting(\n    {\n      options: options\n    });\n};\n\n/**\n * @inheritDoc\n */\nStatePristine.prototype.request = function (options) {\n  const callback = options.callback;\n  process.nextTick(function () {\n    callback(Errors.createClientError(\n      ErrorCodes.ERR_CONN_REQUEST_STATUS_PRISTINE));\n  });\n};\n\n/**\n * @inheritDoc\n */\nStatePristine.prototype.destroy = function (options) {\n  // we're still in the preconnected state so any\n  // attempts to destroy should result in an error\n  const callback = options.callback;\n  process.nextTick(function () {\n    callback(Errors.createClientError(\n      ErrorCodes.ERR_CONN_DESTROY_STATUS_PRISTINE));\n  });\n};\n\n///////////////////////////////////////////////////////////////////////////\n////                StateConnecting                                    ////\n///////////////////////////////////////////////////////////////////////////\n\nfunction StateConnecting() {\n  StateAbstract.apply(this, arguments);\n}\n\nUtil.inherits(StateConnecting, StateAbstract);\n\n/**\n * @inheritDoc\n */\nStateConnecting.prototype.enter = function (context) {\n  // save the context\n  this.context = context;\n\n  // initiate the connection process\n  this.continue();\n};\n\n/**\n * @inheritDoc\n */\nStateConnecting.prototype.exit = function () {\n  // clear the context\n  this.context = null;\n};\n\n/**\n * @inheritDoc\n */\nStateConnecting.prototype.connect = function (options) {\n  // we're already connecting so any attempts\n  // to connect should result in an error\n  const callback = options.callback;\n  process.nextTick(function () {\n    callback(Errors.createClientError(\n      ErrorCodes.ERR_CONN_CONNECT_STATUS_CONNECTING));\n  });\n};\n\n/**\n * @inheritDoc\n */\nStateConnecting.prototype.continue = function () {\n  const context = this.context;\n  const err = context.options.err;\n  let json = context.options.json;\n  \n  // if no json was specified, treat this as the first connect\n  // and get the necessary information from connectionConfig\n  if (!json) {\n    json =\n      {\n        data:\n          {\n            ACCOUNT_NAME: this.connectionConfig.account,\n            LOGIN_NAME: this.connectionConfig.username,\n            PASSWORD: this.connectionConfig.password\n          }\n      };\n  }\n\n  // extract the inflight context from the error and put it back in the json\n  if (err && err.data && err.data.inFlightCtx) {\n    json.inFlightCtx = err.data.inFlightCtx;\n  }\n\n  // initialize the json data if necessary\n  json.data = json.data || {};\n\n  // add the client-app-id, client-app-version, and client-app-name\n  const clientInfo =\n    {\n      CLIENT_APP_ID: this.connectionConfig.getClientType(),\n      CLIENT_APP_VERSION: this.connectionConfig.getClientVersion(),\n    };\n\n  // if we have some information about the client environment, add it as well\n  const clientEnvironment = this.connectionConfig.getClientEnvironment();\n  if (Util.isObject(clientEnvironment)) {\n    clientInfo.CLIENT_ENVIRONMENT = clientEnvironment;\n  }\n\n  const clientApplication = this.connectionConfig.getClientApplication();\n  if (Util.isString(clientApplication)) {\n    clientEnvironment['APPLICATION'] = clientApplication;\n  }\n\n  const sessionParameters =\n    {\n      SESSION_PARAMETERS: {}\n    };\n\n  if (Util.exists(this.connectionConfig.getClientSessionKeepAlive())) {\n    sessionParameters.SESSION_PARAMETERS.CLIENT_SESSION_KEEP_ALIVE =\n      this.connectionConfig.getClientSessionKeepAlive();\n  }\n\n  if (Util.exists(this.connectionConfig.getClientSessionKeepAliveHeartbeatFrequency())) {\n    sessionParameters.SESSION_PARAMETERS.CLIENT_SESSION_KEEP_ALIVE_HEARTBEAT_FREQUENCY =\n      this.connectionConfig.getClientSessionKeepAliveHeartbeatFrequency();\n  }\n\n  if (Util.exists(this.connectionConfig.getJsTreatIntegerAsBigInt())) {\n    sessionParameters.SESSION_PARAMETERS.JS_TREAT_INTEGER_AS_BIGINT =\n      this.connectionConfig.getJsTreatIntegerAsBigInt();\n  }\n\n  if (Util.exists(this.connectionConfig.getGcsUseDownscopedCredential())) {\n    sessionParameters.SESSION_PARAMETERS.GCS_USE_DOWNSCOPED_CREDENTIAL =\n      this.connectionConfig.getGcsUseDownscopedCredential();\n  }\n\n  if (Util.exists(this.connectionConfig.getClientRequestMFAToken())) {\n    sessionParameters.SESSION_PARAMETERS.CLIENT_REQUEST_MFA_TOKEN =\n      this.connectionConfig.getClientRequestMFAToken();\n  }\n\n  if (Util.exists(this.connectionConfig.getClientStoreTemporaryCredential())) {\n    sessionParameters.SESSION_PARAMETERS.CLIENT_STORE_TEMPORARY_CREDENTIAL =\n      this.connectionConfig.getClientStoreTemporaryCredential();\n  }\n\n  Util.apply(json.data, clientInfo);\n  Util.apply(json.data, sessionParameters);\n\n  const connectionConfig = this.connectionConfig;\n  const maxLoginRetries = connectionConfig.getRetrySfMaxLoginRetries();\n  const maxRetryTimeout = connectionConfig.getRetryTimeout();\n  const startTime = connectionConfig.accessUrl.startsWith('https://') ?\n    Date.now() : 'FIXEDTIMESTAMP';\n  let numRetries = 0;\n  let sleep = connectionConfig.getRetrySfStartingSleepTime();\n  let totalElapsedTime = 0;\n  Logger.getInstance().debug('Total retryTimeout is for the retries = ' + maxRetryTimeout === 0 ? \n    0 : maxRetryTimeout);\n  const parent = this;\n  const requestCallback = async function (err, body) {\n    // clear credential-related information\n    connectionConfig.clearCredentials();\n\n    // if the request succeeded\n    if (!err) {\n      Errors.assertInternal(Util.exists(body));\n      Errors.assertInternal(Util.exists(body.data));\n\n      parent.snowflakeService.setSessionId(body.data.sessionId);\n      Logger.getInstance().debug(`New session with id ${parent.snowflakeService.getSessionId()} initialized`);\n      \n      // update the parameters\n      Parameters.update(body.data.parameters);\n\n      // update all token-related information\n      parent.tokenInfo.update(body.data);\n\n      if (connectionConfig.getClientRequestMFAToken() && body.data.mfaToken) {\n        const key = Util.buildCredentialCacheKey(connectionConfig.host,\n          connectionConfig.username, AuthenticationTypes.USER_PWD_MFA_AUTHENTICATOR);\n        await GlobalConfig.getCredentialManager().write(key, body.data.mfaToken);\n      }\n\n      if (connectionConfig.getClientStoreTemporaryCredential() && body.data.idToken) {\n        const key = Util.buildCredentialCacheKey(connectionConfig.host,\n          connectionConfig.username, AuthenticationTypes.ID_TOKEN_AUTHENTICATOR);\n        await GlobalConfig.getCredentialManager().write(key, body.data.idToken);\n      }\n\n      // we're now connected\n      parent.snowflakeService.transitionToConnected();\n\n      const qccSize = Parameters.getValue('QUERY_CONTEXT_CACHE_SIZE');\n      parent.snowflakeService.initializeQueryContextCache(qccSize);\n    } else {\n      if (Errors.isNetworkError(err) || Errors.isRequestFailedError(err)) {\n        if (numRetries < maxLoginRetries && (\n          isRetryableNetworkError(err) || isRetryableHttpError(err)) &&\n          (maxRetryTimeout === 0 || totalElapsedTime < maxRetryTimeout)) {\n          numRetries++;\n          const jitter = Util.getJitteredSleepTime(numRetries, sleep, totalElapsedTime, maxRetryTimeout);\n          sleep = jitter.sleep;\n          totalElapsedTime = jitter.totalElapsedTime;\n\n          if (sleep <= 0) {\n            Logger.getInstance().debug('Reached out to the max Login Timeout');\n            parent.snowflakeService.transitionToDisconnected();\n          }\n\n          const auth = parent.snowflakeService.getAuthenticator();\n          if (auth instanceof AuthOkta) {\n            Logger.getInstance().debug('OKTA authentication requires token refresh.');\n            const retryOption = {\n              totalElapsedTime, \n              numRetries,\n            };\n\n            await auth.reauthenticate(context.options.json, retryOption);\n            numRetries = retryOption.numRetries;\n            totalElapsedTime = retryOption.totalElapsedTime;\n            setTimeout(sendRequest, sleep * 1000);\n            return;\n          } else {\n            if (auth instanceof AuthKeypair) {\n              Logger.getInstance().debug('AuthKeyPair authentication requires token refresh.');\n              await auth.reauthenticate(context.options.json);\n            }\n            setTimeout(sendRequest, sleep * 1000);\n            return;\n          }\n        } else {\n          Logger.getInstance().debug('Failed to all retries to SF.');\n          // we're now disconnected\n          parent.snowflakeService.transitionToDisconnected();\n        }\n      } else {\n        // we're now disconnected\n        parent.snowflakeService.transitionToDisconnected();\n      }\n    }\n\n    // invoke the transition-context callback that was passed to us by the\n    // Pristine state on connect()\n    if (Util.isFunction(context.options.callback)) {\n      context.options.callback(err);\n    }\n\n    // all queued operations are now free to go\n    parent.snowflakeService.drainOperationQueue();\n  };\n\n  // issue a login request\n  const sendRequest = function () {\n    const targetUrl = buildLoginUrl(connectionConfig);\n    Logger.getInstance().debug(\n      'Contacting SF: %s, (%s/%s)', targetUrl, numRetries, maxLoginRetries);\n    const request = parent.createUnauthenticatedRequest({\n      method: 'POST',\n      url: targetUrl,\n      json: json,\n      scope: this,\n      startTime: startTime,\n      retry: numRetries,\n      callback: requestCallback\n    });\n    request.send();\n  };\n  sendRequest();\n};\n\n/**\n * Builds the url for a login request.\n *\n * @param connectionConfig\n *\n * @returns {*}\n */\nfunction buildLoginUrl(connectionConfig) {\n  const queryParams =\n    [\n      { name: 'warehouse', value: connectionConfig.getWarehouse() },\n      { name: 'databaseName', value: connectionConfig.getDatabase() },\n      { name: 'schemaName', value: connectionConfig.getSchema() },\n      { name: 'roleName', value: connectionConfig.getRole() }\n    ];\n\n  const queryStringObject = {};\n  if (!connectionConfig.isQaMode()) {\n    // No requestId is attached to login-request in test mode.\n    queryStringObject.requestId = uuidv4();\n  }\n  for (let index = 0, length = queryParams.length; index < length; index++) {\n    const queryParam = queryParams[index];\n    if (Util.string.isNotNullOrEmpty(queryParam.value)) {\n      queryStringObject[queryParam.name] = queryParam.value;\n    }\n  }\n\n  return Url.format(\n    {\n      pathname: '/session/v1/login-request',\n      search: QueryString.stringify(queryStringObject)\n    });\n}\n\n/**\n * @inheritDoc\n */\nStateConnecting.prototype.request = function (options) {\n  // enqueue the request operation\n  this.snowflakeService.enqueueRequest(options);\n};\n\n/**\n * @inheritDoc\n */\nStateConnecting.prototype.destroy = function (options) {\n  // enqueue the destroy operation\n  this.snowflakeService.enqueueDestroy(options);\n};\n\n///////////////////////////////////////////////////////////////////////////\n////                StateConnected                                     ////\n///////////////////////////////////////////////////////////////////////////\n\nfunction StateConnected() {\n  StateAbstract.apply(this, arguments);\n}\n\nUtil.inherits(StateConnected, StateAbstract);\n\n/**\n * @inheritDoc\n */\nStateConnected.prototype.connect = function (options) {\n  // we're already connected so any attempts\n  // to connect should result in an error\n  const callback = options.callback;\n  process.nextTick(function () {\n    callback(Errors.createClientError(\n      ErrorCodes.ERR_CONN_CONNECT_STATUS_CONNECTED));\n  });\n};\n\nStateConnected.prototype.requestAsync = async function (options) {\n  // create a session token request from the options and send out the request\n  return await this.createSessionTokenRequest(options).sendAsync();\n};\n\n/**\n * @inheritDoc\n */\nStateConnected.prototype.request = function (options) {\n  const scopeOrig = options.scope;\n  const callbackOrig = options.callback;\n\n  // define our own scope and callback\n  options.scope = this;\n  options.callback = async function (err, body) {\n    // if there was no error, invoke the callback if one was specified\n    if (!err) {\n      if (Util.isFunction(callbackOrig)) {\n        await callbackOrig.apply(scopeOrig, [err, body]);\n      }\n    } else {\n      // restore the original scope and callback to the options object because\n      // we might need to repeat the request\n      options.scope = scopeOrig;\n      options.callback = callbackOrig;\n\n      // if the session token has expired\n      if (err.code === GSErrors.code.SESSION_TOKEN_EXPIRED) {\n        // enqueue the request operation\n        this.snowflakeService.enqueueRequest(options);\n\n        // if a session token renewal isn't already in progress, issue a\n        // request to renew the session token\n        this.snowflakeService.transitionToRenewing();\n      } else if ((err.code === GSErrors.code.SESSION_TOKEN_INVALID) ||\n        (err.code === GSErrors.code.GONE_SESSION)) {\n        // if the session token is invalid or it doesn't exist\n        // enqueue the request operation\n        this.snowflakeService.enqueueRequest(options);\n\n        // we're disconnected\n        this.snowflakeService.transitionToDisconnected();\n\n        // all queued operations are now free to go\n        this.snowflakeService.drainOperationQueue();\n\n        // TODO: remember that a session renewal is no longer in progress\n        // TODO: make sure the last session renewal did not time out\n      } else {\n        // it's a normal failure\n        // if a callback was specified, invoke it\n        if (Util.isFunction(callbackOrig)) {\n          callbackOrig.apply(scopeOrig, [err, body]);\n        }\n      }\n    }\n  };\n\n  // create a session token request from the options and send out the request\n  this.createSessionTokenRequest(options).send();\n};\n\n/**\n * @inheritDoc\n */\nStateConnected.prototype.destroy = function (options) {\n  const requestID = uuidv4();\n\n  // send out a session token request to terminate the current connection\n  this.createSessionTokenRequest(\n    {\n      method: 'POST',\n      url: `/session?delete=true&requestId=${requestID}`,\n      scope: this,\n      callback: function (err) {\n        // if the destroy request succeeded or the session already expired, we're disconnected\n        if (!err || err.code === GSErrors.code.GONE_SESSION || err.code === GSErrors.code.SESSION_TOKEN_EXPIRED) {\n          err = undefined;\n          this.snowflakeService.transitionToDisconnected();\n        }\n\n        // invoke the original callback\n        options.callback(err);\n      }\n    }).send();\n};\n\n///////////////////////////////////////////////////////////////////////////\n////                StateRenewing                                      ////\n///////////////////////////////////////////////////////////////////////////\n\nfunction StateRenewing() {\n  StateAbstract.apply(this, arguments);\n}\n\nUtil.inherits(StateRenewing, StateAbstract);\n\n/**\n * @inheritDoc\n */\nStateRenewing.prototype.enter = function () {\n  // send out a master token request to renew the current session token\n  this.createMasterTokenRequest(\n    {\n      method: 'POST',\n      url: '/session/token-request',\n      headers: {\n        CLIENT_APP_ID: this.connectionConfig.getClientType(),\n        CLIENT_APP_VERSION: this.connectionConfig.getClientVersion(),\n      },\n      json: {\n        'REQUEST_TYPE': 'RENEW',\n        'oldSessionToken': this.tokenInfo.getSessionToken(),\n      },\n      scope: this,\n      callback: function (err, body) {\n        // if the request succeeded\n        if (!err) {\n          // update the token information\n          this.tokenInfo.update(body.data);\n\n          // we're now connected again\n          this.snowflakeService.transitionToConnected();\n        } else {\n          // if the master token has expired, transition to the disconnected\n          // state\n          if (err.code === GSErrors.code.MASTER_TOKEN_EXPIRED) {\n            this.snowflakeService.transitionToDisconnected();\n          } else if (Errors.isNetworkError(err)) {\n            // go back to the connected state\n            this.snowflakeService.transitionToConnected();\n          } else {\n            // if the renewal failed for some other reason, we're\n            // disconnected\n            // TODO: what should our state be here? also disconnected?\n            this.snowflakeService.transitionToDisconnected();\n          }\n        }\n\n        // all queued operations are now free to go\n        this.snowflakeService.drainOperationQueue();\n      }\n    }).send();\n};\n\n/**\n * @inheritDoc\n */\nStateRenewing.prototype.connect = function (options) {\n  // we're renewing the session token, which means we're connected,\n  // so any attempts to connect should result in an error\n  const callback = options.callback;\n  process.nextTick(function () {\n    callback(Errors.createClientError(\n      ErrorCodes.ERR_CONN_CONNECT_STATUS_CONNECTED));\n  });\n};\n\n/**\n * @inheritDoc\n */\nStateRenewing.prototype.request = function (options) {\n  // enqueue the request operation\n  this.snowflakeService.enqueueRequest(options);\n};\n\n/**\n * @inheritDoc\n */\nStateRenewing.prototype.destroy = function (options) {\n  // enqueue the destroy operation\n  this.snowflakeService.enqueueDestroy(options);\n};\n\n///////////////////////////////////////////////////////////////////////////\n////                StateDisconnected                                  ////\n///////////////////////////////////////////////////////////////////////////\n\nfunction StateDisconnected() {\n  StateAbstract.apply(this, arguments);\n}\n\nUtil.inherits(StateDisconnected, StateAbstract);\n\n/**\n * @inheritDoc\n */\nStateDisconnected.prototype.connect = function (options) {\n  // we're disconnected -- and fatally so -- so any\n  // attempts to connect should result in an error\n  const callback = options.callback;\n  process.nextTick(function () {\n    callback(Errors.createClientError(\n      ErrorCodes.ERR_CONN_CONNECT_STATUS_DISCONNECTED));\n  });\n};\n\n/**\n * @inheritDoc\n */\nStateDisconnected.prototype.request = function (options) {\n  // we're disconnected, so any attempts to\n  // send a request should result in an error\n  const callback = options.callback;\n  process.nextTick(function () {\n    callback(Errors.createClientError(\n      ErrorCodes.ERR_CONN_REQUEST_STATUS_DISCONNECTED, true));\n  });\n};\n\n/**\n * @inheritDoc\n */\nStateDisconnected.prototype.destroy = function (options) {\n  // we're already disconnected so any attempts\n  // to destroy should result in an error\n  const callback = options.callback;\n  process.nextTick(function () {\n    callback(Errors.createClientError(\n      ErrorCodes.ERR_CONN_DESTROY_STATUS_DISCONNECTED));\n  });\n};\n\n/**\n * Creates a TokenInfo object that encapsulates all token-related information,\n * e.g. the master token, the session token, the tokens' expiration times, etc.\n *\n * @param {Object} [config]\n *\n * @constructor\n */\nfunction TokenInfo(config) {\n  let masterToken;\n  let sessionToken;\n  let masterTokenExpirationTime;\n  let sessionTokenExpirationTime;\n\n  if (Util.isObject(config)) {\n    masterToken = config.masterToken;\n    sessionToken = config.sessionToken;\n    masterTokenExpirationTime = config.masterTokenExpirationTime;\n    sessionTokenExpirationTime = config.sessionTokenExpirationTime;\n  }\n\n  /**\n   * Returns true if no token-related information is available, false otherwise.\n   *\n   * @returns {Boolean}\n   */\n  this.isEmpty = function () {\n    return !Util.exists(masterToken) ||\n      !Util.exists(masterTokenExpirationTime) ||\n      !Util.exists(sessionToken) ||\n      !Util.exists(sessionTokenExpirationTime);\n  };\n\n  /**\n   * Clears all token-related information.\n   */\n  this.clearTokens = function () {\n    masterToken = undefined;\n    masterTokenExpirationTime = undefined;\n    sessionToken = undefined;\n    sessionTokenExpirationTime = undefined;\n  };\n\n  /**\n   * Updates the tokens and their expiration times.\n   *\n   * @param {Object} data\n   */\n  this.update = function (data) {\n    masterToken = data.masterToken;\n    sessionToken = data.token || data.sessionToken;\n\n    const currentTime = new Date().getTime();\n\n    masterTokenExpirationTime = currentTime +\n      1000 * (data.masterValidityInSeconds ||\n        data.validityInSecondsMT);\n\n    sessionTokenExpirationTime = currentTime +\n      1000 * (data.validityInSeconds ||\n        data.validityInSecondsST);\n  };\n\n  /**\n   * Returns the master token.\n   *\n   * @returns {String}\n   */\n  this.getMasterToken = function () {\n    return masterToken;\n  };\n\n  /**\n   * Returns the expiration time of the master token.\n   *\n   * @returns {Number}\n   */\n  this.getMasterTokenExpirationTime = function () {\n    return masterTokenExpirationTime;\n  };\n\n  /**\n   * Returns the session token.\n   *\n   * @returns {String}\n   */\n  this.getSessionToken = function () {\n    return sessionToken;\n  };\n\n  /**\n   * Returns the expiration time of the session token.\n   *\n   * @returns {Number}\n   */\n  this.getSessionTokenExpirationTime = function () {\n    return sessionTokenExpirationTime;\n  };\n\n  /**\n   * Returns a configuration object that can be passed to the TokenInfo\n   * constructor to get an equivalent TokenInfo object.\n   *\n   * @returns {Object}\n   */\n  this.getConfig = function () {\n    return {\n      masterToken: masterToken,\n      masterTokenExpirationTime: masterTokenExpirationTime,\n      sessionToken: sessionToken,\n      sessionTokenExpirationTime: sessionTokenExpirationTime\n    };\n  };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/lib/services/sf.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/lib/snowflake.js":
/*!*****************************************************!*\
  !*** ./node_modules/snowflake-sdk/lib/snowflake.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const core = __webpack_require__(/*! ./core */ \"(rsc)/./node_modules/snowflake-sdk/lib/core.js\");\nconst Util = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/snowflake-sdk/lib/util.js\");\nconst Errors = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/snowflake-sdk/lib/errors.js\");\nconst ErrorCodes = Errors.codes;\n\nconst clientEnvironment = process.versions;\n\n// if we're not using the minimum supported version of node.js, raise an error\nconst minimumNodeVersion = '6.0.0';\nif (Util.string.compareVersions(clientEnvironment.node, minimumNodeVersion) < 0) {\n  throw Errors.createClientError(\n    ErrorCodes.ERR_UNSUPPORTED_NODE_JS_VERSION, true, minimumNodeVersion);\n}\n\nmodule.exports = core(\n  {\n    httpClientClass: (__webpack_require__(/*! ./http/node */ \"(rsc)/./node_modules/snowflake-sdk/lib/http/node.js\").NodeHttpClient),\n    loggerClass: __webpack_require__(/*! ./logger/node */ \"(rsc)/./node_modules/snowflake-sdk/lib/logger/node.js\"),\n    client:\n      {\n        version: Util.driverVersion,\n        name: Util.driverName,\n        environment: clientEnvironment\n      }\n  });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9saWIvc25vd2ZsYWtlLmpzIiwibWFwcGluZ3MiOiJBQUFBLGFBQWEsbUJBQU8sQ0FBQyw4REFBUTtBQUM3QixhQUFhLG1CQUFPLENBQUMsOERBQVE7QUFDN0IsZUFBZSxtQkFBTyxDQUFDLGtFQUFVO0FBQ2pDOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EscUJBQXFCLDhHQUFxQztBQUMxRCxpQkFBaUIsbUJBQU8sQ0FBQyw0RUFBZTtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHIiwic291cmNlcyI6WyIvVXNlcnMvdmljdG9yd2lsc29uL0Rlc2t0b3AvcHJvamVjdHMvRVpWaXovbm9kZV9tb2R1bGVzL3Nub3dmbGFrZS1zZGsvbGliL3Nub3dmbGFrZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBjb3JlID0gcmVxdWlyZSgnLi9jb3JlJyk7XG5jb25zdCBVdGlsID0gcmVxdWlyZSgnLi91dGlsJyk7XG5jb25zdCBFcnJvcnMgPSByZXF1aXJlKCcuL2Vycm9ycycpO1xuY29uc3QgRXJyb3JDb2RlcyA9IEVycm9ycy5jb2RlcztcblxuY29uc3QgY2xpZW50RW52aXJvbm1lbnQgPSBwcm9jZXNzLnZlcnNpb25zO1xuXG4vLyBpZiB3ZSdyZSBub3QgdXNpbmcgdGhlIG1pbmltdW0gc3VwcG9ydGVkIHZlcnNpb24gb2Ygbm9kZS5qcywgcmFpc2UgYW4gZXJyb3JcbmNvbnN0IG1pbmltdW1Ob2RlVmVyc2lvbiA9ICc2LjAuMCc7XG5pZiAoVXRpbC5zdHJpbmcuY29tcGFyZVZlcnNpb25zKGNsaWVudEVudmlyb25tZW50Lm5vZGUsIG1pbmltdW1Ob2RlVmVyc2lvbikgPCAwKSB7XG4gIHRocm93IEVycm9ycy5jcmVhdGVDbGllbnRFcnJvcihcbiAgICBFcnJvckNvZGVzLkVSUl9VTlNVUFBPUlRFRF9OT0RFX0pTX1ZFUlNJT04sIHRydWUsIG1pbmltdW1Ob2RlVmVyc2lvbik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29yZShcbiAge1xuICAgIGh0dHBDbGllbnRDbGFzczogcmVxdWlyZSgnLi9odHRwL25vZGUnKS5Ob2RlSHR0cENsaWVudCxcbiAgICBsb2dnZXJDbGFzczogcmVxdWlyZSgnLi9sb2dnZXIvbm9kZScpLFxuICAgIGNsaWVudDpcbiAgICAgIHtcbiAgICAgICAgdmVyc2lvbjogVXRpbC5kcml2ZXJWZXJzaW9uLFxuICAgICAgICBuYW1lOiBVdGlsLmRyaXZlck5hbWUsXG4gICAgICAgIGVudmlyb25tZW50OiBjbGllbnRFbnZpcm9ubWVudFxuICAgICAgfVxuICB9KTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/lib/snowflake.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/lib/url_util.js":
/*!****************************************************!*\
  !*** ./node_modules/snowflake-sdk/lib/url_util.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const Logger = __webpack_require__(/*! ./logger */ \"(rsc)/./node_modules/snowflake-sdk/lib/logger.js\");\n\n/**\n * Determines if a given URL is valid.\n *\n * @param url\n *\n * @returns {Boolean}\n */\nexports.isValidURL = function (url) {\n  const regex = '^http(s?)\\\\:\\\\/\\\\/[0-9a-zA-Z]([-.\\\\w]*[0-9a-zA-Z@:])*(:(0-9)*)*(\\\\/?)([a-zA-Z0-9\\\\-\\\\.\\\\?\\\\,\\\\&\\\\(\\\\)\\\\/\\\\\\\\\\\\+&%\\\\$#_=@]*)?$';\n  if (!url.match(regex)) {\n    Logger.getInstance().debug('The provided URL is not a valid URL. URL: %s', url);\n    return false;\n  }\n  return true;\n};\n\n/**\n * Encodes the given URL. \n * \n * @param {String} url \n * \n * @returns {String} the encoded URL\n */\nexports.urlEncode = function (url) { \n  /** The encodeURIComponent() method encodes special characters including: , / ? : @ & = + $ #\n     but escapes space as %20B. Replace with + for consistency across drivers. */\n  return encodeURIComponent(url).replace(/%20/g, '+');\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9saWIvdXJsX3V0aWwuanMiLCJtYXBwaW5ncyI6IkFBQUEsZUFBZSxtQkFBTyxDQUFDLGtFQUFVOztBQUVqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBLGFBQWEsUUFBUTtBQUNyQjtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcndpbHNvbi9EZXNrdG9wL3Byb2plY3RzL0VaVml6L25vZGVfbW9kdWxlcy9zbm93Zmxha2Utc2RrL2xpYi91cmxfdXRpbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBMb2dnZXIgPSByZXF1aXJlKCcuL2xvZ2dlcicpO1xuXG4vKipcbiAqIERldGVybWluZXMgaWYgYSBnaXZlbiBVUkwgaXMgdmFsaWQuXG4gKlxuICogQHBhcmFtIHVybFxuICpcbiAqIEByZXR1cm5zIHtCb29sZWFufVxuICovXG5leHBvcnRzLmlzVmFsaWRVUkwgPSBmdW5jdGlvbiAodXJsKSB7XG4gIGNvbnN0IHJlZ2V4ID0gJ15odHRwKHM/KVxcXFw6XFxcXC9cXFxcL1swLTlhLXpBLVpdKFstLlxcXFx3XSpbMC05YS16QS1aQDpdKSooOigwLTkpKikqKFxcXFwvPykoW2EtekEtWjAtOVxcXFwtXFxcXC5cXFxcP1xcXFwsXFxcXCZcXFxcKFxcXFwpXFxcXC9cXFxcXFxcXFxcXFwrJiVcXFxcJCNfPUBdKik/JCc7XG4gIGlmICghdXJsLm1hdGNoKHJlZ2V4KSkge1xuICAgIExvZ2dlci5nZXRJbnN0YW5jZSgpLmRlYnVnKCdUaGUgcHJvdmlkZWQgVVJMIGlzIG5vdCBhIHZhbGlkIFVSTC4gVVJMOiAlcycsIHVybCk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cnVlO1xufTtcblxuLyoqXG4gKiBFbmNvZGVzIHRoZSBnaXZlbiBVUkwuIFxuICogXG4gKiBAcGFyYW0ge1N0cmluZ30gdXJsIFxuICogXG4gKiBAcmV0dXJucyB7U3RyaW5nfSB0aGUgZW5jb2RlZCBVUkxcbiAqL1xuZXhwb3J0cy51cmxFbmNvZGUgPSBmdW5jdGlvbiAodXJsKSB7IFxuICAvKiogVGhlIGVuY29kZVVSSUNvbXBvbmVudCgpIG1ldGhvZCBlbmNvZGVzIHNwZWNpYWwgY2hhcmFjdGVycyBpbmNsdWRpbmc6ICwgLyA/IDogQCAmID0gKyAkICNcbiAgICAgYnV0IGVzY2FwZXMgc3BhY2UgYXMgJTIwQi4gUmVwbGFjZSB3aXRoICsgZm9yIGNvbnNpc3RlbmN5IGFjcm9zcyBkcml2ZXJzLiAqL1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHVybCkucmVwbGFjZSgvJTIwL2csICcrJyk7XG59OyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/lib/url_util.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/lib/util.js":
/*!************************************************!*\
  !*** ./node_modules/snowflake-sdk/lib/util.js ***!
  \************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("const util = __webpack_require__(/*! util */ \"util\");\nconst Url = __webpack_require__(/*! url */ \"url\");\nconst os = __webpack_require__(/*! os */ \"os\");\nconst Logger = __webpack_require__(/*! ./logger */ \"(rsc)/./node_modules/snowflake-sdk/lib/logger.js\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst Errors = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/snowflake-sdk/lib/errors.js\");\n\n/**\n * Note: A simple wrapper around util.inherits() for now, but this might change\n * in the future.\n *\n * Inherits the prototype methods from one constructor into another. The\n * prototype of constructor will be set to a new object created from\n * superConstructor.\n *\n * @param constructor\n * @param superConstructor\n *\n * @returns {Object}\n */\nexports.inherits = function (constructor, superConstructor) {\n  return util.inherits.apply(util, [constructor, superConstructor]);\n};\n\n/**\n * Note: A simple wrapper around util.format() for now, but this will likely\n * change in the future.\n *\n * Returns a formatted string using the first argument as a printf-like format.\n *\n * The first argument is a string that contains zero or more placeholders.\n * Each placeholder is replaced with the converted value from its corresponding\n * argument. Supported placeholders are:\n *   %s - String.\n *   %d - Number (both integer and float).\n *   %j - JSON. Replaced with the string '[Circular]' if the argument contains\n *        circular references.\n *   %% - single percent sign ('%'). This does not consume an argument.\n *\n * If the placeholder does not have a corresponding argument, the placeholder is\n * not replaced.\n *\n * If there are more arguments than placeholders, the extra arguments are\n * coerced to strings (for objects and symbols, util.inspect() is used) and then\n * concatenated, delimited by a space.\n *\n * If the first argument is not a format string then util.format() returns a\n * string that is the concatenation of all its arguments separated by spaces.\n * Each argument is converted to a string with util.inspect().\n *\n * @returns {String}\n */\nexports.format = function (format, ...params) {\n  return util.format.apply(util, [format, ...params]);\n};\n\n/**\n * Determines if a given value is a function.\n *\n * @param value\n *\n * @returns {Boolean}\n */\nexports.isFunction = function (value) {\n  return !!value && typeof value === 'function';\n};\n\nconst toString = Object.prototype.toString;\n\n/**\n * Determines if a given value is an object.\n *\n * @param value\n *\n * @returns {Boolean}\n */\nexports.isObject = function (value) {\n  return toString.call(value) === '[object Object]';\n};\n\n/**\n * Determines if a given value is a Date.\n *\n * @param value\n *\n * @returns {Boolean}\n */\nexports.isDate = function (value) {\n  return toString.call(value) === '[object Date]';\n};\n\n/**\n * Determines if a given value is an array.\n *\n * @param value\n *\n * @returns {Boolean}\n */\nexports.isArray = function (value) {\n  return toString.call(value) === '[object Array]';\n};\n\n/**\n * Determines if a given value is a string.\n *\n * @param value\n *\n * @returns {Boolean}\n */\nexports.isString = function (value) {\n  return typeof value === 'string';\n};\n\n/**\n * Determines if a given value is a boolean.\n *\n * @param value\n *\n * @returns {Boolean}\n */\nexports.isBoolean = function (value) {\n  return typeof value === 'boolean';\n};\n\n/**\n * Determines if a given value is a number.\n *\n * @param value\n *\n * @returns {Boolean}\n */\nexports.isNumber = function (value) {\n  return typeof value === 'number' && isFinite(value);\n};\n\n/**\n * Determines if a given value is a private key string in pem format of type pkcs8.\n *\n * @param value\n *\n * @returns {Boolean}\n */\nexports.isPrivateKey = function (value) {\n  const trimmedValue = value.trim();\n  // The private key is expected to be decrypted when set in the connection string\n  // secret scanner complains about first check since it looks like private key, but it's only check\n  // pragma: allowlist nextline secret\n  return (trimmedValue.startsWith('-----BEGIN PRIVATE KEY-----') &&\n    trimmedValue.endsWith('\\n-----END PRIVATE KEY-----'));\n};\n\n/**\n * A collection of number-related utility functions.\n */\nexports.number =\n  {\n    /**\n     * Determines if a given value is a positive number.\n     *\n     * @param value\n     *\n     * @returns {Boolean}\n     */\n    isPositive: function (value) {\n      return exports.isNumber(value) && (value > 0);\n    },\n\n    /**\n     * Determines if a given value is a non-negative number.\n     *\n     * @param value\n     *\n     * @returns {Boolean}\n     */\n    isNonNegative: function (value) {\n      return exports.isNumber(value) && (value >= 0);\n    },\n\n    /**\n     * Determines if a given value is an integer.\n     *\n     * @param value\n     *\n     * @returns {Boolean}\n     */\n    isInteger: function (value) {\n      return exports.isNumber(value) && (Math.floor(value) === value);\n    },\n\n    /**\n     * Determines if a given value is a positive integer.\n     *\n     * @param value\n     *\n     * @returns {Boolean}\n     */\n    isPositiveInteger: function (value) {\n      return this.isInteger(value) && (value > 0);\n    },\n\n    /**\n     * Determines if a given value is a non-negative integer.\n     *\n     * @param value\n     *\n     * @returns {Boolean}\n     */\n    isNonNegativeInteger: function (value) {\n      return this.isInteger(value) && (value >= 0);\n    }\n  };\n\n/**\n * A collection of string-related utility functions.\n */\nexports.string =\n  {\n    /**\n     * Determines if a given string is not null or empty.\n     *\n     * @param {*} value\n     *\n     * @returns {Boolean}\n     */\n    isNotNullOrEmpty: function (value) {\n      return exports.isString(value) && value;\n    },\n\n    /**\n     * Compares two version numbers of the form 'a.b.c' where a, b and c are\n     * numbers (e.g. '1.0.12'). If one or both inputs are invalid versions, the\n     * function will return NaN, otherwise, it will return -1 if the first\n     * version is smaller, 1 if the first version is bigger, and 0 if the two\n     * versions are equal.\n     *\n     * @param {String} version1\n     * @param {String} version2\n     *\n     * @returns {Number}\n     */\n    compareVersions: function (version1, version2) {\n      // if one or both inputs are valid, return NaN\n      if (!exports.isString(version1) || !exports.isString(version2)) {\n        return NaN;\n      }\n\n      // split on dot\n      const version1Parts = version1.split('.');\n      const version2Parts = version2.split('.');\n\n      // add trailing zeros to make the parts arrays the same length\n      while (version1Parts.length < version2Parts.length) {\n        version1Parts.push('0');\n      }\n      while (version2Parts.length < version1Parts.length) {\n        version2Parts.push('0');\n      }\n\n      // compare elements in the two arrays one by one\n      let result = 0;\n      let version1Part, version2Part;\n      for (let index = 0, length = version1Parts.length; index < length; index++) {\n        // convert to number before doing any arithmetic\n        version1Part = Number(version1Parts[index]);\n        version2Part = Number(version2Parts[index]);\n\n        // if one or both values are not numerical, consider the input invalid\n        if (!exports.isNumber(version1Part) || !exports.isNumber(version2Part)) {\n          result = NaN;\n          break;\n        }\n\n        // if the two values are different, pick the\n        // correct result based on which value is smaller\n        if (version1Part !== version2Part) {\n          result = version1Part < version2Part ? -1 : 1;\n          break;\n        }\n      }\n\n      return result;\n    }\n  };\n\n/**\n * Determines if a given value is not null or undefined.\n *\n * @param value\n *\n * @returns {Boolean}\n */\nexports.exists = function (value) {\n  return (value !== null) && (value !== undefined);\n};\n\n/**\n * A collection of url-related utility functions.\n */\nexports.url =\n  {\n    /**\n     * Appends a query parameter to a url. If an invalid url is specified, an\n     * exception is thrown.\n     *\n     * @param {String} url\n     * @param {String} paramName the name of the query parameter.\n     * @param {String} paramValue the value of the query parameter.\n     *\n     * @returns {String}\n     */\n    appendParam: function (url, paramName, paramValue) {\n      // if the specified url is valid\n      const urlAsObject = Url.parse(url);\n      if (urlAsObject) {\n        // if the url already has query parameters, use '&' as the separator\n        // when appending the additional query parameter, otherwise use '?'\n        url += (urlAsObject.search ? '&' : '?') + paramName + '=' + paramValue;\n      }\n\n      return url;\n    },\n\n    appendRetryParam: function (option) {\n      let retryUrl = this.appendParam(option.url, 'retryCount', option.retryCount);\n      if (option.includeRetryReason) {\n        retryUrl = this.appendParam(retryUrl, 'retryReason', option.retryReason);\n      }\n\n      return retryUrl;\n    }\n  };\n\n/**\n * Shallow-copies everything from a source object into a destination object.\n *\n * @param {Object} dst the object to copy properties to.\n * @param {Object} src the object to copy properties from.\n *\n * @returns {Object} the destination object.\n */\nexports.apply = function (dst, src) {\n  // if both dst and src are objects, copy everything from src to dst\n  if (this.isObject(dst) && this.isObject(src)) {\n    for (const key in src) {\n      if (Object.prototype.hasOwnProperty.call(src, key)) {\n        dst[key] = src[key];\n      }\n    }\n  }\n\n  return dst;\n};\n\n/**\n * Returns true if the code is currently being run in the browser, false\n * otherwise.\n *\n * @returns {Boolean}\n */\nexports.isBrowser = function () {\n  return !!(process && false);\n};\n\n/**\n * Returns true if the code is currently being run in node, false otherwise.\n *\n * @returns {Boolean}\n */\nexports.isNode = function () {\n  return !this.isBrowser();\n};\n\n/**\n * Returns the next sleep time calculated by exponential backoff with\n * decorrelated jitter.\n * sleep = min(cap, random_between(base, sleep * 3))\n * for more details, check out:\n * http://www.awsarchitectureblog.com/2015/03/backoff.html\n * @param base minimum seconds\n * @param cap maximum seconds\n * @param previousSleep previous sleep time\n * @returns {number} next sleep time\n */\nexports.nextSleepTime = function (\n  base, cap, previousSleep) {\n  return Math.min(cap, Math.abs(previousSleep * 3 - base) * Math.random() +\n    Math.min(base, previousSleep * 3));\n};\n\n\n/**\n * Return next sleep time calculated by the jitter rule.\n *\n * @param {Number} numofRetries\n * @param {Number} currentSleepTime\n * @param {Number} totalElapsedTime\n * @param {Number} maxRetryTimeout\n * @returns {JSON} return next sleep Time and totalTime.\n */\nexports.getJitteredSleepTime = function (numofRetries, currentSleepTime, totalElapsedTime, maxRetryTimeout) {\n  const nextsleep = getNextSleepTime(numofRetries, currentSleepTime);\n  const sleep = maxRetryTimeout !== 0 ? Math.min((maxRetryTimeout - totalElapsedTime), nextsleep) : nextsleep;\n  totalElapsedTime += sleep;\n  return { sleep, totalElapsedTime };\n};\n\n/**\n * Choose one of the number between two numbers.\n *\n * @param {Number} firstNumber\n * @param {Number} secondNumber\n * @returns {Number} return a random number between two numbers.\n */\nfunction chooseRandom(firstNumber, secondNumber) {\n  return Math.random() * (firstNumber - secondNumber) + secondNumber;\n}\n\nexports.chooseRandom = chooseRandom;\n\n/**\n * return the next sleep Time.\n * @param {Number} numofRetries\n * @param {Number} currentSleepTime\n * @returns {Number} return jitter.\n */\nfunction getNextSleepTime(numofRetries,  currentSleepTime) {\n  const nextSleep = (2 ** (numofRetries));\n  return chooseRandom(currentSleepTime + getJitter(currentSleepTime), nextSleep + getJitter(currentSleepTime));\n}\n\nexports.getNextSleepTime = getNextSleepTime;\n\n/**\n * return the jitter value.\n * @param {Number} currentSleepTime\n * @returns {Number} return jitter.\n */\nfunction getJitter(currentSleepTime) {\n  const multiplicationFactor = chooseRandom(1, -1);\n  return 0.5 * currentSleepTime * multiplicationFactor;\n}\n\nexports.getJitter = getJitter;\n\n/**\n * Check whether the request is the login-request or not.\n *\n * @param loginurl HTTP request url\n * @returns {Boolean} true if it is loginRequest, otherwise false.\n */\nexports.isLoginRequest = function (loginUrl) {\n  const endPoints = ['/v1/login-request', '/authenticator-request',];\n  return endPoints.some((endPoint) => loginUrl.includes(endPoint));\n};\n\n/**\n * Checks if the HTTP response code is retryable\n *\n * @param response HTTP response object\n * @param retry403 will retry HTTP 403?\n * @returns {*|boolean} true if retryable otherwise false\n */\nexports.isRetryableHttpError = function (response, retry403) {\n  return response &&\n    ((response.statusCode >= 500 && response.statusCode < 600) ||\n      (retry403 && response.statusCode === 403) ||\n      (response.statusCode === 408) ||\n      (response.statusCode === 429));\n};\n\nexports.validateClientSessionKeepAliveHeartbeatFrequency = function (input, masterValidity) {\n  let heartbeatFrequency = input;\n  const realMax = Math.floor(masterValidity / 4);\n  const realMin = Math.floor(realMax / 4);\n  if (input > realMax) {\n    heartbeatFrequency = realMax;\n  } else if (input < realMin) {\n    heartbeatFrequency = realMin;\n  }\n\n  heartbeatFrequency = Math.floor(heartbeatFrequency);\n  return heartbeatFrequency;\n};\n\n// driver name\nconst driverName = (__webpack_require__(/*! ./../package.json */ \"(rsc)/./node_modules/snowflake-sdk/package.json\").name);\nexports.driverName = driverName;\n\n// driver version\nconst driverVersion = (__webpack_require__(/*! ./../package.json */ \"(rsc)/./node_modules/snowflake-sdk/package.json\").version);\nexports.driverVersion = driverVersion;\n\n// nodeJS version\nlet nodeJSVersion = process.version;\nif (nodeJSVersion && nodeJSVersion.startsWith('v')) {\n  nodeJSVersion = nodeJSVersion.substring(1);\n}\n// user-agent HTTP header\nconst userAgent = 'JavaScript' + '/' + driverVersion\n  + ' (' + process.platform + '-' + process.arch + ') ' + 'NodeJS' + '/' + nodeJSVersion;\n\nexports.userAgent = userAgent;\n\n/**\n * Constructs host name using region and account\n *\n * @param region where the account is located\n * @param account which account to connect to\n * @returns {string} host name\n */\nexports.constructHostname = function (region, account) {\n  let host;\n  if (region === 'us-west-2') {\n    host = account + '.snowflakecomputing.com';\n  } else if (region != null) {\n    if (account.indexOf('.') > 0) {\n      account = account.substring(0, account.indexOf('.'));\n    }\n    if (region.startsWith('cn-') || region.startsWith('CN-')) {\n      host = account + '.' + region + '.snowflakecomputing.cn';\n    } else {\n      host = account + '.' + region + '.snowflakecomputing.com';\n    }\n\n  } else {\n    host = account + '.snowflakecomputing.com';\n  }\n  return host;\n};\n\n/**\n * Returns true if host indicates private link\n *\n * @returns {boolean}\n */\nexports.isPrivateLink = function (host) {\n  Errors.checkArgumentExists(this.exists(host), Errors.codes.ERR_CONN_CREATE_MISSING_HOST);\n  return host.toLowerCase().includes('privatelink.snowflakecomputing.');\n};\n/**\n * Returns true if host indicates private link\n *\n * @returns {boolean}\n */\nexports.createOcspResponseCacheServerUrl = function (host) {\n  return `http://ocsp.${host}/ocsp_response_cache.json`;\n};\n\n/**\n * Returns if command is a PUT command\n *\n * @param sqlText the query command\n * @returns {boolean}\n */\nexports.isPutCommand = function (sqlText) {\n  return (sqlText.trim().substring(0, 3).toUpperCase() === 'PUT');\n};\n\n/**\n * Returns if command is a GET command\n *\n * @param sqlText the query command\n * @returns {boolean}\n */\nexports.isGetCommand = function (sqlText) {\n  return (sqlText.trim().substring(0, 3).toUpperCase() === 'GET');\n};\n\n/**\n * Add double quotes to smkId's value to parse it as a string instead of integer\n * to preserve precision of numbers exceeding JavaScript's max safe integer\n * e.g (inputting 32621973126123526\toutputs 32621973126123530)\n *\n * @param body the data in JSON\n * @returns {string}\n */\nexports.convertSmkIdToString = function (body) {\n  return body.replace(/\"smkId\" : ([0-9]*)/g, '\"smkId\" : \"$1\"');\n};\n\n/**\n * Under some circumstances the object passed to JSON.stringify in exception handling\n * can contain circular reference, on which JSON.stringify bails out\n * MDN way of handling such error\n * @returns string\n */\nexports.getCircularReplacer = function () {\n  const ancestors = [];\n  return function (key, value) {\n    if (typeof value !== 'object' || value === null) {\n      return value;\n    }\n    // `this` is the object that value is contained in,\n    // i.e., its direct parent.\n    while (ancestors.length > 0 && ancestors[ancestors.length - 1] !== this) {\n      ancestors.pop();\n    }\n    if (ancestors.includes(value)) {\n      return '[Circular]';\n    }\n    ancestors.push(value);\n    return value;\n  };\n};\n\n/**\n * Returns if the provided string is a valid subdomain.\n * @param value\n * @returns {boolean}\n */\nexports.isCorrectSubdomain = function (value) {\n  const subdomainRegex = RegExp(/^\\w+([.-]\\w+)*$/i);\n  return subdomainRegex.test(value);\n};\n\nexports.buildCredentialCacheKey = function (host, username, credType) {\n  if (!host || !username || !credType) {\n    Logger.getInstance().debug('Cannot build the credential cache key because one of host, username, and credType is null');\n    return null;\n  }\n  return `{${host.toUpperCase()}}:{${username.toUpperCase()}}:{SF_NODE_JS_DRIVER}:{${credType.toUpperCase()}}`;\n};\n\n/**\n * \n * @param {Object} customCredentialManager \n * @returns \n */\nexports.checkValidCustomCredentialManager = function (customCredentialManager) {\n  if ( typeof customCredentialManager !== 'object') {\n    return false;\n  }\n\n  const requireMethods = ['write', 'read', 'remove'];\n\n  for (const method of requireMethods) {\n    if (!Object.hasOwnProperty.call(customCredentialManager, method) || typeof customCredentialManager[method] !== 'function') {\n      return false;\n    }\n  }\n  return true;\n};\n\nexports.checkParametersDefined = function (...parameters) {\n  return parameters.every((element) => element !== undefined && element !== null);\n};\n\nexports.buildCredentialCacheKey = function (host, username, credType) {\n  if (!host || !username || !credType) {\n    Logger.getInstance().debug('Cannot build the credential cache key because one of host, username, and credType is null');\n    return null;\n  }\n  return `{${host.toUpperCase()}}:{${username.toUpperCase()}}:{SF_NODE_JS_DRIVER}:{${credType.toUpperCase()}}`;\n};\n\n/**\n * \n * @param {Object} customCredentialManager \n * @returns \n */\nexports.checkValidCustomCredentialManager = function (customCredentialManager) {\n  if ( typeof customCredentialManager !== 'object') {\n    return false;\n  }\n  \n  const requireMethods = ['write', 'read', 'remove'];\n\n  for (const method of requireMethods) {\n    if (!Object.hasOwnProperty.call(customCredentialManager, method) || typeof customCredentialManager[method] !== 'function') {\n      return false;\n    }\n  }\n  return true;\n};\n\nexports.checkParametersDefined = function (...parameters) {\n  return parameters.every((element) => element !== undefined && element !== null);\n};\n\nexports.shouldPerformGCPBucket = function (accessToken) {\n  return !!accessToken && process.env.SNOWFLAKE_FORCE_GCP_USE_DOWNSCOPED_CREDENTIAL !== 'true';\n};\n\n/**\n * Checks if the provided file or directory permissions are correct.\n * @param filePath\n * @param expectedMode\n * @param fsPromises\n * @returns {Promise<boolean>} resolves always to true for Windows\n */\nexports.isFileModeCorrect = async function (filePath, expectedMode, fsPromises) {\n  if (os.platform() === 'win32') {\n    return true;\n  }\n  return await fsPromises.stat(filePath).then((stats) => {\n    // we have to limit the number of LSB bits to 9 with the mask, as the stats.mode starts with the file type,\n    // e.g. the directory with permissions 755 will have stats.mask of 40755.\n    const mask = (1 << 9) - 1;\n    return (stats.mode & mask) === expectedMode;\n  });\n};\n\n/**\n * Checks if the provided file or directory is writable only by the user.\n * @param configFilePath\n * @param fsPromises\n * @returns {Promise<boolean>} resolves always to true for Windows\n */\nexports.isFileNotWritableByGroupOrOthers = async function (configFilePath, fsPromises) {\n  if (os.platform() === 'win32') {\n    return true;\n  }\n  const stats = await fsPromises.stat(configFilePath);\n  return (stats.mode & (1 << 4)) === 0 && (stats.mode & (1 << 1)) === 0;\n};\n\nexports.shouldRetryOktaAuth = function ({ maxRetryTimeout, maxRetryCount, numRetries, startTime, remainingTimeout }) {\n  return  (maxRetryTimeout === 0 || Date.now() < startTime + remainingTimeout) && numRetries <= maxRetryCount;\n};\n\nexports.getDriverDirectory = function () {\n  return __dirname;\n};\n\nexports.validatePath = function (dir) {\n  try {\n    const stat = fs.statSync(dir);\n    return stat.isDirectory();\n  } catch {\n    Logger.getInstance().error('The path location is invalid. Please check this location is accessible or existing');\n    return false;\n  }\n};\n\nexports.getEnvVar = function (variable) {\n  return process.env[variable.toLowerCase()] || process.env[variable.toUpperCase()];\n};\n\nexports.validateEmptyString = function (value) {\n  return value !== '' ? value : undefined;\n};\n\nexports.isNotEmptyAsString = function (variable) {\n  if (typeof variable === 'string') {\n    return variable;\n  }\n  return exports.exists(variable);\n};\n/**\n * Checks Whether the object is empty (can be null or undefined) or not.\n * @param object\n * @returns {boolean} \n */\nexports.isEmptyObject = (object) => {\n  if (!this.exists(object)) {\n    return true;\n  }\n  if (typeof object !== 'object') {\n    return false;\n  }\n  return Object.keys(object).length === 0;\n};\n\nexports.isWindows = function () {\n  return os.platform() === 'win32';\n};\n\n/**\n* Left strip the specified character from a string.\n*\n* @param {String} str\n* @param {Character} remove\n*\n* @returns {String}\n*/\nexports.lstrip = function (str, remove) {\n  while (str.length > 0 && remove.indexOf(str.charAt(0)) !== -1) {\n    str = str.substr(1);\n  }\n  return str;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/lib/util.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/package.json":
/*!*************************************************!*\
  !*** ./node_modules/snowflake-sdk/package.json ***!
  \*************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"name":"snowflake-sdk","version":"2.0.3","description":"Node.js driver for Snowflake","dependencies":{"@aws-sdk/client-s3":"^3.726.0","@smithy/node-http-handler":"^4.0.1","@azure/storage-blob":"12.26.x","@google-cloud/storage":"^7.7.0","@techteamer/ocsp":"1.0.1","asn1.js-rfc2560":"^5.0.0","asn1.js-rfc5280":"^3.0.0","axios":"^1.7.7","big-integer":"^1.6.43","bignumber.js":"^9.1.2","binascii":"0.0.2","bn.js":"^5.2.1","browser-request":"^0.3.3","expand-tilde":"^2.0.2","fast-xml-parser":"^4.2.5","fastest-levenshtein":"^1.0.16","generic-pool":"^3.8.2","glob":"^10.0.0","https-proxy-agent":"^7.0.2","jsonwebtoken":"^9.0.0","mime-types":"^2.1.29","mkdirp":"^1.0.3","moment":"^2.29.4","moment-timezone":"^0.5.15","open":"^7.3.1","python-struct":"^1.1.3","simple-lru-cache":"^0.0.2","toml":"^3.0.0","uuid":"^8.3.2","winston":"^3.1.0"},"devDependencies":{"@aws-sdk/types":"^3.387.0","async":"^3.2.3","check-dts":"^0.8.2","eslint":"^8.41.0","mocha":"^10.2.0","mock-require":"^3.0.3","nyc":"^15.1.0","test-console":"^2.0.0"},"peerDependencies":{"asn1.js":"^5.4.1"},"overrides":{"semver":"^7.5.2"},"repository":{"type":"git","url":"https://github.com/snowflakedb/snowflake-connector-nodejs"},"typings":"./index.d.ts","scripts":{"lint:check":"eslint && check-dts index.d.ts","lint:check:all":"eslint lib samples system_test test && check-dts index.d.ts","lint:check:all:errorsOnly":"npm run lint:check:all -- --quiet","lint:fix":"eslint --fix","test":"mocha -timeout 180000 --recursive --full-trace test/unit/**/*.js test/unit/*.js","test:authentication":"mocha --exit -timeout 180000 --recursive --full-trace test/authentication/**/*.js test/authentication/*.js","test:integration":"mocha -timeout 180000 --recursive --full-trace test/integration/**/*.js test/integration/*.js","test:single":"mocha -timeout 180000 --full-trace","test:system":"mocha -timeout 180000 --recursive --full-trace system_test/*.js","test:unit":"mocha -timeout 180000 --recursive --full-trace test/unit/**/*.js test/unit/*.js","test:unit:coverage":"nyc npm run test:unit","test:ci":"mocha -timeout 180000 --recursive --full-trace \'test/{unit,integration}/**/*.js\'","test:ci:coverage":"nyc npm run test:ci","test:ci:withSystemTests":"mocha -timeout 180000 --recursive --full-trace \'test/{unit,integration}/**/*.js\' system_test/*.js","test:ci:withSystemTests:coverage":"nyc npm run test:ci:withSystemTests","test:manual":"mocha -timeout 180000 --full-trace --full-trace test/integration/testManualConnection.js"},"author":{"name":"Snowflake Computing, Inc.","email":"support@snowflake.com","url":"https://www.snowflake.com/"},"license":"Apache-2.0"}');

/***/ })

};
;