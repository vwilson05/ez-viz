"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/winston-transport";
exports.ids = ["vendor-chunks/winston-transport"];
exports.modules = {

/***/ "(rsc)/./node_modules/winston-transport/index.js":
/*!*************************************************!*\
  !*** ./node_modules/winston-transport/index.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\n// Expose modern transport directly as the export\nmodule.exports = __webpack_require__(/*! ./modern */ \"(rsc)/./node_modules/winston-transport/modern.js\");\n\n// Expose legacy stream\nmodule.exports.LegacyTransportStream = __webpack_require__(/*! ./legacy */ \"(rsc)/./node_modules/winston-transport/legacy.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvd2luc3Rvbi10cmFuc3BvcnQvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQSx3R0FBb0M7O0FBRXBDO0FBQ0EsOEhBQTBEIiwic291cmNlcyI6WyIvVXNlcnMvdmljdG9yd2lsc29uL0Rlc2t0b3AvcHJvamVjdHMvRVpWaXovbm9kZV9tb2R1bGVzL3dpbnN0b24tdHJhbnNwb3J0L2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLy8gRXhwb3NlIG1vZGVybiB0cmFuc3BvcnQgZGlyZWN0bHkgYXMgdGhlIGV4cG9ydFxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL21vZGVybicpO1xuXG4vLyBFeHBvc2UgbGVnYWN5IHN0cmVhbVxubW9kdWxlLmV4cG9ydHMuTGVnYWN5VHJhbnNwb3J0U3RyZWFtID0gcmVxdWlyZSgnLi9sZWdhY3knKTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/winston-transport/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/winston-transport/legacy.js":
/*!**************************************************!*\
  !*** ./node_modules/winston-transport/legacy.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst util = __webpack_require__(/*! util */ \"util\");\nconst { LEVEL } = __webpack_require__(/*! triple-beam */ \"(rsc)/./node_modules/triple-beam/index.js\");\nconst TransportStream = __webpack_require__(/*! ./modern */ \"(rsc)/./node_modules/winston-transport/modern.js\");\n\n/**\n * Constructor function for the LegacyTransportStream. This is an internal\n * wrapper `winston >= 3` uses to wrap older transports implementing\n * log(level, message, meta).\n * @param {Object} options - Options for this TransportStream instance.\n * @param {Transpot} options.transport - winston@2 or older Transport to wrap.\n */\n\nconst LegacyTransportStream = module.exports = function LegacyTransportStream(options = {}) {\n  TransportStream.call(this, options);\n  if (!options.transport || typeof options.transport.log !== 'function') {\n    throw new Error('Invalid transport, must be an object with a log method.');\n  }\n\n  this.transport = options.transport;\n  this.level = this.level || options.transport.level;\n  this.handleExceptions = this.handleExceptions || options.transport.handleExceptions;\n\n  // Display our deprecation notice.\n  this._deprecated();\n\n  // Properly bubble up errors from the transport to the\n  // LegacyTransportStream instance, but only once no matter how many times\n  // this transport is shared.\n  function transportError(err) {\n    this.emit('error', err, this.transport);\n  }\n\n  if (!this.transport.__winstonError) {\n    this.transport.__winstonError = transportError.bind(this);\n    this.transport.on('error', this.transport.__winstonError);\n  }\n};\n\n/*\n * Inherit from TransportStream using Node.js built-ins\n */\nutil.inherits(LegacyTransportStream, TransportStream);\n\n/**\n * Writes the info object to our transport instance.\n * @param {mixed} info - TODO: add param description.\n * @param {mixed} enc - TODO: add param description.\n * @param {function} callback - TODO: add param description.\n * @returns {undefined}\n * @private\n */\nLegacyTransportStream.prototype._write = function _write(info, enc, callback) {\n  if (this.silent || (info.exception === true && !this.handleExceptions)) {\n    return callback(null);\n  }\n\n  // Remark: This has to be handled in the base transport now because we\n  // cannot conditionally write to our pipe targets as stream.\n  if (!this.level || this.levels[this.level] >= this.levels[info[LEVEL]]) {\n    this.transport.log(info[LEVEL], info.message, info, this._nop);\n  }\n\n  callback(null);\n};\n\n/**\n * Writes the batch of info objects (i.e. \"object chunks\") to our transport\n * instance after performing any necessary filtering.\n * @param {mixed} chunks - TODO: add params description.\n * @param {function} callback - TODO: add params description.\n * @returns {mixed} - TODO: add returns description.\n * @private\n */\nLegacyTransportStream.prototype._writev = function _writev(chunks, callback) {\n  for (let i = 0; i < chunks.length; i++) {\n    if (this._accept(chunks[i])) {\n      this.transport.log(\n        chunks[i].chunk[LEVEL],\n        chunks[i].chunk.message,\n        chunks[i].chunk,\n        this._nop\n      );\n      chunks[i].callback();\n    }\n  }\n\n  return callback(null);\n};\n\n/**\n * Displays a deprecation notice. Defined as a function so it can be\n * overriden in tests.\n * @returns {undefined}\n */\nLegacyTransportStream.prototype._deprecated = function _deprecated() {\n  // eslint-disable-next-line no-console\n  console.error([\n    `${this.transport.name} is a legacy winston transport. Consider upgrading: `,\n    '- Upgrade docs: https://github.com/winstonjs/winston/blob/master/UPGRADE-3.0.md'\n  ].join('\\n'));\n};\n\n/**\n * Clean up error handling state on the legacy transport associated\n * with this instance.\n * @returns {undefined}\n */\nLegacyTransportStream.prototype.close = function close() {\n  if (this.transport.close) {\n    this.transport.close();\n  }\n\n  if (this.transport.__winstonError) {\n    this.transport.removeListener('error', this.transport.__winstonError);\n    this.transport.__winstonError = null;\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvd2luc3Rvbi10cmFuc3BvcnQvbGVnYWN5LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLGFBQWEsbUJBQU8sQ0FBQyxrQkFBTTtBQUMzQixRQUFRLFFBQVEsRUFBRSxtQkFBTyxDQUFDLDhEQUFhO0FBQ3ZDLHdCQUF3QixtQkFBTyxDQUFDLGtFQUFVOztBQUUxQztBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFVBQVU7QUFDckI7O0FBRUEsMEZBQTBGO0FBQzFGO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsVUFBVTtBQUNyQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxVQUFVO0FBQ3JCLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsbUJBQW1CO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTyxxQkFBcUI7QUFDNUI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWN0b3J3aWxzb24vRGVza3RvcC9wcm9qZWN0cy9FWlZpei9ub2RlX21vZHVsZXMvd2luc3Rvbi10cmFuc3BvcnQvbGVnYWN5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcbmNvbnN0IHsgTEVWRUwgfSA9IHJlcXVpcmUoJ3RyaXBsZS1iZWFtJyk7XG5jb25zdCBUcmFuc3BvcnRTdHJlYW0gPSByZXF1aXJlKCcuL21vZGVybicpO1xuXG4vKipcbiAqIENvbnN0cnVjdG9yIGZ1bmN0aW9uIGZvciB0aGUgTGVnYWN5VHJhbnNwb3J0U3RyZWFtLiBUaGlzIGlzIGFuIGludGVybmFsXG4gKiB3cmFwcGVyIGB3aW5zdG9uID49IDNgIHVzZXMgdG8gd3JhcCBvbGRlciB0cmFuc3BvcnRzIGltcGxlbWVudGluZ1xuICogbG9nKGxldmVsLCBtZXNzYWdlLCBtZXRhKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gT3B0aW9ucyBmb3IgdGhpcyBUcmFuc3BvcnRTdHJlYW0gaW5zdGFuY2UuXG4gKiBAcGFyYW0ge1RyYW5zcG90fSBvcHRpb25zLnRyYW5zcG9ydCAtIHdpbnN0b25AMiBvciBvbGRlciBUcmFuc3BvcnQgdG8gd3JhcC5cbiAqL1xuXG5jb25zdCBMZWdhY3lUcmFuc3BvcnRTdHJlYW0gPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIExlZ2FjeVRyYW5zcG9ydFN0cmVhbShvcHRpb25zID0ge30pIHtcbiAgVHJhbnNwb3J0U3RyZWFtLmNhbGwodGhpcywgb3B0aW9ucyk7XG4gIGlmICghb3B0aW9ucy50cmFuc3BvcnQgfHwgdHlwZW9mIG9wdGlvbnMudHJhbnNwb3J0LmxvZyAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCB0cmFuc3BvcnQsIG11c3QgYmUgYW4gb2JqZWN0IHdpdGggYSBsb2cgbWV0aG9kLicpO1xuICB9XG5cbiAgdGhpcy50cmFuc3BvcnQgPSBvcHRpb25zLnRyYW5zcG9ydDtcbiAgdGhpcy5sZXZlbCA9IHRoaXMubGV2ZWwgfHwgb3B0aW9ucy50cmFuc3BvcnQubGV2ZWw7XG4gIHRoaXMuaGFuZGxlRXhjZXB0aW9ucyA9IHRoaXMuaGFuZGxlRXhjZXB0aW9ucyB8fCBvcHRpb25zLnRyYW5zcG9ydC5oYW5kbGVFeGNlcHRpb25zO1xuXG4gIC8vIERpc3BsYXkgb3VyIGRlcHJlY2F0aW9uIG5vdGljZS5cbiAgdGhpcy5fZGVwcmVjYXRlZCgpO1xuXG4gIC8vIFByb3Blcmx5IGJ1YmJsZSB1cCBlcnJvcnMgZnJvbSB0aGUgdHJhbnNwb3J0IHRvIHRoZVxuICAvLyBMZWdhY3lUcmFuc3BvcnRTdHJlYW0gaW5zdGFuY2UsIGJ1dCBvbmx5IG9uY2Ugbm8gbWF0dGVyIGhvdyBtYW55IHRpbWVzXG4gIC8vIHRoaXMgdHJhbnNwb3J0IGlzIHNoYXJlZC5cbiAgZnVuY3Rpb24gdHJhbnNwb3J0RXJyb3IoZXJyKSB7XG4gICAgdGhpcy5lbWl0KCdlcnJvcicsIGVyciwgdGhpcy50cmFuc3BvcnQpO1xuICB9XG5cbiAgaWYgKCF0aGlzLnRyYW5zcG9ydC5fX3dpbnN0b25FcnJvcikge1xuICAgIHRoaXMudHJhbnNwb3J0Ll9fd2luc3RvbkVycm9yID0gdHJhbnNwb3J0RXJyb3IuYmluZCh0aGlzKTtcbiAgICB0aGlzLnRyYW5zcG9ydC5vbignZXJyb3InLCB0aGlzLnRyYW5zcG9ydC5fX3dpbnN0b25FcnJvcik7XG4gIH1cbn07XG5cbi8qXG4gKiBJbmhlcml0IGZyb20gVHJhbnNwb3J0U3RyZWFtIHVzaW5nIE5vZGUuanMgYnVpbHQtaW5zXG4gKi9cbnV0aWwuaW5oZXJpdHMoTGVnYWN5VHJhbnNwb3J0U3RyZWFtLCBUcmFuc3BvcnRTdHJlYW0pO1xuXG4vKipcbiAqIFdyaXRlcyB0aGUgaW5mbyBvYmplY3QgdG8gb3VyIHRyYW5zcG9ydCBpbnN0YW5jZS5cbiAqIEBwYXJhbSB7bWl4ZWR9IGluZm8gLSBUT0RPOiBhZGQgcGFyYW0gZGVzY3JpcHRpb24uXG4gKiBAcGFyYW0ge21peGVkfSBlbmMgLSBUT0RPOiBhZGQgcGFyYW0gZGVzY3JpcHRpb24uXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayAtIFRPRE86IGFkZCBwYXJhbSBkZXNjcmlwdGlvbi5cbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gKiBAcHJpdmF0ZVxuICovXG5MZWdhY3lUcmFuc3BvcnRTdHJlYW0ucHJvdG90eXBlLl93cml0ZSA9IGZ1bmN0aW9uIF93cml0ZShpbmZvLCBlbmMsIGNhbGxiYWNrKSB7XG4gIGlmICh0aGlzLnNpbGVudCB8fCAoaW5mby5leGNlcHRpb24gPT09IHRydWUgJiYgIXRoaXMuaGFuZGxlRXhjZXB0aW9ucykpIHtcbiAgICByZXR1cm4gY2FsbGJhY2sobnVsbCk7XG4gIH1cblxuICAvLyBSZW1hcms6IFRoaXMgaGFzIHRvIGJlIGhhbmRsZWQgaW4gdGhlIGJhc2UgdHJhbnNwb3J0IG5vdyBiZWNhdXNlIHdlXG4gIC8vIGNhbm5vdCBjb25kaXRpb25hbGx5IHdyaXRlIHRvIG91ciBwaXBlIHRhcmdldHMgYXMgc3RyZWFtLlxuICBpZiAoIXRoaXMubGV2ZWwgfHwgdGhpcy5sZXZlbHNbdGhpcy5sZXZlbF0gPj0gdGhpcy5sZXZlbHNbaW5mb1tMRVZFTF1dKSB7XG4gICAgdGhpcy50cmFuc3BvcnQubG9nKGluZm9bTEVWRUxdLCBpbmZvLm1lc3NhZ2UsIGluZm8sIHRoaXMuX25vcCk7XG4gIH1cblxuICBjYWxsYmFjayhudWxsKTtcbn07XG5cbi8qKlxuICogV3JpdGVzIHRoZSBiYXRjaCBvZiBpbmZvIG9iamVjdHMgKGkuZS4gXCJvYmplY3QgY2h1bmtzXCIpIHRvIG91ciB0cmFuc3BvcnRcbiAqIGluc3RhbmNlIGFmdGVyIHBlcmZvcm1pbmcgYW55IG5lY2Vzc2FyeSBmaWx0ZXJpbmcuXG4gKiBAcGFyYW0ge21peGVkfSBjaHVua3MgLSBUT0RPOiBhZGQgcGFyYW1zIGRlc2NyaXB0aW9uLlxuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgLSBUT0RPOiBhZGQgcGFyYW1zIGRlc2NyaXB0aW9uLlxuICogQHJldHVybnMge21peGVkfSAtIFRPRE86IGFkZCByZXR1cm5zIGRlc2NyaXB0aW9uLlxuICogQHByaXZhdGVcbiAqL1xuTGVnYWN5VHJhbnNwb3J0U3RyZWFtLnByb3RvdHlwZS5fd3JpdGV2ID0gZnVuY3Rpb24gX3dyaXRldihjaHVua3MsIGNhbGxiYWNrKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgY2h1bmtzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHRoaXMuX2FjY2VwdChjaHVua3NbaV0pKSB7XG4gICAgICB0aGlzLnRyYW5zcG9ydC5sb2coXG4gICAgICAgIGNodW5rc1tpXS5jaHVua1tMRVZFTF0sXG4gICAgICAgIGNodW5rc1tpXS5jaHVuay5tZXNzYWdlLFxuICAgICAgICBjaHVua3NbaV0uY2h1bmssXG4gICAgICAgIHRoaXMuX25vcFxuICAgICAgKTtcbiAgICAgIGNodW5rc1tpXS5jYWxsYmFjaygpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjYWxsYmFjayhudWxsKTtcbn07XG5cbi8qKlxuICogRGlzcGxheXMgYSBkZXByZWNhdGlvbiBub3RpY2UuIERlZmluZWQgYXMgYSBmdW5jdGlvbiBzbyBpdCBjYW4gYmVcbiAqIG92ZXJyaWRlbiBpbiB0ZXN0cy5cbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gKi9cbkxlZ2FjeVRyYW5zcG9ydFN0cmVhbS5wcm90b3R5cGUuX2RlcHJlY2F0ZWQgPSBmdW5jdGlvbiBfZGVwcmVjYXRlZCgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgY29uc29sZS5lcnJvcihbXG4gICAgYCR7dGhpcy50cmFuc3BvcnQubmFtZX0gaXMgYSBsZWdhY3kgd2luc3RvbiB0cmFuc3BvcnQuIENvbnNpZGVyIHVwZ3JhZGluZzogYCxcbiAgICAnLSBVcGdyYWRlIGRvY3M6IGh0dHBzOi8vZ2l0aHViLmNvbS93aW5zdG9uanMvd2luc3Rvbi9ibG9iL21hc3Rlci9VUEdSQURFLTMuMC5tZCdcbiAgXS5qb2luKCdcXG4nKSk7XG59O1xuXG4vKipcbiAqIENsZWFuIHVwIGVycm9yIGhhbmRsaW5nIHN0YXRlIG9uIHRoZSBsZWdhY3kgdHJhbnNwb3J0IGFzc29jaWF0ZWRcbiAqIHdpdGggdGhpcyBpbnN0YW5jZS5cbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gKi9cbkxlZ2FjeVRyYW5zcG9ydFN0cmVhbS5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiBjbG9zZSgpIHtcbiAgaWYgKHRoaXMudHJhbnNwb3J0LmNsb3NlKSB7XG4gICAgdGhpcy50cmFuc3BvcnQuY2xvc2UoKTtcbiAgfVxuXG4gIGlmICh0aGlzLnRyYW5zcG9ydC5fX3dpbnN0b25FcnJvcikge1xuICAgIHRoaXMudHJhbnNwb3J0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIHRoaXMudHJhbnNwb3J0Ll9fd2luc3RvbkVycm9yKTtcbiAgICB0aGlzLnRyYW5zcG9ydC5fX3dpbnN0b25FcnJvciA9IG51bGw7XG4gIH1cbn07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/winston-transport/legacy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/winston-transport/modern.js":
/*!**************************************************!*\
  !*** ./node_modules/winston-transport/modern.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst util = __webpack_require__(/*! util */ \"util\");\nconst Writable = __webpack_require__(/*! readable-stream/lib/_stream_writable.js */ \"(rsc)/./node_modules/readable-stream/lib/_stream_writable.js\");\nconst { LEVEL } = __webpack_require__(/*! triple-beam */ \"(rsc)/./node_modules/triple-beam/index.js\");\n\n/**\n * Constructor function for the TransportStream. This is the base prototype\n * that all `winston >= 3` transports should inherit from.\n * @param {Object} options - Options for this TransportStream instance\n * @param {String} options.level - Highest level according to RFC5424.\n * @param {Boolean} options.handleExceptions - If true, info with\n * { exception: true } will be written.\n * @param {Function} options.log - Custom log function for simple Transport\n * creation\n * @param {Function} options.close - Called on \"unpipe\" from parent.\n */\nconst TransportStream = module.exports = function TransportStream(options = {}) {\n  Writable.call(this, { objectMode: true, highWaterMark: options.highWaterMark });\n\n  this.format = options.format;\n  this.level = options.level;\n  this.handleExceptions = options.handleExceptions;\n  this.handleRejections = options.handleRejections;\n  this.silent = options.silent;\n\n  if (options.log) this.log = options.log;\n  if (options.logv) this.logv = options.logv;\n  if (options.close) this.close = options.close;\n\n  // Get the levels from the source we are piped from.\n  this.once('pipe', logger => {\n    // Remark (indexzero): this bookkeeping can only support multiple\n    // Logger parents with the same `levels`. This comes into play in\n    // the `winston.Container` code in which `container.add` takes\n    // a fully realized set of options with pre-constructed TransportStreams.\n    this.levels = logger.levels;\n    this.parent = logger;\n  });\n\n  // If and/or when the transport is removed from this instance\n  this.once('unpipe', src => {\n    // Remark (indexzero): this bookkeeping can only support multiple\n    // Logger parents with the same `levels`. This comes into play in\n    // the `winston.Container` code in which `container.add` takes\n    // a fully realized set of options with pre-constructed TransportStreams.\n    if (src === this.parent) {\n      this.parent = null;\n      if (this.close) {\n        this.close();\n      }\n    }\n  });\n};\n\n/*\n * Inherit from Writeable using Node.js built-ins\n */\nutil.inherits(TransportStream, Writable);\n\n/**\n * Writes the info object to our transport instance.\n * @param {mixed} info - TODO: add param description.\n * @param {mixed} enc - TODO: add param description.\n * @param {function} callback - TODO: add param description.\n * @returns {undefined}\n * @private\n */\nTransportStream.prototype._write = function _write(info, enc, callback) {\n  if (this.silent || (info.exception === true && !this.handleExceptions)) {\n    return callback(null);\n  }\n\n  // Remark: This has to be handled in the base transport now because we\n  // cannot conditionally write to our pipe targets as stream. We always\n  // prefer any explicit level set on the Transport itself falling back to\n  // any level set on the parent.\n  const level = this.level || (this.parent && this.parent.level);\n\n  if (!level || this.levels[level] >= this.levels[info[LEVEL]]) {\n    if (info && !this.format) {\n      return this.log(info, callback);\n    }\n\n    let errState;\n    let transformed;\n\n    // We trap(and re-throw) any errors generated by the user-provided format, but also\n    // guarantee that the streams callback is invoked so that we can continue flowing.\n    try {\n      transformed = this.format.transform(Object.assign({}, info), this.format.options);\n    } catch (err) {\n      errState = err;\n    }\n\n    if (errState || !transformed) {\n      // eslint-disable-next-line callback-return\n      callback();\n      if (errState) throw errState;\n      return;\n    }\n\n    return this.log(transformed, callback);\n  }\n  this._writableState.sync = false;\n  return callback(null);\n};\n\n/**\n * Writes the batch of info objects (i.e. \"object chunks\") to our transport\n * instance after performing any necessary filtering.\n * @param {mixed} chunks - TODO: add params description.\n * @param {function} callback - TODO: add params description.\n * @returns {mixed} - TODO: add returns description.\n * @private\n */\nTransportStream.prototype._writev = function _writev(chunks, callback) {\n  if (this.logv) {\n    const infos = chunks.filter(this._accept, this);\n    if (!infos.length) {\n      return callback(null);\n    }\n\n    // Remark (indexzero): from a performance perspective if Transport\n    // implementers do choose to implement logv should we make it their\n    // responsibility to invoke their format?\n    return this.logv(infos, callback);\n  }\n\n  for (let i = 0; i < chunks.length; i++) {\n    if (!this._accept(chunks[i])) continue;\n\n    if (chunks[i].chunk && !this.format) {\n      this.log(chunks[i].chunk, chunks[i].callback);\n      continue;\n    }\n\n    let errState;\n    let transformed;\n\n    // We trap(and re-throw) any errors generated by the user-provided format, but also\n    // guarantee that the streams callback is invoked so that we can continue flowing.\n    try {\n      transformed = this.format.transform(\n        Object.assign({}, chunks[i].chunk),\n        this.format.options\n      );\n    } catch (err) {\n      errState = err;\n    }\n\n    if (errState || !transformed) {\n      // eslint-disable-next-line callback-return\n      chunks[i].callback();\n      if (errState) {\n        // eslint-disable-next-line callback-return\n        callback(null);\n        throw errState;\n      }\n    } else {\n      this.log(transformed, chunks[i].callback);\n    }\n  }\n\n  return callback(null);\n};\n\n/**\n * Predicate function that returns true if the specfied `info` on the\n * WriteReq, `write`, should be passed down into the derived\n * TransportStream's I/O via `.log(info, callback)`.\n * @param {WriteReq} write - winston@3 Node.js WriteReq for the `info` object\n * representing the log message.\n * @returns {Boolean} - Value indicating if the `write` should be accepted &\n * logged.\n */\nTransportStream.prototype._accept = function _accept(write) {\n  const info = write.chunk;\n  if (this.silent) {\n    return false;\n  }\n\n  // We always prefer any explicit level set on the Transport itself\n  // falling back to any level set on the parent.\n  const level = this.level || (this.parent && this.parent.level);\n\n  // Immediately check the average case: log level filtering.\n  if (\n    info.exception === true ||\n    !level ||\n    this.levels[level] >= this.levels[info[LEVEL]]\n  ) {\n    // Ensure the info object is valid based on `{ exception }`:\n    // 1. { handleExceptions: true }: all `info` objects are valid\n    // 2. { exception: false }: accepted by all transports.\n    if (this.handleExceptions || info.exception !== true) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\n/**\n * _nop is short for \"No operation\"\n * @returns {Boolean} Intentionally false.\n */\nTransportStream.prototype._nop = function _nop() {\n  // eslint-disable-next-line no-undefined\n  return void undefined;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/winston-transport/modern.js\n");

/***/ })

};
;