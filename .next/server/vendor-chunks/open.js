"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/open";
exports.ids = ["vendor-chunks/open"];
exports.modules = {

/***/ "(rsc)/./node_modules/open/index.js":
/*!************************************!*\
  !*** ./node_modules/open/index.js ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst {promisify} = __webpack_require__(/*! util */ \"util\");\nconst path = __webpack_require__(/*! path */ \"path\");\nconst childProcess = __webpack_require__(/*! child_process */ \"child_process\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst isWsl = __webpack_require__(/*! is-wsl */ \"(rsc)/./node_modules/is-wsl/index.js\");\nconst isDocker = __webpack_require__(/*! is-docker */ \"(rsc)/./node_modules/is-docker/index.js\");\n\nconst pAccess = promisify(fs.access);\nconst pReadFile = promisify(fs.readFile);\n\n// Path to included `xdg-open`.\nconst localXdgOpenPath = path.join(__dirname, 'xdg-open');\n\n/**\nGet the mount point for fixed drives in WSL.\n\n@inner\n@returns {string} The mount point.\n*/\nconst getWslDrivesMountPoint = (() => {\n\t// Default value for \"root\" param\n\t// according to https://docs.microsoft.com/en-us/windows/wsl/wsl-config\n\tconst defaultMountPoint = '/mnt/';\n\n\tlet mountPoint;\n\n\treturn async function () {\n\t\tif (mountPoint) {\n\t\t\t// Return memoized mount point value\n\t\t\treturn mountPoint;\n\t\t}\n\n\t\tconst configFilePath = '/etc/wsl.conf';\n\n\t\tlet isConfigFileExists = false;\n\t\ttry {\n\t\t\tawait pAccess(configFilePath, fs.constants.F_OK);\n\t\t\tisConfigFileExists = true;\n\t\t} catch (_) {}\n\n\t\tif (!isConfigFileExists) {\n\t\t\treturn defaultMountPoint;\n\t\t}\n\n\t\tconst configContent = await pReadFile(configFilePath, {encoding: 'utf8'});\n\t\tconst configMountPoint = /root\\s*=\\s*(.*)/g.exec(configContent);\n\n\t\tif (!configMountPoint) {\n\t\t\treturn defaultMountPoint;\n\t\t}\n\n\t\tmountPoint = configMountPoint[1].trim();\n\t\tmountPoint = mountPoint.endsWith('/') ? mountPoint : mountPoint + '/';\n\n\t\treturn mountPoint;\n\t};\n})();\n\nmodule.exports = async (target, options) => {\n\tif (typeof target !== 'string') {\n\t\tthrow new TypeError('Expected a `target`');\n\t}\n\n\toptions = {\n\t\twait: false,\n\t\tbackground: false,\n\t\tallowNonzeroExitCode: false,\n\t\t...options\n\t};\n\n\tlet command;\n\tlet {app} = options;\n\tlet appArguments = [];\n\tconst cliArguments = [];\n\tconst childProcessOptions = {};\n\n\tif (Array.isArray(app)) {\n\t\tappArguments = app.slice(1);\n\t\tapp = app[0];\n\t}\n\n\tif (process.platform === 'darwin') {\n\t\tcommand = 'open';\n\n\t\tif (options.wait) {\n\t\t\tcliArguments.push('--wait-apps');\n\t\t}\n\n\t\tif (options.background) {\n\t\t\tcliArguments.push('--background');\n\t\t}\n\n\t\tif (app) {\n\t\t\tcliArguments.push('-a', app);\n\t\t}\n\t} else if (process.platform === 'win32' || (isWsl && !isDocker())) {\n\t\tconst mountPoint = await getWslDrivesMountPoint();\n\n\t\tcommand = isWsl ?\n\t\t\t`${mountPoint}c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe` :\n\t\t\t`${process.env.SYSTEMROOT}\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell`;\n\n\t\tcliArguments.push(\n\t\t\t'-NoProfile',\n\t\t\t'-NonInteractive',\n\t\t\t'â€“ExecutionPolicy',\n\t\t\t'Bypass',\n\t\t\t'-EncodedCommand'\n\t\t);\n\n\t\tif (!isWsl) {\n\t\t\tchildProcessOptions.windowsVerbatimArguments = true;\n\t\t}\n\n\t\tconst encodedArguments = ['Start'];\n\n\t\tif (options.wait) {\n\t\t\tencodedArguments.push('-Wait');\n\t\t}\n\n\t\tif (app) {\n\t\t\t// Double quote with double quotes to ensure the inner quotes are passed through.\n\t\t\t// Inner quotes are delimited for PowerShell interpretation with backticks.\n\t\t\tencodedArguments.push(`\"\\`\"${app}\\`\"\"`, '-ArgumentList');\n\t\t\tappArguments.unshift(target);\n\t\t} else {\n\t\t\tencodedArguments.push(`\"${target}\"`);\n\t\t}\n\n\t\tif (appArguments.length > 0) {\n\t\t\tappArguments = appArguments.map(arg => `\"\\`\"${arg}\\`\"\"`);\n\t\t\tencodedArguments.push(appArguments.join(','));\n\t\t}\n\n\t\t// Using Base64-encoded command, accepted by PowerShell, to allow special characters.\n\t\ttarget = Buffer.from(encodedArguments.join(' '), 'utf16le').toString('base64');\n\t} else {\n\t\tif (app) {\n\t\t\tcommand = app;\n\t\t} else {\n\t\t\t// When bundled by Webpack, there's no actual package file path and no local `xdg-open`.\n\t\t\tconst isBundled =  false || __dirname === '/';\n\n\t\t\t// Check if local `xdg-open` exists and is executable.\n\t\t\tlet exeLocalXdgOpen = false;\n\t\t\ttry {\n\t\t\t\tawait pAccess(localXdgOpenPath, fs.constants.X_OK);\n\t\t\t\texeLocalXdgOpen = true;\n\t\t\t} catch (_) {}\n\n\t\t\tconst useSystemXdgOpen = process.versions.electron ||\n\t\t\t\tprocess.platform === 'android' || isBundled || !exeLocalXdgOpen;\n\t\t\tcommand = useSystemXdgOpen ? 'xdg-open' : localXdgOpenPath;\n\t\t}\n\n\t\tif (appArguments.length > 0) {\n\t\t\tcliArguments.push(...appArguments);\n\t\t}\n\n\t\tif (!options.wait) {\n\t\t\t// `xdg-open` will block the process unless stdio is ignored\n\t\t\t// and it's detached from the parent even if it's unref'd.\n\t\t\tchildProcessOptions.stdio = 'ignore';\n\t\t\tchildProcessOptions.detached = true;\n\t\t}\n\t}\n\n\tcliArguments.push(target);\n\n\tif (process.platform === 'darwin' && appArguments.length > 0) {\n\t\tcliArguments.push('--args', ...appArguments);\n\t}\n\n\tconst subprocess = childProcess.spawn(command, cliArguments, childProcessOptions);\n\n\tif (options.wait) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tsubprocess.once('error', reject);\n\n\t\t\tsubprocess.once('close', exitCode => {\n\t\t\t\tif (options.allowNonzeroExitCode && exitCode > 0) {\n\t\t\t\t\treject(new Error(`Exited with code ${exitCode}`));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tresolve(subprocess);\n\t\t\t});\n\t\t});\n\t}\n\n\tsubprocess.unref();\n\n\treturn subprocess;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3Blbi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLE9BQU8sV0FBVyxFQUFFLG1CQUFPLENBQUMsa0JBQU07QUFDbEMsYUFBYSxtQkFBTyxDQUFDLGtCQUFNO0FBQzNCLHFCQUFxQixtQkFBTyxDQUFDLG9DQUFlO0FBQzVDLFdBQVcsbUJBQU8sQ0FBQyxjQUFJO0FBQ3ZCLGNBQWMsbUJBQU8sQ0FBQyxvREFBUTtBQUM5QixpQkFBaUIsbUJBQU8sQ0FBQywwREFBVzs7QUFFcEM7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxVQUFVLFFBQVE7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0E7O0FBRUEseURBQXlELGlCQUFpQjtBQUMxRTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxNQUFNLEtBQUs7QUFDWDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBLE1BQU0sV0FBVztBQUNqQixNQUFNLHVCQUF1Qjs7QUFFN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsSUFBSTtBQUNwQztBQUNBLElBQUk7QUFDSiw2QkFBNkIsT0FBTztBQUNwQzs7QUFFQTtBQUNBLGlEQUFpRCxJQUFJO0FBQ3JEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EscUJBQXFCLE1BQVU7O0FBRS9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSwwQ0FBMEMsU0FBUztBQUNuRDtBQUNBOztBQUVBO0FBQ0EsSUFBSTtBQUNKLEdBQUc7QUFDSDs7QUFFQTs7QUFFQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvdmljdG9yd2lsc29uL0Rlc2t0b3AvcHJvamVjdHMvRVpWaXovbm9kZV9tb2R1bGVzL29wZW4vaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuY29uc3Qge3Byb21pc2lmeX0gPSByZXF1aXJlKCd1dGlsJyk7XG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuY29uc3QgY2hpbGRQcm9jZXNzID0gcmVxdWlyZSgnY2hpbGRfcHJvY2VzcycpO1xuY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xuY29uc3QgaXNXc2wgPSByZXF1aXJlKCdpcy13c2wnKTtcbmNvbnN0IGlzRG9ja2VyID0gcmVxdWlyZSgnaXMtZG9ja2VyJyk7XG5cbmNvbnN0IHBBY2Nlc3MgPSBwcm9taXNpZnkoZnMuYWNjZXNzKTtcbmNvbnN0IHBSZWFkRmlsZSA9IHByb21pc2lmeShmcy5yZWFkRmlsZSk7XG5cbi8vIFBhdGggdG8gaW5jbHVkZWQgYHhkZy1vcGVuYC5cbmNvbnN0IGxvY2FsWGRnT3BlblBhdGggPSBwYXRoLmpvaW4oX19kaXJuYW1lLCAneGRnLW9wZW4nKTtcblxuLyoqXG5HZXQgdGhlIG1vdW50IHBvaW50IGZvciBmaXhlZCBkcml2ZXMgaW4gV1NMLlxuXG5AaW5uZXJcbkByZXR1cm5zIHtzdHJpbmd9IFRoZSBtb3VudCBwb2ludC5cbiovXG5jb25zdCBnZXRXc2xEcml2ZXNNb3VudFBvaW50ID0gKCgpID0+IHtcblx0Ly8gRGVmYXVsdCB2YWx1ZSBmb3IgXCJyb290XCIgcGFyYW1cblx0Ly8gYWNjb3JkaW5nIHRvIGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2VuLXVzL3dpbmRvd3Mvd3NsL3dzbC1jb25maWdcblx0Y29uc3QgZGVmYXVsdE1vdW50UG9pbnQgPSAnL21udC8nO1xuXG5cdGxldCBtb3VudFBvaW50O1xuXG5cdHJldHVybiBhc3luYyBmdW5jdGlvbiAoKSB7XG5cdFx0aWYgKG1vdW50UG9pbnQpIHtcblx0XHRcdC8vIFJldHVybiBtZW1vaXplZCBtb3VudCBwb2ludCB2YWx1ZVxuXHRcdFx0cmV0dXJuIG1vdW50UG9pbnQ7XG5cdFx0fVxuXG5cdFx0Y29uc3QgY29uZmlnRmlsZVBhdGggPSAnL2V0Yy93c2wuY29uZic7XG5cblx0XHRsZXQgaXNDb25maWdGaWxlRXhpc3RzID0gZmFsc2U7XG5cdFx0dHJ5IHtcblx0XHRcdGF3YWl0IHBBY2Nlc3MoY29uZmlnRmlsZVBhdGgsIGZzLmNvbnN0YW50cy5GX09LKTtcblx0XHRcdGlzQ29uZmlnRmlsZUV4aXN0cyA9IHRydWU7XG5cdFx0fSBjYXRjaCAoXykge31cblxuXHRcdGlmICghaXNDb25maWdGaWxlRXhpc3RzKSB7XG5cdFx0XHRyZXR1cm4gZGVmYXVsdE1vdW50UG9pbnQ7XG5cdFx0fVxuXG5cdFx0Y29uc3QgY29uZmlnQ29udGVudCA9IGF3YWl0IHBSZWFkRmlsZShjb25maWdGaWxlUGF0aCwge2VuY29kaW5nOiAndXRmOCd9KTtcblx0XHRjb25zdCBjb25maWdNb3VudFBvaW50ID0gL3Jvb3RcXHMqPVxccyooLiopL2cuZXhlYyhjb25maWdDb250ZW50KTtcblxuXHRcdGlmICghY29uZmlnTW91bnRQb2ludCkge1xuXHRcdFx0cmV0dXJuIGRlZmF1bHRNb3VudFBvaW50O1xuXHRcdH1cblxuXHRcdG1vdW50UG9pbnQgPSBjb25maWdNb3VudFBvaW50WzFdLnRyaW0oKTtcblx0XHRtb3VudFBvaW50ID0gbW91bnRQb2ludC5lbmRzV2l0aCgnLycpID8gbW91bnRQb2ludCA6IG1vdW50UG9pbnQgKyAnLyc7XG5cblx0XHRyZXR1cm4gbW91bnRQb2ludDtcblx0fTtcbn0pKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gYXN5bmMgKHRhcmdldCwgb3B0aW9ucykgPT4ge1xuXHRpZiAodHlwZW9mIHRhcmdldCAhPT0gJ3N0cmluZycpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBhIGB0YXJnZXRgJyk7XG5cdH1cblxuXHRvcHRpb25zID0ge1xuXHRcdHdhaXQ6IGZhbHNlLFxuXHRcdGJhY2tncm91bmQ6IGZhbHNlLFxuXHRcdGFsbG93Tm9uemVyb0V4aXRDb2RlOiBmYWxzZSxcblx0XHQuLi5vcHRpb25zXG5cdH07XG5cblx0bGV0IGNvbW1hbmQ7XG5cdGxldCB7YXBwfSA9IG9wdGlvbnM7XG5cdGxldCBhcHBBcmd1bWVudHMgPSBbXTtcblx0Y29uc3QgY2xpQXJndW1lbnRzID0gW107XG5cdGNvbnN0IGNoaWxkUHJvY2Vzc09wdGlvbnMgPSB7fTtcblxuXHRpZiAoQXJyYXkuaXNBcnJheShhcHApKSB7XG5cdFx0YXBwQXJndW1lbnRzID0gYXBwLnNsaWNlKDEpO1xuXHRcdGFwcCA9IGFwcFswXTtcblx0fVxuXG5cdGlmIChwcm9jZXNzLnBsYXRmb3JtID09PSAnZGFyd2luJykge1xuXHRcdGNvbW1hbmQgPSAnb3Blbic7XG5cblx0XHRpZiAob3B0aW9ucy53YWl0KSB7XG5cdFx0XHRjbGlBcmd1bWVudHMucHVzaCgnLS13YWl0LWFwcHMnKTtcblx0XHR9XG5cblx0XHRpZiAob3B0aW9ucy5iYWNrZ3JvdW5kKSB7XG5cdFx0XHRjbGlBcmd1bWVudHMucHVzaCgnLS1iYWNrZ3JvdW5kJyk7XG5cdFx0fVxuXG5cdFx0aWYgKGFwcCkge1xuXHRcdFx0Y2xpQXJndW1lbnRzLnB1c2goJy1hJywgYXBwKTtcblx0XHR9XG5cdH0gZWxzZSBpZiAocHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ3dpbjMyJyB8fCAoaXNXc2wgJiYgIWlzRG9ja2VyKCkpKSB7XG5cdFx0Y29uc3QgbW91bnRQb2ludCA9IGF3YWl0IGdldFdzbERyaXZlc01vdW50UG9pbnQoKTtcblxuXHRcdGNvbW1hbmQgPSBpc1dzbCA/XG5cdFx0XHRgJHttb3VudFBvaW50fWMvV2luZG93cy9TeXN0ZW0zMi9XaW5kb3dzUG93ZXJTaGVsbC92MS4wL3Bvd2Vyc2hlbGwuZXhlYCA6XG5cdFx0XHRgJHtwcm9jZXNzLmVudi5TWVNURU1ST09UfVxcXFxTeXN0ZW0zMlxcXFxXaW5kb3dzUG93ZXJTaGVsbFxcXFx2MS4wXFxcXHBvd2Vyc2hlbGxgO1xuXG5cdFx0Y2xpQXJndW1lbnRzLnB1c2goXG5cdFx0XHQnLU5vUHJvZmlsZScsXG5cdFx0XHQnLU5vbkludGVyYWN0aXZlJyxcblx0XHRcdCfigJNFeGVjdXRpb25Qb2xpY3knLFxuXHRcdFx0J0J5cGFzcycsXG5cdFx0XHQnLUVuY29kZWRDb21tYW5kJ1xuXHRcdCk7XG5cblx0XHRpZiAoIWlzV3NsKSB7XG5cdFx0XHRjaGlsZFByb2Nlc3NPcHRpb25zLndpbmRvd3NWZXJiYXRpbUFyZ3VtZW50cyA9IHRydWU7XG5cdFx0fVxuXG5cdFx0Y29uc3QgZW5jb2RlZEFyZ3VtZW50cyA9IFsnU3RhcnQnXTtcblxuXHRcdGlmIChvcHRpb25zLndhaXQpIHtcblx0XHRcdGVuY29kZWRBcmd1bWVudHMucHVzaCgnLVdhaXQnKTtcblx0XHR9XG5cblx0XHRpZiAoYXBwKSB7XG5cdFx0XHQvLyBEb3VibGUgcXVvdGUgd2l0aCBkb3VibGUgcXVvdGVzIHRvIGVuc3VyZSB0aGUgaW5uZXIgcXVvdGVzIGFyZSBwYXNzZWQgdGhyb3VnaC5cblx0XHRcdC8vIElubmVyIHF1b3RlcyBhcmUgZGVsaW1pdGVkIGZvciBQb3dlclNoZWxsIGludGVycHJldGF0aW9uIHdpdGggYmFja3RpY2tzLlxuXHRcdFx0ZW5jb2RlZEFyZ3VtZW50cy5wdXNoKGBcIlxcYFwiJHthcHB9XFxgXCJcImAsICctQXJndW1lbnRMaXN0Jyk7XG5cdFx0XHRhcHBBcmd1bWVudHMudW5zaGlmdCh0YXJnZXQpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRlbmNvZGVkQXJndW1lbnRzLnB1c2goYFwiJHt0YXJnZXR9XCJgKTtcblx0XHR9XG5cblx0XHRpZiAoYXBwQXJndW1lbnRzLmxlbmd0aCA+IDApIHtcblx0XHRcdGFwcEFyZ3VtZW50cyA9IGFwcEFyZ3VtZW50cy5tYXAoYXJnID0+IGBcIlxcYFwiJHthcmd9XFxgXCJcImApO1xuXHRcdFx0ZW5jb2RlZEFyZ3VtZW50cy5wdXNoKGFwcEFyZ3VtZW50cy5qb2luKCcsJykpO1xuXHRcdH1cblxuXHRcdC8vIFVzaW5nIEJhc2U2NC1lbmNvZGVkIGNvbW1hbmQsIGFjY2VwdGVkIGJ5IFBvd2VyU2hlbGwsIHRvIGFsbG93IHNwZWNpYWwgY2hhcmFjdGVycy5cblx0XHR0YXJnZXQgPSBCdWZmZXIuZnJvbShlbmNvZGVkQXJndW1lbnRzLmpvaW4oJyAnKSwgJ3V0ZjE2bGUnKS50b1N0cmluZygnYmFzZTY0Jyk7XG5cdH0gZWxzZSB7XG5cdFx0aWYgKGFwcCkge1xuXHRcdFx0Y29tbWFuZCA9IGFwcDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gV2hlbiBidW5kbGVkIGJ5IFdlYnBhY2ssIHRoZXJlJ3Mgbm8gYWN0dWFsIHBhY2thZ2UgZmlsZSBwYXRoIGFuZCBubyBsb2NhbCBgeGRnLW9wZW5gLlxuXHRcdFx0Y29uc3QgaXNCdW5kbGVkID0gIV9fZGlybmFtZSB8fCBfX2Rpcm5hbWUgPT09ICcvJztcblxuXHRcdFx0Ly8gQ2hlY2sgaWYgbG9jYWwgYHhkZy1vcGVuYCBleGlzdHMgYW5kIGlzIGV4ZWN1dGFibGUuXG5cdFx0XHRsZXQgZXhlTG9jYWxYZGdPcGVuID0gZmFsc2U7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRhd2FpdCBwQWNjZXNzKGxvY2FsWGRnT3BlblBhdGgsIGZzLmNvbnN0YW50cy5YX09LKTtcblx0XHRcdFx0ZXhlTG9jYWxYZGdPcGVuID0gdHJ1ZTtcblx0XHRcdH0gY2F0Y2ggKF8pIHt9XG5cblx0XHRcdGNvbnN0IHVzZVN5c3RlbVhkZ09wZW4gPSBwcm9jZXNzLnZlcnNpb25zLmVsZWN0cm9uIHx8XG5cdFx0XHRcdHByb2Nlc3MucGxhdGZvcm0gPT09ICdhbmRyb2lkJyB8fCBpc0J1bmRsZWQgfHwgIWV4ZUxvY2FsWGRnT3Blbjtcblx0XHRcdGNvbW1hbmQgPSB1c2VTeXN0ZW1YZGdPcGVuID8gJ3hkZy1vcGVuJyA6IGxvY2FsWGRnT3BlblBhdGg7XG5cdFx0fVxuXG5cdFx0aWYgKGFwcEFyZ3VtZW50cy5sZW5ndGggPiAwKSB7XG5cdFx0XHRjbGlBcmd1bWVudHMucHVzaCguLi5hcHBBcmd1bWVudHMpO1xuXHRcdH1cblxuXHRcdGlmICghb3B0aW9ucy53YWl0KSB7XG5cdFx0XHQvLyBgeGRnLW9wZW5gIHdpbGwgYmxvY2sgdGhlIHByb2Nlc3MgdW5sZXNzIHN0ZGlvIGlzIGlnbm9yZWRcblx0XHRcdC8vIGFuZCBpdCdzIGRldGFjaGVkIGZyb20gdGhlIHBhcmVudCBldmVuIGlmIGl0J3MgdW5yZWYnZC5cblx0XHRcdGNoaWxkUHJvY2Vzc09wdGlvbnMuc3RkaW8gPSAnaWdub3JlJztcblx0XHRcdGNoaWxkUHJvY2Vzc09wdGlvbnMuZGV0YWNoZWQgPSB0cnVlO1xuXHRcdH1cblx0fVxuXG5cdGNsaUFyZ3VtZW50cy5wdXNoKHRhcmdldCk7XG5cblx0aWYgKHByb2Nlc3MucGxhdGZvcm0gPT09ICdkYXJ3aW4nICYmIGFwcEFyZ3VtZW50cy5sZW5ndGggPiAwKSB7XG5cdFx0Y2xpQXJndW1lbnRzLnB1c2goJy0tYXJncycsIC4uLmFwcEFyZ3VtZW50cyk7XG5cdH1cblxuXHRjb25zdCBzdWJwcm9jZXNzID0gY2hpbGRQcm9jZXNzLnNwYXduKGNvbW1hbmQsIGNsaUFyZ3VtZW50cywgY2hpbGRQcm9jZXNzT3B0aW9ucyk7XG5cblx0aWYgKG9wdGlvbnMud2FpdCkge1xuXHRcdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0XHRzdWJwcm9jZXNzLm9uY2UoJ2Vycm9yJywgcmVqZWN0KTtcblxuXHRcdFx0c3VicHJvY2Vzcy5vbmNlKCdjbG9zZScsIGV4aXRDb2RlID0+IHtcblx0XHRcdFx0aWYgKG9wdGlvbnMuYWxsb3dOb256ZXJvRXhpdENvZGUgJiYgZXhpdENvZGUgPiAwKSB7XG5cdFx0XHRcdFx0cmVqZWN0KG5ldyBFcnJvcihgRXhpdGVkIHdpdGggY29kZSAke2V4aXRDb2RlfWApKTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXNvbHZlKHN1YnByb2Nlc3MpO1xuXHRcdFx0fSk7XG5cdFx0fSk7XG5cdH1cblxuXHRzdWJwcm9jZXNzLnVucmVmKCk7XG5cblx0cmV0dXJuIHN1YnByb2Nlc3M7XG59O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/open/index.js\n");

/***/ })

};
;