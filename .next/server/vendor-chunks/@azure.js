"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@azure";
exports.ids = ["vendor-chunks/@azure"];
exports.modules = {

/***/ "(rsc)/./node_modules/@azure/abort-controller/dist/esm/AbortError.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@azure/abort-controller/dist/esm/AbortError.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbortError: () => (/* binding */ AbortError)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * This error is thrown when an asynchronous operation has been aborted.\n * Check for this error by testing the `name` that the name property of the\n * error matches `\"AbortError\"`.\n *\n * @example\n * ```ts\n * const controller = new AbortController();\n * controller.abort();\n * try {\n *   doAsyncWork(controller.signal)\n * } catch (e) {\n *   if (e.name === 'AbortError') {\n *     // handle abort error here.\n *   }\n * }\n * ```\n */\nclass AbortError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = \"AbortError\";\n    }\n}\n//# sourceMappingURL=AbortError.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2Fib3J0LWNvbnRyb2xsZXIvZGlzdC9lc20vQWJvcnRFcnJvci5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWN0b3J3aWxzb24vRGVza3RvcC9wcm9qZWN0cy9FWlZpei9ub2RlX21vZHVsZXMvQGF6dXJlL2Fib3J0LWNvbnRyb2xsZXIvZGlzdC9lc20vQWJvcnRFcnJvci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbi8qKlxuICogVGhpcyBlcnJvciBpcyB0aHJvd24gd2hlbiBhbiBhc3luY2hyb25vdXMgb3BlcmF0aW9uIGhhcyBiZWVuIGFib3J0ZWQuXG4gKiBDaGVjayBmb3IgdGhpcyBlcnJvciBieSB0ZXN0aW5nIHRoZSBgbmFtZWAgdGhhdCB0aGUgbmFtZSBwcm9wZXJ0eSBvZiB0aGVcbiAqIGVycm9yIG1hdGNoZXMgYFwiQWJvcnRFcnJvclwiYC5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHNcbiAqIGNvbnN0IGNvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG4gKiBjb250cm9sbGVyLmFib3J0KCk7XG4gKiB0cnkge1xuICogICBkb0FzeW5jV29yayhjb250cm9sbGVyLnNpZ25hbClcbiAqIH0gY2F0Y2ggKGUpIHtcbiAqICAgaWYgKGUubmFtZSA9PT0gJ0Fib3J0RXJyb3InKSB7XG4gKiAgICAgLy8gaGFuZGxlIGFib3J0IGVycm9yIGhlcmUuXG4gKiAgIH1cbiAqIH1cbiAqIGBgYFxuICovXG5leHBvcnQgY2xhc3MgQWJvcnRFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIkFib3J0RXJyb3JcIjtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1BYm9ydEVycm9yLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/abort-controller/dist/esm/AbortError.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/abort-controller/dist/esm/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@azure/abort-controller/dist/esm/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbortError: () => (/* reexport safe */ _AbortError_js__WEBPACK_IMPORTED_MODULE_0__.AbortError)\n/* harmony export */ });\n/* harmony import */ var _AbortError_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AbortError.js */ \"(rsc)/./node_modules/@azure/abort-controller/dist/esm/AbortError.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2Fib3J0LWNvbnRyb2xsZXIvZGlzdC9lc20vaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQzZDO0FBQzdDIiwic291cmNlcyI6WyIvVXNlcnMvdmljdG9yd2lsc29uL0Rlc2t0b3AvcHJvamVjdHMvRVpWaXovbm9kZV9tb2R1bGVzL0BhenVyZS9hYm9ydC1jb250cm9sbGVyL2Rpc3QvZXNtL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuZXhwb3J0IHsgQWJvcnRFcnJvciB9IGZyb20gXCIuL0Fib3J0RXJyb3IuanNcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/abort-controller/dist/esm/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-auth/dist/esm/azureKeyCredential.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@azure/core-auth/dist/esm/azureKeyCredential.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AzureKeyCredential: () => (/* binding */ AzureKeyCredential)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * A static-key-based credential that supports updating\n * the underlying key value.\n */\nclass AzureKeyCredential {\n    /**\n     * The value of the key to be used in authentication\n     */\n    get key() {\n        return this._key;\n    }\n    /**\n     * Create an instance of an AzureKeyCredential for use\n     * with a service client.\n     *\n     * @param key - The initial value of the key to use in authentication\n     */\n    constructor(key) {\n        if (!key) {\n            throw new Error(\"key must be a non-empty string\");\n        }\n        this._key = key;\n    }\n    /**\n     * Change the value of the key.\n     *\n     * Updates will take effect upon the next request after\n     * updating the key value.\n     *\n     * @param newKey - The new key value to be used\n     */\n    update(newKey) {\n        this._key = newKey;\n    }\n}\n//# sourceMappingURL=azureKeyCredential.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtYXV0aC9kaXN0L2VzbS9henVyZUtleUNyZWRlbnRpYWwuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWN0b3J3aWxzb24vRGVza3RvcC9wcm9qZWN0cy9FWlZpei9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtYXV0aC9kaXN0L2VzbS9henVyZUtleUNyZWRlbnRpYWwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4vKipcbiAqIEEgc3RhdGljLWtleS1iYXNlZCBjcmVkZW50aWFsIHRoYXQgc3VwcG9ydHMgdXBkYXRpbmdcbiAqIHRoZSB1bmRlcmx5aW5nIGtleSB2YWx1ZS5cbiAqL1xuZXhwb3J0IGNsYXNzIEF6dXJlS2V5Q3JlZGVudGlhbCB7XG4gICAgLyoqXG4gICAgICogVGhlIHZhbHVlIG9mIHRoZSBrZXkgdG8gYmUgdXNlZCBpbiBhdXRoZW50aWNhdGlvblxuICAgICAqL1xuICAgIGdldCBrZXkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9rZXk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiBhbiBBenVyZUtleUNyZWRlbnRpYWwgZm9yIHVzZVxuICAgICAqIHdpdGggYSBzZXJ2aWNlIGNsaWVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBrZXkgLSBUaGUgaW5pdGlhbCB2YWx1ZSBvZiB0aGUga2V5IHRvIHVzZSBpbiBhdXRoZW50aWNhdGlvblxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGtleSkge1xuICAgICAgICBpZiAoIWtleSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwia2V5IG11c3QgYmUgYSBub24tZW1wdHkgc3RyaW5nXCIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2tleSA9IGtleTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2hhbmdlIHRoZSB2YWx1ZSBvZiB0aGUga2V5LlxuICAgICAqXG4gICAgICogVXBkYXRlcyB3aWxsIHRha2UgZWZmZWN0IHVwb24gdGhlIG5leHQgcmVxdWVzdCBhZnRlclxuICAgICAqIHVwZGF0aW5nIHRoZSBrZXkgdmFsdWUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbmV3S2V5IC0gVGhlIG5ldyBrZXkgdmFsdWUgdG8gYmUgdXNlZFxuICAgICAqL1xuICAgIHVwZGF0ZShuZXdLZXkpIHtcbiAgICAgICAgdGhpcy5fa2V5ID0gbmV3S2V5O1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWF6dXJlS2V5Q3JlZGVudGlhbC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-auth/dist/esm/azureKeyCredential.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-auth/dist/esm/azureNamedKeyCredential.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@azure/core-auth/dist/esm/azureNamedKeyCredential.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AzureNamedKeyCredential: () => (/* binding */ AzureNamedKeyCredential),\n/* harmony export */   isNamedKeyCredential: () => (/* binding */ isNamedKeyCredential)\n/* harmony export */ });\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-util */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/index.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * A static name/key-based credential that supports updating\n * the underlying name and key values.\n */\nclass AzureNamedKeyCredential {\n    /**\n     * The value of the key to be used in authentication.\n     */\n    get key() {\n        return this._key;\n    }\n    /**\n     * The value of the name to be used in authentication.\n     */\n    get name() {\n        return this._name;\n    }\n    /**\n     * Create an instance of an AzureNamedKeyCredential for use\n     * with a service client.\n     *\n     * @param name - The initial value of the name to use in authentication.\n     * @param key - The initial value of the key to use in authentication.\n     */\n    constructor(name, key) {\n        if (!name || !key) {\n            throw new TypeError(\"name and key must be non-empty strings\");\n        }\n        this._name = name;\n        this._key = key;\n    }\n    /**\n     * Change the value of the key.\n     *\n     * Updates will take effect upon the next request after\n     * updating the key value.\n     *\n     * @param newName - The new name value to be used.\n     * @param newKey - The new key value to be used.\n     */\n    update(newName, newKey) {\n        if (!newName || !newKey) {\n            throw new TypeError(\"newName and newKey must be non-empty strings\");\n        }\n        this._name = newName;\n        this._key = newKey;\n    }\n}\n/**\n * Tests an object to determine whether it implements NamedKeyCredential.\n *\n * @param credential - The assumed NamedKeyCredential to be tested.\n */\nfunction isNamedKeyCredential(credential) {\n    return ((0,_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.isObjectWithProperties)(credential, [\"name\", \"key\"]) &&\n        typeof credential.key === \"string\" &&\n        typeof credential.name === \"string\");\n}\n//# sourceMappingURL=azureNamedKeyCredential.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtYXV0aC9kaXN0L2VzbS9henVyZU5hbWVkS2V5Q3JlZGVudGlhbC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQzBEO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLFlBQVksd0VBQXNCO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvdmljdG9yd2lsc29uL0Rlc2t0b3AvcHJvamVjdHMvRVpWaXovbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLWF1dGgvZGlzdC9lc20vYXp1cmVOYW1lZEtleUNyZWRlbnRpYWwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5pbXBvcnQgeyBpc09iamVjdFdpdGhQcm9wZXJ0aWVzIH0gZnJvbSBcIkBhenVyZS9jb3JlLXV0aWxcIjtcbi8qKlxuICogQSBzdGF0aWMgbmFtZS9rZXktYmFzZWQgY3JlZGVudGlhbCB0aGF0IHN1cHBvcnRzIHVwZGF0aW5nXG4gKiB0aGUgdW5kZXJseWluZyBuYW1lIGFuZCBrZXkgdmFsdWVzLlxuICovXG5leHBvcnQgY2xhc3MgQXp1cmVOYW1lZEtleUNyZWRlbnRpYWwge1xuICAgIC8qKlxuICAgICAqIFRoZSB2YWx1ZSBvZiB0aGUga2V5IHRvIGJlIHVzZWQgaW4gYXV0aGVudGljYXRpb24uXG4gICAgICovXG4gICAgZ2V0IGtleSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2tleTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIHZhbHVlIG9mIHRoZSBuYW1lIHRvIGJlIHVzZWQgaW4gYXV0aGVudGljYXRpb24uXG4gICAgICovXG4gICAgZ2V0IG5hbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9uYW1lO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgYW4gQXp1cmVOYW1lZEtleUNyZWRlbnRpYWwgZm9yIHVzZVxuICAgICAqIHdpdGggYSBzZXJ2aWNlIGNsaWVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBuYW1lIC0gVGhlIGluaXRpYWwgdmFsdWUgb2YgdGhlIG5hbWUgdG8gdXNlIGluIGF1dGhlbnRpY2F0aW9uLlxuICAgICAqIEBwYXJhbSBrZXkgLSBUaGUgaW5pdGlhbCB2YWx1ZSBvZiB0aGUga2V5IHRvIHVzZSBpbiBhdXRoZW50aWNhdGlvbi5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihuYW1lLCBrZXkpIHtcbiAgICAgICAgaWYgKCFuYW1lIHx8ICFrZXkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJuYW1lIGFuZCBrZXkgbXVzdCBiZSBub24tZW1wdHkgc3RyaW5nc1wiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy5fa2V5ID0ga2V5O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDaGFuZ2UgdGhlIHZhbHVlIG9mIHRoZSBrZXkuXG4gICAgICpcbiAgICAgKiBVcGRhdGVzIHdpbGwgdGFrZSBlZmZlY3QgdXBvbiB0aGUgbmV4dCByZXF1ZXN0IGFmdGVyXG4gICAgICogdXBkYXRpbmcgdGhlIGtleSB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBuZXdOYW1lIC0gVGhlIG5ldyBuYW1lIHZhbHVlIHRvIGJlIHVzZWQuXG4gICAgICogQHBhcmFtIG5ld0tleSAtIFRoZSBuZXcga2V5IHZhbHVlIHRvIGJlIHVzZWQuXG4gICAgICovXG4gICAgdXBkYXRlKG5ld05hbWUsIG5ld0tleSkge1xuICAgICAgICBpZiAoIW5ld05hbWUgfHwgIW5ld0tleSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIm5ld05hbWUgYW5kIG5ld0tleSBtdXN0IGJlIG5vbi1lbXB0eSBzdHJpbmdzXCIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX25hbWUgPSBuZXdOYW1lO1xuICAgICAgICB0aGlzLl9rZXkgPSBuZXdLZXk7XG4gICAgfVxufVxuLyoqXG4gKiBUZXN0cyBhbiBvYmplY3QgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgaXQgaW1wbGVtZW50cyBOYW1lZEtleUNyZWRlbnRpYWwuXG4gKlxuICogQHBhcmFtIGNyZWRlbnRpYWwgLSBUaGUgYXNzdW1lZCBOYW1lZEtleUNyZWRlbnRpYWwgdG8gYmUgdGVzdGVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNOYW1lZEtleUNyZWRlbnRpYWwoY3JlZGVudGlhbCkge1xuICAgIHJldHVybiAoaXNPYmplY3RXaXRoUHJvcGVydGllcyhjcmVkZW50aWFsLCBbXCJuYW1lXCIsIFwia2V5XCJdKSAmJlxuICAgICAgICB0eXBlb2YgY3JlZGVudGlhbC5rZXkgPT09IFwic3RyaW5nXCIgJiZcbiAgICAgICAgdHlwZW9mIGNyZWRlbnRpYWwubmFtZSA9PT0gXCJzdHJpbmdcIik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1henVyZU5hbWVkS2V5Q3JlZGVudGlhbC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-auth/dist/esm/azureNamedKeyCredential.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-auth/dist/esm/azureSASCredential.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@azure/core-auth/dist/esm/azureSASCredential.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AzureSASCredential: () => (/* binding */ AzureSASCredential),\n/* harmony export */   isSASCredential: () => (/* binding */ isSASCredential)\n/* harmony export */ });\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-util */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/index.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * A static-signature-based credential that supports updating\n * the underlying signature value.\n */\nclass AzureSASCredential {\n    /**\n     * The value of the shared access signature to be used in authentication\n     */\n    get signature() {\n        return this._signature;\n    }\n    /**\n     * Create an instance of an AzureSASCredential for use\n     * with a service client.\n     *\n     * @param signature - The initial value of the shared access signature to use in authentication\n     */\n    constructor(signature) {\n        if (!signature) {\n            throw new Error(\"shared access signature must be a non-empty string\");\n        }\n        this._signature = signature;\n    }\n    /**\n     * Change the value of the signature.\n     *\n     * Updates will take effect upon the next request after\n     * updating the signature value.\n     *\n     * @param newSignature - The new shared access signature value to be used\n     */\n    update(newSignature) {\n        if (!newSignature) {\n            throw new Error(\"shared access signature must be a non-empty string\");\n        }\n        this._signature = newSignature;\n    }\n}\n/**\n * Tests an object to determine whether it implements SASCredential.\n *\n * @param credential - The assumed SASCredential to be tested.\n */\nfunction isSASCredential(credential) {\n    return ((0,_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.isObjectWithProperties)(credential, [\"signature\"]) && typeof credential.signature === \"string\");\n}\n//# sourceMappingURL=azureSASCredential.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtYXV0aC9kaXN0L2VzbS9henVyZVNBU0NyZWRlbnRpYWwuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUMwRDtBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsWUFBWSx3RUFBc0I7QUFDbEM7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcndpbHNvbi9EZXNrdG9wL3Byb2plY3RzL0VaVml6L25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS1hdXRoL2Rpc3QvZXNtL2F6dXJlU0FTQ3JlZGVudGlhbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbmltcG9ydCB7IGlzT2JqZWN0V2l0aFByb3BlcnRpZXMgfSBmcm9tIFwiQGF6dXJlL2NvcmUtdXRpbFwiO1xuLyoqXG4gKiBBIHN0YXRpYy1zaWduYXR1cmUtYmFzZWQgY3JlZGVudGlhbCB0aGF0IHN1cHBvcnRzIHVwZGF0aW5nXG4gKiB0aGUgdW5kZXJseWluZyBzaWduYXR1cmUgdmFsdWUuXG4gKi9cbmV4cG9ydCBjbGFzcyBBenVyZVNBU0NyZWRlbnRpYWwge1xuICAgIC8qKlxuICAgICAqIFRoZSB2YWx1ZSBvZiB0aGUgc2hhcmVkIGFjY2VzcyBzaWduYXR1cmUgdG8gYmUgdXNlZCBpbiBhdXRoZW50aWNhdGlvblxuICAgICAqL1xuICAgIGdldCBzaWduYXR1cmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zaWduYXR1cmU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiBhbiBBenVyZVNBU0NyZWRlbnRpYWwgZm9yIHVzZVxuICAgICAqIHdpdGggYSBzZXJ2aWNlIGNsaWVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBzaWduYXR1cmUgLSBUaGUgaW5pdGlhbCB2YWx1ZSBvZiB0aGUgc2hhcmVkIGFjY2VzcyBzaWduYXR1cmUgdG8gdXNlIGluIGF1dGhlbnRpY2F0aW9uXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2lnbmF0dXJlKSB7XG4gICAgICAgIGlmICghc2lnbmF0dXJlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJzaGFyZWQgYWNjZXNzIHNpZ25hdHVyZSBtdXN0IGJlIGEgbm9uLWVtcHR5IHN0cmluZ1wiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9zaWduYXR1cmUgPSBzaWduYXR1cmU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENoYW5nZSB0aGUgdmFsdWUgb2YgdGhlIHNpZ25hdHVyZS5cbiAgICAgKlxuICAgICAqIFVwZGF0ZXMgd2lsbCB0YWtlIGVmZmVjdCB1cG9uIHRoZSBuZXh0IHJlcXVlc3QgYWZ0ZXJcbiAgICAgKiB1cGRhdGluZyB0aGUgc2lnbmF0dXJlIHZhbHVlLlxuICAgICAqXG4gICAgICogQHBhcmFtIG5ld1NpZ25hdHVyZSAtIFRoZSBuZXcgc2hhcmVkIGFjY2VzcyBzaWduYXR1cmUgdmFsdWUgdG8gYmUgdXNlZFxuICAgICAqL1xuICAgIHVwZGF0ZShuZXdTaWduYXR1cmUpIHtcbiAgICAgICAgaWYgKCFuZXdTaWduYXR1cmUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInNoYXJlZCBhY2Nlc3Mgc2lnbmF0dXJlIG11c3QgYmUgYSBub24tZW1wdHkgc3RyaW5nXCIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3NpZ25hdHVyZSA9IG5ld1NpZ25hdHVyZTtcbiAgICB9XG59XG4vKipcbiAqIFRlc3RzIGFuIG9iamVjdCB0byBkZXRlcm1pbmUgd2hldGhlciBpdCBpbXBsZW1lbnRzIFNBU0NyZWRlbnRpYWwuXG4gKlxuICogQHBhcmFtIGNyZWRlbnRpYWwgLSBUaGUgYXNzdW1lZCBTQVNDcmVkZW50aWFsIHRvIGJlIHRlc3RlZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzU0FTQ3JlZGVudGlhbChjcmVkZW50aWFsKSB7XG4gICAgcmV0dXJuIChpc09iamVjdFdpdGhQcm9wZXJ0aWVzKGNyZWRlbnRpYWwsIFtcInNpZ25hdHVyZVwiXSkgJiYgdHlwZW9mIGNyZWRlbnRpYWwuc2lnbmF0dXJlID09PSBcInN0cmluZ1wiKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWF6dXJlU0FTQ3JlZGVudGlhbC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-auth/dist/esm/azureSASCredential.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-auth/dist/esm/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@azure/core-auth/dist/esm/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AzureKeyCredential: () => (/* reexport safe */ _azureKeyCredential_js__WEBPACK_IMPORTED_MODULE_0__.AzureKeyCredential),\n/* harmony export */   AzureNamedKeyCredential: () => (/* reexport safe */ _azureNamedKeyCredential_js__WEBPACK_IMPORTED_MODULE_2__.AzureNamedKeyCredential),\n/* harmony export */   AzureSASCredential: () => (/* reexport safe */ _azureSASCredential_js__WEBPACK_IMPORTED_MODULE_3__.AzureSASCredential),\n/* harmony export */   isKeyCredential: () => (/* reexport safe */ _keyCredential_js__WEBPACK_IMPORTED_MODULE_1__.isKeyCredential),\n/* harmony export */   isNamedKeyCredential: () => (/* reexport safe */ _azureNamedKeyCredential_js__WEBPACK_IMPORTED_MODULE_2__.isNamedKeyCredential),\n/* harmony export */   isSASCredential: () => (/* reexport safe */ _azureSASCredential_js__WEBPACK_IMPORTED_MODULE_3__.isSASCredential),\n/* harmony export */   isTokenCredential: () => (/* reexport safe */ _tokenCredential_js__WEBPACK_IMPORTED_MODULE_4__.isTokenCredential)\n/* harmony export */ });\n/* harmony import */ var _azureKeyCredential_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./azureKeyCredential.js */ \"(rsc)/./node_modules/@azure/core-auth/dist/esm/azureKeyCredential.js\");\n/* harmony import */ var _keyCredential_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./keyCredential.js */ \"(rsc)/./node_modules/@azure/core-auth/dist/esm/keyCredential.js\");\n/* harmony import */ var _azureNamedKeyCredential_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./azureNamedKeyCredential.js */ \"(rsc)/./node_modules/@azure/core-auth/dist/esm/azureNamedKeyCredential.js\");\n/* harmony import */ var _azureSASCredential_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./azureSASCredential.js */ \"(rsc)/./node_modules/@azure/core-auth/dist/esm/azureSASCredential.js\");\n/* harmony import */ var _tokenCredential_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./tokenCredential.js */ \"(rsc)/./node_modules/@azure/core-auth/dist/esm/tokenCredential.js\");\n\n\n\n\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtYXV0aC9kaXN0L2VzbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBNkQ7QUFDUjtBQUN5QztBQUNoQjtBQUNwQjtBQUMxRCIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcndpbHNvbi9EZXNrdG9wL3Byb2plY3RzL0VaVml6L25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS1hdXRoL2Rpc3QvZXNtL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7IEF6dXJlS2V5Q3JlZGVudGlhbCB9IGZyb20gXCIuL2F6dXJlS2V5Q3JlZGVudGlhbC5qc1wiO1xuZXhwb3J0IHsgaXNLZXlDcmVkZW50aWFsIH0gZnJvbSBcIi4va2V5Q3JlZGVudGlhbC5qc1wiO1xuZXhwb3J0IHsgQXp1cmVOYW1lZEtleUNyZWRlbnRpYWwsIGlzTmFtZWRLZXlDcmVkZW50aWFsLCB9IGZyb20gXCIuL2F6dXJlTmFtZWRLZXlDcmVkZW50aWFsLmpzXCI7XG5leHBvcnQgeyBBenVyZVNBU0NyZWRlbnRpYWwsIGlzU0FTQ3JlZGVudGlhbCB9IGZyb20gXCIuL2F6dXJlU0FTQ3JlZGVudGlhbC5qc1wiO1xuZXhwb3J0IHsgaXNUb2tlbkNyZWRlbnRpYWwsIH0gZnJvbSBcIi4vdG9rZW5DcmVkZW50aWFsLmpzXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-auth/dist/esm/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-auth/dist/esm/keyCredential.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@azure/core-auth/dist/esm/keyCredential.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isKeyCredential: () => (/* binding */ isKeyCredential)\n/* harmony export */ });\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-util */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/index.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * Tests an object to determine whether it implements KeyCredential.\n *\n * @param credential - The assumed KeyCredential to be tested.\n */\nfunction isKeyCredential(credential) {\n    return (0,_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.isObjectWithProperties)(credential, [\"key\"]) && typeof credential.key === \"string\";\n}\n//# sourceMappingURL=keyCredential.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtYXV0aC9kaXN0L2VzbS9rZXlDcmVkZW50aWFsLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUMwRDtBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxXQUFXLHdFQUFzQjtBQUNqQztBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvdmljdG9yd2lsc29uL0Rlc2t0b3AvcHJvamVjdHMvRVpWaXovbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLWF1dGgvZGlzdC9lc20va2V5Q3JlZGVudGlhbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbmltcG9ydCB7IGlzT2JqZWN0V2l0aFByb3BlcnRpZXMgfSBmcm9tIFwiQGF6dXJlL2NvcmUtdXRpbFwiO1xuLyoqXG4gKiBUZXN0cyBhbiBvYmplY3QgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgaXQgaW1wbGVtZW50cyBLZXlDcmVkZW50aWFsLlxuICpcbiAqIEBwYXJhbSBjcmVkZW50aWFsIC0gVGhlIGFzc3VtZWQgS2V5Q3JlZGVudGlhbCB0byBiZSB0ZXN0ZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0tleUNyZWRlbnRpYWwoY3JlZGVudGlhbCkge1xuICAgIHJldHVybiBpc09iamVjdFdpdGhQcm9wZXJ0aWVzKGNyZWRlbnRpYWwsIFtcImtleVwiXSkgJiYgdHlwZW9mIGNyZWRlbnRpYWwua2V5ID09PSBcInN0cmluZ1wiO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9a2V5Q3JlZGVudGlhbC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-auth/dist/esm/keyCredential.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-auth/dist/esm/tokenCredential.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@azure/core-auth/dist/esm/tokenCredential.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isBearerToken: () => (/* binding */ isBearerToken),\n/* harmony export */   isPopToken: () => (/* binding */ isPopToken),\n/* harmony export */   isTokenCredential: () => (/* binding */ isTokenCredential)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * @internal\n * @param accessToken - Access token\n * @returns Whether a token is bearer type or not\n */\nfunction isBearerToken(accessToken) {\n    return !accessToken.tokenType || accessToken.tokenType === \"Bearer\";\n}\n/**\n * @internal\n * @param accessToken - Access token\n * @returns Whether a token is Pop token or not\n */\nfunction isPopToken(accessToken) {\n    return accessToken.tokenType === \"pop\";\n}\n/**\n * Tests an object to determine whether it implements TokenCredential.\n *\n * @param credential - The assumed TokenCredential to be tested.\n */\nfunction isTokenCredential(credential) {\n    // Check for an object with a 'getToken' function and possibly with\n    // a 'signRequest' function.  We do this check to make sure that\n    // a ServiceClientCredentials implementor (like TokenClientCredentials\n    // in ms-rest-nodeauth) doesn't get mistaken for a TokenCredential if\n    // it doesn't actually implement TokenCredential also.\n    const castCredential = credential;\n    return (castCredential &&\n        typeof castCredential.getToken === \"function\" &&\n        (castCredential.signRequest === undefined || castCredential.getToken.length > 0));\n}\n//# sourceMappingURL=tokenCredential.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtYXV0aC9kaXN0L2VzbS90b2tlbkNyZWRlbnRpYWwuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcndpbHNvbi9EZXNrdG9wL3Byb2plY3RzL0VaVml6L25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS1hdXRoL2Rpc3QvZXNtL3Rva2VuQ3JlZGVudGlhbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbi8qKlxuICogQGludGVybmFsXG4gKiBAcGFyYW0gYWNjZXNzVG9rZW4gLSBBY2Nlc3MgdG9rZW5cbiAqIEByZXR1cm5zIFdoZXRoZXIgYSB0b2tlbiBpcyBiZWFyZXIgdHlwZSBvciBub3RcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzQmVhcmVyVG9rZW4oYWNjZXNzVG9rZW4pIHtcbiAgICByZXR1cm4gIWFjY2Vzc1Rva2VuLnRva2VuVHlwZSB8fCBhY2Nlc3NUb2tlbi50b2tlblR5cGUgPT09IFwiQmVhcmVyXCI7XG59XG4vKipcbiAqIEBpbnRlcm5hbFxuICogQHBhcmFtIGFjY2Vzc1Rva2VuIC0gQWNjZXNzIHRva2VuXG4gKiBAcmV0dXJucyBXaGV0aGVyIGEgdG9rZW4gaXMgUG9wIHRva2VuIG9yIG5vdFxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNQb3BUb2tlbihhY2Nlc3NUb2tlbikge1xuICAgIHJldHVybiBhY2Nlc3NUb2tlbi50b2tlblR5cGUgPT09IFwicG9wXCI7XG59XG4vKipcbiAqIFRlc3RzIGFuIG9iamVjdCB0byBkZXRlcm1pbmUgd2hldGhlciBpdCBpbXBsZW1lbnRzIFRva2VuQ3JlZGVudGlhbC5cbiAqXG4gKiBAcGFyYW0gY3JlZGVudGlhbCAtIFRoZSBhc3N1bWVkIFRva2VuQ3JlZGVudGlhbCB0byBiZSB0ZXN0ZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1Rva2VuQ3JlZGVudGlhbChjcmVkZW50aWFsKSB7XG4gICAgLy8gQ2hlY2sgZm9yIGFuIG9iamVjdCB3aXRoIGEgJ2dldFRva2VuJyBmdW5jdGlvbiBhbmQgcG9zc2libHkgd2l0aFxuICAgIC8vIGEgJ3NpZ25SZXF1ZXN0JyBmdW5jdGlvbi4gIFdlIGRvIHRoaXMgY2hlY2sgdG8gbWFrZSBzdXJlIHRoYXRcbiAgICAvLyBhIFNlcnZpY2VDbGllbnRDcmVkZW50aWFscyBpbXBsZW1lbnRvciAobGlrZSBUb2tlbkNsaWVudENyZWRlbnRpYWxzXG4gICAgLy8gaW4gbXMtcmVzdC1ub2RlYXV0aCkgZG9lc24ndCBnZXQgbWlzdGFrZW4gZm9yIGEgVG9rZW5DcmVkZW50aWFsIGlmXG4gICAgLy8gaXQgZG9lc24ndCBhY3R1YWxseSBpbXBsZW1lbnQgVG9rZW5DcmVkZW50aWFsIGFsc28uXG4gICAgY29uc3QgY2FzdENyZWRlbnRpYWwgPSBjcmVkZW50aWFsO1xuICAgIHJldHVybiAoY2FzdENyZWRlbnRpYWwgJiZcbiAgICAgICAgdHlwZW9mIGNhc3RDcmVkZW50aWFsLmdldFRva2VuID09PSBcImZ1bmN0aW9uXCIgJiZcbiAgICAgICAgKGNhc3RDcmVkZW50aWFsLnNpZ25SZXF1ZXN0ID09PSB1bmRlZmluZWQgfHwgY2FzdENyZWRlbnRpYWwuZ2V0VG9rZW4ubGVuZ3RoID4gMCkpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dG9rZW5DcmVkZW50aWFsLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-auth/dist/esm/tokenCredential.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-client/dist/commonjs/state.js":
/*!****************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/commonjs/state.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.state = void 0;\n/**\n * Holds the singleton operationRequestMap, to be shared across CJS and ESM imports.\n */\nexports.state = {\n    operationRequestMap: new WeakMap(),\n};\n//# sourceMappingURL=state-cjs.cjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtY2xpZW50L2Rpc3QvY29tbW9uanMvc3RhdGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvdmljdG9yd2lsc29uL0Rlc2t0b3AvcHJvamVjdHMvRVpWaXovbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLWNsaWVudC9kaXN0L2NvbW1vbmpzL3N0YXRlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnN0YXRlID0gdm9pZCAwO1xuLyoqXG4gKiBIb2xkcyB0aGUgc2luZ2xldG9uIG9wZXJhdGlvblJlcXVlc3RNYXAsIHRvIGJlIHNoYXJlZCBhY3Jvc3MgQ0pTIGFuZCBFU00gaW1wb3J0cy5cbiAqL1xuZXhwb3J0cy5zdGF0ZSA9IHtcbiAgICBvcGVyYXRpb25SZXF1ZXN0TWFwOiBuZXcgV2Vha01hcCgpLFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0YXRlLWNqcy5janMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-client/dist/commonjs/state.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-client/dist/esm/authorizeRequestOnClaimChallenge.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/esm/authorizeRequestOnClaimChallenge.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authorizeRequestOnClaimChallenge: () => (/* binding */ authorizeRequestOnClaimChallenge),\n/* harmony export */   parseCAEChallenge: () => (/* binding */ parseCAEChallenge)\n/* harmony export */ });\n/* harmony import */ var _log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./log.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/log.js\");\n/* harmony import */ var _base64_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base64.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/base64.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n/**\n * Converts: `Bearer a=\"b\", c=\"d\", Bearer d=\"e\", f=\"g\"`.\n * Into: `[ { a: 'b', c: 'd' }, { d: 'e', f: 'g' } ]`.\n *\n * @internal\n */\nfunction parseCAEChallenge(challenges) {\n    const bearerChallenges = `, ${challenges.trim()}`.split(\", Bearer \").filter((x) => x);\n    return bearerChallenges.map((challenge) => {\n        const challengeParts = `${challenge.trim()}, `.split('\", ').filter((x) => x);\n        const keyValuePairs = challengeParts.map((keyValue) => (([key, value]) => ({ [key]: value }))(keyValue.trim().split('=\"')));\n        // Key-value pairs to plain object:\n        return keyValuePairs.reduce((a, b) => (Object.assign(Object.assign({}, a), b)), {});\n    });\n}\n/**\n * This function can be used as a callback for the `bearerTokenAuthenticationPolicy` of `@azure/core-rest-pipeline`, to support CAE challenges:\n * [Continuous Access Evaluation](https://learn.microsoft.com/azure/active-directory/conditional-access/concept-continuous-access-evaluation).\n *\n * Call the `bearerTokenAuthenticationPolicy` with the following options:\n *\n * ```ts snippet:AuthorizeRequestOnClaimChallenge\n * import { bearerTokenAuthenticationPolicy } from \"@azure/core-rest-pipeline\";\n * import { authorizeRequestOnClaimChallenge } from \"@azure/core-client\";\n *\n * const policy = bearerTokenAuthenticationPolicy({\n *   challengeCallbacks: {\n *     authorizeRequestOnChallenge: authorizeRequestOnClaimChallenge,\n *   },\n *   scopes: [\"https://service/.default\"],\n * });\n * ```\n *\n * Once provided, the `bearerTokenAuthenticationPolicy` policy will internally handle Continuous Access Evaluation (CAE) challenges.\n * When it can't complete a challenge it will return the 401 (unauthorized) response from ARM.\n *\n * Example challenge with claims:\n *\n * ```\n * Bearer authorization_uri=\"https://login.windows-ppe.net/\", error=\"invalid_token\",\n * error_description=\"User session has been revoked\",\n * claims=\"eyJhY2Nlc3NfdG9rZW4iOnsibmJmIjp7ImVzc2VudGlhbCI6dHJ1ZSwgInZhbHVlIjoiMTYwMzc0MjgwMCJ9fX0=\"\n * ```\n */\nasync function authorizeRequestOnClaimChallenge(onChallengeOptions) {\n    var _a;\n    const { scopes, response } = onChallengeOptions;\n    const logger = onChallengeOptions.logger || _log_js__WEBPACK_IMPORTED_MODULE_0__.logger;\n    const challenge = response.headers.get(\"WWW-Authenticate\");\n    if (!challenge) {\n        logger.info(`The WWW-Authenticate header was missing. Failed to perform the Continuous Access Evaluation authentication flow.`);\n        return false;\n    }\n    const challenges = parseCAEChallenge(challenge) || [];\n    const parsedChallenge = challenges.find((x) => x.claims);\n    if (!parsedChallenge) {\n        logger.info(`The WWW-Authenticate header was missing the necessary \"claims\" to perform the Continuous Access Evaluation authentication flow.`);\n        return false;\n    }\n    const accessToken = await onChallengeOptions.getAccessToken(parsedChallenge.scope ? [parsedChallenge.scope] : scopes, {\n        claims: (0,_base64_js__WEBPACK_IMPORTED_MODULE_1__.decodeStringToString)(parsedChallenge.claims),\n    });\n    if (!accessToken) {\n        return false;\n    }\n    onChallengeOptions.request.headers.set(\"Authorization\", `${(_a = accessToken.tokenType) !== null && _a !== void 0 ? _a : \"Bearer\"} ${accessToken.token}`);\n    return true;\n}\n//# sourceMappingURL=authorizeRequestOnClaimChallenge.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtY2xpZW50L2Rpc3QvZXNtL2F1dGhvcml6ZVJlcXVlc3RPbkNsYWltQ2hhbGxlbmdlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBO0FBQ3NEO0FBQ0g7QUFDbkQ7QUFDQTtBQUNBLGNBQWMsZ0JBQWdCLElBQUksaUJBQWlCO0FBQ25EO0FBQ0E7QUFDQTtBQUNPO0FBQ1Asa0NBQWtDLGtCQUFrQjtBQUNwRDtBQUNBLGtDQUFrQyxpQkFBaUI7QUFDbkQscUZBQXFGLGNBQWM7QUFDbkc7QUFDQSw2RUFBNkUsYUFBYTtBQUMxRixLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksa0NBQWtDO0FBQzlDLFlBQVksbUNBQW1DO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLFlBQVksbUJBQW1CO0FBQy9CLGdEQUFnRCwyQ0FBZ0I7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGdFQUFvQjtBQUNwQyxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsK0RBQStELHdFQUF3RSxFQUFFLGtCQUFrQjtBQUMzSjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWN0b3J3aWxzb24vRGVza3RvcC9wcm9qZWN0cy9FWlZpei9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtY2xpZW50L2Rpc3QvZXNtL2F1dGhvcml6ZVJlcXVlc3RPbkNsYWltQ2hhbGxlbmdlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuaW1wb3J0IHsgbG9nZ2VyIGFzIGNvcmVDbGllbnRMb2dnZXIgfSBmcm9tIFwiLi9sb2cuanNcIjtcbmltcG9ydCB7IGRlY29kZVN0cmluZ1RvU3RyaW5nIH0gZnJvbSBcIi4vYmFzZTY0LmpzXCI7XG4vKipcbiAqIENvbnZlcnRzOiBgQmVhcmVyIGE9XCJiXCIsIGM9XCJkXCIsIEJlYXJlciBkPVwiZVwiLCBmPVwiZ1wiYC5cbiAqIEludG86IGBbIHsgYTogJ2InLCBjOiAnZCcgfSwgeyBkOiAnZScsIGY6ICdnJyB9IF1gLlxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VDQUVDaGFsbGVuZ2UoY2hhbGxlbmdlcykge1xuICAgIGNvbnN0IGJlYXJlckNoYWxsZW5nZXMgPSBgLCAke2NoYWxsZW5nZXMudHJpbSgpfWAuc3BsaXQoXCIsIEJlYXJlciBcIikuZmlsdGVyKCh4KSA9PiB4KTtcbiAgICByZXR1cm4gYmVhcmVyQ2hhbGxlbmdlcy5tYXAoKGNoYWxsZW5nZSkgPT4ge1xuICAgICAgICBjb25zdCBjaGFsbGVuZ2VQYXJ0cyA9IGAke2NoYWxsZW5nZS50cmltKCl9LCBgLnNwbGl0KCdcIiwgJykuZmlsdGVyKCh4KSA9PiB4KTtcbiAgICAgICAgY29uc3Qga2V5VmFsdWVQYWlycyA9IGNoYWxsZW5nZVBhcnRzLm1hcCgoa2V5VmFsdWUpID0+ICgoW2tleSwgdmFsdWVdKSA9PiAoeyBba2V5XTogdmFsdWUgfSkpKGtleVZhbHVlLnRyaW0oKS5zcGxpdCgnPVwiJykpKTtcbiAgICAgICAgLy8gS2V5LXZhbHVlIHBhaXJzIHRvIHBsYWluIG9iamVjdDpcbiAgICAgICAgcmV0dXJuIGtleVZhbHVlUGFpcnMucmVkdWNlKChhLCBiKSA9PiAoT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBhKSwgYikpLCB7fSk7XG4gICAgfSk7XG59XG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gY2FuIGJlIHVzZWQgYXMgYSBjYWxsYmFjayBmb3IgdGhlIGBiZWFyZXJUb2tlbkF1dGhlbnRpY2F0aW9uUG9saWN5YCBvZiBgQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZWAsIHRvIHN1cHBvcnQgQ0FFIGNoYWxsZW5nZXM6XG4gKiBbQ29udGludW91cyBBY2Nlc3MgRXZhbHVhdGlvbl0oaHR0cHM6Ly9sZWFybi5taWNyb3NvZnQuY29tL2F6dXJlL2FjdGl2ZS1kaXJlY3RvcnkvY29uZGl0aW9uYWwtYWNjZXNzL2NvbmNlcHQtY29udGludW91cy1hY2Nlc3MtZXZhbHVhdGlvbikuXG4gKlxuICogQ2FsbCB0aGUgYGJlYXJlclRva2VuQXV0aGVudGljYXRpb25Qb2xpY3lgIHdpdGggdGhlIGZvbGxvd2luZyBvcHRpb25zOlxuICpcbiAqIGBgYHRzIHNuaXBwZXQ6QXV0aG9yaXplUmVxdWVzdE9uQ2xhaW1DaGFsbGVuZ2VcbiAqIGltcG9ydCB7IGJlYXJlclRva2VuQXV0aGVudGljYXRpb25Qb2xpY3kgfSBmcm9tIFwiQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZVwiO1xuICogaW1wb3J0IHsgYXV0aG9yaXplUmVxdWVzdE9uQ2xhaW1DaGFsbGVuZ2UgfSBmcm9tIFwiQGF6dXJlL2NvcmUtY2xpZW50XCI7XG4gKlxuICogY29uc3QgcG9saWN5ID0gYmVhcmVyVG9rZW5BdXRoZW50aWNhdGlvblBvbGljeSh7XG4gKiAgIGNoYWxsZW5nZUNhbGxiYWNrczoge1xuICogICAgIGF1dGhvcml6ZVJlcXVlc3RPbkNoYWxsZW5nZTogYXV0aG9yaXplUmVxdWVzdE9uQ2xhaW1DaGFsbGVuZ2UsXG4gKiAgIH0sXG4gKiAgIHNjb3BlczogW1wiaHR0cHM6Ly9zZXJ2aWNlLy5kZWZhdWx0XCJdLFxuICogfSk7XG4gKiBgYGBcbiAqXG4gKiBPbmNlIHByb3ZpZGVkLCB0aGUgYGJlYXJlclRva2VuQXV0aGVudGljYXRpb25Qb2xpY3lgIHBvbGljeSB3aWxsIGludGVybmFsbHkgaGFuZGxlIENvbnRpbnVvdXMgQWNjZXNzIEV2YWx1YXRpb24gKENBRSkgY2hhbGxlbmdlcy5cbiAqIFdoZW4gaXQgY2FuJ3QgY29tcGxldGUgYSBjaGFsbGVuZ2UgaXQgd2lsbCByZXR1cm4gdGhlIDQwMSAodW5hdXRob3JpemVkKSByZXNwb25zZSBmcm9tIEFSTS5cbiAqXG4gKiBFeGFtcGxlIGNoYWxsZW5nZSB3aXRoIGNsYWltczpcbiAqXG4gKiBgYGBcbiAqIEJlYXJlciBhdXRob3JpemF0aW9uX3VyaT1cImh0dHBzOi8vbG9naW4ud2luZG93cy1wcGUubmV0L1wiLCBlcnJvcj1cImludmFsaWRfdG9rZW5cIixcbiAqIGVycm9yX2Rlc2NyaXB0aW9uPVwiVXNlciBzZXNzaW9uIGhhcyBiZWVuIHJldm9rZWRcIixcbiAqIGNsYWltcz1cImV5SmhZMk5sYzNOZmRHOXJaVzRpT25zaWJtSm1JanA3SW1WemMyVnVkR2xoYkNJNmRISjFaU3dnSW5aaGJIVmxJam9pTVRZd016YzBNamd3TUNKOWZYMD1cIlxuICogYGBgXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBhdXRob3JpemVSZXF1ZXN0T25DbGFpbUNoYWxsZW5nZShvbkNoYWxsZW5nZU9wdGlvbnMpIHtcbiAgICB2YXIgX2E7XG4gICAgY29uc3QgeyBzY29wZXMsIHJlc3BvbnNlIH0gPSBvbkNoYWxsZW5nZU9wdGlvbnM7XG4gICAgY29uc3QgbG9nZ2VyID0gb25DaGFsbGVuZ2VPcHRpb25zLmxvZ2dlciB8fCBjb3JlQ2xpZW50TG9nZ2VyO1xuICAgIGNvbnN0IGNoYWxsZW5nZSA9IHJlc3BvbnNlLmhlYWRlcnMuZ2V0KFwiV1dXLUF1dGhlbnRpY2F0ZVwiKTtcbiAgICBpZiAoIWNoYWxsZW5nZSkge1xuICAgICAgICBsb2dnZXIuaW5mbyhgVGhlIFdXVy1BdXRoZW50aWNhdGUgaGVhZGVyIHdhcyBtaXNzaW5nLiBGYWlsZWQgdG8gcGVyZm9ybSB0aGUgQ29udGludW91cyBBY2Nlc3MgRXZhbHVhdGlvbiBhdXRoZW50aWNhdGlvbiBmbG93LmApO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IGNoYWxsZW5nZXMgPSBwYXJzZUNBRUNoYWxsZW5nZShjaGFsbGVuZ2UpIHx8IFtdO1xuICAgIGNvbnN0IHBhcnNlZENoYWxsZW5nZSA9IGNoYWxsZW5nZXMuZmluZCgoeCkgPT4geC5jbGFpbXMpO1xuICAgIGlmICghcGFyc2VkQ2hhbGxlbmdlKSB7XG4gICAgICAgIGxvZ2dlci5pbmZvKGBUaGUgV1dXLUF1dGhlbnRpY2F0ZSBoZWFkZXIgd2FzIG1pc3NpbmcgdGhlIG5lY2Vzc2FyeSBcImNsYWltc1wiIHRvIHBlcmZvcm0gdGhlIENvbnRpbnVvdXMgQWNjZXNzIEV2YWx1YXRpb24gYXV0aGVudGljYXRpb24gZmxvdy5gKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCBhY2Nlc3NUb2tlbiA9IGF3YWl0IG9uQ2hhbGxlbmdlT3B0aW9ucy5nZXRBY2Nlc3NUb2tlbihwYXJzZWRDaGFsbGVuZ2Uuc2NvcGUgPyBbcGFyc2VkQ2hhbGxlbmdlLnNjb3BlXSA6IHNjb3Blcywge1xuICAgICAgICBjbGFpbXM6IGRlY29kZVN0cmluZ1RvU3RyaW5nKHBhcnNlZENoYWxsZW5nZS5jbGFpbXMpLFxuICAgIH0pO1xuICAgIGlmICghYWNjZXNzVG9rZW4pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBvbkNoYWxsZW5nZU9wdGlvbnMucmVxdWVzdC5oZWFkZXJzLnNldChcIkF1dGhvcml6YXRpb25cIiwgYCR7KF9hID0gYWNjZXNzVG9rZW4udG9rZW5UeXBlKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBcIkJlYXJlclwifSAke2FjY2Vzc1Rva2VuLnRva2VufWApO1xuICAgIHJldHVybiB0cnVlO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXV0aG9yaXplUmVxdWVzdE9uQ2xhaW1DaGFsbGVuZ2UuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-client/dist/esm/authorizeRequestOnClaimChallenge.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-client/dist/esm/authorizeRequestOnTenantChallenge.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/esm/authorizeRequestOnTenantChallenge.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authorizeRequestOnTenantChallenge: () => (/* binding */ authorizeRequestOnTenantChallenge)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * A set of constants used internally when processing requests.\n */\nconst Constants = {\n    DefaultScope: \"/.default\",\n    /**\n     * Defines constants for use with HTTP headers.\n     */\n    HeaderConstants: {\n        /**\n         * The Authorization header.\n         */\n        AUTHORIZATION: \"authorization\",\n    },\n};\nfunction isUuid(text) {\n    return /^[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}$/.test(text);\n}\n/**\n * Defines a callback to handle auth challenge for Storage APIs.\n * This implements the bearer challenge process described here: https://learn.microsoft.com/rest/api/storageservices/authorize-with-azure-active-directory#bearer-challenge\n * Handling has specific features for storage that departs to the general AAD challenge docs.\n **/\nconst authorizeRequestOnTenantChallenge = async (challengeOptions) => {\n    var _a;\n    const requestOptions = requestToOptions(challengeOptions.request);\n    const challenge = getChallenge(challengeOptions.response);\n    if (challenge) {\n        const challengeInfo = parseChallenge(challenge);\n        const challengeScopes = buildScopes(challengeOptions, challengeInfo);\n        const tenantId = extractTenantId(challengeInfo);\n        if (!tenantId) {\n            return false;\n        }\n        const accessToken = await challengeOptions.getAccessToken(challengeScopes, Object.assign(Object.assign({}, requestOptions), { tenantId }));\n        if (!accessToken) {\n            return false;\n        }\n        challengeOptions.request.headers.set(Constants.HeaderConstants.AUTHORIZATION, `${(_a = accessToken.tokenType) !== null && _a !== void 0 ? _a : \"Bearer\"} ${accessToken.token}`);\n        return true;\n    }\n    return false;\n};\n/**\n * Extracts the tenant id from the challenge information\n * The tenant id is contained in the authorization_uri as the first\n * path part.\n */\nfunction extractTenantId(challengeInfo) {\n    const parsedAuthUri = new URL(challengeInfo.authorization_uri);\n    const pathSegments = parsedAuthUri.pathname.split(\"/\");\n    const tenantId = pathSegments[1];\n    if (tenantId && isUuid(tenantId)) {\n        return tenantId;\n    }\n    return undefined;\n}\n/**\n * Builds the authentication scopes based on the information that comes in the\n * challenge information. Scopes url is present in the resource_id, if it is empty\n * we keep using the original scopes.\n */\nfunction buildScopes(challengeOptions, challengeInfo) {\n    if (!challengeInfo.resource_id) {\n        return challengeOptions.scopes;\n    }\n    const challengeScopes = new URL(challengeInfo.resource_id);\n    challengeScopes.pathname = Constants.DefaultScope;\n    let scope = challengeScopes.toString();\n    if (scope === \"https://disk.azure.com/.default\") {\n        // the extra slash is required by the service\n        scope = \"https://disk.azure.com//.default\";\n    }\n    return [scope];\n}\n/**\n * We will retrieve the challenge only if the response status code was 401,\n * and if the response contained the header \"WWW-Authenticate\" with a non-empty value.\n */\nfunction getChallenge(response) {\n    const challenge = response.headers.get(\"WWW-Authenticate\");\n    if (response.status === 401 && challenge) {\n        return challenge;\n    }\n    return;\n}\n/**\n * Converts: `Bearer a=\"b\" c=\"d\"`.\n * Into: `[ { a: 'b', c: 'd' }]`.\n *\n * @internal\n */\nfunction parseChallenge(challenge) {\n    const bearerChallenge = challenge.slice(\"Bearer \".length);\n    const challengeParts = `${bearerChallenge.trim()} `.split(\" \").filter((x) => x);\n    const keyValuePairs = challengeParts.map((keyValue) => (([key, value]) => ({ [key]: value }))(keyValue.trim().split(\"=\")));\n    // Key-value pairs to plain object:\n    return keyValuePairs.reduce((a, b) => (Object.assign(Object.assign({}, a), b)), {});\n}\n/**\n * Extracts the options form a Pipeline Request for later re-use\n */\nfunction requestToOptions(request) {\n    return {\n        abortSignal: request.abortSignal,\n        requestOptions: {\n            timeout: request.timeout,\n        },\n        tracingOptions: request.tracingOptions,\n    };\n}\n//# sourceMappingURL=authorizeRequestOnTenantChallenge.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtY2xpZW50L2Rpc3QvZXNtL2F1dGhvcml6ZVJlcXVlc3RPblRlbmFudENoYWxsZW5nZS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSx5QkFBeUIsRUFBRSxlQUFlLEVBQUUsZUFBZSxFQUFFLGVBQWUsRUFBRSxlQUFlLEdBQUc7QUFDaEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlIQUFpSCxxQkFBcUIsVUFBVTtBQUNoSjtBQUNBO0FBQ0E7QUFDQSx5RkFBeUYsd0VBQXdFLEVBQUUsa0JBQWtCO0FBQ3JMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxnQkFBZ0I7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4Qix3QkFBd0I7QUFDdEQsaUZBQWlGLGNBQWM7QUFDL0Y7QUFDQSx5RUFBeUUsYUFBYTtBQUN0RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWN0b3J3aWxzb24vRGVza3RvcC9wcm9qZWN0cy9FWlZpei9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtY2xpZW50L2Rpc3QvZXNtL2F1dGhvcml6ZVJlcXVlc3RPblRlbmFudENoYWxsZW5nZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbi8qKlxuICogQSBzZXQgb2YgY29uc3RhbnRzIHVzZWQgaW50ZXJuYWxseSB3aGVuIHByb2Nlc3NpbmcgcmVxdWVzdHMuXG4gKi9cbmNvbnN0IENvbnN0YW50cyA9IHtcbiAgICBEZWZhdWx0U2NvcGU6IFwiLy5kZWZhdWx0XCIsXG4gICAgLyoqXG4gICAgICogRGVmaW5lcyBjb25zdGFudHMgZm9yIHVzZSB3aXRoIEhUVFAgaGVhZGVycy5cbiAgICAgKi9cbiAgICBIZWFkZXJDb25zdGFudHM6IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBBdXRob3JpemF0aW9uIGhlYWRlci5cbiAgICAgICAgICovXG4gICAgICAgIEFVVEhPUklaQVRJT046IFwiYXV0aG9yaXphdGlvblwiLFxuICAgIH0sXG59O1xuZnVuY3Rpb24gaXNVdWlkKHRleHQpIHtcbiAgICByZXR1cm4gL15bMC05YS1mQS1GXXs4fVxcYi1bMC05YS1mQS1GXXs0fVxcYi1bMC05YS1mQS1GXXs0fVxcYi1bMC05YS1mQS1GXXs0fVxcYi1bMC05YS1mQS1GXXsxMn0kLy50ZXN0KHRleHQpO1xufVxuLyoqXG4gKiBEZWZpbmVzIGEgY2FsbGJhY2sgdG8gaGFuZGxlIGF1dGggY2hhbGxlbmdlIGZvciBTdG9yYWdlIEFQSXMuXG4gKiBUaGlzIGltcGxlbWVudHMgdGhlIGJlYXJlciBjaGFsbGVuZ2UgcHJvY2VzcyBkZXNjcmliZWQgaGVyZTogaHR0cHM6Ly9sZWFybi5taWNyb3NvZnQuY29tL3Jlc3QvYXBpL3N0b3JhZ2VzZXJ2aWNlcy9hdXRob3JpemUtd2l0aC1henVyZS1hY3RpdmUtZGlyZWN0b3J5I2JlYXJlci1jaGFsbGVuZ2VcbiAqIEhhbmRsaW5nIGhhcyBzcGVjaWZpYyBmZWF0dXJlcyBmb3Igc3RvcmFnZSB0aGF0IGRlcGFydHMgdG8gdGhlIGdlbmVyYWwgQUFEIGNoYWxsZW5nZSBkb2NzLlxuICoqL1xuZXhwb3J0IGNvbnN0IGF1dGhvcml6ZVJlcXVlc3RPblRlbmFudENoYWxsZW5nZSA9IGFzeW5jIChjaGFsbGVuZ2VPcHRpb25zKSA9PiB7XG4gICAgdmFyIF9hO1xuICAgIGNvbnN0IHJlcXVlc3RPcHRpb25zID0gcmVxdWVzdFRvT3B0aW9ucyhjaGFsbGVuZ2VPcHRpb25zLnJlcXVlc3QpO1xuICAgIGNvbnN0IGNoYWxsZW5nZSA9IGdldENoYWxsZW5nZShjaGFsbGVuZ2VPcHRpb25zLnJlc3BvbnNlKTtcbiAgICBpZiAoY2hhbGxlbmdlKSB7XG4gICAgICAgIGNvbnN0IGNoYWxsZW5nZUluZm8gPSBwYXJzZUNoYWxsZW5nZShjaGFsbGVuZ2UpO1xuICAgICAgICBjb25zdCBjaGFsbGVuZ2VTY29wZXMgPSBidWlsZFNjb3BlcyhjaGFsbGVuZ2VPcHRpb25zLCBjaGFsbGVuZ2VJbmZvKTtcbiAgICAgICAgY29uc3QgdGVuYW50SWQgPSBleHRyYWN0VGVuYW50SWQoY2hhbGxlbmdlSW5mbyk7XG4gICAgICAgIGlmICghdGVuYW50SWQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhY2Nlc3NUb2tlbiA9IGF3YWl0IGNoYWxsZW5nZU9wdGlvbnMuZ2V0QWNjZXNzVG9rZW4oY2hhbGxlbmdlU2NvcGVzLCBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlcXVlc3RPcHRpb25zKSwgeyB0ZW5hbnRJZCB9KSk7XG4gICAgICAgIGlmICghYWNjZXNzVG9rZW4pIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBjaGFsbGVuZ2VPcHRpb25zLnJlcXVlc3QuaGVhZGVycy5zZXQoQ29uc3RhbnRzLkhlYWRlckNvbnN0YW50cy5BVVRIT1JJWkFUSU9OLCBgJHsoX2EgPSBhY2Nlc3NUb2tlbi50b2tlblR5cGUpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFwiQmVhcmVyXCJ9ICR7YWNjZXNzVG9rZW4udG9rZW59YCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59O1xuLyoqXG4gKiBFeHRyYWN0cyB0aGUgdGVuYW50IGlkIGZyb20gdGhlIGNoYWxsZW5nZSBpbmZvcm1hdGlvblxuICogVGhlIHRlbmFudCBpZCBpcyBjb250YWluZWQgaW4gdGhlIGF1dGhvcml6YXRpb25fdXJpIGFzIHRoZSBmaXJzdFxuICogcGF0aCBwYXJ0LlxuICovXG5mdW5jdGlvbiBleHRyYWN0VGVuYW50SWQoY2hhbGxlbmdlSW5mbykge1xuICAgIGNvbnN0IHBhcnNlZEF1dGhVcmkgPSBuZXcgVVJMKGNoYWxsZW5nZUluZm8uYXV0aG9yaXphdGlvbl91cmkpO1xuICAgIGNvbnN0IHBhdGhTZWdtZW50cyA9IHBhcnNlZEF1dGhVcmkucGF0aG5hbWUuc3BsaXQoXCIvXCIpO1xuICAgIGNvbnN0IHRlbmFudElkID0gcGF0aFNlZ21lbnRzWzFdO1xuICAgIGlmICh0ZW5hbnRJZCAmJiBpc1V1aWQodGVuYW50SWQpKSB7XG4gICAgICAgIHJldHVybiB0ZW5hbnRJZDtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cbi8qKlxuICogQnVpbGRzIHRoZSBhdXRoZW50aWNhdGlvbiBzY29wZXMgYmFzZWQgb24gdGhlIGluZm9ybWF0aW9uIHRoYXQgY29tZXMgaW4gdGhlXG4gKiBjaGFsbGVuZ2UgaW5mb3JtYXRpb24uIFNjb3BlcyB1cmwgaXMgcHJlc2VudCBpbiB0aGUgcmVzb3VyY2VfaWQsIGlmIGl0IGlzIGVtcHR5XG4gKiB3ZSBrZWVwIHVzaW5nIHRoZSBvcmlnaW5hbCBzY29wZXMuXG4gKi9cbmZ1bmN0aW9uIGJ1aWxkU2NvcGVzKGNoYWxsZW5nZU9wdGlvbnMsIGNoYWxsZW5nZUluZm8pIHtcbiAgICBpZiAoIWNoYWxsZW5nZUluZm8ucmVzb3VyY2VfaWQpIHtcbiAgICAgICAgcmV0dXJuIGNoYWxsZW5nZU9wdGlvbnMuc2NvcGVzO1xuICAgIH1cbiAgICBjb25zdCBjaGFsbGVuZ2VTY29wZXMgPSBuZXcgVVJMKGNoYWxsZW5nZUluZm8ucmVzb3VyY2VfaWQpO1xuICAgIGNoYWxsZW5nZVNjb3Blcy5wYXRobmFtZSA9IENvbnN0YW50cy5EZWZhdWx0U2NvcGU7XG4gICAgbGV0IHNjb3BlID0gY2hhbGxlbmdlU2NvcGVzLnRvU3RyaW5nKCk7XG4gICAgaWYgKHNjb3BlID09PSBcImh0dHBzOi8vZGlzay5henVyZS5jb20vLmRlZmF1bHRcIikge1xuICAgICAgICAvLyB0aGUgZXh0cmEgc2xhc2ggaXMgcmVxdWlyZWQgYnkgdGhlIHNlcnZpY2VcbiAgICAgICAgc2NvcGUgPSBcImh0dHBzOi8vZGlzay5henVyZS5jb20vLy5kZWZhdWx0XCI7XG4gICAgfVxuICAgIHJldHVybiBbc2NvcGVdO1xufVxuLyoqXG4gKiBXZSB3aWxsIHJldHJpZXZlIHRoZSBjaGFsbGVuZ2Ugb25seSBpZiB0aGUgcmVzcG9uc2Ugc3RhdHVzIGNvZGUgd2FzIDQwMSxcbiAqIGFuZCBpZiB0aGUgcmVzcG9uc2UgY29udGFpbmVkIHRoZSBoZWFkZXIgXCJXV1ctQXV0aGVudGljYXRlXCIgd2l0aCBhIG5vbi1lbXB0eSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gZ2V0Q2hhbGxlbmdlKHJlc3BvbnNlKSB7XG4gICAgY29uc3QgY2hhbGxlbmdlID0gcmVzcG9uc2UuaGVhZGVycy5nZXQoXCJXV1ctQXV0aGVudGljYXRlXCIpO1xuICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDQwMSAmJiBjaGFsbGVuZ2UpIHtcbiAgICAgICAgcmV0dXJuIGNoYWxsZW5nZTtcbiAgICB9XG4gICAgcmV0dXJuO1xufVxuLyoqXG4gKiBDb252ZXJ0czogYEJlYXJlciBhPVwiYlwiIGM9XCJkXCJgLlxuICogSW50bzogYFsgeyBhOiAnYicsIGM6ICdkJyB9XWAuXG4gKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIHBhcnNlQ2hhbGxlbmdlKGNoYWxsZW5nZSkge1xuICAgIGNvbnN0IGJlYXJlckNoYWxsZW5nZSA9IGNoYWxsZW5nZS5zbGljZShcIkJlYXJlciBcIi5sZW5ndGgpO1xuICAgIGNvbnN0IGNoYWxsZW5nZVBhcnRzID0gYCR7YmVhcmVyQ2hhbGxlbmdlLnRyaW0oKX0gYC5zcGxpdChcIiBcIikuZmlsdGVyKCh4KSA9PiB4KTtcbiAgICBjb25zdCBrZXlWYWx1ZVBhaXJzID0gY2hhbGxlbmdlUGFydHMubWFwKChrZXlWYWx1ZSkgPT4gKChba2V5LCB2YWx1ZV0pID0+ICh7IFtrZXldOiB2YWx1ZSB9KSkoa2V5VmFsdWUudHJpbSgpLnNwbGl0KFwiPVwiKSkpO1xuICAgIC8vIEtleS12YWx1ZSBwYWlycyB0byBwbGFpbiBvYmplY3Q6XG4gICAgcmV0dXJuIGtleVZhbHVlUGFpcnMucmVkdWNlKChhLCBiKSA9PiAoT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBhKSwgYikpLCB7fSk7XG59XG4vKipcbiAqIEV4dHJhY3RzIHRoZSBvcHRpb25zIGZvcm0gYSBQaXBlbGluZSBSZXF1ZXN0IGZvciBsYXRlciByZS11c2VcbiAqL1xuZnVuY3Rpb24gcmVxdWVzdFRvT3B0aW9ucyhyZXF1ZXN0KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYWJvcnRTaWduYWw6IHJlcXVlc3QuYWJvcnRTaWduYWwsXG4gICAgICAgIHJlcXVlc3RPcHRpb25zOiB7XG4gICAgICAgICAgICB0aW1lb3V0OiByZXF1ZXN0LnRpbWVvdXQsXG4gICAgICAgIH0sXG4gICAgICAgIHRyYWNpbmdPcHRpb25zOiByZXF1ZXN0LnRyYWNpbmdPcHRpb25zLFxuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hdXRob3JpemVSZXF1ZXN0T25UZW5hbnRDaGFsbGVuZ2UuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-client/dist/esm/authorizeRequestOnTenantChallenge.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-client/dist/esm/base64.js":
/*!************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/esm/base64.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decodeString: () => (/* binding */ decodeString),\n/* harmony export */   decodeStringToString: () => (/* binding */ decodeStringToString),\n/* harmony export */   encodeByteArray: () => (/* binding */ encodeByteArray),\n/* harmony export */   encodeString: () => (/* binding */ encodeString)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * Encodes a string in base64 format.\n * @param value - the string to encode\n * @internal\n */\nfunction encodeString(value) {\n    return Buffer.from(value).toString(\"base64\");\n}\n/**\n * Encodes a byte array in base64 format.\n * @param value - the Uint8Aray to encode\n * @internal\n */\nfunction encodeByteArray(value) {\n    const bufferValue = value instanceof Buffer ? value : Buffer.from(value.buffer);\n    return bufferValue.toString(\"base64\");\n}\n/**\n * Decodes a base64 string into a byte array.\n * @param value - the base64 string to decode\n * @internal\n */\nfunction decodeString(value) {\n    return Buffer.from(value, \"base64\");\n}\n/**\n * Decodes a base64 string into a string.\n * @param value - the base64 string to decode\n * @internal\n */\nfunction decodeStringToString(value) {\n    return Buffer.from(value, \"base64\").toString();\n}\n//# sourceMappingURL=base64.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtY2xpZW50L2Rpc3QvZXNtL2Jhc2U2NC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvdmljdG9yd2lsc29uL0Rlc2t0b3AvcHJvamVjdHMvRVpWaXovbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLWNsaWVudC9kaXN0L2VzbS9iYXNlNjQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4vKipcbiAqIEVuY29kZXMgYSBzdHJpbmcgaW4gYmFzZTY0IGZvcm1hdC5cbiAqIEBwYXJhbSB2YWx1ZSAtIHRoZSBzdHJpbmcgdG8gZW5jb2RlXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVuY29kZVN0cmluZyh2YWx1ZSkge1xuICAgIHJldHVybiBCdWZmZXIuZnJvbSh2YWx1ZSkudG9TdHJpbmcoXCJiYXNlNjRcIik7XG59XG4vKipcbiAqIEVuY29kZXMgYSBieXRlIGFycmF5IGluIGJhc2U2NCBmb3JtYXQuXG4gKiBAcGFyYW0gdmFsdWUgLSB0aGUgVWludDhBcmF5IHRvIGVuY29kZVxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlbmNvZGVCeXRlQXJyYXkodmFsdWUpIHtcbiAgICBjb25zdCBidWZmZXJWYWx1ZSA9IHZhbHVlIGluc3RhbmNlb2YgQnVmZmVyID8gdmFsdWUgOiBCdWZmZXIuZnJvbSh2YWx1ZS5idWZmZXIpO1xuICAgIHJldHVybiBidWZmZXJWYWx1ZS50b1N0cmluZyhcImJhc2U2NFwiKTtcbn1cbi8qKlxuICogRGVjb2RlcyBhIGJhc2U2NCBzdHJpbmcgaW50byBhIGJ5dGUgYXJyYXkuXG4gKiBAcGFyYW0gdmFsdWUgLSB0aGUgYmFzZTY0IHN0cmluZyB0byBkZWNvZGVcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlU3RyaW5nKHZhbHVlKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKHZhbHVlLCBcImJhc2U2NFwiKTtcbn1cbi8qKlxuICogRGVjb2RlcyBhIGJhc2U2NCBzdHJpbmcgaW50byBhIHN0cmluZy5cbiAqIEBwYXJhbSB2YWx1ZSAtIHRoZSBiYXNlNjQgc3RyaW5nIHRvIGRlY29kZVxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGVTdHJpbmdUb1N0cmluZyh2YWx1ZSkge1xuICAgIHJldHVybiBCdWZmZXIuZnJvbSh2YWx1ZSwgXCJiYXNlNjRcIikudG9TdHJpbmcoKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJhc2U2NC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-client/dist/esm/base64.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-client/dist/esm/deserializationPolicy.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/esm/deserializationPolicy.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   deserializationPolicy: () => (/* binding */ deserializationPolicy),\n/* harmony export */   deserializationPolicyName: () => (/* binding */ deserializationPolicyName)\n/* harmony export */ });\n/* harmony import */ var _interfaces_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./interfaces.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/interfaces.js\");\n/* harmony import */ var _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/core-rest-pipeline */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/index.js\");\n/* harmony import */ var _serializer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./serializer.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/serializer.js\");\n/* harmony import */ var _operationHelpers_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operationHelpers.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/operationHelpers.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n\nconst defaultJsonContentTypes = [\"application/json\", \"text/json\"];\nconst defaultXmlContentTypes = [\"application/xml\", \"application/atom+xml\"];\n/**\n * The programmatic identifier of the deserializationPolicy.\n */\nconst deserializationPolicyName = \"deserializationPolicy\";\n/**\n * This policy handles parsing out responses according to OperationSpecs on the request.\n */\nfunction deserializationPolicy(options = {}) {\n    var _a, _b, _c, _d, _e, _f, _g;\n    const jsonContentTypes = (_b = (_a = options.expectedContentTypes) === null || _a === void 0 ? void 0 : _a.json) !== null && _b !== void 0 ? _b : defaultJsonContentTypes;\n    const xmlContentTypes = (_d = (_c = options.expectedContentTypes) === null || _c === void 0 ? void 0 : _c.xml) !== null && _d !== void 0 ? _d : defaultXmlContentTypes;\n    const parseXML = options.parseXML;\n    const serializerOptions = options.serializerOptions;\n    const updatedOptions = {\n        xml: {\n            rootName: (_e = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.rootName) !== null && _e !== void 0 ? _e : \"\",\n            includeRoot: (_f = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.includeRoot) !== null && _f !== void 0 ? _f : false,\n            xmlCharKey: (_g = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.xmlCharKey) !== null && _g !== void 0 ? _g : _interfaces_js__WEBPACK_IMPORTED_MODULE_0__.XML_CHARKEY,\n        },\n    };\n    return {\n        name: deserializationPolicyName,\n        async sendRequest(request, next) {\n            const response = await next(request);\n            return deserializeResponseBody(jsonContentTypes, xmlContentTypes, response, updatedOptions, parseXML);\n        },\n    };\n}\nfunction getOperationResponseMap(parsedResponse) {\n    let result;\n    const request = parsedResponse.request;\n    const operationInfo = (0,_operationHelpers_js__WEBPACK_IMPORTED_MODULE_3__.getOperationRequestInfo)(request);\n    const operationSpec = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationSpec;\n    if (operationSpec) {\n        if (!(operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationResponseGetter)) {\n            result = operationSpec.responses[parsedResponse.status];\n        }\n        else {\n            result = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationResponseGetter(operationSpec, parsedResponse);\n        }\n    }\n    return result;\n}\nfunction shouldDeserializeResponse(parsedResponse) {\n    const request = parsedResponse.request;\n    const operationInfo = (0,_operationHelpers_js__WEBPACK_IMPORTED_MODULE_3__.getOperationRequestInfo)(request);\n    const shouldDeserialize = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.shouldDeserialize;\n    let result;\n    if (shouldDeserialize === undefined) {\n        result = true;\n    }\n    else if (typeof shouldDeserialize === \"boolean\") {\n        result = shouldDeserialize;\n    }\n    else {\n        result = shouldDeserialize(parsedResponse);\n    }\n    return result;\n}\nasync function deserializeResponseBody(jsonContentTypes, xmlContentTypes, response, options, parseXML) {\n    const parsedResponse = await parse(jsonContentTypes, xmlContentTypes, response, options, parseXML);\n    if (!shouldDeserializeResponse(parsedResponse)) {\n        return parsedResponse;\n    }\n    const operationInfo = (0,_operationHelpers_js__WEBPACK_IMPORTED_MODULE_3__.getOperationRequestInfo)(parsedResponse.request);\n    const operationSpec = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationSpec;\n    if (!operationSpec || !operationSpec.responses) {\n        return parsedResponse;\n    }\n    const responseSpec = getOperationResponseMap(parsedResponse);\n    const { error, shouldReturnResponse } = handleErrorResponse(parsedResponse, operationSpec, responseSpec, options);\n    if (error) {\n        throw error;\n    }\n    else if (shouldReturnResponse) {\n        return parsedResponse;\n    }\n    // An operation response spec does exist for current status code, so\n    // use it to deserialize the response.\n    if (responseSpec) {\n        if (responseSpec.bodyMapper) {\n            let valueToDeserialize = parsedResponse.parsedBody;\n            if (operationSpec.isXML && responseSpec.bodyMapper.type.name === _serializer_js__WEBPACK_IMPORTED_MODULE_2__.MapperTypeNames.Sequence) {\n                valueToDeserialize =\n                    typeof valueToDeserialize === \"object\"\n                        ? valueToDeserialize[responseSpec.bodyMapper.xmlElementName]\n                        : [];\n            }\n            try {\n                parsedResponse.parsedBody = operationSpec.serializer.deserialize(responseSpec.bodyMapper, valueToDeserialize, \"operationRes.parsedBody\", options);\n            }\n            catch (deserializeError) {\n                const restError = new _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_1__.RestError(`Error ${deserializeError} occurred in deserializing the responseBody - ${parsedResponse.bodyAsText}`, {\n                    statusCode: parsedResponse.status,\n                    request: parsedResponse.request,\n                    response: parsedResponse,\n                });\n                throw restError;\n            }\n        }\n        else if (operationSpec.httpMethod === \"HEAD\") {\n            // head methods never have a body, but we return a boolean to indicate presence/absence of the resource\n            parsedResponse.parsedBody = response.status >= 200 && response.status < 300;\n        }\n        if (responseSpec.headersMapper) {\n            parsedResponse.parsedHeaders = operationSpec.serializer.deserialize(responseSpec.headersMapper, parsedResponse.headers.toJSON(), \"operationRes.parsedHeaders\", { xml: {}, ignoreUnknownProperties: true });\n        }\n    }\n    return parsedResponse;\n}\nfunction isOperationSpecEmpty(operationSpec) {\n    const expectedStatusCodes = Object.keys(operationSpec.responses);\n    return (expectedStatusCodes.length === 0 ||\n        (expectedStatusCodes.length === 1 && expectedStatusCodes[0] === \"default\"));\n}\nfunction handleErrorResponse(parsedResponse, operationSpec, responseSpec, options) {\n    var _a, _b, _c, _d, _e;\n    const isSuccessByStatus = 200 <= parsedResponse.status && parsedResponse.status < 300;\n    const isExpectedStatusCode = isOperationSpecEmpty(operationSpec)\n        ? isSuccessByStatus\n        : !!responseSpec;\n    if (isExpectedStatusCode) {\n        if (responseSpec) {\n            if (!responseSpec.isError) {\n                return { error: null, shouldReturnResponse: false };\n            }\n        }\n        else {\n            return { error: null, shouldReturnResponse: false };\n        }\n    }\n    const errorResponseSpec = responseSpec !== null && responseSpec !== void 0 ? responseSpec : operationSpec.responses.default;\n    const initialErrorMessage = ((_a = parsedResponse.request.streamResponseStatusCodes) === null || _a === void 0 ? void 0 : _a.has(parsedResponse.status))\n        ? `Unexpected status code: ${parsedResponse.status}`\n        : parsedResponse.bodyAsText;\n    const error = new _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_1__.RestError(initialErrorMessage, {\n        statusCode: parsedResponse.status,\n        request: parsedResponse.request,\n        response: parsedResponse,\n    });\n    // If the item failed but there's no error spec or default spec to deserialize the error,\n    // and the parsed body doesn't look like an error object,\n    // we should fail so we just throw the parsed response\n    if (!errorResponseSpec &&\n        !(((_c = (_b = parsedResponse.parsedBody) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.code) && ((_e = (_d = parsedResponse.parsedBody) === null || _d === void 0 ? void 0 : _d.error) === null || _e === void 0 ? void 0 : _e.message))) {\n        throw error;\n    }\n    const defaultBodyMapper = errorResponseSpec === null || errorResponseSpec === void 0 ? void 0 : errorResponseSpec.bodyMapper;\n    const defaultHeadersMapper = errorResponseSpec === null || errorResponseSpec === void 0 ? void 0 : errorResponseSpec.headersMapper;\n    try {\n        // If error response has a body, try to deserialize it using default body mapper.\n        // Then try to extract error code & message from it\n        if (parsedResponse.parsedBody) {\n            const parsedBody = parsedResponse.parsedBody;\n            let deserializedError;\n            if (defaultBodyMapper) {\n                let valueToDeserialize = parsedBody;\n                if (operationSpec.isXML && defaultBodyMapper.type.name === _serializer_js__WEBPACK_IMPORTED_MODULE_2__.MapperTypeNames.Sequence) {\n                    valueToDeserialize = [];\n                    const elementName = defaultBodyMapper.xmlElementName;\n                    if (typeof parsedBody === \"object\" && elementName) {\n                        valueToDeserialize = parsedBody[elementName];\n                    }\n                }\n                deserializedError = operationSpec.serializer.deserialize(defaultBodyMapper, valueToDeserialize, \"error.response.parsedBody\", options);\n            }\n            const internalError = parsedBody.error || deserializedError || parsedBody;\n            error.code = internalError.code;\n            if (internalError.message) {\n                error.message = internalError.message;\n            }\n            if (defaultBodyMapper) {\n                error.response.parsedBody = deserializedError;\n            }\n        }\n        // If error response has headers, try to deserialize it using default header mapper\n        if (parsedResponse.headers && defaultHeadersMapper) {\n            error.response.parsedHeaders =\n                operationSpec.serializer.deserialize(defaultHeadersMapper, parsedResponse.headers.toJSON(), \"operationRes.parsedHeaders\");\n        }\n    }\n    catch (defaultError) {\n        error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody - \"${parsedResponse.bodyAsText}\" for the default response.`;\n    }\n    return { error, shouldReturnResponse: false };\n}\nasync function parse(jsonContentTypes, xmlContentTypes, operationResponse, opts, parseXML) {\n    var _a;\n    if (!((_a = operationResponse.request.streamResponseStatusCodes) === null || _a === void 0 ? void 0 : _a.has(operationResponse.status)) &&\n        operationResponse.bodyAsText) {\n        const text = operationResponse.bodyAsText;\n        const contentType = operationResponse.headers.get(\"Content-Type\") || \"\";\n        const contentComponents = !contentType\n            ? []\n            : contentType.split(\";\").map((component) => component.toLowerCase());\n        try {\n            if (contentComponents.length === 0 ||\n                contentComponents.some((component) => jsonContentTypes.indexOf(component) !== -1)) {\n                operationResponse.parsedBody = JSON.parse(text);\n                return operationResponse;\n            }\n            else if (contentComponents.some((component) => xmlContentTypes.indexOf(component) !== -1)) {\n                if (!parseXML) {\n                    throw new Error(\"Parsing XML not supported.\");\n                }\n                const body = await parseXML(text, opts.xml);\n                operationResponse.parsedBody = body;\n                return operationResponse;\n            }\n        }\n        catch (err) {\n            const msg = `Error \"${err}\" occurred while parsing the response body - ${operationResponse.bodyAsText}.`;\n            const errCode = err.code || _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_1__.RestError.PARSE_ERROR;\n            const e = new _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_1__.RestError(msg, {\n                code: errCode,\n                statusCode: operationResponse.status,\n                request: operationResponse.request,\n                response: operationResponse,\n            });\n            throw e;\n        }\n    }\n    return operationResponse;\n}\n//# sourceMappingURL=deserializationPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-client/dist/esm/deserializationPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-client/dist/esm/httpClientCache.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/esm/httpClientCache.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getCachedDefaultHttpClient: () => (/* binding */ getCachedDefaultHttpClient)\n/* harmony export */ });\n/* harmony import */ var _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-rest-pipeline */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/index.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nlet cachedHttpClient;\nfunction getCachedDefaultHttpClient() {\n    if (!cachedHttpClient) {\n        cachedHttpClient = (0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__.createDefaultHttpClient)();\n    }\n    return cachedHttpClient;\n}\n//# sourceMappingURL=httpClientCache.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtY2xpZW50L2Rpc3QvZXNtL2h0dHBDbGllbnRDYWNoZS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDb0U7QUFDcEU7QUFDTztBQUNQO0FBQ0EsMkJBQTJCLGtGQUF1QjtBQUNsRDtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcndpbHNvbi9EZXNrdG9wL3Byb2plY3RzL0VaVml6L25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS1jbGllbnQvZGlzdC9lc20vaHR0cENsaWVudENhY2hlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuaW1wb3J0IHsgY3JlYXRlRGVmYXVsdEh0dHBDbGllbnQgfSBmcm9tIFwiQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZVwiO1xubGV0IGNhY2hlZEh0dHBDbGllbnQ7XG5leHBvcnQgZnVuY3Rpb24gZ2V0Q2FjaGVkRGVmYXVsdEh0dHBDbGllbnQoKSB7XG4gICAgaWYgKCFjYWNoZWRIdHRwQ2xpZW50KSB7XG4gICAgICAgIGNhY2hlZEh0dHBDbGllbnQgPSBjcmVhdGVEZWZhdWx0SHR0cENsaWVudCgpO1xuICAgIH1cbiAgICByZXR1cm4gY2FjaGVkSHR0cENsaWVudDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWh0dHBDbGllbnRDYWNoZS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-client/dist/esm/httpClientCache.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-client/dist/esm/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/esm/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MapperTypeNames: () => (/* reexport safe */ _serializer_js__WEBPACK_IMPORTED_MODULE_0__.MapperTypeNames),\n/* harmony export */   ServiceClient: () => (/* reexport safe */ _serviceClient_js__WEBPACK_IMPORTED_MODULE_1__.ServiceClient),\n/* harmony export */   XML_ATTRKEY: () => (/* reexport safe */ _interfaces_js__WEBPACK_IMPORTED_MODULE_3__.XML_ATTRKEY),\n/* harmony export */   XML_CHARKEY: () => (/* reexport safe */ _interfaces_js__WEBPACK_IMPORTED_MODULE_3__.XML_CHARKEY),\n/* harmony export */   authorizeRequestOnClaimChallenge: () => (/* reexport safe */ _authorizeRequestOnClaimChallenge_js__WEBPACK_IMPORTED_MODULE_6__.authorizeRequestOnClaimChallenge),\n/* harmony export */   authorizeRequestOnTenantChallenge: () => (/* reexport safe */ _authorizeRequestOnTenantChallenge_js__WEBPACK_IMPORTED_MODULE_7__.authorizeRequestOnTenantChallenge),\n/* harmony export */   createClientPipeline: () => (/* reexport safe */ _pipeline_js__WEBPACK_IMPORTED_MODULE_2__.createClientPipeline),\n/* harmony export */   createSerializer: () => (/* reexport safe */ _serializer_js__WEBPACK_IMPORTED_MODULE_0__.createSerializer),\n/* harmony export */   deserializationPolicy: () => (/* reexport safe */ _deserializationPolicy_js__WEBPACK_IMPORTED_MODULE_4__.deserializationPolicy),\n/* harmony export */   deserializationPolicyName: () => (/* reexport safe */ _deserializationPolicy_js__WEBPACK_IMPORTED_MODULE_4__.deserializationPolicyName),\n/* harmony export */   serializationPolicy: () => (/* reexport safe */ _serializationPolicy_js__WEBPACK_IMPORTED_MODULE_5__.serializationPolicy),\n/* harmony export */   serializationPolicyName: () => (/* reexport safe */ _serializationPolicy_js__WEBPACK_IMPORTED_MODULE_5__.serializationPolicyName)\n/* harmony export */ });\n/* harmony import */ var _serializer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./serializer.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/serializer.js\");\n/* harmony import */ var _serviceClient_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./serviceClient.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/serviceClient.js\");\n/* harmony import */ var _pipeline_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./pipeline.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/pipeline.js\");\n/* harmony import */ var _interfaces_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./interfaces.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/interfaces.js\");\n/* harmony import */ var _deserializationPolicy_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./deserializationPolicy.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/deserializationPolicy.js\");\n/* harmony import */ var _serializationPolicy_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./serializationPolicy.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/serializationPolicy.js\");\n/* harmony import */ var _authorizeRequestOnClaimChallenge_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./authorizeRequestOnClaimChallenge.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/authorizeRequestOnClaimChallenge.js\");\n/* harmony import */ var _authorizeRequestOnTenantChallenge_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./authorizeRequestOnTenantChallenge.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/authorizeRequestOnTenantChallenge.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n\n\n\n\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtY2xpZW50L2Rpc3QvZXNtL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNvRTtBQUNqQjtBQUNFO0FBQ087QUFDbUM7QUFDTjtBQUNBO0FBQ0U7QUFDM0YiLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWN0b3J3aWxzb24vRGVza3RvcC9wcm9qZWN0cy9FWlZpei9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtY2xpZW50L2Rpc3QvZXNtL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuZXhwb3J0IHsgY3JlYXRlU2VyaWFsaXplciwgTWFwcGVyVHlwZU5hbWVzIH0gZnJvbSBcIi4vc2VyaWFsaXplci5qc1wiO1xuZXhwb3J0IHsgU2VydmljZUNsaWVudCB9IGZyb20gXCIuL3NlcnZpY2VDbGllbnQuanNcIjtcbmV4cG9ydCB7IGNyZWF0ZUNsaWVudFBpcGVsaW5lIH0gZnJvbSBcIi4vcGlwZWxpbmUuanNcIjtcbmV4cG9ydCB7IFhNTF9BVFRSS0VZLCBYTUxfQ0hBUktFWSwgfSBmcm9tIFwiLi9pbnRlcmZhY2VzLmpzXCI7XG5leHBvcnQgeyBkZXNlcmlhbGl6YXRpb25Qb2xpY3ksIGRlc2VyaWFsaXphdGlvblBvbGljeU5hbWUsIH0gZnJvbSBcIi4vZGVzZXJpYWxpemF0aW9uUG9saWN5LmpzXCI7XG5leHBvcnQgeyBzZXJpYWxpemF0aW9uUG9saWN5LCBzZXJpYWxpemF0aW9uUG9saWN5TmFtZSwgfSBmcm9tIFwiLi9zZXJpYWxpemF0aW9uUG9saWN5LmpzXCI7XG5leHBvcnQgeyBhdXRob3JpemVSZXF1ZXN0T25DbGFpbUNoYWxsZW5nZSB9IGZyb20gXCIuL2F1dGhvcml6ZVJlcXVlc3RPbkNsYWltQ2hhbGxlbmdlLmpzXCI7XG5leHBvcnQgeyBhdXRob3JpemVSZXF1ZXN0T25UZW5hbnRDaGFsbGVuZ2UgfSBmcm9tIFwiLi9hdXRob3JpemVSZXF1ZXN0T25UZW5hbnRDaGFsbGVuZ2UuanNcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-client/dist/esm/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-client/dist/esm/interfaceHelpers.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/esm/interfaceHelpers.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getPathStringFromParameter: () => (/* binding */ getPathStringFromParameter),\n/* harmony export */   getStreamingResponseStatusCodes: () => (/* binding */ getStreamingResponseStatusCodes)\n/* harmony export */ });\n/* harmony import */ var _serializer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./serializer.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/serializer.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * Gets the list of status codes for streaming responses.\n * @internal\n */\nfunction getStreamingResponseStatusCodes(operationSpec) {\n    const result = new Set();\n    for (const statusCode in operationSpec.responses) {\n        const operationResponse = operationSpec.responses[statusCode];\n        if (operationResponse.bodyMapper &&\n            operationResponse.bodyMapper.type.name === _serializer_js__WEBPACK_IMPORTED_MODULE_0__.MapperTypeNames.Stream) {\n            result.add(Number(statusCode));\n        }\n    }\n    return result;\n}\n/**\n * Get the path to this parameter's value as a dotted string (a.b.c).\n * @param parameter - The parameter to get the path string for.\n * @returns The path to this parameter's value as a dotted string.\n * @internal\n */\nfunction getPathStringFromParameter(parameter) {\n    const { parameterPath, mapper } = parameter;\n    let result;\n    if (typeof parameterPath === \"string\") {\n        result = parameterPath;\n    }\n    else if (Array.isArray(parameterPath)) {\n        result = parameterPath.join(\".\");\n    }\n    else {\n        result = mapper.serializedName;\n    }\n    return result;\n}\n//# sourceMappingURL=interfaceHelpers.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtY2xpZW50L2Rpc3QvZXNtL2ludGVyZmFjZUhlbHBlcnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNrRDtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1REFBdUQsMkRBQWU7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsWUFBWSx3QkFBd0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWN0b3J3aWxzb24vRGVza3RvcC9wcm9qZWN0cy9FWlZpei9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtY2xpZW50L2Rpc3QvZXNtL2ludGVyZmFjZUhlbHBlcnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5pbXBvcnQgeyBNYXBwZXJUeXBlTmFtZXMgfSBmcm9tIFwiLi9zZXJpYWxpemVyLmpzXCI7XG4vKipcbiAqIEdldHMgdGhlIGxpc3Qgb2Ygc3RhdHVzIGNvZGVzIGZvciBzdHJlYW1pbmcgcmVzcG9uc2VzLlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRTdHJlYW1pbmdSZXNwb25zZVN0YXR1c0NvZGVzKG9wZXJhdGlvblNwZWMpIHtcbiAgICBjb25zdCByZXN1bHQgPSBuZXcgU2V0KCk7XG4gICAgZm9yIChjb25zdCBzdGF0dXNDb2RlIGluIG9wZXJhdGlvblNwZWMucmVzcG9uc2VzKSB7XG4gICAgICAgIGNvbnN0IG9wZXJhdGlvblJlc3BvbnNlID0gb3BlcmF0aW9uU3BlYy5yZXNwb25zZXNbc3RhdHVzQ29kZV07XG4gICAgICAgIGlmIChvcGVyYXRpb25SZXNwb25zZS5ib2R5TWFwcGVyICYmXG4gICAgICAgICAgICBvcGVyYXRpb25SZXNwb25zZS5ib2R5TWFwcGVyLnR5cGUubmFtZSA9PT0gTWFwcGVyVHlwZU5hbWVzLlN0cmVhbSkge1xuICAgICAgICAgICAgcmVzdWx0LmFkZChOdW1iZXIoc3RhdHVzQ29kZSkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG4vKipcbiAqIEdldCB0aGUgcGF0aCB0byB0aGlzIHBhcmFtZXRlcidzIHZhbHVlIGFzIGEgZG90dGVkIHN0cmluZyAoYS5iLmMpLlxuICogQHBhcmFtIHBhcmFtZXRlciAtIFRoZSBwYXJhbWV0ZXIgdG8gZ2V0IHRoZSBwYXRoIHN0cmluZyBmb3IuXG4gKiBAcmV0dXJucyBUaGUgcGF0aCB0byB0aGlzIHBhcmFtZXRlcidzIHZhbHVlIGFzIGEgZG90dGVkIHN0cmluZy5cbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0UGF0aFN0cmluZ0Zyb21QYXJhbWV0ZXIocGFyYW1ldGVyKSB7XG4gICAgY29uc3QgeyBwYXJhbWV0ZXJQYXRoLCBtYXBwZXIgfSA9IHBhcmFtZXRlcjtcbiAgICBsZXQgcmVzdWx0O1xuICAgIGlmICh0eXBlb2YgcGFyYW1ldGVyUGF0aCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXN1bHQgPSBwYXJhbWV0ZXJQYXRoO1xuICAgIH1cbiAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KHBhcmFtZXRlclBhdGgpKSB7XG4gICAgICAgIHJlc3VsdCA9IHBhcmFtZXRlclBhdGguam9pbihcIi5cIik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXN1bHQgPSBtYXBwZXIuc2VyaWFsaXplZE5hbWU7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbnRlcmZhY2VIZWxwZXJzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-client/dist/esm/interfaceHelpers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-client/dist/esm/interfaces.js":
/*!****************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/esm/interfaces.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   XML_ATTRKEY: () => (/* binding */ XML_ATTRKEY),\n/* harmony export */   XML_CHARKEY: () => (/* binding */ XML_CHARKEY)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * Default key used to access the XML attributes.\n */\nconst XML_ATTRKEY = \"$\";\n/**\n * Default key used to access the XML value content.\n */\nconst XML_CHARKEY = \"_\";\n//# sourceMappingURL=interfaces.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtY2xpZW50L2Rpc3QvZXNtL2ludGVyZmFjZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDTztBQUNQIiwic291cmNlcyI6WyIvVXNlcnMvdmljdG9yd2lsc29uL0Rlc2t0b3AvcHJvamVjdHMvRVpWaXovbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLWNsaWVudC9kaXN0L2VzbS9pbnRlcmZhY2VzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuLyoqXG4gKiBEZWZhdWx0IGtleSB1c2VkIHRvIGFjY2VzcyB0aGUgWE1MIGF0dHJpYnV0ZXMuXG4gKi9cbmV4cG9ydCBjb25zdCBYTUxfQVRUUktFWSA9IFwiJFwiO1xuLyoqXG4gKiBEZWZhdWx0IGtleSB1c2VkIHRvIGFjY2VzcyB0aGUgWE1MIHZhbHVlIGNvbnRlbnQuXG4gKi9cbmV4cG9ydCBjb25zdCBYTUxfQ0hBUktFWSA9IFwiX1wiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW50ZXJmYWNlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-client/dist/esm/interfaces.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-client/dist/esm/log.js":
/*!*********************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/esm/log.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   logger: () => (/* binding */ logger)\n/* harmony export */ });\n/* harmony import */ var _azure_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/logger */ \"(rsc)/./node_modules/@azure/logger/dist/esm/index.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nconst logger = (0,_azure_logger__WEBPACK_IMPORTED_MODULE_0__.createClientLogger)(\"core-client\");\n//# sourceMappingURL=log.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtY2xpZW50L2Rpc3QvZXNtL2xvZy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDbUQ7QUFDNUMsZUFBZSxpRUFBa0I7QUFDeEMiLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWN0b3J3aWxzb24vRGVza3RvcC9wcm9qZWN0cy9FWlZpei9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtY2xpZW50L2Rpc3QvZXNtL2xvZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbmltcG9ydCB7IGNyZWF0ZUNsaWVudExvZ2dlciB9IGZyb20gXCJAYXp1cmUvbG9nZ2VyXCI7XG5leHBvcnQgY29uc3QgbG9nZ2VyID0gY3JlYXRlQ2xpZW50TG9nZ2VyKFwiY29yZS1jbGllbnRcIik7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sb2cuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-client/dist/esm/log.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-client/dist/esm/operationHelpers.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/esm/operationHelpers.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getOperationArgumentValueFromParameter: () => (/* binding */ getOperationArgumentValueFromParameter),\n/* harmony export */   getOperationRequestInfo: () => (/* binding */ getOperationRequestInfo)\n/* harmony export */ });\n/* harmony import */ var _state_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./state.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/state.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * @internal\n * Retrieves the value to use for a given operation argument\n * @param operationArguments - The arguments passed from the generated client\n * @param parameter - The parameter description\n * @param fallbackObject - If something isn't found in the arguments bag, look here.\n *  Generally used to look at the service client properties.\n */\nfunction getOperationArgumentValueFromParameter(operationArguments, parameter, fallbackObject) {\n    let parameterPath = parameter.parameterPath;\n    const parameterMapper = parameter.mapper;\n    let value;\n    if (typeof parameterPath === \"string\") {\n        parameterPath = [parameterPath];\n    }\n    if (Array.isArray(parameterPath)) {\n        if (parameterPath.length > 0) {\n            if (parameterMapper.isConstant) {\n                value = parameterMapper.defaultValue;\n            }\n            else {\n                let propertySearchResult = getPropertyFromParameterPath(operationArguments, parameterPath);\n                if (!propertySearchResult.propertyFound && fallbackObject) {\n                    propertySearchResult = getPropertyFromParameterPath(fallbackObject, parameterPath);\n                }\n                let useDefaultValue = false;\n                if (!propertySearchResult.propertyFound) {\n                    useDefaultValue =\n                        parameterMapper.required ||\n                            (parameterPath[0] === \"options\" && parameterPath.length === 2);\n                }\n                value = useDefaultValue ? parameterMapper.defaultValue : propertySearchResult.propertyValue;\n            }\n        }\n    }\n    else {\n        if (parameterMapper.required) {\n            value = {};\n        }\n        for (const propertyName in parameterPath) {\n            const propertyMapper = parameterMapper.type.modelProperties[propertyName];\n            const propertyPath = parameterPath[propertyName];\n            const propertyValue = getOperationArgumentValueFromParameter(operationArguments, {\n                parameterPath: propertyPath,\n                mapper: propertyMapper,\n            }, fallbackObject);\n            if (propertyValue !== undefined) {\n                if (!value) {\n                    value = {};\n                }\n                value[propertyName] = propertyValue;\n            }\n        }\n    }\n    return value;\n}\nfunction getPropertyFromParameterPath(parent, parameterPath) {\n    const result = { propertyFound: false };\n    let i = 0;\n    for (; i < parameterPath.length; ++i) {\n        const parameterPathPart = parameterPath[i];\n        // Make sure to check inherited properties too, so don't use hasOwnProperty().\n        if (parent && parameterPathPart in parent) {\n            parent = parent[parameterPathPart];\n        }\n        else {\n            break;\n        }\n    }\n    if (i === parameterPath.length) {\n        result.propertyValue = parent;\n        result.propertyFound = true;\n    }\n    return result;\n}\nconst originalRequestSymbol = Symbol.for(\"@azure/core-client original request\");\nfunction hasOriginalRequest(request) {\n    return originalRequestSymbol in request;\n}\nfunction getOperationRequestInfo(request) {\n    if (hasOriginalRequest(request)) {\n        return getOperationRequestInfo(request[originalRequestSymbol]);\n    }\n    let info = _state_js__WEBPACK_IMPORTED_MODULE_0__.state.operationRequestMap.get(request);\n    if (!info) {\n        info = {};\n        _state_js__WEBPACK_IMPORTED_MODULE_0__.state.operationRequestMap.set(request, info);\n    }\n    return info;\n}\n//# sourceMappingURL=operationHelpers.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtY2xpZW50L2Rpc3QvZXNtL29wZXJhdGlvbkhlbHBlcnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNtQztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBLFdBQVcsMEJBQTBCO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQSxlQUFlLDRDQUFLO0FBQ3BCO0FBQ0E7QUFDQSxRQUFRLDRDQUFLO0FBQ2I7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWN0b3J3aWxzb24vRGVza3RvcC9wcm9qZWN0cy9FWlZpei9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtY2xpZW50L2Rpc3QvZXNtL29wZXJhdGlvbkhlbHBlcnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5pbXBvcnQgeyBzdGF0ZSB9IGZyb20gXCIuL3N0YXRlLmpzXCI7XG4vKipcbiAqIEBpbnRlcm5hbFxuICogUmV0cmlldmVzIHRoZSB2YWx1ZSB0byB1c2UgZm9yIGEgZ2l2ZW4gb3BlcmF0aW9uIGFyZ3VtZW50XG4gKiBAcGFyYW0gb3BlcmF0aW9uQXJndW1lbnRzIC0gVGhlIGFyZ3VtZW50cyBwYXNzZWQgZnJvbSB0aGUgZ2VuZXJhdGVkIGNsaWVudFxuICogQHBhcmFtIHBhcmFtZXRlciAtIFRoZSBwYXJhbWV0ZXIgZGVzY3JpcHRpb25cbiAqIEBwYXJhbSBmYWxsYmFja09iamVjdCAtIElmIHNvbWV0aGluZyBpc24ndCBmb3VuZCBpbiB0aGUgYXJndW1lbnRzIGJhZywgbG9vayBoZXJlLlxuICogIEdlbmVyYWxseSB1c2VkIHRvIGxvb2sgYXQgdGhlIHNlcnZpY2UgY2xpZW50IHByb3BlcnRpZXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRPcGVyYXRpb25Bcmd1bWVudFZhbHVlRnJvbVBhcmFtZXRlcihvcGVyYXRpb25Bcmd1bWVudHMsIHBhcmFtZXRlciwgZmFsbGJhY2tPYmplY3QpIHtcbiAgICBsZXQgcGFyYW1ldGVyUGF0aCA9IHBhcmFtZXRlci5wYXJhbWV0ZXJQYXRoO1xuICAgIGNvbnN0IHBhcmFtZXRlck1hcHBlciA9IHBhcmFtZXRlci5tYXBwZXI7XG4gICAgbGV0IHZhbHVlO1xuICAgIGlmICh0eXBlb2YgcGFyYW1ldGVyUGF0aCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBwYXJhbWV0ZXJQYXRoID0gW3BhcmFtZXRlclBhdGhdO1xuICAgIH1cbiAgICBpZiAoQXJyYXkuaXNBcnJheShwYXJhbWV0ZXJQYXRoKSkge1xuICAgICAgICBpZiAocGFyYW1ldGVyUGF0aC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBpZiAocGFyYW1ldGVyTWFwcGVyLmlzQ29uc3RhbnQpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHBhcmFtZXRlck1hcHBlci5kZWZhdWx0VmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBsZXQgcHJvcGVydHlTZWFyY2hSZXN1bHQgPSBnZXRQcm9wZXJ0eUZyb21QYXJhbWV0ZXJQYXRoKG9wZXJhdGlvbkFyZ3VtZW50cywgcGFyYW1ldGVyUGF0aCk7XG4gICAgICAgICAgICAgICAgaWYgKCFwcm9wZXJ0eVNlYXJjaFJlc3VsdC5wcm9wZXJ0eUZvdW5kICYmIGZhbGxiYWNrT2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIHByb3BlcnR5U2VhcmNoUmVzdWx0ID0gZ2V0UHJvcGVydHlGcm9tUGFyYW1ldGVyUGF0aChmYWxsYmFja09iamVjdCwgcGFyYW1ldGVyUGF0aCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxldCB1c2VEZWZhdWx0VmFsdWUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBpZiAoIXByb3BlcnR5U2VhcmNoUmVzdWx0LnByb3BlcnR5Rm91bmQpIHtcbiAgICAgICAgICAgICAgICAgICAgdXNlRGVmYXVsdFZhbHVlID1cbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtZXRlck1hcHBlci5yZXF1aXJlZCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChwYXJhbWV0ZXJQYXRoWzBdID09PSBcIm9wdGlvbnNcIiAmJiBwYXJhbWV0ZXJQYXRoLmxlbmd0aCA9PT0gMik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhbHVlID0gdXNlRGVmYXVsdFZhbHVlID8gcGFyYW1ldGVyTWFwcGVyLmRlZmF1bHRWYWx1ZSA6IHByb3BlcnR5U2VhcmNoUmVzdWx0LnByb3BlcnR5VmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGlmIChwYXJhbWV0ZXJNYXBwZXIucmVxdWlyZWQpIHtcbiAgICAgICAgICAgIHZhbHVlID0ge307XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBwcm9wZXJ0eU5hbWUgaW4gcGFyYW1ldGVyUGF0aCkge1xuICAgICAgICAgICAgY29uc3QgcHJvcGVydHlNYXBwZXIgPSBwYXJhbWV0ZXJNYXBwZXIudHlwZS5tb2RlbFByb3BlcnRpZXNbcHJvcGVydHlOYW1lXTtcbiAgICAgICAgICAgIGNvbnN0IHByb3BlcnR5UGF0aCA9IHBhcmFtZXRlclBhdGhbcHJvcGVydHlOYW1lXTtcbiAgICAgICAgICAgIGNvbnN0IHByb3BlcnR5VmFsdWUgPSBnZXRPcGVyYXRpb25Bcmd1bWVudFZhbHVlRnJvbVBhcmFtZXRlcihvcGVyYXRpb25Bcmd1bWVudHMsIHtcbiAgICAgICAgICAgICAgICBwYXJhbWV0ZXJQYXRoOiBwcm9wZXJ0eVBhdGgsXG4gICAgICAgICAgICAgICAgbWFwcGVyOiBwcm9wZXJ0eU1hcHBlcixcbiAgICAgICAgICAgIH0sIGZhbGxiYWNrT2JqZWN0KTtcbiAgICAgICAgICAgIGlmIChwcm9wZXJ0eVZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0ge307XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhbHVlW3Byb3BlcnR5TmFtZV0gPSBwcm9wZXJ0eVZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIGdldFByb3BlcnR5RnJvbVBhcmFtZXRlclBhdGgocGFyZW50LCBwYXJhbWV0ZXJQYXRoKSB7XG4gICAgY29uc3QgcmVzdWx0ID0geyBwcm9wZXJ0eUZvdW5kOiBmYWxzZSB9O1xuICAgIGxldCBpID0gMDtcbiAgICBmb3IgKDsgaSA8IHBhcmFtZXRlclBhdGgubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgY29uc3QgcGFyYW1ldGVyUGF0aFBhcnQgPSBwYXJhbWV0ZXJQYXRoW2ldO1xuICAgICAgICAvLyBNYWtlIHN1cmUgdG8gY2hlY2sgaW5oZXJpdGVkIHByb3BlcnRpZXMgdG9vLCBzbyBkb24ndCB1c2UgaGFzT3duUHJvcGVydHkoKS5cbiAgICAgICAgaWYgKHBhcmVudCAmJiBwYXJhbWV0ZXJQYXRoUGFydCBpbiBwYXJlbnQpIHtcbiAgICAgICAgICAgIHBhcmVudCA9IHBhcmVudFtwYXJhbWV0ZXJQYXRoUGFydF07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoaSA9PT0gcGFyYW1ldGVyUGF0aC5sZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0LnByb3BlcnR5VmFsdWUgPSBwYXJlbnQ7XG4gICAgICAgIHJlc3VsdC5wcm9wZXJ0eUZvdW5kID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmNvbnN0IG9yaWdpbmFsUmVxdWVzdFN5bWJvbCA9IFN5bWJvbC5mb3IoXCJAYXp1cmUvY29yZS1jbGllbnQgb3JpZ2luYWwgcmVxdWVzdFwiKTtcbmZ1bmN0aW9uIGhhc09yaWdpbmFsUmVxdWVzdChyZXF1ZXN0KSB7XG4gICAgcmV0dXJuIG9yaWdpbmFsUmVxdWVzdFN5bWJvbCBpbiByZXF1ZXN0O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldE9wZXJhdGlvblJlcXVlc3RJbmZvKHJlcXVlc3QpIHtcbiAgICBpZiAoaGFzT3JpZ2luYWxSZXF1ZXN0KHJlcXVlc3QpKSB7XG4gICAgICAgIHJldHVybiBnZXRPcGVyYXRpb25SZXF1ZXN0SW5mbyhyZXF1ZXN0W29yaWdpbmFsUmVxdWVzdFN5bWJvbF0pO1xuICAgIH1cbiAgICBsZXQgaW5mbyA9IHN0YXRlLm9wZXJhdGlvblJlcXVlc3RNYXAuZ2V0KHJlcXVlc3QpO1xuICAgIGlmICghaW5mbykge1xuICAgICAgICBpbmZvID0ge307XG4gICAgICAgIHN0YXRlLm9wZXJhdGlvblJlcXVlc3RNYXAuc2V0KHJlcXVlc3QsIGluZm8pO1xuICAgIH1cbiAgICByZXR1cm4gaW5mbztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9wZXJhdGlvbkhlbHBlcnMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-client/dist/esm/operationHelpers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-client/dist/esm/pipeline.js":
/*!**************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/esm/pipeline.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createClientPipeline: () => (/* binding */ createClientPipeline)\n/* harmony export */ });\n/* harmony import */ var _deserializationPolicy_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./deserializationPolicy.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/deserializationPolicy.js\");\n/* harmony import */ var _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/core-rest-pipeline */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/index.js\");\n/* harmony import */ var _serializationPolicy_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./serializationPolicy.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/serializationPolicy.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n/**\n * Creates a new Pipeline for use with a Service Client.\n * Adds in deserializationPolicy by default.\n * Also adds in bearerTokenAuthenticationPolicy if passed a TokenCredential.\n * @param options - Options to customize the created pipeline.\n */\nfunction createClientPipeline(options = {}) {\n    const pipeline = (0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_1__.createPipelineFromOptions)(options !== null && options !== void 0 ? options : {});\n    if (options.credentialOptions) {\n        pipeline.addPolicy((0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_1__.bearerTokenAuthenticationPolicy)({\n            credential: options.credentialOptions.credential,\n            scopes: options.credentialOptions.credentialScopes,\n        }));\n    }\n    pipeline.addPolicy((0,_serializationPolicy_js__WEBPACK_IMPORTED_MODULE_2__.serializationPolicy)(options.serializationOptions), { phase: \"Serialize\" });\n    pipeline.addPolicy((0,_deserializationPolicy_js__WEBPACK_IMPORTED_MODULE_0__.deserializationPolicy)(options.deserializationOptions), {\n        phase: \"Deserialize\",\n    });\n    return pipeline;\n}\n//# sourceMappingURL=pipeline.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtY2xpZW50L2Rpc3QvZXNtL3BpcGVsaW5lLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBO0FBQ21FO0FBQ3FDO0FBQ3pDO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLDBDQUEwQztBQUNqRCxxQkFBcUIsb0ZBQXlCLHNEQUFzRDtBQUNwRztBQUNBLDJCQUEyQiwwRkFBK0I7QUFDMUQ7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLHVCQUF1Qiw0RUFBbUIsa0NBQWtDLG9CQUFvQjtBQUNoRyx1QkFBdUIsZ0ZBQXFCO0FBQzVDO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcndpbHNvbi9EZXNrdG9wL3Byb2plY3RzL0VaVml6L25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS1jbGllbnQvZGlzdC9lc20vcGlwZWxpbmUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5pbXBvcnQgeyBkZXNlcmlhbGl6YXRpb25Qb2xpY3kgfSBmcm9tIFwiLi9kZXNlcmlhbGl6YXRpb25Qb2xpY3kuanNcIjtcbmltcG9ydCB7IGJlYXJlclRva2VuQXV0aGVudGljYXRpb25Qb2xpY3ksIGNyZWF0ZVBpcGVsaW5lRnJvbU9wdGlvbnMsIH0gZnJvbSBcIkBhenVyZS9jb3JlLXJlc3QtcGlwZWxpbmVcIjtcbmltcG9ydCB7IHNlcmlhbGl6YXRpb25Qb2xpY3kgfSBmcm9tIFwiLi9zZXJpYWxpemF0aW9uUG9saWN5LmpzXCI7XG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgUGlwZWxpbmUgZm9yIHVzZSB3aXRoIGEgU2VydmljZSBDbGllbnQuXG4gKiBBZGRzIGluIGRlc2VyaWFsaXphdGlvblBvbGljeSBieSBkZWZhdWx0LlxuICogQWxzbyBhZGRzIGluIGJlYXJlclRva2VuQXV0aGVudGljYXRpb25Qb2xpY3kgaWYgcGFzc2VkIGEgVG9rZW5DcmVkZW50aWFsLlxuICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25zIHRvIGN1c3RvbWl6ZSB0aGUgY3JlYXRlZCBwaXBlbGluZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNsaWVudFBpcGVsaW5lKG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHBpcGVsaW5lID0gY3JlYXRlUGlwZWxpbmVGcm9tT3B0aW9ucyhvcHRpb25zICE9PSBudWxsICYmIG9wdGlvbnMgIT09IHZvaWQgMCA/IG9wdGlvbnMgOiB7fSk7XG4gICAgaWYgKG9wdGlvbnMuY3JlZGVudGlhbE9wdGlvbnMpIHtcbiAgICAgICAgcGlwZWxpbmUuYWRkUG9saWN5KGJlYXJlclRva2VuQXV0aGVudGljYXRpb25Qb2xpY3koe1xuICAgICAgICAgICAgY3JlZGVudGlhbDogb3B0aW9ucy5jcmVkZW50aWFsT3B0aW9ucy5jcmVkZW50aWFsLFxuICAgICAgICAgICAgc2NvcGVzOiBvcHRpb25zLmNyZWRlbnRpYWxPcHRpb25zLmNyZWRlbnRpYWxTY29wZXMsXG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgcGlwZWxpbmUuYWRkUG9saWN5KHNlcmlhbGl6YXRpb25Qb2xpY3kob3B0aW9ucy5zZXJpYWxpemF0aW9uT3B0aW9ucyksIHsgcGhhc2U6IFwiU2VyaWFsaXplXCIgfSk7XG4gICAgcGlwZWxpbmUuYWRkUG9saWN5KGRlc2VyaWFsaXphdGlvblBvbGljeShvcHRpb25zLmRlc2VyaWFsaXphdGlvbk9wdGlvbnMpLCB7XG4gICAgICAgIHBoYXNlOiBcIkRlc2VyaWFsaXplXCIsXG4gICAgfSk7XG4gICAgcmV0dXJuIHBpcGVsaW5lO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGlwZWxpbmUuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-client/dist/esm/pipeline.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-client/dist/esm/serializationPolicy.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/esm/serializationPolicy.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   serializationPolicy: () => (/* binding */ serializationPolicy),\n/* harmony export */   serializationPolicyName: () => (/* binding */ serializationPolicyName),\n/* harmony export */   serializeHeaders: () => (/* binding */ serializeHeaders),\n/* harmony export */   serializeRequestBody: () => (/* binding */ serializeRequestBody)\n/* harmony export */ });\n/* harmony import */ var _interfaces_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./interfaces.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/interfaces.js\");\n/* harmony import */ var _operationHelpers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./operationHelpers.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/operationHelpers.js\");\n/* harmony import */ var _serializer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./serializer.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/serializer.js\");\n/* harmony import */ var _interfaceHelpers_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./interfaceHelpers.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/interfaceHelpers.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n\n/**\n * The programmatic identifier of the serializationPolicy.\n */\nconst serializationPolicyName = \"serializationPolicy\";\n/**\n * This policy handles assembling the request body and headers using\n * an OperationSpec and OperationArguments on the request.\n */\nfunction serializationPolicy(options = {}) {\n    const stringifyXML = options.stringifyXML;\n    return {\n        name: serializationPolicyName,\n        async sendRequest(request, next) {\n            const operationInfo = (0,_operationHelpers_js__WEBPACK_IMPORTED_MODULE_1__.getOperationRequestInfo)(request);\n            const operationSpec = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationSpec;\n            const operationArguments = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationArguments;\n            if (operationSpec && operationArguments) {\n                serializeHeaders(request, operationArguments, operationSpec);\n                serializeRequestBody(request, operationArguments, operationSpec, stringifyXML);\n            }\n            return next(request);\n        },\n    };\n}\n/**\n * @internal\n */\nfunction serializeHeaders(request, operationArguments, operationSpec) {\n    var _a, _b;\n    if (operationSpec.headerParameters) {\n        for (const headerParameter of operationSpec.headerParameters) {\n            let headerValue = (0,_operationHelpers_js__WEBPACK_IMPORTED_MODULE_1__.getOperationArgumentValueFromParameter)(operationArguments, headerParameter);\n            if ((headerValue !== null && headerValue !== undefined) || headerParameter.mapper.required) {\n                headerValue = operationSpec.serializer.serialize(headerParameter.mapper, headerValue, (0,_interfaceHelpers_js__WEBPACK_IMPORTED_MODULE_3__.getPathStringFromParameter)(headerParameter));\n                const headerCollectionPrefix = headerParameter.mapper\n                    .headerCollectionPrefix;\n                if (headerCollectionPrefix) {\n                    for (const key of Object.keys(headerValue)) {\n                        request.headers.set(headerCollectionPrefix + key, headerValue[key]);\n                    }\n                }\n                else {\n                    request.headers.set(headerParameter.mapper.serializedName || (0,_interfaceHelpers_js__WEBPACK_IMPORTED_MODULE_3__.getPathStringFromParameter)(headerParameter), headerValue);\n                }\n            }\n        }\n    }\n    const customHeaders = (_b = (_a = operationArguments.options) === null || _a === void 0 ? void 0 : _a.requestOptions) === null || _b === void 0 ? void 0 : _b.customHeaders;\n    if (customHeaders) {\n        for (const customHeaderName of Object.keys(customHeaders)) {\n            request.headers.set(customHeaderName, customHeaders[customHeaderName]);\n        }\n    }\n}\n/**\n * @internal\n */\nfunction serializeRequestBody(request, operationArguments, operationSpec, stringifyXML = function () {\n    throw new Error(\"XML serialization unsupported!\");\n}) {\n    var _a, _b, _c, _d, _e;\n    const serializerOptions = (_a = operationArguments.options) === null || _a === void 0 ? void 0 : _a.serializerOptions;\n    const updatedOptions = {\n        xml: {\n            rootName: (_b = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.rootName) !== null && _b !== void 0 ? _b : \"\",\n            includeRoot: (_c = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.includeRoot) !== null && _c !== void 0 ? _c : false,\n            xmlCharKey: (_d = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.xmlCharKey) !== null && _d !== void 0 ? _d : _interfaces_js__WEBPACK_IMPORTED_MODULE_0__.XML_CHARKEY,\n        },\n    };\n    const xmlCharKey = updatedOptions.xml.xmlCharKey;\n    if (operationSpec.requestBody && operationSpec.requestBody.mapper) {\n        request.body = (0,_operationHelpers_js__WEBPACK_IMPORTED_MODULE_1__.getOperationArgumentValueFromParameter)(operationArguments, operationSpec.requestBody);\n        const bodyMapper = operationSpec.requestBody.mapper;\n        const { required, serializedName, xmlName, xmlElementName, xmlNamespace, xmlNamespacePrefix, nullable, } = bodyMapper;\n        const typeName = bodyMapper.type.name;\n        try {\n            if ((request.body !== undefined && request.body !== null) ||\n                (nullable && request.body === null) ||\n                required) {\n                const requestBodyParameterPathString = (0,_interfaceHelpers_js__WEBPACK_IMPORTED_MODULE_3__.getPathStringFromParameter)(operationSpec.requestBody);\n                request.body = operationSpec.serializer.serialize(bodyMapper, request.body, requestBodyParameterPathString, updatedOptions);\n                const isStream = typeName === _serializer_js__WEBPACK_IMPORTED_MODULE_2__.MapperTypeNames.Stream;\n                if (operationSpec.isXML) {\n                    const xmlnsKey = xmlNamespacePrefix ? `xmlns:${xmlNamespacePrefix}` : \"xmlns\";\n                    const value = getXmlValueWithNamespace(xmlNamespace, xmlnsKey, typeName, request.body, updatedOptions);\n                    if (typeName === _serializer_js__WEBPACK_IMPORTED_MODULE_2__.MapperTypeNames.Sequence) {\n                        request.body = stringifyXML(prepareXMLRootList(value, xmlElementName || xmlName || serializedName, xmlnsKey, xmlNamespace), { rootName: xmlName || serializedName, xmlCharKey });\n                    }\n                    else if (!isStream) {\n                        request.body = stringifyXML(value, {\n                            rootName: xmlName || serializedName,\n                            xmlCharKey,\n                        });\n                    }\n                }\n                else if (typeName === _serializer_js__WEBPACK_IMPORTED_MODULE_2__.MapperTypeNames.String &&\n                    (((_e = operationSpec.contentType) === null || _e === void 0 ? void 0 : _e.match(\"text/plain\")) || operationSpec.mediaType === \"text\")) {\n                    // the String serializer has validated that request body is a string\n                    // so just send the string.\n                    return;\n                }\n                else if (!isStream) {\n                    request.body = JSON.stringify(request.body);\n                }\n            }\n        }\n        catch (error) {\n            throw new Error(`Error \"${error.message}\" occurred in serializing the payload - ${JSON.stringify(serializedName, undefined, \"  \")}.`);\n        }\n    }\n    else if (operationSpec.formDataParameters && operationSpec.formDataParameters.length > 0) {\n        request.formData = {};\n        for (const formDataParameter of operationSpec.formDataParameters) {\n            const formDataParameterValue = (0,_operationHelpers_js__WEBPACK_IMPORTED_MODULE_1__.getOperationArgumentValueFromParameter)(operationArguments, formDataParameter);\n            if (formDataParameterValue !== undefined && formDataParameterValue !== null) {\n                const formDataParameterPropertyName = formDataParameter.mapper.serializedName || (0,_interfaceHelpers_js__WEBPACK_IMPORTED_MODULE_3__.getPathStringFromParameter)(formDataParameter);\n                request.formData[formDataParameterPropertyName] = operationSpec.serializer.serialize(formDataParameter.mapper, formDataParameterValue, (0,_interfaceHelpers_js__WEBPACK_IMPORTED_MODULE_3__.getPathStringFromParameter)(formDataParameter), updatedOptions);\n            }\n        }\n    }\n}\n/**\n * Adds an xml namespace to the xml serialized object if needed, otherwise it just returns the value itself\n */\nfunction getXmlValueWithNamespace(xmlNamespace, xmlnsKey, typeName, serializedValue, options) {\n    // Composite and Sequence schemas already got their root namespace set during serialization\n    // We just need to add xmlns to the other schema types\n    if (xmlNamespace && ![\"Composite\", \"Sequence\", \"Dictionary\"].includes(typeName)) {\n        const result = {};\n        result[options.xml.xmlCharKey] = serializedValue;\n        result[_interfaces_js__WEBPACK_IMPORTED_MODULE_0__.XML_ATTRKEY] = { [xmlnsKey]: xmlNamespace };\n        return result;\n    }\n    return serializedValue;\n}\nfunction prepareXMLRootList(obj, elementName, xmlNamespaceKey, xmlNamespace) {\n    if (!Array.isArray(obj)) {\n        obj = [obj];\n    }\n    if (!xmlNamespaceKey || !xmlNamespace) {\n        return { [elementName]: obj };\n    }\n    const result = { [elementName]: obj };\n    result[_interfaces_js__WEBPACK_IMPORTED_MODULE_0__.XML_ATTRKEY] = { [xmlNamespaceKey]: xmlNamespace };\n    return result;\n}\n//# sourceMappingURL=serializationPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtY2xpZW50L2Rpc3QvZXNtL3NlcmlhbGl6YXRpb25Qb2xpY3kuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQzJEO0FBQzhDO0FBQ3ZEO0FBQ2lCO0FBQ25FO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDTyx5Q0FBeUM7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0MsNkVBQXVCO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBLDhCQUE4Qiw0RkFBc0M7QUFDcEU7QUFDQSxzR0FBc0csZ0ZBQTBCO0FBQ2hJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRkFBaUYsZ0ZBQTBCO0FBQzNHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVLQUF1Syx1REFBVztBQUNsTCxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLDRGQUFzQztBQUM3RDtBQUNBLGdCQUFnQixpR0FBaUc7QUFDakg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVEQUF1RCxnRkFBMEI7QUFDakY7QUFDQSw4Q0FBOEMsMkRBQWU7QUFDN0Q7QUFDQSxtRUFBbUUsbUJBQW1CO0FBQ3RGO0FBQ0EscUNBQXFDLDJEQUFlO0FBQ3BELHNKQUFzSixpREFBaUQ7QUFDdk07QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0Esc0NBQXNDLDJEQUFlO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0MsY0FBYywwQ0FBMEMsZ0RBQWdEO0FBQzlJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMsNEZBQXNDO0FBQ2pGO0FBQ0EsaUdBQWlHLGdGQUEwQjtBQUMzSCx1SkFBdUosZ0ZBQTBCO0FBQ2pMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSx1REFBVyxNQUFNO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLHFCQUFxQjtBQUNyQixXQUFXLHVEQUFXLE1BQU07QUFDNUI7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvdmljdG9yd2lsc29uL0Rlc2t0b3AvcHJvamVjdHMvRVpWaXovbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLWNsaWVudC9kaXN0L2VzbS9zZXJpYWxpemF0aW9uUG9saWN5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuaW1wb3J0IHsgWE1MX0FUVFJLRVksIFhNTF9DSEFSS0VZIH0gZnJvbSBcIi4vaW50ZXJmYWNlcy5qc1wiO1xuaW1wb3J0IHsgZ2V0T3BlcmF0aW9uQXJndW1lbnRWYWx1ZUZyb21QYXJhbWV0ZXIsIGdldE9wZXJhdGlvblJlcXVlc3RJbmZvLCB9IGZyb20gXCIuL29wZXJhdGlvbkhlbHBlcnMuanNcIjtcbmltcG9ydCB7IE1hcHBlclR5cGVOYW1lcyB9IGZyb20gXCIuL3NlcmlhbGl6ZXIuanNcIjtcbmltcG9ydCB7IGdldFBhdGhTdHJpbmdGcm9tUGFyYW1ldGVyIH0gZnJvbSBcIi4vaW50ZXJmYWNlSGVscGVycy5qc1wiO1xuLyoqXG4gKiBUaGUgcHJvZ3JhbW1hdGljIGlkZW50aWZpZXIgb2YgdGhlIHNlcmlhbGl6YXRpb25Qb2xpY3kuXG4gKi9cbmV4cG9ydCBjb25zdCBzZXJpYWxpemF0aW9uUG9saWN5TmFtZSA9IFwic2VyaWFsaXphdGlvblBvbGljeVwiO1xuLyoqXG4gKiBUaGlzIHBvbGljeSBoYW5kbGVzIGFzc2VtYmxpbmcgdGhlIHJlcXVlc3QgYm9keSBhbmQgaGVhZGVycyB1c2luZ1xuICogYW4gT3BlcmF0aW9uU3BlYyBhbmQgT3BlcmF0aW9uQXJndW1lbnRzIG9uIHRoZSByZXF1ZXN0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gc2VyaWFsaXphdGlvblBvbGljeShvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCBzdHJpbmdpZnlYTUwgPSBvcHRpb25zLnN0cmluZ2lmeVhNTDtcbiAgICByZXR1cm4ge1xuICAgICAgICBuYW1lOiBzZXJpYWxpemF0aW9uUG9saWN5TmFtZSxcbiAgICAgICAgYXN5bmMgc2VuZFJlcXVlc3QocmVxdWVzdCwgbmV4dCkge1xuICAgICAgICAgICAgY29uc3Qgb3BlcmF0aW9uSW5mbyA9IGdldE9wZXJhdGlvblJlcXVlc3RJbmZvKHJlcXVlc3QpO1xuICAgICAgICAgICAgY29uc3Qgb3BlcmF0aW9uU3BlYyA9IG9wZXJhdGlvbkluZm8gPT09IG51bGwgfHwgb3BlcmF0aW9uSW5mbyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3BlcmF0aW9uSW5mby5vcGVyYXRpb25TcGVjO1xuICAgICAgICAgICAgY29uc3Qgb3BlcmF0aW9uQXJndW1lbnRzID0gb3BlcmF0aW9uSW5mbyA9PT0gbnVsbCB8fCBvcGVyYXRpb25JbmZvID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcGVyYXRpb25JbmZvLm9wZXJhdGlvbkFyZ3VtZW50cztcbiAgICAgICAgICAgIGlmIChvcGVyYXRpb25TcGVjICYmIG9wZXJhdGlvbkFyZ3VtZW50cykge1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZUhlYWRlcnMocmVxdWVzdCwgb3BlcmF0aW9uQXJndW1lbnRzLCBvcGVyYXRpb25TcGVjKTtcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVSZXF1ZXN0Qm9keShyZXF1ZXN0LCBvcGVyYXRpb25Bcmd1bWVudHMsIG9wZXJhdGlvblNwZWMsIHN0cmluZ2lmeVhNTCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmV4dChyZXF1ZXN0KTtcbiAgICAgICAgfSxcbiAgICB9O1xufVxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNlcmlhbGl6ZUhlYWRlcnMocmVxdWVzdCwgb3BlcmF0aW9uQXJndW1lbnRzLCBvcGVyYXRpb25TcGVjKSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICBpZiAob3BlcmF0aW9uU3BlYy5oZWFkZXJQYXJhbWV0ZXJzKSB7XG4gICAgICAgIGZvciAoY29uc3QgaGVhZGVyUGFyYW1ldGVyIG9mIG9wZXJhdGlvblNwZWMuaGVhZGVyUGFyYW1ldGVycykge1xuICAgICAgICAgICAgbGV0IGhlYWRlclZhbHVlID0gZ2V0T3BlcmF0aW9uQXJndW1lbnRWYWx1ZUZyb21QYXJhbWV0ZXIob3BlcmF0aW9uQXJndW1lbnRzLCBoZWFkZXJQYXJhbWV0ZXIpO1xuICAgICAgICAgICAgaWYgKChoZWFkZXJWYWx1ZSAhPT0gbnVsbCAmJiBoZWFkZXJWYWx1ZSAhPT0gdW5kZWZpbmVkKSB8fCBoZWFkZXJQYXJhbWV0ZXIubWFwcGVyLnJlcXVpcmVkKSB7XG4gICAgICAgICAgICAgICAgaGVhZGVyVmFsdWUgPSBvcGVyYXRpb25TcGVjLnNlcmlhbGl6ZXIuc2VyaWFsaXplKGhlYWRlclBhcmFtZXRlci5tYXBwZXIsIGhlYWRlclZhbHVlLCBnZXRQYXRoU3RyaW5nRnJvbVBhcmFtZXRlcihoZWFkZXJQYXJhbWV0ZXIpKTtcbiAgICAgICAgICAgICAgICBjb25zdCBoZWFkZXJDb2xsZWN0aW9uUHJlZml4ID0gaGVhZGVyUGFyYW1ldGVyLm1hcHBlclxuICAgICAgICAgICAgICAgICAgICAuaGVhZGVyQ29sbGVjdGlvblByZWZpeDtcbiAgICAgICAgICAgICAgICBpZiAoaGVhZGVyQ29sbGVjdGlvblByZWZpeCkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhoZWFkZXJWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3QuaGVhZGVycy5zZXQoaGVhZGVyQ29sbGVjdGlvblByZWZpeCArIGtleSwgaGVhZGVyVmFsdWVba2V5XSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3QuaGVhZGVycy5zZXQoaGVhZGVyUGFyYW1ldGVyLm1hcHBlci5zZXJpYWxpemVkTmFtZSB8fCBnZXRQYXRoU3RyaW5nRnJvbVBhcmFtZXRlcihoZWFkZXJQYXJhbWV0ZXIpLCBoZWFkZXJWYWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGN1c3RvbUhlYWRlcnMgPSAoX2IgPSAoX2EgPSBvcGVyYXRpb25Bcmd1bWVudHMub3B0aW9ucykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnJlcXVlc3RPcHRpb25zKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY3VzdG9tSGVhZGVycztcbiAgICBpZiAoY3VzdG9tSGVhZGVycykge1xuICAgICAgICBmb3IgKGNvbnN0IGN1c3RvbUhlYWRlck5hbWUgb2YgT2JqZWN0LmtleXMoY3VzdG9tSGVhZGVycykpIHtcbiAgICAgICAgICAgIHJlcXVlc3QuaGVhZGVycy5zZXQoY3VzdG9tSGVhZGVyTmFtZSwgY3VzdG9tSGVhZGVyc1tjdXN0b21IZWFkZXJOYW1lXSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZnVuY3Rpb24gc2VyaWFsaXplUmVxdWVzdEJvZHkocmVxdWVzdCwgb3BlcmF0aW9uQXJndW1lbnRzLCBvcGVyYXRpb25TcGVjLCBzdHJpbmdpZnlYTUwgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiWE1MIHNlcmlhbGl6YXRpb24gdW5zdXBwb3J0ZWQhXCIpO1xufSkge1xuICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2U7XG4gICAgY29uc3Qgc2VyaWFsaXplck9wdGlvbnMgPSAoX2EgPSBvcGVyYXRpb25Bcmd1bWVudHMub3B0aW9ucykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnNlcmlhbGl6ZXJPcHRpb25zO1xuICAgIGNvbnN0IHVwZGF0ZWRPcHRpb25zID0ge1xuICAgICAgICB4bWw6IHtcbiAgICAgICAgICAgIHJvb3ROYW1lOiAoX2IgPSBzZXJpYWxpemVyT3B0aW9ucyA9PT0gbnVsbCB8fCBzZXJpYWxpemVyT3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogc2VyaWFsaXplck9wdGlvbnMueG1sLnJvb3ROYW1lKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBcIlwiLFxuICAgICAgICAgICAgaW5jbHVkZVJvb3Q6IChfYyA9IHNlcmlhbGl6ZXJPcHRpb25zID09PSBudWxsIHx8IHNlcmlhbGl6ZXJPcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzZXJpYWxpemVyT3B0aW9ucy54bWwuaW5jbHVkZVJvb3QpICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6IGZhbHNlLFxuICAgICAgICAgICAgeG1sQ2hhcktleTogKF9kID0gc2VyaWFsaXplck9wdGlvbnMgPT09IG51bGwgfHwgc2VyaWFsaXplck9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNlcmlhbGl6ZXJPcHRpb25zLnhtbC54bWxDaGFyS2V5KSAhPT0gbnVsbCAmJiBfZCAhPT0gdm9pZCAwID8gX2QgOiBYTUxfQ0hBUktFWSxcbiAgICAgICAgfSxcbiAgICB9O1xuICAgIGNvbnN0IHhtbENoYXJLZXkgPSB1cGRhdGVkT3B0aW9ucy54bWwueG1sQ2hhcktleTtcbiAgICBpZiAob3BlcmF0aW9uU3BlYy5yZXF1ZXN0Qm9keSAmJiBvcGVyYXRpb25TcGVjLnJlcXVlc3RCb2R5Lm1hcHBlcikge1xuICAgICAgICByZXF1ZXN0LmJvZHkgPSBnZXRPcGVyYXRpb25Bcmd1bWVudFZhbHVlRnJvbVBhcmFtZXRlcihvcGVyYXRpb25Bcmd1bWVudHMsIG9wZXJhdGlvblNwZWMucmVxdWVzdEJvZHkpO1xuICAgICAgICBjb25zdCBib2R5TWFwcGVyID0gb3BlcmF0aW9uU3BlYy5yZXF1ZXN0Qm9keS5tYXBwZXI7XG4gICAgICAgIGNvbnN0IHsgcmVxdWlyZWQsIHNlcmlhbGl6ZWROYW1lLCB4bWxOYW1lLCB4bWxFbGVtZW50TmFtZSwgeG1sTmFtZXNwYWNlLCB4bWxOYW1lc3BhY2VQcmVmaXgsIG51bGxhYmxlLCB9ID0gYm9keU1hcHBlcjtcbiAgICAgICAgY29uc3QgdHlwZU5hbWUgPSBib2R5TWFwcGVyLnR5cGUubmFtZTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICgocmVxdWVzdC5ib2R5ICE9PSB1bmRlZmluZWQgJiYgcmVxdWVzdC5ib2R5ICE9PSBudWxsKSB8fFxuICAgICAgICAgICAgICAgIChudWxsYWJsZSAmJiByZXF1ZXN0LmJvZHkgPT09IG51bGwpIHx8XG4gICAgICAgICAgICAgICAgcmVxdWlyZWQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXF1ZXN0Qm9keVBhcmFtZXRlclBhdGhTdHJpbmcgPSBnZXRQYXRoU3RyaW5nRnJvbVBhcmFtZXRlcihvcGVyYXRpb25TcGVjLnJlcXVlc3RCb2R5KTtcbiAgICAgICAgICAgICAgICByZXF1ZXN0LmJvZHkgPSBvcGVyYXRpb25TcGVjLnNlcmlhbGl6ZXIuc2VyaWFsaXplKGJvZHlNYXBwZXIsIHJlcXVlc3QuYm9keSwgcmVxdWVzdEJvZHlQYXJhbWV0ZXJQYXRoU3RyaW5nLCB1cGRhdGVkT3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgY29uc3QgaXNTdHJlYW0gPSB0eXBlTmFtZSA9PT0gTWFwcGVyVHlwZU5hbWVzLlN0cmVhbTtcbiAgICAgICAgICAgICAgICBpZiAob3BlcmF0aW9uU3BlYy5pc1hNTCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB4bWxuc0tleSA9IHhtbE5hbWVzcGFjZVByZWZpeCA/IGB4bWxuczoke3htbE5hbWVzcGFjZVByZWZpeH1gIDogXCJ4bWxuc1wiO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGdldFhtbFZhbHVlV2l0aE5hbWVzcGFjZSh4bWxOYW1lc3BhY2UsIHhtbG5zS2V5LCB0eXBlTmFtZSwgcmVxdWVzdC5ib2R5LCB1cGRhdGVkT3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlTmFtZSA9PT0gTWFwcGVyVHlwZU5hbWVzLlNlcXVlbmNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0LmJvZHkgPSBzdHJpbmdpZnlYTUwocHJlcGFyZVhNTFJvb3RMaXN0KHZhbHVlLCB4bWxFbGVtZW50TmFtZSB8fCB4bWxOYW1lIHx8IHNlcmlhbGl6ZWROYW1lLCB4bWxuc0tleSwgeG1sTmFtZXNwYWNlKSwgeyByb290TmFtZTogeG1sTmFtZSB8fCBzZXJpYWxpemVkTmFtZSwgeG1sQ2hhcktleSB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICghaXNTdHJlYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3QuYm9keSA9IHN0cmluZ2lmeVhNTCh2YWx1ZSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3ROYW1lOiB4bWxOYW1lIHx8IHNlcmlhbGl6ZWROYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhtbENoYXJLZXksXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlTmFtZSA9PT0gTWFwcGVyVHlwZU5hbWVzLlN0cmluZyAmJlxuICAgICAgICAgICAgICAgICAgICAoKChfZSA9IG9wZXJhdGlvblNwZWMuY29udGVudFR5cGUpID09PSBudWxsIHx8IF9lID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZS5tYXRjaChcInRleHQvcGxhaW5cIikpIHx8IG9wZXJhdGlvblNwZWMubWVkaWFUeXBlID09PSBcInRleHRcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlIFN0cmluZyBzZXJpYWxpemVyIGhhcyB2YWxpZGF0ZWQgdGhhdCByZXF1ZXN0IGJvZHkgaXMgYSBzdHJpbmdcbiAgICAgICAgICAgICAgICAgICAgLy8gc28ganVzdCBzZW5kIHRoZSBzdHJpbmcuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoIWlzU3RyZWFtKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3QuYm9keSA9IEpTT04uc3RyaW5naWZ5KHJlcXVlc3QuYm9keSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFcnJvciBcIiR7ZXJyb3IubWVzc2FnZX1cIiBvY2N1cnJlZCBpbiBzZXJpYWxpemluZyB0aGUgcGF5bG9hZCAtICR7SlNPTi5zdHJpbmdpZnkoc2VyaWFsaXplZE5hbWUsIHVuZGVmaW5lZCwgXCIgIFwiKX0uYCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAob3BlcmF0aW9uU3BlYy5mb3JtRGF0YVBhcmFtZXRlcnMgJiYgb3BlcmF0aW9uU3BlYy5mb3JtRGF0YVBhcmFtZXRlcnMubGVuZ3RoID4gMCkge1xuICAgICAgICByZXF1ZXN0LmZvcm1EYXRhID0ge307XG4gICAgICAgIGZvciAoY29uc3QgZm9ybURhdGFQYXJhbWV0ZXIgb2Ygb3BlcmF0aW9uU3BlYy5mb3JtRGF0YVBhcmFtZXRlcnMpIHtcbiAgICAgICAgICAgIGNvbnN0IGZvcm1EYXRhUGFyYW1ldGVyVmFsdWUgPSBnZXRPcGVyYXRpb25Bcmd1bWVudFZhbHVlRnJvbVBhcmFtZXRlcihvcGVyYXRpb25Bcmd1bWVudHMsIGZvcm1EYXRhUGFyYW1ldGVyKTtcbiAgICAgICAgICAgIGlmIChmb3JtRGF0YVBhcmFtZXRlclZhbHVlICE9PSB1bmRlZmluZWQgJiYgZm9ybURhdGFQYXJhbWV0ZXJWYWx1ZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZvcm1EYXRhUGFyYW1ldGVyUHJvcGVydHlOYW1lID0gZm9ybURhdGFQYXJhbWV0ZXIubWFwcGVyLnNlcmlhbGl6ZWROYW1lIHx8IGdldFBhdGhTdHJpbmdGcm9tUGFyYW1ldGVyKGZvcm1EYXRhUGFyYW1ldGVyKTtcbiAgICAgICAgICAgICAgICByZXF1ZXN0LmZvcm1EYXRhW2Zvcm1EYXRhUGFyYW1ldGVyUHJvcGVydHlOYW1lXSA9IG9wZXJhdGlvblNwZWMuc2VyaWFsaXplci5zZXJpYWxpemUoZm9ybURhdGFQYXJhbWV0ZXIubWFwcGVyLCBmb3JtRGF0YVBhcmFtZXRlclZhbHVlLCBnZXRQYXRoU3RyaW5nRnJvbVBhcmFtZXRlcihmb3JtRGF0YVBhcmFtZXRlciksIHVwZGF0ZWRPcHRpb25zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogQWRkcyBhbiB4bWwgbmFtZXNwYWNlIHRvIHRoZSB4bWwgc2VyaWFsaXplZCBvYmplY3QgaWYgbmVlZGVkLCBvdGhlcndpc2UgaXQganVzdCByZXR1cm5zIHRoZSB2YWx1ZSBpdHNlbGZcbiAqL1xuZnVuY3Rpb24gZ2V0WG1sVmFsdWVXaXRoTmFtZXNwYWNlKHhtbE5hbWVzcGFjZSwgeG1sbnNLZXksIHR5cGVOYW1lLCBzZXJpYWxpemVkVmFsdWUsIG9wdGlvbnMpIHtcbiAgICAvLyBDb21wb3NpdGUgYW5kIFNlcXVlbmNlIHNjaGVtYXMgYWxyZWFkeSBnb3QgdGhlaXIgcm9vdCBuYW1lc3BhY2Ugc2V0IGR1cmluZyBzZXJpYWxpemF0aW9uXG4gICAgLy8gV2UganVzdCBuZWVkIHRvIGFkZCB4bWxucyB0byB0aGUgb3RoZXIgc2NoZW1hIHR5cGVzXG4gICAgaWYgKHhtbE5hbWVzcGFjZSAmJiAhW1wiQ29tcG9zaXRlXCIsIFwiU2VxdWVuY2VcIiwgXCJEaWN0aW9uYXJ5XCJdLmluY2x1ZGVzKHR5cGVOYW1lKSkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSB7fTtcbiAgICAgICAgcmVzdWx0W29wdGlvbnMueG1sLnhtbENoYXJLZXldID0gc2VyaWFsaXplZFZhbHVlO1xuICAgICAgICByZXN1bHRbWE1MX0FUVFJLRVldID0geyBbeG1sbnNLZXldOiB4bWxOYW1lc3BhY2UgfTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgcmV0dXJuIHNlcmlhbGl6ZWRWYWx1ZTtcbn1cbmZ1bmN0aW9uIHByZXBhcmVYTUxSb290TGlzdChvYmosIGVsZW1lbnROYW1lLCB4bWxOYW1lc3BhY2VLZXksIHhtbE5hbWVzcGFjZSkge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShvYmopKSB7XG4gICAgICAgIG9iaiA9IFtvYmpdO1xuICAgIH1cbiAgICBpZiAoIXhtbE5hbWVzcGFjZUtleSB8fCAheG1sTmFtZXNwYWNlKSB7XG4gICAgICAgIHJldHVybiB7IFtlbGVtZW50TmFtZV06IG9iaiB9O1xuICAgIH1cbiAgICBjb25zdCByZXN1bHQgPSB7IFtlbGVtZW50TmFtZV06IG9iaiB9O1xuICAgIHJlc3VsdFtYTUxfQVRUUktFWV0gPSB7IFt4bWxOYW1lc3BhY2VLZXldOiB4bWxOYW1lc3BhY2UgfTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2VyaWFsaXphdGlvblBvbGljeS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-client/dist/esm/serializationPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-client/dist/esm/serializer.js":
/*!****************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/esm/serializer.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MapperTypeNames: () => (/* binding */ MapperTypeNames),\n/* harmony export */   createSerializer: () => (/* binding */ createSerializer)\n/* harmony export */ });\n/* harmony import */ var _base64_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base64.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/base64.js\");\n/* harmony import */ var _interfaces_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./interfaces.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/interfaces.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/utils.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\nclass SerializerImpl {\n    constructor(modelMappers = {}, isXML = false) {\n        this.modelMappers = modelMappers;\n        this.isXML = isXML;\n    }\n    /**\n     * @deprecated Removing the constraints validation on client side.\n     */\n    validateConstraints(mapper, value, objectName) {\n        const failValidation = (constraintName, constraintValue) => {\n            throw new Error(`\"${objectName}\" with value \"${value}\" should satisfy the constraint \"${constraintName}\": ${constraintValue}.`);\n        };\n        if (mapper.constraints && value !== undefined && value !== null) {\n            const { ExclusiveMaximum, ExclusiveMinimum, InclusiveMaximum, InclusiveMinimum, MaxItems, MaxLength, MinItems, MinLength, MultipleOf, Pattern, UniqueItems, } = mapper.constraints;\n            if (ExclusiveMaximum !== undefined && value >= ExclusiveMaximum) {\n                failValidation(\"ExclusiveMaximum\", ExclusiveMaximum);\n            }\n            if (ExclusiveMinimum !== undefined && value <= ExclusiveMinimum) {\n                failValidation(\"ExclusiveMinimum\", ExclusiveMinimum);\n            }\n            if (InclusiveMaximum !== undefined && value > InclusiveMaximum) {\n                failValidation(\"InclusiveMaximum\", InclusiveMaximum);\n            }\n            if (InclusiveMinimum !== undefined && value < InclusiveMinimum) {\n                failValidation(\"InclusiveMinimum\", InclusiveMinimum);\n            }\n            if (MaxItems !== undefined && value.length > MaxItems) {\n                failValidation(\"MaxItems\", MaxItems);\n            }\n            if (MaxLength !== undefined && value.length > MaxLength) {\n                failValidation(\"MaxLength\", MaxLength);\n            }\n            if (MinItems !== undefined && value.length < MinItems) {\n                failValidation(\"MinItems\", MinItems);\n            }\n            if (MinLength !== undefined && value.length < MinLength) {\n                failValidation(\"MinLength\", MinLength);\n            }\n            if (MultipleOf !== undefined && value % MultipleOf !== 0) {\n                failValidation(\"MultipleOf\", MultipleOf);\n            }\n            if (Pattern) {\n                const pattern = typeof Pattern === \"string\" ? new RegExp(Pattern) : Pattern;\n                if (typeof value !== \"string\" || value.match(pattern) === null) {\n                    failValidation(\"Pattern\", Pattern);\n                }\n            }\n            if (UniqueItems &&\n                value.some((item, i, ar) => ar.indexOf(item) !== i)) {\n                failValidation(\"UniqueItems\", UniqueItems);\n            }\n        }\n    }\n    /**\n     * Serialize the given object based on its metadata defined in the mapper\n     *\n     * @param mapper - The mapper which defines the metadata of the serializable object\n     *\n     * @param object - A valid Javascript object to be serialized\n     *\n     * @param objectName - Name of the serialized object\n     *\n     * @param options - additional options to serialization\n     *\n     * @returns A valid serialized Javascript object\n     */\n    serialize(mapper, object, objectName, options = { xml: {} }) {\n        var _a, _b, _c;\n        const updatedOptions = {\n            xml: {\n                rootName: (_a = options.xml.rootName) !== null && _a !== void 0 ? _a : \"\",\n                includeRoot: (_b = options.xml.includeRoot) !== null && _b !== void 0 ? _b : false,\n                xmlCharKey: (_c = options.xml.xmlCharKey) !== null && _c !== void 0 ? _c : _interfaces_js__WEBPACK_IMPORTED_MODULE_1__.XML_CHARKEY,\n            },\n        };\n        let payload = {};\n        const mapperType = mapper.type.name;\n        if (!objectName) {\n            objectName = mapper.serializedName;\n        }\n        if (mapperType.match(/^Sequence$/i) !== null) {\n            payload = [];\n        }\n        if (mapper.isConstant) {\n            object = mapper.defaultValue;\n        }\n        // This table of allowed values should help explain\n        // the mapper.required and mapper.nullable properties.\n        // X means \"neither undefined or null are allowed\".\n        //           || required\n        //           || true      | false\n        //  nullable || ==========================\n        //      true || null      | undefined/null\n        //     false || X         | undefined\n        // undefined || X         | undefined/null\n        const { required, nullable } = mapper;\n        if (required && nullable && object === undefined) {\n            throw new Error(`${objectName} cannot be undefined.`);\n        }\n        if (required && !nullable && (object === undefined || object === null)) {\n            throw new Error(`${objectName} cannot be null or undefined.`);\n        }\n        if (!required && nullable === false && object === null) {\n            throw new Error(`${objectName} cannot be null.`);\n        }\n        if (object === undefined || object === null) {\n            payload = object;\n        }\n        else {\n            if (mapperType.match(/^any$/i) !== null) {\n                payload = object;\n            }\n            else if (mapperType.match(/^(Number|String|Boolean|Object|Stream|Uuid)$/i) !== null) {\n                payload = serializeBasicTypes(mapperType, objectName, object);\n            }\n            else if (mapperType.match(/^Enum$/i) !== null) {\n                const enumMapper = mapper;\n                payload = serializeEnumType(objectName, enumMapper.type.allowedValues, object);\n            }\n            else if (mapperType.match(/^(Date|DateTime|TimeSpan|DateTimeRfc1123|UnixTime)$/i) !== null) {\n                payload = serializeDateTypes(mapperType, object, objectName);\n            }\n            else if (mapperType.match(/^ByteArray$/i) !== null) {\n                payload = serializeByteArrayType(objectName, object);\n            }\n            else if (mapperType.match(/^Base64Url$/i) !== null) {\n                payload = serializeBase64UrlType(objectName, object);\n            }\n            else if (mapperType.match(/^Sequence$/i) !== null) {\n                payload = serializeSequenceType(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions);\n            }\n            else if (mapperType.match(/^Dictionary$/i) !== null) {\n                payload = serializeDictionaryType(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions);\n            }\n            else if (mapperType.match(/^Composite$/i) !== null) {\n                payload = serializeCompositeType(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions);\n            }\n        }\n        return payload;\n    }\n    /**\n     * Deserialize the given object based on its metadata defined in the mapper\n     *\n     * @param mapper - The mapper which defines the metadata of the serializable object\n     *\n     * @param responseBody - A valid Javascript entity to be deserialized\n     *\n     * @param objectName - Name of the deserialized object\n     *\n     * @param options - Controls behavior of XML parser and builder.\n     *\n     * @returns A valid deserialized Javascript object\n     */\n    deserialize(mapper, responseBody, objectName, options = { xml: {} }) {\n        var _a, _b, _c, _d;\n        const updatedOptions = {\n            xml: {\n                rootName: (_a = options.xml.rootName) !== null && _a !== void 0 ? _a : \"\",\n                includeRoot: (_b = options.xml.includeRoot) !== null && _b !== void 0 ? _b : false,\n                xmlCharKey: (_c = options.xml.xmlCharKey) !== null && _c !== void 0 ? _c : _interfaces_js__WEBPACK_IMPORTED_MODULE_1__.XML_CHARKEY,\n            },\n            ignoreUnknownProperties: (_d = options.ignoreUnknownProperties) !== null && _d !== void 0 ? _d : false,\n        };\n        if (responseBody === undefined || responseBody === null) {\n            if (this.isXML && mapper.type.name === \"Sequence\" && !mapper.xmlIsWrapped) {\n                // Edge case for empty XML non-wrapped lists. xml2js can't distinguish\n                // between the list being empty versus being missing,\n                // so let's do the more user-friendly thing and return an empty list.\n                responseBody = [];\n            }\n            // specifically check for undefined as default value can be a falsey value `0, \"\", false, null`\n            if (mapper.defaultValue !== undefined) {\n                responseBody = mapper.defaultValue;\n            }\n            return responseBody;\n        }\n        let payload;\n        const mapperType = mapper.type.name;\n        if (!objectName) {\n            objectName = mapper.serializedName;\n        }\n        if (mapperType.match(/^Composite$/i) !== null) {\n            payload = deserializeCompositeType(this, mapper, responseBody, objectName, updatedOptions);\n        }\n        else {\n            if (this.isXML) {\n                const xmlCharKey = updatedOptions.xml.xmlCharKey;\n                /**\n                 * If the mapper specifies this as a non-composite type value but the responseBody contains\n                 * both header (\"$\" i.e., XML_ATTRKEY) and body (\"#\" i.e., XML_CHARKEY) properties,\n                 * then just reduce the responseBody value to the body (\"#\" i.e., XML_CHARKEY) property.\n                 */\n                if (responseBody[_interfaces_js__WEBPACK_IMPORTED_MODULE_1__.XML_ATTRKEY] !== undefined && responseBody[xmlCharKey] !== undefined) {\n                    responseBody = responseBody[xmlCharKey];\n                }\n            }\n            if (mapperType.match(/^Number$/i) !== null) {\n                payload = parseFloat(responseBody);\n                if (isNaN(payload)) {\n                    payload = responseBody;\n                }\n            }\n            else if (mapperType.match(/^Boolean$/i) !== null) {\n                if (responseBody === \"true\") {\n                    payload = true;\n                }\n                else if (responseBody === \"false\") {\n                    payload = false;\n                }\n                else {\n                    payload = responseBody;\n                }\n            }\n            else if (mapperType.match(/^(String|Enum|Object|Stream|Uuid|TimeSpan|any)$/i) !== null) {\n                payload = responseBody;\n            }\n            else if (mapperType.match(/^(Date|DateTime|DateTimeRfc1123)$/i) !== null) {\n                payload = new Date(responseBody);\n            }\n            else if (mapperType.match(/^UnixTime$/i) !== null) {\n                payload = unixTimeToDate(responseBody);\n            }\n            else if (mapperType.match(/^ByteArray$/i) !== null) {\n                payload = _base64_js__WEBPACK_IMPORTED_MODULE_0__.decodeString(responseBody);\n            }\n            else if (mapperType.match(/^Base64Url$/i) !== null) {\n                payload = base64UrlToByteArray(responseBody);\n            }\n            else if (mapperType.match(/^Sequence$/i) !== null) {\n                payload = deserializeSequenceType(this, mapper, responseBody, objectName, updatedOptions);\n            }\n            else if (mapperType.match(/^Dictionary$/i) !== null) {\n                payload = deserializeDictionaryType(this, mapper, responseBody, objectName, updatedOptions);\n            }\n        }\n        if (mapper.isConstant) {\n            payload = mapper.defaultValue;\n        }\n        return payload;\n    }\n}\n/**\n * Method that creates and returns a Serializer.\n * @param modelMappers - Known models to map\n * @param isXML - If XML should be supported\n */\nfunction createSerializer(modelMappers = {}, isXML = false) {\n    return new SerializerImpl(modelMappers, isXML);\n}\nfunction trimEnd(str, ch) {\n    let len = str.length;\n    while (len - 1 >= 0 && str[len - 1] === ch) {\n        --len;\n    }\n    return str.substr(0, len);\n}\nfunction bufferToBase64Url(buffer) {\n    if (!buffer) {\n        return undefined;\n    }\n    if (!(buffer instanceof Uint8Array)) {\n        throw new Error(`Please provide an input of type Uint8Array for converting to Base64Url.`);\n    }\n    // Uint8Array to Base64.\n    const str = _base64_js__WEBPACK_IMPORTED_MODULE_0__.encodeByteArray(buffer);\n    // Base64 to Base64Url.\n    return trimEnd(str, \"=\").replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\n}\nfunction base64UrlToByteArray(str) {\n    if (!str) {\n        return undefined;\n    }\n    if (str && typeof str.valueOf() !== \"string\") {\n        throw new Error(\"Please provide an input of type string for converting to Uint8Array\");\n    }\n    // Base64Url to Base64.\n    str = str.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    // Base64 to Uint8Array.\n    return _base64_js__WEBPACK_IMPORTED_MODULE_0__.decodeString(str);\n}\nfunction splitSerializeName(prop) {\n    const classes = [];\n    let partialclass = \"\";\n    if (prop) {\n        const subwords = prop.split(\".\");\n        for (const item of subwords) {\n            if (item.charAt(item.length - 1) === \"\\\\\") {\n                partialclass += item.substr(0, item.length - 1) + \".\";\n            }\n            else {\n                partialclass += item;\n                classes.push(partialclass);\n                partialclass = \"\";\n            }\n        }\n    }\n    return classes;\n}\nfunction dateToUnixTime(d) {\n    if (!d) {\n        return undefined;\n    }\n    if (typeof d.valueOf() === \"string\") {\n        d = new Date(d);\n    }\n    return Math.floor(d.getTime() / 1000);\n}\nfunction unixTimeToDate(n) {\n    if (!n) {\n        return undefined;\n    }\n    return new Date(n * 1000);\n}\nfunction serializeBasicTypes(typeName, objectName, value) {\n    if (value !== null && value !== undefined) {\n        if (typeName.match(/^Number$/i) !== null) {\n            if (typeof value !== \"number\") {\n                throw new Error(`${objectName} with value ${value} must be of type number.`);\n            }\n        }\n        else if (typeName.match(/^String$/i) !== null) {\n            if (typeof value.valueOf() !== \"string\") {\n                throw new Error(`${objectName} with value \"${value}\" must be of type string.`);\n            }\n        }\n        else if (typeName.match(/^Uuid$/i) !== null) {\n            if (!(typeof value.valueOf() === \"string\" && (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.isValidUuid)(value))) {\n                throw new Error(`${objectName} with value \"${value}\" must be of type string and a valid uuid.`);\n            }\n        }\n        else if (typeName.match(/^Boolean$/i) !== null) {\n            if (typeof value !== \"boolean\") {\n                throw new Error(`${objectName} with value ${value} must be of type boolean.`);\n            }\n        }\n        else if (typeName.match(/^Stream$/i) !== null) {\n            const objectType = typeof value;\n            if (objectType !== \"string\" &&\n                typeof value.pipe !== \"function\" && // NodeJS.ReadableStream\n                typeof value.tee !== \"function\" && // browser ReadableStream\n                !(value instanceof ArrayBuffer) &&\n                !ArrayBuffer.isView(value) &&\n                // File objects count as a type of Blob, so we want to use instanceof explicitly\n                !((typeof Blob === \"function\" || typeof Blob === \"object\") && value instanceof Blob) &&\n                objectType !== \"function\") {\n                throw new Error(`${objectName} must be a string, Blob, ArrayBuffer, ArrayBufferView, ReadableStream, or () => ReadableStream.`);\n            }\n        }\n    }\n    return value;\n}\nfunction serializeEnumType(objectName, allowedValues, value) {\n    if (!allowedValues) {\n        throw new Error(`Please provide a set of allowedValues to validate ${objectName} as an Enum Type.`);\n    }\n    const isPresent = allowedValues.some((item) => {\n        if (typeof item.valueOf() === \"string\") {\n            return item.toLowerCase() === value.toLowerCase();\n        }\n        return item === value;\n    });\n    if (!isPresent) {\n        throw new Error(`${value} is not a valid value for ${objectName}. The valid values are: ${JSON.stringify(allowedValues)}.`);\n    }\n    return value;\n}\nfunction serializeByteArrayType(objectName, value) {\n    if (value !== undefined && value !== null) {\n        if (!(value instanceof Uint8Array)) {\n            throw new Error(`${objectName} must be of type Uint8Array.`);\n        }\n        value = _base64_js__WEBPACK_IMPORTED_MODULE_0__.encodeByteArray(value);\n    }\n    return value;\n}\nfunction serializeBase64UrlType(objectName, value) {\n    if (value !== undefined && value !== null) {\n        if (!(value instanceof Uint8Array)) {\n            throw new Error(`${objectName} must be of type Uint8Array.`);\n        }\n        value = bufferToBase64Url(value);\n    }\n    return value;\n}\nfunction serializeDateTypes(typeName, value, objectName) {\n    if (value !== undefined && value !== null) {\n        if (typeName.match(/^Date$/i) !== null) {\n            if (!(value instanceof Date ||\n                (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value))))) {\n                throw new Error(`${objectName} must be an instanceof Date or a string in ISO8601 format.`);\n            }\n            value =\n                value instanceof Date\n                    ? value.toISOString().substring(0, 10)\n                    : new Date(value).toISOString().substring(0, 10);\n        }\n        else if (typeName.match(/^DateTime$/i) !== null) {\n            if (!(value instanceof Date ||\n                (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value))))) {\n                throw new Error(`${objectName} must be an instanceof Date or a string in ISO8601 format.`);\n            }\n            value = value instanceof Date ? value.toISOString() : new Date(value).toISOString();\n        }\n        else if (typeName.match(/^DateTimeRfc1123$/i) !== null) {\n            if (!(value instanceof Date ||\n                (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value))))) {\n                throw new Error(`${objectName} must be an instanceof Date or a string in RFC-1123 format.`);\n            }\n            value = value instanceof Date ? value.toUTCString() : new Date(value).toUTCString();\n        }\n        else if (typeName.match(/^UnixTime$/i) !== null) {\n            if (!(value instanceof Date ||\n                (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value))))) {\n                throw new Error(`${objectName} must be an instanceof Date or a string in RFC-1123/ISO8601 format ` +\n                    `for it to be serialized in UnixTime/Epoch format.`);\n            }\n            value = dateToUnixTime(value);\n        }\n        else if (typeName.match(/^TimeSpan$/i) !== null) {\n            if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.isDuration)(value)) {\n                throw new Error(`${objectName} must be a string in ISO 8601 format. Instead was \"${value}\".`);\n            }\n        }\n    }\n    return value;\n}\nfunction serializeSequenceType(serializer, mapper, object, objectName, isXml, options) {\n    var _a;\n    if (!Array.isArray(object)) {\n        throw new Error(`${objectName} must be of type Array.`);\n    }\n    let elementType = mapper.type.element;\n    if (!elementType || typeof elementType !== \"object\") {\n        throw new Error(`element\" metadata for an Array must be defined in the ` +\n            `mapper and it must of type \"object\" in ${objectName}.`);\n    }\n    // Quirk: Composite mappers referenced by `element` might\n    // not have *all* properties declared (like uberParent),\n    // so let's try to look up the full definition by name.\n    if (elementType.type.name === \"Composite\" && elementType.type.className) {\n        elementType = (_a = serializer.modelMappers[elementType.type.className]) !== null && _a !== void 0 ? _a : elementType;\n    }\n    const tempArray = [];\n    for (let i = 0; i < object.length; i++) {\n        const serializedValue = serializer.serialize(elementType, object[i], objectName, options);\n        if (isXml && elementType.xmlNamespace) {\n            const xmlnsKey = elementType.xmlNamespacePrefix\n                ? `xmlns:${elementType.xmlNamespacePrefix}`\n                : \"xmlns\";\n            if (elementType.type.name === \"Composite\") {\n                tempArray[i] = Object.assign({}, serializedValue);\n                tempArray[i][_interfaces_js__WEBPACK_IMPORTED_MODULE_1__.XML_ATTRKEY] = { [xmlnsKey]: elementType.xmlNamespace };\n            }\n            else {\n                tempArray[i] = {};\n                tempArray[i][options.xml.xmlCharKey] = serializedValue;\n                tempArray[i][_interfaces_js__WEBPACK_IMPORTED_MODULE_1__.XML_ATTRKEY] = { [xmlnsKey]: elementType.xmlNamespace };\n            }\n        }\n        else {\n            tempArray[i] = serializedValue;\n        }\n    }\n    return tempArray;\n}\nfunction serializeDictionaryType(serializer, mapper, object, objectName, isXml, options) {\n    if (typeof object !== \"object\") {\n        throw new Error(`${objectName} must be of type object.`);\n    }\n    const valueType = mapper.type.value;\n    if (!valueType || typeof valueType !== \"object\") {\n        throw new Error(`\"value\" metadata for a Dictionary must be defined in the ` +\n            `mapper and it must of type \"object\" in ${objectName}.`);\n    }\n    const tempDictionary = {};\n    for (const key of Object.keys(object)) {\n        const serializedValue = serializer.serialize(valueType, object[key], objectName, options);\n        // If the element needs an XML namespace we need to add it within the $ property\n        tempDictionary[key] = getXmlObjectValue(valueType, serializedValue, isXml, options);\n    }\n    // Add the namespace to the root element if needed\n    if (isXml && mapper.xmlNamespace) {\n        const xmlnsKey = mapper.xmlNamespacePrefix ? `xmlns:${mapper.xmlNamespacePrefix}` : \"xmlns\";\n        const result = tempDictionary;\n        result[_interfaces_js__WEBPACK_IMPORTED_MODULE_1__.XML_ATTRKEY] = { [xmlnsKey]: mapper.xmlNamespace };\n        return result;\n    }\n    return tempDictionary;\n}\n/**\n * Resolves the additionalProperties property from a referenced mapper\n * @param serializer - the serializer containing the entire set of mappers\n * @param mapper - the composite mapper to resolve\n * @param objectName - name of the object being serialized\n */\nfunction resolveAdditionalProperties(serializer, mapper, objectName) {\n    const additionalProperties = mapper.type.additionalProperties;\n    if (!additionalProperties && mapper.type.className) {\n        const modelMapper = resolveReferencedMapper(serializer, mapper, objectName);\n        return modelMapper === null || modelMapper === void 0 ? void 0 : modelMapper.type.additionalProperties;\n    }\n    return additionalProperties;\n}\n/**\n * Finds the mapper referenced by className\n * @param serializer - the serializer containing the entire set of mappers\n * @param mapper - the composite mapper to resolve\n * @param objectName - name of the object being serialized\n */\nfunction resolveReferencedMapper(serializer, mapper, objectName) {\n    const className = mapper.type.className;\n    if (!className) {\n        throw new Error(`Class name for model \"${objectName}\" is not provided in the mapper \"${JSON.stringify(mapper, undefined, 2)}\".`);\n    }\n    return serializer.modelMappers[className];\n}\n/**\n * Resolves a composite mapper's modelProperties.\n * @param serializer - the serializer containing the entire set of mappers\n * @param mapper - the composite mapper to resolve\n */\nfunction resolveModelProperties(serializer, mapper, objectName) {\n    let modelProps = mapper.type.modelProperties;\n    if (!modelProps) {\n        const modelMapper = resolveReferencedMapper(serializer, mapper, objectName);\n        if (!modelMapper) {\n            throw new Error(`mapper() cannot be null or undefined for model \"${mapper.type.className}\".`);\n        }\n        modelProps = modelMapper === null || modelMapper === void 0 ? void 0 : modelMapper.type.modelProperties;\n        if (!modelProps) {\n            throw new Error(`modelProperties cannot be null or undefined in the ` +\n                `mapper \"${JSON.stringify(modelMapper)}\" of type \"${mapper.type.className}\" for object \"${objectName}\".`);\n        }\n    }\n    return modelProps;\n}\nfunction serializeCompositeType(serializer, mapper, object, objectName, isXml, options) {\n    if (getPolymorphicDiscriminatorRecursively(serializer, mapper)) {\n        mapper = getPolymorphicMapper(serializer, mapper, object, \"clientName\");\n    }\n    if (object !== undefined && object !== null) {\n        const payload = {};\n        const modelProps = resolveModelProperties(serializer, mapper, objectName);\n        for (const key of Object.keys(modelProps)) {\n            const propertyMapper = modelProps[key];\n            if (propertyMapper.readOnly) {\n                continue;\n            }\n            let propName;\n            let parentObject = payload;\n            if (serializer.isXML) {\n                if (propertyMapper.xmlIsWrapped) {\n                    propName = propertyMapper.xmlName;\n                }\n                else {\n                    propName = propertyMapper.xmlElementName || propertyMapper.xmlName;\n                }\n            }\n            else {\n                const paths = splitSerializeName(propertyMapper.serializedName);\n                propName = paths.pop();\n                for (const pathName of paths) {\n                    const childObject = parentObject[pathName];\n                    if ((childObject === undefined || childObject === null) &&\n                        ((object[key] !== undefined && object[key] !== null) ||\n                            propertyMapper.defaultValue !== undefined)) {\n                        parentObject[pathName] = {};\n                    }\n                    parentObject = parentObject[pathName];\n                }\n            }\n            if (parentObject !== undefined && parentObject !== null) {\n                if (isXml && mapper.xmlNamespace) {\n                    const xmlnsKey = mapper.xmlNamespacePrefix\n                        ? `xmlns:${mapper.xmlNamespacePrefix}`\n                        : \"xmlns\";\n                    parentObject[_interfaces_js__WEBPACK_IMPORTED_MODULE_1__.XML_ATTRKEY] = Object.assign(Object.assign({}, parentObject[_interfaces_js__WEBPACK_IMPORTED_MODULE_1__.XML_ATTRKEY]), { [xmlnsKey]: mapper.xmlNamespace });\n                }\n                const propertyObjectName = propertyMapper.serializedName !== \"\"\n                    ? objectName + \".\" + propertyMapper.serializedName\n                    : objectName;\n                let toSerialize = object[key];\n                const polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer, mapper);\n                if (polymorphicDiscriminator &&\n                    polymorphicDiscriminator.clientName === key &&\n                    (toSerialize === undefined || toSerialize === null)) {\n                    toSerialize = mapper.serializedName;\n                }\n                const serializedValue = serializer.serialize(propertyMapper, toSerialize, propertyObjectName, options);\n                if (serializedValue !== undefined && propName !== undefined && propName !== null) {\n                    const value = getXmlObjectValue(propertyMapper, serializedValue, isXml, options);\n                    if (isXml && propertyMapper.xmlIsAttribute) {\n                        // XML_ATTRKEY, i.e., $ is the key attributes are kept under in xml2js.\n                        // This keeps things simple while preventing name collision\n                        // with names in user documents.\n                        parentObject[_interfaces_js__WEBPACK_IMPORTED_MODULE_1__.XML_ATTRKEY] = parentObject[_interfaces_js__WEBPACK_IMPORTED_MODULE_1__.XML_ATTRKEY] || {};\n                        parentObject[_interfaces_js__WEBPACK_IMPORTED_MODULE_1__.XML_ATTRKEY][propName] = serializedValue;\n                    }\n                    else if (isXml && propertyMapper.xmlIsWrapped) {\n                        parentObject[propName] = { [propertyMapper.xmlElementName]: value };\n                    }\n                    else {\n                        parentObject[propName] = value;\n                    }\n                }\n            }\n        }\n        const additionalPropertiesMapper = resolveAdditionalProperties(serializer, mapper, objectName);\n        if (additionalPropertiesMapper) {\n            const propNames = Object.keys(modelProps);\n            for (const clientPropName in object) {\n                const isAdditionalProperty = propNames.every((pn) => pn !== clientPropName);\n                if (isAdditionalProperty) {\n                    payload[clientPropName] = serializer.serialize(additionalPropertiesMapper, object[clientPropName], objectName + '[\"' + clientPropName + '\"]', options);\n                }\n            }\n        }\n        return payload;\n    }\n    return object;\n}\nfunction getXmlObjectValue(propertyMapper, serializedValue, isXml, options) {\n    if (!isXml || !propertyMapper.xmlNamespace) {\n        return serializedValue;\n    }\n    const xmlnsKey = propertyMapper.xmlNamespacePrefix\n        ? `xmlns:${propertyMapper.xmlNamespacePrefix}`\n        : \"xmlns\";\n    const xmlNamespace = { [xmlnsKey]: propertyMapper.xmlNamespace };\n    if ([\"Composite\"].includes(propertyMapper.type.name)) {\n        if (serializedValue[_interfaces_js__WEBPACK_IMPORTED_MODULE_1__.XML_ATTRKEY]) {\n            return serializedValue;\n        }\n        else {\n            const result = Object.assign({}, serializedValue);\n            result[_interfaces_js__WEBPACK_IMPORTED_MODULE_1__.XML_ATTRKEY] = xmlNamespace;\n            return result;\n        }\n    }\n    const result = {};\n    result[options.xml.xmlCharKey] = serializedValue;\n    result[_interfaces_js__WEBPACK_IMPORTED_MODULE_1__.XML_ATTRKEY] = xmlNamespace;\n    return result;\n}\nfunction isSpecialXmlProperty(propertyName, options) {\n    return [_interfaces_js__WEBPACK_IMPORTED_MODULE_1__.XML_ATTRKEY, options.xml.xmlCharKey].includes(propertyName);\n}\nfunction deserializeCompositeType(serializer, mapper, responseBody, objectName, options) {\n    var _a, _b;\n    const xmlCharKey = (_a = options.xml.xmlCharKey) !== null && _a !== void 0 ? _a : _interfaces_js__WEBPACK_IMPORTED_MODULE_1__.XML_CHARKEY;\n    if (getPolymorphicDiscriminatorRecursively(serializer, mapper)) {\n        mapper = getPolymorphicMapper(serializer, mapper, responseBody, \"serializedName\");\n    }\n    const modelProps = resolveModelProperties(serializer, mapper, objectName);\n    let instance = {};\n    const handledPropertyNames = [];\n    for (const key of Object.keys(modelProps)) {\n        const propertyMapper = modelProps[key];\n        const paths = splitSerializeName(modelProps[key].serializedName);\n        handledPropertyNames.push(paths[0]);\n        const { serializedName, xmlName, xmlElementName } = propertyMapper;\n        let propertyObjectName = objectName;\n        if (serializedName !== \"\" && serializedName !== undefined) {\n            propertyObjectName = objectName + \".\" + serializedName;\n        }\n        const headerCollectionPrefix = propertyMapper.headerCollectionPrefix;\n        if (headerCollectionPrefix) {\n            const dictionary = {};\n            for (const headerKey of Object.keys(responseBody)) {\n                if (headerKey.startsWith(headerCollectionPrefix)) {\n                    dictionary[headerKey.substring(headerCollectionPrefix.length)] = serializer.deserialize(propertyMapper.type.value, responseBody[headerKey], propertyObjectName, options);\n                }\n                handledPropertyNames.push(headerKey);\n            }\n            instance[key] = dictionary;\n        }\n        else if (serializer.isXML) {\n            if (propertyMapper.xmlIsAttribute && responseBody[_interfaces_js__WEBPACK_IMPORTED_MODULE_1__.XML_ATTRKEY]) {\n                instance[key] = serializer.deserialize(propertyMapper, responseBody[_interfaces_js__WEBPACK_IMPORTED_MODULE_1__.XML_ATTRKEY][xmlName], propertyObjectName, options);\n            }\n            else if (propertyMapper.xmlIsMsText) {\n                if (responseBody[xmlCharKey] !== undefined) {\n                    instance[key] = responseBody[xmlCharKey];\n                }\n                else if (typeof responseBody === \"string\") {\n                    // The special case where xml parser parses \"<Name>content</Name>\" into JSON of\n                    //   `{ name: \"content\"}` instead of `{ name: { \"_\": \"content\" }}`\n                    instance[key] = responseBody;\n                }\n            }\n            else {\n                const propertyName = xmlElementName || xmlName || serializedName;\n                if (propertyMapper.xmlIsWrapped) {\n                    /* a list of <xmlElementName> wrapped by <xmlName>\n                      For the xml example below\n                        <Cors>\n                          <CorsRule>...</CorsRule>\n                          <CorsRule>...</CorsRule>\n                        </Cors>\n                      the responseBody has\n                        {\n                          Cors: {\n                            CorsRule: [{...}, {...}]\n                          }\n                        }\n                      xmlName is \"Cors\" and xmlElementName is\"CorsRule\".\n                    */\n                    const wrapped = responseBody[xmlName];\n                    const elementList = (_b = wrapped === null || wrapped === void 0 ? void 0 : wrapped[xmlElementName]) !== null && _b !== void 0 ? _b : [];\n                    instance[key] = serializer.deserialize(propertyMapper, elementList, propertyObjectName, options);\n                    handledPropertyNames.push(xmlName);\n                }\n                else {\n                    const property = responseBody[propertyName];\n                    instance[key] = serializer.deserialize(propertyMapper, property, propertyObjectName, options);\n                    handledPropertyNames.push(propertyName);\n                }\n            }\n        }\n        else {\n            // deserialize the property if it is present in the provided responseBody instance\n            let propertyInstance;\n            let res = responseBody;\n            // traversing the object step by step.\n            let steps = 0;\n            for (const item of paths) {\n                if (!res)\n                    break;\n                steps++;\n                res = res[item];\n            }\n            // only accept null when reaching the last position of object otherwise it would be undefined\n            if (res === null && steps < paths.length) {\n                res = undefined;\n            }\n            propertyInstance = res;\n            const polymorphicDiscriminator = mapper.type.polymorphicDiscriminator;\n            // checking that the model property name (key)(ex: \"fishtype\") and the\n            // clientName of the polymorphicDiscriminator {metadata} (ex: \"fishtype\")\n            // instead of the serializedName of the polymorphicDiscriminator (ex: \"fish.type\")\n            // is a better approach. The generator is not consistent with escaping '\\.' in the\n            // serializedName of the property (ex: \"fish\\.type\") that is marked as polymorphic discriminator\n            // and the serializedName of the metadata polymorphicDiscriminator (ex: \"fish.type\"). However,\n            // the clientName transformation of the polymorphicDiscriminator (ex: \"fishtype\") and\n            // the transformation of model property name (ex: \"fishtype\") is done consistently.\n            // Hence, it is a safer bet to rely on the clientName of the polymorphicDiscriminator.\n            if (polymorphicDiscriminator &&\n                key === polymorphicDiscriminator.clientName &&\n                (propertyInstance === undefined || propertyInstance === null)) {\n                propertyInstance = mapper.serializedName;\n            }\n            let serializedValue;\n            // paging\n            if (Array.isArray(responseBody[key]) && modelProps[key].serializedName === \"\") {\n                propertyInstance = responseBody[key];\n                const arrayInstance = serializer.deserialize(propertyMapper, propertyInstance, propertyObjectName, options);\n                // Copy over any properties that have already been added into the instance, where they do\n                // not exist on the newly de-serialized array\n                for (const [k, v] of Object.entries(instance)) {\n                    if (!Object.prototype.hasOwnProperty.call(arrayInstance, k)) {\n                        arrayInstance[k] = v;\n                    }\n                }\n                instance = arrayInstance;\n            }\n            else if (propertyInstance !== undefined || propertyMapper.defaultValue !== undefined) {\n                serializedValue = serializer.deserialize(propertyMapper, propertyInstance, propertyObjectName, options);\n                instance[key] = serializedValue;\n            }\n        }\n    }\n    const additionalPropertiesMapper = mapper.type.additionalProperties;\n    if (additionalPropertiesMapper) {\n        const isAdditionalProperty = (responsePropName) => {\n            for (const clientPropName in modelProps) {\n                const paths = splitSerializeName(modelProps[clientPropName].serializedName);\n                if (paths[0] === responsePropName) {\n                    return false;\n                }\n            }\n            return true;\n        };\n        for (const responsePropName in responseBody) {\n            if (isAdditionalProperty(responsePropName)) {\n                instance[responsePropName] = serializer.deserialize(additionalPropertiesMapper, responseBody[responsePropName], objectName + '[\"' + responsePropName + '\"]', options);\n            }\n        }\n    }\n    else if (responseBody && !options.ignoreUnknownProperties) {\n        for (const key of Object.keys(responseBody)) {\n            if (instance[key] === undefined &&\n                !handledPropertyNames.includes(key) &&\n                !isSpecialXmlProperty(key, options)) {\n                instance[key] = responseBody[key];\n            }\n        }\n    }\n    return instance;\n}\nfunction deserializeDictionaryType(serializer, mapper, responseBody, objectName, options) {\n    /* jshint validthis: true */\n    const value = mapper.type.value;\n    if (!value || typeof value !== \"object\") {\n        throw new Error(`\"value\" metadata for a Dictionary must be defined in the ` +\n            `mapper and it must of type \"object\" in ${objectName}`);\n    }\n    if (responseBody) {\n        const tempDictionary = {};\n        for (const key of Object.keys(responseBody)) {\n            tempDictionary[key] = serializer.deserialize(value, responseBody[key], objectName, options);\n        }\n        return tempDictionary;\n    }\n    return responseBody;\n}\nfunction deserializeSequenceType(serializer, mapper, responseBody, objectName, options) {\n    var _a;\n    let element = mapper.type.element;\n    if (!element || typeof element !== \"object\") {\n        throw new Error(`element\" metadata for an Array must be defined in the ` +\n            `mapper and it must of type \"object\" in ${objectName}`);\n    }\n    if (responseBody) {\n        if (!Array.isArray(responseBody)) {\n            // xml2js will interpret a single element array as just the element, so force it to be an array\n            responseBody = [responseBody];\n        }\n        // Quirk: Composite mappers referenced by `element` might\n        // not have *all* properties declared (like uberParent),\n        // so let's try to look up the full definition by name.\n        if (element.type.name === \"Composite\" && element.type.className) {\n            element = (_a = serializer.modelMappers[element.type.className]) !== null && _a !== void 0 ? _a : element;\n        }\n        const tempArray = [];\n        for (let i = 0; i < responseBody.length; i++) {\n            tempArray[i] = serializer.deserialize(element, responseBody[i], `${objectName}[${i}]`, options);\n        }\n        return tempArray;\n    }\n    return responseBody;\n}\nfunction getIndexDiscriminator(discriminators, discriminatorValue, typeName) {\n    const typeNamesToCheck = [typeName];\n    while (typeNamesToCheck.length) {\n        const currentName = typeNamesToCheck.shift();\n        const indexDiscriminator = discriminatorValue === currentName\n            ? discriminatorValue\n            : currentName + \".\" + discriminatorValue;\n        if (Object.prototype.hasOwnProperty.call(discriminators, indexDiscriminator)) {\n            return discriminators[indexDiscriminator];\n        }\n        else {\n            for (const [name, mapper] of Object.entries(discriminators)) {\n                if (name.startsWith(currentName + \".\") &&\n                    mapper.type.uberParent === currentName &&\n                    mapper.type.className) {\n                    typeNamesToCheck.push(mapper.type.className);\n                }\n            }\n        }\n    }\n    return undefined;\n}\nfunction getPolymorphicMapper(serializer, mapper, object, polymorphicPropertyName) {\n    var _a;\n    const polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer, mapper);\n    if (polymorphicDiscriminator) {\n        let discriminatorName = polymorphicDiscriminator[polymorphicPropertyName];\n        if (discriminatorName) {\n            // The serializedName might have \\\\, which we just want to ignore\n            if (polymorphicPropertyName === \"serializedName\") {\n                discriminatorName = discriminatorName.replace(/\\\\/gi, \"\");\n            }\n            const discriminatorValue = object[discriminatorName];\n            const typeName = (_a = mapper.type.uberParent) !== null && _a !== void 0 ? _a : mapper.type.className;\n            if (typeof discriminatorValue === \"string\" && typeName) {\n                const polymorphicMapper = getIndexDiscriminator(serializer.modelMappers.discriminators, discriminatorValue, typeName);\n                if (polymorphicMapper) {\n                    mapper = polymorphicMapper;\n                }\n            }\n        }\n    }\n    return mapper;\n}\nfunction getPolymorphicDiscriminatorRecursively(serializer, mapper) {\n    return (mapper.type.polymorphicDiscriminator ||\n        getPolymorphicDiscriminatorSafely(serializer, mapper.type.uberParent) ||\n        getPolymorphicDiscriminatorSafely(serializer, mapper.type.className));\n}\nfunction getPolymorphicDiscriminatorSafely(serializer, typeName) {\n    return (typeName &&\n        serializer.modelMappers[typeName] &&\n        serializer.modelMappers[typeName].type.polymorphicDiscriminator);\n}\n/**\n * Known types of Mappers\n */\nconst MapperTypeNames = {\n    Base64Url: \"Base64Url\",\n    Boolean: \"Boolean\",\n    ByteArray: \"ByteArray\",\n    Composite: \"Composite\",\n    Date: \"Date\",\n    DateTime: \"DateTime\",\n    DateTimeRfc1123: \"DateTimeRfc1123\",\n    Dictionary: \"Dictionary\",\n    Enum: \"Enum\",\n    Number: \"Number\",\n    Object: \"Object\",\n    Sequence: \"Sequence\",\n    String: \"String\",\n    Stream: \"Stream\",\n    TimeSpan: \"TimeSpan\",\n    UnixTime: \"UnixTime\",\n};\n//# sourceMappingURL=serializer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-client/dist/esm/serializer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-client/dist/esm/serviceClient.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/esm/serviceClient.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ServiceClient: () => (/* binding */ ServiceClient)\n/* harmony export */ });\n/* harmony import */ var _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-rest-pipeline */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/index.js\");\n/* harmony import */ var _pipeline_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./pipeline.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/pipeline.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/utils.js\");\n/* harmony import */ var _httpClientCache_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./httpClientCache.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/httpClientCache.js\");\n/* harmony import */ var _operationHelpers_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operationHelpers.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/operationHelpers.js\");\n/* harmony import */ var _urlHelpers_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./urlHelpers.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/urlHelpers.js\");\n/* harmony import */ var _interfaceHelpers_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./interfaceHelpers.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/interfaceHelpers.js\");\n/* harmony import */ var _log_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./log.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/log.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n\n\n\n\n\n/**\n * Initializes a new instance of the ServiceClient.\n */\nclass ServiceClient {\n    /**\n     * The ServiceClient constructor\n     * @param options - The service client options that govern the behavior of the client.\n     */\n    constructor(options = {}) {\n        var _a, _b;\n        this._requestContentType = options.requestContentType;\n        this._endpoint = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri;\n        if (options.baseUri) {\n            _log_js__WEBPACK_IMPORTED_MODULE_7__.logger.warning(\"The baseUri option for SDK Clients has been deprecated, please use endpoint instead.\");\n        }\n        this._allowInsecureConnection = options.allowInsecureConnection;\n        this._httpClient = options.httpClient || (0,_httpClientCache_js__WEBPACK_IMPORTED_MODULE_3__.getCachedDefaultHttpClient)();\n        this.pipeline = options.pipeline || createDefaultPipeline(options);\n        if ((_b = options.additionalPolicies) === null || _b === void 0 ? void 0 : _b.length) {\n            for (const { policy, position } of options.additionalPolicies) {\n                // Sign happens after Retry and is commonly needed to occur\n                // before policies that intercept post-retry.\n                const afterPhase = position === \"perRetry\" ? \"Sign\" : undefined;\n                this.pipeline.addPolicy(policy, {\n                    afterPhase,\n                });\n            }\n        }\n    }\n    /**\n     * Send the provided httpRequest.\n     */\n    async sendRequest(request) {\n        return this.pipeline.sendRequest(this._httpClient, request);\n    }\n    /**\n     * Send an HTTP request that is populated using the provided OperationSpec.\n     * @typeParam T - The typed result of the request, based on the OperationSpec.\n     * @param operationArguments - The arguments that the HTTP request's templated values will be populated from.\n     * @param operationSpec - The OperationSpec to use to populate the httpRequest.\n     */\n    async sendOperationRequest(operationArguments, operationSpec) {\n        const endpoint = operationSpec.baseUrl || this._endpoint;\n        if (!endpoint) {\n            throw new Error(\"If operationSpec.baseUrl is not specified, then the ServiceClient must have a endpoint string property that contains the base URL to use.\");\n        }\n        // Templatized URLs sometimes reference properties on the ServiceClient child class,\n        // so we have to pass `this` below in order to search these properties if they're\n        // not part of OperationArguments\n        const url = (0,_urlHelpers_js__WEBPACK_IMPORTED_MODULE_5__.getRequestUrl)(endpoint, operationSpec, operationArguments, this);\n        const request = (0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__.createPipelineRequest)({\n            url,\n        });\n        request.method = operationSpec.httpMethod;\n        const operationInfo = (0,_operationHelpers_js__WEBPACK_IMPORTED_MODULE_4__.getOperationRequestInfo)(request);\n        operationInfo.operationSpec = operationSpec;\n        operationInfo.operationArguments = operationArguments;\n        const contentType = operationSpec.contentType || this._requestContentType;\n        if (contentType && operationSpec.requestBody) {\n            request.headers.set(\"Content-Type\", contentType);\n        }\n        const options = operationArguments.options;\n        if (options) {\n            const requestOptions = options.requestOptions;\n            if (requestOptions) {\n                if (requestOptions.timeout) {\n                    request.timeout = requestOptions.timeout;\n                }\n                if (requestOptions.onUploadProgress) {\n                    request.onUploadProgress = requestOptions.onUploadProgress;\n                }\n                if (requestOptions.onDownloadProgress) {\n                    request.onDownloadProgress = requestOptions.onDownloadProgress;\n                }\n                if (requestOptions.shouldDeserialize !== undefined) {\n                    operationInfo.shouldDeserialize = requestOptions.shouldDeserialize;\n                }\n                if (requestOptions.allowInsecureConnection) {\n                    request.allowInsecureConnection = true;\n                }\n            }\n            if (options.abortSignal) {\n                request.abortSignal = options.abortSignal;\n            }\n            if (options.tracingOptions) {\n                request.tracingOptions = options.tracingOptions;\n            }\n        }\n        if (this._allowInsecureConnection) {\n            request.allowInsecureConnection = true;\n        }\n        if (request.streamResponseStatusCodes === undefined) {\n            request.streamResponseStatusCodes = (0,_interfaceHelpers_js__WEBPACK_IMPORTED_MODULE_6__.getStreamingResponseStatusCodes)(operationSpec);\n        }\n        try {\n            const rawResponse = await this.sendRequest(request);\n            const flatResponse = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.flattenResponse)(rawResponse, operationSpec.responses[rawResponse.status]);\n            if (options === null || options === void 0 ? void 0 : options.onResponse) {\n                options.onResponse(rawResponse, flatResponse);\n            }\n            return flatResponse;\n        }\n        catch (error) {\n            if (typeof error === \"object\" && (error === null || error === void 0 ? void 0 : error.response)) {\n                const rawResponse = error.response;\n                const flatResponse = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.flattenResponse)(rawResponse, operationSpec.responses[error.statusCode] || operationSpec.responses[\"default\"]);\n                error.details = flatResponse;\n                if (options === null || options === void 0 ? void 0 : options.onResponse) {\n                    options.onResponse(rawResponse, flatResponse, error);\n                }\n            }\n            throw error;\n        }\n    }\n}\nfunction createDefaultPipeline(options) {\n    const credentialScopes = getCredentialScopes(options);\n    const credentialOptions = options.credential && credentialScopes\n        ? { credentialScopes, credential: options.credential }\n        : undefined;\n    return (0,_pipeline_js__WEBPACK_IMPORTED_MODULE_1__.createClientPipeline)(Object.assign(Object.assign({}, options), { credentialOptions }));\n}\nfunction getCredentialScopes(options) {\n    if (options.credentialScopes) {\n        return options.credentialScopes;\n    }\n    if (options.endpoint) {\n        return `${options.endpoint}/.default`;\n    }\n    if (options.baseUri) {\n        return `${options.baseUri}/.default`;\n    }\n    if (options.credential && !options.credentialScopes) {\n        throw new Error(`When using credentials, the ServiceClientOptions must contain either a endpoint or a credentialScopes. Unable to create a bearerTokenAuthenticationPolicy`);\n    }\n    return undefined;\n}\n//# sourceMappingURL=serviceClient.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-client/dist/esm/serviceClient.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-client/dist/esm/state.js":
/*!***********************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/esm/state.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   state: () => (/* binding */ state)\n/* harmony export */ });\n/* harmony import */ var _commonjs_state_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../commonjs/state.js */ \"(rsc)/./node_modules/@azure/core-client/dist/commonjs/state.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n// @ts-expect-error The recommended approach to sharing module state between ESM and CJS.\n// See https://github.com/isaacs/tshy/blob/main/README.md#module-local-state for additional information.\n\n/**\n * Defines the shared state between CJS and ESM by re-exporting the CJS state.\n */\nconst state = _commonjs_state_js__WEBPACK_IMPORTED_MODULE_0__.state;\n//# sourceMappingURL=state.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtY2xpZW50L2Rpc3QvZXNtL3N0YXRlLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDeUQ7QUFDekQ7QUFDQTtBQUNBO0FBQ08sY0FBYyxxREFBUTtBQUM3QiIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcndpbHNvbi9EZXNrdG9wL3Byb2plY3RzL0VaVml6L25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS1jbGllbnQvZGlzdC9lc20vc3RhdGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4vLyBAdHMtZXhwZWN0LWVycm9yIFRoZSByZWNvbW1lbmRlZCBhcHByb2FjaCB0byBzaGFyaW5nIG1vZHVsZSBzdGF0ZSBiZXR3ZWVuIEVTTSBhbmQgQ0pTLlxuLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9pc2FhY3MvdHNoeS9ibG9iL21haW4vUkVBRE1FLm1kI21vZHVsZS1sb2NhbC1zdGF0ZSBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvbi5cbmltcG9ydCB7IHN0YXRlIGFzIGNqc1N0YXRlIH0gZnJvbSBcIi4uL2NvbW1vbmpzL3N0YXRlLmpzXCI7XG4vKipcbiAqIERlZmluZXMgdGhlIHNoYXJlZCBzdGF0ZSBiZXR3ZWVuIENKUyBhbmQgRVNNIGJ5IHJlLWV4cG9ydGluZyB0aGUgQ0pTIHN0YXRlLlxuICovXG5leHBvcnQgY29uc3Qgc3RhdGUgPSBjanNTdGF0ZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0YXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-client/dist/esm/state.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-client/dist/esm/urlHelpers.js":
/*!****************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/esm/urlHelpers.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   appendQueryParams: () => (/* binding */ appendQueryParams),\n/* harmony export */   getRequestUrl: () => (/* binding */ getRequestUrl)\n/* harmony export */ });\n/* harmony import */ var _operationHelpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./operationHelpers.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/operationHelpers.js\");\n/* harmony import */ var _interfaceHelpers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./interfaceHelpers.js */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/interfaceHelpers.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\nconst CollectionFormatToDelimiterMap = {\n    CSV: \",\",\n    SSV: \" \",\n    Multi: \"Multi\",\n    TSV: \"\\t\",\n    Pipes: \"|\",\n};\nfunction getRequestUrl(baseUri, operationSpec, operationArguments, fallbackObject) {\n    const urlReplacements = calculateUrlReplacements(operationSpec, operationArguments, fallbackObject);\n    let isAbsolutePath = false;\n    let requestUrl = replaceAll(baseUri, urlReplacements);\n    if (operationSpec.path) {\n        let path = replaceAll(operationSpec.path, urlReplacements);\n        // QUIRK: sometimes we get a path component like /{nextLink}\n        // which may be a fully formed URL with a leading /. In that case, we should\n        // remove the leading /\n        if (operationSpec.path === \"/{nextLink}\" && path.startsWith(\"/\")) {\n            path = path.substring(1);\n        }\n        // QUIRK: sometimes we get a path component like {nextLink}\n        // which may be a fully formed URL. In that case, we should\n        // ignore the baseUri.\n        if (isAbsoluteUrl(path)) {\n            requestUrl = path;\n            isAbsolutePath = true;\n        }\n        else {\n            requestUrl = appendPath(requestUrl, path);\n        }\n    }\n    const { queryParams, sequenceParams } = calculateQueryParameters(operationSpec, operationArguments, fallbackObject);\n    /**\n     * Notice that this call sets the `noOverwrite` parameter to true if the `requestUrl`\n     * is an absolute path. This ensures that existing query parameter values in `requestUrl`\n     * do not get overwritten. On the other hand when `requestUrl` is not absolute path, it\n     * is still being built so there is nothing to overwrite.\n     */\n    requestUrl = appendQueryParams(requestUrl, queryParams, sequenceParams, isAbsolutePath);\n    return requestUrl;\n}\nfunction replaceAll(input, replacements) {\n    let result = input;\n    for (const [searchValue, replaceValue] of replacements) {\n        result = result.split(searchValue).join(replaceValue);\n    }\n    return result;\n}\nfunction calculateUrlReplacements(operationSpec, operationArguments, fallbackObject) {\n    var _a;\n    const result = new Map();\n    if ((_a = operationSpec.urlParameters) === null || _a === void 0 ? void 0 : _a.length) {\n        for (const urlParameter of operationSpec.urlParameters) {\n            let urlParameterValue = (0,_operationHelpers_js__WEBPACK_IMPORTED_MODULE_0__.getOperationArgumentValueFromParameter)(operationArguments, urlParameter, fallbackObject);\n            const parameterPathString = (0,_interfaceHelpers_js__WEBPACK_IMPORTED_MODULE_1__.getPathStringFromParameter)(urlParameter);\n            urlParameterValue = operationSpec.serializer.serialize(urlParameter.mapper, urlParameterValue, parameterPathString);\n            if (!urlParameter.skipEncoding) {\n                urlParameterValue = encodeURIComponent(urlParameterValue);\n            }\n            result.set(`{${urlParameter.mapper.serializedName || parameterPathString}}`, urlParameterValue);\n        }\n    }\n    return result;\n}\nfunction isAbsoluteUrl(url) {\n    return url.includes(\"://\");\n}\nfunction appendPath(url, pathToAppend) {\n    if (!pathToAppend) {\n        return url;\n    }\n    const parsedUrl = new URL(url);\n    let newPath = parsedUrl.pathname;\n    if (!newPath.endsWith(\"/\")) {\n        newPath = `${newPath}/`;\n    }\n    if (pathToAppend.startsWith(\"/\")) {\n        pathToAppend = pathToAppend.substring(1);\n    }\n    const searchStart = pathToAppend.indexOf(\"?\");\n    if (searchStart !== -1) {\n        const path = pathToAppend.substring(0, searchStart);\n        const search = pathToAppend.substring(searchStart + 1);\n        newPath = newPath + path;\n        if (search) {\n            parsedUrl.search = parsedUrl.search ? `${parsedUrl.search}&${search}` : search;\n        }\n    }\n    else {\n        newPath = newPath + pathToAppend;\n    }\n    parsedUrl.pathname = newPath;\n    return parsedUrl.toString();\n}\nfunction calculateQueryParameters(operationSpec, operationArguments, fallbackObject) {\n    var _a;\n    const result = new Map();\n    const sequenceParams = new Set();\n    if ((_a = operationSpec.queryParameters) === null || _a === void 0 ? void 0 : _a.length) {\n        for (const queryParameter of operationSpec.queryParameters) {\n            if (queryParameter.mapper.type.name === \"Sequence\" && queryParameter.mapper.serializedName) {\n                sequenceParams.add(queryParameter.mapper.serializedName);\n            }\n            let queryParameterValue = (0,_operationHelpers_js__WEBPACK_IMPORTED_MODULE_0__.getOperationArgumentValueFromParameter)(operationArguments, queryParameter, fallbackObject);\n            if ((queryParameterValue !== undefined && queryParameterValue !== null) ||\n                queryParameter.mapper.required) {\n                queryParameterValue = operationSpec.serializer.serialize(queryParameter.mapper, queryParameterValue, (0,_interfaceHelpers_js__WEBPACK_IMPORTED_MODULE_1__.getPathStringFromParameter)(queryParameter));\n                const delimiter = queryParameter.collectionFormat\n                    ? CollectionFormatToDelimiterMap[queryParameter.collectionFormat]\n                    : \"\";\n                if (Array.isArray(queryParameterValue)) {\n                    // replace null and undefined\n                    queryParameterValue = queryParameterValue.map((item) => {\n                        if (item === null || item === undefined) {\n                            return \"\";\n                        }\n                        return item;\n                    });\n                }\n                if (queryParameter.collectionFormat === \"Multi\" && queryParameterValue.length === 0) {\n                    continue;\n                }\n                else if (Array.isArray(queryParameterValue) &&\n                    (queryParameter.collectionFormat === \"SSV\" || queryParameter.collectionFormat === \"TSV\")) {\n                    queryParameterValue = queryParameterValue.join(delimiter);\n                }\n                if (!queryParameter.skipEncoding) {\n                    if (Array.isArray(queryParameterValue)) {\n                        queryParameterValue = queryParameterValue.map((item) => {\n                            return encodeURIComponent(item);\n                        });\n                    }\n                    else {\n                        queryParameterValue = encodeURIComponent(queryParameterValue);\n                    }\n                }\n                // Join pipes and CSV *after* encoding, or the server will be upset.\n                if (Array.isArray(queryParameterValue) &&\n                    (queryParameter.collectionFormat === \"CSV\" || queryParameter.collectionFormat === \"Pipes\")) {\n                    queryParameterValue = queryParameterValue.join(delimiter);\n                }\n                result.set(queryParameter.mapper.serializedName || (0,_interfaceHelpers_js__WEBPACK_IMPORTED_MODULE_1__.getPathStringFromParameter)(queryParameter), queryParameterValue);\n            }\n        }\n    }\n    return {\n        queryParams: result,\n        sequenceParams,\n    };\n}\nfunction simpleParseQueryParams(queryString) {\n    const result = new Map();\n    if (!queryString || queryString[0] !== \"?\") {\n        return result;\n    }\n    // remove the leading ?\n    queryString = queryString.slice(1);\n    const pairs = queryString.split(\"&\");\n    for (const pair of pairs) {\n        const [name, value] = pair.split(\"=\", 2);\n        const existingValue = result.get(name);\n        if (existingValue) {\n            if (Array.isArray(existingValue)) {\n                existingValue.push(value);\n            }\n            else {\n                result.set(name, [existingValue, value]);\n            }\n        }\n        else {\n            result.set(name, value);\n        }\n    }\n    return result;\n}\n/** @internal */\nfunction appendQueryParams(url, queryParams, sequenceParams, noOverwrite = false) {\n    if (queryParams.size === 0) {\n        return url;\n    }\n    const parsedUrl = new URL(url);\n    // QUIRK: parsedUrl.searchParams will have their name/value pairs decoded, which\n    // can change their meaning to the server, such as in the case of a SAS signature.\n    // To avoid accidentally un-encoding a query param, we parse the key/values ourselves\n    const combinedParams = simpleParseQueryParams(parsedUrl.search);\n    for (const [name, value] of queryParams) {\n        const existingValue = combinedParams.get(name);\n        if (Array.isArray(existingValue)) {\n            if (Array.isArray(value)) {\n                existingValue.push(...value);\n                const valueSet = new Set(existingValue);\n                combinedParams.set(name, Array.from(valueSet));\n            }\n            else {\n                existingValue.push(value);\n            }\n        }\n        else if (existingValue) {\n            if (Array.isArray(value)) {\n                value.unshift(existingValue);\n            }\n            else if (sequenceParams.has(name)) {\n                combinedParams.set(name, [existingValue, value]);\n            }\n            if (!noOverwrite) {\n                combinedParams.set(name, value);\n            }\n        }\n        else {\n            combinedParams.set(name, value);\n        }\n    }\n    const searchPieces = [];\n    for (const [name, value] of combinedParams) {\n        if (typeof value === \"string\") {\n            searchPieces.push(`${name}=${value}`);\n        }\n        else if (Array.isArray(value)) {\n            // QUIRK: If we get an array of values, include multiple key/value pairs\n            for (const subValue of value) {\n                searchPieces.push(`${name}=${subValue}`);\n            }\n        }\n        else {\n            searchPieces.push(`${name}=${value}`);\n        }\n    }\n    // QUIRK: we have to set search manually as searchParams will encode comma when it shouldn't.\n    parsedUrl.search = searchPieces.length ? `?${searchPieces.join(\"&\")}` : \"\";\n    return parsedUrl.toString();\n}\n//# sourceMappingURL=urlHelpers.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-client/dist/esm/urlHelpers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-client/dist/esm/utils.js":
/*!***********************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/esm/utils.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   flattenResponse: () => (/* binding */ flattenResponse),\n/* harmony export */   isDuration: () => (/* binding */ isDuration),\n/* harmony export */   isPrimitiveBody: () => (/* binding */ isPrimitiveBody),\n/* harmony export */   isValidUuid: () => (/* binding */ isValidUuid)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * A type guard for a primitive response body.\n * @param value - Value to test\n *\n * @internal\n */\nfunction isPrimitiveBody(value, mapperTypeName) {\n    return (mapperTypeName !== \"Composite\" &&\n        mapperTypeName !== \"Dictionary\" &&\n        (typeof value === \"string\" ||\n            typeof value === \"number\" ||\n            typeof value === \"boolean\" ||\n            (mapperTypeName === null || mapperTypeName === void 0 ? void 0 : mapperTypeName.match(/^(Date|DateTime|DateTimeRfc1123|UnixTime|ByteArray|Base64Url)$/i)) !==\n                null ||\n            value === undefined ||\n            value === null));\n}\nconst validateISODuration = /^(-|\\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;\n/**\n * Returns true if the given string is in ISO 8601 format.\n * @param value - The value to be validated for ISO 8601 duration format.\n * @internal\n */\nfunction isDuration(value) {\n    return validateISODuration.test(value);\n}\nconst validUuidRegex = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/i;\n/**\n * Returns true if the provided uuid is valid.\n *\n * @param uuid - The uuid that needs to be validated.\n *\n * @internal\n */\nfunction isValidUuid(uuid) {\n    return validUuidRegex.test(uuid);\n}\n/**\n * Maps the response as follows:\n * - wraps the response body if needed (typically if its type is primitive).\n * - returns null if the combination of the headers and the body is empty.\n * - otherwise, returns the combination of the headers and the body.\n *\n * @param responseObject - a representation of the parsed response\n * @returns the response that will be returned to the user which can be null and/or wrapped\n *\n * @internal\n */\nfunction handleNullableResponseAndWrappableBody(responseObject) {\n    const combinedHeadersAndBody = Object.assign(Object.assign({}, responseObject.headers), responseObject.body);\n    if (responseObject.hasNullableType &&\n        Object.getOwnPropertyNames(combinedHeadersAndBody).length === 0) {\n        return responseObject.shouldWrapBody ? { body: null } : null;\n    }\n    else {\n        return responseObject.shouldWrapBody\n            ? Object.assign(Object.assign({}, responseObject.headers), { body: responseObject.body }) : combinedHeadersAndBody;\n    }\n}\n/**\n * Take a `FullOperationResponse` and turn it into a flat\n * response object to hand back to the consumer.\n * @param fullResponse - The processed response from the operation request\n * @param responseSpec - The response map from the OperationSpec\n *\n * @internal\n */\nfunction flattenResponse(fullResponse, responseSpec) {\n    var _a, _b;\n    const parsedHeaders = fullResponse.parsedHeaders;\n    // head methods never have a body, but we return a boolean set to body property\n    // to indicate presence/absence of the resource\n    if (fullResponse.request.method === \"HEAD\") {\n        return Object.assign(Object.assign({}, parsedHeaders), { body: fullResponse.parsedBody });\n    }\n    const bodyMapper = responseSpec && responseSpec.bodyMapper;\n    const isNullable = Boolean(bodyMapper === null || bodyMapper === void 0 ? void 0 : bodyMapper.nullable);\n    const expectedBodyTypeName = bodyMapper === null || bodyMapper === void 0 ? void 0 : bodyMapper.type.name;\n    /** If the body is asked for, we look at the expected body type to handle it */\n    if (expectedBodyTypeName === \"Stream\") {\n        return Object.assign(Object.assign({}, parsedHeaders), { blobBody: fullResponse.blobBody, readableStreamBody: fullResponse.readableStreamBody });\n    }\n    const modelProperties = (expectedBodyTypeName === \"Composite\" &&\n        bodyMapper.type.modelProperties) ||\n        {};\n    const isPageableResponse = Object.keys(modelProperties).some((k) => modelProperties[k].serializedName === \"\");\n    if (expectedBodyTypeName === \"Sequence\" || isPageableResponse) {\n        const arrayResponse = (_a = fullResponse.parsedBody) !== null && _a !== void 0 ? _a : [];\n        for (const key of Object.keys(modelProperties)) {\n            if (modelProperties[key].serializedName) {\n                arrayResponse[key] = (_b = fullResponse.parsedBody) === null || _b === void 0 ? void 0 : _b[key];\n            }\n        }\n        if (parsedHeaders) {\n            for (const key of Object.keys(parsedHeaders)) {\n                arrayResponse[key] = parsedHeaders[key];\n            }\n        }\n        return isNullable &&\n            !fullResponse.parsedBody &&\n            !parsedHeaders &&\n            Object.getOwnPropertyNames(modelProperties).length === 0\n            ? null\n            : arrayResponse;\n    }\n    return handleNullableResponseAndWrappableBody({\n        body: fullResponse.parsedBody,\n        headers: parsedHeaders,\n        hasNullableType: isNullable,\n        shouldWrapBody: isPrimitiveBody(fullResponse.parsedBody, expectedBodyTypeName),\n    });\n}\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-client/dist/esm/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-http-compat/dist/esm/extendedClient.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@azure/core-http-compat/dist/esm/extendedClient.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ExtendedServiceClient: () => (/* binding */ ExtendedServiceClient)\n/* harmony export */ });\n/* harmony import */ var _policies_disableKeepAlivePolicy_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./policies/disableKeepAlivePolicy.js */ \"(rsc)/./node_modules/@azure/core-http-compat/dist/esm/policies/disableKeepAlivePolicy.js\");\n/* harmony import */ var _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/core-rest-pipeline */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/index.js\");\n/* harmony import */ var _azure_core_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @azure/core-client */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/index.js\");\n/* harmony import */ var _response_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./response.js */ \"(rsc)/./node_modules/@azure/core-http-compat/dist/esm/response.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n\n/**\n * Client to provide compatability between core V1 & V2.\n */\nclass ExtendedServiceClient extends _azure_core_client__WEBPACK_IMPORTED_MODULE_2__.ServiceClient {\n    constructor(options) {\n        var _a, _b;\n        super(options);\n        if (((_a = options.keepAliveOptions) === null || _a === void 0 ? void 0 : _a.enable) === false &&\n            !(0,_policies_disableKeepAlivePolicy_js__WEBPACK_IMPORTED_MODULE_0__.pipelineContainsDisableKeepAlivePolicy)(this.pipeline)) {\n            this.pipeline.addPolicy((0,_policies_disableKeepAlivePolicy_js__WEBPACK_IMPORTED_MODULE_0__.createDisableKeepAlivePolicy)());\n        }\n        if (((_b = options.redirectOptions) === null || _b === void 0 ? void 0 : _b.handleRedirects) === false) {\n            this.pipeline.removePolicy({\n                name: _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_1__.redirectPolicyName,\n            });\n        }\n    }\n    /**\n     * Compatible send operation request function.\n     *\n     * @param operationArguments - Operation arguments\n     * @param operationSpec - Operation Spec\n     * @returns\n     */\n    async sendOperationRequest(operationArguments, operationSpec) {\n        var _a;\n        const userProvidedCallBack = (_a = operationArguments === null || operationArguments === void 0 ? void 0 : operationArguments.options) === null || _a === void 0 ? void 0 : _a.onResponse;\n        let lastResponse;\n        function onResponse(rawResponse, flatResponse, error) {\n            lastResponse = rawResponse;\n            if (userProvidedCallBack) {\n                userProvidedCallBack(rawResponse, flatResponse, error);\n            }\n        }\n        operationArguments.options = Object.assign(Object.assign({}, operationArguments.options), { onResponse });\n        const result = await super.sendOperationRequest(operationArguments, operationSpec);\n        if (lastResponse) {\n            Object.defineProperty(result, \"_response\", {\n                value: (0,_response_js__WEBPACK_IMPORTED_MODULE_3__.toCompatResponse)(lastResponse),\n            });\n        }\n        return result;\n    }\n}\n//# sourceMappingURL=extendedClient.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtaHR0cC1jb21wYXQvZGlzdC9lc20vZXh0ZW5kZWRDbGllbnQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBO0FBQzZIO0FBQzlEO0FBQ1o7QUFDRjtBQUNqRDtBQUNBO0FBQ0E7QUFDTyxvQ0FBb0MsNkRBQWE7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLDJHQUFzQztBQUNuRCxvQ0FBb0MsaUdBQTRCO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQix5RUFBa0I7QUFDeEMsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUVBQW1FLGlDQUFpQyxZQUFZO0FBQ2hIO0FBQ0E7QUFDQTtBQUNBLHVCQUF1Qiw4REFBZ0I7QUFDdkMsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWN0b3J3aWxzb24vRGVza3RvcC9wcm9qZWN0cy9FWlZpei9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtaHR0cC1jb21wYXQvZGlzdC9lc20vZXh0ZW5kZWRDbGllbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5pbXBvcnQgeyBjcmVhdGVEaXNhYmxlS2VlcEFsaXZlUG9saWN5LCBwaXBlbGluZUNvbnRhaW5zRGlzYWJsZUtlZXBBbGl2ZVBvbGljeSwgfSBmcm9tIFwiLi9wb2xpY2llcy9kaXNhYmxlS2VlcEFsaXZlUG9saWN5LmpzXCI7XG5pbXBvcnQgeyByZWRpcmVjdFBvbGljeU5hbWUgfSBmcm9tIFwiQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZVwiO1xuaW1wb3J0IHsgU2VydmljZUNsaWVudCB9IGZyb20gXCJAYXp1cmUvY29yZS1jbGllbnRcIjtcbmltcG9ydCB7IHRvQ29tcGF0UmVzcG9uc2UgfSBmcm9tIFwiLi9yZXNwb25zZS5qc1wiO1xuLyoqXG4gKiBDbGllbnQgdG8gcHJvdmlkZSBjb21wYXRhYmlsaXR5IGJldHdlZW4gY29yZSBWMSAmIFYyLlxuICovXG5leHBvcnQgY2xhc3MgRXh0ZW5kZWRTZXJ2aWNlQ2xpZW50IGV4dGVuZHMgU2VydmljZUNsaWVudCB7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICBzdXBlcihvcHRpb25zKTtcbiAgICAgICAgaWYgKCgoX2EgPSBvcHRpb25zLmtlZXBBbGl2ZU9wdGlvbnMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5lbmFibGUpID09PSBmYWxzZSAmJlxuICAgICAgICAgICAgIXBpcGVsaW5lQ29udGFpbnNEaXNhYmxlS2VlcEFsaXZlUG9saWN5KHRoaXMucGlwZWxpbmUpKSB7XG4gICAgICAgICAgICB0aGlzLnBpcGVsaW5lLmFkZFBvbGljeShjcmVhdGVEaXNhYmxlS2VlcEFsaXZlUG9saWN5KCkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoKF9iID0gb3B0aW9ucy5yZWRpcmVjdE9wdGlvbnMpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5oYW5kbGVSZWRpcmVjdHMpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgdGhpcy5waXBlbGluZS5yZW1vdmVQb2xpY3koe1xuICAgICAgICAgICAgICAgIG5hbWU6IHJlZGlyZWN0UG9saWN5TmFtZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbXBhdGlibGUgc2VuZCBvcGVyYXRpb24gcmVxdWVzdCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcGVyYXRpb25Bcmd1bWVudHMgLSBPcGVyYXRpb24gYXJndW1lbnRzXG4gICAgICogQHBhcmFtIG9wZXJhdGlvblNwZWMgLSBPcGVyYXRpb24gU3BlY1xuICAgICAqIEByZXR1cm5zXG4gICAgICovXG4gICAgYXN5bmMgc2VuZE9wZXJhdGlvblJlcXVlc3Qob3BlcmF0aW9uQXJndW1lbnRzLCBvcGVyYXRpb25TcGVjKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgY29uc3QgdXNlclByb3ZpZGVkQ2FsbEJhY2sgPSAoX2EgPSBvcGVyYXRpb25Bcmd1bWVudHMgPT09IG51bGwgfHwgb3BlcmF0aW9uQXJndW1lbnRzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcGVyYXRpb25Bcmd1bWVudHMub3B0aW9ucykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm9uUmVzcG9uc2U7XG4gICAgICAgIGxldCBsYXN0UmVzcG9uc2U7XG4gICAgICAgIGZ1bmN0aW9uIG9uUmVzcG9uc2UocmF3UmVzcG9uc2UsIGZsYXRSZXNwb25zZSwgZXJyb3IpIHtcbiAgICAgICAgICAgIGxhc3RSZXNwb25zZSA9IHJhd1Jlc3BvbnNlO1xuICAgICAgICAgICAgaWYgKHVzZXJQcm92aWRlZENhbGxCYWNrKSB7XG4gICAgICAgICAgICAgICAgdXNlclByb3ZpZGVkQ2FsbEJhY2socmF3UmVzcG9uc2UsIGZsYXRSZXNwb25zZSwgZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG9wZXJhdGlvbkFyZ3VtZW50cy5vcHRpb25zID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBvcGVyYXRpb25Bcmd1bWVudHMub3B0aW9ucyksIHsgb25SZXNwb25zZSB9KTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc3VwZXIuc2VuZE9wZXJhdGlvblJlcXVlc3Qob3BlcmF0aW9uQXJndW1lbnRzLCBvcGVyYXRpb25TcGVjKTtcbiAgICAgICAgaWYgKGxhc3RSZXNwb25zZSkge1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlc3VsdCwgXCJfcmVzcG9uc2VcIiwge1xuICAgICAgICAgICAgICAgIHZhbHVlOiB0b0NvbXBhdFJlc3BvbnNlKGxhc3RSZXNwb25zZSksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV4dGVuZGVkQ2xpZW50LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-http-compat/dist/esm/extendedClient.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-http-compat/dist/esm/httpClientAdapter.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@azure/core-http-compat/dist/esm/httpClientAdapter.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convertHttpClient: () => (/* binding */ convertHttpClient)\n/* harmony export */ });\n/* harmony import */ var _response_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./response.js */ \"(rsc)/./node_modules/@azure/core-http-compat/dist/esm/response.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util.js */ \"(rsc)/./node_modules/@azure/core-http-compat/dist/esm/util.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n/**\n * Converts a RequestPolicy based HttpClient to a PipelineRequest based HttpClient.\n * @param requestPolicyClient - A HttpClient compatible with core-http\n * @returns A HttpClient compatible with core-rest-pipeline\n */\nfunction convertHttpClient(requestPolicyClient) {\n    return {\n        sendRequest: async (request) => {\n            const response = await requestPolicyClient.sendRequest((0,_util_js__WEBPACK_IMPORTED_MODULE_1__.toWebResourceLike)(request, { createProxy: true }));\n            return (0,_response_js__WEBPACK_IMPORTED_MODULE_0__.toPipelineResponse)(response);\n        },\n    };\n}\n//# sourceMappingURL=httpClientAdapter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtaHR0cC1jb21wYXQvZGlzdC9lc20vaHR0cENsaWVudEFkYXB0ZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNtRDtBQUNMO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQSxtRUFBbUUsMkRBQWlCLFlBQVksbUJBQW1CO0FBQ25ILG1CQUFtQixnRUFBa0I7QUFDckMsU0FBUztBQUNUO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcndpbHNvbi9EZXNrdG9wL3Byb2plY3RzL0VaVml6L25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS1odHRwLWNvbXBhdC9kaXN0L2VzbS9odHRwQ2xpZW50QWRhcHRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbmltcG9ydCB7IHRvUGlwZWxpbmVSZXNwb25zZSB9IGZyb20gXCIuL3Jlc3BvbnNlLmpzXCI7XG5pbXBvcnQgeyB0b1dlYlJlc291cmNlTGlrZSB9IGZyb20gXCIuL3V0aWwuanNcIjtcbi8qKlxuICogQ29udmVydHMgYSBSZXF1ZXN0UG9saWN5IGJhc2VkIEh0dHBDbGllbnQgdG8gYSBQaXBlbGluZVJlcXVlc3QgYmFzZWQgSHR0cENsaWVudC5cbiAqIEBwYXJhbSByZXF1ZXN0UG9saWN5Q2xpZW50IC0gQSBIdHRwQ2xpZW50IGNvbXBhdGlibGUgd2l0aCBjb3JlLWh0dHBcbiAqIEByZXR1cm5zIEEgSHR0cENsaWVudCBjb21wYXRpYmxlIHdpdGggY29yZS1yZXN0LXBpcGVsaW5lXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0SHR0cENsaWVudChyZXF1ZXN0UG9saWN5Q2xpZW50KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc2VuZFJlcXVlc3Q6IGFzeW5jIChyZXF1ZXN0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3RQb2xpY3lDbGllbnQuc2VuZFJlcXVlc3QodG9XZWJSZXNvdXJjZUxpa2UocmVxdWVzdCwgeyBjcmVhdGVQcm94eTogdHJ1ZSB9KSk7XG4gICAgICAgICAgICByZXR1cm4gdG9QaXBlbGluZVJlc3BvbnNlKHJlc3BvbnNlKTtcbiAgICAgICAgfSxcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aHR0cENsaWVudEFkYXB0ZXIuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-http-compat/dist/esm/httpClientAdapter.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-http-compat/dist/esm/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@azure/core-http-compat/dist/esm/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ExtendedServiceClient: () => (/* reexport safe */ _extendedClient_js__WEBPACK_IMPORTED_MODULE_0__.ExtendedServiceClient),\n/* harmony export */   HttpPipelineLogLevel: () => (/* reexport safe */ _policies_requestPolicyFactoryPolicy_js__WEBPACK_IMPORTED_MODULE_1__.HttpPipelineLogLevel),\n/* harmony export */   convertHttpClient: () => (/* reexport safe */ _httpClientAdapter_js__WEBPACK_IMPORTED_MODULE_3__.convertHttpClient),\n/* harmony export */   createRequestPolicyFactoryPolicy: () => (/* reexport safe */ _policies_requestPolicyFactoryPolicy_js__WEBPACK_IMPORTED_MODULE_1__.createRequestPolicyFactoryPolicy),\n/* harmony export */   disableKeepAlivePolicyName: () => (/* reexport safe */ _policies_disableKeepAlivePolicy_js__WEBPACK_IMPORTED_MODULE_2__.disableKeepAlivePolicyName),\n/* harmony export */   requestPolicyFactoryPolicyName: () => (/* reexport safe */ _policies_requestPolicyFactoryPolicy_js__WEBPACK_IMPORTED_MODULE_1__.requestPolicyFactoryPolicyName),\n/* harmony export */   toHttpHeadersLike: () => (/* reexport safe */ _util_js__WEBPACK_IMPORTED_MODULE_4__.toHttpHeadersLike)\n/* harmony export */ });\n/* harmony import */ var _extendedClient_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./extendedClient.js */ \"(rsc)/./node_modules/@azure/core-http-compat/dist/esm/extendedClient.js\");\n/* harmony import */ var _policies_requestPolicyFactoryPolicy_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./policies/requestPolicyFactoryPolicy.js */ \"(rsc)/./node_modules/@azure/core-http-compat/dist/esm/policies/requestPolicyFactoryPolicy.js\");\n/* harmony import */ var _policies_disableKeepAlivePolicy_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./policies/disableKeepAlivePolicy.js */ \"(rsc)/./node_modules/@azure/core-http-compat/dist/esm/policies/disableKeepAlivePolicy.js\");\n/* harmony import */ var _httpClientAdapter_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./httpClientAdapter.js */ \"(rsc)/./node_modules/@azure/core-http-compat/dist/esm/httpClientAdapter.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./util.js */ \"(rsc)/./node_modules/@azure/core-http-compat/dist/esm/util.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * A Shim Library that provides compatibility between Core V1 & V2 Packages.\n *\n * @packageDocumentation\n */\n\n\n\n\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtaHR0cC1jb21wYXQvZGlzdC9lc20vaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDNkQ7QUFDc0Y7QUFDakU7QUFDdkI7QUFDWjtBQUMvQyIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcndpbHNvbi9EZXNrdG9wL3Byb2plY3RzL0VaVml6L25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS1odHRwLWNvbXBhdC9kaXN0L2VzbS9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbi8qKlxuICogQSBTaGltIExpYnJhcnkgdGhhdCBwcm92aWRlcyBjb21wYXRpYmlsaXR5IGJldHdlZW4gQ29yZSBWMSAmIFYyIFBhY2thZ2VzLlxuICpcbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuICovXG5leHBvcnQgeyBFeHRlbmRlZFNlcnZpY2VDbGllbnQsIH0gZnJvbSBcIi4vZXh0ZW5kZWRDbGllbnQuanNcIjtcbmV4cG9ydCB7IHJlcXVlc3RQb2xpY3lGYWN0b3J5UG9saWN5TmFtZSwgY3JlYXRlUmVxdWVzdFBvbGljeUZhY3RvcnlQb2xpY3ksIEh0dHBQaXBlbGluZUxvZ0xldmVsLCB9IGZyb20gXCIuL3BvbGljaWVzL3JlcXVlc3RQb2xpY3lGYWN0b3J5UG9saWN5LmpzXCI7XG5leHBvcnQgeyBkaXNhYmxlS2VlcEFsaXZlUG9saWN5TmFtZSB9IGZyb20gXCIuL3BvbGljaWVzL2Rpc2FibGVLZWVwQWxpdmVQb2xpY3kuanNcIjtcbmV4cG9ydCB7IGNvbnZlcnRIdHRwQ2xpZW50IH0gZnJvbSBcIi4vaHR0cENsaWVudEFkYXB0ZXIuanNcIjtcbmV4cG9ydCB7IHRvSHR0cEhlYWRlcnNMaWtlLCB9IGZyb20gXCIuL3V0aWwuanNcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-http-compat/dist/esm/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-http-compat/dist/esm/policies/disableKeepAlivePolicy.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@azure/core-http-compat/dist/esm/policies/disableKeepAlivePolicy.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createDisableKeepAlivePolicy: () => (/* binding */ createDisableKeepAlivePolicy),\n/* harmony export */   disableKeepAlivePolicyName: () => (/* binding */ disableKeepAlivePolicyName),\n/* harmony export */   pipelineContainsDisableKeepAlivePolicy: () => (/* binding */ pipelineContainsDisableKeepAlivePolicy)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nconst disableKeepAlivePolicyName = \"DisableKeepAlivePolicy\";\nfunction createDisableKeepAlivePolicy() {\n    return {\n        name: disableKeepAlivePolicyName,\n        async sendRequest(request, next) {\n            request.disableKeepAlive = true;\n            return next(request);\n        },\n    };\n}\n/**\n * @internal\n */\nfunction pipelineContainsDisableKeepAlivePolicy(pipeline) {\n    return pipeline.getOrderedPolicies().some((policy) => policy.name === disableKeepAlivePolicyName);\n}\n//# sourceMappingURL=disableKeepAlivePolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtaHR0cC1jb21wYXQvZGlzdC9lc20vcG9saWNpZXMvZGlzYWJsZUtlZXBBbGl2ZVBvbGljeS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ087QUFDQTtBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvdmljdG9yd2lsc29uL0Rlc2t0b3AvcHJvamVjdHMvRVpWaXovbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLWh0dHAtY29tcGF0L2Rpc3QvZXNtL3BvbGljaWVzL2Rpc2FibGVLZWVwQWxpdmVQb2xpY3kuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5leHBvcnQgY29uc3QgZGlzYWJsZUtlZXBBbGl2ZVBvbGljeU5hbWUgPSBcIkRpc2FibGVLZWVwQWxpdmVQb2xpY3lcIjtcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVEaXNhYmxlS2VlcEFsaXZlUG9saWN5KCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIG5hbWU6IGRpc2FibGVLZWVwQWxpdmVQb2xpY3lOYW1lLFxuICAgICAgICBhc3luYyBzZW5kUmVxdWVzdChyZXF1ZXN0LCBuZXh0KSB7XG4gICAgICAgICAgICByZXF1ZXN0LmRpc2FibGVLZWVwQWxpdmUgPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuIG5leHQocmVxdWVzdCk7XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwaXBlbGluZUNvbnRhaW5zRGlzYWJsZUtlZXBBbGl2ZVBvbGljeShwaXBlbGluZSkge1xuICAgIHJldHVybiBwaXBlbGluZS5nZXRPcmRlcmVkUG9saWNpZXMoKS5zb21lKChwb2xpY3kpID0+IHBvbGljeS5uYW1lID09PSBkaXNhYmxlS2VlcEFsaXZlUG9saWN5TmFtZSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kaXNhYmxlS2VlcEFsaXZlUG9saWN5LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-http-compat/dist/esm/policies/disableKeepAlivePolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-http-compat/dist/esm/policies/requestPolicyFactoryPolicy.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@azure/core-http-compat/dist/esm/policies/requestPolicyFactoryPolicy.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HttpPipelineLogLevel: () => (/* binding */ HttpPipelineLogLevel),\n/* harmony export */   createRequestPolicyFactoryPolicy: () => (/* binding */ createRequestPolicyFactoryPolicy),\n/* harmony export */   requestPolicyFactoryPolicyName: () => (/* binding */ requestPolicyFactoryPolicyName)\n/* harmony export */ });\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util.js */ \"(rsc)/./node_modules/@azure/core-http-compat/dist/esm/util.js\");\n/* harmony import */ var _response_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../response.js */ \"(rsc)/./node_modules/@azure/core-http-compat/dist/esm/response.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n/**\n * An enum for compatibility with RequestPolicy\n */\nvar HttpPipelineLogLevel;\n(function (HttpPipelineLogLevel) {\n    HttpPipelineLogLevel[HttpPipelineLogLevel[\"ERROR\"] = 1] = \"ERROR\";\n    HttpPipelineLogLevel[HttpPipelineLogLevel[\"INFO\"] = 3] = \"INFO\";\n    HttpPipelineLogLevel[HttpPipelineLogLevel[\"OFF\"] = 0] = \"OFF\";\n    HttpPipelineLogLevel[HttpPipelineLogLevel[\"WARNING\"] = 2] = \"WARNING\";\n})(HttpPipelineLogLevel || (HttpPipelineLogLevel = {}));\nconst mockRequestPolicyOptions = {\n    log(_logLevel, _message) {\n        /* do nothing */\n    },\n    shouldLog(_logLevel) {\n        return false;\n    },\n};\n/**\n * The name of the RequestPolicyFactoryPolicy\n */\nconst requestPolicyFactoryPolicyName = \"RequestPolicyFactoryPolicy\";\n/**\n * A policy that wraps policies written for core-http.\n * @param factories - An array of `RequestPolicyFactory` objects from a core-http pipeline\n */\nfunction createRequestPolicyFactoryPolicy(factories) {\n    const orderedFactories = factories.slice().reverse();\n    return {\n        name: requestPolicyFactoryPolicyName,\n        async sendRequest(request, next) {\n            let httpPipeline = {\n                async sendRequest(httpRequest) {\n                    const response = await next((0,_util_js__WEBPACK_IMPORTED_MODULE_0__.toPipelineRequest)(httpRequest));\n                    return (0,_response_js__WEBPACK_IMPORTED_MODULE_1__.toCompatResponse)(response, { createProxy: true });\n                },\n            };\n            for (const factory of orderedFactories) {\n                httpPipeline = factory.create(httpPipeline, mockRequestPolicyOptions);\n            }\n            const webResourceLike = (0,_util_js__WEBPACK_IMPORTED_MODULE_0__.toWebResourceLike)(request, { createProxy: true });\n            const response = await httpPipeline.sendRequest(webResourceLike);\n            return (0,_response_js__WEBPACK_IMPORTED_MODULE_1__.toPipelineResponse)(response);\n        },\n    };\n}\n//# sourceMappingURL=requestPolicyFactoryPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtaHR0cC1jb21wYXQvZGlzdC9lc20vcG9saWNpZXMvcmVxdWVzdFBvbGljeUZhY3RvcnlQb2xpY3kuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ2tFO0FBQ0k7QUFDdEU7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxvREFBb0Q7QUFDckQ7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0QsMkRBQWlCO0FBQ2pFLDJCQUEyQiw4REFBZ0IsYUFBYSxtQkFBbUI7QUFDM0UsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLDJEQUFpQixZQUFZLG1CQUFtQjtBQUNwRjtBQUNBLG1CQUFtQixnRUFBa0I7QUFDckMsU0FBUztBQUNUO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcndpbHNvbi9EZXNrdG9wL3Byb2plY3RzL0VaVml6L25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS1odHRwLWNvbXBhdC9kaXN0L2VzbS9wb2xpY2llcy9yZXF1ZXN0UG9saWN5RmFjdG9yeVBvbGljeS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbmltcG9ydCB7IHRvUGlwZWxpbmVSZXF1ZXN0LCB0b1dlYlJlc291cmNlTGlrZSB9IGZyb20gXCIuLi91dGlsLmpzXCI7XG5pbXBvcnQgeyB0b0NvbXBhdFJlc3BvbnNlLCB0b1BpcGVsaW5lUmVzcG9uc2UgfSBmcm9tIFwiLi4vcmVzcG9uc2UuanNcIjtcbi8qKlxuICogQW4gZW51bSBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIFJlcXVlc3RQb2xpY3lcbiAqL1xuZXhwb3J0IHZhciBIdHRwUGlwZWxpbmVMb2dMZXZlbDtcbihmdW5jdGlvbiAoSHR0cFBpcGVsaW5lTG9nTGV2ZWwpIHtcbiAgICBIdHRwUGlwZWxpbmVMb2dMZXZlbFtIdHRwUGlwZWxpbmVMb2dMZXZlbFtcIkVSUk9SXCJdID0gMV0gPSBcIkVSUk9SXCI7XG4gICAgSHR0cFBpcGVsaW5lTG9nTGV2ZWxbSHR0cFBpcGVsaW5lTG9nTGV2ZWxbXCJJTkZPXCJdID0gM10gPSBcIklORk9cIjtcbiAgICBIdHRwUGlwZWxpbmVMb2dMZXZlbFtIdHRwUGlwZWxpbmVMb2dMZXZlbFtcIk9GRlwiXSA9IDBdID0gXCJPRkZcIjtcbiAgICBIdHRwUGlwZWxpbmVMb2dMZXZlbFtIdHRwUGlwZWxpbmVMb2dMZXZlbFtcIldBUk5JTkdcIl0gPSAyXSA9IFwiV0FSTklOR1wiO1xufSkoSHR0cFBpcGVsaW5lTG9nTGV2ZWwgfHwgKEh0dHBQaXBlbGluZUxvZ0xldmVsID0ge30pKTtcbmNvbnN0IG1vY2tSZXF1ZXN0UG9saWN5T3B0aW9ucyA9IHtcbiAgICBsb2coX2xvZ0xldmVsLCBfbWVzc2FnZSkge1xuICAgICAgICAvKiBkbyBub3RoaW5nICovXG4gICAgfSxcbiAgICBzaG91bGRMb2coX2xvZ0xldmVsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxufTtcbi8qKlxuICogVGhlIG5hbWUgb2YgdGhlIFJlcXVlc3RQb2xpY3lGYWN0b3J5UG9saWN5XG4gKi9cbmV4cG9ydCBjb25zdCByZXF1ZXN0UG9saWN5RmFjdG9yeVBvbGljeU5hbWUgPSBcIlJlcXVlc3RQb2xpY3lGYWN0b3J5UG9saWN5XCI7XG4vKipcbiAqIEEgcG9saWN5IHRoYXQgd3JhcHMgcG9saWNpZXMgd3JpdHRlbiBmb3IgY29yZS1odHRwLlxuICogQHBhcmFtIGZhY3RvcmllcyAtIEFuIGFycmF5IG9mIGBSZXF1ZXN0UG9saWN5RmFjdG9yeWAgb2JqZWN0cyBmcm9tIGEgY29yZS1odHRwIHBpcGVsaW5lXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVSZXF1ZXN0UG9saWN5RmFjdG9yeVBvbGljeShmYWN0b3JpZXMpIHtcbiAgICBjb25zdCBvcmRlcmVkRmFjdG9yaWVzID0gZmFjdG9yaWVzLnNsaWNlKCkucmV2ZXJzZSgpO1xuICAgIHJldHVybiB7XG4gICAgICAgIG5hbWU6IHJlcXVlc3RQb2xpY3lGYWN0b3J5UG9saWN5TmFtZSxcbiAgICAgICAgYXN5bmMgc2VuZFJlcXVlc3QocmVxdWVzdCwgbmV4dCkge1xuICAgICAgICAgICAgbGV0IGh0dHBQaXBlbGluZSA9IHtcbiAgICAgICAgICAgICAgICBhc3luYyBzZW5kUmVxdWVzdChodHRwUmVxdWVzdCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IG5leHQodG9QaXBlbGluZVJlcXVlc3QoaHR0cFJlcXVlc3QpKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRvQ29tcGF0UmVzcG9uc2UocmVzcG9uc2UsIHsgY3JlYXRlUHJveHk6IHRydWUgfSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGZhY3Rvcnkgb2Ygb3JkZXJlZEZhY3Rvcmllcykge1xuICAgICAgICAgICAgICAgIGh0dHBQaXBlbGluZSA9IGZhY3RvcnkuY3JlYXRlKGh0dHBQaXBlbGluZSwgbW9ja1JlcXVlc3RQb2xpY3lPcHRpb25zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHdlYlJlc291cmNlTGlrZSA9IHRvV2ViUmVzb3VyY2VMaWtlKHJlcXVlc3QsIHsgY3JlYXRlUHJveHk6IHRydWUgfSk7XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGh0dHBQaXBlbGluZS5zZW5kUmVxdWVzdCh3ZWJSZXNvdXJjZUxpa2UpO1xuICAgICAgICAgICAgcmV0dXJuIHRvUGlwZWxpbmVSZXNwb25zZShyZXNwb25zZSk7XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlcXVlc3RQb2xpY3lGYWN0b3J5UG9saWN5LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-http-compat/dist/esm/policies/requestPolicyFactoryPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-http-compat/dist/esm/response.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@azure/core-http-compat/dist/esm/response.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toCompatResponse: () => (/* binding */ toCompatResponse),\n/* harmony export */   toPipelineResponse: () => (/* binding */ toPipelineResponse)\n/* harmony export */ });\n/* harmony import */ var _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-rest-pipeline */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/index.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util.js */ \"(rsc)/./node_modules/@azure/core-http-compat/dist/esm/util.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\nconst originalResponse = Symbol(\"Original FullOperationResponse\");\n/**\n * A helper to convert response objects from the new pipeline back to the old one.\n * @param response - A response object from core-client.\n * @returns A response compatible with `HttpOperationResponse` from core-http.\n */\nfunction toCompatResponse(response, options) {\n    let request = (0,_util_js__WEBPACK_IMPORTED_MODULE_1__.toWebResourceLike)(response.request);\n    let headers = (0,_util_js__WEBPACK_IMPORTED_MODULE_1__.toHttpHeadersLike)(response.headers);\n    if (options === null || options === void 0 ? void 0 : options.createProxy) {\n        return new Proxy(response, {\n            get(target, prop, receiver) {\n                if (prop === \"headers\") {\n                    return headers;\n                }\n                else if (prop === \"request\") {\n                    return request;\n                }\n                else if (prop === originalResponse) {\n                    return response;\n                }\n                return Reflect.get(target, prop, receiver);\n            },\n            set(target, prop, value, receiver) {\n                if (prop === \"headers\") {\n                    headers = value;\n                }\n                else if (prop === \"request\") {\n                    request = value;\n                }\n                return Reflect.set(target, prop, value, receiver);\n            },\n        });\n    }\n    else {\n        return Object.assign(Object.assign({}, response), { request,\n            headers });\n    }\n}\n/**\n * A helper to convert back to a PipelineResponse\n * @param compatResponse - A response compatible with `HttpOperationResponse` from core-http.\n */\nfunction toPipelineResponse(compatResponse) {\n    const extendedCompatResponse = compatResponse;\n    const response = extendedCompatResponse[originalResponse];\n    const headers = (0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__.createHttpHeaders)(compatResponse.headers.toJson({ preserveCase: true }));\n    if (response) {\n        response.headers = headers;\n        return response;\n    }\n    else {\n        return Object.assign(Object.assign({}, compatResponse), { headers, request: (0,_util_js__WEBPACK_IMPORTED_MODULE_1__.toPipelineRequest)(compatResponse.request) });\n    }\n}\n//# sourceMappingURL=response.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtaHR0cC1jb21wYXQvZGlzdC9lc20vcmVzcG9uc2UuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDOEQ7QUFDc0I7QUFDcEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxrQkFBa0IsMkRBQWlCO0FBQ25DLGtCQUFrQiwyREFBaUI7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBLDZDQUE2QyxlQUFlO0FBQzVELHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQSxvQkFBb0IsNEVBQWlCLGlDQUFpQyxvQkFBb0I7QUFDMUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QyxxQkFBcUIsa0JBQWtCLDJEQUFpQiwwQkFBMEI7QUFDL0g7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvdmljdG9yd2lsc29uL0Rlc2t0b3AvcHJvamVjdHMvRVpWaXovbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLWh0dHAtY29tcGF0L2Rpc3QvZXNtL3Jlc3BvbnNlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuaW1wb3J0IHsgY3JlYXRlSHR0cEhlYWRlcnMgfSBmcm9tIFwiQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZVwiO1xuaW1wb3J0IHsgdG9IdHRwSGVhZGVyc0xpa2UsIHRvUGlwZWxpbmVSZXF1ZXN0LCB0b1dlYlJlc291cmNlTGlrZSB9IGZyb20gXCIuL3V0aWwuanNcIjtcbmNvbnN0IG9yaWdpbmFsUmVzcG9uc2UgPSBTeW1ib2woXCJPcmlnaW5hbCBGdWxsT3BlcmF0aW9uUmVzcG9uc2VcIik7XG4vKipcbiAqIEEgaGVscGVyIHRvIGNvbnZlcnQgcmVzcG9uc2Ugb2JqZWN0cyBmcm9tIHRoZSBuZXcgcGlwZWxpbmUgYmFjayB0byB0aGUgb2xkIG9uZS5cbiAqIEBwYXJhbSByZXNwb25zZSAtIEEgcmVzcG9uc2Ugb2JqZWN0IGZyb20gY29yZS1jbGllbnQuXG4gKiBAcmV0dXJucyBBIHJlc3BvbnNlIGNvbXBhdGlibGUgd2l0aCBgSHR0cE9wZXJhdGlvblJlc3BvbnNlYCBmcm9tIGNvcmUtaHR0cC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRvQ29tcGF0UmVzcG9uc2UocmVzcG9uc2UsIG9wdGlvbnMpIHtcbiAgICBsZXQgcmVxdWVzdCA9IHRvV2ViUmVzb3VyY2VMaWtlKHJlc3BvbnNlLnJlcXVlc3QpO1xuICAgIGxldCBoZWFkZXJzID0gdG9IdHRwSGVhZGVyc0xpa2UocmVzcG9uc2UuaGVhZGVycyk7XG4gICAgaWYgKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5jcmVhdGVQcm94eSkge1xuICAgICAgICByZXR1cm4gbmV3IFByb3h5KHJlc3BvbnNlLCB7XG4gICAgICAgICAgICBnZXQodGFyZ2V0LCBwcm9wLCByZWNlaXZlcikge1xuICAgICAgICAgICAgICAgIGlmIChwcm9wID09PSBcImhlYWRlcnNcIikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaGVhZGVycztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAocHJvcCA9PT0gXCJyZXF1ZXN0XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlcXVlc3Q7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHByb3AgPT09IG9yaWdpbmFsUmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gUmVmbGVjdC5nZXQodGFyZ2V0LCBwcm9wLCByZWNlaXZlcik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0KHRhcmdldCwgcHJvcCwgdmFsdWUsIHJlY2VpdmVyKSB7XG4gICAgICAgICAgICAgICAgaWYgKHByb3AgPT09IFwiaGVhZGVyc1wiKSB7XG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnMgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAocHJvcCA9PT0gXCJyZXF1ZXN0XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdCA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gUmVmbGVjdC5zZXQodGFyZ2V0LCBwcm9wLCB2YWx1ZSwgcmVjZWl2ZXIpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXNwb25zZSksIHsgcmVxdWVzdCxcbiAgICAgICAgICAgIGhlYWRlcnMgfSk7XG4gICAgfVxufVxuLyoqXG4gKiBBIGhlbHBlciB0byBjb252ZXJ0IGJhY2sgdG8gYSBQaXBlbGluZVJlc3BvbnNlXG4gKiBAcGFyYW0gY29tcGF0UmVzcG9uc2UgLSBBIHJlc3BvbnNlIGNvbXBhdGlibGUgd2l0aCBgSHR0cE9wZXJhdGlvblJlc3BvbnNlYCBmcm9tIGNvcmUtaHR0cC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRvUGlwZWxpbmVSZXNwb25zZShjb21wYXRSZXNwb25zZSkge1xuICAgIGNvbnN0IGV4dGVuZGVkQ29tcGF0UmVzcG9uc2UgPSBjb21wYXRSZXNwb25zZTtcbiAgICBjb25zdCByZXNwb25zZSA9IGV4dGVuZGVkQ29tcGF0UmVzcG9uc2Vbb3JpZ2luYWxSZXNwb25zZV07XG4gICAgY29uc3QgaGVhZGVycyA9IGNyZWF0ZUh0dHBIZWFkZXJzKGNvbXBhdFJlc3BvbnNlLmhlYWRlcnMudG9Kc29uKHsgcHJlc2VydmVDYXNlOiB0cnVlIH0pKTtcbiAgICBpZiAocmVzcG9uc2UpIHtcbiAgICAgICAgcmVzcG9uc2UuaGVhZGVycyA9IGhlYWRlcnM7XG4gICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGNvbXBhdFJlc3BvbnNlKSwgeyBoZWFkZXJzLCByZXF1ZXN0OiB0b1BpcGVsaW5lUmVxdWVzdChjb21wYXRSZXNwb25zZS5yZXF1ZXN0KSB9KTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXNwb25zZS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-http-compat/dist/esm/response.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-http-compat/dist/esm/util.js":
/*!***************************************************************!*\
  !*** ./node_modules/@azure/core-http-compat/dist/esm/util.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HttpHeaders: () => (/* binding */ HttpHeaders),\n/* harmony export */   toHttpHeadersLike: () => (/* binding */ toHttpHeadersLike),\n/* harmony export */   toPipelineRequest: () => (/* binding */ toPipelineRequest),\n/* harmony export */   toWebResourceLike: () => (/* binding */ toWebResourceLike)\n/* harmony export */ });\n/* harmony import */ var _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-rest-pipeline */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/index.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n// We use a custom symbol to cache a reference to the original request without\n// exposing it on the public interface.\nconst originalRequestSymbol = Symbol(\"Original PipelineRequest\");\n// Symbol.for() will return the same symbol if it's already been created\n// This particular one is used in core-client to handle the case of when a request is\n// cloned but we need to retrieve the OperationSpec and OperationArguments from the\n// original request.\nconst originalClientRequestSymbol = Symbol.for(\"@azure/core-client original request\");\nfunction toPipelineRequest(webResource, options = {}) {\n    const compatWebResource = webResource;\n    const request = compatWebResource[originalRequestSymbol];\n    const headers = (0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__.createHttpHeaders)(webResource.headers.toJson({ preserveCase: true }));\n    if (request) {\n        request.headers = headers;\n        return request;\n    }\n    else {\n        const newRequest = (0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__.createPipelineRequest)({\n            url: webResource.url,\n            method: webResource.method,\n            headers,\n            withCredentials: webResource.withCredentials,\n            timeout: webResource.timeout,\n            requestId: webResource.requestId,\n            abortSignal: webResource.abortSignal,\n            body: webResource.body,\n            formData: webResource.formData,\n            disableKeepAlive: !!webResource.keepAlive,\n            onDownloadProgress: webResource.onDownloadProgress,\n            onUploadProgress: webResource.onUploadProgress,\n            proxySettings: webResource.proxySettings,\n            streamResponseStatusCodes: webResource.streamResponseStatusCodes,\n            agent: webResource.agent,\n        });\n        if (options.originalRequest) {\n            newRequest[originalClientRequestSymbol] =\n                options.originalRequest;\n        }\n        return newRequest;\n    }\n}\nfunction toWebResourceLike(request, options) {\n    var _a;\n    const originalRequest = (_a = options === null || options === void 0 ? void 0 : options.originalRequest) !== null && _a !== void 0 ? _a : request;\n    const webResource = {\n        url: request.url,\n        method: request.method,\n        headers: toHttpHeadersLike(request.headers),\n        withCredentials: request.withCredentials,\n        timeout: request.timeout,\n        requestId: request.headers.get(\"x-ms-client-request-id\") || request.requestId,\n        abortSignal: request.abortSignal,\n        body: request.body,\n        formData: request.formData,\n        keepAlive: !!request.disableKeepAlive,\n        onDownloadProgress: request.onDownloadProgress,\n        onUploadProgress: request.onUploadProgress,\n        proxySettings: request.proxySettings,\n        streamResponseStatusCodes: request.streamResponseStatusCodes,\n        agent: request.agent,\n        clone() {\n            throw new Error(\"Cannot clone a non-proxied WebResourceLike\");\n        },\n        prepare() {\n            throw new Error(\"WebResourceLike.prepare() is not supported by @azure/core-http-compat\");\n        },\n        validateRequestProperties() {\n            /** do nothing */\n        },\n    };\n    if (options === null || options === void 0 ? void 0 : options.createProxy) {\n        return new Proxy(webResource, {\n            get(target, prop, receiver) {\n                if (prop === originalRequestSymbol) {\n                    return request;\n                }\n                else if (prop === \"clone\") {\n                    return () => {\n                        return toWebResourceLike(toPipelineRequest(webResource, { originalRequest }), {\n                            createProxy: true,\n                            originalRequest,\n                        });\n                    };\n                }\n                return Reflect.get(target, prop, receiver);\n            },\n            set(target, prop, value, receiver) {\n                if (prop === \"keepAlive\") {\n                    request.disableKeepAlive = !value;\n                }\n                const passThroughProps = [\n                    \"url\",\n                    \"method\",\n                    \"withCredentials\",\n                    \"timeout\",\n                    \"requestId\",\n                    \"abortSignal\",\n                    \"body\",\n                    \"formData\",\n                    \"onDownloadProgress\",\n                    \"onUploadProgress\",\n                    \"proxySettings\",\n                    \"streamResponseStatusCodes\",\n                    \"agent\",\n                ];\n                if (typeof prop === \"string\" && passThroughProps.includes(prop)) {\n                    request[prop] = value;\n                }\n                return Reflect.set(target, prop, value, receiver);\n            },\n        });\n    }\n    else {\n        return webResource;\n    }\n}\n/**\n * Converts HttpHeaders from core-rest-pipeline to look like\n * HttpHeaders from core-http.\n * @param headers - HttpHeaders from core-rest-pipeline\n * @returns HttpHeaders as they looked in core-http\n */\nfunction toHttpHeadersLike(headers) {\n    return new HttpHeaders(headers.toJSON({ preserveCase: true }));\n}\n/**\n * A collection of HttpHeaders that can be sent with a HTTP request.\n */\nfunction getHeaderKey(headerName) {\n    return headerName.toLowerCase();\n}\n/**\n * A collection of HTTP header key/value pairs.\n */\nclass HttpHeaders {\n    constructor(rawHeaders) {\n        this._headersMap = {};\n        if (rawHeaders) {\n            for (const headerName in rawHeaders) {\n                this.set(headerName, rawHeaders[headerName]);\n            }\n        }\n    }\n    /**\n     * Set a header in this collection with the provided name and value. The name is\n     * case-insensitive.\n     * @param headerName - The name of the header to set. This value is case-insensitive.\n     * @param headerValue - The value of the header to set.\n     */\n    set(headerName, headerValue) {\n        this._headersMap[getHeaderKey(headerName)] = {\n            name: headerName,\n            value: headerValue.toString(),\n        };\n    }\n    /**\n     * Get the header value for the provided header name, or undefined if no header exists in this\n     * collection with the provided name.\n     * @param headerName - The name of the header.\n     */\n    get(headerName) {\n        const header = this._headersMap[getHeaderKey(headerName)];\n        return !header ? undefined : header.value;\n    }\n    /**\n     * Get whether or not this header collection contains a header entry for the provided header name.\n     */\n    contains(headerName) {\n        return !!this._headersMap[getHeaderKey(headerName)];\n    }\n    /**\n     * Remove the header with the provided headerName. Return whether or not the header existed and\n     * was removed.\n     * @param headerName - The name of the header to remove.\n     */\n    remove(headerName) {\n        const result = this.contains(headerName);\n        delete this._headersMap[getHeaderKey(headerName)];\n        return result;\n    }\n    /**\n     * Get the headers that are contained this collection as an object.\n     */\n    rawHeaders() {\n        return this.toJson({ preserveCase: true });\n    }\n    /**\n     * Get the headers that are contained in this collection as an array.\n     */\n    headersArray() {\n        const headers = [];\n        for (const headerKey in this._headersMap) {\n            headers.push(this._headersMap[headerKey]);\n        }\n        return headers;\n    }\n    /**\n     * Get the header names that are contained in this collection.\n     */\n    headerNames() {\n        const headerNames = [];\n        const headers = this.headersArray();\n        for (let i = 0; i < headers.length; ++i) {\n            headerNames.push(headers[i].name);\n        }\n        return headerNames;\n    }\n    /**\n     * Get the header values that are contained in this collection.\n     */\n    headerValues() {\n        const headerValues = [];\n        const headers = this.headersArray();\n        for (let i = 0; i < headers.length; ++i) {\n            headerValues.push(headers[i].value);\n        }\n        return headerValues;\n    }\n    /**\n     * Get the JSON object representation of this HTTP header collection.\n     */\n    toJson(options = {}) {\n        const result = {};\n        if (options.preserveCase) {\n            for (const headerKey in this._headersMap) {\n                const header = this._headersMap[headerKey];\n                result[header.name] = header.value;\n            }\n        }\n        else {\n            for (const headerKey in this._headersMap) {\n                const header = this._headersMap[headerKey];\n                result[getHeaderKey(header.name)] = header.value;\n            }\n        }\n        return result;\n    }\n    /**\n     * Get the string representation of this HTTP header collection.\n     */\n    toString() {\n        return JSON.stringify(this.toJson({ preserveCase: true }));\n    }\n    /**\n     * Create a deep clone/copy of this HttpHeaders collection.\n     */\n    clone() {\n        const resultPreservingCasing = {};\n        for (const headerKey in this._headersMap) {\n            const header = this._headersMap[headerKey];\n            resultPreservingCasing[header.name] = header.value;\n        }\n        return new HttpHeaders(resultPreservingCasing);\n    }\n}\n//# sourceMappingURL=util.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-http-compat/dist/esm/util.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-lro/dist/esm/http/operation.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@azure/core-lro/dist/esm/http/operation.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getErrorFromResponse: () => (/* binding */ getErrorFromResponse),\n/* harmony export */   getOperationLocation: () => (/* binding */ getOperationLocation),\n/* harmony export */   getOperationStatus: () => (/* binding */ getOperationStatus),\n/* harmony export */   getResourceLocation: () => (/* binding */ getResourceLocation),\n/* harmony export */   getStatusFromInitialResponse: () => (/* binding */ getStatusFromInitialResponse),\n/* harmony export */   inferLroMode: () => (/* binding */ inferLroMode),\n/* harmony export */   initHttpOperation: () => (/* binding */ initHttpOperation),\n/* harmony export */   isOperationError: () => (/* binding */ isOperationError),\n/* harmony export */   parseRetryAfter: () => (/* binding */ parseRetryAfter),\n/* harmony export */   pollHttpOperation: () => (/* binding */ pollHttpOperation)\n/* harmony export */ });\n/* harmony import */ var _poller_operation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../poller/operation.js */ \"(rsc)/./node_modules/@azure/core-lro/dist/esm/poller/operation.js\");\n/* harmony import */ var _logger_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../logger.js */ \"(rsc)/./node_modules/@azure/core-lro/dist/esm/logger.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\nfunction getOperationLocationPollingUrl(inputs) {\n    const { azureAsyncOperation, operationLocation } = inputs;\n    return operationLocation !== null && operationLocation !== void 0 ? operationLocation : azureAsyncOperation;\n}\nfunction getLocationHeader(rawResponse) {\n    return rawResponse.headers[\"location\"];\n}\nfunction getOperationLocationHeader(rawResponse) {\n    return rawResponse.headers[\"operation-location\"];\n}\nfunction getAzureAsyncOperationHeader(rawResponse) {\n    return rawResponse.headers[\"azure-asyncoperation\"];\n}\nfunction findResourceLocation(inputs) {\n    var _a;\n    const { location, requestMethod, requestPath, resourceLocationConfig } = inputs;\n    switch (requestMethod) {\n        case \"PUT\": {\n            return requestPath;\n        }\n        case \"DELETE\": {\n            return undefined;\n        }\n        case \"PATCH\": {\n            return (_a = getDefault()) !== null && _a !== void 0 ? _a : requestPath;\n        }\n        default: {\n            return getDefault();\n        }\n    }\n    function getDefault() {\n        switch (resourceLocationConfig) {\n            case \"azure-async-operation\": {\n                return undefined;\n            }\n            case \"original-uri\": {\n                return requestPath;\n            }\n            case \"location\":\n            default: {\n                return location;\n            }\n        }\n    }\n}\nfunction inferLroMode(inputs) {\n    const { rawResponse, requestMethod, requestPath, resourceLocationConfig } = inputs;\n    const operationLocation = getOperationLocationHeader(rawResponse);\n    const azureAsyncOperation = getAzureAsyncOperationHeader(rawResponse);\n    const pollingUrl = getOperationLocationPollingUrl({ operationLocation, azureAsyncOperation });\n    const location = getLocationHeader(rawResponse);\n    const normalizedRequestMethod = requestMethod === null || requestMethod === void 0 ? void 0 : requestMethod.toLocaleUpperCase();\n    if (pollingUrl !== undefined) {\n        return {\n            mode: \"OperationLocation\",\n            operationLocation: pollingUrl,\n            resourceLocation: findResourceLocation({\n                requestMethod: normalizedRequestMethod,\n                location,\n                requestPath,\n                resourceLocationConfig,\n            }),\n        };\n    }\n    else if (location !== undefined) {\n        return {\n            mode: \"ResourceLocation\",\n            operationLocation: location,\n        };\n    }\n    else if (normalizedRequestMethod === \"PUT\" && requestPath) {\n        return {\n            mode: \"Body\",\n            operationLocation: requestPath,\n        };\n    }\n    else {\n        return undefined;\n    }\n}\nfunction transformStatus(inputs) {\n    const { status, statusCode } = inputs;\n    if (typeof status !== \"string\" && status !== undefined) {\n        throw new Error(`Polling was unsuccessful. Expected status to have a string value or no value but it has instead: ${status}. This doesn't necessarily indicate the operation has failed. Check your Azure subscription or resource status for more information.`);\n    }\n    switch (status === null || status === void 0 ? void 0 : status.toLocaleLowerCase()) {\n        case undefined:\n            return toOperationStatus(statusCode);\n        case \"succeeded\":\n            return \"succeeded\";\n        case \"failed\":\n            return \"failed\";\n        case \"running\":\n        case \"accepted\":\n        case \"started\":\n        case \"canceling\":\n        case \"cancelling\":\n            return \"running\";\n        case \"canceled\":\n        case \"cancelled\":\n            return \"canceled\";\n        default: {\n            _logger_js__WEBPACK_IMPORTED_MODULE_1__.logger.verbose(`LRO: unrecognized operation status: ${status}`);\n            return status;\n        }\n    }\n}\nfunction getStatus(rawResponse) {\n    var _a;\n    const { status } = (_a = rawResponse.body) !== null && _a !== void 0 ? _a : {};\n    return transformStatus({ status, statusCode: rawResponse.statusCode });\n}\nfunction getProvisioningState(rawResponse) {\n    var _a, _b;\n    const { properties, provisioningState } = (_a = rawResponse.body) !== null && _a !== void 0 ? _a : {};\n    const status = (_b = properties === null || properties === void 0 ? void 0 : properties.provisioningState) !== null && _b !== void 0 ? _b : provisioningState;\n    return transformStatus({ status, statusCode: rawResponse.statusCode });\n}\nfunction toOperationStatus(statusCode) {\n    if (statusCode === 202) {\n        return \"running\";\n    }\n    else if (statusCode < 300) {\n        return \"succeeded\";\n    }\n    else {\n        return \"failed\";\n    }\n}\nfunction parseRetryAfter({ rawResponse }) {\n    const retryAfter = rawResponse.headers[\"retry-after\"];\n    if (retryAfter !== undefined) {\n        // Retry-After header value is either in HTTP date format, or in seconds\n        const retryAfterInSeconds = parseInt(retryAfter);\n        return isNaN(retryAfterInSeconds)\n            ? calculatePollingIntervalFromDate(new Date(retryAfter))\n            : retryAfterInSeconds * 1000;\n    }\n    return undefined;\n}\nfunction getErrorFromResponse(response) {\n    const error = accessBodyProperty(response, \"error\");\n    if (!error) {\n        _logger_js__WEBPACK_IMPORTED_MODULE_1__.logger.warning(`The long-running operation failed but there is no error property in the response's body`);\n        return;\n    }\n    if (!error.code || !error.message) {\n        _logger_js__WEBPACK_IMPORTED_MODULE_1__.logger.warning(`The long-running operation failed but the error property in the response's body doesn't contain code or message`);\n        return;\n    }\n    return error;\n}\nfunction calculatePollingIntervalFromDate(retryAfterDate) {\n    const timeNow = Math.floor(new Date().getTime());\n    const retryAfterTime = retryAfterDate.getTime();\n    if (timeNow < retryAfterTime) {\n        return retryAfterTime - timeNow;\n    }\n    return undefined;\n}\nfunction getStatusFromInitialResponse(inputs) {\n    const { response, state, operationLocation } = inputs;\n    function helper() {\n        var _a;\n        const mode = (_a = state.config.metadata) === null || _a === void 0 ? void 0 : _a[\"mode\"];\n        switch (mode) {\n            case undefined:\n                return toOperationStatus(response.rawResponse.statusCode);\n            case \"Body\":\n                return getOperationStatus(response, state);\n            default:\n                return \"running\";\n        }\n    }\n    const status = helper();\n    return status === \"running\" && operationLocation === undefined ? \"succeeded\" : status;\n}\n/**\n * Initiates the long-running operation.\n */\nasync function initHttpOperation(inputs) {\n    const { stateProxy, resourceLocationConfig, processResult, lro, setErrorAsResult } = inputs;\n    return (0,_poller_operation_js__WEBPACK_IMPORTED_MODULE_0__.initOperation)({\n        init: async () => {\n            const response = await lro.sendInitialRequest();\n            const config = inferLroMode({\n                rawResponse: response.rawResponse,\n                requestPath: lro.requestPath,\n                requestMethod: lro.requestMethod,\n                resourceLocationConfig,\n            });\n            return Object.assign({ response, operationLocation: config === null || config === void 0 ? void 0 : config.operationLocation, resourceLocation: config === null || config === void 0 ? void 0 : config.resourceLocation }, ((config === null || config === void 0 ? void 0 : config.mode) ? { metadata: { mode: config.mode } } : {}));\n        },\n        stateProxy,\n        processResult: processResult\n            ? ({ flatResponse }, state) => processResult(flatResponse, state)\n            : ({ flatResponse }) => flatResponse,\n        getOperationStatus: getStatusFromInitialResponse,\n        setErrorAsResult,\n    });\n}\nfunction getOperationLocation({ rawResponse }, state) {\n    var _a;\n    const mode = (_a = state.config.metadata) === null || _a === void 0 ? void 0 : _a[\"mode\"];\n    switch (mode) {\n        case \"OperationLocation\": {\n            return getOperationLocationPollingUrl({\n                operationLocation: getOperationLocationHeader(rawResponse),\n                azureAsyncOperation: getAzureAsyncOperationHeader(rawResponse),\n            });\n        }\n        case \"ResourceLocation\": {\n            return getLocationHeader(rawResponse);\n        }\n        case \"Body\":\n        default: {\n            return undefined;\n        }\n    }\n}\nfunction getOperationStatus({ rawResponse }, state) {\n    var _a;\n    const mode = (_a = state.config.metadata) === null || _a === void 0 ? void 0 : _a[\"mode\"];\n    switch (mode) {\n        case \"OperationLocation\": {\n            return getStatus(rawResponse);\n        }\n        case \"ResourceLocation\": {\n            return toOperationStatus(rawResponse.statusCode);\n        }\n        case \"Body\": {\n            return getProvisioningState(rawResponse);\n        }\n        default:\n            throw new Error(`Internal error: Unexpected operation mode: ${mode}`);\n    }\n}\nfunction accessBodyProperty({ flatResponse, rawResponse }, prop) {\n    var _a, _b;\n    return (_a = flatResponse === null || flatResponse === void 0 ? void 0 : flatResponse[prop]) !== null && _a !== void 0 ? _a : (_b = rawResponse.body) === null || _b === void 0 ? void 0 : _b[prop];\n}\nfunction getResourceLocation(res, state) {\n    const loc = accessBodyProperty(res, \"resourceLocation\");\n    if (loc && typeof loc === \"string\") {\n        state.config.resourceLocation = loc;\n    }\n    return state.config.resourceLocation;\n}\nfunction isOperationError(e) {\n    return e.name === \"RestError\";\n}\n/** Polls the long-running operation. */\nasync function pollHttpOperation(inputs) {\n    const { lro, stateProxy, options, processResult, updateState, setDelay, state, setErrorAsResult, } = inputs;\n    return (0,_poller_operation_js__WEBPACK_IMPORTED_MODULE_0__.pollOperation)({\n        state,\n        stateProxy,\n        setDelay,\n        processResult: processResult\n            ? ({ flatResponse }, inputState) => processResult(flatResponse, inputState)\n            : ({ flatResponse }) => flatResponse,\n        getError: getErrorFromResponse,\n        updateState,\n        getPollingInterval: parseRetryAfter,\n        getOperationLocation,\n        getOperationStatus,\n        isOperationError,\n        getResourceLocation,\n        options,\n        /**\n         * The expansion here is intentional because `lro` could be an object that\n         * references an inner this, so we need to preserve a reference to it.\n         */\n        poll: async (location, inputOptions) => lro.sendPollRequest(location, inputOptions),\n        setErrorAsResult,\n    });\n}\n//# sourceMappingURL=operation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-lro/dist/esm/http/operation.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-lro/dist/esm/http/poller.js":
/*!**************************************************************!*\
  !*** ./node_modules/@azure/core-lro/dist/esm/http/poller.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createHttpPoller: () => (/* binding */ createHttpPoller)\n/* harmony export */ });\n/* harmony import */ var _operation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./operation.js */ \"(rsc)/./node_modules/@azure/core-lro/dist/esm/http/operation.js\");\n/* harmony import */ var _poller_poller_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../poller/poller.js */ \"(rsc)/./node_modules/@azure/core-lro/dist/esm/poller/poller.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n/**\n * Creates a poller that can be used to poll a long-running operation.\n * @param lro - Description of the long-running operation\n * @param options - options to configure the poller\n * @returns an initialized poller\n */\nasync function createHttpPoller(lro, options) {\n    const { resourceLocationConfig, intervalInMs, processResult, restoreFrom, updateState, withOperationLocation, resolveOnUnsuccessful = false, } = options || {};\n    return (0,_poller_poller_js__WEBPACK_IMPORTED_MODULE_1__.buildCreatePoller)({\n        getStatusFromInitialResponse: _operation_js__WEBPACK_IMPORTED_MODULE_0__.getStatusFromInitialResponse,\n        getStatusFromPollResponse: _operation_js__WEBPACK_IMPORTED_MODULE_0__.getOperationStatus,\n        isOperationError: _operation_js__WEBPACK_IMPORTED_MODULE_0__.isOperationError,\n        getOperationLocation: _operation_js__WEBPACK_IMPORTED_MODULE_0__.getOperationLocation,\n        getResourceLocation: _operation_js__WEBPACK_IMPORTED_MODULE_0__.getResourceLocation,\n        getPollingInterval: _operation_js__WEBPACK_IMPORTED_MODULE_0__.parseRetryAfter,\n        getError: _operation_js__WEBPACK_IMPORTED_MODULE_0__.getErrorFromResponse,\n        resolveOnUnsuccessful,\n    })({\n        init: async () => {\n            const response = await lro.sendInitialRequest();\n            const config = (0,_operation_js__WEBPACK_IMPORTED_MODULE_0__.inferLroMode)({\n                rawResponse: response.rawResponse,\n                requestPath: lro.requestPath,\n                requestMethod: lro.requestMethod,\n                resourceLocationConfig,\n            });\n            return Object.assign({ response, operationLocation: config === null || config === void 0 ? void 0 : config.operationLocation, resourceLocation: config === null || config === void 0 ? void 0 : config.resourceLocation }, ((config === null || config === void 0 ? void 0 : config.mode) ? { metadata: { mode: config.mode } } : {}));\n        },\n        poll: lro.sendPollRequest,\n    }, {\n        intervalInMs,\n        withOperationLocation,\n        restoreFrom,\n        updateState,\n        processResult: processResult\n            ? ({ flatResponse }, state) => processResult(flatResponse, state)\n            : ({ flatResponse }) => flatResponse,\n    });\n}\n//# sourceMappingURL=poller.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtbHJvL2Rpc3QvZXNtL2h0dHAvcG9sbGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDcU07QUFDN0k7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxZQUFZLHVJQUF1STtBQUNuSixXQUFXLG9FQUFpQjtBQUM1QixvQ0FBb0M7QUFDcEMsbUNBQW1DLDZEQUFrQjtBQUNyRCx3QkFBd0I7QUFDeEIsNEJBQTRCO0FBQzVCLDJCQUEyQjtBQUMzQiw0QkFBNEIsMERBQWU7QUFDM0Msa0JBQWtCLCtEQUFvQjtBQUN0QztBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsMkJBQTJCLDJEQUFZO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLG1DQUFtQyxrTUFBa00scUVBQXFFLFlBQVksc0JBQXNCLElBQUk7QUFDaFYsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsY0FBYztBQUMvQixpQkFBaUIsY0FBYztBQUMvQixLQUFLO0FBQ0w7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcndpbHNvbi9EZXNrdG9wL3Byb2plY3RzL0VaVml6L25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS1scm8vZGlzdC9lc20vaHR0cC9wb2xsZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5pbXBvcnQgeyBnZXRFcnJvckZyb21SZXNwb25zZSwgZ2V0T3BlcmF0aW9uTG9jYXRpb24sIGdldE9wZXJhdGlvblN0YXR1cywgZ2V0UmVzb3VyY2VMb2NhdGlvbiwgZ2V0U3RhdHVzRnJvbUluaXRpYWxSZXNwb25zZSwgaW5mZXJMcm9Nb2RlLCBpc09wZXJhdGlvbkVycm9yLCBwYXJzZVJldHJ5QWZ0ZXIsIH0gZnJvbSBcIi4vb3BlcmF0aW9uLmpzXCI7XG5pbXBvcnQgeyBidWlsZENyZWF0ZVBvbGxlciB9IGZyb20gXCIuLi9wb2xsZXIvcG9sbGVyLmpzXCI7XG4vKipcbiAqIENyZWF0ZXMgYSBwb2xsZXIgdGhhdCBjYW4gYmUgdXNlZCB0byBwb2xsIGEgbG9uZy1ydW5uaW5nIG9wZXJhdGlvbi5cbiAqIEBwYXJhbSBscm8gLSBEZXNjcmlwdGlvbiBvZiB0aGUgbG9uZy1ydW5uaW5nIG9wZXJhdGlvblxuICogQHBhcmFtIG9wdGlvbnMgLSBvcHRpb25zIHRvIGNvbmZpZ3VyZSB0aGUgcG9sbGVyXG4gKiBAcmV0dXJucyBhbiBpbml0aWFsaXplZCBwb2xsZXJcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZUh0dHBQb2xsZXIobHJvLCBvcHRpb25zKSB7XG4gICAgY29uc3QgeyByZXNvdXJjZUxvY2F0aW9uQ29uZmlnLCBpbnRlcnZhbEluTXMsIHByb2Nlc3NSZXN1bHQsIHJlc3RvcmVGcm9tLCB1cGRhdGVTdGF0ZSwgd2l0aE9wZXJhdGlvbkxvY2F0aW9uLCByZXNvbHZlT25VbnN1Y2Nlc3NmdWwgPSBmYWxzZSwgfSA9IG9wdGlvbnMgfHwge307XG4gICAgcmV0dXJuIGJ1aWxkQ3JlYXRlUG9sbGVyKHtcbiAgICAgICAgZ2V0U3RhdHVzRnJvbUluaXRpYWxSZXNwb25zZSxcbiAgICAgICAgZ2V0U3RhdHVzRnJvbVBvbGxSZXNwb25zZTogZ2V0T3BlcmF0aW9uU3RhdHVzLFxuICAgICAgICBpc09wZXJhdGlvbkVycm9yLFxuICAgICAgICBnZXRPcGVyYXRpb25Mb2NhdGlvbixcbiAgICAgICAgZ2V0UmVzb3VyY2VMb2NhdGlvbixcbiAgICAgICAgZ2V0UG9sbGluZ0ludGVydmFsOiBwYXJzZVJldHJ5QWZ0ZXIsXG4gICAgICAgIGdldEVycm9yOiBnZXRFcnJvckZyb21SZXNwb25zZSxcbiAgICAgICAgcmVzb2x2ZU9uVW5zdWNjZXNzZnVsLFxuICAgIH0pKHtcbiAgICAgICAgaW5pdDogYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBscm8uc2VuZEluaXRpYWxSZXF1ZXN0KCk7XG4gICAgICAgICAgICBjb25zdCBjb25maWcgPSBpbmZlckxyb01vZGUoe1xuICAgICAgICAgICAgICAgIHJhd1Jlc3BvbnNlOiByZXNwb25zZS5yYXdSZXNwb25zZSxcbiAgICAgICAgICAgICAgICByZXF1ZXN0UGF0aDogbHJvLnJlcXVlc3RQYXRoLFxuICAgICAgICAgICAgICAgIHJlcXVlc3RNZXRob2Q6IGxyby5yZXF1ZXN0TWV0aG9kLFxuICAgICAgICAgICAgICAgIHJlc291cmNlTG9jYXRpb25Db25maWcsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHsgcmVzcG9uc2UsIG9wZXJhdGlvbkxvY2F0aW9uOiBjb25maWcgPT09IG51bGwgfHwgY29uZmlnID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjb25maWcub3BlcmF0aW9uTG9jYXRpb24sIHJlc291cmNlTG9jYXRpb246IGNvbmZpZyA9PT0gbnVsbCB8fCBjb25maWcgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNvbmZpZy5yZXNvdXJjZUxvY2F0aW9uIH0sICgoY29uZmlnID09PSBudWxsIHx8IGNvbmZpZyA9PT0gdm9pZCAwID8gdm9pZCAwIDogY29uZmlnLm1vZGUpID8geyBtZXRhZGF0YTogeyBtb2RlOiBjb25maWcubW9kZSB9IH0gOiB7fSkpO1xuICAgICAgICB9LFxuICAgICAgICBwb2xsOiBscm8uc2VuZFBvbGxSZXF1ZXN0LFxuICAgIH0sIHtcbiAgICAgICAgaW50ZXJ2YWxJbk1zLFxuICAgICAgICB3aXRoT3BlcmF0aW9uTG9jYXRpb24sXG4gICAgICAgIHJlc3RvcmVGcm9tLFxuICAgICAgICB1cGRhdGVTdGF0ZSxcbiAgICAgICAgcHJvY2Vzc1Jlc3VsdDogcHJvY2Vzc1Jlc3VsdFxuICAgICAgICAgICAgPyAoeyBmbGF0UmVzcG9uc2UgfSwgc3RhdGUpID0+IHByb2Nlc3NSZXN1bHQoZmxhdFJlc3BvbnNlLCBzdGF0ZSlcbiAgICAgICAgICAgIDogKHsgZmxhdFJlc3BvbnNlIH0pID0+IGZsYXRSZXNwb25zZSxcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBvbGxlci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-lro/dist/esm/http/poller.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-lro/dist/esm/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@azure/core-lro/dist/esm/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LroEngine: () => (/* reexport safe */ _legacy_lroEngine_index_js__WEBPACK_IMPORTED_MODULE_1__.LroEngine),\n/* harmony export */   Poller: () => (/* reexport safe */ _legacy_poller_js__WEBPACK_IMPORTED_MODULE_2__.Poller),\n/* harmony export */   PollerCancelledError: () => (/* reexport safe */ _legacy_poller_js__WEBPACK_IMPORTED_MODULE_2__.PollerCancelledError),\n/* harmony export */   PollerStoppedError: () => (/* reexport safe */ _legacy_poller_js__WEBPACK_IMPORTED_MODULE_2__.PollerStoppedError),\n/* harmony export */   createHttpPoller: () => (/* reexport safe */ _http_poller_js__WEBPACK_IMPORTED_MODULE_0__.createHttpPoller)\n/* harmony export */ });\n/* harmony import */ var _http_poller_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./http/poller.js */ \"(rsc)/./node_modules/@azure/core-lro/dist/esm/http/poller.js\");\n/* harmony import */ var _legacy_lroEngine_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./legacy/lroEngine/index.js */ \"(rsc)/./node_modules/@azure/core-lro/dist/esm/legacy/lroEngine/index.js\");\n/* harmony import */ var _legacy_poller_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./legacy/poller.js */ \"(rsc)/./node_modules/@azure/core-lro/dist/esm/legacy/poller.js\");\n/* harmony import */ var _legacy_pollOperation_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./legacy/pollOperation.js */ \"(rsc)/./node_modules/@azure/core-lro/dist/esm/legacy/pollOperation.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * This can be uncommented to expose the protocol-agnostic poller\n */\n// export {\n//   BuildCreatePollerOptions,\n//   Operation,\n//   CreatePollerOptions,\n//   OperationConfig,\n//   RestorableOperationState,\n// } from \"./poller/models\";\n// export { buildCreatePoller } from \"./poller/poller\";\n/** legacy */\n\n\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtbHJvL2Rpc3QvZXNtL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDb0Q7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLFlBQVksb0JBQW9CO0FBQ2hDO0FBQzRDO0FBQ1Q7QUFDTztBQUMxQyIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcndpbHNvbi9EZXNrdG9wL3Byb2plY3RzL0VaVml6L25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS1scm8vZGlzdC9lc20vaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5leHBvcnQgeyBjcmVhdGVIdHRwUG9sbGVyIH0gZnJvbSBcIi4vaHR0cC9wb2xsZXIuanNcIjtcbi8qKlxuICogVGhpcyBjYW4gYmUgdW5jb21tZW50ZWQgdG8gZXhwb3NlIHRoZSBwcm90b2NvbC1hZ25vc3RpYyBwb2xsZXJcbiAqL1xuLy8gZXhwb3J0IHtcbi8vICAgQnVpbGRDcmVhdGVQb2xsZXJPcHRpb25zLFxuLy8gICBPcGVyYXRpb24sXG4vLyAgIENyZWF0ZVBvbGxlck9wdGlvbnMsXG4vLyAgIE9wZXJhdGlvbkNvbmZpZyxcbi8vICAgUmVzdG9yYWJsZU9wZXJhdGlvblN0YXRlLFxuLy8gfSBmcm9tIFwiLi9wb2xsZXIvbW9kZWxzXCI7XG4vLyBleHBvcnQgeyBidWlsZENyZWF0ZVBvbGxlciB9IGZyb20gXCIuL3BvbGxlci9wb2xsZXJcIjtcbi8qKiBsZWdhY3kgKi9cbmV4cG9ydCAqIGZyb20gXCIuL2xlZ2FjeS9scm9FbmdpbmUvaW5kZXguanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2xlZ2FjeS9wb2xsZXIuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2xlZ2FjeS9wb2xsT3BlcmF0aW9uLmpzXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-lro/dist/esm/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-lro/dist/esm/legacy/lroEngine/index.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@azure/core-lro/dist/esm/legacy/lroEngine/index.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LroEngine: () => (/* reexport safe */ _lroEngine_js__WEBPACK_IMPORTED_MODULE_0__.LroEngine)\n/* harmony export */ });\n/* harmony import */ var _lroEngine_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lroEngine.js */ \"(rsc)/./node_modules/@azure/core-lro/dist/esm/legacy/lroEngine/lroEngine.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtbHJvL2Rpc3QvZXNtL2xlZ2FjeS9scm9FbmdpbmUvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQzJDO0FBQzNDIiwic291cmNlcyI6WyIvVXNlcnMvdmljdG9yd2lsc29uL0Rlc2t0b3AvcHJvamVjdHMvRVpWaXovbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLWxyby9kaXN0L2VzbS9sZWdhY3kvbHJvRW5naW5lL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuZXhwb3J0IHsgTHJvRW5naW5lIH0gZnJvbSBcIi4vbHJvRW5naW5lLmpzXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-lro/dist/esm/legacy/lroEngine/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-lro/dist/esm/legacy/lroEngine/lroEngine.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@azure/core-lro/dist/esm/legacy/lroEngine/lroEngine.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LroEngine: () => (/* binding */ LroEngine)\n/* harmony export */ });\n/* harmony import */ var _operation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./operation.js */ \"(rsc)/./node_modules/@azure/core-lro/dist/esm/legacy/lroEngine/operation.js\");\n/* harmony import */ var _poller_constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../poller/constants.js */ \"(rsc)/./node_modules/@azure/core-lro/dist/esm/poller/constants.js\");\n/* harmony import */ var _poller_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../poller.js */ \"(rsc)/./node_modules/@azure/core-lro/dist/esm/legacy/poller.js\");\n/* harmony import */ var _poller_operation_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../poller/operation.js */ \"(rsc)/./node_modules/@azure/core-lro/dist/esm/poller/operation.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\n\n/**\n * The LRO Engine, a class that performs polling.\n */\nclass LroEngine extends _poller_js__WEBPACK_IMPORTED_MODULE_2__.Poller {\n    constructor(lro, options) {\n        const { intervalInMs = _poller_constants_js__WEBPACK_IMPORTED_MODULE_1__.POLL_INTERVAL_IN_MS, resumeFrom, resolveOnUnsuccessful = false, isDone, lroResourceLocationConfig, processResult, updateState, } = options || {};\n        const state = resumeFrom\n            ? (0,_poller_operation_js__WEBPACK_IMPORTED_MODULE_3__.deserializeState)(resumeFrom)\n            : {};\n        const operation = new _operation_js__WEBPACK_IMPORTED_MODULE_0__.GenericPollOperation(state, lro, !resolveOnUnsuccessful, lroResourceLocationConfig, processResult, updateState, isDone);\n        super(operation);\n        this.resolveOnUnsuccessful = resolveOnUnsuccessful;\n        this.config = { intervalInMs: intervalInMs };\n        operation.setPollerConfig(this.config);\n    }\n    /**\n     * The method used by the poller to wait before attempting to update its operation.\n     */\n    delay() {\n        return new Promise((resolve) => setTimeout(() => resolve(), this.config.intervalInMs));\n    }\n}\n//# sourceMappingURL=lroEngine.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtbHJvL2Rpc3QvZXNtL2xlZ2FjeS9scm9FbmdpbmUvbHJvRW5naW5lLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNzRDtBQUNVO0FBQzFCO0FBQ3VCO0FBQzdEO0FBQ0E7QUFDQTtBQUNPLHdCQUF3Qiw4Q0FBTTtBQUNyQztBQUNBLGdCQUFnQixlQUFlLHFFQUFtQiw4R0FBOEc7QUFDaEs7QUFDQSxjQUFjLHNFQUFnQjtBQUM5QjtBQUNBLDhCQUE4QiwrREFBb0I7QUFDbEQ7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcndpbHNvbi9EZXNrdG9wL3Byb2plY3RzL0VaVml6L25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS1scm8vZGlzdC9lc20vbGVnYWN5L2xyb0VuZ2luZS9scm9FbmdpbmUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5pbXBvcnQgeyBHZW5lcmljUG9sbE9wZXJhdGlvbiB9IGZyb20gXCIuL29wZXJhdGlvbi5qc1wiO1xuaW1wb3J0IHsgUE9MTF9JTlRFUlZBTF9JTl9NUyB9IGZyb20gXCIuLi8uLi9wb2xsZXIvY29uc3RhbnRzLmpzXCI7XG5pbXBvcnQgeyBQb2xsZXIgfSBmcm9tIFwiLi4vcG9sbGVyLmpzXCI7XG5pbXBvcnQgeyBkZXNlcmlhbGl6ZVN0YXRlIH0gZnJvbSBcIi4uLy4uL3BvbGxlci9vcGVyYXRpb24uanNcIjtcbi8qKlxuICogVGhlIExSTyBFbmdpbmUsIGEgY2xhc3MgdGhhdCBwZXJmb3JtcyBwb2xsaW5nLlxuICovXG5leHBvcnQgY2xhc3MgTHJvRW5naW5lIGV4dGVuZHMgUG9sbGVyIHtcbiAgICBjb25zdHJ1Y3Rvcihscm8sIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgeyBpbnRlcnZhbEluTXMgPSBQT0xMX0lOVEVSVkFMX0lOX01TLCByZXN1bWVGcm9tLCByZXNvbHZlT25VbnN1Y2Nlc3NmdWwgPSBmYWxzZSwgaXNEb25lLCBscm9SZXNvdXJjZUxvY2F0aW9uQ29uZmlnLCBwcm9jZXNzUmVzdWx0LCB1cGRhdGVTdGF0ZSwgfSA9IG9wdGlvbnMgfHwge307XG4gICAgICAgIGNvbnN0IHN0YXRlID0gcmVzdW1lRnJvbVxuICAgICAgICAgICAgPyBkZXNlcmlhbGl6ZVN0YXRlKHJlc3VtZUZyb20pXG4gICAgICAgICAgICA6IHt9O1xuICAgICAgICBjb25zdCBvcGVyYXRpb24gPSBuZXcgR2VuZXJpY1BvbGxPcGVyYXRpb24oc3RhdGUsIGxybywgIXJlc29sdmVPblVuc3VjY2Vzc2Z1bCwgbHJvUmVzb3VyY2VMb2NhdGlvbkNvbmZpZywgcHJvY2Vzc1Jlc3VsdCwgdXBkYXRlU3RhdGUsIGlzRG9uZSk7XG4gICAgICAgIHN1cGVyKG9wZXJhdGlvbik7XG4gICAgICAgIHRoaXMucmVzb2x2ZU9uVW5zdWNjZXNzZnVsID0gcmVzb2x2ZU9uVW5zdWNjZXNzZnVsO1xuICAgICAgICB0aGlzLmNvbmZpZyA9IHsgaW50ZXJ2YWxJbk1zOiBpbnRlcnZhbEluTXMgfTtcbiAgICAgICAgb3BlcmF0aW9uLnNldFBvbGxlckNvbmZpZyh0aGlzLmNvbmZpZyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBtZXRob2QgdXNlZCBieSB0aGUgcG9sbGVyIHRvIHdhaXQgYmVmb3JlIGF0dGVtcHRpbmcgdG8gdXBkYXRlIGl0cyBvcGVyYXRpb24uXG4gICAgICovXG4gICAgZGVsYXkoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gc2V0VGltZW91dCgoKSA9PiByZXNvbHZlKCksIHRoaXMuY29uZmlnLmludGVydmFsSW5NcykpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxyb0VuZ2luZS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-lro/dist/esm/legacy/lroEngine/lroEngine.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-lro/dist/esm/legacy/lroEngine/operation.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@azure/core-lro/dist/esm/legacy/lroEngine/operation.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GenericPollOperation: () => (/* binding */ GenericPollOperation)\n/* harmony export */ });\n/* harmony import */ var _http_operation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../http/operation.js */ \"(rsc)/./node_modules/@azure/core-lro/dist/esm/http/operation.js\");\n/* harmony import */ var _logger_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../logger.js */ \"(rsc)/./node_modules/@azure/core-lro/dist/esm/logger.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\nconst createStateProxy = () => ({\n    initState: (config) => ({ config, isStarted: true }),\n    setCanceled: (state) => (state.isCancelled = true),\n    setError: (state, error) => (state.error = error),\n    setResult: (state, result) => (state.result = result),\n    setRunning: (state) => (state.isStarted = true),\n    setSucceeded: (state) => (state.isCompleted = true),\n    setFailed: () => {\n        /** empty body */\n    },\n    getError: (state) => state.error,\n    getResult: (state) => state.result,\n    isCanceled: (state) => !!state.isCancelled,\n    isFailed: (state) => !!state.error,\n    isRunning: (state) => !!state.isStarted,\n    isSucceeded: (state) => Boolean(state.isCompleted && !state.isCancelled && !state.error),\n});\nclass GenericPollOperation {\n    constructor(state, lro, setErrorAsResult, lroResourceLocationConfig, processResult, updateState, isDone) {\n        this.state = state;\n        this.lro = lro;\n        this.setErrorAsResult = setErrorAsResult;\n        this.lroResourceLocationConfig = lroResourceLocationConfig;\n        this.processResult = processResult;\n        this.updateState = updateState;\n        this.isDone = isDone;\n    }\n    setPollerConfig(pollerConfig) {\n        this.pollerConfig = pollerConfig;\n    }\n    async update(options) {\n        var _a;\n        const stateProxy = createStateProxy();\n        if (!this.state.isStarted) {\n            this.state = Object.assign(Object.assign({}, this.state), (await (0,_http_operation_js__WEBPACK_IMPORTED_MODULE_0__.initHttpOperation)({\n                lro: this.lro,\n                stateProxy,\n                resourceLocationConfig: this.lroResourceLocationConfig,\n                processResult: this.processResult,\n                setErrorAsResult: this.setErrorAsResult,\n            })));\n        }\n        const updateState = this.updateState;\n        const isDone = this.isDone;\n        if (!this.state.isCompleted && this.state.error === undefined) {\n            await (0,_http_operation_js__WEBPACK_IMPORTED_MODULE_0__.pollHttpOperation)({\n                lro: this.lro,\n                state: this.state,\n                stateProxy,\n                processResult: this.processResult,\n                updateState: updateState\n                    ? (state, { rawResponse }) => updateState(state, rawResponse)\n                    : undefined,\n                isDone: isDone\n                    ? ({ flatResponse }, state) => isDone(flatResponse, state)\n                    : undefined,\n                options,\n                setDelay: (intervalInMs) => {\n                    this.pollerConfig.intervalInMs = intervalInMs;\n                },\n                setErrorAsResult: this.setErrorAsResult,\n            });\n        }\n        (_a = options === null || options === void 0 ? void 0 : options.fireProgress) === null || _a === void 0 ? void 0 : _a.call(options, this.state);\n        return this;\n    }\n    async cancel() {\n        _logger_js__WEBPACK_IMPORTED_MODULE_1__.logger.error(\"`cancelOperation` is deprecated because it wasn't implemented\");\n        return this;\n    }\n    /**\n     * Serializes the Poller operation.\n     */\n    toString() {\n        return JSON.stringify({\n            state: this.state,\n        });\n    }\n}\n//# sourceMappingURL=operation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtbHJvL2Rpc3QvZXNtL2xlZ2FjeS9scm9FbmdpbmUvb3BlcmF0aW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDK0U7QUFDdEM7QUFDekM7QUFDQSw4QkFBOEIseUJBQXlCO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDTTtBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdURBQXVELHNCQUFzQixxRUFBaUI7QUFDOUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixxRUFBaUI7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyxhQUFhO0FBQzdDO0FBQ0E7QUFDQSx5QkFBeUIsY0FBYztBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSw4Q0FBTTtBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvdmljdG9yd2lsc29uL0Rlc2t0b3AvcHJvamVjdHMvRVpWaXovbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLWxyby9kaXN0L2VzbS9sZWdhY3kvbHJvRW5naW5lL29wZXJhdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbmltcG9ydCB7IGluaXRIdHRwT3BlcmF0aW9uLCBwb2xsSHR0cE9wZXJhdGlvbiB9IGZyb20gXCIuLi8uLi9odHRwL29wZXJhdGlvbi5qc1wiO1xuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSBcIi4uLy4uL2xvZ2dlci5qc1wiO1xuY29uc3QgY3JlYXRlU3RhdGVQcm94eSA9ICgpID0+ICh7XG4gICAgaW5pdFN0YXRlOiAoY29uZmlnKSA9PiAoeyBjb25maWcsIGlzU3RhcnRlZDogdHJ1ZSB9KSxcbiAgICBzZXRDYW5jZWxlZDogKHN0YXRlKSA9PiAoc3RhdGUuaXNDYW5jZWxsZWQgPSB0cnVlKSxcbiAgICBzZXRFcnJvcjogKHN0YXRlLCBlcnJvcikgPT4gKHN0YXRlLmVycm9yID0gZXJyb3IpLFxuICAgIHNldFJlc3VsdDogKHN0YXRlLCByZXN1bHQpID0+IChzdGF0ZS5yZXN1bHQgPSByZXN1bHQpLFxuICAgIHNldFJ1bm5pbmc6IChzdGF0ZSkgPT4gKHN0YXRlLmlzU3RhcnRlZCA9IHRydWUpLFxuICAgIHNldFN1Y2NlZWRlZDogKHN0YXRlKSA9PiAoc3RhdGUuaXNDb21wbGV0ZWQgPSB0cnVlKSxcbiAgICBzZXRGYWlsZWQ6ICgpID0+IHtcbiAgICAgICAgLyoqIGVtcHR5IGJvZHkgKi9cbiAgICB9LFxuICAgIGdldEVycm9yOiAoc3RhdGUpID0+IHN0YXRlLmVycm9yLFxuICAgIGdldFJlc3VsdDogKHN0YXRlKSA9PiBzdGF0ZS5yZXN1bHQsXG4gICAgaXNDYW5jZWxlZDogKHN0YXRlKSA9PiAhIXN0YXRlLmlzQ2FuY2VsbGVkLFxuICAgIGlzRmFpbGVkOiAoc3RhdGUpID0+ICEhc3RhdGUuZXJyb3IsXG4gICAgaXNSdW5uaW5nOiAoc3RhdGUpID0+ICEhc3RhdGUuaXNTdGFydGVkLFxuICAgIGlzU3VjY2VlZGVkOiAoc3RhdGUpID0+IEJvb2xlYW4oc3RhdGUuaXNDb21wbGV0ZWQgJiYgIXN0YXRlLmlzQ2FuY2VsbGVkICYmICFzdGF0ZS5lcnJvciksXG59KTtcbmV4cG9ydCBjbGFzcyBHZW5lcmljUG9sbE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3Ioc3RhdGUsIGxybywgc2V0RXJyb3JBc1Jlc3VsdCwgbHJvUmVzb3VyY2VMb2NhdGlvbkNvbmZpZywgcHJvY2Vzc1Jlc3VsdCwgdXBkYXRlU3RhdGUsIGlzRG9uZSkge1xuICAgICAgICB0aGlzLnN0YXRlID0gc3RhdGU7XG4gICAgICAgIHRoaXMubHJvID0gbHJvO1xuICAgICAgICB0aGlzLnNldEVycm9yQXNSZXN1bHQgPSBzZXRFcnJvckFzUmVzdWx0O1xuICAgICAgICB0aGlzLmxyb1Jlc291cmNlTG9jYXRpb25Db25maWcgPSBscm9SZXNvdXJjZUxvY2F0aW9uQ29uZmlnO1xuICAgICAgICB0aGlzLnByb2Nlc3NSZXN1bHQgPSBwcm9jZXNzUmVzdWx0O1xuICAgICAgICB0aGlzLnVwZGF0ZVN0YXRlID0gdXBkYXRlU3RhdGU7XG4gICAgICAgIHRoaXMuaXNEb25lID0gaXNEb25lO1xuICAgIH1cbiAgICBzZXRQb2xsZXJDb25maWcocG9sbGVyQ29uZmlnKSB7XG4gICAgICAgIHRoaXMucG9sbGVyQ29uZmlnID0gcG9sbGVyQ29uZmlnO1xuICAgIH1cbiAgICBhc3luYyB1cGRhdGUob3B0aW9ucykge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGNvbnN0IHN0YXRlUHJveHkgPSBjcmVhdGVTdGF0ZVByb3h5KCk7XG4gICAgICAgIGlmICghdGhpcy5zdGF0ZS5pc1N0YXJ0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHRoaXMuc3RhdGUpLCAoYXdhaXQgaW5pdEh0dHBPcGVyYXRpb24oe1xuICAgICAgICAgICAgICAgIGxybzogdGhpcy5scm8sXG4gICAgICAgICAgICAgICAgc3RhdGVQcm94eSxcbiAgICAgICAgICAgICAgICByZXNvdXJjZUxvY2F0aW9uQ29uZmlnOiB0aGlzLmxyb1Jlc291cmNlTG9jYXRpb25Db25maWcsXG4gICAgICAgICAgICAgICAgcHJvY2Vzc1Jlc3VsdDogdGhpcy5wcm9jZXNzUmVzdWx0LFxuICAgICAgICAgICAgICAgIHNldEVycm9yQXNSZXN1bHQ6IHRoaXMuc2V0RXJyb3JBc1Jlc3VsdCxcbiAgICAgICAgICAgIH0pKSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdXBkYXRlU3RhdGUgPSB0aGlzLnVwZGF0ZVN0YXRlO1xuICAgICAgICBjb25zdCBpc0RvbmUgPSB0aGlzLmlzRG9uZTtcbiAgICAgICAgaWYgKCF0aGlzLnN0YXRlLmlzQ29tcGxldGVkICYmIHRoaXMuc3RhdGUuZXJyb3IgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgYXdhaXQgcG9sbEh0dHBPcGVyYXRpb24oe1xuICAgICAgICAgICAgICAgIGxybzogdGhpcy5scm8sXG4gICAgICAgICAgICAgICAgc3RhdGU6IHRoaXMuc3RhdGUsXG4gICAgICAgICAgICAgICAgc3RhdGVQcm94eSxcbiAgICAgICAgICAgICAgICBwcm9jZXNzUmVzdWx0OiB0aGlzLnByb2Nlc3NSZXN1bHQsXG4gICAgICAgICAgICAgICAgdXBkYXRlU3RhdGU6IHVwZGF0ZVN0YXRlXG4gICAgICAgICAgICAgICAgICAgID8gKHN0YXRlLCB7IHJhd1Jlc3BvbnNlIH0pID0+IHVwZGF0ZVN0YXRlKHN0YXRlLCByYXdSZXNwb25zZSlcbiAgICAgICAgICAgICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgaXNEb25lOiBpc0RvbmVcbiAgICAgICAgICAgICAgICAgICAgPyAoeyBmbGF0UmVzcG9uc2UgfSwgc3RhdGUpID0+IGlzRG9uZShmbGF0UmVzcG9uc2UsIHN0YXRlKVxuICAgICAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBvcHRpb25zLFxuICAgICAgICAgICAgICAgIHNldERlbGF5OiAoaW50ZXJ2YWxJbk1zKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucG9sbGVyQ29uZmlnLmludGVydmFsSW5NcyA9IGludGVydmFsSW5NcztcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNldEVycm9yQXNSZXN1bHQ6IHRoaXMuc2V0RXJyb3JBc1Jlc3VsdCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIChfYSA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5maXJlUHJvZ3Jlc3MpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKG9wdGlvbnMsIHRoaXMuc3RhdGUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgYXN5bmMgY2FuY2VsKCkge1xuICAgICAgICBsb2dnZXIuZXJyb3IoXCJgY2FuY2VsT3BlcmF0aW9uYCBpcyBkZXByZWNhdGVkIGJlY2F1c2UgaXQgd2Fzbid0IGltcGxlbWVudGVkXCIpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VyaWFsaXplcyB0aGUgUG9sbGVyIG9wZXJhdGlvbi5cbiAgICAgKi9cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgIHN0YXRlOiB0aGlzLnN0YXRlLFxuICAgICAgICB9KTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vcGVyYXRpb24uanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-lro/dist/esm/legacy/lroEngine/operation.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-lro/dist/esm/legacy/pollOperation.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@azure/core-lro/dist/esm/legacy/pollOperation.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n//# sourceMappingURL=pollOperation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtbHJvL2Rpc3QvZXNtL2xlZ2FjeS9wb2xsT3BlcmF0aW9uLmpzIiwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ1U7QUFDViIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcndpbHNvbi9EZXNrdG9wL3Byb2plY3RzL0VaVml6L25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS1scm8vZGlzdC9lc20vbGVnYWN5L3BvbGxPcGVyYXRpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5leHBvcnQge307XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wb2xsT3BlcmF0aW9uLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-lro/dist/esm/legacy/pollOperation.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-lro/dist/esm/legacy/poller.js":
/*!****************************************************************!*\
  !*** ./node_modules/@azure/core-lro/dist/esm/legacy/poller.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Poller: () => (/* binding */ Poller),\n/* harmony export */   PollerCancelledError: () => (/* binding */ PollerCancelledError),\n/* harmony export */   PollerStoppedError: () => (/* binding */ PollerStoppedError)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * When a poller is manually stopped through the `stopPolling` method,\n * the poller will be rejected with an instance of the PollerStoppedError.\n */\nclass PollerStoppedError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = \"PollerStoppedError\";\n        Object.setPrototypeOf(this, PollerStoppedError.prototype);\n    }\n}\n/**\n * When the operation is cancelled, the poller will be rejected with an instance\n * of the PollerCancelledError.\n */\nclass PollerCancelledError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = \"PollerCancelledError\";\n        Object.setPrototypeOf(this, PollerCancelledError.prototype);\n    }\n}\n/**\n * A class that represents the definition of a program that polls through consecutive requests\n * until it reaches a state of completion.\n *\n * A poller can be executed manually, by polling request by request by calling to the `poll()` method repeatedly, until its operation is completed.\n * It also provides a way to wait until the operation completes, by calling `pollUntilDone()` and waiting until the operation finishes.\n * Pollers can also request the cancellation of the ongoing process to whom is providing the underlying long running operation.\n *\n * ```ts\n * const poller = new MyPoller();\n *\n * // Polling just once:\n * await poller.poll();\n *\n * // We can try to cancel the request here, by calling:\n * //\n * //     await poller.cancelOperation();\n * //\n *\n * // Getting the final result:\n * const result = await poller.pollUntilDone();\n * ```\n *\n * The Poller is defined by two types, a type representing the state of the poller, which\n * must include a basic set of properties from `PollOperationState<TResult>`,\n * and a return type defined by `TResult`, which can be anything.\n *\n * The Poller class implements the `PollerLike` interface, which allows poller implementations to avoid having\n * to export the Poller's class directly, and instead only export the already instantiated poller with the PollerLike type.\n *\n * ```ts\n * class Client {\n *   public async makePoller: PollerLike<MyOperationState, MyResult> {\n *     const poller = new MyPoller({});\n *     // It might be preferred to return the poller after the first request is made,\n *     // so that some information can be obtained right away.\n *     await poller.poll();\n *     return poller;\n *   }\n * }\n *\n * const poller: PollerLike<MyOperationState, MyResult> = myClient.makePoller();\n * ```\n *\n * A poller can be created through its constructor, then it can be polled until it's completed.\n * At any point in time, the state of the poller can be obtained without delay through the getOperationState method.\n * At any point in time, the intermediate forms of the result type can be requested without delay.\n * Once the underlying operation is marked as completed, the poller will stop and the final value will be returned.\n *\n * ```ts\n * const poller = myClient.makePoller();\n * const state: MyOperationState = poller.getOperationState();\n *\n * // The intermediate result can be obtained at any time.\n * const result: MyResult | undefined = poller.getResult();\n *\n * // The final result can only be obtained after the poller finishes.\n * const result: MyResult = await poller.pollUntilDone();\n * ```\n *\n */\n// eslint-disable-next-line no-use-before-define\nclass Poller {\n    /**\n     * A poller needs to be initialized by passing in at least the basic properties of the `PollOperation<TState, TResult>`.\n     *\n     * When writing an implementation of a Poller, this implementation needs to deal with the initialization\n     * of any custom state beyond the basic definition of the poller. The basic poller assumes that the poller's\n     * operation has already been defined, at least its basic properties. The code below shows how to approach\n     * the definition of the constructor of a new custom poller.\n     *\n     * ```ts\n     * export class MyPoller extends Poller<MyOperationState, string> {\n     *   constructor({\n     *     // Anything you might need outside of the basics\n     *   }) {\n     *     let state: MyOperationState = {\n     *       privateProperty: private,\n     *       publicProperty: public,\n     *     };\n     *\n     *     const operation = {\n     *       state,\n     *       update,\n     *       cancel,\n     *       toString\n     *     }\n     *\n     *     // Sending the operation to the parent's constructor.\n     *     super(operation);\n     *\n     *     // You can assign more local properties here.\n     *   }\n     * }\n     * ```\n     *\n     * Inside of this constructor, a new promise is created. This will be used to\n     * tell the user when the poller finishes (see `pollUntilDone()`). The promise's\n     * resolve and reject methods are also used internally to control when to resolve\n     * or reject anyone waiting for the poller to finish.\n     *\n     * The constructor of a custom implementation of a poller is where any serialized version of\n     * a previous poller's operation should be deserialized into the operation sent to the\n     * base constructor. For example:\n     *\n     * ```ts\n     * export class MyPoller extends Poller<MyOperationState, string> {\n     *   constructor(\n     *     baseOperation: string | undefined\n     *   ) {\n     *     let state: MyOperationState = {};\n     *     if (baseOperation) {\n     *       state = {\n     *         ...JSON.parse(baseOperation).state,\n     *         ...state\n     *       };\n     *     }\n     *     const operation = {\n     *       state,\n     *       // ...\n     *     }\n     *     super(operation);\n     *   }\n     * }\n     * ```\n     *\n     * @param operation - Must contain the basic properties of `PollOperation<State, TResult>`.\n     */\n    constructor(operation) {\n        /** controls whether to throw an error if the operation failed or was canceled. */\n        this.resolveOnUnsuccessful = false;\n        this.stopped = true;\n        this.pollProgressCallbacks = [];\n        this.operation = operation;\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n        // This prevents the UnhandledPromiseRejectionWarning in node.js from being thrown.\n        // The above warning would get thrown if `poller.poll` is called, it returns an error,\n        // and pullUntilDone did not have a .catch or await try/catch on it's return value.\n        this.promise.catch(() => {\n            /* intentionally blank */\n        });\n    }\n    /**\n     * Starts a loop that will break only if the poller is done\n     * or if the poller is stopped.\n     */\n    async startPolling(pollOptions = {}) {\n        if (this.stopped) {\n            this.stopped = false;\n        }\n        while (!this.isStopped() && !this.isDone()) {\n            await this.poll(pollOptions);\n            await this.delay();\n        }\n    }\n    /**\n     * pollOnce does one polling, by calling to the update method of the underlying\n     * poll operation to make any relevant change effective.\n     *\n     * It only optionally receives an object with an abortSignal property, from \\@azure/abort-controller's AbortSignalLike.\n     *\n     * @param options - Optional properties passed to the operation's update method.\n     */\n    async pollOnce(options = {}) {\n        if (!this.isDone()) {\n            this.operation = await this.operation.update({\n                abortSignal: options.abortSignal,\n                fireProgress: this.fireProgress.bind(this),\n            });\n        }\n        this.processUpdatedState();\n    }\n    /**\n     * fireProgress calls the functions passed in via onProgress the method of the poller.\n     *\n     * It loops over all of the callbacks received from onProgress, and executes them, sending them\n     * the current operation state.\n     *\n     * @param state - The current operation state.\n     */\n    fireProgress(state) {\n        for (const callback of this.pollProgressCallbacks) {\n            callback(state);\n        }\n    }\n    /**\n     * Invokes the underlying operation's cancel method.\n     */\n    async cancelOnce(options = {}) {\n        this.operation = await this.operation.cancel(options);\n    }\n    /**\n     * Returns a promise that will resolve once a single polling request finishes.\n     * It does this by calling the update method of the Poller's operation.\n     *\n     * It only optionally receives an object with an abortSignal property, from \\@azure/abort-controller's AbortSignalLike.\n     *\n     * @param options - Optional properties passed to the operation's update method.\n     */\n    poll(options = {}) {\n        if (!this.pollOncePromise) {\n            this.pollOncePromise = this.pollOnce(options);\n            const clearPollOncePromise = () => {\n                this.pollOncePromise = undefined;\n            };\n            this.pollOncePromise.then(clearPollOncePromise, clearPollOncePromise).catch(this.reject);\n        }\n        return this.pollOncePromise;\n    }\n    processUpdatedState() {\n        if (this.operation.state.error) {\n            this.stopped = true;\n            if (!this.resolveOnUnsuccessful) {\n                this.reject(this.operation.state.error);\n                throw this.operation.state.error;\n            }\n        }\n        if (this.operation.state.isCancelled) {\n            this.stopped = true;\n            if (!this.resolveOnUnsuccessful) {\n                const error = new PollerCancelledError(\"Operation was canceled\");\n                this.reject(error);\n                throw error;\n            }\n        }\n        if (this.isDone() && this.resolve) {\n            // If the poller has finished polling, this means we now have a result.\n            // However, it can be the case that TResult is instantiated to void, so\n            // we are not expecting a result anyway. To assert that we might not\n            // have a result eventually after finishing polling, we cast the result\n            // to TResult.\n            this.resolve(this.getResult());\n        }\n    }\n    /**\n     * Returns a promise that will resolve once the underlying operation is completed.\n     */\n    async pollUntilDone(pollOptions = {}) {\n        if (this.stopped) {\n            this.startPolling(pollOptions).catch(this.reject);\n        }\n        // This is needed because the state could have been updated by\n        // `cancelOperation`, e.g. the operation is canceled or an error occurred.\n        this.processUpdatedState();\n        return this.promise;\n    }\n    /**\n     * Invokes the provided callback after each polling is completed,\n     * sending the current state of the poller's operation.\n     *\n     * It returns a method that can be used to stop receiving updates on the given callback function.\n     */\n    onProgress(callback) {\n        this.pollProgressCallbacks.push(callback);\n        return () => {\n            this.pollProgressCallbacks = this.pollProgressCallbacks.filter((c) => c !== callback);\n        };\n    }\n    /**\n     * Returns true if the poller has finished polling.\n     */\n    isDone() {\n        const state = this.operation.state;\n        return Boolean(state.isCompleted || state.isCancelled || state.error);\n    }\n    /**\n     * Stops the poller from continuing to poll.\n     */\n    stopPolling() {\n        if (!this.stopped) {\n            this.stopped = true;\n            if (this.reject) {\n                this.reject(new PollerStoppedError(\"This poller is already stopped\"));\n            }\n        }\n    }\n    /**\n     * Returns true if the poller is stopped.\n     */\n    isStopped() {\n        return this.stopped;\n    }\n    /**\n     * Attempts to cancel the underlying operation.\n     *\n     * It only optionally receives an object with an abortSignal property, from \\@azure/abort-controller's AbortSignalLike.\n     *\n     * If it's called again before it finishes, it will throw an error.\n     *\n     * @param options - Optional properties passed to the operation's update method.\n     */\n    cancelOperation(options = {}) {\n        if (!this.cancelPromise) {\n            this.cancelPromise = this.cancelOnce(options);\n        }\n        else if (options.abortSignal) {\n            throw new Error(\"A cancel request is currently pending\");\n        }\n        return this.cancelPromise;\n    }\n    /**\n     * Returns the state of the operation.\n     *\n     * Even though TState will be the same type inside any of the methods of any extension of the Poller class,\n     * implementations of the pollers can customize what's shared with the public by writing their own\n     * version of the `getOperationState` method, and by defining two types, one representing the internal state of the poller\n     * and a public type representing a safe to share subset of the properties of the internal state.\n     * Their definition of getOperationState can then return their public type.\n     *\n     * Example:\n     *\n     * ```ts\n     * // Let's say we have our poller's operation state defined as:\n     * interface MyOperationState extends PollOperationState<ResultType> {\n     *   privateProperty?: string;\n     *   publicProperty?: string;\n     * }\n     *\n     * // To allow us to have a true separation of public and private state, we have to define another interface:\n     * interface PublicState extends PollOperationState<ResultType> {\n     *   publicProperty?: string;\n     * }\n     *\n     * // Then, we define our Poller as follows:\n     * export class MyPoller extends Poller<MyOperationState, ResultType> {\n     *   // ... More content is needed here ...\n     *\n     *   public getOperationState(): PublicState {\n     *     const state: PublicState = this.operation.state;\n     *     return {\n     *       // Properties from PollOperationState<TResult>\n     *       isStarted: state.isStarted,\n     *       isCompleted: state.isCompleted,\n     *       isCancelled: state.isCancelled,\n     *       error: state.error,\n     *       result: state.result,\n     *\n     *       // The only other property needed by PublicState.\n     *       publicProperty: state.publicProperty\n     *     }\n     *   }\n     * }\n     * ```\n     *\n     * You can see this in the tests of this repository, go to the file:\n     * `../test/utils/testPoller.ts`\n     * and look for the getOperationState implementation.\n     */\n    getOperationState() {\n        return this.operation.state;\n    }\n    /**\n     * Returns the result value of the operation,\n     * regardless of the state of the poller.\n     * It can return undefined or an incomplete form of the final TResult value\n     * depending on the implementation.\n     */\n    getResult() {\n        const state = this.operation.state;\n        return state.result;\n    }\n    /**\n     * Returns a serialized version of the poller's operation\n     * by invoking the operation's toString method.\n     */\n    toString() {\n        return this.operation.toString();\n    }\n}\n//# sourceMappingURL=poller.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-lro/dist/esm/legacy/poller.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-lro/dist/esm/logger.js":
/*!*********************************************************!*\
  !*** ./node_modules/@azure/core-lro/dist/esm/logger.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   logger: () => (/* binding */ logger)\n/* harmony export */ });\n/* harmony import */ var _azure_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/logger */ \"(rsc)/./node_modules/@azure/logger/dist/esm/index.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * The `@azure/logger` configuration for this package.\n * @internal\n */\nconst logger = (0,_azure_logger__WEBPACK_IMPORTED_MODULE_0__.createClientLogger)(\"core-lro\");\n//# sourceMappingURL=logger.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtbHJvL2Rpc3QvZXNtL2xvZ2dlci5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDbUQ7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDTyxlQUFlLGlFQUFrQjtBQUN4QyIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcndpbHNvbi9EZXNrdG9wL3Byb2plY3RzL0VaVml6L25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS1scm8vZGlzdC9lc20vbG9nZ2VyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgY3JlYXRlQ2xpZW50TG9nZ2VyIH0gZnJvbSBcIkBhenVyZS9sb2dnZXJcIjtcbi8qKlxuICogVGhlIGBAYXp1cmUvbG9nZ2VyYCBjb25maWd1cmF0aW9uIGZvciB0aGlzIHBhY2thZ2UuXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IGxvZ2dlciA9IGNyZWF0ZUNsaWVudExvZ2dlcihcImNvcmUtbHJvXCIpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9nZ2VyLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-lro/dist/esm/logger.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-lro/dist/esm/poller/constants.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@azure/core-lro/dist/esm/poller/constants.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POLL_INTERVAL_IN_MS: () => (/* binding */ POLL_INTERVAL_IN_MS),\n/* harmony export */   terminalStates: () => (/* binding */ terminalStates)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * The default time interval to wait before sending the next polling request.\n */\nconst POLL_INTERVAL_IN_MS = 2000;\n/**\n * The closed set of terminal states.\n */\nconst terminalStates = [\"succeeded\", \"canceled\", \"failed\"];\n//# sourceMappingURL=constants.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtbHJvL2Rpc3QvZXNtL3BvbGxlci9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDTztBQUNQIiwic291cmNlcyI6WyIvVXNlcnMvdmljdG9yd2lsc29uL0Rlc2t0b3AvcHJvamVjdHMvRVpWaXovbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLWxyby9kaXN0L2VzbS9wb2xsZXIvY29uc3RhbnRzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuLyoqXG4gKiBUaGUgZGVmYXVsdCB0aW1lIGludGVydmFsIHRvIHdhaXQgYmVmb3JlIHNlbmRpbmcgdGhlIG5leHQgcG9sbGluZyByZXF1ZXN0LlxuICovXG5leHBvcnQgY29uc3QgUE9MTF9JTlRFUlZBTF9JTl9NUyA9IDIwMDA7XG4vKipcbiAqIFRoZSBjbG9zZWQgc2V0IG9mIHRlcm1pbmFsIHN0YXRlcy5cbiAqL1xuZXhwb3J0IGNvbnN0IHRlcm1pbmFsU3RhdGVzID0gW1wic3VjY2VlZGVkXCIsIFwiY2FuY2VsZWRcIiwgXCJmYWlsZWRcIl07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdGFudHMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-lro/dist/esm/poller/constants.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-lro/dist/esm/poller/operation.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@azure/core-lro/dist/esm/poller/operation.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   deserializeState: () => (/* binding */ deserializeState),\n/* harmony export */   initOperation: () => (/* binding */ initOperation),\n/* harmony export */   pollOperation: () => (/* binding */ pollOperation)\n/* harmony export */ });\n/* harmony import */ var _logger_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../logger.js */ \"(rsc)/./node_modules/@azure/core-lro/dist/esm/logger.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants.js */ \"(rsc)/./node_modules/@azure/core-lro/dist/esm/poller/constants.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n/**\n * Deserializes the state\n */\nfunction deserializeState(serializedState) {\n    try {\n        return JSON.parse(serializedState).state;\n    }\n    catch (e) {\n        throw new Error(`Unable to deserialize input state: ${serializedState}`);\n    }\n}\nfunction setStateError(inputs) {\n    const { state, stateProxy, isOperationError } = inputs;\n    return (error) => {\n        if (isOperationError(error)) {\n            stateProxy.setError(state, error);\n            stateProxy.setFailed(state);\n        }\n        throw error;\n    };\n}\nfunction appendReadableErrorMessage(currentMessage, innerMessage) {\n    let message = currentMessage;\n    if (message.slice(-1) !== \".\") {\n        message = message + \".\";\n    }\n    return message + \" \" + innerMessage;\n}\nfunction simplifyError(err) {\n    let message = err.message;\n    let code = err.code;\n    let curErr = err;\n    while (curErr.innererror) {\n        curErr = curErr.innererror;\n        code = curErr.code;\n        message = appendReadableErrorMessage(message, curErr.message);\n    }\n    return {\n        code,\n        message,\n    };\n}\nfunction processOperationStatus(result) {\n    const { state, stateProxy, status, isDone, processResult, getError, response, setErrorAsResult } = result;\n    switch (status) {\n        case \"succeeded\": {\n            stateProxy.setSucceeded(state);\n            break;\n        }\n        case \"failed\": {\n            const err = getError === null || getError === void 0 ? void 0 : getError(response);\n            let postfix = \"\";\n            if (err) {\n                const { code, message } = simplifyError(err);\n                postfix = `. ${code}. ${message}`;\n            }\n            const errStr = `The long-running operation has failed${postfix}`;\n            stateProxy.setError(state, new Error(errStr));\n            stateProxy.setFailed(state);\n            _logger_js__WEBPACK_IMPORTED_MODULE_0__.logger.warning(errStr);\n            break;\n        }\n        case \"canceled\": {\n            stateProxy.setCanceled(state);\n            break;\n        }\n    }\n    if ((isDone === null || isDone === void 0 ? void 0 : isDone(response, state)) ||\n        (isDone === undefined &&\n            [\"succeeded\", \"canceled\"].concat(setErrorAsResult ? [] : [\"failed\"]).includes(status))) {\n        stateProxy.setResult(state, buildResult({\n            response,\n            state,\n            processResult,\n        }));\n    }\n}\nfunction buildResult(inputs) {\n    const { processResult, response, state } = inputs;\n    return processResult ? processResult(response, state) : response;\n}\n/**\n * Initiates the long-running operation.\n */\nasync function initOperation(inputs) {\n    const { init, stateProxy, processResult, getOperationStatus, withOperationLocation, setErrorAsResult, } = inputs;\n    const { operationLocation, resourceLocation, metadata, response } = await init();\n    if (operationLocation)\n        withOperationLocation === null || withOperationLocation === void 0 ? void 0 : withOperationLocation(operationLocation, false);\n    const config = {\n        metadata,\n        operationLocation,\n        resourceLocation,\n    };\n    _logger_js__WEBPACK_IMPORTED_MODULE_0__.logger.verbose(`LRO: Operation description:`, config);\n    const state = stateProxy.initState(config);\n    const status = getOperationStatus({ response, state, operationLocation });\n    processOperationStatus({ state, status, stateProxy, response, setErrorAsResult, processResult });\n    return state;\n}\nasync function pollOperationHelper(inputs) {\n    const { poll, state, stateProxy, operationLocation, getOperationStatus, getResourceLocation, isOperationError, options, } = inputs;\n    const response = await poll(operationLocation, options).catch(setStateError({\n        state,\n        stateProxy,\n        isOperationError,\n    }));\n    const status = getOperationStatus(response, state);\n    _logger_js__WEBPACK_IMPORTED_MODULE_0__.logger.verbose(`LRO: Status:\\n\\tPolling from: ${state.config.operationLocation}\\n\\tOperation status: ${status}\\n\\tPolling status: ${_constants_js__WEBPACK_IMPORTED_MODULE_1__.terminalStates.includes(status) ? \"Stopped\" : \"Running\"}`);\n    if (status === \"succeeded\") {\n        const resourceLocation = getResourceLocation(response, state);\n        if (resourceLocation !== undefined) {\n            return {\n                response: await poll(resourceLocation).catch(setStateError({ state, stateProxy, isOperationError })),\n                status,\n            };\n        }\n    }\n    return { response, status };\n}\n/** Polls the long-running operation. */\nasync function pollOperation(inputs) {\n    const { poll, state, stateProxy, options, getOperationStatus, getResourceLocation, getOperationLocation, isOperationError, withOperationLocation, getPollingInterval, processResult, getError, updateState, setDelay, isDone, setErrorAsResult, } = inputs;\n    const { operationLocation } = state.config;\n    if (operationLocation !== undefined) {\n        const { response, status } = await pollOperationHelper({\n            poll,\n            getOperationStatus,\n            state,\n            stateProxy,\n            operationLocation,\n            getResourceLocation,\n            isOperationError,\n            options,\n        });\n        processOperationStatus({\n            status,\n            response,\n            state,\n            stateProxy,\n            isDone,\n            processResult,\n            getError,\n            setErrorAsResult,\n        });\n        if (!_constants_js__WEBPACK_IMPORTED_MODULE_1__.terminalStates.includes(status)) {\n            const intervalInMs = getPollingInterval === null || getPollingInterval === void 0 ? void 0 : getPollingInterval(response);\n            if (intervalInMs)\n                setDelay(intervalInMs);\n            const location = getOperationLocation === null || getOperationLocation === void 0 ? void 0 : getOperationLocation(response, state);\n            if (location !== undefined) {\n                const isUpdated = operationLocation !== location;\n                state.config.operationLocation = location;\n                withOperationLocation === null || withOperationLocation === void 0 ? void 0 : withOperationLocation(location, isUpdated);\n            }\n            else\n                withOperationLocation === null || withOperationLocation === void 0 ? void 0 : withOperationLocation(operationLocation, false);\n        }\n        updateState === null || updateState === void 0 ? void 0 : updateState(state, response);\n    }\n}\n//# sourceMappingURL=operation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-lro/dist/esm/poller/operation.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-lro/dist/esm/poller/poller.js":
/*!****************************************************************!*\
  !*** ./node_modules/@azure/core-lro/dist/esm/poller/poller.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildCreatePoller: () => (/* binding */ buildCreatePoller)\n/* harmony export */ });\n/* harmony import */ var _operation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./operation.js */ \"(rsc)/./node_modules/@azure/core-lro/dist/esm/poller/operation.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants.js */ \"(rsc)/./node_modules/@azure/core-lro/dist/esm/poller/constants.js\");\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @azure/core-util */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/index.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\nconst createStateProxy = () => ({\n    /**\n     * The state at this point is created to be of type OperationState<TResult>.\n     * It will be updated later to be of type TState when the\n     * customer-provided callback, `updateState`, is called during polling.\n     */\n    initState: (config) => ({ status: \"running\", config }),\n    setCanceled: (state) => (state.status = \"canceled\"),\n    setError: (state, error) => (state.error = error),\n    setResult: (state, result) => (state.result = result),\n    setRunning: (state) => (state.status = \"running\"),\n    setSucceeded: (state) => (state.status = \"succeeded\"),\n    setFailed: (state) => (state.status = \"failed\"),\n    getError: (state) => state.error,\n    getResult: (state) => state.result,\n    isCanceled: (state) => state.status === \"canceled\",\n    isFailed: (state) => state.status === \"failed\",\n    isRunning: (state) => state.status === \"running\",\n    isSucceeded: (state) => state.status === \"succeeded\",\n});\n/**\n * Returns a poller factory.\n */\nfunction buildCreatePoller(inputs) {\n    const { getOperationLocation, getStatusFromInitialResponse, getStatusFromPollResponse, isOperationError, getResourceLocation, getPollingInterval, getError, resolveOnUnsuccessful, } = inputs;\n    return async ({ init, poll }, options) => {\n        const { processResult, updateState, withOperationLocation: withOperationLocationCallback, intervalInMs = _constants_js__WEBPACK_IMPORTED_MODULE_1__.POLL_INTERVAL_IN_MS, restoreFrom, } = options || {};\n        const stateProxy = createStateProxy();\n        const withOperationLocation = withOperationLocationCallback\n            ? (() => {\n                let called = false;\n                return (operationLocation, isUpdated) => {\n                    if (isUpdated)\n                        withOperationLocationCallback(operationLocation);\n                    else if (!called)\n                        withOperationLocationCallback(operationLocation);\n                    called = true;\n                };\n            })()\n            : undefined;\n        const state = restoreFrom\n            ? (0,_operation_js__WEBPACK_IMPORTED_MODULE_0__.deserializeState)(restoreFrom)\n            : await (0,_operation_js__WEBPACK_IMPORTED_MODULE_0__.initOperation)({\n                init,\n                stateProxy,\n                processResult,\n                getOperationStatus: getStatusFromInitialResponse,\n                withOperationLocation,\n                setErrorAsResult: !resolveOnUnsuccessful,\n            });\n        let resultPromise;\n        const abortController = new AbortController();\n        const handlers = new Map();\n        const handleProgressEvents = async () => handlers.forEach((h) => h(state));\n        const cancelErrMsg = \"Operation was canceled\";\n        let currentPollIntervalInMs = intervalInMs;\n        const poller = {\n            getOperationState: () => state,\n            getResult: () => state.result,\n            isDone: () => [\"succeeded\", \"failed\", \"canceled\"].includes(state.status),\n            isStopped: () => resultPromise === undefined,\n            stopPolling: () => {\n                abortController.abort();\n            },\n            toString: () => JSON.stringify({\n                state,\n            }),\n            onProgress: (callback) => {\n                const s = Symbol();\n                handlers.set(s, callback);\n                return () => handlers.delete(s);\n            },\n            pollUntilDone: (pollOptions) => (resultPromise !== null && resultPromise !== void 0 ? resultPromise : (resultPromise = (async () => {\n                const { abortSignal: inputAbortSignal } = pollOptions || {};\n                // In the future we can use AbortSignal.any() instead\n                function abortListener() {\n                    abortController.abort();\n                }\n                const abortSignal = abortController.signal;\n                if (inputAbortSignal === null || inputAbortSignal === void 0 ? void 0 : inputAbortSignal.aborted) {\n                    abortController.abort();\n                }\n                else if (!abortSignal.aborted) {\n                    inputAbortSignal === null || inputAbortSignal === void 0 ? void 0 : inputAbortSignal.addEventListener(\"abort\", abortListener, { once: true });\n                }\n                try {\n                    if (!poller.isDone()) {\n                        await poller.poll({ abortSignal });\n                        while (!poller.isDone()) {\n                            await (0,_azure_core_util__WEBPACK_IMPORTED_MODULE_2__.delay)(currentPollIntervalInMs, { abortSignal });\n                            await poller.poll({ abortSignal });\n                        }\n                    }\n                }\n                finally {\n                    inputAbortSignal === null || inputAbortSignal === void 0 ? void 0 : inputAbortSignal.removeEventListener(\"abort\", abortListener);\n                }\n                if (resolveOnUnsuccessful) {\n                    return poller.getResult();\n                }\n                else {\n                    switch (state.status) {\n                        case \"succeeded\":\n                            return poller.getResult();\n                        case \"canceled\":\n                            throw new Error(cancelErrMsg);\n                        case \"failed\":\n                            throw state.error;\n                        case \"notStarted\":\n                        case \"running\":\n                            throw new Error(`Polling completed without succeeding or failing`);\n                    }\n                }\n            })().finally(() => {\n                resultPromise = undefined;\n            }))),\n            async poll(pollOptions) {\n                if (resolveOnUnsuccessful) {\n                    if (poller.isDone())\n                        return;\n                }\n                else {\n                    switch (state.status) {\n                        case \"succeeded\":\n                            return;\n                        case \"canceled\":\n                            throw new Error(cancelErrMsg);\n                        case \"failed\":\n                            throw state.error;\n                    }\n                }\n                await (0,_operation_js__WEBPACK_IMPORTED_MODULE_0__.pollOperation)({\n                    poll,\n                    state,\n                    stateProxy,\n                    getOperationLocation,\n                    isOperationError,\n                    withOperationLocation,\n                    getPollingInterval,\n                    getOperationStatus: getStatusFromPollResponse,\n                    getResourceLocation,\n                    processResult,\n                    getError,\n                    updateState,\n                    options: pollOptions,\n                    setDelay: (pollIntervalInMs) => {\n                        currentPollIntervalInMs = pollIntervalInMs;\n                    },\n                    setErrorAsResult: !resolveOnUnsuccessful,\n                });\n                await handleProgressEvents();\n                if (!resolveOnUnsuccessful) {\n                    switch (state.status) {\n                        case \"canceled\":\n                            throw new Error(cancelErrMsg);\n                        case \"failed\":\n                            throw state.error;\n                    }\n                }\n            },\n        };\n        return poller;\n    };\n}\n//# sourceMappingURL=poller.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-lro/dist/esm/poller/poller.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/constants.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/constants.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_RETRY_POLICY_COUNT: () => (/* binding */ DEFAULT_RETRY_POLICY_COUNT),\n/* harmony export */   SDK_VERSION: () => (/* binding */ SDK_VERSION)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nconst SDK_VERSION = \"1.19.1\";\nconst DEFAULT_RETRY_POLICY_COUNT = 3;\n//# sourceMappingURL=constants.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ087QUFDQTtBQUNQIiwic291cmNlcyI6WyIvVXNlcnMvdmljdG9yd2lsc29uL0Rlc2t0b3AvcHJvamVjdHMvRVpWaXovbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXJlc3QtcGlwZWxpbmUvZGlzdC9lc20vY29uc3RhbnRzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuZXhwb3J0IGNvbnN0IFNES19WRVJTSU9OID0gXCIxLjE5LjFcIjtcbmV4cG9ydCBjb25zdCBERUZBVUxUX1JFVFJZX1BPTElDWV9DT1VOVCA9IDM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdGFudHMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/constants.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/createPipelineFromOptions.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/createPipelineFromOptions.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createPipelineFromOptions: () => (/* binding */ createPipelineFromOptions)\n/* harmony export */ });\n/* harmony import */ var _policies_logPolicy_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./policies/logPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/logPolicy.js\");\n/* harmony import */ var _pipeline_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./pipeline.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/pipeline.js\");\n/* harmony import */ var _policies_redirectPolicy_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./policies/redirectPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/redirectPolicy.js\");\n/* harmony import */ var _policies_userAgentPolicy_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./policies/userAgentPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/userAgentPolicy.js\");\n/* harmony import */ var _policies_multipartPolicy_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./policies/multipartPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/multipartPolicy.js\");\n/* harmony import */ var _policies_decompressResponsePolicy_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./policies/decompressResponsePolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/decompressResponsePolicy.js\");\n/* harmony import */ var _policies_defaultRetryPolicy_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./policies/defaultRetryPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/defaultRetryPolicy.js\");\n/* harmony import */ var _policies_formDataPolicy_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./policies/formDataPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/formDataPolicy.js\");\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @azure/core-util */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/index.js\");\n/* harmony import */ var _policies_proxyPolicy_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./policies/proxyPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/proxyPolicy.js\");\n/* harmony import */ var _policies_setClientRequestIdPolicy_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./policies/setClientRequestIdPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/setClientRequestIdPolicy.js\");\n/* harmony import */ var _policies_agentPolicy_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./policies/agentPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/agentPolicy.js\");\n/* harmony import */ var _policies_tlsPolicy_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./policies/tlsPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/tlsPolicy.js\");\n/* harmony import */ var _policies_tracingPolicy_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./policies/tracingPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/tracingPolicy.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Create a new pipeline with a default set of customizable policies.\n * @param options - Options to configure a custom pipeline.\n */\nfunction createPipelineFromOptions(options) {\n    var _a;\n    const pipeline = (0,_pipeline_js__WEBPACK_IMPORTED_MODULE_1__.createEmptyPipeline)();\n    if (_azure_core_util__WEBPACK_IMPORTED_MODULE_8__.isNodeLike) {\n        if (options.agent) {\n            pipeline.addPolicy((0,_policies_agentPolicy_js__WEBPACK_IMPORTED_MODULE_11__.agentPolicy)(options.agent));\n        }\n        if (options.tlsOptions) {\n            pipeline.addPolicy((0,_policies_tlsPolicy_js__WEBPACK_IMPORTED_MODULE_12__.tlsPolicy)(options.tlsOptions));\n        }\n        pipeline.addPolicy((0,_policies_proxyPolicy_js__WEBPACK_IMPORTED_MODULE_9__.proxyPolicy)(options.proxyOptions));\n        pipeline.addPolicy((0,_policies_decompressResponsePolicy_js__WEBPACK_IMPORTED_MODULE_5__.decompressResponsePolicy)());\n    }\n    pipeline.addPolicy((0,_policies_formDataPolicy_js__WEBPACK_IMPORTED_MODULE_7__.formDataPolicy)(), { beforePolicies: [_policies_multipartPolicy_js__WEBPACK_IMPORTED_MODULE_4__.multipartPolicyName] });\n    pipeline.addPolicy((0,_policies_userAgentPolicy_js__WEBPACK_IMPORTED_MODULE_3__.userAgentPolicy)(options.userAgentOptions));\n    pipeline.addPolicy((0,_policies_setClientRequestIdPolicy_js__WEBPACK_IMPORTED_MODULE_10__.setClientRequestIdPolicy)((_a = options.telemetryOptions) === null || _a === void 0 ? void 0 : _a.clientRequestIdHeaderName));\n    // The multipart policy is added after policies with no phase, so that\n    // policies can be added between it and formDataPolicy to modify\n    // properties (e.g., making the boundary constant in recorded tests).\n    pipeline.addPolicy((0,_policies_multipartPolicy_js__WEBPACK_IMPORTED_MODULE_4__.multipartPolicy)(), { afterPhase: \"Deserialize\" });\n    pipeline.addPolicy((0,_policies_defaultRetryPolicy_js__WEBPACK_IMPORTED_MODULE_6__.defaultRetryPolicy)(options.retryOptions), { phase: \"Retry\" });\n    pipeline.addPolicy((0,_policies_tracingPolicy_js__WEBPACK_IMPORTED_MODULE_13__.tracingPolicy)(Object.assign(Object.assign({}, options.userAgentOptions), options.loggingOptions)), {\n        afterPhase: \"Retry\",\n    });\n    if (_azure_core_util__WEBPACK_IMPORTED_MODULE_8__.isNodeLike) {\n        // Both XHR and Fetch expect to handle redirects automatically,\n        // so only include this policy when we're in Node.\n        pipeline.addPolicy((0,_policies_redirectPolicy_js__WEBPACK_IMPORTED_MODULE_2__.redirectPolicy)(options.redirectOptions), { afterPhase: \"Retry\" });\n    }\n    pipeline.addPolicy((0,_policies_logPolicy_js__WEBPACK_IMPORTED_MODULE_0__.logPolicy)(options.loggingOptions), { afterPhase: \"Sign\" });\n    return pipeline;\n}\n//# sourceMappingURL=createPipelineFromOptions.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9jcmVhdGVQaXBlbGluZUZyb21PcHRpb25zLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDb0Q7QUFDQTtBQUNVO0FBQ0U7QUFDcUI7QUFDSDtBQUNaO0FBQ1I7QUFDaEI7QUFDVTtBQUMwQjtBQUMxQjtBQUNKO0FBQ1E7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0EscUJBQXFCLGlFQUFtQjtBQUN4QyxRQUFRLHdEQUFVO0FBQ2xCO0FBQ0EsK0JBQStCLHNFQUFXO0FBQzFDO0FBQ0E7QUFDQSwrQkFBK0Isa0VBQVM7QUFDeEM7QUFDQSwyQkFBMkIscUVBQVc7QUFDdEMsMkJBQTJCLCtGQUF3QjtBQUNuRDtBQUNBLHVCQUF1QiwyRUFBYyxNQUFNLGlCQUFpQiw2RUFBbUIsR0FBRztBQUNsRix1QkFBdUIsNkVBQWU7QUFDdEMsdUJBQXVCLGdHQUF3QjtBQUMvQztBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsNkVBQWUsTUFBTSwyQkFBMkI7QUFDdkUsdUJBQXVCLG1GQUFrQiwwQkFBMEIsZ0JBQWdCO0FBQ25GLHVCQUF1QiwwRUFBYSwrQkFBK0I7QUFDbkU7QUFDQSxLQUFLO0FBQ0wsUUFBUSx3REFBVTtBQUNsQjtBQUNBO0FBQ0EsMkJBQTJCLDJFQUFjLDZCQUE2QixxQkFBcUI7QUFDM0Y7QUFDQSx1QkFBdUIsaUVBQVMsNEJBQTRCLG9CQUFvQjtBQUNoRjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWN0b3J3aWxzb24vRGVza3RvcC9wcm9qZWN0cy9FWlZpei9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9jcmVhdGVQaXBlbGluZUZyb21PcHRpb25zLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuaW1wb3J0IHsgbG9nUG9saWN5IH0gZnJvbSBcIi4vcG9saWNpZXMvbG9nUG9saWN5LmpzXCI7XG5pbXBvcnQgeyBjcmVhdGVFbXB0eVBpcGVsaW5lIH0gZnJvbSBcIi4vcGlwZWxpbmUuanNcIjtcbmltcG9ydCB7IHJlZGlyZWN0UG9saWN5IH0gZnJvbSBcIi4vcG9saWNpZXMvcmVkaXJlY3RQb2xpY3kuanNcIjtcbmltcG9ydCB7IHVzZXJBZ2VudFBvbGljeSB9IGZyb20gXCIuL3BvbGljaWVzL3VzZXJBZ2VudFBvbGljeS5qc1wiO1xuaW1wb3J0IHsgbXVsdGlwYXJ0UG9saWN5LCBtdWx0aXBhcnRQb2xpY3lOYW1lIH0gZnJvbSBcIi4vcG9saWNpZXMvbXVsdGlwYXJ0UG9saWN5LmpzXCI7XG5pbXBvcnQgeyBkZWNvbXByZXNzUmVzcG9uc2VQb2xpY3kgfSBmcm9tIFwiLi9wb2xpY2llcy9kZWNvbXByZXNzUmVzcG9uc2VQb2xpY3kuanNcIjtcbmltcG9ydCB7IGRlZmF1bHRSZXRyeVBvbGljeSB9IGZyb20gXCIuL3BvbGljaWVzL2RlZmF1bHRSZXRyeVBvbGljeS5qc1wiO1xuaW1wb3J0IHsgZm9ybURhdGFQb2xpY3kgfSBmcm9tIFwiLi9wb2xpY2llcy9mb3JtRGF0YVBvbGljeS5qc1wiO1xuaW1wb3J0IHsgaXNOb2RlTGlrZSB9IGZyb20gXCJAYXp1cmUvY29yZS11dGlsXCI7XG5pbXBvcnQgeyBwcm94eVBvbGljeSB9IGZyb20gXCIuL3BvbGljaWVzL3Byb3h5UG9saWN5LmpzXCI7XG5pbXBvcnQgeyBzZXRDbGllbnRSZXF1ZXN0SWRQb2xpY3kgfSBmcm9tIFwiLi9wb2xpY2llcy9zZXRDbGllbnRSZXF1ZXN0SWRQb2xpY3kuanNcIjtcbmltcG9ydCB7IGFnZW50UG9saWN5IH0gZnJvbSBcIi4vcG9saWNpZXMvYWdlbnRQb2xpY3kuanNcIjtcbmltcG9ydCB7IHRsc1BvbGljeSB9IGZyb20gXCIuL3BvbGljaWVzL3Rsc1BvbGljeS5qc1wiO1xuaW1wb3J0IHsgdHJhY2luZ1BvbGljeSB9IGZyb20gXCIuL3BvbGljaWVzL3RyYWNpbmdQb2xpY3kuanNcIjtcbi8qKlxuICogQ3JlYXRlIGEgbmV3IHBpcGVsaW5lIHdpdGggYSBkZWZhdWx0IHNldCBvZiBjdXN0b21pemFibGUgcG9saWNpZXMuXG4gKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbnMgdG8gY29uZmlndXJlIGEgY3VzdG9tIHBpcGVsaW5lLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUGlwZWxpbmVGcm9tT3B0aW9ucyhvcHRpb25zKSB7XG4gICAgdmFyIF9hO1xuICAgIGNvbnN0IHBpcGVsaW5lID0gY3JlYXRlRW1wdHlQaXBlbGluZSgpO1xuICAgIGlmIChpc05vZGVMaWtlKSB7XG4gICAgICAgIGlmIChvcHRpb25zLmFnZW50KSB7XG4gICAgICAgICAgICBwaXBlbGluZS5hZGRQb2xpY3koYWdlbnRQb2xpY3kob3B0aW9ucy5hZ2VudCkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLnRsc09wdGlvbnMpIHtcbiAgICAgICAgICAgIHBpcGVsaW5lLmFkZFBvbGljeSh0bHNQb2xpY3kob3B0aW9ucy50bHNPcHRpb25zKSk7XG4gICAgICAgIH1cbiAgICAgICAgcGlwZWxpbmUuYWRkUG9saWN5KHByb3h5UG9saWN5KG9wdGlvbnMucHJveHlPcHRpb25zKSk7XG4gICAgICAgIHBpcGVsaW5lLmFkZFBvbGljeShkZWNvbXByZXNzUmVzcG9uc2VQb2xpY3koKSk7XG4gICAgfVxuICAgIHBpcGVsaW5lLmFkZFBvbGljeShmb3JtRGF0YVBvbGljeSgpLCB7IGJlZm9yZVBvbGljaWVzOiBbbXVsdGlwYXJ0UG9saWN5TmFtZV0gfSk7XG4gICAgcGlwZWxpbmUuYWRkUG9saWN5KHVzZXJBZ2VudFBvbGljeShvcHRpb25zLnVzZXJBZ2VudE9wdGlvbnMpKTtcbiAgICBwaXBlbGluZS5hZGRQb2xpY3koc2V0Q2xpZW50UmVxdWVzdElkUG9saWN5KChfYSA9IG9wdGlvbnMudGVsZW1ldHJ5T3B0aW9ucykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNsaWVudFJlcXVlc3RJZEhlYWRlck5hbWUpKTtcbiAgICAvLyBUaGUgbXVsdGlwYXJ0IHBvbGljeSBpcyBhZGRlZCBhZnRlciBwb2xpY2llcyB3aXRoIG5vIHBoYXNlLCBzbyB0aGF0XG4gICAgLy8gcG9saWNpZXMgY2FuIGJlIGFkZGVkIGJldHdlZW4gaXQgYW5kIGZvcm1EYXRhUG9saWN5IHRvIG1vZGlmeVxuICAgIC8vIHByb3BlcnRpZXMgKGUuZy4sIG1ha2luZyB0aGUgYm91bmRhcnkgY29uc3RhbnQgaW4gcmVjb3JkZWQgdGVzdHMpLlxuICAgIHBpcGVsaW5lLmFkZFBvbGljeShtdWx0aXBhcnRQb2xpY3koKSwgeyBhZnRlclBoYXNlOiBcIkRlc2VyaWFsaXplXCIgfSk7XG4gICAgcGlwZWxpbmUuYWRkUG9saWN5KGRlZmF1bHRSZXRyeVBvbGljeShvcHRpb25zLnJldHJ5T3B0aW9ucyksIHsgcGhhc2U6IFwiUmV0cnlcIiB9KTtcbiAgICBwaXBlbGluZS5hZGRQb2xpY3kodHJhY2luZ1BvbGljeShPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMudXNlckFnZW50T3B0aW9ucyksIG9wdGlvbnMubG9nZ2luZ09wdGlvbnMpKSwge1xuICAgICAgICBhZnRlclBoYXNlOiBcIlJldHJ5XCIsXG4gICAgfSk7XG4gICAgaWYgKGlzTm9kZUxpa2UpIHtcbiAgICAgICAgLy8gQm90aCBYSFIgYW5kIEZldGNoIGV4cGVjdCB0byBoYW5kbGUgcmVkaXJlY3RzIGF1dG9tYXRpY2FsbHksXG4gICAgICAgIC8vIHNvIG9ubHkgaW5jbHVkZSB0aGlzIHBvbGljeSB3aGVuIHdlJ3JlIGluIE5vZGUuXG4gICAgICAgIHBpcGVsaW5lLmFkZFBvbGljeShyZWRpcmVjdFBvbGljeShvcHRpb25zLnJlZGlyZWN0T3B0aW9ucyksIHsgYWZ0ZXJQaGFzZTogXCJSZXRyeVwiIH0pO1xuICAgIH1cbiAgICBwaXBlbGluZS5hZGRQb2xpY3kobG9nUG9saWN5KG9wdGlvbnMubG9nZ2luZ09wdGlvbnMpLCB7IGFmdGVyUGhhc2U6IFwiU2lnblwiIH0pO1xuICAgIHJldHVybiBwaXBlbGluZTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyZWF0ZVBpcGVsaW5lRnJvbU9wdGlvbnMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/createPipelineFromOptions.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/defaultHttpClient.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/defaultHttpClient.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createDefaultHttpClient: () => (/* binding */ createDefaultHttpClient)\n/* harmony export */ });\n/* harmony import */ var _nodeHttpClient_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./nodeHttpClient.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/nodeHttpClient.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * Create the correct HttpClient for the current environment.\n */\nfunction createDefaultHttpClient() {\n    return (0,_nodeHttpClient_js__WEBPACK_IMPORTED_MODULE_0__.createNodeHttpClient)();\n}\n//# sourceMappingURL=defaultHttpClient.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9kZWZhdWx0SHR0cENsaWVudC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDMkQ7QUFDM0Q7QUFDQTtBQUNBO0FBQ087QUFDUCxXQUFXLHdFQUFvQjtBQUMvQjtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvdmljdG9yd2lsc29uL0Rlc2t0b3AvcHJvamVjdHMvRVpWaXovbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXJlc3QtcGlwZWxpbmUvZGlzdC9lc20vZGVmYXVsdEh0dHBDbGllbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5pbXBvcnQgeyBjcmVhdGVOb2RlSHR0cENsaWVudCB9IGZyb20gXCIuL25vZGVIdHRwQ2xpZW50LmpzXCI7XG4vKipcbiAqIENyZWF0ZSB0aGUgY29ycmVjdCBIdHRwQ2xpZW50IGZvciB0aGUgY3VycmVudCBlbnZpcm9ubWVudC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZURlZmF1bHRIdHRwQ2xpZW50KCkge1xuICAgIHJldHVybiBjcmVhdGVOb2RlSHR0cENsaWVudCgpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVmYXVsdEh0dHBDbGllbnQuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/defaultHttpClient.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/httpHeaders.js":
/*!************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/httpHeaders.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createHttpHeaders: () => (/* binding */ createHttpHeaders)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nfunction normalizeName(name) {\n    return name.toLowerCase();\n}\nfunction* headerIterator(map) {\n    for (const entry of map.values()) {\n        yield [entry.name, entry.value];\n    }\n}\nclass HttpHeadersImpl {\n    constructor(rawHeaders) {\n        this._headersMap = new Map();\n        if (rawHeaders) {\n            for (const headerName of Object.keys(rawHeaders)) {\n                this.set(headerName, rawHeaders[headerName]);\n            }\n        }\n    }\n    /**\n     * Set a header in this collection with the provided name and value. The name is\n     * case-insensitive.\n     * @param name - The name of the header to set. This value is case-insensitive.\n     * @param value - The value of the header to set.\n     */\n    set(name, value) {\n        this._headersMap.set(normalizeName(name), { name, value: String(value).trim() });\n    }\n    /**\n     * Get the header value for the provided header name, or undefined if no header exists in this\n     * collection with the provided name.\n     * @param name - The name of the header. This value is case-insensitive.\n     */\n    get(name) {\n        var _a;\n        return (_a = this._headersMap.get(normalizeName(name))) === null || _a === void 0 ? void 0 : _a.value;\n    }\n    /**\n     * Get whether or not this header collection contains a header entry for the provided header name.\n     * @param name - The name of the header to set. This value is case-insensitive.\n     */\n    has(name) {\n        return this._headersMap.has(normalizeName(name));\n    }\n    /**\n     * Remove the header with the provided headerName.\n     * @param name - The name of the header to remove.\n     */\n    delete(name) {\n        this._headersMap.delete(normalizeName(name));\n    }\n    /**\n     * Get the JSON object representation of this HTTP header collection.\n     */\n    toJSON(options = {}) {\n        const result = {};\n        if (options.preserveCase) {\n            for (const entry of this._headersMap.values()) {\n                result[entry.name] = entry.value;\n            }\n        }\n        else {\n            for (const [normalizedName, entry] of this._headersMap) {\n                result[normalizedName] = entry.value;\n            }\n        }\n        return result;\n    }\n    /**\n     * Get the string representation of this HTTP header collection.\n     */\n    toString() {\n        return JSON.stringify(this.toJSON({ preserveCase: true }));\n    }\n    /**\n     * Iterate over tuples of header [name, value] pairs.\n     */\n    [Symbol.iterator]() {\n        return headerIterator(this._headersMap);\n    }\n}\n/**\n * Creates an object that satisfies the `HttpHeaders` interface.\n * @param rawHeaders - A simple object representing initial headers\n */\nfunction createHttpHeaders(rawHeaders) {\n    return new HttpHeadersImpl(rawHeaders);\n}\n//# sourceMappingURL=httpHeaders.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9odHRwSGVhZGVycy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxtQ0FBbUM7QUFDdkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsb0JBQW9CO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvdmljdG9yd2lsc29uL0Rlc2t0b3AvcHJvamVjdHMvRVpWaXovbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXJlc3QtcGlwZWxpbmUvZGlzdC9lc20vaHR0cEhlYWRlcnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5mdW5jdGlvbiBub3JtYWxpemVOYW1lKG5hbWUpIHtcbiAgICByZXR1cm4gbmFtZS50b0xvd2VyQ2FzZSgpO1xufVxuZnVuY3Rpb24qIGhlYWRlckl0ZXJhdG9yKG1hcCkge1xuICAgIGZvciAoY29uc3QgZW50cnkgb2YgbWFwLnZhbHVlcygpKSB7XG4gICAgICAgIHlpZWxkIFtlbnRyeS5uYW1lLCBlbnRyeS52YWx1ZV07XG4gICAgfVxufVxuY2xhc3MgSHR0cEhlYWRlcnNJbXBsIHtcbiAgICBjb25zdHJ1Y3RvcihyYXdIZWFkZXJzKSB7XG4gICAgICAgIHRoaXMuX2hlYWRlcnNNYXAgPSBuZXcgTWFwKCk7XG4gICAgICAgIGlmIChyYXdIZWFkZXJzKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGhlYWRlck5hbWUgb2YgT2JqZWN0LmtleXMocmF3SGVhZGVycykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldChoZWFkZXJOYW1lLCByYXdIZWFkZXJzW2hlYWRlck5hbWVdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXQgYSBoZWFkZXIgaW4gdGhpcyBjb2xsZWN0aW9uIHdpdGggdGhlIHByb3ZpZGVkIG5hbWUgYW5kIHZhbHVlLiBUaGUgbmFtZSBpc1xuICAgICAqIGNhc2UtaW5zZW5zaXRpdmUuXG4gICAgICogQHBhcmFtIG5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgaGVhZGVyIHRvIHNldC4gVGhpcyB2YWx1ZSBpcyBjYXNlLWluc2Vuc2l0aXZlLlxuICAgICAqIEBwYXJhbSB2YWx1ZSAtIFRoZSB2YWx1ZSBvZiB0aGUgaGVhZGVyIHRvIHNldC5cbiAgICAgKi9cbiAgICBzZXQobmFtZSwgdmFsdWUpIHtcbiAgICAgICAgdGhpcy5faGVhZGVyc01hcC5zZXQobm9ybWFsaXplTmFtZShuYW1lKSwgeyBuYW1lLCB2YWx1ZTogU3RyaW5nKHZhbHVlKS50cmltKCkgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgaGVhZGVyIHZhbHVlIGZvciB0aGUgcHJvdmlkZWQgaGVhZGVyIG5hbWUsIG9yIHVuZGVmaW5lZCBpZiBubyBoZWFkZXIgZXhpc3RzIGluIHRoaXNcbiAgICAgKiBjb2xsZWN0aW9uIHdpdGggdGhlIHByb3ZpZGVkIG5hbWUuXG4gICAgICogQHBhcmFtIG5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgaGVhZGVyLiBUaGlzIHZhbHVlIGlzIGNhc2UtaW5zZW5zaXRpdmUuXG4gICAgICovXG4gICAgZ2V0KG5hbWUpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZXR1cm4gKF9hID0gdGhpcy5faGVhZGVyc01hcC5nZXQobm9ybWFsaXplTmFtZShuYW1lKSkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS52YWx1ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHdoZXRoZXIgb3Igbm90IHRoaXMgaGVhZGVyIGNvbGxlY3Rpb24gY29udGFpbnMgYSBoZWFkZXIgZW50cnkgZm9yIHRoZSBwcm92aWRlZCBoZWFkZXIgbmFtZS5cbiAgICAgKiBAcGFyYW0gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBoZWFkZXIgdG8gc2V0LiBUaGlzIHZhbHVlIGlzIGNhc2UtaW5zZW5zaXRpdmUuXG4gICAgICovXG4gICAgaGFzKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2hlYWRlcnNNYXAuaGFzKG5vcm1hbGl6ZU5hbWUobmFtZSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgdGhlIGhlYWRlciB3aXRoIHRoZSBwcm92aWRlZCBoZWFkZXJOYW1lLlxuICAgICAqIEBwYXJhbSBuYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGhlYWRlciB0byByZW1vdmUuXG4gICAgICovXG4gICAgZGVsZXRlKG5hbWUpIHtcbiAgICAgICAgdGhpcy5faGVhZGVyc01hcC5kZWxldGUobm9ybWFsaXplTmFtZShuYW1lKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgSlNPTiBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBIVFRQIGhlYWRlciBjb2xsZWN0aW9uLlxuICAgICAqL1xuICAgIHRvSlNPTihvcHRpb25zID0ge30pIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0ge307XG4gICAgICAgIGlmIChvcHRpb25zLnByZXNlcnZlQ2FzZSkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBlbnRyeSBvZiB0aGlzLl9oZWFkZXJzTWFwLnZhbHVlcygpKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0W2VudHJ5Lm5hbWVdID0gZW50cnkudmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IFtub3JtYWxpemVkTmFtZSwgZW50cnldIG9mIHRoaXMuX2hlYWRlcnNNYXApIHtcbiAgICAgICAgICAgICAgICByZXN1bHRbbm9ybWFsaXplZE5hbWVdID0gZW50cnkudmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBIVFRQIGhlYWRlciBjb2xsZWN0aW9uLlxuICAgICAqL1xuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodGhpcy50b0pTT04oeyBwcmVzZXJ2ZUNhc2U6IHRydWUgfSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlIG92ZXIgdHVwbGVzIG9mIGhlYWRlciBbbmFtZSwgdmFsdWVdIHBhaXJzLlxuICAgICAqL1xuICAgIFtTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgICAgICByZXR1cm4gaGVhZGVySXRlcmF0b3IodGhpcy5faGVhZGVyc01hcCk7XG4gICAgfVxufVxuLyoqXG4gKiBDcmVhdGVzIGFuIG9iamVjdCB0aGF0IHNhdGlzZmllcyB0aGUgYEh0dHBIZWFkZXJzYCBpbnRlcmZhY2UuXG4gKiBAcGFyYW0gcmF3SGVhZGVycyAtIEEgc2ltcGxlIG9iamVjdCByZXByZXNlbnRpbmcgaW5pdGlhbCBoZWFkZXJzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVIdHRwSGVhZGVycyhyYXdIZWFkZXJzKSB7XG4gICAgcmV0dXJuIG5ldyBIdHRwSGVhZGVyc0ltcGwocmF3SGVhZGVycyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1odHRwSGVhZGVycy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/httpHeaders.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RestError: () => (/* reexport safe */ _restError_js__WEBPACK_IMPORTED_MODULE_5__.RestError),\n/* harmony export */   agentPolicy: () => (/* reexport safe */ _policies_agentPolicy_js__WEBPACK_IMPORTED_MODULE_24__.agentPolicy),\n/* harmony export */   agentPolicyName: () => (/* reexport safe */ _policies_agentPolicy_js__WEBPACK_IMPORTED_MODULE_24__.agentPolicyName),\n/* harmony export */   auxiliaryAuthenticationHeaderPolicy: () => (/* reexport safe */ _policies_auxiliaryAuthenticationHeaderPolicy_js__WEBPACK_IMPORTED_MODULE_23__.auxiliaryAuthenticationHeaderPolicy),\n/* harmony export */   auxiliaryAuthenticationHeaderPolicyName: () => (/* reexport safe */ _policies_auxiliaryAuthenticationHeaderPolicy_js__WEBPACK_IMPORTED_MODULE_23__.auxiliaryAuthenticationHeaderPolicyName),\n/* harmony export */   bearerTokenAuthenticationPolicy: () => (/* reexport safe */ _policies_bearerTokenAuthenticationPolicy_js__WEBPACK_IMPORTED_MODULE_21__.bearerTokenAuthenticationPolicy),\n/* harmony export */   bearerTokenAuthenticationPolicyName: () => (/* reexport safe */ _policies_bearerTokenAuthenticationPolicy_js__WEBPACK_IMPORTED_MODULE_21__.bearerTokenAuthenticationPolicyName),\n/* harmony export */   createDefaultHttpClient: () => (/* reexport safe */ _defaultHttpClient_js__WEBPACK_IMPORTED_MODULE_2__.createDefaultHttpClient),\n/* harmony export */   createEmptyPipeline: () => (/* reexport safe */ _pipeline_js__WEBPACK_IMPORTED_MODULE_0__.createEmptyPipeline),\n/* harmony export */   createFile: () => (/* reexport safe */ _util_file_js__WEBPACK_IMPORTED_MODULE_25__.createFile),\n/* harmony export */   createFileFromStream: () => (/* reexport safe */ _util_file_js__WEBPACK_IMPORTED_MODULE_25__.createFileFromStream),\n/* harmony export */   createHttpHeaders: () => (/* reexport safe */ _httpHeaders_js__WEBPACK_IMPORTED_MODULE_3__.createHttpHeaders),\n/* harmony export */   createPipelineFromOptions: () => (/* reexport safe */ _createPipelineFromOptions_js__WEBPACK_IMPORTED_MODULE_1__.createPipelineFromOptions),\n/* harmony export */   createPipelineRequest: () => (/* reexport safe */ _pipelineRequest_js__WEBPACK_IMPORTED_MODULE_4__.createPipelineRequest),\n/* harmony export */   decompressResponsePolicy: () => (/* reexport safe */ _policies_decompressResponsePolicy_js__WEBPACK_IMPORTED_MODULE_6__.decompressResponsePolicy),\n/* harmony export */   decompressResponsePolicyName: () => (/* reexport safe */ _policies_decompressResponsePolicy_js__WEBPACK_IMPORTED_MODULE_6__.decompressResponsePolicyName),\n/* harmony export */   defaultRetryPolicy: () => (/* reexport safe */ _policies_defaultRetryPolicy_js__WEBPACK_IMPORTED_MODULE_17__.defaultRetryPolicy),\n/* harmony export */   exponentialRetryPolicy: () => (/* reexport safe */ _policies_exponentialRetryPolicy_js__WEBPACK_IMPORTED_MODULE_7__.exponentialRetryPolicy),\n/* harmony export */   exponentialRetryPolicyName: () => (/* reexport safe */ _policies_exponentialRetryPolicy_js__WEBPACK_IMPORTED_MODULE_7__.exponentialRetryPolicyName),\n/* harmony export */   formDataPolicy: () => (/* reexport safe */ _policies_formDataPolicy_js__WEBPACK_IMPORTED_MODULE_20__.formDataPolicy),\n/* harmony export */   formDataPolicyName: () => (/* reexport safe */ _policies_formDataPolicy_js__WEBPACK_IMPORTED_MODULE_20__.formDataPolicyName),\n/* harmony export */   getDefaultProxySettings: () => (/* reexport safe */ _policies_proxyPolicy_js__WEBPACK_IMPORTED_MODULE_11__.getDefaultProxySettings),\n/* harmony export */   isRestError: () => (/* reexport safe */ _restError_js__WEBPACK_IMPORTED_MODULE_5__.isRestError),\n/* harmony export */   logPolicy: () => (/* reexport safe */ _policies_logPolicy_js__WEBPACK_IMPORTED_MODULE_9__.logPolicy),\n/* harmony export */   logPolicyName: () => (/* reexport safe */ _policies_logPolicy_js__WEBPACK_IMPORTED_MODULE_9__.logPolicyName),\n/* harmony export */   multipartPolicy: () => (/* reexport safe */ _policies_multipartPolicy_js__WEBPACK_IMPORTED_MODULE_10__.multipartPolicy),\n/* harmony export */   multipartPolicyName: () => (/* reexport safe */ _policies_multipartPolicy_js__WEBPACK_IMPORTED_MODULE_10__.multipartPolicyName),\n/* harmony export */   ndJsonPolicy: () => (/* reexport safe */ _policies_ndJsonPolicy_js__WEBPACK_IMPORTED_MODULE_22__.ndJsonPolicy),\n/* harmony export */   ndJsonPolicyName: () => (/* reexport safe */ _policies_ndJsonPolicy_js__WEBPACK_IMPORTED_MODULE_22__.ndJsonPolicyName),\n/* harmony export */   proxyPolicy: () => (/* reexport safe */ _policies_proxyPolicy_js__WEBPACK_IMPORTED_MODULE_11__.proxyPolicy),\n/* harmony export */   proxyPolicyName: () => (/* reexport safe */ _policies_proxyPolicy_js__WEBPACK_IMPORTED_MODULE_11__.proxyPolicyName),\n/* harmony export */   redirectPolicy: () => (/* reexport safe */ _policies_redirectPolicy_js__WEBPACK_IMPORTED_MODULE_12__.redirectPolicy),\n/* harmony export */   redirectPolicyName: () => (/* reexport safe */ _policies_redirectPolicy_js__WEBPACK_IMPORTED_MODULE_12__.redirectPolicyName),\n/* harmony export */   retryPolicy: () => (/* reexport safe */ _policies_retryPolicy_js__WEBPACK_IMPORTED_MODULE_15__.retryPolicy),\n/* harmony export */   setClientRequestIdPolicy: () => (/* reexport safe */ _policies_setClientRequestIdPolicy_js__WEBPACK_IMPORTED_MODULE_8__.setClientRequestIdPolicy),\n/* harmony export */   setClientRequestIdPolicyName: () => (/* reexport safe */ _policies_setClientRequestIdPolicy_js__WEBPACK_IMPORTED_MODULE_8__.setClientRequestIdPolicyName),\n/* harmony export */   systemErrorRetryPolicy: () => (/* reexport safe */ _policies_systemErrorRetryPolicy_js__WEBPACK_IMPORTED_MODULE_13__.systemErrorRetryPolicy),\n/* harmony export */   systemErrorRetryPolicyName: () => (/* reexport safe */ _policies_systemErrorRetryPolicy_js__WEBPACK_IMPORTED_MODULE_13__.systemErrorRetryPolicyName),\n/* harmony export */   throttlingRetryPolicy: () => (/* reexport safe */ _policies_throttlingRetryPolicy_js__WEBPACK_IMPORTED_MODULE_14__.throttlingRetryPolicy),\n/* harmony export */   throttlingRetryPolicyName: () => (/* reexport safe */ _policies_throttlingRetryPolicy_js__WEBPACK_IMPORTED_MODULE_14__.throttlingRetryPolicyName),\n/* harmony export */   tlsPolicy: () => (/* reexport safe */ _policies_tlsPolicy_js__WEBPACK_IMPORTED_MODULE_19__.tlsPolicy),\n/* harmony export */   tlsPolicyName: () => (/* reexport safe */ _policies_tlsPolicy_js__WEBPACK_IMPORTED_MODULE_19__.tlsPolicyName),\n/* harmony export */   tracingPolicy: () => (/* reexport safe */ _policies_tracingPolicy_js__WEBPACK_IMPORTED_MODULE_16__.tracingPolicy),\n/* harmony export */   tracingPolicyName: () => (/* reexport safe */ _policies_tracingPolicy_js__WEBPACK_IMPORTED_MODULE_16__.tracingPolicyName),\n/* harmony export */   userAgentPolicy: () => (/* reexport safe */ _policies_userAgentPolicy_js__WEBPACK_IMPORTED_MODULE_18__.userAgentPolicy),\n/* harmony export */   userAgentPolicyName: () => (/* reexport safe */ _policies_userAgentPolicy_js__WEBPACK_IMPORTED_MODULE_18__.userAgentPolicyName)\n/* harmony export */ });\n/* harmony import */ var _pipeline_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./pipeline.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/pipeline.js\");\n/* harmony import */ var _createPipelineFromOptions_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./createPipelineFromOptions.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/createPipelineFromOptions.js\");\n/* harmony import */ var _defaultHttpClient_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./defaultHttpClient.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/defaultHttpClient.js\");\n/* harmony import */ var _httpHeaders_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./httpHeaders.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/httpHeaders.js\");\n/* harmony import */ var _pipelineRequest_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./pipelineRequest.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/pipelineRequest.js\");\n/* harmony import */ var _restError_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./restError.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/restError.js\");\n/* harmony import */ var _policies_decompressResponsePolicy_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./policies/decompressResponsePolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/decompressResponsePolicy.js\");\n/* harmony import */ var _policies_exponentialRetryPolicy_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./policies/exponentialRetryPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/exponentialRetryPolicy.js\");\n/* harmony import */ var _policies_setClientRequestIdPolicy_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./policies/setClientRequestIdPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/setClientRequestIdPolicy.js\");\n/* harmony import */ var _policies_logPolicy_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./policies/logPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/logPolicy.js\");\n/* harmony import */ var _policies_multipartPolicy_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./policies/multipartPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/multipartPolicy.js\");\n/* harmony import */ var _policies_proxyPolicy_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./policies/proxyPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/proxyPolicy.js\");\n/* harmony import */ var _policies_redirectPolicy_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./policies/redirectPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/redirectPolicy.js\");\n/* harmony import */ var _policies_systemErrorRetryPolicy_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./policies/systemErrorRetryPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/systemErrorRetryPolicy.js\");\n/* harmony import */ var _policies_throttlingRetryPolicy_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./policies/throttlingRetryPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/throttlingRetryPolicy.js\");\n/* harmony import */ var _policies_retryPolicy_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./policies/retryPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/retryPolicy.js\");\n/* harmony import */ var _policies_tracingPolicy_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./policies/tracingPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/tracingPolicy.js\");\n/* harmony import */ var _policies_defaultRetryPolicy_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./policies/defaultRetryPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/defaultRetryPolicy.js\");\n/* harmony import */ var _policies_userAgentPolicy_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./policies/userAgentPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/userAgentPolicy.js\");\n/* harmony import */ var _policies_tlsPolicy_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./policies/tlsPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/tlsPolicy.js\");\n/* harmony import */ var _policies_formDataPolicy_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./policies/formDataPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/formDataPolicy.js\");\n/* harmony import */ var _policies_bearerTokenAuthenticationPolicy_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./policies/bearerTokenAuthenticationPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/bearerTokenAuthenticationPolicy.js\");\n/* harmony import */ var _policies_ndJsonPolicy_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./policies/ndJsonPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/ndJsonPolicy.js\");\n/* harmony import */ var _policies_auxiliaryAuthenticationHeaderPolicy_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./policies/auxiliaryAuthenticationHeaderPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/auxiliaryAuthenticationHeaderPolicy.js\");\n/* harmony import */ var _policies_agentPolicy_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./policies/agentPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/agentPolicy.js\");\n/* harmony import */ var _util_file_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./util/file.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/file.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ3FEO0FBQ3VCO0FBQ1g7QUFDWjtBQUNRO0FBQ0w7QUFDeUQ7QUFDTjtBQUNNO0FBQzlDO0FBQ2tCO0FBQ2E7QUFDZjtBQUN3QjtBQUNIO0FBQ2hEO0FBQ3dCO0FBQ1Q7QUFDZTtBQUNuQjtBQUNlO0FBQ29EO0FBQzFEO0FBQ3NFO0FBQ3pFO0FBQ047QUFDbkUiLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWN0b3J3aWxzb24vRGVza3RvcC9wcm9qZWN0cy9FWlZpei9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbmV4cG9ydCB7IGNyZWF0ZUVtcHR5UGlwZWxpbmUsIH0gZnJvbSBcIi4vcGlwZWxpbmUuanNcIjtcbmV4cG9ydCB7IGNyZWF0ZVBpcGVsaW5lRnJvbU9wdGlvbnMsIH0gZnJvbSBcIi4vY3JlYXRlUGlwZWxpbmVGcm9tT3B0aW9ucy5qc1wiO1xuZXhwb3J0IHsgY3JlYXRlRGVmYXVsdEh0dHBDbGllbnQgfSBmcm9tIFwiLi9kZWZhdWx0SHR0cENsaWVudC5qc1wiO1xuZXhwb3J0IHsgY3JlYXRlSHR0cEhlYWRlcnMgfSBmcm9tIFwiLi9odHRwSGVhZGVycy5qc1wiO1xuZXhwb3J0IHsgY3JlYXRlUGlwZWxpbmVSZXF1ZXN0IH0gZnJvbSBcIi4vcGlwZWxpbmVSZXF1ZXN0LmpzXCI7XG5leHBvcnQgeyBSZXN0RXJyb3IsIGlzUmVzdEVycm9yIH0gZnJvbSBcIi4vcmVzdEVycm9yLmpzXCI7XG5leHBvcnQgeyBkZWNvbXByZXNzUmVzcG9uc2VQb2xpY3ksIGRlY29tcHJlc3NSZXNwb25zZVBvbGljeU5hbWUsIH0gZnJvbSBcIi4vcG9saWNpZXMvZGVjb21wcmVzc1Jlc3BvbnNlUG9saWN5LmpzXCI7XG5leHBvcnQgeyBleHBvbmVudGlhbFJldHJ5UG9saWN5LCBleHBvbmVudGlhbFJldHJ5UG9saWN5TmFtZSwgfSBmcm9tIFwiLi9wb2xpY2llcy9leHBvbmVudGlhbFJldHJ5UG9saWN5LmpzXCI7XG5leHBvcnQgeyBzZXRDbGllbnRSZXF1ZXN0SWRQb2xpY3ksIHNldENsaWVudFJlcXVlc3RJZFBvbGljeU5hbWUsIH0gZnJvbSBcIi4vcG9saWNpZXMvc2V0Q2xpZW50UmVxdWVzdElkUG9saWN5LmpzXCI7XG5leHBvcnQgeyBsb2dQb2xpY3ksIGxvZ1BvbGljeU5hbWUgfSBmcm9tIFwiLi9wb2xpY2llcy9sb2dQb2xpY3kuanNcIjtcbmV4cG9ydCB7IG11bHRpcGFydFBvbGljeSwgbXVsdGlwYXJ0UG9saWN5TmFtZSB9IGZyb20gXCIuL3BvbGljaWVzL211bHRpcGFydFBvbGljeS5qc1wiO1xuZXhwb3J0IHsgcHJveHlQb2xpY3ksIHByb3h5UG9saWN5TmFtZSwgZ2V0RGVmYXVsdFByb3h5U2V0dGluZ3MgfSBmcm9tIFwiLi9wb2xpY2llcy9wcm94eVBvbGljeS5qc1wiO1xuZXhwb3J0IHsgcmVkaXJlY3RQb2xpY3ksIHJlZGlyZWN0UG9saWN5TmFtZSwgfSBmcm9tIFwiLi9wb2xpY2llcy9yZWRpcmVjdFBvbGljeS5qc1wiO1xuZXhwb3J0IHsgc3lzdGVtRXJyb3JSZXRyeVBvbGljeSwgc3lzdGVtRXJyb3JSZXRyeVBvbGljeU5hbWUsIH0gZnJvbSBcIi4vcG9saWNpZXMvc3lzdGVtRXJyb3JSZXRyeVBvbGljeS5qc1wiO1xuZXhwb3J0IHsgdGhyb3R0bGluZ1JldHJ5UG9saWN5LCB0aHJvdHRsaW5nUmV0cnlQb2xpY3lOYW1lLCB9IGZyb20gXCIuL3BvbGljaWVzL3Rocm90dGxpbmdSZXRyeVBvbGljeS5qc1wiO1xuZXhwb3J0IHsgcmV0cnlQb2xpY3kgfSBmcm9tIFwiLi9wb2xpY2llcy9yZXRyeVBvbGljeS5qc1wiO1xuZXhwb3J0IHsgdHJhY2luZ1BvbGljeSwgdHJhY2luZ1BvbGljeU5hbWUsIH0gZnJvbSBcIi4vcG9saWNpZXMvdHJhY2luZ1BvbGljeS5qc1wiO1xuZXhwb3J0IHsgZGVmYXVsdFJldHJ5UG9saWN5LCB9IGZyb20gXCIuL3BvbGljaWVzL2RlZmF1bHRSZXRyeVBvbGljeS5qc1wiO1xuZXhwb3J0IHsgdXNlckFnZW50UG9saWN5LCB1c2VyQWdlbnRQb2xpY3lOYW1lLCB9IGZyb20gXCIuL3BvbGljaWVzL3VzZXJBZ2VudFBvbGljeS5qc1wiO1xuZXhwb3J0IHsgdGxzUG9saWN5LCB0bHNQb2xpY3lOYW1lIH0gZnJvbSBcIi4vcG9saWNpZXMvdGxzUG9saWN5LmpzXCI7XG5leHBvcnQgeyBmb3JtRGF0YVBvbGljeSwgZm9ybURhdGFQb2xpY3lOYW1lIH0gZnJvbSBcIi4vcG9saWNpZXMvZm9ybURhdGFQb2xpY3kuanNcIjtcbmV4cG9ydCB7IGJlYXJlclRva2VuQXV0aGVudGljYXRpb25Qb2xpY3ksIGJlYXJlclRva2VuQXV0aGVudGljYXRpb25Qb2xpY3lOYW1lLCB9IGZyb20gXCIuL3BvbGljaWVzL2JlYXJlclRva2VuQXV0aGVudGljYXRpb25Qb2xpY3kuanNcIjtcbmV4cG9ydCB7IG5kSnNvblBvbGljeSwgbmRKc29uUG9saWN5TmFtZSB9IGZyb20gXCIuL3BvbGljaWVzL25kSnNvblBvbGljeS5qc1wiO1xuZXhwb3J0IHsgYXV4aWxpYXJ5QXV0aGVudGljYXRpb25IZWFkZXJQb2xpY3ksIGF1eGlsaWFyeUF1dGhlbnRpY2F0aW9uSGVhZGVyUG9saWN5TmFtZSwgfSBmcm9tIFwiLi9wb2xpY2llcy9hdXhpbGlhcnlBdXRoZW50aWNhdGlvbkhlYWRlclBvbGljeS5qc1wiO1xuZXhwb3J0IHsgYWdlbnRQb2xpY3ksIGFnZW50UG9saWN5TmFtZSB9IGZyb20gXCIuL3BvbGljaWVzL2FnZW50UG9saWN5LmpzXCI7XG5leHBvcnQgeyBjcmVhdGVGaWxlLCBjcmVhdGVGaWxlRnJvbVN0cmVhbSwgfSBmcm9tIFwiLi91dGlsL2ZpbGUuanNcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/log.js":
/*!****************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/log.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   logger: () => (/* binding */ logger)\n/* harmony export */ });\n/* harmony import */ var _azure_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/logger */ \"(rsc)/./node_modules/@azure/logger/dist/esm/index.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nconst logger = (0,_azure_logger__WEBPACK_IMPORTED_MODULE_0__.createClientLogger)(\"core-rest-pipeline\");\n//# sourceMappingURL=log.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9sb2cuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ21EO0FBQzVDLGVBQWUsaUVBQWtCO0FBQ3hDIiwic291cmNlcyI6WyIvVXNlcnMvdmljdG9yd2lsc29uL0Rlc2t0b3AvcHJvamVjdHMvRVpWaXovbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXJlc3QtcGlwZWxpbmUvZGlzdC9lc20vbG9nLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuaW1wb3J0IHsgY3JlYXRlQ2xpZW50TG9nZ2VyIH0gZnJvbSBcIkBhenVyZS9sb2dnZXJcIjtcbmV4cG9ydCBjb25zdCBsb2dnZXIgPSBjcmVhdGVDbGllbnRMb2dnZXIoXCJjb3JlLXJlc3QtcGlwZWxpbmVcIik7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sb2cuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/log.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/nodeHttpClient.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/nodeHttpClient.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createNodeHttpClient: () => (/* binding */ createNodeHttpClient),\n/* harmony export */   getBodyLength: () => (/* binding */ getBodyLength)\n/* harmony export */ });\n/* harmony import */ var node_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:http */ \"node:http\");\n/* harmony import */ var node_https__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node:https */ \"node:https\");\n/* harmony import */ var node_zlib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! node:zlib */ \"node:zlib\");\n/* harmony import */ var node_stream__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! node:stream */ \"node:stream\");\n/* harmony import */ var _azure_abort_controller__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @azure/abort-controller */ \"(rsc)/./node_modules/@azure/abort-controller/dist/esm/index.js\");\n/* harmony import */ var _httpHeaders_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./httpHeaders.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/httpHeaders.js\");\n/* harmony import */ var _restError_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./restError.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/restError.js\");\n/* harmony import */ var _log_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./log.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/log.js\");\n/* harmony import */ var _util_sanitizer_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./util/sanitizer.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/sanitizer.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n\n\n\n\n\n\nconst DEFAULT_TLS_SETTINGS = {};\nfunction isReadableStream(body) {\n    return body && typeof body.pipe === \"function\";\n}\nfunction isStreamComplete(stream) {\n    if (stream.readable === false) {\n        return Promise.resolve();\n    }\n    return new Promise((resolve) => {\n        const handler = () => {\n            resolve();\n            stream.removeListener(\"close\", handler);\n            stream.removeListener(\"end\", handler);\n            stream.removeListener(\"error\", handler);\n        };\n        stream.on(\"close\", handler);\n        stream.on(\"end\", handler);\n        stream.on(\"error\", handler);\n    });\n}\nfunction isArrayBuffer(body) {\n    return body && typeof body.byteLength === \"number\";\n}\nclass ReportTransform extends node_stream__WEBPACK_IMPORTED_MODULE_3__.Transform {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-function-type\n    _transform(chunk, _encoding, callback) {\n        this.push(chunk);\n        this.loadedBytes += chunk.length;\n        try {\n            this.progressCallback({ loadedBytes: this.loadedBytes });\n            callback();\n        }\n        catch (e) {\n            callback(e);\n        }\n    }\n    constructor(progressCallback) {\n        super();\n        this.loadedBytes = 0;\n        this.progressCallback = progressCallback;\n    }\n}\n/**\n * A HttpClient implementation that uses Node's \"https\" module to send HTTPS requests.\n * @internal\n */\nclass NodeHttpClient {\n    constructor() {\n        this.cachedHttpsAgents = new WeakMap();\n    }\n    /**\n     * Makes a request over an underlying transport layer and returns the response.\n     * @param request - The request to be made.\n     */\n    async sendRequest(request) {\n        var _a, _b, _c;\n        const abortController = new AbortController();\n        let abortListener;\n        if (request.abortSignal) {\n            if (request.abortSignal.aborted) {\n                throw new _azure_abort_controller__WEBPACK_IMPORTED_MODULE_4__.AbortError(\"The operation was aborted. Request has already been canceled.\");\n            }\n            abortListener = (event) => {\n                if (event.type === \"abort\") {\n                    abortController.abort();\n                }\n            };\n            request.abortSignal.addEventListener(\"abort\", abortListener);\n        }\n        let timeoutId;\n        if (request.timeout > 0) {\n            timeoutId = setTimeout(() => {\n                const sanitizer = new _util_sanitizer_js__WEBPACK_IMPORTED_MODULE_8__.Sanitizer();\n                _log_js__WEBPACK_IMPORTED_MODULE_7__.logger.info(`request to '${sanitizer.sanitizeUrl(request.url)}' timed out. canceling...`);\n                abortController.abort();\n            }, request.timeout);\n        }\n        const acceptEncoding = request.headers.get(\"Accept-Encoding\");\n        const shouldDecompress = (acceptEncoding === null || acceptEncoding === void 0 ? void 0 : acceptEncoding.includes(\"gzip\")) || (acceptEncoding === null || acceptEncoding === void 0 ? void 0 : acceptEncoding.includes(\"deflate\"));\n        let body = typeof request.body === \"function\" ? request.body() : request.body;\n        if (body && !request.headers.has(\"Content-Length\")) {\n            const bodyLength = getBodyLength(body);\n            if (bodyLength !== null) {\n                request.headers.set(\"Content-Length\", bodyLength);\n            }\n        }\n        let responseStream;\n        try {\n            if (body && request.onUploadProgress) {\n                const onUploadProgress = request.onUploadProgress;\n                const uploadReportStream = new ReportTransform(onUploadProgress);\n                uploadReportStream.on(\"error\", (e) => {\n                    _log_js__WEBPACK_IMPORTED_MODULE_7__.logger.error(\"Error in upload progress\", e);\n                });\n                if (isReadableStream(body)) {\n                    body.pipe(uploadReportStream);\n                }\n                else {\n                    uploadReportStream.end(body);\n                }\n                body = uploadReportStream;\n            }\n            const res = await this.makeRequest(request, abortController, body);\n            if (timeoutId !== undefined) {\n                clearTimeout(timeoutId);\n            }\n            const headers = getResponseHeaders(res);\n            const status = (_a = res.statusCode) !== null && _a !== void 0 ? _a : 0;\n            const response = {\n                status,\n                headers,\n                request,\n            };\n            // Responses to HEAD must not have a body.\n            // If they do return a body, that body must be ignored.\n            if (request.method === \"HEAD\") {\n                // call resume() and not destroy() to avoid closing the socket\n                // and losing keep alive\n                res.resume();\n                return response;\n            }\n            responseStream = shouldDecompress ? getDecodedResponseStream(res, headers) : res;\n            const onDownloadProgress = request.onDownloadProgress;\n            if (onDownloadProgress) {\n                const downloadReportStream = new ReportTransform(onDownloadProgress);\n                downloadReportStream.on(\"error\", (e) => {\n                    _log_js__WEBPACK_IMPORTED_MODULE_7__.logger.error(\"Error in download progress\", e);\n                });\n                responseStream.pipe(downloadReportStream);\n                responseStream = downloadReportStream;\n            }\n            if (\n            // Value of POSITIVE_INFINITY in streamResponseStatusCodes is considered as any status code\n            ((_b = request.streamResponseStatusCodes) === null || _b === void 0 ? void 0 : _b.has(Number.POSITIVE_INFINITY)) ||\n                ((_c = request.streamResponseStatusCodes) === null || _c === void 0 ? void 0 : _c.has(response.status))) {\n                response.readableStreamBody = responseStream;\n            }\n            else {\n                response.bodyAsText = await streamToText(responseStream);\n            }\n            return response;\n        }\n        finally {\n            // clean up event listener\n            if (request.abortSignal && abortListener) {\n                let uploadStreamDone = Promise.resolve();\n                if (isReadableStream(body)) {\n                    uploadStreamDone = isStreamComplete(body);\n                }\n                let downloadStreamDone = Promise.resolve();\n                if (isReadableStream(responseStream)) {\n                    downloadStreamDone = isStreamComplete(responseStream);\n                }\n                Promise.all([uploadStreamDone, downloadStreamDone])\n                    .then(() => {\n                    var _a;\n                    // eslint-disable-next-line promise/always-return\n                    if (abortListener) {\n                        (_a = request.abortSignal) === null || _a === void 0 ? void 0 : _a.removeEventListener(\"abort\", abortListener);\n                    }\n                })\n                    .catch((e) => {\n                    _log_js__WEBPACK_IMPORTED_MODULE_7__.logger.warning(\"Error when cleaning up abortListener on httpRequest\", e);\n                });\n            }\n        }\n    }\n    makeRequest(request, abortController, body) {\n        var _a;\n        const url = new URL(request.url);\n        const isInsecure = url.protocol !== \"https:\";\n        if (isInsecure && !request.allowInsecureConnection) {\n            throw new Error(`Cannot connect to ${request.url} while allowInsecureConnection is false.`);\n        }\n        const agent = (_a = request.agent) !== null && _a !== void 0 ? _a : this.getOrCreateAgent(request, isInsecure);\n        const options = {\n            agent,\n            hostname: url.hostname,\n            path: `${url.pathname}${url.search}`,\n            port: url.port,\n            method: request.method,\n            headers: request.headers.toJSON({ preserveCase: true }),\n        };\n        return new Promise((resolve, reject) => {\n            const req = isInsecure ? node_http__WEBPACK_IMPORTED_MODULE_0__.request(options, resolve) : node_https__WEBPACK_IMPORTED_MODULE_1__.request(options, resolve);\n            req.once(\"error\", (err) => {\n                var _a;\n                reject(new _restError_js__WEBPACK_IMPORTED_MODULE_6__.RestError(err.message, { code: (_a = err.code) !== null && _a !== void 0 ? _a : _restError_js__WEBPACK_IMPORTED_MODULE_6__.RestError.REQUEST_SEND_ERROR, request }));\n            });\n            abortController.signal.addEventListener(\"abort\", () => {\n                const abortError = new _azure_abort_controller__WEBPACK_IMPORTED_MODULE_4__.AbortError(\"The operation was aborted. Rejecting from abort signal callback while making request.\");\n                req.destroy(abortError);\n                reject(abortError);\n            });\n            if (body && isReadableStream(body)) {\n                body.pipe(req);\n            }\n            else if (body) {\n                if (typeof body === \"string\" || Buffer.isBuffer(body)) {\n                    req.end(body);\n                }\n                else if (isArrayBuffer(body)) {\n                    req.end(ArrayBuffer.isView(body) ? Buffer.from(body.buffer) : Buffer.from(body));\n                }\n                else {\n                    _log_js__WEBPACK_IMPORTED_MODULE_7__.logger.error(\"Unrecognized body type\", body);\n                    reject(new _restError_js__WEBPACK_IMPORTED_MODULE_6__.RestError(\"Unrecognized body type\"));\n                }\n            }\n            else {\n                // streams don't like \"undefined\" being passed as data\n                req.end();\n            }\n        });\n    }\n    getOrCreateAgent(request, isInsecure) {\n        var _a;\n        const disableKeepAlive = request.disableKeepAlive;\n        // Handle Insecure requests first\n        if (isInsecure) {\n            if (disableKeepAlive) {\n                // keepAlive:false is the default so we don't need a custom Agent\n                return node_http__WEBPACK_IMPORTED_MODULE_0__.globalAgent;\n            }\n            if (!this.cachedHttpAgent) {\n                // If there is no cached agent create a new one and cache it.\n                this.cachedHttpAgent = new node_http__WEBPACK_IMPORTED_MODULE_0__.Agent({ keepAlive: true });\n            }\n            return this.cachedHttpAgent;\n        }\n        else {\n            if (disableKeepAlive && !request.tlsSettings) {\n                // When there are no tlsSettings and keepAlive is false\n                // we don't need a custom agent\n                return node_https__WEBPACK_IMPORTED_MODULE_1__.globalAgent;\n            }\n            // We use the tlsSettings to index cached clients\n            const tlsSettings = (_a = request.tlsSettings) !== null && _a !== void 0 ? _a : DEFAULT_TLS_SETTINGS;\n            // Get the cached agent or create a new one with the\n            // provided values for keepAlive and tlsSettings\n            let agent = this.cachedHttpsAgents.get(tlsSettings);\n            if (agent && agent.options.keepAlive === !disableKeepAlive) {\n                return agent;\n            }\n            _log_js__WEBPACK_IMPORTED_MODULE_7__.logger.info(\"No cached TLS Agent exist, creating a new Agent\");\n            agent = new node_https__WEBPACK_IMPORTED_MODULE_1__.Agent(Object.assign({ \n                // keepAlive is true if disableKeepAlive is false.\n                keepAlive: !disableKeepAlive }, tlsSettings));\n            this.cachedHttpsAgents.set(tlsSettings, agent);\n            return agent;\n        }\n    }\n}\nfunction getResponseHeaders(res) {\n    const headers = (0,_httpHeaders_js__WEBPACK_IMPORTED_MODULE_5__.createHttpHeaders)();\n    for (const header of Object.keys(res.headers)) {\n        const value = res.headers[header];\n        if (Array.isArray(value)) {\n            if (value.length > 0) {\n                headers.set(header, value[0]);\n            }\n        }\n        else if (value) {\n            headers.set(header, value);\n        }\n    }\n    return headers;\n}\nfunction getDecodedResponseStream(stream, headers) {\n    const contentEncoding = headers.get(\"Content-Encoding\");\n    if (contentEncoding === \"gzip\") {\n        const unzip = node_zlib__WEBPACK_IMPORTED_MODULE_2__.createGunzip();\n        stream.pipe(unzip);\n        return unzip;\n    }\n    else if (contentEncoding === \"deflate\") {\n        const inflate = node_zlib__WEBPACK_IMPORTED_MODULE_2__.createInflate();\n        stream.pipe(inflate);\n        return inflate;\n    }\n    return stream;\n}\nfunction streamToText(stream) {\n    return new Promise((resolve, reject) => {\n        const buffer = [];\n        stream.on(\"data\", (chunk) => {\n            if (Buffer.isBuffer(chunk)) {\n                buffer.push(chunk);\n            }\n            else {\n                buffer.push(Buffer.from(chunk));\n            }\n        });\n        stream.on(\"end\", () => {\n            resolve(Buffer.concat(buffer).toString(\"utf8\"));\n        });\n        stream.on(\"error\", (e) => {\n            if (e && (e === null || e === void 0 ? void 0 : e.name) === \"AbortError\") {\n                reject(e);\n            }\n            else {\n                reject(new _restError_js__WEBPACK_IMPORTED_MODULE_6__.RestError(`Error reading response as text: ${e.message}`, {\n                    code: _restError_js__WEBPACK_IMPORTED_MODULE_6__.RestError.PARSE_ERROR,\n                }));\n            }\n        });\n    });\n}\n/** @internal */\nfunction getBodyLength(body) {\n    if (!body) {\n        return 0;\n    }\n    else if (Buffer.isBuffer(body)) {\n        return body.length;\n    }\n    else if (isReadableStream(body)) {\n        return null;\n    }\n    else if (isArrayBuffer(body)) {\n        return body.byteLength;\n    }\n    else if (typeof body === \"string\") {\n        return Buffer.from(body).length;\n    }\n    else {\n        return null;\n    }\n}\n/**\n * Create a new HttpClient instance for the NodeJS environment.\n * @internal\n */\nfunction createNodeHttpClient() {\n    return new NodeHttpClient();\n}\n//# sourceMappingURL=nodeHttpClient.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/nodeHttpClient.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/pipeline.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/pipeline.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createEmptyPipeline: () => (/* binding */ createEmptyPipeline)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nconst ValidPhaseNames = new Set([\"Deserialize\", \"Serialize\", \"Retry\", \"Sign\"]);\n/**\n * A private implementation of Pipeline.\n * Do not export this class from the package.\n * @internal\n */\nclass HttpPipeline {\n    constructor(policies) {\n        var _a;\n        this._policies = [];\n        this._policies = (_a = policies === null || policies === void 0 ? void 0 : policies.slice(0)) !== null && _a !== void 0 ? _a : [];\n        this._orderedPolicies = undefined;\n    }\n    addPolicy(policy, options = {}) {\n        if (options.phase && options.afterPhase) {\n            throw new Error(\"Policies inside a phase cannot specify afterPhase.\");\n        }\n        if (options.phase && !ValidPhaseNames.has(options.phase)) {\n            throw new Error(`Invalid phase name: ${options.phase}`);\n        }\n        if (options.afterPhase && !ValidPhaseNames.has(options.afterPhase)) {\n            throw new Error(`Invalid afterPhase name: ${options.afterPhase}`);\n        }\n        this._policies.push({\n            policy,\n            options,\n        });\n        this._orderedPolicies = undefined;\n    }\n    removePolicy(options) {\n        const removedPolicies = [];\n        this._policies = this._policies.filter((policyDescriptor) => {\n            if ((options.name && policyDescriptor.policy.name === options.name) ||\n                (options.phase && policyDescriptor.options.phase === options.phase)) {\n                removedPolicies.push(policyDescriptor.policy);\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n        this._orderedPolicies = undefined;\n        return removedPolicies;\n    }\n    sendRequest(httpClient, request) {\n        const policies = this.getOrderedPolicies();\n        const pipeline = policies.reduceRight((next, policy) => {\n            return (req) => {\n                return policy.sendRequest(req, next);\n            };\n        }, (req) => httpClient.sendRequest(req));\n        return pipeline(request);\n    }\n    getOrderedPolicies() {\n        if (!this._orderedPolicies) {\n            this._orderedPolicies = this.orderPolicies();\n        }\n        return this._orderedPolicies;\n    }\n    clone() {\n        return new HttpPipeline(this._policies);\n    }\n    static create() {\n        return new HttpPipeline();\n    }\n    orderPolicies() {\n        /**\n         * The goal of this method is to reliably order pipeline policies\n         * based on their declared requirements when they were added.\n         *\n         * Order is first determined by phase:\n         *\n         * 1. Serialize Phase\n         * 2. Policies not in a phase\n         * 3. Deserialize Phase\n         * 4. Retry Phase\n         * 5. Sign Phase\n         *\n         * Within each phase, policies are executed in the order\n         * they were added unless they were specified to execute\n         * before/after other policies or after a particular phase.\n         *\n         * To determine the final order, we will walk the policy list\n         * in phase order multiple times until all dependencies are\n         * satisfied.\n         *\n         * `afterPolicies` are the set of policies that must be\n         * executed before a given policy. This requirement is\n         * considered satisfied when each of the listed policies\n         * have been scheduled.\n         *\n         * `beforePolicies` are the set of policies that must be\n         * executed after a given policy. Since this dependency\n         * can be expressed by converting it into a equivalent\n         * `afterPolicies` declarations, they are normalized\n         * into that form for simplicity.\n         *\n         * An `afterPhase` dependency is considered satisfied when all\n         * policies in that phase have scheduled.\n         *\n         */\n        const result = [];\n        // Track all policies we know about.\n        const policyMap = new Map();\n        function createPhase(name) {\n            return {\n                name,\n                policies: new Set(),\n                hasRun: false,\n                hasAfterPolicies: false,\n            };\n        }\n        // Track policies for each phase.\n        const serializePhase = createPhase(\"Serialize\");\n        const noPhase = createPhase(\"None\");\n        const deserializePhase = createPhase(\"Deserialize\");\n        const retryPhase = createPhase(\"Retry\");\n        const signPhase = createPhase(\"Sign\");\n        // a list of phases in order\n        const orderedPhases = [serializePhase, noPhase, deserializePhase, retryPhase, signPhase];\n        // Small helper function to map phase name to each Phase\n        function getPhase(phase) {\n            if (phase === \"Retry\") {\n                return retryPhase;\n            }\n            else if (phase === \"Serialize\") {\n                return serializePhase;\n            }\n            else if (phase === \"Deserialize\") {\n                return deserializePhase;\n            }\n            else if (phase === \"Sign\") {\n                return signPhase;\n            }\n            else {\n                return noPhase;\n            }\n        }\n        // First walk each policy and create a node to track metadata.\n        for (const descriptor of this._policies) {\n            const policy = descriptor.policy;\n            const options = descriptor.options;\n            const policyName = policy.name;\n            if (policyMap.has(policyName)) {\n                throw new Error(\"Duplicate policy names not allowed in pipeline\");\n            }\n            const node = {\n                policy,\n                dependsOn: new Set(),\n                dependants: new Set(),\n            };\n            if (options.afterPhase) {\n                node.afterPhase = getPhase(options.afterPhase);\n                node.afterPhase.hasAfterPolicies = true;\n            }\n            policyMap.set(policyName, node);\n            const phase = getPhase(options.phase);\n            phase.policies.add(node);\n        }\n        // Now that each policy has a node, connect dependency references.\n        for (const descriptor of this._policies) {\n            const { policy, options } = descriptor;\n            const policyName = policy.name;\n            const node = policyMap.get(policyName);\n            if (!node) {\n                throw new Error(`Missing node for policy ${policyName}`);\n            }\n            if (options.afterPolicies) {\n                for (const afterPolicyName of options.afterPolicies) {\n                    const afterNode = policyMap.get(afterPolicyName);\n                    if (afterNode) {\n                        // Linking in both directions helps later\n                        // when we want to notify dependants.\n                        node.dependsOn.add(afterNode);\n                        afterNode.dependants.add(node);\n                    }\n                }\n            }\n            if (options.beforePolicies) {\n                for (const beforePolicyName of options.beforePolicies) {\n                    const beforeNode = policyMap.get(beforePolicyName);\n                    if (beforeNode) {\n                        // To execute before another node, make it\n                        // depend on the current node.\n                        beforeNode.dependsOn.add(node);\n                        node.dependants.add(beforeNode);\n                    }\n                }\n            }\n        }\n        function walkPhase(phase) {\n            phase.hasRun = true;\n            // Sets iterate in insertion order\n            for (const node of phase.policies) {\n                if (node.afterPhase && (!node.afterPhase.hasRun || node.afterPhase.policies.size)) {\n                    // If this node is waiting on a phase to complete,\n                    // we need to skip it for now.\n                    // Even if the phase is empty, we should wait for it\n                    // to be walked to avoid re-ordering policies.\n                    continue;\n                }\n                if (node.dependsOn.size === 0) {\n                    // If there's nothing else we're waiting for, we can\n                    // add this policy to the result list.\n                    result.push(node.policy);\n                    // Notify anything that depends on this policy that\n                    // the policy has been scheduled.\n                    for (const dependant of node.dependants) {\n                        dependant.dependsOn.delete(node);\n                    }\n                    policyMap.delete(node.policy.name);\n                    phase.policies.delete(node);\n                }\n            }\n        }\n        function walkPhases() {\n            for (const phase of orderedPhases) {\n                walkPhase(phase);\n                // if the phase isn't complete\n                if (phase.policies.size > 0 && phase !== noPhase) {\n                    if (!noPhase.hasRun) {\n                        // Try running noPhase to see if that unblocks this phase next tick.\n                        // This can happen if a phase that happens before noPhase\n                        // is waiting on a noPhase policy to complete.\n                        walkPhase(noPhase);\n                    }\n                    // Don't proceed to the next phase until this phase finishes.\n                    return;\n                }\n                if (phase.hasAfterPolicies) {\n                    // Run any policies unblocked by this phase\n                    walkPhase(noPhase);\n                }\n            }\n        }\n        // Iterate until we've put every node in the result list.\n        let iteration = 0;\n        while (policyMap.size > 0) {\n            iteration++;\n            const initialResultLength = result.length;\n            // Keep walking each phase in order until we can order every node.\n            walkPhases();\n            // The result list *should* get at least one larger each time\n            // after the first full pass.\n            // Otherwise, we're going to loop forever.\n            if (result.length <= initialResultLength && iteration > 1) {\n                throw new Error(\"Cannot satisfy policy dependencies due to requirements cycle.\");\n            }\n        }\n        return result;\n    }\n}\n/**\n * Creates a totally empty pipeline.\n * Useful for testing or creating a custom one.\n */\nfunction createEmptyPipeline() {\n    return HttpPipeline.create();\n}\n//# sourceMappingURL=pipeline.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/pipeline.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/pipelineRequest.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/pipelineRequest.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createPipelineRequest: () => (/* binding */ createPipelineRequest)\n/* harmony export */ });\n/* harmony import */ var _httpHeaders_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./httpHeaders.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/httpHeaders.js\");\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/core-util */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/index.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\nclass PipelineRequestImpl {\n    constructor(options) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        this.url = options.url;\n        this.body = options.body;\n        this.headers = (_a = options.headers) !== null && _a !== void 0 ? _a : (0,_httpHeaders_js__WEBPACK_IMPORTED_MODULE_0__.createHttpHeaders)();\n        this.method = (_b = options.method) !== null && _b !== void 0 ? _b : \"GET\";\n        this.timeout = (_c = options.timeout) !== null && _c !== void 0 ? _c : 0;\n        this.multipartBody = options.multipartBody;\n        this.formData = options.formData;\n        this.disableKeepAlive = (_d = options.disableKeepAlive) !== null && _d !== void 0 ? _d : false;\n        this.proxySettings = options.proxySettings;\n        this.streamResponseStatusCodes = options.streamResponseStatusCodes;\n        this.withCredentials = (_e = options.withCredentials) !== null && _e !== void 0 ? _e : false;\n        this.abortSignal = options.abortSignal;\n        this.tracingOptions = options.tracingOptions;\n        this.onUploadProgress = options.onUploadProgress;\n        this.onDownloadProgress = options.onDownloadProgress;\n        this.requestId = options.requestId || (0,_azure_core_util__WEBPACK_IMPORTED_MODULE_1__.randomUUID)();\n        this.allowInsecureConnection = (_f = options.allowInsecureConnection) !== null && _f !== void 0 ? _f : false;\n        this.enableBrowserStreams = (_g = options.enableBrowserStreams) !== null && _g !== void 0 ? _g : false;\n        this.agent = options.agent;\n        this.tlsSettings = options.tlsSettings;\n    }\n}\n/**\n * Creates a new pipeline request with the given options.\n * This method is to allow for the easy setting of default values and not required.\n * @param options - The options to create the request with.\n */\nfunction createPipelineRequest(options) {\n    return new PipelineRequestImpl(options);\n}\n//# sourceMappingURL=pipelineRequest.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9waXBlbGluZVJlcXVlc3QuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNxRDtBQUNQO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrRUFBK0Usa0VBQWlCO0FBQ2hHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4Qyw0REFBVTtBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWN0b3J3aWxzb24vRGVza3RvcC9wcm9qZWN0cy9FWlZpei9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9waXBlbGluZVJlcXVlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5pbXBvcnQgeyBjcmVhdGVIdHRwSGVhZGVycyB9IGZyb20gXCIuL2h0dHBIZWFkZXJzLmpzXCI7XG5pbXBvcnQgeyByYW5kb21VVUlEIH0gZnJvbSBcIkBhenVyZS9jb3JlLXV0aWxcIjtcbmNsYXNzIFBpcGVsaW5lUmVxdWVzdEltcGwge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZSwgX2YsIF9nO1xuICAgICAgICB0aGlzLnVybCA9IG9wdGlvbnMudXJsO1xuICAgICAgICB0aGlzLmJvZHkgPSBvcHRpb25zLmJvZHk7XG4gICAgICAgIHRoaXMuaGVhZGVycyA9IChfYSA9IG9wdGlvbnMuaGVhZGVycykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogY3JlYXRlSHR0cEhlYWRlcnMoKTtcbiAgICAgICAgdGhpcy5tZXRob2QgPSAoX2IgPSBvcHRpb25zLm1ldGhvZCkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogXCJHRVRcIjtcbiAgICAgICAgdGhpcy50aW1lb3V0ID0gKF9jID0gb3B0aW9ucy50aW1lb3V0KSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiAwO1xuICAgICAgICB0aGlzLm11bHRpcGFydEJvZHkgPSBvcHRpb25zLm11bHRpcGFydEJvZHk7XG4gICAgICAgIHRoaXMuZm9ybURhdGEgPSBvcHRpb25zLmZvcm1EYXRhO1xuICAgICAgICB0aGlzLmRpc2FibGVLZWVwQWxpdmUgPSAoX2QgPSBvcHRpb25zLmRpc2FibGVLZWVwQWxpdmUpICE9PSBudWxsICYmIF9kICE9PSB2b2lkIDAgPyBfZCA6IGZhbHNlO1xuICAgICAgICB0aGlzLnByb3h5U2V0dGluZ3MgPSBvcHRpb25zLnByb3h5U2V0dGluZ3M7XG4gICAgICAgIHRoaXMuc3RyZWFtUmVzcG9uc2VTdGF0dXNDb2RlcyA9IG9wdGlvbnMuc3RyZWFtUmVzcG9uc2VTdGF0dXNDb2RlcztcbiAgICAgICAgdGhpcy53aXRoQ3JlZGVudGlhbHMgPSAoX2UgPSBvcHRpb25zLndpdGhDcmVkZW50aWFscykgIT09IG51bGwgJiYgX2UgIT09IHZvaWQgMCA/IF9lIDogZmFsc2U7XG4gICAgICAgIHRoaXMuYWJvcnRTaWduYWwgPSBvcHRpb25zLmFib3J0U2lnbmFsO1xuICAgICAgICB0aGlzLnRyYWNpbmdPcHRpb25zID0gb3B0aW9ucy50cmFjaW5nT3B0aW9ucztcbiAgICAgICAgdGhpcy5vblVwbG9hZFByb2dyZXNzID0gb3B0aW9ucy5vblVwbG9hZFByb2dyZXNzO1xuICAgICAgICB0aGlzLm9uRG93bmxvYWRQcm9ncmVzcyA9IG9wdGlvbnMub25Eb3dubG9hZFByb2dyZXNzO1xuICAgICAgICB0aGlzLnJlcXVlc3RJZCA9IG9wdGlvbnMucmVxdWVzdElkIHx8IHJhbmRvbVVVSUQoKTtcbiAgICAgICAgdGhpcy5hbGxvd0luc2VjdXJlQ29ubmVjdGlvbiA9IChfZiA9IG9wdGlvbnMuYWxsb3dJbnNlY3VyZUNvbm5lY3Rpb24pICE9PSBudWxsICYmIF9mICE9PSB2b2lkIDAgPyBfZiA6IGZhbHNlO1xuICAgICAgICB0aGlzLmVuYWJsZUJyb3dzZXJTdHJlYW1zID0gKF9nID0gb3B0aW9ucy5lbmFibGVCcm93c2VyU3RyZWFtcykgIT09IG51bGwgJiYgX2cgIT09IHZvaWQgMCA/IF9nIDogZmFsc2U7XG4gICAgICAgIHRoaXMuYWdlbnQgPSBvcHRpb25zLmFnZW50O1xuICAgICAgICB0aGlzLnRsc1NldHRpbmdzID0gb3B0aW9ucy50bHNTZXR0aW5ncztcbiAgICB9XG59XG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgcGlwZWxpbmUgcmVxdWVzdCB3aXRoIHRoZSBnaXZlbiBvcHRpb25zLlxuICogVGhpcyBtZXRob2QgaXMgdG8gYWxsb3cgZm9yIHRoZSBlYXN5IHNldHRpbmcgb2YgZGVmYXVsdCB2YWx1ZXMgYW5kIG5vdCByZXF1aXJlZC5cbiAqIEBwYXJhbSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgdG8gY3JlYXRlIHRoZSByZXF1ZXN0IHdpdGguXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVQaXBlbGluZVJlcXVlc3Qob3B0aW9ucykge1xuICAgIHJldHVybiBuZXcgUGlwZWxpbmVSZXF1ZXN0SW1wbChvcHRpb25zKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBpcGVsaW5lUmVxdWVzdC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/pipelineRequest.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/agentPolicy.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/policies/agentPolicy.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   agentPolicy: () => (/* binding */ agentPolicy),\n/* harmony export */   agentPolicyName: () => (/* binding */ agentPolicyName)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * Name of the Agent Policy\n */\nconst agentPolicyName = \"agentPolicy\";\n/**\n * Gets a pipeline policy that sets http.agent\n */\nfunction agentPolicy(agent) {\n    return {\n        name: agentPolicyName,\n        sendRequest: async (req, next) => {\n            // Users may define an agent on the request, honor it over the client level one\n            if (!req.agent) {\n                req.agent = agent;\n            }\n            return next(req);\n        },\n    };\n}\n//# sourceMappingURL=agentPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9wb2xpY2llcy9hZ2VudFBvbGljeS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWN0b3J3aWxzb24vRGVza3RvcC9wcm9qZWN0cy9FWlZpei9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9wb2xpY2llcy9hZ2VudFBvbGljeS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbi8qKlxuICogTmFtZSBvZiB0aGUgQWdlbnQgUG9saWN5XG4gKi9cbmV4cG9ydCBjb25zdCBhZ2VudFBvbGljeU5hbWUgPSBcImFnZW50UG9saWN5XCI7XG4vKipcbiAqIEdldHMgYSBwaXBlbGluZSBwb2xpY3kgdGhhdCBzZXRzIGh0dHAuYWdlbnRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFnZW50UG9saWN5KGFnZW50KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbmFtZTogYWdlbnRQb2xpY3lOYW1lLFxuICAgICAgICBzZW5kUmVxdWVzdDogYXN5bmMgKHJlcSwgbmV4dCkgPT4ge1xuICAgICAgICAgICAgLy8gVXNlcnMgbWF5IGRlZmluZSBhbiBhZ2VudCBvbiB0aGUgcmVxdWVzdCwgaG9ub3IgaXQgb3ZlciB0aGUgY2xpZW50IGxldmVsIG9uZVxuICAgICAgICAgICAgaWYgKCFyZXEuYWdlbnQpIHtcbiAgICAgICAgICAgICAgICByZXEuYWdlbnQgPSBhZ2VudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZXh0KHJlcSk7XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFnZW50UG9saWN5LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/agentPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/auxiliaryAuthenticationHeaderPolicy.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/policies/auxiliaryAuthenticationHeaderPolicy.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   auxiliaryAuthenticationHeaderPolicy: () => (/* binding */ auxiliaryAuthenticationHeaderPolicy),\n/* harmony export */   auxiliaryAuthenticationHeaderPolicyName: () => (/* binding */ auxiliaryAuthenticationHeaderPolicyName)\n/* harmony export */ });\n/* harmony import */ var _util_tokenCycler_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/tokenCycler.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/tokenCycler.js\");\n/* harmony import */ var _log_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../log.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/log.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n/**\n * The programmatic identifier of the auxiliaryAuthenticationHeaderPolicy.\n */\nconst auxiliaryAuthenticationHeaderPolicyName = \"auxiliaryAuthenticationHeaderPolicy\";\nconst AUTHORIZATION_AUXILIARY_HEADER = \"x-ms-authorization-auxiliary\";\nasync function sendAuthorizeRequest(options) {\n    var _a, _b;\n    const { scopes, getAccessToken, request } = options;\n    const getTokenOptions = {\n        abortSignal: request.abortSignal,\n        tracingOptions: request.tracingOptions,\n    };\n    return (_b = (_a = (await getAccessToken(scopes, getTokenOptions))) === null || _a === void 0 ? void 0 : _a.token) !== null && _b !== void 0 ? _b : \"\";\n}\n/**\n * A policy for external tokens to `x-ms-authorization-auxiliary` header.\n * This header will be used when creating a cross-tenant application we may need to handle authentication requests\n * for resources that are in different tenants.\n * You could see [ARM docs](https://learn.microsoft.com/en-us/azure/azure-resource-manager/management/authenticate-multi-tenant) for a rundown of how this feature works\n */\nfunction auxiliaryAuthenticationHeaderPolicy(options) {\n    const { credentials, scopes } = options;\n    const logger = options.logger || _log_js__WEBPACK_IMPORTED_MODULE_1__.logger;\n    const tokenCyclerMap = new WeakMap();\n    return {\n        name: auxiliaryAuthenticationHeaderPolicyName,\n        async sendRequest(request, next) {\n            if (!request.url.toLowerCase().startsWith(\"https://\")) {\n                throw new Error(\"Bearer token authentication for auxiliary header is not permitted for non-TLS protected (non-https) URLs.\");\n            }\n            if (!credentials || credentials.length === 0) {\n                logger.info(`${auxiliaryAuthenticationHeaderPolicyName} header will not be set due to empty credentials.`);\n                return next(request);\n            }\n            const tokenPromises = [];\n            for (const credential of credentials) {\n                let getAccessToken = tokenCyclerMap.get(credential);\n                if (!getAccessToken) {\n                    getAccessToken = (0,_util_tokenCycler_js__WEBPACK_IMPORTED_MODULE_0__.createTokenCycler)(credential);\n                    tokenCyclerMap.set(credential, getAccessToken);\n                }\n                tokenPromises.push(sendAuthorizeRequest({\n                    scopes: Array.isArray(scopes) ? scopes : [scopes],\n                    request,\n                    getAccessToken,\n                    logger,\n                }));\n            }\n            const auxiliaryTokens = (await Promise.all(tokenPromises)).filter((token) => Boolean(token));\n            if (auxiliaryTokens.length === 0) {\n                logger.warning(`None of the auxiliary tokens are valid. ${AUTHORIZATION_AUXILIARY_HEADER} header will not be set.`);\n                return next(request);\n            }\n            request.headers.set(AUTHORIZATION_AUXILIARY_HEADER, auxiliaryTokens.map((token) => `Bearer ${token}`).join(\", \"));\n            return next(request);\n        },\n    };\n}\n//# sourceMappingURL=auxiliaryAuthenticationHeaderPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9wb2xpY2llcy9hdXhpbGlhcnlBdXRoZW50aWNhdGlvbkhlYWRlclBvbGljeS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQTtBQUMyRDtBQUNWO0FBQ2pEO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsWUFBWSxrQ0FBa0M7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxZQUFZLHNCQUFzQjtBQUNsQyxxQ0FBcUMsMkNBQVU7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQix5Q0FBeUM7QUFDeEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLHVFQUFpQjtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSwwRUFBMEUsZ0NBQWdDO0FBQzFHO0FBQ0E7QUFDQSx5R0FBeUcsTUFBTTtBQUMvRztBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWN0b3J3aWxzb24vRGVza3RvcC9wcm9qZWN0cy9FWlZpei9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9wb2xpY2llcy9hdXhpbGlhcnlBdXRoZW50aWNhdGlvbkhlYWRlclBvbGljeS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbmltcG9ydCB7IGNyZWF0ZVRva2VuQ3ljbGVyIH0gZnJvbSBcIi4uL3V0aWwvdG9rZW5DeWNsZXIuanNcIjtcbmltcG9ydCB7IGxvZ2dlciBhcyBjb3JlTG9nZ2VyIH0gZnJvbSBcIi4uL2xvZy5qc1wiO1xuLyoqXG4gKiBUaGUgcHJvZ3JhbW1hdGljIGlkZW50aWZpZXIgb2YgdGhlIGF1eGlsaWFyeUF1dGhlbnRpY2F0aW9uSGVhZGVyUG9saWN5LlxuICovXG5leHBvcnQgY29uc3QgYXV4aWxpYXJ5QXV0aGVudGljYXRpb25IZWFkZXJQb2xpY3lOYW1lID0gXCJhdXhpbGlhcnlBdXRoZW50aWNhdGlvbkhlYWRlclBvbGljeVwiO1xuY29uc3QgQVVUSE9SSVpBVElPTl9BVVhJTElBUllfSEVBREVSID0gXCJ4LW1zLWF1dGhvcml6YXRpb24tYXV4aWxpYXJ5XCI7XG5hc3luYyBmdW5jdGlvbiBzZW5kQXV0aG9yaXplUmVxdWVzdChvcHRpb25zKSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICBjb25zdCB7IHNjb3BlcywgZ2V0QWNjZXNzVG9rZW4sIHJlcXVlc3QgfSA9IG9wdGlvbnM7XG4gICAgY29uc3QgZ2V0VG9rZW5PcHRpb25zID0ge1xuICAgICAgICBhYm9ydFNpZ25hbDogcmVxdWVzdC5hYm9ydFNpZ25hbCxcbiAgICAgICAgdHJhY2luZ09wdGlvbnM6IHJlcXVlc3QudHJhY2luZ09wdGlvbnMsXG4gICAgfTtcbiAgICByZXR1cm4gKF9iID0gKF9hID0gKGF3YWl0IGdldEFjY2Vzc1Rva2VuKHNjb3BlcywgZ2V0VG9rZW5PcHRpb25zKSkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS50b2tlbikgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogXCJcIjtcbn1cbi8qKlxuICogQSBwb2xpY3kgZm9yIGV4dGVybmFsIHRva2VucyB0byBgeC1tcy1hdXRob3JpemF0aW9uLWF1eGlsaWFyeWAgaGVhZGVyLlxuICogVGhpcyBoZWFkZXIgd2lsbCBiZSB1c2VkIHdoZW4gY3JlYXRpbmcgYSBjcm9zcy10ZW5hbnQgYXBwbGljYXRpb24gd2UgbWF5IG5lZWQgdG8gaGFuZGxlIGF1dGhlbnRpY2F0aW9uIHJlcXVlc3RzXG4gKiBmb3IgcmVzb3VyY2VzIHRoYXQgYXJlIGluIGRpZmZlcmVudCB0ZW5hbnRzLlxuICogWW91IGNvdWxkIHNlZSBbQVJNIGRvY3NdKGh0dHBzOi8vbGVhcm4ubWljcm9zb2Z0LmNvbS9lbi11cy9henVyZS9henVyZS1yZXNvdXJjZS1tYW5hZ2VyL21hbmFnZW1lbnQvYXV0aGVudGljYXRlLW11bHRpLXRlbmFudCkgZm9yIGEgcnVuZG93biBvZiBob3cgdGhpcyBmZWF0dXJlIHdvcmtzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhdXhpbGlhcnlBdXRoZW50aWNhdGlvbkhlYWRlclBvbGljeShvcHRpb25zKSB7XG4gICAgY29uc3QgeyBjcmVkZW50aWFscywgc2NvcGVzIH0gPSBvcHRpb25zO1xuICAgIGNvbnN0IGxvZ2dlciA9IG9wdGlvbnMubG9nZ2VyIHx8IGNvcmVMb2dnZXI7XG4gICAgY29uc3QgdG9rZW5DeWNsZXJNYXAgPSBuZXcgV2Vha01hcCgpO1xuICAgIHJldHVybiB7XG4gICAgICAgIG5hbWU6IGF1eGlsaWFyeUF1dGhlbnRpY2F0aW9uSGVhZGVyUG9saWN5TmFtZSxcbiAgICAgICAgYXN5bmMgc2VuZFJlcXVlc3QocmVxdWVzdCwgbmV4dCkge1xuICAgICAgICAgICAgaWYgKCFyZXF1ZXN0LnVybC50b0xvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgoXCJodHRwczovL1wiKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkJlYXJlciB0b2tlbiBhdXRoZW50aWNhdGlvbiBmb3IgYXV4aWxpYXJ5IGhlYWRlciBpcyBub3QgcGVybWl0dGVkIGZvciBub24tVExTIHByb3RlY3RlZCAobm9uLWh0dHBzKSBVUkxzLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghY3JlZGVudGlhbHMgfHwgY3JlZGVudGlhbHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8oYCR7YXV4aWxpYXJ5QXV0aGVudGljYXRpb25IZWFkZXJQb2xpY3lOYW1lfSBoZWFkZXIgd2lsbCBub3QgYmUgc2V0IGR1ZSB0byBlbXB0eSBjcmVkZW50aWFscy5gKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV4dChyZXF1ZXN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHRva2VuUHJvbWlzZXMgPSBbXTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgY3JlZGVudGlhbCBvZiBjcmVkZW50aWFscykge1xuICAgICAgICAgICAgICAgIGxldCBnZXRBY2Nlc3NUb2tlbiA9IHRva2VuQ3ljbGVyTWFwLmdldChjcmVkZW50aWFsKTtcbiAgICAgICAgICAgICAgICBpZiAoIWdldEFjY2Vzc1Rva2VuKSB7XG4gICAgICAgICAgICAgICAgICAgIGdldEFjY2Vzc1Rva2VuID0gY3JlYXRlVG9rZW5DeWNsZXIoY3JlZGVudGlhbCk7XG4gICAgICAgICAgICAgICAgICAgIHRva2VuQ3ljbGVyTWFwLnNldChjcmVkZW50aWFsLCBnZXRBY2Nlc3NUb2tlbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRva2VuUHJvbWlzZXMucHVzaChzZW5kQXV0aG9yaXplUmVxdWVzdCh7XG4gICAgICAgICAgICAgICAgICAgIHNjb3BlczogQXJyYXkuaXNBcnJheShzY29wZXMpID8gc2NvcGVzIDogW3Njb3Blc10sXG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3QsXG4gICAgICAgICAgICAgICAgICAgIGdldEFjY2Vzc1Rva2VuLFxuICAgICAgICAgICAgICAgICAgICBsb2dnZXIsXG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgYXV4aWxpYXJ5VG9rZW5zID0gKGF3YWl0IFByb21pc2UuYWxsKHRva2VuUHJvbWlzZXMpKS5maWx0ZXIoKHRva2VuKSA9PiBCb29sZWFuKHRva2VuKSk7XG4gICAgICAgICAgICBpZiAoYXV4aWxpYXJ5VG9rZW5zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGxvZ2dlci53YXJuaW5nKGBOb25lIG9mIHRoZSBhdXhpbGlhcnkgdG9rZW5zIGFyZSB2YWxpZC4gJHtBVVRIT1JJWkFUSU9OX0FVWElMSUFSWV9IRUFERVJ9IGhlYWRlciB3aWxsIG5vdCBiZSBzZXQuYCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5leHQocmVxdWVzdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXF1ZXN0LmhlYWRlcnMuc2V0KEFVVEhPUklaQVRJT05fQVVYSUxJQVJZX0hFQURFUiwgYXV4aWxpYXJ5VG9rZW5zLm1hcCgodG9rZW4pID0+IGBCZWFyZXIgJHt0b2tlbn1gKS5qb2luKFwiLCBcIikpO1xuICAgICAgICAgICAgcmV0dXJuIG5leHQocmVxdWVzdCk7XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWF1eGlsaWFyeUF1dGhlbnRpY2F0aW9uSGVhZGVyUG9saWN5LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/auxiliaryAuthenticationHeaderPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/bearerTokenAuthenticationPolicy.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/policies/bearerTokenAuthenticationPolicy.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bearerTokenAuthenticationPolicy: () => (/* binding */ bearerTokenAuthenticationPolicy),\n/* harmony export */   bearerTokenAuthenticationPolicyName: () => (/* binding */ bearerTokenAuthenticationPolicyName),\n/* harmony export */   parseChallenges: () => (/* binding */ parseChallenges)\n/* harmony export */ });\n/* harmony import */ var _util_tokenCycler_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/tokenCycler.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/tokenCycler.js\");\n/* harmony import */ var _log_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../log.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/log.js\");\n/* harmony import */ var _restError_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../restError.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/restError.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n/**\n * The programmatic identifier of the bearerTokenAuthenticationPolicy.\n */\nconst bearerTokenAuthenticationPolicyName = \"bearerTokenAuthenticationPolicy\";\n/**\n * Try to send the given request.\n *\n * When a response is received, returns a tuple of the response received and, if the response was received\n * inside a thrown RestError, the RestError that was thrown.\n *\n * Otherwise, if an error was thrown while sending the request that did not provide an underlying response, it\n * will be rethrown.\n */\nasync function trySendRequest(request, next) {\n    try {\n        return [await next(request), undefined];\n    }\n    catch (e) {\n        if ((0,_restError_js__WEBPACK_IMPORTED_MODULE_2__.isRestError)(e) && e.response) {\n            return [e.response, e];\n        }\n        else {\n            throw e;\n        }\n    }\n}\n/**\n * Default authorize request handler\n */\nasync function defaultAuthorizeRequest(options) {\n    const { scopes, getAccessToken, request } = options;\n    // Enable CAE true by default\n    const getTokenOptions = {\n        abortSignal: request.abortSignal,\n        tracingOptions: request.tracingOptions,\n        enableCae: true,\n    };\n    const accessToken = await getAccessToken(scopes, getTokenOptions);\n    if (accessToken) {\n        options.request.headers.set(\"Authorization\", `Bearer ${accessToken.token}`);\n    }\n}\n/**\n * We will retrieve the challenge only if the response status code was 401,\n * and if the response contained the header \"WWW-Authenticate\" with a non-empty value.\n */\nfunction isChallengeResponse(response) {\n    return response.status === 401 && response.headers.has(\"WWW-Authenticate\");\n}\n/**\n * Re-authorize the request for CAE challenge.\n * The response containing the challenge is `options.response`.\n * If this method returns true, the underlying request will be sent once again.\n */\nasync function authorizeRequestOnCaeChallenge(onChallengeOptions, caeClaims) {\n    var _a;\n    const { scopes } = onChallengeOptions;\n    const accessToken = await onChallengeOptions.getAccessToken(scopes, {\n        enableCae: true,\n        claims: caeClaims,\n    });\n    if (!accessToken) {\n        return false;\n    }\n    onChallengeOptions.request.headers.set(\"Authorization\", `${(_a = accessToken.tokenType) !== null && _a !== void 0 ? _a : \"Bearer\"} ${accessToken.token}`);\n    return true;\n}\n/**\n * A policy that can request a token from a TokenCredential implementation and\n * then apply it to the Authorization header of a request as a Bearer token.\n */\nfunction bearerTokenAuthenticationPolicy(options) {\n    var _a, _b, _c;\n    const { credential, scopes, challengeCallbacks } = options;\n    const logger = options.logger || _log_js__WEBPACK_IMPORTED_MODULE_1__.logger;\n    const callbacks = {\n        authorizeRequest: (_b = (_a = challengeCallbacks === null || challengeCallbacks === void 0 ? void 0 : challengeCallbacks.authorizeRequest) === null || _a === void 0 ? void 0 : _a.bind(challengeCallbacks)) !== null && _b !== void 0 ? _b : defaultAuthorizeRequest,\n        authorizeRequestOnChallenge: (_c = challengeCallbacks === null || challengeCallbacks === void 0 ? void 0 : challengeCallbacks.authorizeRequestOnChallenge) === null || _c === void 0 ? void 0 : _c.bind(challengeCallbacks),\n    };\n    // This function encapsulates the entire process of reliably retrieving the token\n    // The options are left out of the public API until there's demand to configure this.\n    // Remember to extend `BearerTokenAuthenticationPolicyOptions` with `TokenCyclerOptions`\n    // in order to pass through the `options` object.\n    const getAccessToken = credential\n        ? (0,_util_tokenCycler_js__WEBPACK_IMPORTED_MODULE_0__.createTokenCycler)(credential /* , options */)\n        : () => Promise.resolve(null);\n    return {\n        name: bearerTokenAuthenticationPolicyName,\n        /**\n         * If there's no challenge parameter:\n         * - It will try to retrieve the token using the cache, or the credential's getToken.\n         * - Then it will try the next policy with or without the retrieved token.\n         *\n         * It uses the challenge parameters to:\n         * - Skip a first attempt to get the token from the credential if there's no cached token,\n         *   since it expects the token to be retrievable only after the challenge.\n         * - Prepare the outgoing request if the `prepareRequest` method has been provided.\n         * - Send an initial request to receive the challenge if it fails.\n         * - Process a challenge if the response contains it.\n         * - Retrieve a token with the challenge information, then re-send the request.\n         */\n        async sendRequest(request, next) {\n            if (!request.url.toLowerCase().startsWith(\"https://\")) {\n                throw new Error(\"Bearer token authentication is not permitted for non-TLS protected (non-https) URLs.\");\n            }\n            await callbacks.authorizeRequest({\n                scopes: Array.isArray(scopes) ? scopes : [scopes],\n                request,\n                getAccessToken,\n                logger,\n            });\n            let response;\n            let error;\n            let shouldSendRequest;\n            [response, error] = await trySendRequest(request, next);\n            if (isChallengeResponse(response)) {\n                let claims = getCaeChallengeClaims(response.headers.get(\"WWW-Authenticate\"));\n                // Handle CAE by default when receive CAE claim\n                if (claims) {\n                    let parsedClaim;\n                    // Return the response immediately if claims is not a valid base64 encoded string\n                    try {\n                        parsedClaim = atob(claims);\n                    }\n                    catch (e) {\n                        logger.warning(`The WWW-Authenticate header contains \"claims\" that cannot be parsed. Unable to perform the Continuous Access Evaluation authentication flow. Unparsable claims: ${claims}`);\n                        return response;\n                    }\n                    shouldSendRequest = await authorizeRequestOnCaeChallenge({\n                        scopes: Array.isArray(scopes) ? scopes : [scopes],\n                        response,\n                        request,\n                        getAccessToken,\n                        logger,\n                    }, parsedClaim);\n                    // Send updated request and handle response for RestError\n                    if (shouldSendRequest) {\n                        [response, error] = await trySendRequest(request, next);\n                    }\n                }\n                else if (callbacks.authorizeRequestOnChallenge) {\n                    // Handle custom challenges when client provides custom callback\n                    shouldSendRequest = await callbacks.authorizeRequestOnChallenge({\n                        scopes: Array.isArray(scopes) ? scopes : [scopes],\n                        request,\n                        response,\n                        getAccessToken,\n                        logger,\n                    });\n                    // Send updated request and handle response for RestError\n                    if (shouldSendRequest) {\n                        [response, error] = await trySendRequest(request, next);\n                    }\n                    // If we get another CAE Claim, we will handle it by default and return whatever value we receive for this\n                    if (isChallengeResponse(response)) {\n                        claims = getCaeChallengeClaims(response.headers.get(\"WWW-Authenticate\"));\n                        if (claims) {\n                            let parsedClaim;\n                            try {\n                                parsedClaim = atob(claims);\n                            }\n                            catch (e) {\n                                logger.warning(`The WWW-Authenticate header contains \"claims\" that cannot be parsed. Unable to perform the Continuous Access Evaluation authentication flow. Unparsable claims: ${claims}`);\n                                return response;\n                            }\n                            shouldSendRequest = await authorizeRequestOnCaeChallenge({\n                                scopes: Array.isArray(scopes) ? scopes : [scopes],\n                                response,\n                                request,\n                                getAccessToken,\n                                logger,\n                            }, parsedClaim);\n                            // Send updated request and handle response for RestError\n                            if (shouldSendRequest) {\n                                [response, error] = await trySendRequest(request, next);\n                            }\n                        }\n                    }\n                }\n            }\n            if (error) {\n                throw error;\n            }\n            else {\n                return response;\n            }\n        },\n    };\n}\n/**\n * Converts: `Bearer a=\"b\", c=\"d\", Pop e=\"f\", g=\"h\"`.\n * Into: `[ { scheme: 'Bearer', params: { a: 'b', c: 'd' } }, { scheme: 'Pop', params: { e: 'f', g: 'h' } } ]`.\n *\n * @internal\n */\nfunction parseChallenges(challenges) {\n    // Challenge regex seperates the string to individual challenges with different schemes in the format `Scheme a=\"b\", c=d`\n    // The challenge regex captures parameteres with either quotes values or unquoted values\n    const challengeRegex = /(\\w+)\\s+((?:\\w+=(?:\"[^\"]*\"|[^,]*),?\\s*)+)/g;\n    // Parameter regex captures the claims group removed from the scheme in the format `a=\"b\"` and `c=\"d\"`\n    // CAE challenge always have quoted parameters. For more reference, https://learn.microsoft.com/entra/identity-platform/claims-challenge\n    const paramRegex = /(\\w+)=\"([^\"]*)\"/g;\n    const parsedChallenges = [];\n    let match;\n    // Iterate over each challenge match\n    while ((match = challengeRegex.exec(challenges)) !== null) {\n        const scheme = match[1];\n        const paramsString = match[2];\n        const params = {};\n        let paramMatch;\n        // Iterate over each parameter match\n        while ((paramMatch = paramRegex.exec(paramsString)) !== null) {\n            params[paramMatch[1]] = paramMatch[2];\n        }\n        parsedChallenges.push({ scheme, params });\n    }\n    return parsedChallenges;\n}\n/**\n * Parse a pipeline response and look for a CAE challenge with \"Bearer\" scheme\n * Return the value in the header without parsing the challenge\n * @internal\n */\nfunction getCaeChallengeClaims(challenges) {\n    var _a;\n    if (!challenges) {\n        return;\n    }\n    // Find all challenges present in the header\n    const parsedChallenges = parseChallenges(challenges);\n    return (_a = parsedChallenges.find((x) => x.scheme === \"Bearer\" && x.params.claims && x.params.error === \"insufficient_claims\")) === null || _a === void 0 ? void 0 : _a.params.claims;\n}\n//# sourceMappingURL=bearerTokenAuthenticationPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/bearerTokenAuthenticationPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/decompressResponsePolicy.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/policies/decompressResponsePolicy.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decompressResponsePolicy: () => (/* binding */ decompressResponsePolicy),\n/* harmony export */   decompressResponsePolicyName: () => (/* binding */ decompressResponsePolicyName)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * The programmatic identifier of the decompressResponsePolicy.\n */\nconst decompressResponsePolicyName = \"decompressResponsePolicy\";\n/**\n * A policy to enable response decompression according to Accept-Encoding header\n * https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Encoding\n */\nfunction decompressResponsePolicy() {\n    return {\n        name: decompressResponsePolicyName,\n        async sendRequest(request, next) {\n            // HEAD requests have no body\n            if (request.method !== \"HEAD\") {\n                request.headers.set(\"Accept-Encoding\", \"gzip,deflate\");\n            }\n            return next(request);\n        },\n    };\n}\n//# sourceMappingURL=decompressResponsePolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9wb2xpY2llcy9kZWNvbXByZXNzUmVzcG9uc2VQb2xpY3kuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWN0b3J3aWxzb24vRGVza3RvcC9wcm9qZWN0cy9FWlZpei9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9wb2xpY2llcy9kZWNvbXByZXNzUmVzcG9uc2VQb2xpY3kuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4vKipcbiAqIFRoZSBwcm9ncmFtbWF0aWMgaWRlbnRpZmllciBvZiB0aGUgZGVjb21wcmVzc1Jlc3BvbnNlUG9saWN5LlxuICovXG5leHBvcnQgY29uc3QgZGVjb21wcmVzc1Jlc3BvbnNlUG9saWN5TmFtZSA9IFwiZGVjb21wcmVzc1Jlc3BvbnNlUG9saWN5XCI7XG4vKipcbiAqIEEgcG9saWN5IHRvIGVuYWJsZSByZXNwb25zZSBkZWNvbXByZXNzaW9uIGFjY29yZGluZyB0byBBY2NlcHQtRW5jb2RpbmcgaGVhZGVyXG4gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVFRQL0hlYWRlcnMvQWNjZXB0LUVuY29kaW5nXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWNvbXByZXNzUmVzcG9uc2VQb2xpY3koKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbmFtZTogZGVjb21wcmVzc1Jlc3BvbnNlUG9saWN5TmFtZSxcbiAgICAgICAgYXN5bmMgc2VuZFJlcXVlc3QocmVxdWVzdCwgbmV4dCkge1xuICAgICAgICAgICAgLy8gSEVBRCByZXF1ZXN0cyBoYXZlIG5vIGJvZHlcbiAgICAgICAgICAgIGlmIChyZXF1ZXN0Lm1ldGhvZCAhPT0gXCJIRUFEXCIpIHtcbiAgICAgICAgICAgICAgICByZXF1ZXN0LmhlYWRlcnMuc2V0KFwiQWNjZXB0LUVuY29kaW5nXCIsIFwiZ3ppcCxkZWZsYXRlXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5leHQocmVxdWVzdCk7XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlY29tcHJlc3NSZXNwb25zZVBvbGljeS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/decompressResponsePolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/defaultRetryPolicy.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/policies/defaultRetryPolicy.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultRetryPolicy: () => (/* binding */ defaultRetryPolicy),\n/* harmony export */   defaultRetryPolicyName: () => (/* binding */ defaultRetryPolicyName)\n/* harmony export */ });\n/* harmony import */ var _retryStrategies_exponentialRetryStrategy_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../retryStrategies/exponentialRetryStrategy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/retryStrategies/exponentialRetryStrategy.js\");\n/* harmony import */ var _retryStrategies_throttlingRetryStrategy_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../retryStrategies/throttlingRetryStrategy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/retryStrategies/throttlingRetryStrategy.js\");\n/* harmony import */ var _retryPolicy_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./retryPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/retryPolicy.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../constants.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/constants.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n\n/**\n * Name of the {@link defaultRetryPolicy}\n */\nconst defaultRetryPolicyName = \"defaultRetryPolicy\";\n/**\n * A policy that retries according to three strategies:\n * - When the server sends a 429 response with a Retry-After header.\n * - When there are errors in the underlying transport layer (e.g. DNS lookup failures).\n * - Or otherwise if the outgoing request fails, it will retry with an exponentially increasing delay.\n */\nfunction defaultRetryPolicy(options = {}) {\n    var _a;\n    return {\n        name: defaultRetryPolicyName,\n        sendRequest: (0,_retryPolicy_js__WEBPACK_IMPORTED_MODULE_2__.retryPolicy)([(0,_retryStrategies_throttlingRetryStrategy_js__WEBPACK_IMPORTED_MODULE_1__.throttlingRetryStrategy)(), (0,_retryStrategies_exponentialRetryStrategy_js__WEBPACK_IMPORTED_MODULE_0__.exponentialRetryStrategy)(options)], {\n            maxRetries: (_a = options.maxRetries) !== null && _a !== void 0 ? _a : _constants_js__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_RETRY_POLICY_COUNT,\n        }).sendRequest,\n    };\n}\n//# sourceMappingURL=defaultRetryPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9wb2xpY2llcy9kZWZhdWx0UmV0cnlQb2xpY3kuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUMwRjtBQUNGO0FBQ3pDO0FBQ2M7QUFDN0Q7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLHdDQUF3QztBQUMvQztBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsNERBQVcsRUFBRSxvR0FBdUIsSUFBSSxzR0FBd0I7QUFDckYsbUZBQW1GLHFFQUEwQjtBQUM3RyxTQUFTO0FBQ1Q7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvdmljdG9yd2lsc29uL0Rlc2t0b3AvcHJvamVjdHMvRVpWaXovbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXJlc3QtcGlwZWxpbmUvZGlzdC9lc20vcG9saWNpZXMvZGVmYXVsdFJldHJ5UG9saWN5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuaW1wb3J0IHsgZXhwb25lbnRpYWxSZXRyeVN0cmF0ZWd5IH0gZnJvbSBcIi4uL3JldHJ5U3RyYXRlZ2llcy9leHBvbmVudGlhbFJldHJ5U3RyYXRlZ3kuanNcIjtcbmltcG9ydCB7IHRocm90dGxpbmdSZXRyeVN0cmF0ZWd5IH0gZnJvbSBcIi4uL3JldHJ5U3RyYXRlZ2llcy90aHJvdHRsaW5nUmV0cnlTdHJhdGVneS5qc1wiO1xuaW1wb3J0IHsgcmV0cnlQb2xpY3kgfSBmcm9tIFwiLi9yZXRyeVBvbGljeS5qc1wiO1xuaW1wb3J0IHsgREVGQVVMVF9SRVRSWV9QT0xJQ1lfQ09VTlQgfSBmcm9tIFwiLi4vY29uc3RhbnRzLmpzXCI7XG4vKipcbiAqIE5hbWUgb2YgdGhlIHtAbGluayBkZWZhdWx0UmV0cnlQb2xpY3l9XG4gKi9cbmV4cG9ydCBjb25zdCBkZWZhdWx0UmV0cnlQb2xpY3lOYW1lID0gXCJkZWZhdWx0UmV0cnlQb2xpY3lcIjtcbi8qKlxuICogQSBwb2xpY3kgdGhhdCByZXRyaWVzIGFjY29yZGluZyB0byB0aHJlZSBzdHJhdGVnaWVzOlxuICogLSBXaGVuIHRoZSBzZXJ2ZXIgc2VuZHMgYSA0MjkgcmVzcG9uc2Ugd2l0aCBhIFJldHJ5LUFmdGVyIGhlYWRlci5cbiAqIC0gV2hlbiB0aGVyZSBhcmUgZXJyb3JzIGluIHRoZSB1bmRlcmx5aW5nIHRyYW5zcG9ydCBsYXllciAoZS5nLiBETlMgbG9va3VwIGZhaWx1cmVzKS5cbiAqIC0gT3Igb3RoZXJ3aXNlIGlmIHRoZSBvdXRnb2luZyByZXF1ZXN0IGZhaWxzLCBpdCB3aWxsIHJldHJ5IHdpdGggYW4gZXhwb25lbnRpYWxseSBpbmNyZWFzaW5nIGRlbGF5LlxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVmYXVsdFJldHJ5UG9saWN5KG9wdGlvbnMgPSB7fSkge1xuICAgIHZhciBfYTtcbiAgICByZXR1cm4ge1xuICAgICAgICBuYW1lOiBkZWZhdWx0UmV0cnlQb2xpY3lOYW1lLFxuICAgICAgICBzZW5kUmVxdWVzdDogcmV0cnlQb2xpY3koW3Rocm90dGxpbmdSZXRyeVN0cmF0ZWd5KCksIGV4cG9uZW50aWFsUmV0cnlTdHJhdGVneShvcHRpb25zKV0sIHtcbiAgICAgICAgICAgIG1heFJldHJpZXM6IChfYSA9IG9wdGlvbnMubWF4UmV0cmllcykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogREVGQVVMVF9SRVRSWV9QT0xJQ1lfQ09VTlQsXG4gICAgICAgIH0pLnNlbmRSZXF1ZXN0LFxuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWZhdWx0UmV0cnlQb2xpY3kuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/defaultRetryPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/exponentialRetryPolicy.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/policies/exponentialRetryPolicy.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   exponentialRetryPolicy: () => (/* binding */ exponentialRetryPolicy),\n/* harmony export */   exponentialRetryPolicyName: () => (/* binding */ exponentialRetryPolicyName)\n/* harmony export */ });\n/* harmony import */ var _retryStrategies_exponentialRetryStrategy_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../retryStrategies/exponentialRetryStrategy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/retryStrategies/exponentialRetryStrategy.js\");\n/* harmony import */ var _retryPolicy_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./retryPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/retryPolicy.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../constants.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/constants.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n/**\n * The programmatic identifier of the exponentialRetryPolicy.\n */\nconst exponentialRetryPolicyName = \"exponentialRetryPolicy\";\n/**\n * A policy that attempts to retry requests while introducing an exponentially increasing delay.\n * @param options - Options that configure retry logic.\n */\nfunction exponentialRetryPolicy(options = {}) {\n    var _a;\n    return (0,_retryPolicy_js__WEBPACK_IMPORTED_MODULE_1__.retryPolicy)([\n        (0,_retryStrategies_exponentialRetryStrategy_js__WEBPACK_IMPORTED_MODULE_0__.exponentialRetryStrategy)(Object.assign(Object.assign({}, options), { ignoreSystemErrors: true })),\n    ], {\n        maxRetries: (_a = options.maxRetries) !== null && _a !== void 0 ? _a : _constants_js__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_RETRY_POLICY_COUNT,\n    });\n}\n//# sourceMappingURL=exponentialRetryPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9wb2xpY2llcy9leHBvbmVudGlhbFJldHJ5UG9saWN5LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDQTtBQUMwRjtBQUMzQztBQUNjO0FBQzdEO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDTyw0Q0FBNEM7QUFDbkQ7QUFDQSxXQUFXLDREQUFXO0FBQ3RCLFFBQVEsc0dBQXdCLCtCQUErQixjQUFjLDBCQUEwQjtBQUN2RztBQUNBLCtFQUErRSxxRUFBMEI7QUFDekcsS0FBSztBQUNMO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWN0b3J3aWxzb24vRGVza3RvcC9wcm9qZWN0cy9FWlZpei9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9wb2xpY2llcy9leHBvbmVudGlhbFJldHJ5UG9saWN5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuaW1wb3J0IHsgZXhwb25lbnRpYWxSZXRyeVN0cmF0ZWd5IH0gZnJvbSBcIi4uL3JldHJ5U3RyYXRlZ2llcy9leHBvbmVudGlhbFJldHJ5U3RyYXRlZ3kuanNcIjtcbmltcG9ydCB7IHJldHJ5UG9saWN5IH0gZnJvbSBcIi4vcmV0cnlQb2xpY3kuanNcIjtcbmltcG9ydCB7IERFRkFVTFRfUkVUUllfUE9MSUNZX0NPVU5UIH0gZnJvbSBcIi4uL2NvbnN0YW50cy5qc1wiO1xuLyoqXG4gKiBUaGUgcHJvZ3JhbW1hdGljIGlkZW50aWZpZXIgb2YgdGhlIGV4cG9uZW50aWFsUmV0cnlQb2xpY3kuXG4gKi9cbmV4cG9ydCBjb25zdCBleHBvbmVudGlhbFJldHJ5UG9saWN5TmFtZSA9IFwiZXhwb25lbnRpYWxSZXRyeVBvbGljeVwiO1xuLyoqXG4gKiBBIHBvbGljeSB0aGF0IGF0dGVtcHRzIHRvIHJldHJ5IHJlcXVlc3RzIHdoaWxlIGludHJvZHVjaW5nIGFuIGV4cG9uZW50aWFsbHkgaW5jcmVhc2luZyBkZWxheS5cbiAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9ucyB0aGF0IGNvbmZpZ3VyZSByZXRyeSBsb2dpYy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV4cG9uZW50aWFsUmV0cnlQb2xpY3kob3B0aW9ucyA9IHt9KSB7XG4gICAgdmFyIF9hO1xuICAgIHJldHVybiByZXRyeVBvbGljeShbXG4gICAgICAgIGV4cG9uZW50aWFsUmV0cnlTdHJhdGVneShPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMpLCB7IGlnbm9yZVN5c3RlbUVycm9yczogdHJ1ZSB9KSksXG4gICAgXSwge1xuICAgICAgICBtYXhSZXRyaWVzOiAoX2EgPSBvcHRpb25zLm1heFJldHJpZXMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IERFRkFVTFRfUkVUUllfUE9MSUNZX0NPVU5ULFxuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXhwb25lbnRpYWxSZXRyeVBvbGljeS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/exponentialRetryPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/formDataPolicy.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/policies/formDataPolicy.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   formDataPolicy: () => (/* binding */ formDataPolicy),\n/* harmony export */   formDataPolicyName: () => (/* binding */ formDataPolicyName)\n/* harmony export */ });\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-util */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/index.js\");\n/* harmony import */ var _httpHeaders_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../httpHeaders.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/httpHeaders.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n/**\n * The programmatic identifier of the formDataPolicy.\n */\nconst formDataPolicyName = \"formDataPolicy\";\nfunction formDataToFormDataMap(formData) {\n    var _a;\n    const formDataMap = {};\n    for (const [key, value] of formData.entries()) {\n        (_a = formDataMap[key]) !== null && _a !== void 0 ? _a : (formDataMap[key] = []);\n        formDataMap[key].push(value);\n    }\n    return formDataMap;\n}\n/**\n * A policy that encodes FormData on the request into the body.\n */\nfunction formDataPolicy() {\n    return {\n        name: formDataPolicyName,\n        async sendRequest(request, next) {\n            if (_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.isNodeLike && typeof FormData !== \"undefined\" && request.body instanceof FormData) {\n                request.formData = formDataToFormDataMap(request.body);\n                request.body = undefined;\n            }\n            if (request.formData) {\n                const contentType = request.headers.get(\"Content-Type\");\n                if (contentType && contentType.indexOf(\"application/x-www-form-urlencoded\") !== -1) {\n                    request.body = wwwFormUrlEncode(request.formData);\n                }\n                else {\n                    await prepareFormData(request.formData, request);\n                }\n                request.formData = undefined;\n            }\n            return next(request);\n        },\n    };\n}\nfunction wwwFormUrlEncode(formData) {\n    const urlSearchParams = new URLSearchParams();\n    for (const [key, value] of Object.entries(formData)) {\n        if (Array.isArray(value)) {\n            for (const subValue of value) {\n                urlSearchParams.append(key, subValue.toString());\n            }\n        }\n        else {\n            urlSearchParams.append(key, value.toString());\n        }\n    }\n    return urlSearchParams.toString();\n}\nasync function prepareFormData(formData, request) {\n    // validate content type (multipart/form-data)\n    const contentType = request.headers.get(\"Content-Type\");\n    if (contentType && !contentType.startsWith(\"multipart/form-data\")) {\n        // content type is specified and is not multipart/form-data. Exit.\n        return;\n    }\n    request.headers.set(\"Content-Type\", contentType !== null && contentType !== void 0 ? contentType : \"multipart/form-data\");\n    // set body to MultipartRequestBody using content from FormDataMap\n    const parts = [];\n    for (const [fieldName, values] of Object.entries(formData)) {\n        for (const value of Array.isArray(values) ? values : [values]) {\n            if (typeof value === \"string\") {\n                parts.push({\n                    headers: (0,_httpHeaders_js__WEBPACK_IMPORTED_MODULE_1__.createHttpHeaders)({\n                        \"Content-Disposition\": `form-data; name=\"${fieldName}\"`,\n                    }),\n                    body: (0,_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.stringToUint8Array)(value, \"utf-8\"),\n                });\n            }\n            else if (value === undefined || value === null || typeof value !== \"object\") {\n                throw new Error(`Unexpected value for key ${fieldName}: ${value}. Value should be serialized to string first.`);\n            }\n            else {\n                // using || instead of ?? here since if value.name is empty we should create a file name\n                const fileName = value.name || \"blob\";\n                const headers = (0,_httpHeaders_js__WEBPACK_IMPORTED_MODULE_1__.createHttpHeaders)();\n                headers.set(\"Content-Disposition\", `form-data; name=\"${fieldName}\"; filename=\"${fileName}\"`);\n                // again, || is used since an empty value.type means the content type is unset\n                headers.set(\"Content-Type\", value.type || \"application/octet-stream\");\n                parts.push({\n                    headers,\n                    body: value,\n                });\n            }\n        }\n    }\n    request.multipartBody = { parts };\n}\n//# sourceMappingURL=formDataPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9wb2xpY2llcy9mb3JtRGF0YVBvbGljeS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQTtBQUNrRTtBQUNaO0FBQ3REO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0Isd0RBQVU7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsa0VBQWlCO0FBQzlDLDJEQUEyRCxRQUFRLFVBQVU7QUFDN0UscUJBQXFCO0FBQ3JCLDBCQUEwQixvRUFBa0I7QUFDNUMsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQSw0REFBNEQsVUFBVSxJQUFJLE1BQU07QUFDaEY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0Msa0VBQWlCO0FBQ2pELCtEQUErRCxRQUFRLFVBQVUsR0FBRyxZQUFZLFNBQVM7QUFDekc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcndpbHNvbi9EZXNrdG9wL3Byb2plY3RzL0VaVml6L25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS1yZXN0LXBpcGVsaW5lL2Rpc3QvZXNtL3BvbGljaWVzL2Zvcm1EYXRhUG9saWN5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuaW1wb3J0IHsgaXNOb2RlTGlrZSwgc3RyaW5nVG9VaW50OEFycmF5IH0gZnJvbSBcIkBhenVyZS9jb3JlLXV0aWxcIjtcbmltcG9ydCB7IGNyZWF0ZUh0dHBIZWFkZXJzIH0gZnJvbSBcIi4uL2h0dHBIZWFkZXJzLmpzXCI7XG4vKipcbiAqIFRoZSBwcm9ncmFtbWF0aWMgaWRlbnRpZmllciBvZiB0aGUgZm9ybURhdGFQb2xpY3kuXG4gKi9cbmV4cG9ydCBjb25zdCBmb3JtRGF0YVBvbGljeU5hbWUgPSBcImZvcm1EYXRhUG9saWN5XCI7XG5mdW5jdGlvbiBmb3JtRGF0YVRvRm9ybURhdGFNYXAoZm9ybURhdGEpIHtcbiAgICB2YXIgX2E7XG4gICAgY29uc3QgZm9ybURhdGFNYXAgPSB7fTtcbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBmb3JtRGF0YS5lbnRyaWVzKCkpIHtcbiAgICAgICAgKF9hID0gZm9ybURhdGFNYXBba2V5XSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogKGZvcm1EYXRhTWFwW2tleV0gPSBbXSk7XG4gICAgICAgIGZvcm1EYXRhTWFwW2tleV0ucHVzaCh2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiBmb3JtRGF0YU1hcDtcbn1cbi8qKlxuICogQSBwb2xpY3kgdGhhdCBlbmNvZGVzIEZvcm1EYXRhIG9uIHRoZSByZXF1ZXN0IGludG8gdGhlIGJvZHkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmb3JtRGF0YVBvbGljeSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBuYW1lOiBmb3JtRGF0YVBvbGljeU5hbWUsXG4gICAgICAgIGFzeW5jIHNlbmRSZXF1ZXN0KHJlcXVlc3QsIG5leHQpIHtcbiAgICAgICAgICAgIGlmIChpc05vZGVMaWtlICYmIHR5cGVvZiBGb3JtRGF0YSAhPT0gXCJ1bmRlZmluZWRcIiAmJiByZXF1ZXN0LmJvZHkgaW5zdGFuY2VvZiBGb3JtRGF0YSkge1xuICAgICAgICAgICAgICAgIHJlcXVlc3QuZm9ybURhdGEgPSBmb3JtRGF0YVRvRm9ybURhdGFNYXAocmVxdWVzdC5ib2R5KTtcbiAgICAgICAgICAgICAgICByZXF1ZXN0LmJvZHkgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocmVxdWVzdC5mb3JtRGF0YSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRlbnRUeXBlID0gcmVxdWVzdC5oZWFkZXJzLmdldChcIkNvbnRlbnQtVHlwZVwiKTtcbiAgICAgICAgICAgICAgICBpZiAoY29udGVudFR5cGUgJiYgY29udGVudFR5cGUuaW5kZXhPZihcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdC5ib2R5ID0gd3d3Rm9ybVVybEVuY29kZShyZXF1ZXN0LmZvcm1EYXRhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHByZXBhcmVGb3JtRGF0YShyZXF1ZXN0LmZvcm1EYXRhLCByZXF1ZXN0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVxdWVzdC5mb3JtRGF0YSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZXh0KHJlcXVlc3QpO1xuICAgICAgICB9LFxuICAgIH07XG59XG5mdW5jdGlvbiB3d3dGb3JtVXJsRW5jb2RlKGZvcm1EYXRhKSB7XG4gICAgY29uc3QgdXJsU2VhcmNoUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpO1xuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGZvcm1EYXRhKSkge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3Qgc3ViVmFsdWUgb2YgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICB1cmxTZWFyY2hQYXJhbXMuYXBwZW5kKGtleSwgc3ViVmFsdWUudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB1cmxTZWFyY2hQYXJhbXMuYXBwZW5kKGtleSwgdmFsdWUudG9TdHJpbmcoKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHVybFNlYXJjaFBhcmFtcy50b1N0cmluZygpO1xufVxuYXN5bmMgZnVuY3Rpb24gcHJlcGFyZUZvcm1EYXRhKGZvcm1EYXRhLCByZXF1ZXN0KSB7XG4gICAgLy8gdmFsaWRhdGUgY29udGVudCB0eXBlIChtdWx0aXBhcnQvZm9ybS1kYXRhKVxuICAgIGNvbnN0IGNvbnRlbnRUeXBlID0gcmVxdWVzdC5oZWFkZXJzLmdldChcIkNvbnRlbnQtVHlwZVwiKTtcbiAgICBpZiAoY29udGVudFR5cGUgJiYgIWNvbnRlbnRUeXBlLnN0YXJ0c1dpdGgoXCJtdWx0aXBhcnQvZm9ybS1kYXRhXCIpKSB7XG4gICAgICAgIC8vIGNvbnRlbnQgdHlwZSBpcyBzcGVjaWZpZWQgYW5kIGlzIG5vdCBtdWx0aXBhcnQvZm9ybS1kYXRhLiBFeGl0LlxuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHJlcXVlc3QuaGVhZGVycy5zZXQoXCJDb250ZW50LVR5cGVcIiwgY29udGVudFR5cGUgIT09IG51bGwgJiYgY29udGVudFR5cGUgIT09IHZvaWQgMCA/IGNvbnRlbnRUeXBlIDogXCJtdWx0aXBhcnQvZm9ybS1kYXRhXCIpO1xuICAgIC8vIHNldCBib2R5IHRvIE11bHRpcGFydFJlcXVlc3RCb2R5IHVzaW5nIGNvbnRlbnQgZnJvbSBGb3JtRGF0YU1hcFxuICAgIGNvbnN0IHBhcnRzID0gW107XG4gICAgZm9yIChjb25zdCBbZmllbGROYW1lLCB2YWx1ZXNdIG9mIE9iamVjdC5lbnRyaWVzKGZvcm1EYXRhKSkge1xuICAgICAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIEFycmF5LmlzQXJyYXkodmFsdWVzKSA/IHZhbHVlcyA6IFt2YWx1ZXNdKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgcGFydHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IGNyZWF0ZUh0dHBIZWFkZXJzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiQ29udGVudC1EaXNwb3NpdGlvblwiOiBgZm9ybS1kYXRhOyBuYW1lPVwiJHtmaWVsZE5hbWV9XCJgLFxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgYm9keTogc3RyaW5nVG9VaW50OEFycmF5KHZhbHVlLCBcInV0Zi04XCIpLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZSA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgIT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuZXhwZWN0ZWQgdmFsdWUgZm9yIGtleSAke2ZpZWxkTmFtZX06ICR7dmFsdWV9LiBWYWx1ZSBzaG91bGQgYmUgc2VyaWFsaXplZCB0byBzdHJpbmcgZmlyc3QuYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyB1c2luZyB8fCBpbnN0ZWFkIG9mID8/IGhlcmUgc2luY2UgaWYgdmFsdWUubmFtZSBpcyBlbXB0eSB3ZSBzaG91bGQgY3JlYXRlIGEgZmlsZSBuYW1lXG4gICAgICAgICAgICAgICAgY29uc3QgZmlsZU5hbWUgPSB2YWx1ZS5uYW1lIHx8IFwiYmxvYlwiO1xuICAgICAgICAgICAgICAgIGNvbnN0IGhlYWRlcnMgPSBjcmVhdGVIdHRwSGVhZGVycygpO1xuICAgICAgICAgICAgICAgIGhlYWRlcnMuc2V0KFwiQ29udGVudC1EaXNwb3NpdGlvblwiLCBgZm9ybS1kYXRhOyBuYW1lPVwiJHtmaWVsZE5hbWV9XCI7IGZpbGVuYW1lPVwiJHtmaWxlTmFtZX1cImApO1xuICAgICAgICAgICAgICAgIC8vIGFnYWluLCB8fCBpcyB1c2VkIHNpbmNlIGFuIGVtcHR5IHZhbHVlLnR5cGUgbWVhbnMgdGhlIGNvbnRlbnQgdHlwZSBpcyB1bnNldFxuICAgICAgICAgICAgICAgIGhlYWRlcnMuc2V0KFwiQ29udGVudC1UeXBlXCIsIHZhbHVlLnR5cGUgfHwgXCJhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW1cIik7XG4gICAgICAgICAgICAgICAgcGFydHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnMsXG4gICAgICAgICAgICAgICAgICAgIGJvZHk6IHZhbHVlLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJlcXVlc3QubXVsdGlwYXJ0Qm9keSA9IHsgcGFydHMgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZvcm1EYXRhUG9saWN5LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/formDataPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/logPolicy.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/policies/logPolicy.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   logPolicy: () => (/* binding */ logPolicy),\n/* harmony export */   logPolicyName: () => (/* binding */ logPolicyName)\n/* harmony export */ });\n/* harmony import */ var _log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../log.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/log.js\");\n/* harmony import */ var _util_sanitizer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/sanitizer.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/sanitizer.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n/**\n * The programmatic identifier of the logPolicy.\n */\nconst logPolicyName = \"logPolicy\";\n/**\n * A policy that logs all requests and responses.\n * @param options - Options to configure logPolicy.\n */\nfunction logPolicy(options = {}) {\n    var _a;\n    const logger = (_a = options.logger) !== null && _a !== void 0 ? _a : _log_js__WEBPACK_IMPORTED_MODULE_0__.logger.info;\n    const sanitizer = new _util_sanitizer_js__WEBPACK_IMPORTED_MODULE_1__.Sanitizer({\n        additionalAllowedHeaderNames: options.additionalAllowedHeaderNames,\n        additionalAllowedQueryParameters: options.additionalAllowedQueryParameters,\n    });\n    return {\n        name: logPolicyName,\n        async sendRequest(request, next) {\n            if (!logger.enabled) {\n                return next(request);\n            }\n            logger(`Request: ${sanitizer.sanitize(request)}`);\n            const response = await next(request);\n            logger(`Response status code: ${response.status}`);\n            logger(`Headers: ${sanitizer.sanitize(response.headers)}`);\n            return response;\n        },\n    };\n}\n//# sourceMappingURL=logPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9wb2xpY2llcy9sb2dQb2xpY3kuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDaUQ7QUFDQTtBQUNqRDtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ08sK0JBQStCO0FBQ3RDO0FBQ0EsMEVBQTBFLDJDQUFVO0FBQ3BGLDBCQUEwQix5REFBUztBQUNuQztBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQiw0QkFBNEI7QUFDM0Q7QUFDQSw0Q0FBNEMsZ0JBQWdCO0FBQzVELCtCQUErQixxQ0FBcUM7QUFDcEU7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvdmljdG9yd2lsc29uL0Rlc2t0b3AvcHJvamVjdHMvRVpWaXovbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXJlc3QtcGlwZWxpbmUvZGlzdC9lc20vcG9saWNpZXMvbG9nUG9saWN5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuaW1wb3J0IHsgbG9nZ2VyIGFzIGNvcmVMb2dnZXIgfSBmcm9tIFwiLi4vbG9nLmpzXCI7XG5pbXBvcnQgeyBTYW5pdGl6ZXIgfSBmcm9tIFwiLi4vdXRpbC9zYW5pdGl6ZXIuanNcIjtcbi8qKlxuICogVGhlIHByb2dyYW1tYXRpYyBpZGVudGlmaWVyIG9mIHRoZSBsb2dQb2xpY3kuXG4gKi9cbmV4cG9ydCBjb25zdCBsb2dQb2xpY3lOYW1lID0gXCJsb2dQb2xpY3lcIjtcbi8qKlxuICogQSBwb2xpY3kgdGhhdCBsb2dzIGFsbCByZXF1ZXN0cyBhbmQgcmVzcG9uc2VzLlxuICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25zIHRvIGNvbmZpZ3VyZSBsb2dQb2xpY3kuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsb2dQb2xpY3kob3B0aW9ucyA9IHt9KSB7XG4gICAgdmFyIF9hO1xuICAgIGNvbnN0IGxvZ2dlciA9IChfYSA9IG9wdGlvbnMubG9nZ2VyKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBjb3JlTG9nZ2VyLmluZm87XG4gICAgY29uc3Qgc2FuaXRpemVyID0gbmV3IFNhbml0aXplcih7XG4gICAgICAgIGFkZGl0aW9uYWxBbGxvd2VkSGVhZGVyTmFtZXM6IG9wdGlvbnMuYWRkaXRpb25hbEFsbG93ZWRIZWFkZXJOYW1lcyxcbiAgICAgICAgYWRkaXRpb25hbEFsbG93ZWRRdWVyeVBhcmFtZXRlcnM6IG9wdGlvbnMuYWRkaXRpb25hbEFsbG93ZWRRdWVyeVBhcmFtZXRlcnMsXG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbmFtZTogbG9nUG9saWN5TmFtZSxcbiAgICAgICAgYXN5bmMgc2VuZFJlcXVlc3QocmVxdWVzdCwgbmV4dCkge1xuICAgICAgICAgICAgaWYgKCFsb2dnZXIuZW5hYmxlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXh0KHJlcXVlc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbG9nZ2VyKGBSZXF1ZXN0OiAke3Nhbml0aXplci5zYW5pdGl6ZShyZXF1ZXN0KX1gKTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgbmV4dChyZXF1ZXN0KTtcbiAgICAgICAgICAgIGxvZ2dlcihgUmVzcG9uc2Ugc3RhdHVzIGNvZGU6ICR7cmVzcG9uc2Uuc3RhdHVzfWApO1xuICAgICAgICAgICAgbG9nZ2VyKGBIZWFkZXJzOiAke3Nhbml0aXplci5zYW5pdGl6ZShyZXNwb25zZS5oZWFkZXJzKX1gKTtcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgfSxcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9nUG9saWN5LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/logPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/multipartPolicy.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/policies/multipartPolicy.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   multipartPolicy: () => (/* binding */ multipartPolicy),\n/* harmony export */   multipartPolicyName: () => (/* binding */ multipartPolicyName)\n/* harmony export */ });\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-util */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/index.js\");\n/* harmony import */ var _util_concat_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/concat.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/concat.js\");\n/* harmony import */ var _util_typeGuards_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/typeGuards.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/typeGuards.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\nfunction generateBoundary() {\n    return `----AzSDKFormBoundary${(0,_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.randomUUID)()}`;\n}\nfunction encodeHeaders(headers) {\n    let result = \"\";\n    for (const [key, value] of headers) {\n        result += `${key}: ${value}\\r\\n`;\n    }\n    return result;\n}\nfunction getLength(source) {\n    if (source instanceof Uint8Array) {\n        return source.byteLength;\n    }\n    else if ((0,_util_typeGuards_js__WEBPACK_IMPORTED_MODULE_2__.isBlob)(source)) {\n        // if was created using createFile then -1 means we have an unknown size\n        return source.size === -1 ? undefined : source.size;\n    }\n    else {\n        return undefined;\n    }\n}\nfunction getTotalLength(sources) {\n    let total = 0;\n    for (const source of sources) {\n        const partLength = getLength(source);\n        if (partLength === undefined) {\n            return undefined;\n        }\n        else {\n            total += partLength;\n        }\n    }\n    return total;\n}\nasync function buildRequestBody(request, parts, boundary) {\n    const sources = [\n        (0,_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.stringToUint8Array)(`--${boundary}`, \"utf-8\"),\n        ...parts.flatMap((part) => [\n            (0,_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.stringToUint8Array)(\"\\r\\n\", \"utf-8\"),\n            (0,_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.stringToUint8Array)(encodeHeaders(part.headers), \"utf-8\"),\n            (0,_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.stringToUint8Array)(\"\\r\\n\", \"utf-8\"),\n            part.body,\n            (0,_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.stringToUint8Array)(`\\r\\n--${boundary}`, \"utf-8\"),\n        ]),\n        (0,_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.stringToUint8Array)(\"--\\r\\n\\r\\n\", \"utf-8\"),\n    ];\n    const contentLength = getTotalLength(sources);\n    if (contentLength) {\n        request.headers.set(\"Content-Length\", contentLength);\n    }\n    request.body = await (0,_util_concat_js__WEBPACK_IMPORTED_MODULE_1__.concat)(sources);\n}\n/**\n * Name of multipart policy\n */\nconst multipartPolicyName = \"multipartPolicy\";\nconst maxBoundaryLength = 70;\nconst validBoundaryCharacters = new Set(`abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'()+,-./:=?`);\nfunction assertValidBoundary(boundary) {\n    if (boundary.length > maxBoundaryLength) {\n        throw new Error(`Multipart boundary \"${boundary}\" exceeds maximum length of 70 characters`);\n    }\n    if (Array.from(boundary).some((x) => !validBoundaryCharacters.has(x))) {\n        throw new Error(`Multipart boundary \"${boundary}\" contains invalid characters`);\n    }\n}\n/**\n * Pipeline policy for multipart requests\n */\nfunction multipartPolicy() {\n    return {\n        name: multipartPolicyName,\n        async sendRequest(request, next) {\n            var _a;\n            if (!request.multipartBody) {\n                return next(request);\n            }\n            if (request.body) {\n                throw new Error(\"multipartBody and regular body cannot be set at the same time\");\n            }\n            let boundary = request.multipartBody.boundary;\n            const contentTypeHeader = (_a = request.headers.get(\"Content-Type\")) !== null && _a !== void 0 ? _a : \"multipart/mixed\";\n            const parsedHeader = contentTypeHeader.match(/^(multipart\\/[^ ;]+)(?:; *boundary=(.+))?$/);\n            if (!parsedHeader) {\n                throw new Error(`Got multipart request body, but content-type header was not multipart: ${contentTypeHeader}`);\n            }\n            const [, contentType, parsedBoundary] = parsedHeader;\n            if (parsedBoundary && boundary && parsedBoundary !== boundary) {\n                throw new Error(`Multipart boundary was specified as ${parsedBoundary} in the header, but got ${boundary} in the request body`);\n            }\n            boundary !== null && boundary !== void 0 ? boundary : (boundary = parsedBoundary);\n            if (boundary) {\n                assertValidBoundary(boundary);\n            }\n            else {\n                boundary = generateBoundary();\n            }\n            request.headers.set(\"Content-Type\", `${contentType}; boundary=${boundary}`);\n            await buildRequestBody(request, request.multipartBody.parts, boundary);\n            request.multipartBody = undefined;\n            return next(request);\n        },\n    };\n}\n//# sourceMappingURL=multipartPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9wb2xpY2llcy9tdWx0aXBhcnRQb2xpY3kuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ2tFO0FBQ3ZCO0FBQ0k7QUFDL0M7QUFDQSxtQ0FBbUMsNERBQVUsR0FBRztBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixJQUFJLElBQUksTUFBTTtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsMkRBQU07QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLG9FQUFrQixNQUFNLFNBQVM7QUFDekM7QUFDQSxZQUFZLG9FQUFrQjtBQUM5QixZQUFZLG9FQUFrQjtBQUM5QixZQUFZLG9FQUFrQjtBQUM5QjtBQUNBLFlBQVksb0VBQWtCLFVBQVUsU0FBUztBQUNqRDtBQUNBLFFBQVEsb0VBQWtCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsdURBQU07QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0NBQStDLFNBQVM7QUFDeEQ7QUFDQTtBQUNBLCtDQUErQyxTQUFTO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJFQUEyRSxRQUFRO0FBQ25GO0FBQ0EsMEdBQTBHLGtCQUFrQjtBQUM1SDtBQUNBO0FBQ0E7QUFDQSx1RUFBdUUsZ0JBQWdCLHlCQUF5QixVQUFVO0FBQzFIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtREFBbUQsY0FBYyxXQUFXLFNBQVM7QUFDckY7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcndpbHNvbi9EZXNrdG9wL3Byb2plY3RzL0VaVml6L25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS1yZXN0LXBpcGVsaW5lL2Rpc3QvZXNtL3BvbGljaWVzL211bHRpcGFydFBvbGljeS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbmltcG9ydCB7IHJhbmRvbVVVSUQsIHN0cmluZ1RvVWludDhBcnJheSB9IGZyb20gXCJAYXp1cmUvY29yZS11dGlsXCI7XG5pbXBvcnQgeyBjb25jYXQgfSBmcm9tIFwiLi4vdXRpbC9jb25jYXQuanNcIjtcbmltcG9ydCB7IGlzQmxvYiB9IGZyb20gXCIuLi91dGlsL3R5cGVHdWFyZHMuanNcIjtcbmZ1bmN0aW9uIGdlbmVyYXRlQm91bmRhcnkoKSB7XG4gICAgcmV0dXJuIGAtLS0tQXpTREtGb3JtQm91bmRhcnkke3JhbmRvbVVVSUQoKX1gO1xufVxuZnVuY3Rpb24gZW5jb2RlSGVhZGVycyhoZWFkZXJzKSB7XG4gICAgbGV0IHJlc3VsdCA9IFwiXCI7XG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgaGVhZGVycykge1xuICAgICAgICByZXN1bHQgKz0gYCR7a2V5fTogJHt2YWx1ZX1cXHJcXG5gO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gZ2V0TGVuZ3RoKHNvdXJjZSkge1xuICAgIGlmIChzb3VyY2UgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UuYnl0ZUxlbmd0aDtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNCbG9iKHNvdXJjZSkpIHtcbiAgICAgICAgLy8gaWYgd2FzIGNyZWF0ZWQgdXNpbmcgY3JlYXRlRmlsZSB0aGVuIC0xIG1lYW5zIHdlIGhhdmUgYW4gdW5rbm93biBzaXplXG4gICAgICAgIHJldHVybiBzb3VyY2Uuc2l6ZSA9PT0gLTEgPyB1bmRlZmluZWQgOiBzb3VyY2Uuc2l6ZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxufVxuZnVuY3Rpb24gZ2V0VG90YWxMZW5ndGgoc291cmNlcykge1xuICAgIGxldCB0b3RhbCA9IDA7XG4gICAgZm9yIChjb25zdCBzb3VyY2Ugb2Ygc291cmNlcykge1xuICAgICAgICBjb25zdCBwYXJ0TGVuZ3RoID0gZ2V0TGVuZ3RoKHNvdXJjZSk7XG4gICAgICAgIGlmIChwYXJ0TGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0b3RhbCArPSBwYXJ0TGVuZ3RoO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0b3RhbDtcbn1cbmFzeW5jIGZ1bmN0aW9uIGJ1aWxkUmVxdWVzdEJvZHkocmVxdWVzdCwgcGFydHMsIGJvdW5kYXJ5KSB7XG4gICAgY29uc3Qgc291cmNlcyA9IFtcbiAgICAgICAgc3RyaW5nVG9VaW50OEFycmF5KGAtLSR7Ym91bmRhcnl9YCwgXCJ1dGYtOFwiKSxcbiAgICAgICAgLi4ucGFydHMuZmxhdE1hcCgocGFydCkgPT4gW1xuICAgICAgICAgICAgc3RyaW5nVG9VaW50OEFycmF5KFwiXFxyXFxuXCIsIFwidXRmLThcIiksXG4gICAgICAgICAgICBzdHJpbmdUb1VpbnQ4QXJyYXkoZW5jb2RlSGVhZGVycyhwYXJ0LmhlYWRlcnMpLCBcInV0Zi04XCIpLFxuICAgICAgICAgICAgc3RyaW5nVG9VaW50OEFycmF5KFwiXFxyXFxuXCIsIFwidXRmLThcIiksXG4gICAgICAgICAgICBwYXJ0LmJvZHksXG4gICAgICAgICAgICBzdHJpbmdUb1VpbnQ4QXJyYXkoYFxcclxcbi0tJHtib3VuZGFyeX1gLCBcInV0Zi04XCIpLFxuICAgICAgICBdKSxcbiAgICAgICAgc3RyaW5nVG9VaW50OEFycmF5KFwiLS1cXHJcXG5cXHJcXG5cIiwgXCJ1dGYtOFwiKSxcbiAgICBdO1xuICAgIGNvbnN0IGNvbnRlbnRMZW5ndGggPSBnZXRUb3RhbExlbmd0aChzb3VyY2VzKTtcbiAgICBpZiAoY29udGVudExlbmd0aCkge1xuICAgICAgICByZXF1ZXN0LmhlYWRlcnMuc2V0KFwiQ29udGVudC1MZW5ndGhcIiwgY29udGVudExlbmd0aCk7XG4gICAgfVxuICAgIHJlcXVlc3QuYm9keSA9IGF3YWl0IGNvbmNhdChzb3VyY2VzKTtcbn1cbi8qKlxuICogTmFtZSBvZiBtdWx0aXBhcnQgcG9saWN5XG4gKi9cbmV4cG9ydCBjb25zdCBtdWx0aXBhcnRQb2xpY3lOYW1lID0gXCJtdWx0aXBhcnRQb2xpY3lcIjtcbmNvbnN0IG1heEJvdW5kYXJ5TGVuZ3RoID0gNzA7XG5jb25zdCB2YWxpZEJvdW5kYXJ5Q2hhcmFjdGVycyA9IG5ldyBTZXQoYGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVowMTIzNDU2Nzg5JygpKywtLi86PT9gKTtcbmZ1bmN0aW9uIGFzc2VydFZhbGlkQm91bmRhcnkoYm91bmRhcnkpIHtcbiAgICBpZiAoYm91bmRhcnkubGVuZ3RoID4gbWF4Qm91bmRhcnlMZW5ndGgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBNdWx0aXBhcnQgYm91bmRhcnkgXCIke2JvdW5kYXJ5fVwiIGV4Y2VlZHMgbWF4aW11bSBsZW5ndGggb2YgNzAgY2hhcmFjdGVyc2ApO1xuICAgIH1cbiAgICBpZiAoQXJyYXkuZnJvbShib3VuZGFyeSkuc29tZSgoeCkgPT4gIXZhbGlkQm91bmRhcnlDaGFyYWN0ZXJzLmhhcyh4KSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBNdWx0aXBhcnQgYm91bmRhcnkgXCIke2JvdW5kYXJ5fVwiIGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVyc2ApO1xuICAgIH1cbn1cbi8qKlxuICogUGlwZWxpbmUgcG9saWN5IGZvciBtdWx0aXBhcnQgcmVxdWVzdHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG11bHRpcGFydFBvbGljeSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBuYW1lOiBtdWx0aXBhcnRQb2xpY3lOYW1lLFxuICAgICAgICBhc3luYyBzZW5kUmVxdWVzdChyZXF1ZXN0LCBuZXh0KSB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICBpZiAoIXJlcXVlc3QubXVsdGlwYXJ0Qm9keSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXh0KHJlcXVlc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHJlcXVlc3QuYm9keSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm11bHRpcGFydEJvZHkgYW5kIHJlZ3VsYXIgYm9keSBjYW5ub3QgYmUgc2V0IGF0IHRoZSBzYW1lIHRpbWVcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgYm91bmRhcnkgPSByZXF1ZXN0Lm11bHRpcGFydEJvZHkuYm91bmRhcnk7XG4gICAgICAgICAgICBjb25zdCBjb250ZW50VHlwZUhlYWRlciA9IChfYSA9IHJlcXVlc3QuaGVhZGVycy5nZXQoXCJDb250ZW50LVR5cGVcIikpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFwibXVsdGlwYXJ0L21peGVkXCI7XG4gICAgICAgICAgICBjb25zdCBwYXJzZWRIZWFkZXIgPSBjb250ZW50VHlwZUhlYWRlci5tYXRjaCgvXihtdWx0aXBhcnRcXC9bXiA7XSspKD86OyAqYm91bmRhcnk9KC4rKSk/JC8pO1xuICAgICAgICAgICAgaWYgKCFwYXJzZWRIZWFkZXIpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEdvdCBtdWx0aXBhcnQgcmVxdWVzdCBib2R5LCBidXQgY29udGVudC10eXBlIGhlYWRlciB3YXMgbm90IG11bHRpcGFydDogJHtjb250ZW50VHlwZUhlYWRlcn1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IFssIGNvbnRlbnRUeXBlLCBwYXJzZWRCb3VuZGFyeV0gPSBwYXJzZWRIZWFkZXI7XG4gICAgICAgICAgICBpZiAocGFyc2VkQm91bmRhcnkgJiYgYm91bmRhcnkgJiYgcGFyc2VkQm91bmRhcnkgIT09IGJvdW5kYXJ5KSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBNdWx0aXBhcnQgYm91bmRhcnkgd2FzIHNwZWNpZmllZCBhcyAke3BhcnNlZEJvdW5kYXJ5fSBpbiB0aGUgaGVhZGVyLCBidXQgZ290ICR7Ym91bmRhcnl9IGluIHRoZSByZXF1ZXN0IGJvZHlgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJvdW5kYXJ5ICE9PSBudWxsICYmIGJvdW5kYXJ5ICE9PSB2b2lkIDAgPyBib3VuZGFyeSA6IChib3VuZGFyeSA9IHBhcnNlZEJvdW5kYXJ5KTtcbiAgICAgICAgICAgIGlmIChib3VuZGFyeSkge1xuICAgICAgICAgICAgICAgIGFzc2VydFZhbGlkQm91bmRhcnkoYm91bmRhcnkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgYm91bmRhcnkgPSBnZW5lcmF0ZUJvdW5kYXJ5KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXF1ZXN0LmhlYWRlcnMuc2V0KFwiQ29udGVudC1UeXBlXCIsIGAke2NvbnRlbnRUeXBlfTsgYm91bmRhcnk9JHtib3VuZGFyeX1gKTtcbiAgICAgICAgICAgIGF3YWl0IGJ1aWxkUmVxdWVzdEJvZHkocmVxdWVzdCwgcmVxdWVzdC5tdWx0aXBhcnRCb2R5LnBhcnRzLCBib3VuZGFyeSk7XG4gICAgICAgICAgICByZXF1ZXN0Lm11bHRpcGFydEJvZHkgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICByZXR1cm4gbmV4dChyZXF1ZXN0KTtcbiAgICAgICAgfSxcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bXVsdGlwYXJ0UG9saWN5LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/multipartPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/ndJsonPolicy.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/policies/ndJsonPolicy.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ndJsonPolicy: () => (/* binding */ ndJsonPolicy),\n/* harmony export */   ndJsonPolicyName: () => (/* binding */ ndJsonPolicyName)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * The programmatic identifier of the ndJsonPolicy.\n */\nconst ndJsonPolicyName = \"ndJsonPolicy\";\n/**\n * ndJsonPolicy is a policy used to control keep alive settings for every request.\n */\nfunction ndJsonPolicy() {\n    return {\n        name: ndJsonPolicyName,\n        async sendRequest(request, next) {\n            // There currently isn't a good way to bypass the serializer\n            if (typeof request.body === \"string\" && request.body.startsWith(\"[\")) {\n                const body = JSON.parse(request.body);\n                if (Array.isArray(body)) {\n                    request.body = body.map((item) => JSON.stringify(item) + \"\\n\").join(\"\");\n                }\n            }\n            return next(request);\n        },\n    };\n}\n//# sourceMappingURL=ndJsonPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9wb2xpY2llcy9uZEpzb25Qb2xpY3kuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvdmljdG9yd2lsc29uL0Rlc2t0b3AvcHJvamVjdHMvRVpWaXovbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXJlc3QtcGlwZWxpbmUvZGlzdC9lc20vcG9saWNpZXMvbmRKc29uUG9saWN5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuLyoqXG4gKiBUaGUgcHJvZ3JhbW1hdGljIGlkZW50aWZpZXIgb2YgdGhlIG5kSnNvblBvbGljeS5cbiAqL1xuZXhwb3J0IGNvbnN0IG5kSnNvblBvbGljeU5hbWUgPSBcIm5kSnNvblBvbGljeVwiO1xuLyoqXG4gKiBuZEpzb25Qb2xpY3kgaXMgYSBwb2xpY3kgdXNlZCB0byBjb250cm9sIGtlZXAgYWxpdmUgc2V0dGluZ3MgZm9yIGV2ZXJ5IHJlcXVlc3QuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBuZEpzb25Qb2xpY3koKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbmFtZTogbmRKc29uUG9saWN5TmFtZSxcbiAgICAgICAgYXN5bmMgc2VuZFJlcXVlc3QocmVxdWVzdCwgbmV4dCkge1xuICAgICAgICAgICAgLy8gVGhlcmUgY3VycmVudGx5IGlzbid0IGEgZ29vZCB3YXkgdG8gYnlwYXNzIHRoZSBzZXJpYWxpemVyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHJlcXVlc3QuYm9keSA9PT0gXCJzdHJpbmdcIiAmJiByZXF1ZXN0LmJvZHkuc3RhcnRzV2l0aChcIltcIikpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBib2R5ID0gSlNPTi5wYXJzZShyZXF1ZXN0LmJvZHkpO1xuICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGJvZHkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3QuYm9keSA9IGJvZHkubWFwKChpdGVtKSA9PiBKU09OLnN0cmluZ2lmeShpdGVtKSArIFwiXFxuXCIpLmpvaW4oXCJcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5leHQocmVxdWVzdCk7XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5kSnNvblBvbGljeS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/ndJsonPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/proxyPolicy.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/policies/proxyPolicy.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getDefaultProxySettings: () => (/* binding */ getDefaultProxySettings),\n/* harmony export */   globalNoProxyList: () => (/* binding */ globalNoProxyList),\n/* harmony export */   loadNoProxy: () => (/* binding */ loadNoProxy),\n/* harmony export */   proxyPolicy: () => (/* binding */ proxyPolicy),\n/* harmony export */   proxyPolicyName: () => (/* binding */ proxyPolicyName)\n/* harmony export */ });\n/* harmony import */ var https_proxy_agent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! https-proxy-agent */ \"(rsc)/./node_modules/https-proxy-agent/dist/index.js\");\n/* harmony import */ var http_proxy_agent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! http-proxy-agent */ \"(rsc)/./node_modules/http-proxy-agent/dist/index.js\");\n/* harmony import */ var _log_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../log.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/log.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\nconst HTTPS_PROXY = \"HTTPS_PROXY\";\nconst HTTP_PROXY = \"HTTP_PROXY\";\nconst ALL_PROXY = \"ALL_PROXY\";\nconst NO_PROXY = \"NO_PROXY\";\n/**\n * The programmatic identifier of the proxyPolicy.\n */\nconst proxyPolicyName = \"proxyPolicy\";\n/**\n * Stores the patterns specified in NO_PROXY environment variable.\n * @internal\n */\nconst globalNoProxyList = [];\nlet noProxyListLoaded = false;\n/** A cache of whether a host should bypass the proxy. */\nconst globalBypassedMap = new Map();\nfunction getEnvironmentValue(name) {\n    if (process.env[name]) {\n        return process.env[name];\n    }\n    else if (process.env[name.toLowerCase()]) {\n        return process.env[name.toLowerCase()];\n    }\n    return undefined;\n}\nfunction loadEnvironmentProxyValue() {\n    if (!process) {\n        return undefined;\n    }\n    const httpsProxy = getEnvironmentValue(HTTPS_PROXY);\n    const allProxy = getEnvironmentValue(ALL_PROXY);\n    const httpProxy = getEnvironmentValue(HTTP_PROXY);\n    return httpsProxy || allProxy || httpProxy;\n}\n/**\n * Check whether the host of a given `uri` matches any pattern in the no proxy list.\n * If there's a match, any request sent to the same host shouldn't have the proxy settings set.\n * This implementation is a port of https://github.com/Azure/azure-sdk-for-net/blob/8cca811371159e527159c7eb65602477898683e2/sdk/core/Azure.Core/src/Pipeline/Internal/HttpEnvironmentProxy.cs#L210\n */\nfunction isBypassed(uri, noProxyList, bypassedMap) {\n    if (noProxyList.length === 0) {\n        return false;\n    }\n    const host = new URL(uri).hostname;\n    if (bypassedMap === null || bypassedMap === void 0 ? void 0 : bypassedMap.has(host)) {\n        return bypassedMap.get(host);\n    }\n    let isBypassedFlag = false;\n    for (const pattern of noProxyList) {\n        if (pattern[0] === \".\") {\n            // This should match either domain it self or any subdomain or host\n            // .foo.com will match foo.com it self or *.foo.com\n            if (host.endsWith(pattern)) {\n                isBypassedFlag = true;\n            }\n            else {\n                if (host.length === pattern.length - 1 && host === pattern.slice(1)) {\n                    isBypassedFlag = true;\n                }\n            }\n        }\n        else {\n            if (host === pattern) {\n                isBypassedFlag = true;\n            }\n        }\n    }\n    bypassedMap === null || bypassedMap === void 0 ? void 0 : bypassedMap.set(host, isBypassedFlag);\n    return isBypassedFlag;\n}\nfunction loadNoProxy() {\n    const noProxy = getEnvironmentValue(NO_PROXY);\n    noProxyListLoaded = true;\n    if (noProxy) {\n        return noProxy\n            .split(\",\")\n            .map((item) => item.trim())\n            .filter((item) => item.length);\n    }\n    return [];\n}\n/**\n * This method converts a proxy url into `ProxySettings` for use with ProxyPolicy.\n * If no argument is given, it attempts to parse a proxy URL from the environment\n * variables `HTTPS_PROXY` or `HTTP_PROXY`.\n * @param proxyUrl - The url of the proxy to use. May contain authentication information.\n * @deprecated - Internally this method is no longer necessary when setting proxy information.\n */\nfunction getDefaultProxySettings(proxyUrl) {\n    if (!proxyUrl) {\n        proxyUrl = loadEnvironmentProxyValue();\n        if (!proxyUrl) {\n            return undefined;\n        }\n    }\n    const parsedUrl = new URL(proxyUrl);\n    const schema = parsedUrl.protocol ? parsedUrl.protocol + \"//\" : \"\";\n    return {\n        host: schema + parsedUrl.hostname,\n        port: Number.parseInt(parsedUrl.port || \"80\"),\n        username: parsedUrl.username,\n        password: parsedUrl.password,\n    };\n}\n/**\n * This method attempts to parse a proxy URL from the environment\n * variables `HTTPS_PROXY` or `HTTP_PROXY`.\n */\nfunction getDefaultProxySettingsInternal() {\n    const envProxy = loadEnvironmentProxyValue();\n    return envProxy ? new URL(envProxy) : undefined;\n}\nfunction getUrlFromProxySettings(settings) {\n    let parsedProxyUrl;\n    try {\n        parsedProxyUrl = new URL(settings.host);\n    }\n    catch (_a) {\n        throw new Error(`Expecting a valid host string in proxy settings, but found \"${settings.host}\".`);\n    }\n    parsedProxyUrl.port = String(settings.port);\n    if (settings.username) {\n        parsedProxyUrl.username = settings.username;\n    }\n    if (settings.password) {\n        parsedProxyUrl.password = settings.password;\n    }\n    return parsedProxyUrl;\n}\nfunction setProxyAgentOnRequest(request, cachedAgents, proxyUrl) {\n    // Custom Agent should take precedence so if one is present\n    // we should skip to avoid overwriting it.\n    if (request.agent) {\n        return;\n    }\n    const url = new URL(request.url);\n    const isInsecure = url.protocol !== \"https:\";\n    if (request.tlsSettings) {\n        _log_js__WEBPACK_IMPORTED_MODULE_2__.logger.warning(\"TLS settings are not supported in combination with custom Proxy, certificates provided to the client will be ignored.\");\n    }\n    const headers = request.headers.toJSON();\n    if (isInsecure) {\n        if (!cachedAgents.httpProxyAgent) {\n            cachedAgents.httpProxyAgent = new http_proxy_agent__WEBPACK_IMPORTED_MODULE_1__.HttpProxyAgent(proxyUrl, { headers });\n        }\n        request.agent = cachedAgents.httpProxyAgent;\n    }\n    else {\n        if (!cachedAgents.httpsProxyAgent) {\n            cachedAgents.httpsProxyAgent = new https_proxy_agent__WEBPACK_IMPORTED_MODULE_0__.HttpsProxyAgent(proxyUrl, { headers });\n        }\n        request.agent = cachedAgents.httpsProxyAgent;\n    }\n}\n/**\n * A policy that allows one to apply proxy settings to all requests.\n * If not passed static settings, they will be retrieved from the HTTPS_PROXY\n * or HTTP_PROXY environment variables.\n * @param proxySettings - ProxySettings to use on each request.\n * @param options - additional settings, for example, custom NO_PROXY patterns\n */\nfunction proxyPolicy(proxySettings, options) {\n    if (!noProxyListLoaded) {\n        globalNoProxyList.push(...loadNoProxy());\n    }\n    const defaultProxy = proxySettings\n        ? getUrlFromProxySettings(proxySettings)\n        : getDefaultProxySettingsInternal();\n    const cachedAgents = {};\n    return {\n        name: proxyPolicyName,\n        async sendRequest(request, next) {\n            var _a;\n            if (!request.proxySettings &&\n                defaultProxy &&\n                !isBypassed(request.url, (_a = options === null || options === void 0 ? void 0 : options.customNoProxyList) !== null && _a !== void 0 ? _a : globalNoProxyList, (options === null || options === void 0 ? void 0 : options.customNoProxyList) ? undefined : globalBypassedMap)) {\n                setProxyAgentOnRequest(request, cachedAgents, defaultProxy);\n            }\n            else if (request.proxySettings) {\n                setProxyAgentOnRequest(request, cachedAgents, getUrlFromProxySettings(request.proxySettings));\n            }\n            return next(request);\n        },\n    };\n}\n//# sourceMappingURL=proxyPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/proxyPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/redirectPolicy.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/policies/redirectPolicy.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   redirectPolicy: () => (/* binding */ redirectPolicy),\n/* harmony export */   redirectPolicyName: () => (/* binding */ redirectPolicyName)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * The programmatic identifier of the redirectPolicy.\n */\nconst redirectPolicyName = \"redirectPolicy\";\n/**\n * Methods that are allowed to follow redirects 301 and 302\n */\nconst allowedRedirect = [\"GET\", \"HEAD\"];\n/**\n * A policy to follow Location headers from the server in order\n * to support server-side redirection.\n * In the browser, this policy is not used.\n * @param options - Options to control policy behavior.\n */\nfunction redirectPolicy(options = {}) {\n    const { maxRetries = 20 } = options;\n    return {\n        name: redirectPolicyName,\n        async sendRequest(request, next) {\n            const response = await next(request);\n            return handleRedirect(next, response, maxRetries);\n        },\n    };\n}\nasync function handleRedirect(next, response, maxRetries, currentRetries = 0) {\n    const { request, status, headers } = response;\n    const locationHeader = headers.get(\"location\");\n    if (locationHeader &&\n        (status === 300 ||\n            (status === 301 && allowedRedirect.includes(request.method)) ||\n            (status === 302 && allowedRedirect.includes(request.method)) ||\n            (status === 303 && request.method === \"POST\") ||\n            status === 307) &&\n        currentRetries < maxRetries) {\n        const url = new URL(locationHeader, request.url);\n        request.url = url.toString();\n        // POST request with Status code 303 should be converted into a\n        // redirected GET request if the redirect url is present in the location header\n        if (status === 303) {\n            request.method = \"GET\";\n            request.headers.delete(\"Content-Length\");\n            delete request.body;\n        }\n        request.headers.delete(\"Authorization\");\n        const res = await next(request);\n        return handleRedirect(next, res, maxRetries, currentRetries + 1);\n    }\n    return response;\n}\n//# sourceMappingURL=redirectPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9wb2xpY2llcy9yZWRpcmVjdFBvbGljeS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sb0NBQW9DO0FBQzNDLFlBQVksa0JBQWtCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsWUFBWSwyQkFBMkI7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvdmljdG9yd2lsc29uL0Rlc2t0b3AvcHJvamVjdHMvRVpWaXovbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXJlc3QtcGlwZWxpbmUvZGlzdC9lc20vcG9saWNpZXMvcmVkaXJlY3RQb2xpY3kuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4vKipcbiAqIFRoZSBwcm9ncmFtbWF0aWMgaWRlbnRpZmllciBvZiB0aGUgcmVkaXJlY3RQb2xpY3kuXG4gKi9cbmV4cG9ydCBjb25zdCByZWRpcmVjdFBvbGljeU5hbWUgPSBcInJlZGlyZWN0UG9saWN5XCI7XG4vKipcbiAqIE1ldGhvZHMgdGhhdCBhcmUgYWxsb3dlZCB0byBmb2xsb3cgcmVkaXJlY3RzIDMwMSBhbmQgMzAyXG4gKi9cbmNvbnN0IGFsbG93ZWRSZWRpcmVjdCA9IFtcIkdFVFwiLCBcIkhFQURcIl07XG4vKipcbiAqIEEgcG9saWN5IHRvIGZvbGxvdyBMb2NhdGlvbiBoZWFkZXJzIGZyb20gdGhlIHNlcnZlciBpbiBvcmRlclxuICogdG8gc3VwcG9ydCBzZXJ2ZXItc2lkZSByZWRpcmVjdGlvbi5cbiAqIEluIHRoZSBicm93c2VyLCB0aGlzIHBvbGljeSBpcyBub3QgdXNlZC5cbiAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9ucyB0byBjb250cm9sIHBvbGljeSBiZWhhdmlvci5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlZGlyZWN0UG9saWN5KG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHsgbWF4UmV0cmllcyA9IDIwIH0gPSBvcHRpb25zO1xuICAgIHJldHVybiB7XG4gICAgICAgIG5hbWU6IHJlZGlyZWN0UG9saWN5TmFtZSxcbiAgICAgICAgYXN5bmMgc2VuZFJlcXVlc3QocmVxdWVzdCwgbmV4dCkge1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBuZXh0KHJlcXVlc3QpO1xuICAgICAgICAgICAgcmV0dXJuIGhhbmRsZVJlZGlyZWN0KG5leHQsIHJlc3BvbnNlLCBtYXhSZXRyaWVzKTtcbiAgICAgICAgfSxcbiAgICB9O1xufVxuYXN5bmMgZnVuY3Rpb24gaGFuZGxlUmVkaXJlY3QobmV4dCwgcmVzcG9uc2UsIG1heFJldHJpZXMsIGN1cnJlbnRSZXRyaWVzID0gMCkge1xuICAgIGNvbnN0IHsgcmVxdWVzdCwgc3RhdHVzLCBoZWFkZXJzIH0gPSByZXNwb25zZTtcbiAgICBjb25zdCBsb2NhdGlvbkhlYWRlciA9IGhlYWRlcnMuZ2V0KFwibG9jYXRpb25cIik7XG4gICAgaWYgKGxvY2F0aW9uSGVhZGVyICYmXG4gICAgICAgIChzdGF0dXMgPT09IDMwMCB8fFxuICAgICAgICAgICAgKHN0YXR1cyA9PT0gMzAxICYmIGFsbG93ZWRSZWRpcmVjdC5pbmNsdWRlcyhyZXF1ZXN0Lm1ldGhvZCkpIHx8XG4gICAgICAgICAgICAoc3RhdHVzID09PSAzMDIgJiYgYWxsb3dlZFJlZGlyZWN0LmluY2x1ZGVzKHJlcXVlc3QubWV0aG9kKSkgfHxcbiAgICAgICAgICAgIChzdGF0dXMgPT09IDMwMyAmJiByZXF1ZXN0Lm1ldGhvZCA9PT0gXCJQT1NUXCIpIHx8XG4gICAgICAgICAgICBzdGF0dXMgPT09IDMwNykgJiZcbiAgICAgICAgY3VycmVudFJldHJpZXMgPCBtYXhSZXRyaWVzKSB7XG4gICAgICAgIGNvbnN0IHVybCA9IG5ldyBVUkwobG9jYXRpb25IZWFkZXIsIHJlcXVlc3QudXJsKTtcbiAgICAgICAgcmVxdWVzdC51cmwgPSB1cmwudG9TdHJpbmcoKTtcbiAgICAgICAgLy8gUE9TVCByZXF1ZXN0IHdpdGggU3RhdHVzIGNvZGUgMzAzIHNob3VsZCBiZSBjb252ZXJ0ZWQgaW50byBhXG4gICAgICAgIC8vIHJlZGlyZWN0ZWQgR0VUIHJlcXVlc3QgaWYgdGhlIHJlZGlyZWN0IHVybCBpcyBwcmVzZW50IGluIHRoZSBsb2NhdGlvbiBoZWFkZXJcbiAgICAgICAgaWYgKHN0YXR1cyA9PT0gMzAzKSB7XG4gICAgICAgICAgICByZXF1ZXN0Lm1ldGhvZCA9IFwiR0VUXCI7XG4gICAgICAgICAgICByZXF1ZXN0LmhlYWRlcnMuZGVsZXRlKFwiQ29udGVudC1MZW5ndGhcIik7XG4gICAgICAgICAgICBkZWxldGUgcmVxdWVzdC5ib2R5O1xuICAgICAgICB9XG4gICAgICAgIHJlcXVlc3QuaGVhZGVycy5kZWxldGUoXCJBdXRob3JpemF0aW9uXCIpO1xuICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBuZXh0KHJlcXVlc3QpO1xuICAgICAgICByZXR1cm4gaGFuZGxlUmVkaXJlY3QobmV4dCwgcmVzLCBtYXhSZXRyaWVzLCBjdXJyZW50UmV0cmllcyArIDEpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzcG9uc2U7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWRpcmVjdFBvbGljeS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/redirectPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/retryPolicy.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/policies/retryPolicy.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   retryPolicy: () => (/* binding */ retryPolicy)\n/* harmony export */ });\n/* harmony import */ var _util_helpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/helpers.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/helpers.js\");\n/* harmony import */ var _azure_logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/logger */ \"(rsc)/./node_modules/@azure/logger/dist/esm/index.js\");\n/* harmony import */ var _azure_abort_controller__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @azure/abort-controller */ \"(rsc)/./node_modules/@azure/abort-controller/dist/esm/index.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../constants.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/constants.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n\nconst retryPolicyLogger = (0,_azure_logger__WEBPACK_IMPORTED_MODULE_1__.createClientLogger)(\"core-rest-pipeline retryPolicy\");\n/**\n * The programmatic identifier of the retryPolicy.\n */\nconst retryPolicyName = \"retryPolicy\";\n/**\n * retryPolicy is a generic policy to enable retrying requests when certain conditions are met\n */\nfunction retryPolicy(strategies, options = { maxRetries: _constants_js__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_RETRY_POLICY_COUNT }) {\n    const logger = options.logger || retryPolicyLogger;\n    return {\n        name: retryPolicyName,\n        async sendRequest(request, next) {\n            var _a, _b;\n            let response;\n            let responseError;\n            let retryCount = -1;\n            retryRequest: while (true) {\n                retryCount += 1;\n                response = undefined;\n                responseError = undefined;\n                try {\n                    logger.info(`Retry ${retryCount}: Attempting to send request`, request.requestId);\n                    response = await next(request);\n                    logger.info(`Retry ${retryCount}: Received a response from request`, request.requestId);\n                }\n                catch (e) {\n                    logger.error(`Retry ${retryCount}: Received an error from request`, request.requestId);\n                    // RestErrors are valid targets for the retry strategies.\n                    // If none of the retry strategies can work with them, they will be thrown later in this policy.\n                    // If the received error is not a RestError, it is immediately thrown.\n                    responseError = e;\n                    if (!e || responseError.name !== \"RestError\") {\n                        throw e;\n                    }\n                    response = responseError.response;\n                }\n                if ((_a = request.abortSignal) === null || _a === void 0 ? void 0 : _a.aborted) {\n                    logger.error(`Retry ${retryCount}: Request aborted.`);\n                    const abortError = new _azure_abort_controller__WEBPACK_IMPORTED_MODULE_2__.AbortError();\n                    throw abortError;\n                }\n                if (retryCount >= ((_b = options.maxRetries) !== null && _b !== void 0 ? _b : _constants_js__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_RETRY_POLICY_COUNT)) {\n                    logger.info(`Retry ${retryCount}: Maximum retries reached. Returning the last received response, or throwing the last received error.`);\n                    if (responseError) {\n                        throw responseError;\n                    }\n                    else if (response) {\n                        return response;\n                    }\n                    else {\n                        throw new Error(\"Maximum retries reached with no response or error to throw\");\n                    }\n                }\n                logger.info(`Retry ${retryCount}: Processing ${strategies.length} retry strategies.`);\n                strategiesLoop: for (const strategy of strategies) {\n                    const strategyLogger = strategy.logger || retryPolicyLogger;\n                    strategyLogger.info(`Retry ${retryCount}: Processing retry strategy ${strategy.name}.`);\n                    const modifiers = strategy.retry({\n                        retryCount,\n                        response,\n                        responseError,\n                    });\n                    if (modifiers.skipStrategy) {\n                        strategyLogger.info(`Retry ${retryCount}: Skipped.`);\n                        continue strategiesLoop;\n                    }\n                    const { errorToThrow, retryAfterInMs, redirectTo } = modifiers;\n                    if (errorToThrow) {\n                        strategyLogger.error(`Retry ${retryCount}: Retry strategy ${strategy.name} throws error:`, errorToThrow);\n                        throw errorToThrow;\n                    }\n                    if (retryAfterInMs || retryAfterInMs === 0) {\n                        strategyLogger.info(`Retry ${retryCount}: Retry strategy ${strategy.name} retries after ${retryAfterInMs}`);\n                        await (0,_util_helpers_js__WEBPACK_IMPORTED_MODULE_0__.delay)(retryAfterInMs, undefined, { abortSignal: request.abortSignal });\n                        continue retryRequest;\n                    }\n                    if (redirectTo) {\n                        strategyLogger.info(`Retry ${retryCount}: Retry strategy ${strategy.name} redirects to ${redirectTo}`);\n                        request.url = redirectTo;\n                        continue retryRequest;\n                    }\n                }\n                if (responseError) {\n                    logger.info(`None of the retry strategies could work with the received error. Throwing it.`);\n                    throw responseError;\n                }\n                if (response) {\n                    logger.info(`None of the retry strategies could work with the received response. Returning it.`);\n                    return response;\n                }\n                // If all the retries skip and there's no response,\n                // we're still in the retry loop, so a new request will be sent\n                // until `maxRetries` is reached.\n            }\n        },\n    };\n}\n//# sourceMappingURL=retryPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/retryPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/setClientRequestIdPolicy.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/policies/setClientRequestIdPolicy.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   setClientRequestIdPolicy: () => (/* binding */ setClientRequestIdPolicy),\n/* harmony export */   setClientRequestIdPolicyName: () => (/* binding */ setClientRequestIdPolicyName)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * The programmatic identifier of the setClientRequestIdPolicy.\n */\nconst setClientRequestIdPolicyName = \"setClientRequestIdPolicy\";\n/**\n * Each PipelineRequest gets a unique id upon creation.\n * This policy passes that unique id along via an HTTP header to enable better\n * telemetry and tracing.\n * @param requestIdHeaderName - The name of the header to pass the request ID to.\n */\nfunction setClientRequestIdPolicy(requestIdHeaderName = \"x-ms-client-request-id\") {\n    return {\n        name: setClientRequestIdPolicyName,\n        async sendRequest(request, next) {\n            if (!request.headers.has(requestIdHeaderName)) {\n                request.headers.set(requestIdHeaderName, request.requestId);\n            }\n            return next(request);\n        },\n    };\n}\n//# sourceMappingURL=setClientRequestIdPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9wb2xpY2llcy9zZXRDbGllbnRSZXF1ZXN0SWRQb2xpY3kuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcndpbHNvbi9EZXNrdG9wL3Byb2plY3RzL0VaVml6L25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS1yZXN0LXBpcGVsaW5lL2Rpc3QvZXNtL3BvbGljaWVzL3NldENsaWVudFJlcXVlc3RJZFBvbGljeS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbi8qKlxuICogVGhlIHByb2dyYW1tYXRpYyBpZGVudGlmaWVyIG9mIHRoZSBzZXRDbGllbnRSZXF1ZXN0SWRQb2xpY3kuXG4gKi9cbmV4cG9ydCBjb25zdCBzZXRDbGllbnRSZXF1ZXN0SWRQb2xpY3lOYW1lID0gXCJzZXRDbGllbnRSZXF1ZXN0SWRQb2xpY3lcIjtcbi8qKlxuICogRWFjaCBQaXBlbGluZVJlcXVlc3QgZ2V0cyBhIHVuaXF1ZSBpZCB1cG9uIGNyZWF0aW9uLlxuICogVGhpcyBwb2xpY3kgcGFzc2VzIHRoYXQgdW5pcXVlIGlkIGFsb25nIHZpYSBhbiBIVFRQIGhlYWRlciB0byBlbmFibGUgYmV0dGVyXG4gKiB0ZWxlbWV0cnkgYW5kIHRyYWNpbmcuXG4gKiBAcGFyYW0gcmVxdWVzdElkSGVhZGVyTmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBoZWFkZXIgdG8gcGFzcyB0aGUgcmVxdWVzdCBJRCB0by5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldENsaWVudFJlcXVlc3RJZFBvbGljeShyZXF1ZXN0SWRIZWFkZXJOYW1lID0gXCJ4LW1zLWNsaWVudC1yZXF1ZXN0LWlkXCIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBuYW1lOiBzZXRDbGllbnRSZXF1ZXN0SWRQb2xpY3lOYW1lLFxuICAgICAgICBhc3luYyBzZW5kUmVxdWVzdChyZXF1ZXN0LCBuZXh0KSB7XG4gICAgICAgICAgICBpZiAoIXJlcXVlc3QuaGVhZGVycy5oYXMocmVxdWVzdElkSGVhZGVyTmFtZSkpIHtcbiAgICAgICAgICAgICAgICByZXF1ZXN0LmhlYWRlcnMuc2V0KHJlcXVlc3RJZEhlYWRlck5hbWUsIHJlcXVlc3QucmVxdWVzdElkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZXh0KHJlcXVlc3QpO1xuICAgICAgICB9LFxuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZXRDbGllbnRSZXF1ZXN0SWRQb2xpY3kuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/setClientRequestIdPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/systemErrorRetryPolicy.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/policies/systemErrorRetryPolicy.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   systemErrorRetryPolicy: () => (/* binding */ systemErrorRetryPolicy),\n/* harmony export */   systemErrorRetryPolicyName: () => (/* binding */ systemErrorRetryPolicyName)\n/* harmony export */ });\n/* harmony import */ var _retryStrategies_exponentialRetryStrategy_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../retryStrategies/exponentialRetryStrategy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/retryStrategies/exponentialRetryStrategy.js\");\n/* harmony import */ var _retryPolicy_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./retryPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/retryPolicy.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../constants.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/constants.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n/**\n * Name of the {@link systemErrorRetryPolicy}\n */\nconst systemErrorRetryPolicyName = \"systemErrorRetryPolicy\";\n/**\n * A retry policy that specifically seeks to handle errors in the\n * underlying transport layer (e.g. DNS lookup failures) rather than\n * retryable error codes from the server itself.\n * @param options - Options that customize the policy.\n */\nfunction systemErrorRetryPolicy(options = {}) {\n    var _a;\n    return {\n        name: systemErrorRetryPolicyName,\n        sendRequest: (0,_retryPolicy_js__WEBPACK_IMPORTED_MODULE_1__.retryPolicy)([\n            (0,_retryStrategies_exponentialRetryStrategy_js__WEBPACK_IMPORTED_MODULE_0__.exponentialRetryStrategy)(Object.assign(Object.assign({}, options), { ignoreHttpStatusCodes: true })),\n        ], {\n            maxRetries: (_a = options.maxRetries) !== null && _a !== void 0 ? _a : _constants_js__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_RETRY_POLICY_COUNT,\n        }).sendRequest,\n    };\n}\n//# sourceMappingURL=systemErrorRetryPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9wb2xpY2llcy9zeXN0ZW1FcnJvclJldHJ5UG9saWN5LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDQTtBQUMwRjtBQUMzQztBQUNjO0FBQzdEO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyw0Q0FBNEM7QUFDbkQ7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLDREQUFXO0FBQ2hDLFlBQVksc0dBQXdCLCtCQUErQixjQUFjLDZCQUE2QjtBQUM5RztBQUNBLG1GQUFtRixxRUFBMEI7QUFDN0csU0FBUztBQUNUO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcndpbHNvbi9EZXNrdG9wL3Byb2plY3RzL0VaVml6L25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS1yZXN0LXBpcGVsaW5lL2Rpc3QvZXNtL3BvbGljaWVzL3N5c3RlbUVycm9yUmV0cnlQb2xpY3kuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5pbXBvcnQgeyBleHBvbmVudGlhbFJldHJ5U3RyYXRlZ3kgfSBmcm9tIFwiLi4vcmV0cnlTdHJhdGVnaWVzL2V4cG9uZW50aWFsUmV0cnlTdHJhdGVneS5qc1wiO1xuaW1wb3J0IHsgcmV0cnlQb2xpY3kgfSBmcm9tIFwiLi9yZXRyeVBvbGljeS5qc1wiO1xuaW1wb3J0IHsgREVGQVVMVF9SRVRSWV9QT0xJQ1lfQ09VTlQgfSBmcm9tIFwiLi4vY29uc3RhbnRzLmpzXCI7XG4vKipcbiAqIE5hbWUgb2YgdGhlIHtAbGluayBzeXN0ZW1FcnJvclJldHJ5UG9saWN5fVxuICovXG5leHBvcnQgY29uc3Qgc3lzdGVtRXJyb3JSZXRyeVBvbGljeU5hbWUgPSBcInN5c3RlbUVycm9yUmV0cnlQb2xpY3lcIjtcbi8qKlxuICogQSByZXRyeSBwb2xpY3kgdGhhdCBzcGVjaWZpY2FsbHkgc2Vla3MgdG8gaGFuZGxlIGVycm9ycyBpbiB0aGVcbiAqIHVuZGVybHlpbmcgdHJhbnNwb3J0IGxheWVyIChlLmcuIEROUyBsb29rdXAgZmFpbHVyZXMpIHJhdGhlciB0aGFuXG4gKiByZXRyeWFibGUgZXJyb3IgY29kZXMgZnJvbSB0aGUgc2VydmVyIGl0c2VsZi5cbiAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9ucyB0aGF0IGN1c3RvbWl6ZSB0aGUgcG9saWN5LlxuICovXG5leHBvcnQgZnVuY3Rpb24gc3lzdGVtRXJyb3JSZXRyeVBvbGljeShvcHRpb25zID0ge30pIHtcbiAgICB2YXIgX2E7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbmFtZTogc3lzdGVtRXJyb3JSZXRyeVBvbGljeU5hbWUsXG4gICAgICAgIHNlbmRSZXF1ZXN0OiByZXRyeVBvbGljeShbXG4gICAgICAgICAgICBleHBvbmVudGlhbFJldHJ5U3RyYXRlZ3koT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zKSwgeyBpZ25vcmVIdHRwU3RhdHVzQ29kZXM6IHRydWUgfSkpLFxuICAgICAgICBdLCB7XG4gICAgICAgICAgICBtYXhSZXRyaWVzOiAoX2EgPSBvcHRpb25zLm1heFJldHJpZXMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IERFRkFVTFRfUkVUUllfUE9MSUNZX0NPVU5ULFxuICAgICAgICB9KS5zZW5kUmVxdWVzdCxcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3lzdGVtRXJyb3JSZXRyeVBvbGljeS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/systemErrorRetryPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/throttlingRetryPolicy.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/policies/throttlingRetryPolicy.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   throttlingRetryPolicy: () => (/* binding */ throttlingRetryPolicy),\n/* harmony export */   throttlingRetryPolicyName: () => (/* binding */ throttlingRetryPolicyName)\n/* harmony export */ });\n/* harmony import */ var _retryStrategies_throttlingRetryStrategy_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../retryStrategies/throttlingRetryStrategy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/retryStrategies/throttlingRetryStrategy.js\");\n/* harmony import */ var _retryPolicy_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./retryPolicy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/retryPolicy.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../constants.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/constants.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n/**\n * Name of the {@link throttlingRetryPolicy}\n */\nconst throttlingRetryPolicyName = \"throttlingRetryPolicy\";\n/**\n * A policy that retries when the server sends a 429 response with a Retry-After header.\n *\n * To learn more, please refer to\n * https://learn.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-request-limits,\n * https://learn.microsoft.com/en-us/azure/azure-subscription-service-limits and\n * https://learn.microsoft.com/en-us/azure/virtual-machines/troubleshooting/troubleshooting-throttling-errors\n *\n * @param options - Options that configure retry logic.\n */\nfunction throttlingRetryPolicy(options = {}) {\n    var _a;\n    return {\n        name: throttlingRetryPolicyName,\n        sendRequest: (0,_retryPolicy_js__WEBPACK_IMPORTED_MODULE_1__.retryPolicy)([(0,_retryStrategies_throttlingRetryStrategy_js__WEBPACK_IMPORTED_MODULE_0__.throttlingRetryStrategy)()], {\n            maxRetries: (_a = options.maxRetries) !== null && _a !== void 0 ? _a : _constants_js__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_RETRY_POLICY_COUNT,\n        }).sendRequest,\n    };\n}\n//# sourceMappingURL=throttlingRetryPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9wb2xpY2llcy90aHJvdHRsaW5nUmV0cnlQb2xpY3kuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ3dGO0FBQ3pDO0FBQ2M7QUFDN0Q7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sMkNBQTJDO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQiw0REFBVyxFQUFFLG9HQUF1QjtBQUN6RCxtRkFBbUYscUVBQTBCO0FBQzdHLFNBQVM7QUFDVDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWN0b3J3aWxzb24vRGVza3RvcC9wcm9qZWN0cy9FWlZpei9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9wb2xpY2llcy90aHJvdHRsaW5nUmV0cnlQb2xpY3kuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5pbXBvcnQgeyB0aHJvdHRsaW5nUmV0cnlTdHJhdGVneSB9IGZyb20gXCIuLi9yZXRyeVN0cmF0ZWdpZXMvdGhyb3R0bGluZ1JldHJ5U3RyYXRlZ3kuanNcIjtcbmltcG9ydCB7IHJldHJ5UG9saWN5IH0gZnJvbSBcIi4vcmV0cnlQb2xpY3kuanNcIjtcbmltcG9ydCB7IERFRkFVTFRfUkVUUllfUE9MSUNZX0NPVU5UIH0gZnJvbSBcIi4uL2NvbnN0YW50cy5qc1wiO1xuLyoqXG4gKiBOYW1lIG9mIHRoZSB7QGxpbmsgdGhyb3R0bGluZ1JldHJ5UG9saWN5fVxuICovXG5leHBvcnQgY29uc3QgdGhyb3R0bGluZ1JldHJ5UG9saWN5TmFtZSA9IFwidGhyb3R0bGluZ1JldHJ5UG9saWN5XCI7XG4vKipcbiAqIEEgcG9saWN5IHRoYXQgcmV0cmllcyB3aGVuIHRoZSBzZXJ2ZXIgc2VuZHMgYSA0MjkgcmVzcG9uc2Ugd2l0aCBhIFJldHJ5LUFmdGVyIGhlYWRlci5cbiAqXG4gKiBUbyBsZWFybiBtb3JlLCBwbGVhc2UgcmVmZXIgdG9cbiAqIGh0dHBzOi8vbGVhcm4ubWljcm9zb2Z0LmNvbS9lbi11cy9henVyZS9henVyZS1yZXNvdXJjZS1tYW5hZ2VyL3Jlc291cmNlLW1hbmFnZXItcmVxdWVzdC1saW1pdHMsXG4gKiBodHRwczovL2xlYXJuLm1pY3Jvc29mdC5jb20vZW4tdXMvYXp1cmUvYXp1cmUtc3Vic2NyaXB0aW9uLXNlcnZpY2UtbGltaXRzIGFuZFxuICogaHR0cHM6Ly9sZWFybi5taWNyb3NvZnQuY29tL2VuLXVzL2F6dXJlL3ZpcnR1YWwtbWFjaGluZXMvdHJvdWJsZXNob290aW5nL3Ryb3VibGVzaG9vdGluZy10aHJvdHRsaW5nLWVycm9yc1xuICpcbiAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9ucyB0aGF0IGNvbmZpZ3VyZSByZXRyeSBsb2dpYy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRocm90dGxpbmdSZXRyeVBvbGljeShvcHRpb25zID0ge30pIHtcbiAgICB2YXIgX2E7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbmFtZTogdGhyb3R0bGluZ1JldHJ5UG9saWN5TmFtZSxcbiAgICAgICAgc2VuZFJlcXVlc3Q6IHJldHJ5UG9saWN5KFt0aHJvdHRsaW5nUmV0cnlTdHJhdGVneSgpXSwge1xuICAgICAgICAgICAgbWF4UmV0cmllczogKF9hID0gb3B0aW9ucy5tYXhSZXRyaWVzKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBERUZBVUxUX1JFVFJZX1BPTElDWV9DT1VOVCxcbiAgICAgICAgfSkuc2VuZFJlcXVlc3QsXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRocm90dGxpbmdSZXRyeVBvbGljeS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/throttlingRetryPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/tlsPolicy.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/policies/tlsPolicy.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   tlsPolicy: () => (/* binding */ tlsPolicy),\n/* harmony export */   tlsPolicyName: () => (/* binding */ tlsPolicyName)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * Name of the TLS Policy\n */\nconst tlsPolicyName = \"tlsPolicy\";\n/**\n * Gets a pipeline policy that adds the client certificate to the HttpClient agent for authentication.\n */\nfunction tlsPolicy(tlsSettings) {\n    return {\n        name: tlsPolicyName,\n        sendRequest: async (req, next) => {\n            // Users may define a request tlsSettings, honor those over the client level one\n            if (!req.tlsSettings) {\n                req.tlsSettings = tlsSettings;\n            }\n            return next(req);\n        },\n    };\n}\n//# sourceMappingURL=tlsPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9wb2xpY2llcy90bHNQb2xpY3kuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvdmljdG9yd2lsc29uL0Rlc2t0b3AvcHJvamVjdHMvRVpWaXovbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXJlc3QtcGlwZWxpbmUvZGlzdC9lc20vcG9saWNpZXMvdGxzUG9saWN5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuLyoqXG4gKiBOYW1lIG9mIHRoZSBUTFMgUG9saWN5XG4gKi9cbmV4cG9ydCBjb25zdCB0bHNQb2xpY3lOYW1lID0gXCJ0bHNQb2xpY3lcIjtcbi8qKlxuICogR2V0cyBhIHBpcGVsaW5lIHBvbGljeSB0aGF0IGFkZHMgdGhlIGNsaWVudCBjZXJ0aWZpY2F0ZSB0byB0aGUgSHR0cENsaWVudCBhZ2VudCBmb3IgYXV0aGVudGljYXRpb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0bHNQb2xpY3kodGxzU2V0dGluZ3MpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBuYW1lOiB0bHNQb2xpY3lOYW1lLFxuICAgICAgICBzZW5kUmVxdWVzdDogYXN5bmMgKHJlcSwgbmV4dCkgPT4ge1xuICAgICAgICAgICAgLy8gVXNlcnMgbWF5IGRlZmluZSBhIHJlcXVlc3QgdGxzU2V0dGluZ3MsIGhvbm9yIHRob3NlIG92ZXIgdGhlIGNsaWVudCBsZXZlbCBvbmVcbiAgICAgICAgICAgIGlmICghcmVxLnRsc1NldHRpbmdzKSB7XG4gICAgICAgICAgICAgICAgcmVxLnRsc1NldHRpbmdzID0gdGxzU2V0dGluZ3M7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmV4dChyZXEpO1xuICAgICAgICB9LFxuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10bHNQb2xpY3kuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/tlsPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/tracingPolicy.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/policies/tracingPolicy.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   tracingPolicy: () => (/* binding */ tracingPolicy),\n/* harmony export */   tracingPolicyName: () => (/* binding */ tracingPolicyName)\n/* harmony export */ });\n/* harmony import */ var _azure_core_tracing__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-tracing */ \"(rsc)/./node_modules/@azure/core-tracing/dist/esm/index.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/constants.js\");\n/* harmony import */ var _util_userAgent_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/userAgent.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/userAgent.js\");\n/* harmony import */ var _log_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../log.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/log.js\");\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @azure/core-util */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/index.js\");\n/* harmony import */ var _restError_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../restError.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/restError.js\");\n/* harmony import */ var _util_sanitizer_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../util/sanitizer.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/sanitizer.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n\n\n\n\n/**\n * The programmatic identifier of the tracingPolicy.\n */\nconst tracingPolicyName = \"tracingPolicy\";\n/**\n * A simple policy to create OpenTelemetry Spans for each request made by the pipeline\n * that has SpanOptions with a parent.\n * Requests made without a parent Span will not be recorded.\n * @param options - Options to configure the telemetry logged by the tracing policy.\n */\nfunction tracingPolicy(options = {}) {\n    const userAgentPromise = (0,_util_userAgent_js__WEBPACK_IMPORTED_MODULE_2__.getUserAgentValue)(options.userAgentPrefix);\n    const sanitizer = new _util_sanitizer_js__WEBPACK_IMPORTED_MODULE_6__.Sanitizer({\n        additionalAllowedQueryParameters: options.additionalAllowedQueryParameters,\n    });\n    const tracingClient = tryCreateTracingClient();\n    return {\n        name: tracingPolicyName,\n        async sendRequest(request, next) {\n            var _a;\n            if (!tracingClient) {\n                return next(request);\n            }\n            const userAgent = await userAgentPromise;\n            const spanAttributes = {\n                \"http.url\": sanitizer.sanitizeUrl(request.url),\n                \"http.method\": request.method,\n                \"http.user_agent\": userAgent,\n                requestId: request.requestId,\n            };\n            if (userAgent) {\n                spanAttributes[\"http.user_agent\"] = userAgent;\n            }\n            const { span, tracingContext } = (_a = tryCreateSpan(tracingClient, request, spanAttributes)) !== null && _a !== void 0 ? _a : {};\n            if (!span || !tracingContext) {\n                return next(request);\n            }\n            try {\n                const response = await tracingClient.withContext(tracingContext, next, request);\n                tryProcessResponse(span, response);\n                return response;\n            }\n            catch (err) {\n                tryProcessError(span, err);\n                throw err;\n            }\n        },\n    };\n}\nfunction tryCreateTracingClient() {\n    try {\n        return (0,_azure_core_tracing__WEBPACK_IMPORTED_MODULE_0__.createTracingClient)({\n            namespace: \"\",\n            packageName: \"@azure/core-rest-pipeline\",\n            packageVersion: _constants_js__WEBPACK_IMPORTED_MODULE_1__.SDK_VERSION,\n        });\n    }\n    catch (e) {\n        _log_js__WEBPACK_IMPORTED_MODULE_3__.logger.warning(`Error when creating the TracingClient: ${(0,_azure_core_util__WEBPACK_IMPORTED_MODULE_4__.getErrorMessage)(e)}`);\n        return undefined;\n    }\n}\nfunction tryCreateSpan(tracingClient, request, spanAttributes) {\n    try {\n        // As per spec, we do not need to differentiate between HTTP and HTTPS in span name.\n        const { span, updatedOptions } = tracingClient.startSpan(`HTTP ${request.method}`, { tracingOptions: request.tracingOptions }, {\n            spanKind: \"client\",\n            spanAttributes,\n        });\n        // If the span is not recording, don't do any more work.\n        if (!span.isRecording()) {\n            span.end();\n            return undefined;\n        }\n        // set headers\n        const headers = tracingClient.createRequestHeaders(updatedOptions.tracingOptions.tracingContext);\n        for (const [key, value] of Object.entries(headers)) {\n            request.headers.set(key, value);\n        }\n        return { span, tracingContext: updatedOptions.tracingOptions.tracingContext };\n    }\n    catch (e) {\n        _log_js__WEBPACK_IMPORTED_MODULE_3__.logger.warning(`Skipping creating a tracing span due to an error: ${(0,_azure_core_util__WEBPACK_IMPORTED_MODULE_4__.getErrorMessage)(e)}`);\n        return undefined;\n    }\n}\nfunction tryProcessError(span, error) {\n    try {\n        span.setStatus({\n            status: \"error\",\n            error: (0,_azure_core_util__WEBPACK_IMPORTED_MODULE_4__.isError)(error) ? error : undefined,\n        });\n        if ((0,_restError_js__WEBPACK_IMPORTED_MODULE_5__.isRestError)(error) && error.statusCode) {\n            span.setAttribute(\"http.status_code\", error.statusCode);\n        }\n        span.end();\n    }\n    catch (e) {\n        _log_js__WEBPACK_IMPORTED_MODULE_3__.logger.warning(`Skipping tracing span processing due to an error: ${(0,_azure_core_util__WEBPACK_IMPORTED_MODULE_4__.getErrorMessage)(e)}`);\n    }\n}\nfunction tryProcessResponse(span, response) {\n    try {\n        span.setAttribute(\"http.status_code\", response.status);\n        const serviceRequestId = response.headers.get(\"x-ms-request-id\");\n        if (serviceRequestId) {\n            span.setAttribute(\"serviceRequestId\", serviceRequestId);\n        }\n        // Per semantic conventions, only set the status to error if the status code is 4xx or 5xx.\n        // Otherwise, the status MUST remain unset.\n        // https://opentelemetry.io/docs/specs/semconv/http/http-spans/#status\n        if (response.status >= 400) {\n            span.setStatus({\n                status: \"error\",\n            });\n        }\n        span.end();\n    }\n    catch (e) {\n        _log_js__WEBPACK_IMPORTED_MODULE_3__.logger.warning(`Skipping tracing span processing due to an error: ${(0,_azure_core_util__WEBPACK_IMPORTED_MODULE_4__.getErrorMessage)(e)}`);\n    }\n}\n//# sourceMappingURL=tracingPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/tracingPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/userAgentPolicy.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/policies/userAgentPolicy.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   userAgentPolicy: () => (/* binding */ userAgentPolicy),\n/* harmony export */   userAgentPolicyName: () => (/* binding */ userAgentPolicyName)\n/* harmony export */ });\n/* harmony import */ var _util_userAgent_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/userAgent.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/userAgent.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nconst UserAgentHeaderName = (0,_util_userAgent_js__WEBPACK_IMPORTED_MODULE_0__.getUserAgentHeaderName)();\n/**\n * The programmatic identifier of the userAgentPolicy.\n */\nconst userAgentPolicyName = \"userAgentPolicy\";\n/**\n * A policy that sets the User-Agent header (or equivalent) to reflect\n * the library version.\n * @param options - Options to customize the user agent value.\n */\nfunction userAgentPolicy(options = {}) {\n    const userAgentValue = (0,_util_userAgent_js__WEBPACK_IMPORTED_MODULE_0__.getUserAgentValue)(options.userAgentPrefix);\n    return {\n        name: userAgentPolicyName,\n        async sendRequest(request, next) {\n            if (!request.headers.has(UserAgentHeaderName)) {\n                request.headers.set(UserAgentHeaderName, await userAgentValue);\n            }\n            return next(request);\n        },\n    };\n}\n//# sourceMappingURL=userAgentPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9wb2xpY2llcy91c2VyQWdlbnRQb2xpY3kuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNpRjtBQUNqRiw0QkFBNEIsMEVBQXNCO0FBQ2xEO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLHFDQUFxQztBQUM1QywyQkFBMkIscUVBQWlCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcndpbHNvbi9EZXNrdG9wL3Byb2plY3RzL0VaVml6L25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS1yZXN0LXBpcGVsaW5lL2Rpc3QvZXNtL3BvbGljaWVzL3VzZXJBZ2VudFBvbGljeS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbmltcG9ydCB7IGdldFVzZXJBZ2VudEhlYWRlck5hbWUsIGdldFVzZXJBZ2VudFZhbHVlIH0gZnJvbSBcIi4uL3V0aWwvdXNlckFnZW50LmpzXCI7XG5jb25zdCBVc2VyQWdlbnRIZWFkZXJOYW1lID0gZ2V0VXNlckFnZW50SGVhZGVyTmFtZSgpO1xuLyoqXG4gKiBUaGUgcHJvZ3JhbW1hdGljIGlkZW50aWZpZXIgb2YgdGhlIHVzZXJBZ2VudFBvbGljeS5cbiAqL1xuZXhwb3J0IGNvbnN0IHVzZXJBZ2VudFBvbGljeU5hbWUgPSBcInVzZXJBZ2VudFBvbGljeVwiO1xuLyoqXG4gKiBBIHBvbGljeSB0aGF0IHNldHMgdGhlIFVzZXItQWdlbnQgaGVhZGVyIChvciBlcXVpdmFsZW50KSB0byByZWZsZWN0XG4gKiB0aGUgbGlicmFyeSB2ZXJzaW9uLlxuICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25zIHRvIGN1c3RvbWl6ZSB0aGUgdXNlciBhZ2VudCB2YWx1ZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZXJBZ2VudFBvbGljeShvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCB1c2VyQWdlbnRWYWx1ZSA9IGdldFVzZXJBZ2VudFZhbHVlKG9wdGlvbnMudXNlckFnZW50UHJlZml4KTtcbiAgICByZXR1cm4ge1xuICAgICAgICBuYW1lOiB1c2VyQWdlbnRQb2xpY3lOYW1lLFxuICAgICAgICBhc3luYyBzZW5kUmVxdWVzdChyZXF1ZXN0LCBuZXh0KSB7XG4gICAgICAgICAgICBpZiAoIXJlcXVlc3QuaGVhZGVycy5oYXMoVXNlckFnZW50SGVhZGVyTmFtZSkpIHtcbiAgICAgICAgICAgICAgICByZXF1ZXN0LmhlYWRlcnMuc2V0KFVzZXJBZ2VudEhlYWRlck5hbWUsIGF3YWl0IHVzZXJBZ2VudFZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZXh0KHJlcXVlc3QpO1xuICAgICAgICB9LFxuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2VyQWdlbnRQb2xpY3kuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/policies/userAgentPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/restError.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/restError.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RestError: () => (/* binding */ RestError),\n/* harmony export */   isRestError: () => (/* binding */ isRestError)\n/* harmony export */ });\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-util */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/index.js\");\n/* harmony import */ var _util_inspect_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/inspect.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/inspect.js\");\n/* harmony import */ var _util_sanitizer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util/sanitizer.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/sanitizer.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\nconst errorSanitizer = new _util_sanitizer_js__WEBPACK_IMPORTED_MODULE_2__.Sanitizer();\n/**\n * A custom error type for failed pipeline requests.\n */\nclass RestError extends Error {\n    constructor(message, options = {}) {\n        super(message);\n        this.name = \"RestError\";\n        this.code = options.code;\n        this.statusCode = options.statusCode;\n        // The request and response may contain sensitive information in the headers or body.\n        // To help prevent this sensitive information being accidentally logged, the request and response\n        // properties are marked as non-enumerable here. This prevents them showing up in the output of\n        // JSON.stringify and console.log.\n        Object.defineProperty(this, \"request\", { value: options.request, enumerable: false });\n        Object.defineProperty(this, \"response\", { value: options.response, enumerable: false });\n        Object.setPrototypeOf(this, RestError.prototype);\n    }\n    /**\n     * Logging method for util.inspect in Node\n     */\n    [_util_inspect_js__WEBPACK_IMPORTED_MODULE_1__.custom]() {\n        // Extract non-enumerable properties and add them back. This is OK since in this output the request and\n        // response get sanitized.\n        return `RestError: ${this.message} \\n ${errorSanitizer.sanitize(Object.assign(Object.assign({}, this), { request: this.request, response: this.response }))}`;\n    }\n}\n/**\n * Something went wrong when making the request.\n * This means the actual request failed for some reason,\n * such as a DNS issue or the connection being lost.\n */\nRestError.REQUEST_SEND_ERROR = \"REQUEST_SEND_ERROR\";\n/**\n * This means that parsing the response from the server failed.\n * It may have been malformed.\n */\nRestError.PARSE_ERROR = \"PARSE_ERROR\";\n/**\n * Typeguard for RestError\n * @param e - Something caught by a catch clause.\n */\nfunction isRestError(e) {\n    if (e instanceof RestError) {\n        return true;\n    }\n    return (0,_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.isError)(e) && e.name === \"RestError\";\n}\n//# sourceMappingURL=restError.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9yZXN0RXJyb3IuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBO0FBQzJDO0FBQ0E7QUFDSztBQUNoRCwyQkFBMkIseURBQVM7QUFDcEM7QUFDQTtBQUNBO0FBQ087QUFDUCxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCwyQ0FBMkM7QUFDNUYsa0RBQWtELDRDQUE0QztBQUM5RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSyxvREFBTTtBQUNYO0FBQ0E7QUFDQSw2QkFBNkIsY0FBYyxLQUFLLHNEQUFzRCxXQUFXLGdEQUFnRCxHQUFHO0FBQ3BLO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBLFdBQVcseURBQU87QUFDbEI7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcndpbHNvbi9EZXNrdG9wL3Byb2plY3RzL0VaVml6L25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS1yZXN0LXBpcGVsaW5lL2Rpc3QvZXNtL3Jlc3RFcnJvci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbmltcG9ydCB7IGlzRXJyb3IgfSBmcm9tIFwiQGF6dXJlL2NvcmUtdXRpbFwiO1xuaW1wb3J0IHsgY3VzdG9tIH0gZnJvbSBcIi4vdXRpbC9pbnNwZWN0LmpzXCI7XG5pbXBvcnQgeyBTYW5pdGl6ZXIgfSBmcm9tIFwiLi91dGlsL3Nhbml0aXplci5qc1wiO1xuY29uc3QgZXJyb3JTYW5pdGl6ZXIgPSBuZXcgU2FuaXRpemVyKCk7XG4vKipcbiAqIEEgY3VzdG9tIGVycm9yIHR5cGUgZm9yIGZhaWxlZCBwaXBlbGluZSByZXF1ZXN0cy5cbiAqL1xuZXhwb3J0IGNsYXNzIFJlc3RFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiUmVzdEVycm9yXCI7XG4gICAgICAgIHRoaXMuY29kZSA9IG9wdGlvbnMuY29kZTtcbiAgICAgICAgdGhpcy5zdGF0dXNDb2RlID0gb3B0aW9ucy5zdGF0dXNDb2RlO1xuICAgICAgICAvLyBUaGUgcmVxdWVzdCBhbmQgcmVzcG9uc2UgbWF5IGNvbnRhaW4gc2Vuc2l0aXZlIGluZm9ybWF0aW9uIGluIHRoZSBoZWFkZXJzIG9yIGJvZHkuXG4gICAgICAgIC8vIFRvIGhlbHAgcHJldmVudCB0aGlzIHNlbnNpdGl2ZSBpbmZvcm1hdGlvbiBiZWluZyBhY2NpZGVudGFsbHkgbG9nZ2VkLCB0aGUgcmVxdWVzdCBhbmQgcmVzcG9uc2VcbiAgICAgICAgLy8gcHJvcGVydGllcyBhcmUgbWFya2VkIGFzIG5vbi1lbnVtZXJhYmxlIGhlcmUuIFRoaXMgcHJldmVudHMgdGhlbSBzaG93aW5nIHVwIGluIHRoZSBvdXRwdXQgb2ZcbiAgICAgICAgLy8gSlNPTi5zdHJpbmdpZnkgYW5kIGNvbnNvbGUubG9nLlxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJyZXF1ZXN0XCIsIHsgdmFsdWU6IG9wdGlvbnMucmVxdWVzdCwgZW51bWVyYWJsZTogZmFsc2UgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInJlc3BvbnNlXCIsIHsgdmFsdWU6IG9wdGlvbnMucmVzcG9uc2UsIGVudW1lcmFibGU6IGZhbHNlIH0pO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgUmVzdEVycm9yLnByb3RvdHlwZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIExvZ2dpbmcgbWV0aG9kIGZvciB1dGlsLmluc3BlY3QgaW4gTm9kZVxuICAgICAqL1xuICAgIFtjdXN0b21dKCkge1xuICAgICAgICAvLyBFeHRyYWN0IG5vbi1lbnVtZXJhYmxlIHByb3BlcnRpZXMgYW5kIGFkZCB0aGVtIGJhY2suIFRoaXMgaXMgT0sgc2luY2UgaW4gdGhpcyBvdXRwdXQgdGhlIHJlcXVlc3QgYW5kXG4gICAgICAgIC8vIHJlc3BvbnNlIGdldCBzYW5pdGl6ZWQuXG4gICAgICAgIHJldHVybiBgUmVzdEVycm9yOiAke3RoaXMubWVzc2FnZX0gXFxuICR7ZXJyb3JTYW5pdGl6ZXIuc2FuaXRpemUoT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCB0aGlzKSwgeyByZXF1ZXN0OiB0aGlzLnJlcXVlc3QsIHJlc3BvbnNlOiB0aGlzLnJlc3BvbnNlIH0pKX1gO1xuICAgIH1cbn1cbi8qKlxuICogU29tZXRoaW5nIHdlbnQgd3Jvbmcgd2hlbiBtYWtpbmcgdGhlIHJlcXVlc3QuXG4gKiBUaGlzIG1lYW5zIHRoZSBhY3R1YWwgcmVxdWVzdCBmYWlsZWQgZm9yIHNvbWUgcmVhc29uLFxuICogc3VjaCBhcyBhIEROUyBpc3N1ZSBvciB0aGUgY29ubmVjdGlvbiBiZWluZyBsb3N0LlxuICovXG5SZXN0RXJyb3IuUkVRVUVTVF9TRU5EX0VSUk9SID0gXCJSRVFVRVNUX1NFTkRfRVJST1JcIjtcbi8qKlxuICogVGhpcyBtZWFucyB0aGF0IHBhcnNpbmcgdGhlIHJlc3BvbnNlIGZyb20gdGhlIHNlcnZlciBmYWlsZWQuXG4gKiBJdCBtYXkgaGF2ZSBiZWVuIG1hbGZvcm1lZC5cbiAqL1xuUmVzdEVycm9yLlBBUlNFX0VSUk9SID0gXCJQQVJTRV9FUlJPUlwiO1xuLyoqXG4gKiBUeXBlZ3VhcmQgZm9yIFJlc3RFcnJvclxuICogQHBhcmFtIGUgLSBTb21ldGhpbmcgY2F1Z2h0IGJ5IGEgY2F0Y2ggY2xhdXNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNSZXN0RXJyb3IoZSkge1xuICAgIGlmIChlIGluc3RhbmNlb2YgUmVzdEVycm9yKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gaXNFcnJvcihlKSAmJiBlLm5hbWUgPT09IFwiUmVzdEVycm9yXCI7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXN0RXJyb3IuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/restError.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/retryStrategies/exponentialRetryStrategy.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/retryStrategies/exponentialRetryStrategy.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   exponentialRetryStrategy: () => (/* binding */ exponentialRetryStrategy),\n/* harmony export */   isExponentialRetryResponse: () => (/* binding */ isExponentialRetryResponse),\n/* harmony export */   isSystemError: () => (/* binding */ isSystemError)\n/* harmony export */ });\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-util */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/index.js\");\n/* harmony import */ var _throttlingRetryStrategy_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./throttlingRetryStrategy.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/retryStrategies/throttlingRetryStrategy.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n// intervals are in milliseconds\nconst DEFAULT_CLIENT_RETRY_INTERVAL = 1000;\nconst DEFAULT_CLIENT_MAX_RETRY_INTERVAL = 1000 * 64;\n/**\n * A retry strategy that retries with an exponentially increasing delay in these two cases:\n * - When there are errors in the underlying transport layer (e.g. DNS lookup failures).\n * - Or otherwise if the outgoing request fails (408, greater or equal than 500, except for 501 and 505).\n */\nfunction exponentialRetryStrategy(options = {}) {\n    var _a, _b;\n    const retryInterval = (_a = options.retryDelayInMs) !== null && _a !== void 0 ? _a : DEFAULT_CLIENT_RETRY_INTERVAL;\n    const maxRetryInterval = (_b = options.maxRetryDelayInMs) !== null && _b !== void 0 ? _b : DEFAULT_CLIENT_MAX_RETRY_INTERVAL;\n    return {\n        name: \"exponentialRetryStrategy\",\n        retry({ retryCount, response, responseError }) {\n            const matchedSystemError = isSystemError(responseError);\n            const ignoreSystemErrors = matchedSystemError && options.ignoreSystemErrors;\n            const isExponential = isExponentialRetryResponse(response);\n            const ignoreExponentialResponse = isExponential && options.ignoreHttpStatusCodes;\n            const unknownResponse = response && ((0,_throttlingRetryStrategy_js__WEBPACK_IMPORTED_MODULE_1__.isThrottlingRetryResponse)(response) || !isExponential);\n            if (unknownResponse || ignoreExponentialResponse || ignoreSystemErrors) {\n                return { skipStrategy: true };\n            }\n            if (responseError && !matchedSystemError && !isExponential) {\n                return { errorToThrow: responseError };\n            }\n            return (0,_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.calculateRetryDelay)(retryCount, {\n                retryDelayInMs: retryInterval,\n                maxRetryDelayInMs: maxRetryInterval,\n            });\n        },\n    };\n}\n/**\n * A response is a retry response if it has status codes:\n * - 408, or\n * - Greater or equal than 500, except for 501 and 505.\n */\nfunction isExponentialRetryResponse(response) {\n    return Boolean(response &&\n        response.status !== undefined &&\n        (response.status >= 500 || response.status === 408) &&\n        response.status !== 501 &&\n        response.status !== 505);\n}\n/**\n * Determines whether an error from a pipeline response was triggered in the network layer.\n */\nfunction isSystemError(err) {\n    if (!err) {\n        return false;\n    }\n    return (err.code === \"ETIMEDOUT\" ||\n        err.code === \"ESOCKETTIMEDOUT\" ||\n        err.code === \"ECONNREFUSED\" ||\n        err.code === \"ECONNRESET\" ||\n        err.code === \"ENOENT\" ||\n        err.code === \"ENOTFOUND\");\n}\n//# sourceMappingURL=exponentialRetryStrategy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9yZXRyeVN0cmF0ZWdpZXMvZXhwb25lbnRpYWxSZXRyeVN0cmF0ZWd5LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDQTtBQUN1RDtBQUNrQjtBQUN6RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sOENBQThDO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IscUNBQXFDO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlELHNGQUF5QjtBQUMxRTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0EsbUJBQW1CLHFFQUFtQjtBQUN0QztBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvdmljdG9yd2lsc29uL0Rlc2t0b3AvcHJvamVjdHMvRVpWaXovbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXJlc3QtcGlwZWxpbmUvZGlzdC9lc20vcmV0cnlTdHJhdGVnaWVzL2V4cG9uZW50aWFsUmV0cnlTdHJhdGVneS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbmltcG9ydCB7IGNhbGN1bGF0ZVJldHJ5RGVsYXkgfSBmcm9tIFwiQGF6dXJlL2NvcmUtdXRpbFwiO1xuaW1wb3J0IHsgaXNUaHJvdHRsaW5nUmV0cnlSZXNwb25zZSB9IGZyb20gXCIuL3Rocm90dGxpbmdSZXRyeVN0cmF0ZWd5LmpzXCI7XG4vLyBpbnRlcnZhbHMgYXJlIGluIG1pbGxpc2Vjb25kc1xuY29uc3QgREVGQVVMVF9DTElFTlRfUkVUUllfSU5URVJWQUwgPSAxMDAwO1xuY29uc3QgREVGQVVMVF9DTElFTlRfTUFYX1JFVFJZX0lOVEVSVkFMID0gMTAwMCAqIDY0O1xuLyoqXG4gKiBBIHJldHJ5IHN0cmF0ZWd5IHRoYXQgcmV0cmllcyB3aXRoIGFuIGV4cG9uZW50aWFsbHkgaW5jcmVhc2luZyBkZWxheSBpbiB0aGVzZSB0d28gY2FzZXM6XG4gKiAtIFdoZW4gdGhlcmUgYXJlIGVycm9ycyBpbiB0aGUgdW5kZXJseWluZyB0cmFuc3BvcnQgbGF5ZXIgKGUuZy4gRE5TIGxvb2t1cCBmYWlsdXJlcykuXG4gKiAtIE9yIG90aGVyd2lzZSBpZiB0aGUgb3V0Z29pbmcgcmVxdWVzdCBmYWlscyAoNDA4LCBncmVhdGVyIG9yIGVxdWFsIHRoYW4gNTAwLCBleGNlcHQgZm9yIDUwMSBhbmQgNTA1KS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV4cG9uZW50aWFsUmV0cnlTdHJhdGVneShvcHRpb25zID0ge30pIHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIGNvbnN0IHJldHJ5SW50ZXJ2YWwgPSAoX2EgPSBvcHRpb25zLnJldHJ5RGVsYXlJbk1zKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBERUZBVUxUX0NMSUVOVF9SRVRSWV9JTlRFUlZBTDtcbiAgICBjb25zdCBtYXhSZXRyeUludGVydmFsID0gKF9iID0gb3B0aW9ucy5tYXhSZXRyeURlbGF5SW5NcykgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogREVGQVVMVF9DTElFTlRfTUFYX1JFVFJZX0lOVEVSVkFMO1xuICAgIHJldHVybiB7XG4gICAgICAgIG5hbWU6IFwiZXhwb25lbnRpYWxSZXRyeVN0cmF0ZWd5XCIsXG4gICAgICAgIHJldHJ5KHsgcmV0cnlDb3VudCwgcmVzcG9uc2UsIHJlc3BvbnNlRXJyb3IgfSkge1xuICAgICAgICAgICAgY29uc3QgbWF0Y2hlZFN5c3RlbUVycm9yID0gaXNTeXN0ZW1FcnJvcihyZXNwb25zZUVycm9yKTtcbiAgICAgICAgICAgIGNvbnN0IGlnbm9yZVN5c3RlbUVycm9ycyA9IG1hdGNoZWRTeXN0ZW1FcnJvciAmJiBvcHRpb25zLmlnbm9yZVN5c3RlbUVycm9ycztcbiAgICAgICAgICAgIGNvbnN0IGlzRXhwb25lbnRpYWwgPSBpc0V4cG9uZW50aWFsUmV0cnlSZXNwb25zZShyZXNwb25zZSk7XG4gICAgICAgICAgICBjb25zdCBpZ25vcmVFeHBvbmVudGlhbFJlc3BvbnNlID0gaXNFeHBvbmVudGlhbCAmJiBvcHRpb25zLmlnbm9yZUh0dHBTdGF0dXNDb2RlcztcbiAgICAgICAgICAgIGNvbnN0IHVua25vd25SZXNwb25zZSA9IHJlc3BvbnNlICYmIChpc1Rocm90dGxpbmdSZXRyeVJlc3BvbnNlKHJlc3BvbnNlKSB8fCAhaXNFeHBvbmVudGlhbCk7XG4gICAgICAgICAgICBpZiAodW5rbm93blJlc3BvbnNlIHx8IGlnbm9yZUV4cG9uZW50aWFsUmVzcG9uc2UgfHwgaWdub3JlU3lzdGVtRXJyb3JzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgc2tpcFN0cmF0ZWd5OiB0cnVlIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocmVzcG9uc2VFcnJvciAmJiAhbWF0Y2hlZFN5c3RlbUVycm9yICYmICFpc0V4cG9uZW50aWFsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgZXJyb3JUb1Rocm93OiByZXNwb25zZUVycm9yIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY2FsY3VsYXRlUmV0cnlEZWxheShyZXRyeUNvdW50LCB7XG4gICAgICAgICAgICAgICAgcmV0cnlEZWxheUluTXM6IHJldHJ5SW50ZXJ2YWwsXG4gICAgICAgICAgICAgICAgbWF4UmV0cnlEZWxheUluTXM6IG1heFJldHJ5SW50ZXJ2YWwsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICB9O1xufVxuLyoqXG4gKiBBIHJlc3BvbnNlIGlzIGEgcmV0cnkgcmVzcG9uc2UgaWYgaXQgaGFzIHN0YXR1cyBjb2RlczpcbiAqIC0gNDA4LCBvclxuICogLSBHcmVhdGVyIG9yIGVxdWFsIHRoYW4gNTAwLCBleGNlcHQgZm9yIDUwMSBhbmQgNTA1LlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNFeHBvbmVudGlhbFJldHJ5UmVzcG9uc2UocmVzcG9uc2UpIHtcbiAgICByZXR1cm4gQm9vbGVhbihyZXNwb25zZSAmJlxuICAgICAgICByZXNwb25zZS5zdGF0dXMgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAocmVzcG9uc2Uuc3RhdHVzID49IDUwMCB8fCByZXNwb25zZS5zdGF0dXMgPT09IDQwOCkgJiZcbiAgICAgICAgcmVzcG9uc2Uuc3RhdHVzICE9PSA1MDEgJiZcbiAgICAgICAgcmVzcG9uc2Uuc3RhdHVzICE9PSA1MDUpO1xufVxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgYW4gZXJyb3IgZnJvbSBhIHBpcGVsaW5lIHJlc3BvbnNlIHdhcyB0cmlnZ2VyZWQgaW4gdGhlIG5ldHdvcmsgbGF5ZXIuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1N5c3RlbUVycm9yKGVycikge1xuICAgIGlmICghZXJyKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIChlcnIuY29kZSA9PT0gXCJFVElNRURPVVRcIiB8fFxuICAgICAgICBlcnIuY29kZSA9PT0gXCJFU09DS0VUVElNRURPVVRcIiB8fFxuICAgICAgICBlcnIuY29kZSA9PT0gXCJFQ09OTlJFRlVTRURcIiB8fFxuICAgICAgICBlcnIuY29kZSA9PT0gXCJFQ09OTlJFU0VUXCIgfHxcbiAgICAgICAgZXJyLmNvZGUgPT09IFwiRU5PRU5UXCIgfHxcbiAgICAgICAgZXJyLmNvZGUgPT09IFwiRU5PVEZPVU5EXCIpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXhwb25lbnRpYWxSZXRyeVN0cmF0ZWd5LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/retryStrategies/exponentialRetryStrategy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/retryStrategies/throttlingRetryStrategy.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/retryStrategies/throttlingRetryStrategy.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isThrottlingRetryResponse: () => (/* binding */ isThrottlingRetryResponse),\n/* harmony export */   throttlingRetryStrategy: () => (/* binding */ throttlingRetryStrategy)\n/* harmony export */ });\n/* harmony import */ var _util_helpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/helpers.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/helpers.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * The header that comes back from Azure services representing\n * the amount of time (minimum) to wait to retry (in seconds or timestamp after which we can retry).\n */\nconst RetryAfterHeader = \"Retry-After\";\n/**\n * The headers that come back from Azure services representing\n * the amount of time (minimum) to wait to retry.\n *\n * \"retry-after-ms\", \"x-ms-retry-after-ms\" : milliseconds\n * \"Retry-After\" : seconds or timestamp\n */\nconst AllRetryAfterHeaders = [\"retry-after-ms\", \"x-ms-retry-after-ms\", RetryAfterHeader];\n/**\n * A response is a throttling retry response if it has a throttling status code (429 or 503),\n * as long as one of the [ \"Retry-After\" or \"retry-after-ms\" or \"x-ms-retry-after-ms\" ] headers has a valid value.\n *\n * Returns the `retryAfterInMs` value if the response is a throttling retry response.\n * If not throttling retry response, returns `undefined`.\n *\n * @internal\n */\nfunction getRetryAfterInMs(response) {\n    if (!(response && [429, 503].includes(response.status)))\n        return undefined;\n    try {\n        // Headers: \"retry-after-ms\", \"x-ms-retry-after-ms\", \"Retry-After\"\n        for (const header of AllRetryAfterHeaders) {\n            const retryAfterValue = (0,_util_helpers_js__WEBPACK_IMPORTED_MODULE_0__.parseHeaderValueAsNumber)(response, header);\n            if (retryAfterValue === 0 || retryAfterValue) {\n                // \"Retry-After\" header ==> seconds\n                // \"retry-after-ms\", \"x-ms-retry-after-ms\" headers ==> milli-seconds\n                const multiplyingFactor = header === RetryAfterHeader ? 1000 : 1;\n                return retryAfterValue * multiplyingFactor; // in milli-seconds\n            }\n        }\n        // RetryAfterHeader (\"Retry-After\") has a special case where it might be formatted as a date instead of a number of seconds\n        const retryAfterHeader = response.headers.get(RetryAfterHeader);\n        if (!retryAfterHeader)\n            return;\n        const date = Date.parse(retryAfterHeader);\n        const diff = date - Date.now();\n        // negative diff would mean a date in the past, so retry asap with 0 milliseconds\n        return Number.isFinite(diff) ? Math.max(0, diff) : undefined;\n    }\n    catch (_a) {\n        return undefined;\n    }\n}\n/**\n * A response is a retry response if it has a throttling status code (429 or 503),\n * as long as one of the [ \"Retry-After\" or \"retry-after-ms\" or \"x-ms-retry-after-ms\" ] headers has a valid value.\n */\nfunction isThrottlingRetryResponse(response) {\n    return Number.isFinite(getRetryAfterInMs(response));\n}\nfunction throttlingRetryStrategy() {\n    return {\n        name: \"throttlingRetryStrategy\",\n        retry({ response }) {\n            const retryAfterInMs = getRetryAfterInMs(response);\n            if (!Number.isFinite(retryAfterInMs)) {\n                return { skipStrategy: true };\n            }\n            return {\n                retryAfterInMs,\n            };\n        },\n    };\n}\n//# sourceMappingURL=throttlingRetryStrategy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS9yZXRyeVN0cmF0ZWdpZXMvdGhyb3R0bGluZ1JldHJ5U3RyYXRlZ3kuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUM4RDtBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQywwRUFBd0I7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0REFBNEQ7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQSxnQkFBZ0IsVUFBVTtBQUMxQjtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcndpbHNvbi9EZXNrdG9wL3Byb2plY3RzL0VaVml6L25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS1yZXN0LXBpcGVsaW5lL2Rpc3QvZXNtL3JldHJ5U3RyYXRlZ2llcy90aHJvdHRsaW5nUmV0cnlTdHJhdGVneS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbmltcG9ydCB7IHBhcnNlSGVhZGVyVmFsdWVBc051bWJlciB9IGZyb20gXCIuLi91dGlsL2hlbHBlcnMuanNcIjtcbi8qKlxuICogVGhlIGhlYWRlciB0aGF0IGNvbWVzIGJhY2sgZnJvbSBBenVyZSBzZXJ2aWNlcyByZXByZXNlbnRpbmdcbiAqIHRoZSBhbW91bnQgb2YgdGltZSAobWluaW11bSkgdG8gd2FpdCB0byByZXRyeSAoaW4gc2Vjb25kcyBvciB0aW1lc3RhbXAgYWZ0ZXIgd2hpY2ggd2UgY2FuIHJldHJ5KS5cbiAqL1xuY29uc3QgUmV0cnlBZnRlckhlYWRlciA9IFwiUmV0cnktQWZ0ZXJcIjtcbi8qKlxuICogVGhlIGhlYWRlcnMgdGhhdCBjb21lIGJhY2sgZnJvbSBBenVyZSBzZXJ2aWNlcyByZXByZXNlbnRpbmdcbiAqIHRoZSBhbW91bnQgb2YgdGltZSAobWluaW11bSkgdG8gd2FpdCB0byByZXRyeS5cbiAqXG4gKiBcInJldHJ5LWFmdGVyLW1zXCIsIFwieC1tcy1yZXRyeS1hZnRlci1tc1wiIDogbWlsbGlzZWNvbmRzXG4gKiBcIlJldHJ5LUFmdGVyXCIgOiBzZWNvbmRzIG9yIHRpbWVzdGFtcFxuICovXG5jb25zdCBBbGxSZXRyeUFmdGVySGVhZGVycyA9IFtcInJldHJ5LWFmdGVyLW1zXCIsIFwieC1tcy1yZXRyeS1hZnRlci1tc1wiLCBSZXRyeUFmdGVySGVhZGVyXTtcbi8qKlxuICogQSByZXNwb25zZSBpcyBhIHRocm90dGxpbmcgcmV0cnkgcmVzcG9uc2UgaWYgaXQgaGFzIGEgdGhyb3R0bGluZyBzdGF0dXMgY29kZSAoNDI5IG9yIDUwMyksXG4gKiBhcyBsb25nIGFzIG9uZSBvZiB0aGUgWyBcIlJldHJ5LUFmdGVyXCIgb3IgXCJyZXRyeS1hZnRlci1tc1wiIG9yIFwieC1tcy1yZXRyeS1hZnRlci1tc1wiIF0gaGVhZGVycyBoYXMgYSB2YWxpZCB2YWx1ZS5cbiAqXG4gKiBSZXR1cm5zIHRoZSBgcmV0cnlBZnRlckluTXNgIHZhbHVlIGlmIHRoZSByZXNwb25zZSBpcyBhIHRocm90dGxpbmcgcmV0cnkgcmVzcG9uc2UuXG4gKiBJZiBub3QgdGhyb3R0bGluZyByZXRyeSByZXNwb25zZSwgcmV0dXJucyBgdW5kZWZpbmVkYC5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gZ2V0UmV0cnlBZnRlckluTXMocmVzcG9uc2UpIHtcbiAgICBpZiAoIShyZXNwb25zZSAmJiBbNDI5LCA1MDNdLmluY2x1ZGVzKHJlc3BvbnNlLnN0YXR1cykpKVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIHRyeSB7XG4gICAgICAgIC8vIEhlYWRlcnM6IFwicmV0cnktYWZ0ZXItbXNcIiwgXCJ4LW1zLXJldHJ5LWFmdGVyLW1zXCIsIFwiUmV0cnktQWZ0ZXJcIlxuICAgICAgICBmb3IgKGNvbnN0IGhlYWRlciBvZiBBbGxSZXRyeUFmdGVySGVhZGVycykge1xuICAgICAgICAgICAgY29uc3QgcmV0cnlBZnRlclZhbHVlID0gcGFyc2VIZWFkZXJWYWx1ZUFzTnVtYmVyKHJlc3BvbnNlLCBoZWFkZXIpO1xuICAgICAgICAgICAgaWYgKHJldHJ5QWZ0ZXJWYWx1ZSA9PT0gMCB8fCByZXRyeUFmdGVyVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAvLyBcIlJldHJ5LUFmdGVyXCIgaGVhZGVyID09PiBzZWNvbmRzXG4gICAgICAgICAgICAgICAgLy8gXCJyZXRyeS1hZnRlci1tc1wiLCBcIngtbXMtcmV0cnktYWZ0ZXItbXNcIiBoZWFkZXJzID09PiBtaWxsaS1zZWNvbmRzXG4gICAgICAgICAgICAgICAgY29uc3QgbXVsdGlwbHlpbmdGYWN0b3IgPSBoZWFkZXIgPT09IFJldHJ5QWZ0ZXJIZWFkZXIgPyAxMDAwIDogMTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmV0cnlBZnRlclZhbHVlICogbXVsdGlwbHlpbmdGYWN0b3I7IC8vIGluIG1pbGxpLXNlY29uZHNcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBSZXRyeUFmdGVySGVhZGVyIChcIlJldHJ5LUFmdGVyXCIpIGhhcyBhIHNwZWNpYWwgY2FzZSB3aGVyZSBpdCBtaWdodCBiZSBmb3JtYXR0ZWQgYXMgYSBkYXRlIGluc3RlYWQgb2YgYSBudW1iZXIgb2Ygc2Vjb25kc1xuICAgICAgICBjb25zdCByZXRyeUFmdGVySGVhZGVyID0gcmVzcG9uc2UuaGVhZGVycy5nZXQoUmV0cnlBZnRlckhlYWRlcik7XG4gICAgICAgIGlmICghcmV0cnlBZnRlckhlYWRlcilcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3QgZGF0ZSA9IERhdGUucGFyc2UocmV0cnlBZnRlckhlYWRlcik7XG4gICAgICAgIGNvbnN0IGRpZmYgPSBkYXRlIC0gRGF0ZS5ub3coKTtcbiAgICAgICAgLy8gbmVnYXRpdmUgZGlmZiB3b3VsZCBtZWFuIGEgZGF0ZSBpbiB0aGUgcGFzdCwgc28gcmV0cnkgYXNhcCB3aXRoIDAgbWlsbGlzZWNvbmRzXG4gICAgICAgIHJldHVybiBOdW1iZXIuaXNGaW5pdGUoZGlmZikgPyBNYXRoLm1heCgwLCBkaWZmKSA6IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgY2F0Y2ggKF9hKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxufVxuLyoqXG4gKiBBIHJlc3BvbnNlIGlzIGEgcmV0cnkgcmVzcG9uc2UgaWYgaXQgaGFzIGEgdGhyb3R0bGluZyBzdGF0dXMgY29kZSAoNDI5IG9yIDUwMyksXG4gKiBhcyBsb25nIGFzIG9uZSBvZiB0aGUgWyBcIlJldHJ5LUFmdGVyXCIgb3IgXCJyZXRyeS1hZnRlci1tc1wiIG9yIFwieC1tcy1yZXRyeS1hZnRlci1tc1wiIF0gaGVhZGVycyBoYXMgYSB2YWxpZCB2YWx1ZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzVGhyb3R0bGluZ1JldHJ5UmVzcG9uc2UocmVzcG9uc2UpIHtcbiAgICByZXR1cm4gTnVtYmVyLmlzRmluaXRlKGdldFJldHJ5QWZ0ZXJJbk1zKHJlc3BvbnNlKSk7XG59XG5leHBvcnQgZnVuY3Rpb24gdGhyb3R0bGluZ1JldHJ5U3RyYXRlZ3koKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbmFtZTogXCJ0aHJvdHRsaW5nUmV0cnlTdHJhdGVneVwiLFxuICAgICAgICByZXRyeSh7IHJlc3BvbnNlIH0pIHtcbiAgICAgICAgICAgIGNvbnN0IHJldHJ5QWZ0ZXJJbk1zID0gZ2V0UmV0cnlBZnRlckluTXMocmVzcG9uc2UpO1xuICAgICAgICAgICAgaWYgKCFOdW1iZXIuaXNGaW5pdGUocmV0cnlBZnRlckluTXMpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgc2tpcFN0cmF0ZWd5OiB0cnVlIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHJldHJ5QWZ0ZXJJbk1zLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGhyb3R0bGluZ1JldHJ5U3RyYXRlZ3kuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/retryStrategies/throttlingRetryStrategy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/concat.js":
/*!************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/util/concat.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   concat: () => (/* binding */ concat)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var node_stream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:stream */ \"node:stream\");\n/* harmony import */ var _typeGuards_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./typeGuards.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/typeGuards.js\");\n/* harmony import */ var _file_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./file.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/file.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n\nfunction streamAsyncIterator() {\n    return (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__asyncGenerator)(this, arguments, function* streamAsyncIterator_1() {\n        const reader = this.getReader();\n        try {\n            while (true) {\n                const { done, value } = yield (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__await)(reader.read());\n                if (done) {\n                    return yield (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__await)(void 0);\n                }\n                yield yield (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__await)(value);\n            }\n        }\n        finally {\n            reader.releaseLock();\n        }\n    });\n}\nfunction makeAsyncIterable(webStream) {\n    if (!webStream[Symbol.asyncIterator]) {\n        webStream[Symbol.asyncIterator] = streamAsyncIterator.bind(webStream);\n    }\n    if (!webStream.values) {\n        webStream.values = streamAsyncIterator.bind(webStream);\n    }\n}\nfunction ensureNodeStream(stream) {\n    if (stream instanceof ReadableStream) {\n        makeAsyncIterable(stream);\n        return node_stream__WEBPACK_IMPORTED_MODULE_0__.Readable.fromWeb(stream);\n    }\n    else {\n        return stream;\n    }\n}\nfunction toStream(source) {\n    if (source instanceof Uint8Array) {\n        return node_stream__WEBPACK_IMPORTED_MODULE_0__.Readable.from(Buffer.from(source));\n    }\n    else if ((0,_typeGuards_js__WEBPACK_IMPORTED_MODULE_1__.isBlob)(source)) {\n        return toStream((0,_file_js__WEBPACK_IMPORTED_MODULE_2__.getRawContent)(source));\n    }\n    else {\n        return ensureNodeStream(source);\n    }\n}\n/**\n * Utility function that concatenates a set of binary inputs into one combined output.\n *\n * @param sources - array of sources for the concatenation\n * @returns - in Node, a (() =\\> NodeJS.ReadableStream) which, when read, produces a concatenation of all the inputs.\n *           In browser, returns a `Blob` representing all the concatenated inputs.\n *\n * @internal\n */\nasync function concat(sources) {\n    return function () {\n        const streams = sources.map((x) => (typeof x === \"function\" ? x() : x)).map(toStream);\n        return node_stream__WEBPACK_IMPORTED_MODULE_0__.Readable.from((function () {\n            return (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__asyncGenerator)(this, arguments, function* () {\n                var _a, e_1, _b, _c;\n                for (const stream of streams) {\n                    try {\n                        for (var _d = true, stream_1 = (e_1 = void 0, (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__asyncValues)(stream)), stream_1_1; stream_1_1 = yield (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__await)(stream_1.next()), _a = stream_1_1.done, !_a; _d = true) {\n                            _c = stream_1_1.value;\n                            _d = false;\n                            const chunk = _c;\n                            yield yield (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__await)(chunk);\n                        }\n                    }\n                    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                    finally {\n                        try {\n                            if (!_d && !_a && (_b = stream_1.return)) yield (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__await)(_b.call(stream_1));\n                        }\n                        finally { if (e_1) throw e_1.error; }\n                    }\n                }\n            });\n        })());\n    };\n}\n//# sourceMappingURL=concat.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS91dGlsL2NvbmNhdC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQ0E7QUFDaUU7QUFDMUI7QUFDRTtBQUNDO0FBQzFDO0FBQ0EsV0FBVyx1REFBZ0I7QUFDM0I7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGNBQWMsUUFBUSw4Q0FBTztBQUNyRDtBQUNBLGlDQUFpQyw4Q0FBTztBQUN4QztBQUNBLDRCQUE0Qiw4Q0FBTztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsaURBQVE7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGlEQUFRO0FBQ3ZCO0FBQ0EsYUFBYSxzREFBTTtBQUNuQix3QkFBd0IsdURBQWE7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBLGVBQWUsaURBQVE7QUFDdkIsbUJBQW1CLHVEQUFnQjtBQUNuQztBQUNBO0FBQ0E7QUFDQSxzRUFBc0Usb0RBQWEsdUJBQXVCLG1CQUFtQiw4Q0FBTyw4Q0FBOEM7QUFDbEw7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDLDhDQUFPO0FBQy9DO0FBQ0E7QUFDQSxvQ0FBb0MsUUFBUTtBQUM1QztBQUNBO0FBQ0EsNEVBQTRFLDhDQUFPO0FBQ25GO0FBQ0Esa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcndpbHNvbi9EZXNrdG9wL3Byb2plY3RzL0VaVml6L25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS1yZXN0LXBpcGVsaW5lL2Rpc3QvZXNtL3V0aWwvY29uY2F0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuaW1wb3J0IHsgX19hc3luY0dlbmVyYXRvciwgX19hc3luY1ZhbHVlcywgX19hd2FpdCB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgUmVhZGFibGUgfSBmcm9tIFwibm9kZTpzdHJlYW1cIjtcbmltcG9ydCB7IGlzQmxvYiB9IGZyb20gXCIuL3R5cGVHdWFyZHMuanNcIjtcbmltcG9ydCB7IGdldFJhd0NvbnRlbnQgfSBmcm9tIFwiLi9maWxlLmpzXCI7XG5mdW5jdGlvbiBzdHJlYW1Bc3luY0l0ZXJhdG9yKCkge1xuICAgIHJldHVybiBfX2FzeW5jR2VuZXJhdG9yKHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24qIHN0cmVhbUFzeW5jSXRlcmF0b3JfMSgpIHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gdGhpcy5nZXRSZWFkZXIoKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBkb25lLCB2YWx1ZSB9ID0geWllbGQgX19hd2FpdChyZWFkZXIucmVhZCgpKTtcbiAgICAgICAgICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4geWllbGQgX19hd2FpdCh2b2lkIDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB5aWVsZCB5aWVsZCBfX2F3YWl0KHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHJlYWRlci5yZWxlYXNlTG9jaygpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5mdW5jdGlvbiBtYWtlQXN5bmNJdGVyYWJsZSh3ZWJTdHJlYW0pIHtcbiAgICBpZiAoIXdlYlN0cmVhbVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0pIHtcbiAgICAgICAgd2ViU3RyZWFtW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IHN0cmVhbUFzeW5jSXRlcmF0b3IuYmluZCh3ZWJTdHJlYW0pO1xuICAgIH1cbiAgICBpZiAoIXdlYlN0cmVhbS52YWx1ZXMpIHtcbiAgICAgICAgd2ViU3RyZWFtLnZhbHVlcyA9IHN0cmVhbUFzeW5jSXRlcmF0b3IuYmluZCh3ZWJTdHJlYW0pO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGVuc3VyZU5vZGVTdHJlYW0oc3RyZWFtKSB7XG4gICAgaWYgKHN0cmVhbSBpbnN0YW5jZW9mIFJlYWRhYmxlU3RyZWFtKSB7XG4gICAgICAgIG1ha2VBc3luY0l0ZXJhYmxlKHN0cmVhbSk7XG4gICAgICAgIHJldHVybiBSZWFkYWJsZS5mcm9tV2ViKHN0cmVhbSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gc3RyZWFtO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHRvU3RyZWFtKHNvdXJjZSkge1xuICAgIGlmIChzb3VyY2UgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG4gICAgICAgIHJldHVybiBSZWFkYWJsZS5mcm9tKEJ1ZmZlci5mcm9tKHNvdXJjZSkpO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc0Jsb2Ioc291cmNlKSkge1xuICAgICAgICByZXR1cm4gdG9TdHJlYW0oZ2V0UmF3Q29udGVudChzb3VyY2UpKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBlbnN1cmVOb2RlU3RyZWFtKHNvdXJjZSk7XG4gICAgfVxufVxuLyoqXG4gKiBVdGlsaXR5IGZ1bmN0aW9uIHRoYXQgY29uY2F0ZW5hdGVzIGEgc2V0IG9mIGJpbmFyeSBpbnB1dHMgaW50byBvbmUgY29tYmluZWQgb3V0cHV0LlxuICpcbiAqIEBwYXJhbSBzb3VyY2VzIC0gYXJyYXkgb2Ygc291cmNlcyBmb3IgdGhlIGNvbmNhdGVuYXRpb25cbiAqIEByZXR1cm5zIC0gaW4gTm9kZSwgYSAoKCkgPVxcPiBOb2RlSlMuUmVhZGFibGVTdHJlYW0pIHdoaWNoLCB3aGVuIHJlYWQsIHByb2R1Y2VzIGEgY29uY2F0ZW5hdGlvbiBvZiBhbGwgdGhlIGlucHV0cy5cbiAqICAgICAgICAgICBJbiBicm93c2VyLCByZXR1cm5zIGEgYEJsb2JgIHJlcHJlc2VudGluZyBhbGwgdGhlIGNvbmNhdGVuYXRlZCBpbnB1dHMuXG4gKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjb25jYXQoc291cmNlcykge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnN0IHN0cmVhbXMgPSBzb3VyY2VzLm1hcCgoeCkgPT4gKHR5cGVvZiB4ID09PSBcImZ1bmN0aW9uXCIgPyB4KCkgOiB4KSkubWFwKHRvU3RyZWFtKTtcbiAgICAgICAgcmV0dXJuIFJlYWRhYmxlLmZyb20oKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBfX2FzeW5jR2VuZXJhdG9yKHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2EsIGVfMSwgX2IsIF9jO1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgc3RyZWFtIG9mIHN0cmVhbXMpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9kID0gdHJ1ZSwgc3RyZWFtXzEgPSAoZV8xID0gdm9pZCAwLCBfX2FzeW5jVmFsdWVzKHN0cmVhbSkpLCBzdHJlYW1fMV8xOyBzdHJlYW1fMV8xID0geWllbGQgX19hd2FpdChzdHJlYW1fMS5uZXh0KCkpLCBfYSA9IHN0cmVhbV8xXzEuZG9uZSwgIV9hOyBfZCA9IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYyA9IHN0cmVhbV8xXzEudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2QgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjaHVuayA9IF9jO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkIHlpZWxkIF9fYXdhaXQoY2h1bmspO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlXzFfMSkgeyBlXzEgPSB7IGVycm9yOiBlXzFfMSB9OyB9XG4gICAgICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIV9kICYmICFfYSAmJiAoX2IgPSBzdHJlYW1fMS5yZXR1cm4pKSB5aWVsZCBfX2F3YWl0KF9iLmNhbGwoc3RyZWFtXzEpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8xKSB0aHJvdyBlXzEuZXJyb3I7IH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KSgpKTtcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uY2F0LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/concat.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/file.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/util/file.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createFile: () => (/* binding */ createFile),\n/* harmony export */   createFileFromStream: () => (/* binding */ createFileFromStream),\n/* harmony export */   getRawContent: () => (/* binding */ getRawContent)\n/* harmony export */ });\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-util */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/index.js\");\n/* harmony import */ var _typeGuards_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./typeGuards.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/typeGuards.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\nconst unimplementedMethods = {\n    arrayBuffer: () => {\n        throw new Error(\"Not implemented\");\n    },\n    bytes: () => {\n        throw new Error(\"Not implemented\");\n    },\n    slice: () => {\n        throw new Error(\"Not implemented\");\n    },\n    text: () => {\n        throw new Error(\"Not implemented\");\n    },\n};\n/**\n * Private symbol used as key on objects created using createFile containing the\n * original source of the file object.\n *\n * This is used in Node to access the original Node stream without using Blob#stream, which\n * returns a web stream. This is done to avoid a couple of bugs to do with Blob#stream and\n * Readable#to/fromWeb in Node versions we support:\n * - https://github.com/nodejs/node/issues/42694 (fixed in Node 18.14)\n * - https://github.com/nodejs/node/issues/48916 (fixed in Node 20.6)\n *\n * Once these versions are no longer supported, we may be able to stop doing this.\n *\n * @internal\n */\nconst rawContent = Symbol(\"rawContent\");\nfunction hasRawContent(x) {\n    return typeof x[rawContent] === \"function\";\n}\n/**\n * Extract the raw content from a given blob-like object. If the input was created using createFile\n * or createFileFromStream, the exact content passed into createFile/createFileFromStream will be used.\n * For true instances of Blob and File, returns the blob's content as a Web ReadableStream<Uint8Array>.\n *\n * @internal\n */\nfunction getRawContent(blob) {\n    if (hasRawContent(blob)) {\n        return blob[rawContent]();\n    }\n    else {\n        return blob.stream();\n    }\n}\n/**\n * Create an object that implements the File interface. This object is intended to be\n * passed into RequestBodyType.formData, and is not guaranteed to work as expected in\n * other situations.\n *\n * Use this function to:\n * - Create a File object for use in RequestBodyType.formData in environments where the\n *   global File object is unavailable.\n * - Create a File-like object from a readable stream without reading the stream into memory.\n *\n * @param stream - the content of the file as a callback returning a stream. When a File object made using createFile is\n *                  passed in a request's form data map, the stream will not be read into memory\n *                  and instead will be streamed when the request is made. In the event of a retry, the\n *                  stream needs to be read again, so this callback SHOULD return a fresh stream if possible.\n * @param name - the name of the file.\n * @param options - optional metadata about the file, e.g. file name, file size, MIME type.\n */\nfunction createFileFromStream(stream, name, options = {}) {\n    var _a, _b, _c, _d;\n    return Object.assign(Object.assign({}, unimplementedMethods), { type: (_a = options.type) !== null && _a !== void 0 ? _a : \"\", lastModified: (_b = options.lastModified) !== null && _b !== void 0 ? _b : new Date().getTime(), webkitRelativePath: (_c = options.webkitRelativePath) !== null && _c !== void 0 ? _c : \"\", size: (_d = options.size) !== null && _d !== void 0 ? _d : -1, name, stream: () => {\n            const s = stream();\n            if ((0,_typeGuards_js__WEBPACK_IMPORTED_MODULE_1__.isNodeReadableStream)(s)) {\n                throw new Error(\"Not supported: a Node stream was provided as input to createFileFromStream.\");\n            }\n            return s;\n        }, [rawContent]: stream });\n}\n/**\n * Create an object that implements the File interface. This object is intended to be\n * passed into RequestBodyType.formData, and is not guaranteed to work as expected in\n * other situations.\n *\n * Use this function create a File object for use in RequestBodyType.formData in environments where the global File object is unavailable.\n *\n * @param content - the content of the file as a Uint8Array in memory.\n * @param name - the name of the file.\n * @param options - optional metadata about the file, e.g. file name, file size, MIME type.\n */\nfunction createFile(content, name, options = {}) {\n    var _a, _b, _c;\n    if (_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.isNodeLike) {\n        return Object.assign(Object.assign({}, unimplementedMethods), { type: (_a = options.type) !== null && _a !== void 0 ? _a : \"\", lastModified: (_b = options.lastModified) !== null && _b !== void 0 ? _b : new Date().getTime(), webkitRelativePath: (_c = options.webkitRelativePath) !== null && _c !== void 0 ? _c : \"\", size: content.byteLength, name, arrayBuffer: async () => content.buffer, stream: () => new Blob([content]).stream(), [rawContent]: () => content });\n    }\n    else {\n        return new File([content], name, options);\n    }\n}\n//# sourceMappingURL=file.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS91dGlsL2ZpbGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBO0FBQzhDO0FBQ1M7QUFDdkQ7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLHdEQUF3RDtBQUMvRDtBQUNBLHlDQUF5QywyQkFBMkI7QUFDcEU7QUFDQSxnQkFBZ0Isb0VBQW9CO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBLFNBQVMsd0JBQXdCO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLCtDQUErQztBQUN0RDtBQUNBLFFBQVEsd0RBQVU7QUFDbEIsNkNBQTZDLDJCQUEyQiw2WUFBNlk7QUFDcmQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvdmljdG9yd2lsc29uL0Rlc2t0b3AvcHJvamVjdHMvRVpWaXovbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXJlc3QtcGlwZWxpbmUvZGlzdC9lc20vdXRpbC9maWxlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuaW1wb3J0IHsgaXNOb2RlTGlrZSB9IGZyb20gXCJAYXp1cmUvY29yZS11dGlsXCI7XG5pbXBvcnQgeyBpc05vZGVSZWFkYWJsZVN0cmVhbSB9IGZyb20gXCIuL3R5cGVHdWFyZHMuanNcIjtcbmNvbnN0IHVuaW1wbGVtZW50ZWRNZXRob2RzID0ge1xuICAgIGFycmF5QnVmZmVyOiAoKSA9PiB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vdCBpbXBsZW1lbnRlZFwiKTtcbiAgICB9LFxuICAgIGJ5dGVzOiAoKSA9PiB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vdCBpbXBsZW1lbnRlZFwiKTtcbiAgICB9LFxuICAgIHNsaWNlOiAoKSA9PiB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vdCBpbXBsZW1lbnRlZFwiKTtcbiAgICB9LFxuICAgIHRleHQ6ICgpID0+IHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm90IGltcGxlbWVudGVkXCIpO1xuICAgIH0sXG59O1xuLyoqXG4gKiBQcml2YXRlIHN5bWJvbCB1c2VkIGFzIGtleSBvbiBvYmplY3RzIGNyZWF0ZWQgdXNpbmcgY3JlYXRlRmlsZSBjb250YWluaW5nIHRoZVxuICogb3JpZ2luYWwgc291cmNlIG9mIHRoZSBmaWxlIG9iamVjdC5cbiAqXG4gKiBUaGlzIGlzIHVzZWQgaW4gTm9kZSB0byBhY2Nlc3MgdGhlIG9yaWdpbmFsIE5vZGUgc3RyZWFtIHdpdGhvdXQgdXNpbmcgQmxvYiNzdHJlYW0sIHdoaWNoXG4gKiByZXR1cm5zIGEgd2ViIHN0cmVhbS4gVGhpcyBpcyBkb25lIHRvIGF2b2lkIGEgY291cGxlIG9mIGJ1Z3MgdG8gZG8gd2l0aCBCbG9iI3N0cmVhbSBhbmRcbiAqIFJlYWRhYmxlI3RvL2Zyb21XZWIgaW4gTm9kZSB2ZXJzaW9ucyB3ZSBzdXBwb3J0OlxuICogLSBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvaXNzdWVzLzQyNjk0IChmaXhlZCBpbiBOb2RlIDE4LjE0KVxuICogLSBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvaXNzdWVzLzQ4OTE2IChmaXhlZCBpbiBOb2RlIDIwLjYpXG4gKlxuICogT25jZSB0aGVzZSB2ZXJzaW9ucyBhcmUgbm8gbG9uZ2VyIHN1cHBvcnRlZCwgd2UgbWF5IGJlIGFibGUgdG8gc3RvcCBkb2luZyB0aGlzLlxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5jb25zdCByYXdDb250ZW50ID0gU3ltYm9sKFwicmF3Q29udGVudFwiKTtcbmZ1bmN0aW9uIGhhc1Jhd0NvbnRlbnQoeCkge1xuICAgIHJldHVybiB0eXBlb2YgeFtyYXdDb250ZW50XSA9PT0gXCJmdW5jdGlvblwiO1xufVxuLyoqXG4gKiBFeHRyYWN0IHRoZSByYXcgY29udGVudCBmcm9tIGEgZ2l2ZW4gYmxvYi1saWtlIG9iamVjdC4gSWYgdGhlIGlucHV0IHdhcyBjcmVhdGVkIHVzaW5nIGNyZWF0ZUZpbGVcbiAqIG9yIGNyZWF0ZUZpbGVGcm9tU3RyZWFtLCB0aGUgZXhhY3QgY29udGVudCBwYXNzZWQgaW50byBjcmVhdGVGaWxlL2NyZWF0ZUZpbGVGcm9tU3RyZWFtIHdpbGwgYmUgdXNlZC5cbiAqIEZvciB0cnVlIGluc3RhbmNlcyBvZiBCbG9iIGFuZCBGaWxlLCByZXR1cm5zIHRoZSBibG9iJ3MgY29udGVudCBhcyBhIFdlYiBSZWFkYWJsZVN0cmVhbTxVaW50OEFycmF5Pi5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFJhd0NvbnRlbnQoYmxvYikge1xuICAgIGlmIChoYXNSYXdDb250ZW50KGJsb2IpKSB7XG4gICAgICAgIHJldHVybiBibG9iW3Jhd0NvbnRlbnRdKCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gYmxvYi5zdHJlYW0oKTtcbiAgICB9XG59XG4vKipcbiAqIENyZWF0ZSBhbiBvYmplY3QgdGhhdCBpbXBsZW1lbnRzIHRoZSBGaWxlIGludGVyZmFjZS4gVGhpcyBvYmplY3QgaXMgaW50ZW5kZWQgdG8gYmVcbiAqIHBhc3NlZCBpbnRvIFJlcXVlc3RCb2R5VHlwZS5mb3JtRGF0YSwgYW5kIGlzIG5vdCBndWFyYW50ZWVkIHRvIHdvcmsgYXMgZXhwZWN0ZWQgaW5cbiAqIG90aGVyIHNpdHVhdGlvbnMuXG4gKlxuICogVXNlIHRoaXMgZnVuY3Rpb24gdG86XG4gKiAtIENyZWF0ZSBhIEZpbGUgb2JqZWN0IGZvciB1c2UgaW4gUmVxdWVzdEJvZHlUeXBlLmZvcm1EYXRhIGluIGVudmlyb25tZW50cyB3aGVyZSB0aGVcbiAqICAgZ2xvYmFsIEZpbGUgb2JqZWN0IGlzIHVuYXZhaWxhYmxlLlxuICogLSBDcmVhdGUgYSBGaWxlLWxpa2Ugb2JqZWN0IGZyb20gYSByZWFkYWJsZSBzdHJlYW0gd2l0aG91dCByZWFkaW5nIHRoZSBzdHJlYW0gaW50byBtZW1vcnkuXG4gKlxuICogQHBhcmFtIHN0cmVhbSAtIHRoZSBjb250ZW50IG9mIHRoZSBmaWxlIGFzIGEgY2FsbGJhY2sgcmV0dXJuaW5nIGEgc3RyZWFtLiBXaGVuIGEgRmlsZSBvYmplY3QgbWFkZSB1c2luZyBjcmVhdGVGaWxlIGlzXG4gKiAgICAgICAgICAgICAgICAgIHBhc3NlZCBpbiBhIHJlcXVlc3QncyBmb3JtIGRhdGEgbWFwLCB0aGUgc3RyZWFtIHdpbGwgbm90IGJlIHJlYWQgaW50byBtZW1vcnlcbiAqICAgICAgICAgICAgICAgICAgYW5kIGluc3RlYWQgd2lsbCBiZSBzdHJlYW1lZCB3aGVuIHRoZSByZXF1ZXN0IGlzIG1hZGUuIEluIHRoZSBldmVudCBvZiBhIHJldHJ5LCB0aGVcbiAqICAgICAgICAgICAgICAgICAgc3RyZWFtIG5lZWRzIHRvIGJlIHJlYWQgYWdhaW4sIHNvIHRoaXMgY2FsbGJhY2sgU0hPVUxEIHJldHVybiBhIGZyZXNoIHN0cmVhbSBpZiBwb3NzaWJsZS5cbiAqIEBwYXJhbSBuYW1lIC0gdGhlIG5hbWUgb2YgdGhlIGZpbGUuXG4gKiBAcGFyYW0gb3B0aW9ucyAtIG9wdGlvbmFsIG1ldGFkYXRhIGFib3V0IHRoZSBmaWxlLCBlLmcuIGZpbGUgbmFtZSwgZmlsZSBzaXplLCBNSU1FIHR5cGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVGaWxlRnJvbVN0cmVhbShzdHJlYW0sIG5hbWUsIG9wdGlvbnMgPSB7fSkge1xuICAgIHZhciBfYSwgX2IsIF9jLCBfZDtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCB1bmltcGxlbWVudGVkTWV0aG9kcyksIHsgdHlwZTogKF9hID0gb3B0aW9ucy50eXBlKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBcIlwiLCBsYXN0TW9kaWZpZWQ6IChfYiA9IG9wdGlvbnMubGFzdE1vZGlmaWVkKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBuZXcgRGF0ZSgpLmdldFRpbWUoKSwgd2Via2l0UmVsYXRpdmVQYXRoOiAoX2MgPSBvcHRpb25zLndlYmtpdFJlbGF0aXZlUGF0aCkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogXCJcIiwgc2l6ZTogKF9kID0gb3B0aW9ucy5zaXplKSAhPT0gbnVsbCAmJiBfZCAhPT0gdm9pZCAwID8gX2QgOiAtMSwgbmFtZSwgc3RyZWFtOiAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBzID0gc3RyZWFtKCk7XG4gICAgICAgICAgICBpZiAoaXNOb2RlUmVhZGFibGVTdHJlYW0ocykpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJOb3Qgc3VwcG9ydGVkOiBhIE5vZGUgc3RyZWFtIHdhcyBwcm92aWRlZCBhcyBpbnB1dCB0byBjcmVhdGVGaWxlRnJvbVN0cmVhbS5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcztcbiAgICAgICAgfSwgW3Jhd0NvbnRlbnRdOiBzdHJlYW0gfSk7XG59XG4vKipcbiAqIENyZWF0ZSBhbiBvYmplY3QgdGhhdCBpbXBsZW1lbnRzIHRoZSBGaWxlIGludGVyZmFjZS4gVGhpcyBvYmplY3QgaXMgaW50ZW5kZWQgdG8gYmVcbiAqIHBhc3NlZCBpbnRvIFJlcXVlc3RCb2R5VHlwZS5mb3JtRGF0YSwgYW5kIGlzIG5vdCBndWFyYW50ZWVkIHRvIHdvcmsgYXMgZXhwZWN0ZWQgaW5cbiAqIG90aGVyIHNpdHVhdGlvbnMuXG4gKlxuICogVXNlIHRoaXMgZnVuY3Rpb24gY3JlYXRlIGEgRmlsZSBvYmplY3QgZm9yIHVzZSBpbiBSZXF1ZXN0Qm9keVR5cGUuZm9ybURhdGEgaW4gZW52aXJvbm1lbnRzIHdoZXJlIHRoZSBnbG9iYWwgRmlsZSBvYmplY3QgaXMgdW5hdmFpbGFibGUuXG4gKlxuICogQHBhcmFtIGNvbnRlbnQgLSB0aGUgY29udGVudCBvZiB0aGUgZmlsZSBhcyBhIFVpbnQ4QXJyYXkgaW4gbWVtb3J5LlxuICogQHBhcmFtIG5hbWUgLSB0aGUgbmFtZSBvZiB0aGUgZmlsZS5cbiAqIEBwYXJhbSBvcHRpb25zIC0gb3B0aW9uYWwgbWV0YWRhdGEgYWJvdXQgdGhlIGZpbGUsIGUuZy4gZmlsZSBuYW1lLCBmaWxlIHNpemUsIE1JTUUgdHlwZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUZpbGUoY29udGVudCwgbmFtZSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgaWYgKGlzTm9kZUxpa2UpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgdW5pbXBsZW1lbnRlZE1ldGhvZHMpLCB7IHR5cGU6IChfYSA9IG9wdGlvbnMudHlwZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogXCJcIiwgbGFzdE1vZGlmaWVkOiAoX2IgPSBvcHRpb25zLmxhc3RNb2RpZmllZCkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogbmV3IERhdGUoKS5nZXRUaW1lKCksIHdlYmtpdFJlbGF0aXZlUGF0aDogKF9jID0gb3B0aW9ucy53ZWJraXRSZWxhdGl2ZVBhdGgpICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6IFwiXCIsIHNpemU6IGNvbnRlbnQuYnl0ZUxlbmd0aCwgbmFtZSwgYXJyYXlCdWZmZXI6IGFzeW5jICgpID0+IGNvbnRlbnQuYnVmZmVyLCBzdHJlYW06ICgpID0+IG5ldyBCbG9iKFtjb250ZW50XSkuc3RyZWFtKCksIFtyYXdDb250ZW50XTogKCkgPT4gY29udGVudCB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBuZXcgRmlsZShbY29udGVudF0sIG5hbWUsIG9wdGlvbnMpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZpbGUuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/file.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/helpers.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/util/helpers.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   delay: () => (/* binding */ delay),\n/* harmony export */   parseHeaderValueAsNumber: () => (/* binding */ parseHeaderValueAsNumber)\n/* harmony export */ });\n/* harmony import */ var _azure_abort_controller__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/abort-controller */ \"(rsc)/./node_modules/@azure/abort-controller/dist/esm/index.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nconst StandardAbortMessage = \"The operation was aborted.\";\n/**\n * A wrapper for setTimeout that resolves a promise after delayInMs milliseconds.\n * @param delayInMs - The number of milliseconds to be delayed.\n * @param value - The value to be resolved with after a timeout of t milliseconds.\n * @param options - The options for delay - currently abort options\n *                  - abortSignal - The abortSignal associated with containing operation.\n *                  - abortErrorMsg - The abort error message associated with containing operation.\n * @returns Resolved promise\n */\nfunction delay(delayInMs, value, options) {\n    return new Promise((resolve, reject) => {\n        let timer = undefined;\n        let onAborted = undefined;\n        const rejectOnAbort = () => {\n            return reject(new _azure_abort_controller__WEBPACK_IMPORTED_MODULE_0__.AbortError((options === null || options === void 0 ? void 0 : options.abortErrorMsg) ? options === null || options === void 0 ? void 0 : options.abortErrorMsg : StandardAbortMessage));\n        };\n        const removeListeners = () => {\n            if ((options === null || options === void 0 ? void 0 : options.abortSignal) && onAborted) {\n                options.abortSignal.removeEventListener(\"abort\", onAborted);\n            }\n        };\n        onAborted = () => {\n            if (timer) {\n                clearTimeout(timer);\n            }\n            removeListeners();\n            return rejectOnAbort();\n        };\n        if ((options === null || options === void 0 ? void 0 : options.abortSignal) && options.abortSignal.aborted) {\n            return rejectOnAbort();\n        }\n        timer = setTimeout(() => {\n            removeListeners();\n            resolve(value);\n        }, delayInMs);\n        if (options === null || options === void 0 ? void 0 : options.abortSignal) {\n            options.abortSignal.addEventListener(\"abort\", onAborted);\n        }\n    });\n}\n/**\n * @internal\n * @returns the parsed value or undefined if the parsed value is invalid.\n */\nfunction parseHeaderValueAsNumber(response, headerName) {\n    const value = response.headers.get(headerName);\n    if (!value)\n        return;\n    const valueAsNum = Number(value);\n    if (Number.isNaN(valueAsNum))\n        return;\n    return valueAsNum;\n}\n//# sourceMappingURL=helpers.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS91dGlsL2hlbHBlcnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNxRDtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsK0RBQVU7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcndpbHNvbi9EZXNrdG9wL3Byb2plY3RzL0VaVml6L25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS1yZXN0LXBpcGVsaW5lL2Rpc3QvZXNtL3V0aWwvaGVscGVycy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbmltcG9ydCB7IEFib3J0RXJyb3IgfSBmcm9tIFwiQGF6dXJlL2Fib3J0LWNvbnRyb2xsZXJcIjtcbmNvbnN0IFN0YW5kYXJkQWJvcnRNZXNzYWdlID0gXCJUaGUgb3BlcmF0aW9uIHdhcyBhYm9ydGVkLlwiO1xuLyoqXG4gKiBBIHdyYXBwZXIgZm9yIHNldFRpbWVvdXQgdGhhdCByZXNvbHZlcyBhIHByb21pc2UgYWZ0ZXIgZGVsYXlJbk1zIG1pbGxpc2Vjb25kcy5cbiAqIEBwYXJhbSBkZWxheUluTXMgLSBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBiZSBkZWxheWVkLlxuICogQHBhcmFtIHZhbHVlIC0gVGhlIHZhbHVlIHRvIGJlIHJlc29sdmVkIHdpdGggYWZ0ZXIgYSB0aW1lb3V0IG9mIHQgbWlsbGlzZWNvbmRzLlxuICogQHBhcmFtIG9wdGlvbnMgLSBUaGUgb3B0aW9ucyBmb3IgZGVsYXkgLSBjdXJyZW50bHkgYWJvcnQgb3B0aW9uc1xuICogICAgICAgICAgICAgICAgICAtIGFib3J0U2lnbmFsIC0gVGhlIGFib3J0U2lnbmFsIGFzc29jaWF0ZWQgd2l0aCBjb250YWluaW5nIG9wZXJhdGlvbi5cbiAqICAgICAgICAgICAgICAgICAgLSBhYm9ydEVycm9yTXNnIC0gVGhlIGFib3J0IGVycm9yIG1lc3NhZ2UgYXNzb2NpYXRlZCB3aXRoIGNvbnRhaW5pbmcgb3BlcmF0aW9uLlxuICogQHJldHVybnMgUmVzb2x2ZWQgcHJvbWlzZVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVsYXkoZGVsYXlJbk1zLCB2YWx1ZSwgb3B0aW9ucykge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGxldCB0aW1lciA9IHVuZGVmaW5lZDtcbiAgICAgICAgbGV0IG9uQWJvcnRlZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgY29uc3QgcmVqZWN0T25BYm9ydCA9ICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiByZWplY3QobmV3IEFib3J0RXJyb3IoKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5hYm9ydEVycm9yTXNnKSA/IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5hYm9ydEVycm9yTXNnIDogU3RhbmRhcmRBYm9ydE1lc3NhZ2UpKTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgcmVtb3ZlTGlzdGVuZXJzID0gKCkgPT4ge1xuICAgICAgICAgICAgaWYgKChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuYWJvcnRTaWduYWwpICYmIG9uQWJvcnRlZCkge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMuYWJvcnRTaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIG9uQWJvcnRlZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIG9uQWJvcnRlZCA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmICh0aW1lcikge1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZW1vdmVMaXN0ZW5lcnMoKTtcbiAgICAgICAgICAgIHJldHVybiByZWplY3RPbkFib3J0KCk7XG4gICAgICAgIH07XG4gICAgICAgIGlmICgob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmFib3J0U2lnbmFsKSAmJiBvcHRpb25zLmFib3J0U2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgICAgICAgIHJldHVybiByZWplY3RPbkFib3J0KCk7XG4gICAgICAgIH1cbiAgICAgICAgdGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHJlbW92ZUxpc3RlbmVycygpO1xuICAgICAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7XG4gICAgICAgIH0sIGRlbGF5SW5Ncyk7XG4gICAgICAgIGlmIChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuYWJvcnRTaWduYWwpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuYWJvcnRTaWduYWwuYWRkRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIG9uQWJvcnRlZCk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbi8qKlxuICogQGludGVybmFsXG4gKiBAcmV0dXJucyB0aGUgcGFyc2VkIHZhbHVlIG9yIHVuZGVmaW5lZCBpZiB0aGUgcGFyc2VkIHZhbHVlIGlzIGludmFsaWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUhlYWRlclZhbHVlQXNOdW1iZXIocmVzcG9uc2UsIGhlYWRlck5hbWUpIHtcbiAgICBjb25zdCB2YWx1ZSA9IHJlc3BvbnNlLmhlYWRlcnMuZ2V0KGhlYWRlck5hbWUpO1xuICAgIGlmICghdmFsdWUpXG4gICAgICAgIHJldHVybjtcbiAgICBjb25zdCB2YWx1ZUFzTnVtID0gTnVtYmVyKHZhbHVlKTtcbiAgICBpZiAoTnVtYmVyLmlzTmFOKHZhbHVlQXNOdW0pKVxuICAgICAgICByZXR1cm47XG4gICAgcmV0dXJuIHZhbHVlQXNOdW07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1oZWxwZXJzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/helpers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/inspect.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/util/inspect.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   custom: () => (/* binding */ custom)\n/* harmony export */ });\n/* harmony import */ var node_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:util */ \"node:util\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nconst custom = node_util__WEBPACK_IMPORTED_MODULE_0__.inspect.custom;\n//# sourceMappingURL=inspect.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS91dGlsL2luc3BlY3QuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ29DO0FBQzdCLGVBQWUsOENBQU87QUFDN0IiLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWN0b3J3aWxzb24vRGVza3RvcC9wcm9qZWN0cy9FWlZpei9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS91dGlsL2luc3BlY3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5pbXBvcnQgeyBpbnNwZWN0IH0gZnJvbSBcIm5vZGU6dXRpbFwiO1xuZXhwb3J0IGNvbnN0IGN1c3RvbSA9IGluc3BlY3QuY3VzdG9tO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5zcGVjdC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/inspect.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/sanitizer.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/util/sanitizer.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Sanitizer: () => (/* binding */ Sanitizer)\n/* harmony export */ });\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-util */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/index.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nconst RedactedString = \"REDACTED\";\n// Make sure this list is up-to-date with the one under core/logger/Readme#Keyconcepts\nconst defaultAllowedHeaderNames = [\n    \"x-ms-client-request-id\",\n    \"x-ms-return-client-request-id\",\n    \"x-ms-useragent\",\n    \"x-ms-correlation-request-id\",\n    \"x-ms-request-id\",\n    \"client-request-id\",\n    \"ms-cv\",\n    \"return-client-request-id\",\n    \"traceparent\",\n    \"Access-Control-Allow-Credentials\",\n    \"Access-Control-Allow-Headers\",\n    \"Access-Control-Allow-Methods\",\n    \"Access-Control-Allow-Origin\",\n    \"Access-Control-Expose-Headers\",\n    \"Access-Control-Max-Age\",\n    \"Access-Control-Request-Headers\",\n    \"Access-Control-Request-Method\",\n    \"Origin\",\n    \"Accept\",\n    \"Accept-Encoding\",\n    \"Cache-Control\",\n    \"Connection\",\n    \"Content-Length\",\n    \"Content-Type\",\n    \"Date\",\n    \"ETag\",\n    \"Expires\",\n    \"If-Match\",\n    \"If-Modified-Since\",\n    \"If-None-Match\",\n    \"If-Unmodified-Since\",\n    \"Last-Modified\",\n    \"Pragma\",\n    \"Request-Id\",\n    \"Retry-After\",\n    \"Server\",\n    \"Transfer-Encoding\",\n    \"User-Agent\",\n    \"WWW-Authenticate\",\n];\nconst defaultAllowedQueryParameters = [\"api-version\"];\n/**\n * @internal\n */\nclass Sanitizer {\n    constructor({ additionalAllowedHeaderNames: allowedHeaderNames = [], additionalAllowedQueryParameters: allowedQueryParameters = [], } = {}) {\n        allowedHeaderNames = defaultAllowedHeaderNames.concat(allowedHeaderNames);\n        allowedQueryParameters = defaultAllowedQueryParameters.concat(allowedQueryParameters);\n        this.allowedHeaderNames = new Set(allowedHeaderNames.map((n) => n.toLowerCase()));\n        this.allowedQueryParameters = new Set(allowedQueryParameters.map((p) => p.toLowerCase()));\n    }\n    sanitize(obj) {\n        const seen = new Set();\n        return JSON.stringify(obj, (key, value) => {\n            // Ensure Errors include their interesting non-enumerable members\n            if (value instanceof Error) {\n                return Object.assign(Object.assign({}, value), { name: value.name, message: value.message });\n            }\n            if (key === \"headers\") {\n                return this.sanitizeHeaders(value);\n            }\n            else if (key === \"url\") {\n                return this.sanitizeUrl(value);\n            }\n            else if (key === \"query\") {\n                return this.sanitizeQuery(value);\n            }\n            else if (key === \"body\") {\n                // Don't log the request body\n                return undefined;\n            }\n            else if (key === \"response\") {\n                // Don't log response again\n                return undefined;\n            }\n            else if (key === \"operationSpec\") {\n                // When using sendOperationRequest, the request carries a massive\n                // field with the autorest spec. No need to log it.\n                return undefined;\n            }\n            else if (Array.isArray(value) || (0,_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.isObject)(value)) {\n                if (seen.has(value)) {\n                    return \"[Circular]\";\n                }\n                seen.add(value);\n            }\n            return value;\n        }, 2);\n    }\n    sanitizeUrl(value) {\n        if (typeof value !== \"string\" || value === null || value === \"\") {\n            return value;\n        }\n        const url = new URL(value);\n        if (!url.search) {\n            return value;\n        }\n        for (const [key] of url.searchParams) {\n            if (!this.allowedQueryParameters.has(key.toLowerCase())) {\n                url.searchParams.set(key, RedactedString);\n            }\n        }\n        return url.toString();\n    }\n    sanitizeHeaders(obj) {\n        const sanitized = {};\n        for (const key of Object.keys(obj)) {\n            if (this.allowedHeaderNames.has(key.toLowerCase())) {\n                sanitized[key] = obj[key];\n            }\n            else {\n                sanitized[key] = RedactedString;\n            }\n        }\n        return sanitized;\n    }\n    sanitizeQuery(value) {\n        if (typeof value !== \"object\" || value === null) {\n            return value;\n        }\n        const sanitized = {};\n        for (const k of Object.keys(value)) {\n            if (this.allowedQueryParameters.has(k.toLowerCase())) {\n                sanitized[k] = value[k];\n            }\n            else {\n                sanitized[k] = RedactedString;\n            }\n        }\n        return sanitized;\n    }\n}\n//# sourceMappingURL=sanitizer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS91dGlsL3Nhbml0aXplci5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDNEM7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1Asa0JBQWtCLHdIQUF3SCxJQUFJO0FBQzlJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscURBQXFELFlBQVksMENBQTBDO0FBQzNHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkMsMERBQVE7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcndpbHNvbi9EZXNrdG9wL3Byb2plY3RzL0VaVml6L25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS1yZXN0LXBpcGVsaW5lL2Rpc3QvZXNtL3V0aWwvc2FuaXRpemVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuaW1wb3J0IHsgaXNPYmplY3QgfSBmcm9tIFwiQGF6dXJlL2NvcmUtdXRpbFwiO1xuY29uc3QgUmVkYWN0ZWRTdHJpbmcgPSBcIlJFREFDVEVEXCI7XG4vLyBNYWtlIHN1cmUgdGhpcyBsaXN0IGlzIHVwLXRvLWRhdGUgd2l0aCB0aGUgb25lIHVuZGVyIGNvcmUvbG9nZ2VyL1JlYWRtZSNLZXljb25jZXB0c1xuY29uc3QgZGVmYXVsdEFsbG93ZWRIZWFkZXJOYW1lcyA9IFtcbiAgICBcIngtbXMtY2xpZW50LXJlcXVlc3QtaWRcIixcbiAgICBcIngtbXMtcmV0dXJuLWNsaWVudC1yZXF1ZXN0LWlkXCIsXG4gICAgXCJ4LW1zLXVzZXJhZ2VudFwiLFxuICAgIFwieC1tcy1jb3JyZWxhdGlvbi1yZXF1ZXN0LWlkXCIsXG4gICAgXCJ4LW1zLXJlcXVlc3QtaWRcIixcbiAgICBcImNsaWVudC1yZXF1ZXN0LWlkXCIsXG4gICAgXCJtcy1jdlwiLFxuICAgIFwicmV0dXJuLWNsaWVudC1yZXF1ZXN0LWlkXCIsXG4gICAgXCJ0cmFjZXBhcmVudFwiLFxuICAgIFwiQWNjZXNzLUNvbnRyb2wtQWxsb3ctQ3JlZGVudGlhbHNcIixcbiAgICBcIkFjY2Vzcy1Db250cm9sLUFsbG93LUhlYWRlcnNcIixcbiAgICBcIkFjY2Vzcy1Db250cm9sLUFsbG93LU1ldGhvZHNcIixcbiAgICBcIkFjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpblwiLFxuICAgIFwiQWNjZXNzLUNvbnRyb2wtRXhwb3NlLUhlYWRlcnNcIixcbiAgICBcIkFjY2Vzcy1Db250cm9sLU1heC1BZ2VcIixcbiAgICBcIkFjY2Vzcy1Db250cm9sLVJlcXVlc3QtSGVhZGVyc1wiLFxuICAgIFwiQWNjZXNzLUNvbnRyb2wtUmVxdWVzdC1NZXRob2RcIixcbiAgICBcIk9yaWdpblwiLFxuICAgIFwiQWNjZXB0XCIsXG4gICAgXCJBY2NlcHQtRW5jb2RpbmdcIixcbiAgICBcIkNhY2hlLUNvbnRyb2xcIixcbiAgICBcIkNvbm5lY3Rpb25cIixcbiAgICBcIkNvbnRlbnQtTGVuZ3RoXCIsXG4gICAgXCJDb250ZW50LVR5cGVcIixcbiAgICBcIkRhdGVcIixcbiAgICBcIkVUYWdcIixcbiAgICBcIkV4cGlyZXNcIixcbiAgICBcIklmLU1hdGNoXCIsXG4gICAgXCJJZi1Nb2RpZmllZC1TaW5jZVwiLFxuICAgIFwiSWYtTm9uZS1NYXRjaFwiLFxuICAgIFwiSWYtVW5tb2RpZmllZC1TaW5jZVwiLFxuICAgIFwiTGFzdC1Nb2RpZmllZFwiLFxuICAgIFwiUHJhZ21hXCIsXG4gICAgXCJSZXF1ZXN0LUlkXCIsXG4gICAgXCJSZXRyeS1BZnRlclwiLFxuICAgIFwiU2VydmVyXCIsXG4gICAgXCJUcmFuc2Zlci1FbmNvZGluZ1wiLFxuICAgIFwiVXNlci1BZ2VudFwiLFxuICAgIFwiV1dXLUF1dGhlbnRpY2F0ZVwiLFxuXTtcbmNvbnN0IGRlZmF1bHRBbGxvd2VkUXVlcnlQYXJhbWV0ZXJzID0gW1wiYXBpLXZlcnNpb25cIl07XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY2xhc3MgU2FuaXRpemVyIHtcbiAgICBjb25zdHJ1Y3Rvcih7IGFkZGl0aW9uYWxBbGxvd2VkSGVhZGVyTmFtZXM6IGFsbG93ZWRIZWFkZXJOYW1lcyA9IFtdLCBhZGRpdGlvbmFsQWxsb3dlZFF1ZXJ5UGFyYW1ldGVyczogYWxsb3dlZFF1ZXJ5UGFyYW1ldGVycyA9IFtdLCB9ID0ge30pIHtcbiAgICAgICAgYWxsb3dlZEhlYWRlck5hbWVzID0gZGVmYXVsdEFsbG93ZWRIZWFkZXJOYW1lcy5jb25jYXQoYWxsb3dlZEhlYWRlck5hbWVzKTtcbiAgICAgICAgYWxsb3dlZFF1ZXJ5UGFyYW1ldGVycyA9IGRlZmF1bHRBbGxvd2VkUXVlcnlQYXJhbWV0ZXJzLmNvbmNhdChhbGxvd2VkUXVlcnlQYXJhbWV0ZXJzKTtcbiAgICAgICAgdGhpcy5hbGxvd2VkSGVhZGVyTmFtZXMgPSBuZXcgU2V0KGFsbG93ZWRIZWFkZXJOYW1lcy5tYXAoKG4pID0+IG4udG9Mb3dlckNhc2UoKSkpO1xuICAgICAgICB0aGlzLmFsbG93ZWRRdWVyeVBhcmFtZXRlcnMgPSBuZXcgU2V0KGFsbG93ZWRRdWVyeVBhcmFtZXRlcnMubWFwKChwKSA9PiBwLnRvTG93ZXJDYXNlKCkpKTtcbiAgICB9XG4gICAgc2FuaXRpemUob2JqKSB7XG4gICAgICAgIGNvbnN0IHNlZW4gPSBuZXcgU2V0KCk7XG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShvYmosIChrZXksIHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAvLyBFbnN1cmUgRXJyb3JzIGluY2x1ZGUgdGhlaXIgaW50ZXJlc3Rpbmcgbm9uLWVudW1lcmFibGUgbWVtYmVyc1xuICAgICAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCB2YWx1ZSksIHsgbmFtZTogdmFsdWUubmFtZSwgbWVzc2FnZTogdmFsdWUubWVzc2FnZSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChrZXkgPT09IFwiaGVhZGVyc1wiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2FuaXRpemVIZWFkZXJzKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGtleSA9PT0gXCJ1cmxcIikge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNhbml0aXplVXJsKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGtleSA9PT0gXCJxdWVyeVwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2FuaXRpemVRdWVyeSh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChrZXkgPT09IFwiYm9keVwiKSB7XG4gICAgICAgICAgICAgICAgLy8gRG9uJ3QgbG9nIHRoZSByZXF1ZXN0IGJvZHlcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoa2V5ID09PSBcInJlc3BvbnNlXCIpIHtcbiAgICAgICAgICAgICAgICAvLyBEb24ndCBsb2cgcmVzcG9uc2UgYWdhaW5cbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoa2V5ID09PSBcIm9wZXJhdGlvblNwZWNcIikge1xuICAgICAgICAgICAgICAgIC8vIFdoZW4gdXNpbmcgc2VuZE9wZXJhdGlvblJlcXVlc3QsIHRoZSByZXF1ZXN0IGNhcnJpZXMgYSBtYXNzaXZlXG4gICAgICAgICAgICAgICAgLy8gZmllbGQgd2l0aCB0aGUgYXV0b3Jlc3Qgc3BlYy4gTm8gbmVlZCB0byBsb2cgaXQuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpIHx8IGlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIGlmIChzZWVuLmhhcyh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiW0NpcmN1bGFyXVwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzZWVuLmFkZCh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH0sIDIpO1xuICAgIH1cbiAgICBzYW5pdGl6ZVVybCh2YWx1ZSkge1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSBcInN0cmluZ1wiIHx8IHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSBcIlwiKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdXJsID0gbmV3IFVSTCh2YWx1ZSk7XG4gICAgICAgIGlmICghdXJsLnNlYXJjaCkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgW2tleV0gb2YgdXJsLnNlYXJjaFBhcmFtcykge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmFsbG93ZWRRdWVyeVBhcmFtZXRlcnMuaGFzKGtleS50b0xvd2VyQ2FzZSgpKSkge1xuICAgICAgICAgICAgICAgIHVybC5zZWFyY2hQYXJhbXMuc2V0KGtleSwgUmVkYWN0ZWRTdHJpbmcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1cmwudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgc2FuaXRpemVIZWFkZXJzKG9iaikge1xuICAgICAgICBjb25zdCBzYW5pdGl6ZWQgPSB7fTtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMob2JqKSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuYWxsb3dlZEhlYWRlck5hbWVzLmhhcyhrZXkudG9Mb3dlckNhc2UoKSkpIHtcbiAgICAgICAgICAgICAgICBzYW5pdGl6ZWRba2V5XSA9IG9ialtrZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc2FuaXRpemVkW2tleV0gPSBSZWRhY3RlZFN0cmluZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2FuaXRpemVkO1xuICAgIH1cbiAgICBzYW5pdGl6ZVF1ZXJ5KHZhbHVlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09IFwib2JqZWN0XCIgfHwgdmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzYW5pdGl6ZWQgPSB7fTtcbiAgICAgICAgZm9yIChjb25zdCBrIG9mIE9iamVjdC5rZXlzKHZhbHVlKSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuYWxsb3dlZFF1ZXJ5UGFyYW1ldGVycy5oYXMoay50b0xvd2VyQ2FzZSgpKSkge1xuICAgICAgICAgICAgICAgIHNhbml0aXplZFtrXSA9IHZhbHVlW2tdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc2FuaXRpemVkW2tdID0gUmVkYWN0ZWRTdHJpbmc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNhbml0aXplZDtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zYW5pdGl6ZXIuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/sanitizer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/tokenCycler.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/util/tokenCycler.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_CYCLER_OPTIONS: () => (/* binding */ DEFAULT_CYCLER_OPTIONS),\n/* harmony export */   createTokenCycler: () => (/* binding */ createTokenCycler)\n/* harmony export */ });\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/helpers.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n// Default options for the cycler if none are provided\nconst DEFAULT_CYCLER_OPTIONS = {\n    forcedRefreshWindowInMs: 1000, // Force waiting for a refresh 1s before the token expires\n    retryIntervalInMs: 3000, // Allow refresh attempts every 3s\n    refreshWindowInMs: 1000 * 60 * 2, // Start refreshing 2m before expiry\n};\n/**\n * Converts an an unreliable access token getter (which may resolve with null)\n * into an AccessTokenGetter by retrying the unreliable getter in a regular\n * interval.\n *\n * @param getAccessToken - A function that produces a promise of an access token that may fail by returning null.\n * @param retryIntervalInMs - The time (in milliseconds) to wait between retry attempts.\n * @param refreshTimeout - The timestamp after which the refresh attempt will fail, throwing an exception.\n * @returns - A promise that, if it resolves, will resolve with an access token.\n */\nasync function beginRefresh(getAccessToken, retryIntervalInMs, refreshTimeout) {\n    // This wrapper handles exceptions gracefully as long as we haven't exceeded\n    // the timeout.\n    async function tryGetAccessToken() {\n        if (Date.now() < refreshTimeout) {\n            try {\n                return await getAccessToken();\n            }\n            catch (_a) {\n                return null;\n            }\n        }\n        else {\n            const finalToken = await getAccessToken();\n            // Timeout is up, so throw if it's still null\n            if (finalToken === null) {\n                throw new Error(\"Failed to refresh access token.\");\n            }\n            return finalToken;\n        }\n    }\n    let token = await tryGetAccessToken();\n    while (token === null) {\n        await (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.delay)(retryIntervalInMs);\n        token = await tryGetAccessToken();\n    }\n    return token;\n}\n/**\n * Creates a token cycler from a credential, scopes, and optional settings.\n *\n * A token cycler represents a way to reliably retrieve a valid access token\n * from a TokenCredential. It will handle initializing the token, refreshing it\n * when it nears expiration, and synchronizes refresh attempts to avoid\n * concurrency hazards.\n *\n * @param credential - the underlying TokenCredential that provides the access\n * token\n * @param tokenCyclerOptions - optionally override default settings for the cycler\n *\n * @returns - a function that reliably produces a valid access token\n */\nfunction createTokenCycler(credential, tokenCyclerOptions) {\n    let refreshWorker = null;\n    let token = null;\n    let tenantId;\n    const options = Object.assign(Object.assign({}, DEFAULT_CYCLER_OPTIONS), tokenCyclerOptions);\n    /**\n     * This little holder defines several predicates that we use to construct\n     * the rules of refreshing the token.\n     */\n    const cycler = {\n        /**\n         * Produces true if a refresh job is currently in progress.\n         */\n        get isRefreshing() {\n            return refreshWorker !== null;\n        },\n        /**\n         * Produces true if the cycler SHOULD refresh (we are within the refresh\n         * window and not already refreshing)\n         */\n        get shouldRefresh() {\n            var _a;\n            if (cycler.isRefreshing) {\n                return false;\n            }\n            if ((token === null || token === void 0 ? void 0 : token.refreshAfterTimestamp) && token.refreshAfterTimestamp < Date.now()) {\n                return true;\n            }\n            return ((_a = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a !== void 0 ? _a : 0) - options.refreshWindowInMs < Date.now();\n        },\n        /**\n         * Produces true if the cycler MUST refresh (null or nearly-expired\n         * token).\n         */\n        get mustRefresh() {\n            return (token === null || token.expiresOnTimestamp - options.forcedRefreshWindowInMs < Date.now());\n        },\n    };\n    /**\n     * Starts a refresh job or returns the existing job if one is already\n     * running.\n     */\n    function refresh(scopes, getTokenOptions) {\n        var _a;\n        if (!cycler.isRefreshing) {\n            // We bind `scopes` here to avoid passing it around a lot\n            const tryGetAccessToken = () => credential.getToken(scopes, getTokenOptions);\n            // Take advantage of promise chaining to insert an assignment to `token`\n            // before the refresh can be considered done.\n            refreshWorker = beginRefresh(tryGetAccessToken, options.retryIntervalInMs, \n            // If we don't have a token, then we should timeout immediately\n            (_a = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a !== void 0 ? _a : Date.now())\n                .then((_token) => {\n                refreshWorker = null;\n                token = _token;\n                tenantId = getTokenOptions.tenantId;\n                return token;\n            })\n                .catch((reason) => {\n                // We also should reset the refresher if we enter a failed state.  All\n                // existing awaiters will throw, but subsequent requests will start a\n                // new retry chain.\n                refreshWorker = null;\n                token = null;\n                tenantId = undefined;\n                throw reason;\n            });\n        }\n        return refreshWorker;\n    }\n    return async (scopes, tokenOptions) => {\n        //\n        // Simple rules:\n        // - If we MUST refresh, then return the refresh task, blocking\n        //   the pipeline until a token is available.\n        // - If we SHOULD refresh, then run refresh but don't return it\n        //   (we can still use the cached token).\n        // - Return the token, since it's fine if we didn't return in\n        //   step 1.\n        //\n        const hasClaimChallenge = Boolean(tokenOptions.claims);\n        const tenantIdChanged = tenantId !== tokenOptions.tenantId;\n        if (hasClaimChallenge) {\n            // If we've received a claim, we know the existing token isn't valid\n            // We want to clear it so that that refresh worker won't use the old expiration time as a timeout\n            token = null;\n        }\n        // If the tenantId passed in token options is different to the one we have\n        // Or if we are in claim challenge and the token was rejected and a new access token need to be issued, we need to\n        // refresh the token with the new tenantId or token.\n        const mustRefresh = tenantIdChanged || hasClaimChallenge || cycler.mustRefresh;\n        if (mustRefresh) {\n            return refresh(scopes, tokenOptions);\n        }\n        if (cycler.shouldRefresh) {\n            refresh(scopes, tokenOptions);\n        }\n        return token;\n    };\n}\n//# sourceMappingURL=tokenCycler.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS91dGlsL3Rva2VuQ3ljbGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDcUM7QUFDckM7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxrREFBSztBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRDtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvdmljdG9yd2lsc29uL0Rlc2t0b3AvcHJvamVjdHMvRVpWaXovbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXJlc3QtcGlwZWxpbmUvZGlzdC9lc20vdXRpbC90b2tlbkN5Y2xlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbmltcG9ydCB7IGRlbGF5IH0gZnJvbSBcIi4vaGVscGVycy5qc1wiO1xuLy8gRGVmYXVsdCBvcHRpb25zIGZvciB0aGUgY3ljbGVyIGlmIG5vbmUgYXJlIHByb3ZpZGVkXG5leHBvcnQgY29uc3QgREVGQVVMVF9DWUNMRVJfT1BUSU9OUyA9IHtcbiAgICBmb3JjZWRSZWZyZXNoV2luZG93SW5NczogMTAwMCwgLy8gRm9yY2Ugd2FpdGluZyBmb3IgYSByZWZyZXNoIDFzIGJlZm9yZSB0aGUgdG9rZW4gZXhwaXJlc1xuICAgIHJldHJ5SW50ZXJ2YWxJbk1zOiAzMDAwLCAvLyBBbGxvdyByZWZyZXNoIGF0dGVtcHRzIGV2ZXJ5IDNzXG4gICAgcmVmcmVzaFdpbmRvd0luTXM6IDEwMDAgKiA2MCAqIDIsIC8vIFN0YXJ0IHJlZnJlc2hpbmcgMm0gYmVmb3JlIGV4cGlyeVxufTtcbi8qKlxuICogQ29udmVydHMgYW4gYW4gdW5yZWxpYWJsZSBhY2Nlc3MgdG9rZW4gZ2V0dGVyICh3aGljaCBtYXkgcmVzb2x2ZSB3aXRoIG51bGwpXG4gKiBpbnRvIGFuIEFjY2Vzc1Rva2VuR2V0dGVyIGJ5IHJldHJ5aW5nIHRoZSB1bnJlbGlhYmxlIGdldHRlciBpbiBhIHJlZ3VsYXJcbiAqIGludGVydmFsLlxuICpcbiAqIEBwYXJhbSBnZXRBY2Nlc3NUb2tlbiAtIEEgZnVuY3Rpb24gdGhhdCBwcm9kdWNlcyBhIHByb21pc2Ugb2YgYW4gYWNjZXNzIHRva2VuIHRoYXQgbWF5IGZhaWwgYnkgcmV0dXJuaW5nIG51bGwuXG4gKiBAcGFyYW0gcmV0cnlJbnRlcnZhbEluTXMgLSBUaGUgdGltZSAoaW4gbWlsbGlzZWNvbmRzKSB0byB3YWl0IGJldHdlZW4gcmV0cnkgYXR0ZW1wdHMuXG4gKiBAcGFyYW0gcmVmcmVzaFRpbWVvdXQgLSBUaGUgdGltZXN0YW1wIGFmdGVyIHdoaWNoIHRoZSByZWZyZXNoIGF0dGVtcHQgd2lsbCBmYWlsLCB0aHJvd2luZyBhbiBleGNlcHRpb24uXG4gKiBAcmV0dXJucyAtIEEgcHJvbWlzZSB0aGF0LCBpZiBpdCByZXNvbHZlcywgd2lsbCByZXNvbHZlIHdpdGggYW4gYWNjZXNzIHRva2VuLlxuICovXG5hc3luYyBmdW5jdGlvbiBiZWdpblJlZnJlc2goZ2V0QWNjZXNzVG9rZW4sIHJldHJ5SW50ZXJ2YWxJbk1zLCByZWZyZXNoVGltZW91dCkge1xuICAgIC8vIFRoaXMgd3JhcHBlciBoYW5kbGVzIGV4Y2VwdGlvbnMgZ3JhY2VmdWxseSBhcyBsb25nIGFzIHdlIGhhdmVuJ3QgZXhjZWVkZWRcbiAgICAvLyB0aGUgdGltZW91dC5cbiAgICBhc3luYyBmdW5jdGlvbiB0cnlHZXRBY2Nlc3NUb2tlbigpIHtcbiAgICAgICAgaWYgKERhdGUubm93KCkgPCByZWZyZXNoVGltZW91dCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXdhaXQgZ2V0QWNjZXNzVG9rZW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChfYSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgZmluYWxUb2tlbiA9IGF3YWl0IGdldEFjY2Vzc1Rva2VuKCk7XG4gICAgICAgICAgICAvLyBUaW1lb3V0IGlzIHVwLCBzbyB0aHJvdyBpZiBpdCdzIHN0aWxsIG51bGxcbiAgICAgICAgICAgIGlmIChmaW5hbFRva2VuID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIHJlZnJlc2ggYWNjZXNzIHRva2VuLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmaW5hbFRva2VuO1xuICAgICAgICB9XG4gICAgfVxuICAgIGxldCB0b2tlbiA9IGF3YWl0IHRyeUdldEFjY2Vzc1Rva2VuKCk7XG4gICAgd2hpbGUgKHRva2VuID09PSBudWxsKSB7XG4gICAgICAgIGF3YWl0IGRlbGF5KHJldHJ5SW50ZXJ2YWxJbk1zKTtcbiAgICAgICAgdG9rZW4gPSBhd2FpdCB0cnlHZXRBY2Nlc3NUb2tlbigpO1xuICAgIH1cbiAgICByZXR1cm4gdG9rZW47XG59XG4vKipcbiAqIENyZWF0ZXMgYSB0b2tlbiBjeWNsZXIgZnJvbSBhIGNyZWRlbnRpYWwsIHNjb3BlcywgYW5kIG9wdGlvbmFsIHNldHRpbmdzLlxuICpcbiAqIEEgdG9rZW4gY3ljbGVyIHJlcHJlc2VudHMgYSB3YXkgdG8gcmVsaWFibHkgcmV0cmlldmUgYSB2YWxpZCBhY2Nlc3MgdG9rZW5cbiAqIGZyb20gYSBUb2tlbkNyZWRlbnRpYWwuIEl0IHdpbGwgaGFuZGxlIGluaXRpYWxpemluZyB0aGUgdG9rZW4sIHJlZnJlc2hpbmcgaXRcbiAqIHdoZW4gaXQgbmVhcnMgZXhwaXJhdGlvbiwgYW5kIHN5bmNocm9uaXplcyByZWZyZXNoIGF0dGVtcHRzIHRvIGF2b2lkXG4gKiBjb25jdXJyZW5jeSBoYXphcmRzLlxuICpcbiAqIEBwYXJhbSBjcmVkZW50aWFsIC0gdGhlIHVuZGVybHlpbmcgVG9rZW5DcmVkZW50aWFsIHRoYXQgcHJvdmlkZXMgdGhlIGFjY2Vzc1xuICogdG9rZW5cbiAqIEBwYXJhbSB0b2tlbkN5Y2xlck9wdGlvbnMgLSBvcHRpb25hbGx5IG92ZXJyaWRlIGRlZmF1bHQgc2V0dGluZ3MgZm9yIHRoZSBjeWNsZXJcbiAqXG4gKiBAcmV0dXJucyAtIGEgZnVuY3Rpb24gdGhhdCByZWxpYWJseSBwcm9kdWNlcyBhIHZhbGlkIGFjY2VzcyB0b2tlblxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVG9rZW5DeWNsZXIoY3JlZGVudGlhbCwgdG9rZW5DeWNsZXJPcHRpb25zKSB7XG4gICAgbGV0IHJlZnJlc2hXb3JrZXIgPSBudWxsO1xuICAgIGxldCB0b2tlbiA9IG51bGw7XG4gICAgbGV0IHRlbmFudElkO1xuICAgIGNvbnN0IG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfQ1lDTEVSX09QVElPTlMpLCB0b2tlbkN5Y2xlck9wdGlvbnMpO1xuICAgIC8qKlxuICAgICAqIFRoaXMgbGl0dGxlIGhvbGRlciBkZWZpbmVzIHNldmVyYWwgcHJlZGljYXRlcyB0aGF0IHdlIHVzZSB0byBjb25zdHJ1Y3RcbiAgICAgKiB0aGUgcnVsZXMgb2YgcmVmcmVzaGluZyB0aGUgdG9rZW4uXG4gICAgICovXG4gICAgY29uc3QgY3ljbGVyID0ge1xuICAgICAgICAvKipcbiAgICAgICAgICogUHJvZHVjZXMgdHJ1ZSBpZiBhIHJlZnJlc2ggam9iIGlzIGN1cnJlbnRseSBpbiBwcm9ncmVzcy5cbiAgICAgICAgICovXG4gICAgICAgIGdldCBpc1JlZnJlc2hpbmcoKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVmcmVzaFdvcmtlciAhPT0gbnVsbDtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFByb2R1Y2VzIHRydWUgaWYgdGhlIGN5Y2xlciBTSE9VTEQgcmVmcmVzaCAod2UgYXJlIHdpdGhpbiB0aGUgcmVmcmVzaFxuICAgICAgICAgKiB3aW5kb3cgYW5kIG5vdCBhbHJlYWR5IHJlZnJlc2hpbmcpXG4gICAgICAgICAqL1xuICAgICAgICBnZXQgc2hvdWxkUmVmcmVzaCgpIHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIGlmIChjeWNsZXIuaXNSZWZyZXNoaW5nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCh0b2tlbiA9PT0gbnVsbCB8fCB0b2tlbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogdG9rZW4ucmVmcmVzaEFmdGVyVGltZXN0YW1wKSAmJiB0b2tlbi5yZWZyZXNoQWZ0ZXJUaW1lc3RhbXAgPCBEYXRlLm5vdygpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gKChfYSA9IHRva2VuID09PSBudWxsIHx8IHRva2VuID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0b2tlbi5leHBpcmVzT25UaW1lc3RhbXApICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IDApIC0gb3B0aW9ucy5yZWZyZXNoV2luZG93SW5NcyA8IERhdGUubm93KCk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcm9kdWNlcyB0cnVlIGlmIHRoZSBjeWNsZXIgTVVTVCByZWZyZXNoIChudWxsIG9yIG5lYXJseS1leHBpcmVkXG4gICAgICAgICAqIHRva2VuKS5cbiAgICAgICAgICovXG4gICAgICAgIGdldCBtdXN0UmVmcmVzaCgpIHtcbiAgICAgICAgICAgIHJldHVybiAodG9rZW4gPT09IG51bGwgfHwgdG9rZW4uZXhwaXJlc09uVGltZXN0YW1wIC0gb3B0aW9ucy5mb3JjZWRSZWZyZXNoV2luZG93SW5NcyA8IERhdGUubm93KCkpO1xuICAgICAgICB9LFxuICAgIH07XG4gICAgLyoqXG4gICAgICogU3RhcnRzIGEgcmVmcmVzaCBqb2Igb3IgcmV0dXJucyB0aGUgZXhpc3Rpbmcgam9iIGlmIG9uZSBpcyBhbHJlYWR5XG4gICAgICogcnVubmluZy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZWZyZXNoKHNjb3BlcywgZ2V0VG9rZW5PcHRpb25zKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKCFjeWNsZXIuaXNSZWZyZXNoaW5nKSB7XG4gICAgICAgICAgICAvLyBXZSBiaW5kIGBzY29wZXNgIGhlcmUgdG8gYXZvaWQgcGFzc2luZyBpdCBhcm91bmQgYSBsb3RcbiAgICAgICAgICAgIGNvbnN0IHRyeUdldEFjY2Vzc1Rva2VuID0gKCkgPT4gY3JlZGVudGlhbC5nZXRUb2tlbihzY29wZXMsIGdldFRva2VuT3B0aW9ucyk7XG4gICAgICAgICAgICAvLyBUYWtlIGFkdmFudGFnZSBvZiBwcm9taXNlIGNoYWluaW5nIHRvIGluc2VydCBhbiBhc3NpZ25tZW50IHRvIGB0b2tlbmBcbiAgICAgICAgICAgIC8vIGJlZm9yZSB0aGUgcmVmcmVzaCBjYW4gYmUgY29uc2lkZXJlZCBkb25lLlxuICAgICAgICAgICAgcmVmcmVzaFdvcmtlciA9IGJlZ2luUmVmcmVzaCh0cnlHZXRBY2Nlc3NUb2tlbiwgb3B0aW9ucy5yZXRyeUludGVydmFsSW5NcywgXG4gICAgICAgICAgICAvLyBJZiB3ZSBkb24ndCBoYXZlIGEgdG9rZW4sIHRoZW4gd2Ugc2hvdWxkIHRpbWVvdXQgaW1tZWRpYXRlbHlcbiAgICAgICAgICAgIChfYSA9IHRva2VuID09PSBudWxsIHx8IHRva2VuID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0b2tlbi5leHBpcmVzT25UaW1lc3RhbXApICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IERhdGUubm93KCkpXG4gICAgICAgICAgICAgICAgLnRoZW4oKF90b2tlbikgPT4ge1xuICAgICAgICAgICAgICAgIHJlZnJlc2hXb3JrZXIgPSBudWxsO1xuICAgICAgICAgICAgICAgIHRva2VuID0gX3Rva2VuO1xuICAgICAgICAgICAgICAgIHRlbmFudElkID0gZ2V0VG9rZW5PcHRpb25zLnRlbmFudElkO1xuICAgICAgICAgICAgICAgIHJldHVybiB0b2tlbjtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmNhdGNoKChyZWFzb24pID0+IHtcbiAgICAgICAgICAgICAgICAvLyBXZSBhbHNvIHNob3VsZCByZXNldCB0aGUgcmVmcmVzaGVyIGlmIHdlIGVudGVyIGEgZmFpbGVkIHN0YXRlLiAgQWxsXG4gICAgICAgICAgICAgICAgLy8gZXhpc3RpbmcgYXdhaXRlcnMgd2lsbCB0aHJvdywgYnV0IHN1YnNlcXVlbnQgcmVxdWVzdHMgd2lsbCBzdGFydCBhXG4gICAgICAgICAgICAgICAgLy8gbmV3IHJldHJ5IGNoYWluLlxuICAgICAgICAgICAgICAgIHJlZnJlc2hXb3JrZXIgPSBudWxsO1xuICAgICAgICAgICAgICAgIHRva2VuID0gbnVsbDtcbiAgICAgICAgICAgICAgICB0ZW5hbnRJZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB0aHJvdyByZWFzb247XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVmcmVzaFdvcmtlcjtcbiAgICB9XG4gICAgcmV0dXJuIGFzeW5jIChzY29wZXMsIHRva2VuT3B0aW9ucykgPT4ge1xuICAgICAgICAvL1xuICAgICAgICAvLyBTaW1wbGUgcnVsZXM6XG4gICAgICAgIC8vIC0gSWYgd2UgTVVTVCByZWZyZXNoLCB0aGVuIHJldHVybiB0aGUgcmVmcmVzaCB0YXNrLCBibG9ja2luZ1xuICAgICAgICAvLyAgIHRoZSBwaXBlbGluZSB1bnRpbCBhIHRva2VuIGlzIGF2YWlsYWJsZS5cbiAgICAgICAgLy8gLSBJZiB3ZSBTSE9VTEQgcmVmcmVzaCwgdGhlbiBydW4gcmVmcmVzaCBidXQgZG9uJ3QgcmV0dXJuIGl0XG4gICAgICAgIC8vICAgKHdlIGNhbiBzdGlsbCB1c2UgdGhlIGNhY2hlZCB0b2tlbikuXG4gICAgICAgIC8vIC0gUmV0dXJuIHRoZSB0b2tlbiwgc2luY2UgaXQncyBmaW5lIGlmIHdlIGRpZG4ndCByZXR1cm4gaW5cbiAgICAgICAgLy8gICBzdGVwIDEuXG4gICAgICAgIC8vXG4gICAgICAgIGNvbnN0IGhhc0NsYWltQ2hhbGxlbmdlID0gQm9vbGVhbih0b2tlbk9wdGlvbnMuY2xhaW1zKTtcbiAgICAgICAgY29uc3QgdGVuYW50SWRDaGFuZ2VkID0gdGVuYW50SWQgIT09IHRva2VuT3B0aW9ucy50ZW5hbnRJZDtcbiAgICAgICAgaWYgKGhhc0NsYWltQ2hhbGxlbmdlKSB7XG4gICAgICAgICAgICAvLyBJZiB3ZSd2ZSByZWNlaXZlZCBhIGNsYWltLCB3ZSBrbm93IHRoZSBleGlzdGluZyB0b2tlbiBpc24ndCB2YWxpZFxuICAgICAgICAgICAgLy8gV2Ugd2FudCB0byBjbGVhciBpdCBzbyB0aGF0IHRoYXQgcmVmcmVzaCB3b3JrZXIgd29uJ3QgdXNlIHRoZSBvbGQgZXhwaXJhdGlvbiB0aW1lIGFzIGEgdGltZW91dFxuICAgICAgICAgICAgdG9rZW4gPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIC8vIElmIHRoZSB0ZW5hbnRJZCBwYXNzZWQgaW4gdG9rZW4gb3B0aW9ucyBpcyBkaWZmZXJlbnQgdG8gdGhlIG9uZSB3ZSBoYXZlXG4gICAgICAgIC8vIE9yIGlmIHdlIGFyZSBpbiBjbGFpbSBjaGFsbGVuZ2UgYW5kIHRoZSB0b2tlbiB3YXMgcmVqZWN0ZWQgYW5kIGEgbmV3IGFjY2VzcyB0b2tlbiBuZWVkIHRvIGJlIGlzc3VlZCwgd2UgbmVlZCB0b1xuICAgICAgICAvLyByZWZyZXNoIHRoZSB0b2tlbiB3aXRoIHRoZSBuZXcgdGVuYW50SWQgb3IgdG9rZW4uXG4gICAgICAgIGNvbnN0IG11c3RSZWZyZXNoID0gdGVuYW50SWRDaGFuZ2VkIHx8IGhhc0NsYWltQ2hhbGxlbmdlIHx8IGN5Y2xlci5tdXN0UmVmcmVzaDtcbiAgICAgICAgaWYgKG11c3RSZWZyZXNoKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVmcmVzaChzY29wZXMsIHRva2VuT3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGN5Y2xlci5zaG91bGRSZWZyZXNoKSB7XG4gICAgICAgICAgICByZWZyZXNoKHNjb3BlcywgdG9rZW5PcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG9rZW47XG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRva2VuQ3ljbGVyLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/tokenCycler.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/typeGuards.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/util/typeGuards.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isBlob: () => (/* binding */ isBlob),\n/* harmony export */   isNodeReadableStream: () => (/* binding */ isNodeReadableStream),\n/* harmony export */   isReadableStream: () => (/* binding */ isReadableStream),\n/* harmony export */   isWebReadableStream: () => (/* binding */ isWebReadableStream)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nfunction isNodeReadableStream(x) {\n    return Boolean(x && typeof x[\"pipe\"] === \"function\");\n}\nfunction isWebReadableStream(x) {\n    return Boolean(x &&\n        typeof x.getReader === \"function\" &&\n        typeof x.tee === \"function\");\n}\nfunction isReadableStream(x) {\n    return isNodeReadableStream(x) || isWebReadableStream(x);\n}\nfunction isBlob(x) {\n    return typeof x.stream === \"function\";\n}\n//# sourceMappingURL=typeGuards.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS91dGlsL3R5cGVHdWFyZHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWN0b3J3aWxzb24vRGVza3RvcC9wcm9qZWN0cy9FWlZpei9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS91dGlsL3R5cGVHdWFyZHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5leHBvcnQgZnVuY3Rpb24gaXNOb2RlUmVhZGFibGVTdHJlYW0oeCkge1xuICAgIHJldHVybiBCb29sZWFuKHggJiYgdHlwZW9mIHhbXCJwaXBlXCJdID09PSBcImZ1bmN0aW9uXCIpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzV2ViUmVhZGFibGVTdHJlYW0oeCkge1xuICAgIHJldHVybiBCb29sZWFuKHggJiZcbiAgICAgICAgdHlwZW9mIHguZ2V0UmVhZGVyID09PSBcImZ1bmN0aW9uXCIgJiZcbiAgICAgICAgdHlwZW9mIHgudGVlID09PSBcImZ1bmN0aW9uXCIpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzUmVhZGFibGVTdHJlYW0oeCkge1xuICAgIHJldHVybiBpc05vZGVSZWFkYWJsZVN0cmVhbSh4KSB8fCBpc1dlYlJlYWRhYmxlU3RyZWFtKHgpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzQmxvYih4KSB7XG4gICAgcmV0dXJuIHR5cGVvZiB4LnN0cmVhbSA9PT0gXCJmdW5jdGlvblwiO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHlwZUd1YXJkcy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/typeGuards.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/userAgent.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/util/userAgent.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getUserAgentHeaderName: () => (/* binding */ getUserAgentHeaderName),\n/* harmony export */   getUserAgentValue: () => (/* binding */ getUserAgentValue)\n/* harmony export */ });\n/* harmony import */ var _userAgentPlatform_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./userAgentPlatform.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/userAgentPlatform.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants.js */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/constants.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\nfunction getUserAgentString(telemetryInfo) {\n    const parts = [];\n    for (const [key, value] of telemetryInfo) {\n        const token = value ? `${key}/${value}` : key;\n        parts.push(token);\n    }\n    return parts.join(\" \");\n}\n/**\n * @internal\n */\nfunction getUserAgentHeaderName() {\n    return (0,_userAgentPlatform_js__WEBPACK_IMPORTED_MODULE_0__.getHeaderName)();\n}\n/**\n * @internal\n */\nasync function getUserAgentValue(prefix) {\n    const runtimeInfo = new Map();\n    runtimeInfo.set(\"core-rest-pipeline\", _constants_js__WEBPACK_IMPORTED_MODULE_1__.SDK_VERSION);\n    await (0,_userAgentPlatform_js__WEBPACK_IMPORTED_MODULE_0__.setPlatformSpecificData)(runtimeInfo);\n    const defaultAgent = getUserAgentString(runtimeInfo);\n    const userAgentValue = prefix ? `${prefix} ${defaultAgent}` : defaultAgent;\n    return userAgentValue;\n}\n//# sourceMappingURL=userAgent.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS91dGlsL3VzZXJBZ2VudC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQTtBQUNnRjtBQUNsQztBQUM5QztBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsSUFBSSxHQUFHLE1BQU07QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLFdBQVcsb0VBQWE7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0EsMENBQTBDLHNEQUFXO0FBQ3JELFVBQVUsOEVBQXVCO0FBQ2pDO0FBQ0EsdUNBQXVDLFFBQVEsRUFBRSxhQUFhO0FBQzlEO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcndpbHNvbi9EZXNrdG9wL3Byb2plY3RzL0VaVml6L25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS1yZXN0LXBpcGVsaW5lL2Rpc3QvZXNtL3V0aWwvdXNlckFnZW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuaW1wb3J0IHsgZ2V0SGVhZGVyTmFtZSwgc2V0UGxhdGZvcm1TcGVjaWZpY0RhdGEgfSBmcm9tIFwiLi91c2VyQWdlbnRQbGF0Zm9ybS5qc1wiO1xuaW1wb3J0IHsgU0RLX1ZFUlNJT04gfSBmcm9tIFwiLi4vY29uc3RhbnRzLmpzXCI7XG5mdW5jdGlvbiBnZXRVc2VyQWdlbnRTdHJpbmcodGVsZW1ldHJ5SW5mbykge1xuICAgIGNvbnN0IHBhcnRzID0gW107XG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgdGVsZW1ldHJ5SW5mbykge1xuICAgICAgICBjb25zdCB0b2tlbiA9IHZhbHVlID8gYCR7a2V5fS8ke3ZhbHVlfWAgOiBrZXk7XG4gICAgICAgIHBhcnRzLnB1c2godG9rZW4pO1xuICAgIH1cbiAgICByZXR1cm4gcGFydHMuam9pbihcIiBcIik7XG59XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0VXNlckFnZW50SGVhZGVyTmFtZSgpIHtcbiAgICByZXR1cm4gZ2V0SGVhZGVyTmFtZSgpO1xufVxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFVzZXJBZ2VudFZhbHVlKHByZWZpeCkge1xuICAgIGNvbnN0IHJ1bnRpbWVJbmZvID0gbmV3IE1hcCgpO1xuICAgIHJ1bnRpbWVJbmZvLnNldChcImNvcmUtcmVzdC1waXBlbGluZVwiLCBTREtfVkVSU0lPTik7XG4gICAgYXdhaXQgc2V0UGxhdGZvcm1TcGVjaWZpY0RhdGEocnVudGltZUluZm8pO1xuICAgIGNvbnN0IGRlZmF1bHRBZ2VudCA9IGdldFVzZXJBZ2VudFN0cmluZyhydW50aW1lSW5mbyk7XG4gICAgY29uc3QgdXNlckFnZW50VmFsdWUgPSBwcmVmaXggPyBgJHtwcmVmaXh9ICR7ZGVmYXVsdEFnZW50fWAgOiBkZWZhdWx0QWdlbnQ7XG4gICAgcmV0dXJuIHVzZXJBZ2VudFZhbHVlO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlckFnZW50LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/userAgent.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/userAgentPlatform.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/esm/util/userAgentPlatform.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("var node_process__WEBPACK_IMPORTED_MODULE_1___namespace_cache;\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getHeaderName: () => (/* binding */ getHeaderName),\n/* harmony export */   setPlatformSpecificData: () => (/* binding */ setPlatformSpecificData)\n/* harmony export */ });\n/* harmony import */ var node_os__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:os */ \"node:os\");\n/* harmony import */ var node_process__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node:process */ \"node:process\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n/**\n * @internal\n */\nfunction getHeaderName() {\n    return \"User-Agent\";\n}\n/**\n * @internal\n */\nasync function setPlatformSpecificData(map) {\n    if (/*#__PURE__*/ (node_process__WEBPACK_IMPORTED_MODULE_1___namespace_cache || (node_process__WEBPACK_IMPORTED_MODULE_1___namespace_cache = __webpack_require__.t(node_process__WEBPACK_IMPORTED_MODULE_1__, 2))) && node_process__WEBPACK_IMPORTED_MODULE_1__.versions) {\n        const versions = node_process__WEBPACK_IMPORTED_MODULE_1__.versions;\n        if (versions.bun) {\n            map.set(\"Bun\", versions.bun);\n        }\n        else if (versions.deno) {\n            map.set(\"Deno\", versions.deno);\n        }\n        else if (versions.node) {\n            map.set(\"Node\", versions.node);\n        }\n    }\n    map.set(\"OS\", `(${node_os__WEBPACK_IMPORTED_MODULE_0__.arch()}-${node_os__WEBPACK_IMPORTED_MODULE_0__.type()}-${node_os__WEBPACK_IMPORTED_MODULE_0__.release()})`);\n}\n//# sourceMappingURL=userAgentPlatform.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtcmVzdC1waXBlbGluZS9kaXN0L2VzbS91dGlsL3VzZXJBZ2VudFBsYXRmb3JtLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDQTtBQUM4QjtBQUNVO0FBQ3hDO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsUUFBUSw4TUFBTyxJQUFJLGtEQUFnQjtBQUNuQyx5QkFBeUIsa0RBQWdCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLHlDQUFPLEdBQUcsR0FBRyx5Q0FBTyxHQUFHLEdBQUcsNENBQVUsR0FBRztBQUM3RDtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvdmljdG9yd2lsc29uL0Rlc2t0b3AvcHJvamVjdHMvRVpWaXovbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXJlc3QtcGlwZWxpbmUvZGlzdC9lc20vdXRpbC91c2VyQWdlbnRQbGF0Zm9ybS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbmltcG9ydCAqIGFzIG9zIGZyb20gXCJub2RlOm9zXCI7XG5pbXBvcnQgKiBhcyBwcm9jZXNzIGZyb20gXCJub2RlOnByb2Nlc3NcIjtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRIZWFkZXJOYW1lKCkge1xuICAgIHJldHVybiBcIlVzZXItQWdlbnRcIjtcbn1cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzZXRQbGF0Zm9ybVNwZWNpZmljRGF0YShtYXApIHtcbiAgICBpZiAocHJvY2VzcyAmJiBwcm9jZXNzLnZlcnNpb25zKSB7XG4gICAgICAgIGNvbnN0IHZlcnNpb25zID0gcHJvY2Vzcy52ZXJzaW9ucztcbiAgICAgICAgaWYgKHZlcnNpb25zLmJ1bikge1xuICAgICAgICAgICAgbWFwLnNldChcIkJ1blwiLCB2ZXJzaW9ucy5idW4pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHZlcnNpb25zLmRlbm8pIHtcbiAgICAgICAgICAgIG1hcC5zZXQoXCJEZW5vXCIsIHZlcnNpb25zLmRlbm8pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHZlcnNpb25zLm5vZGUpIHtcbiAgICAgICAgICAgIG1hcC5zZXQoXCJOb2RlXCIsIHZlcnNpb25zLm5vZGUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIG1hcC5zZXQoXCJPU1wiLCBgKCR7b3MuYXJjaCgpfS0ke29zLnR5cGUoKX0tJHtvcy5yZWxlYXNlKCl9KWApO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlckFnZW50UGxhdGZvcm0uanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/util/userAgentPlatform.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-tracing/dist/commonjs/state.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@azure/core-tracing/dist/commonjs/state.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.state = void 0;\n/**\n * @internal\n *\n * Holds the singleton instrumenter, to be shared across CJS and ESM imports.\n */\nexports.state = {\n    instrumenterImplementation: undefined,\n};\n//# sourceMappingURL=state-cjs.cjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdHJhY2luZy9kaXN0L2NvbW1vbmpzL3N0YXRlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWN0b3J3aWxzb24vRGVza3RvcC9wcm9qZWN0cy9FWlZpei9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdHJhY2luZy9kaXN0L2NvbW1vbmpzL3N0YXRlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnN0YXRlID0gdm9pZCAwO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqXG4gKiBIb2xkcyB0aGUgc2luZ2xldG9uIGluc3RydW1lbnRlciwgdG8gYmUgc2hhcmVkIGFjcm9zcyBDSlMgYW5kIEVTTSBpbXBvcnRzLlxuICovXG5leHBvcnRzLnN0YXRlID0ge1xuICAgIGluc3RydW1lbnRlckltcGxlbWVudGF0aW9uOiB1bmRlZmluZWQsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RhdGUtY2pzLmNqcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-tracing/dist/commonjs/state.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-tracing/dist/esm/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@azure/core-tracing/dist/esm/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createTracingClient: () => (/* reexport safe */ _tracingClient_js__WEBPACK_IMPORTED_MODULE_1__.createTracingClient),\n/* harmony export */   useInstrumenter: () => (/* reexport safe */ _instrumenter_js__WEBPACK_IMPORTED_MODULE_0__.useInstrumenter)\n/* harmony export */ });\n/* harmony import */ var _instrumenter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./instrumenter.js */ \"(rsc)/./node_modules/@azure/core-tracing/dist/esm/instrumenter.js\");\n/* harmony import */ var _tracingClient_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tracingClient.js */ \"(rsc)/./node_modules/@azure/core-tracing/dist/esm/tracingClient.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdHJhY2luZy9kaXN0L2VzbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQTtBQUNvRDtBQUNLO0FBQ3pEIiwic291cmNlcyI6WyIvVXNlcnMvdmljdG9yd2lsc29uL0Rlc2t0b3AvcHJvamVjdHMvRVpWaXovbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXRyYWNpbmcvZGlzdC9lc20vaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5leHBvcnQgeyB1c2VJbnN0cnVtZW50ZXIgfSBmcm9tIFwiLi9pbnN0cnVtZW50ZXIuanNcIjtcbmV4cG9ydCB7IGNyZWF0ZVRyYWNpbmdDbGllbnQgfSBmcm9tIFwiLi90cmFjaW5nQ2xpZW50LmpzXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-tracing/dist/esm/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-tracing/dist/esm/instrumenter.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@azure/core-tracing/dist/esm/instrumenter.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createDefaultInstrumenter: () => (/* binding */ createDefaultInstrumenter),\n/* harmony export */   createDefaultTracingSpan: () => (/* binding */ createDefaultTracingSpan),\n/* harmony export */   getInstrumenter: () => (/* binding */ getInstrumenter),\n/* harmony export */   useInstrumenter: () => (/* binding */ useInstrumenter)\n/* harmony export */ });\n/* harmony import */ var _tracingContext_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tracingContext.js */ \"(rsc)/./node_modules/@azure/core-tracing/dist/esm/tracingContext.js\");\n/* harmony import */ var _state_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./state.js */ \"(rsc)/./node_modules/@azure/core-tracing/dist/esm/state.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\nfunction createDefaultTracingSpan() {\n    return {\n        end: () => {\n            // noop\n        },\n        isRecording: () => false,\n        recordException: () => {\n            // noop\n        },\n        setAttribute: () => {\n            // noop\n        },\n        setStatus: () => {\n            // noop\n        },\n        addEvent: () => {\n            // noop\n        },\n    };\n}\nfunction createDefaultInstrumenter() {\n    return {\n        createRequestHeaders: () => {\n            return {};\n        },\n        parseTraceparentHeader: () => {\n            return undefined;\n        },\n        startSpan: (_name, spanOptions) => {\n            return {\n                span: createDefaultTracingSpan(),\n                tracingContext: (0,_tracingContext_js__WEBPACK_IMPORTED_MODULE_0__.createTracingContext)({ parentContext: spanOptions.tracingContext }),\n            };\n        },\n        withContext(_context, callback, ...callbackArgs) {\n            return callback(...callbackArgs);\n        },\n    };\n}\n/**\n * Extends the Azure SDK with support for a given instrumenter implementation.\n *\n * @param instrumenter - The instrumenter implementation to use.\n */\nfunction useInstrumenter(instrumenter) {\n    _state_js__WEBPACK_IMPORTED_MODULE_1__.state.instrumenterImplementation = instrumenter;\n}\n/**\n * Gets the currently set instrumenter, a No-Op instrumenter by default.\n *\n * @returns The currently set instrumenter\n */\nfunction getInstrumenter() {\n    if (!_state_js__WEBPACK_IMPORTED_MODULE_1__.state.instrumenterImplementation) {\n        _state_js__WEBPACK_IMPORTED_MODULE_1__.state.instrumenterImplementation = createDefaultInstrumenter();\n    }\n    return _state_js__WEBPACK_IMPORTED_MODULE_1__.state.instrumenterImplementation;\n}\n//# sourceMappingURL=instrumenter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdHJhY2luZy9kaXN0L2VzbS9pbnN0cnVtZW50ZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUMyRDtBQUN4QjtBQUM1QjtBQUNQO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLHdFQUFvQixHQUFHLDJDQUEyQztBQUNsRztBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxJQUFJLDRDQUFLO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxTQUFTLDRDQUFLO0FBQ2QsUUFBUSw0Q0FBSztBQUNiO0FBQ0EsV0FBVyw0Q0FBSztBQUNoQjtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvdmljdG9yd2lsc29uL0Rlc2t0b3AvcHJvamVjdHMvRVpWaXovbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXRyYWNpbmcvZGlzdC9lc20vaW5zdHJ1bWVudGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuaW1wb3J0IHsgY3JlYXRlVHJhY2luZ0NvbnRleHQgfSBmcm9tIFwiLi90cmFjaW5nQ29udGV4dC5qc1wiO1xuaW1wb3J0IHsgc3RhdGUgfSBmcm9tIFwiLi9zdGF0ZS5qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZURlZmF1bHRUcmFjaW5nU3BhbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBlbmQ6ICgpID0+IHtcbiAgICAgICAgICAgIC8vIG5vb3BcbiAgICAgICAgfSxcbiAgICAgICAgaXNSZWNvcmRpbmc6ICgpID0+IGZhbHNlLFxuICAgICAgICByZWNvcmRFeGNlcHRpb246ICgpID0+IHtcbiAgICAgICAgICAgIC8vIG5vb3BcbiAgICAgICAgfSxcbiAgICAgICAgc2V0QXR0cmlidXRlOiAoKSA9PiB7XG4gICAgICAgICAgICAvLyBub29wXG4gICAgICAgIH0sXG4gICAgICAgIHNldFN0YXR1czogKCkgPT4ge1xuICAgICAgICAgICAgLy8gbm9vcFxuICAgICAgICB9LFxuICAgICAgICBhZGRFdmVudDogKCkgPT4ge1xuICAgICAgICAgICAgLy8gbm9vcFxuICAgICAgICB9LFxuICAgIH07XG59XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRGVmYXVsdEluc3RydW1lbnRlcigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBjcmVhdGVSZXF1ZXN0SGVhZGVyczogKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgICB9LFxuICAgICAgICBwYXJzZVRyYWNlcGFyZW50SGVhZGVyOiAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9LFxuICAgICAgICBzdGFydFNwYW46IChfbmFtZSwgc3Bhbk9wdGlvbnMpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgc3BhbjogY3JlYXRlRGVmYXVsdFRyYWNpbmdTcGFuKCksXG4gICAgICAgICAgICAgICAgdHJhY2luZ0NvbnRleHQ6IGNyZWF0ZVRyYWNpbmdDb250ZXh0KHsgcGFyZW50Q29udGV4dDogc3Bhbk9wdGlvbnMudHJhY2luZ0NvbnRleHQgfSksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICB3aXRoQ29udGV4dChfY29udGV4dCwgY2FsbGJhY2ssIC4uLmNhbGxiYWNrQXJncykge1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKC4uLmNhbGxiYWNrQXJncyk7XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbi8qKlxuICogRXh0ZW5kcyB0aGUgQXp1cmUgU0RLIHdpdGggc3VwcG9ydCBmb3IgYSBnaXZlbiBpbnN0cnVtZW50ZXIgaW1wbGVtZW50YXRpb24uXG4gKlxuICogQHBhcmFtIGluc3RydW1lbnRlciAtIFRoZSBpbnN0cnVtZW50ZXIgaW1wbGVtZW50YXRpb24gdG8gdXNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlSW5zdHJ1bWVudGVyKGluc3RydW1lbnRlcikge1xuICAgIHN0YXRlLmluc3RydW1lbnRlckltcGxlbWVudGF0aW9uID0gaW5zdHJ1bWVudGVyO1xufVxuLyoqXG4gKiBHZXRzIHRoZSBjdXJyZW50bHkgc2V0IGluc3RydW1lbnRlciwgYSBOby1PcCBpbnN0cnVtZW50ZXIgYnkgZGVmYXVsdC5cbiAqXG4gKiBAcmV0dXJucyBUaGUgY3VycmVudGx5IHNldCBpbnN0cnVtZW50ZXJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEluc3RydW1lbnRlcigpIHtcbiAgICBpZiAoIXN0YXRlLmluc3RydW1lbnRlckltcGxlbWVudGF0aW9uKSB7XG4gICAgICAgIHN0YXRlLmluc3RydW1lbnRlckltcGxlbWVudGF0aW9uID0gY3JlYXRlRGVmYXVsdEluc3RydW1lbnRlcigpO1xuICAgIH1cbiAgICByZXR1cm4gc3RhdGUuaW5zdHJ1bWVudGVySW1wbGVtZW50YXRpb247XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbnN0cnVtZW50ZXIuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-tracing/dist/esm/instrumenter.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-tracing/dist/esm/state.js":
/*!************************************************************!*\
  !*** ./node_modules/@azure/core-tracing/dist/esm/state.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   state: () => (/* binding */ state)\n/* harmony export */ });\n/* harmony import */ var _commonjs_state_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../commonjs/state.js */ \"(rsc)/./node_modules/@azure/core-tracing/dist/commonjs/state.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n// @ts-expect-error The recommended approach to sharing module state between ESM and CJS.\n// See https://github.com/isaacs/tshy/blob/main/README.md#module-local-state for additional information.\n\n/**\n * Defines the shared state between CJS and ESM by re-exporting the CJS state.\n */\nconst state = _commonjs_state_js__WEBPACK_IMPORTED_MODULE_0__.state;\n//# sourceMappingURL=state.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdHJhY2luZy9kaXN0L2VzbS9zdGF0ZS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ3lEO0FBQ3pEO0FBQ0E7QUFDQTtBQUNPLGNBQWMscURBQVE7QUFDN0IiLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWN0b3J3aWxzb24vRGVza3RvcC9wcm9qZWN0cy9FWlZpei9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdHJhY2luZy9kaXN0L2VzbS9zdGF0ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbi8vIEB0cy1leHBlY3QtZXJyb3IgVGhlIHJlY29tbWVuZGVkIGFwcHJvYWNoIHRvIHNoYXJpbmcgbW9kdWxlIHN0YXRlIGJldHdlZW4gRVNNIGFuZCBDSlMuXG4vLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2lzYWFjcy90c2h5L2Jsb2IvbWFpbi9SRUFETUUubWQjbW9kdWxlLWxvY2FsLXN0YXRlIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uLlxuaW1wb3J0IHsgc3RhdGUgYXMgY2pzU3RhdGUgfSBmcm9tIFwiLi4vY29tbW9uanMvc3RhdGUuanNcIjtcbi8qKlxuICogRGVmaW5lcyB0aGUgc2hhcmVkIHN0YXRlIGJldHdlZW4gQ0pTIGFuZCBFU00gYnkgcmUtZXhwb3J0aW5nIHRoZSBDSlMgc3RhdGUuXG4gKi9cbmV4cG9ydCBjb25zdCBzdGF0ZSA9IGNqc1N0YXRlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RhdGUuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-tracing/dist/esm/state.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-tracing/dist/esm/tracingClient.js":
/*!********************************************************************!*\
  !*** ./node_modules/@azure/core-tracing/dist/esm/tracingClient.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createTracingClient: () => (/* binding */ createTracingClient)\n/* harmony export */ });\n/* harmony import */ var _instrumenter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./instrumenter.js */ \"(rsc)/./node_modules/@azure/core-tracing/dist/esm/instrumenter.js\");\n/* harmony import */ var _tracingContext_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tracingContext.js */ \"(rsc)/./node_modules/@azure/core-tracing/dist/esm/tracingContext.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n/**\n * Creates a new tracing client.\n *\n * @param options - Options used to configure the tracing client.\n * @returns - An instance of {@link TracingClient}.\n */\nfunction createTracingClient(options) {\n    const { namespace, packageName, packageVersion } = options;\n    function startSpan(name, operationOptions, spanOptions) {\n        var _a;\n        const startSpanResult = (0,_instrumenter_js__WEBPACK_IMPORTED_MODULE_0__.getInstrumenter)().startSpan(name, Object.assign(Object.assign({}, spanOptions), { packageName: packageName, packageVersion: packageVersion, tracingContext: (_a = operationOptions === null || operationOptions === void 0 ? void 0 : operationOptions.tracingOptions) === null || _a === void 0 ? void 0 : _a.tracingContext }));\n        let tracingContext = startSpanResult.tracingContext;\n        const span = startSpanResult.span;\n        if (!tracingContext.getValue(_tracingContext_js__WEBPACK_IMPORTED_MODULE_1__.knownContextKeys.namespace)) {\n            tracingContext = tracingContext.setValue(_tracingContext_js__WEBPACK_IMPORTED_MODULE_1__.knownContextKeys.namespace, namespace);\n        }\n        span.setAttribute(\"az.namespace\", tracingContext.getValue(_tracingContext_js__WEBPACK_IMPORTED_MODULE_1__.knownContextKeys.namespace));\n        const updatedOptions = Object.assign({}, operationOptions, {\n            tracingOptions: Object.assign(Object.assign({}, operationOptions === null || operationOptions === void 0 ? void 0 : operationOptions.tracingOptions), { tracingContext }),\n        });\n        return {\n            span,\n            updatedOptions,\n        };\n    }\n    async function withSpan(name, operationOptions, callback, spanOptions) {\n        const { span, updatedOptions } = startSpan(name, operationOptions, spanOptions);\n        try {\n            const result = await withContext(updatedOptions.tracingOptions.tracingContext, () => Promise.resolve(callback(updatedOptions, span)));\n            span.setStatus({ status: \"success\" });\n            return result;\n        }\n        catch (err) {\n            span.setStatus({ status: \"error\", error: err });\n            throw err;\n        }\n        finally {\n            span.end();\n        }\n    }\n    function withContext(context, callback, ...callbackArgs) {\n        return (0,_instrumenter_js__WEBPACK_IMPORTED_MODULE_0__.getInstrumenter)().withContext(context, callback, ...callbackArgs);\n    }\n    /**\n     * Parses a traceparent header value into a span identifier.\n     *\n     * @param traceparentHeader - The traceparent header to parse.\n     * @returns An implementation-specific identifier for the span.\n     */\n    function parseTraceparentHeader(traceparentHeader) {\n        return (0,_instrumenter_js__WEBPACK_IMPORTED_MODULE_0__.getInstrumenter)().parseTraceparentHeader(traceparentHeader);\n    }\n    /**\n     * Creates a set of request headers to propagate tracing information to a backend.\n     *\n     * @param tracingContext - The context containing the span to serialize.\n     * @returns The set of headers to add to a request.\n     */\n    function createRequestHeaders(tracingContext) {\n        return (0,_instrumenter_js__WEBPACK_IMPORTED_MODULE_0__.getInstrumenter)().createRequestHeaders(tracingContext);\n    }\n    return {\n        startSpan,\n        withSpan,\n        withContext,\n        parseTraceparentHeader,\n        createRequestHeaders,\n    };\n}\n//# sourceMappingURL=tracingClient.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdHJhY2luZy9kaXN0L2VzbS90cmFjaW5nQ2xpZW50LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDb0Q7QUFDRztBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixvQkFBb0I7QUFDbEQ7QUFDTztBQUNQLFlBQVkseUNBQXlDO0FBQ3JEO0FBQ0E7QUFDQSxnQ0FBZ0MsaUVBQWUsaURBQWlELGtCQUFrQiw2T0FBNk87QUFDL1Y7QUFDQTtBQUNBLHFDQUFxQyxnRUFBZ0I7QUFDckQscURBQXFELGdFQUFnQjtBQUNyRTtBQUNBLGtFQUFrRSxnRUFBZ0I7QUFDbEYsK0NBQStDO0FBQy9DLDBEQUEwRCwwR0FBMEcsZ0JBQWdCO0FBQ3BMLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsdUJBQXVCO0FBQ3ZDO0FBQ0E7QUFDQSw2QkFBNkIsbUJBQW1CO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qiw2QkFBNkI7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGlFQUFlO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGlFQUFlO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGlFQUFlO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvdmljdG9yd2lsc29uL0Rlc2t0b3AvcHJvamVjdHMvRVpWaXovbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXRyYWNpbmcvZGlzdC9lc20vdHJhY2luZ0NsaWVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbmltcG9ydCB7IGdldEluc3RydW1lbnRlciB9IGZyb20gXCIuL2luc3RydW1lbnRlci5qc1wiO1xuaW1wb3J0IHsga25vd25Db250ZXh0S2V5cyB9IGZyb20gXCIuL3RyYWNpbmdDb250ZXh0LmpzXCI7XG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgdHJhY2luZyBjbGllbnQuXG4gKlxuICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25zIHVzZWQgdG8gY29uZmlndXJlIHRoZSB0cmFjaW5nIGNsaWVudC5cbiAqIEByZXR1cm5zIC0gQW4gaW5zdGFuY2Ugb2Yge0BsaW5rIFRyYWNpbmdDbGllbnR9LlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVHJhY2luZ0NsaWVudChvcHRpb25zKSB7XG4gICAgY29uc3QgeyBuYW1lc3BhY2UsIHBhY2thZ2VOYW1lLCBwYWNrYWdlVmVyc2lvbiB9ID0gb3B0aW9ucztcbiAgICBmdW5jdGlvbiBzdGFydFNwYW4obmFtZSwgb3BlcmF0aW9uT3B0aW9ucywgc3Bhbk9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBjb25zdCBzdGFydFNwYW5SZXN1bHQgPSBnZXRJbnN0cnVtZW50ZXIoKS5zdGFydFNwYW4obmFtZSwgT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBzcGFuT3B0aW9ucyksIHsgcGFja2FnZU5hbWU6IHBhY2thZ2VOYW1lLCBwYWNrYWdlVmVyc2lvbjogcGFja2FnZVZlcnNpb24sIHRyYWNpbmdDb250ZXh0OiAoX2EgPSBvcGVyYXRpb25PcHRpb25zID09PSBudWxsIHx8IG9wZXJhdGlvbk9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wZXJhdGlvbk9wdGlvbnMudHJhY2luZ09wdGlvbnMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS50cmFjaW5nQ29udGV4dCB9KSk7XG4gICAgICAgIGxldCB0cmFjaW5nQ29udGV4dCA9IHN0YXJ0U3BhblJlc3VsdC50cmFjaW5nQ29udGV4dDtcbiAgICAgICAgY29uc3Qgc3BhbiA9IHN0YXJ0U3BhblJlc3VsdC5zcGFuO1xuICAgICAgICBpZiAoIXRyYWNpbmdDb250ZXh0LmdldFZhbHVlKGtub3duQ29udGV4dEtleXMubmFtZXNwYWNlKSkge1xuICAgICAgICAgICAgdHJhY2luZ0NvbnRleHQgPSB0cmFjaW5nQ29udGV4dC5zZXRWYWx1ZShrbm93bkNvbnRleHRLZXlzLm5hbWVzcGFjZSwgbmFtZXNwYWNlKTtcbiAgICAgICAgfVxuICAgICAgICBzcGFuLnNldEF0dHJpYnV0ZShcImF6Lm5hbWVzcGFjZVwiLCB0cmFjaW5nQ29udGV4dC5nZXRWYWx1ZShrbm93bkNvbnRleHRLZXlzLm5hbWVzcGFjZSkpO1xuICAgICAgICBjb25zdCB1cGRhdGVkT3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIG9wZXJhdGlvbk9wdGlvbnMsIHtcbiAgICAgICAgICAgIHRyYWNpbmdPcHRpb25zOiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIG9wZXJhdGlvbk9wdGlvbnMgPT09IG51bGwgfHwgb3BlcmF0aW9uT3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3BlcmF0aW9uT3B0aW9ucy50cmFjaW5nT3B0aW9ucyksIHsgdHJhY2luZ0NvbnRleHQgfSksXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc3BhbixcbiAgICAgICAgICAgIHVwZGF0ZWRPcHRpb25zLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBhc3luYyBmdW5jdGlvbiB3aXRoU3BhbihuYW1lLCBvcGVyYXRpb25PcHRpb25zLCBjYWxsYmFjaywgc3Bhbk9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgeyBzcGFuLCB1cGRhdGVkT3B0aW9ucyB9ID0gc3RhcnRTcGFuKG5hbWUsIG9wZXJhdGlvbk9wdGlvbnMsIHNwYW5PcHRpb25zKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHdpdGhDb250ZXh0KHVwZGF0ZWRPcHRpb25zLnRyYWNpbmdPcHRpb25zLnRyYWNpbmdDb250ZXh0LCAoKSA9PiBQcm9taXNlLnJlc29sdmUoY2FsbGJhY2sodXBkYXRlZE9wdGlvbnMsIHNwYW4pKSk7XG4gICAgICAgICAgICBzcGFuLnNldFN0YXR1cyh7IHN0YXR1czogXCJzdWNjZXNzXCIgfSk7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHNwYW4uc2V0U3RhdHVzKHsgc3RhdHVzOiBcImVycm9yXCIsIGVycm9yOiBlcnIgfSk7XG4gICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICBzcGFuLmVuZCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHdpdGhDb250ZXh0KGNvbnRleHQsIGNhbGxiYWNrLCAuLi5jYWxsYmFja0FyZ3MpIHtcbiAgICAgICAgcmV0dXJuIGdldEluc3RydW1lbnRlcigpLndpdGhDb250ZXh0KGNvbnRleHQsIGNhbGxiYWNrLCAuLi5jYWxsYmFja0FyZ3MpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQYXJzZXMgYSB0cmFjZXBhcmVudCBoZWFkZXIgdmFsdWUgaW50byBhIHNwYW4gaWRlbnRpZmllci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB0cmFjZXBhcmVudEhlYWRlciAtIFRoZSB0cmFjZXBhcmVudCBoZWFkZXIgdG8gcGFyc2UuXG4gICAgICogQHJldHVybnMgQW4gaW1wbGVtZW50YXRpb24tc3BlY2lmaWMgaWRlbnRpZmllciBmb3IgdGhlIHNwYW4uXG4gICAgICovXG4gICAgZnVuY3Rpb24gcGFyc2VUcmFjZXBhcmVudEhlYWRlcih0cmFjZXBhcmVudEhlYWRlcikge1xuICAgICAgICByZXR1cm4gZ2V0SW5zdHJ1bWVudGVyKCkucGFyc2VUcmFjZXBhcmVudEhlYWRlcih0cmFjZXBhcmVudEhlYWRlcik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzZXQgb2YgcmVxdWVzdCBoZWFkZXJzIHRvIHByb3BhZ2F0ZSB0cmFjaW5nIGluZm9ybWF0aW9uIHRvIGEgYmFja2VuZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB0cmFjaW5nQ29udGV4dCAtIFRoZSBjb250ZXh0IGNvbnRhaW5pbmcgdGhlIHNwYW4gdG8gc2VyaWFsaXplLlxuICAgICAqIEByZXR1cm5zIFRoZSBzZXQgb2YgaGVhZGVycyB0byBhZGQgdG8gYSByZXF1ZXN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVJlcXVlc3RIZWFkZXJzKHRyYWNpbmdDb250ZXh0KSB7XG4gICAgICAgIHJldHVybiBnZXRJbnN0cnVtZW50ZXIoKS5jcmVhdGVSZXF1ZXN0SGVhZGVycyh0cmFjaW5nQ29udGV4dCk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHN0YXJ0U3BhbixcbiAgICAgICAgd2l0aFNwYW4sXG4gICAgICAgIHdpdGhDb250ZXh0LFxuICAgICAgICBwYXJzZVRyYWNlcGFyZW50SGVhZGVyLFxuICAgICAgICBjcmVhdGVSZXF1ZXN0SGVhZGVycyxcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHJhY2luZ0NsaWVudC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-tracing/dist/esm/tracingClient.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-tracing/dist/esm/tracingContext.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@azure/core-tracing/dist/esm/tracingContext.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TracingContextImpl: () => (/* binding */ TracingContextImpl),\n/* harmony export */   createTracingContext: () => (/* binding */ createTracingContext),\n/* harmony export */   knownContextKeys: () => (/* binding */ knownContextKeys)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/** @internal */\nconst knownContextKeys = {\n    span: Symbol.for(\"@azure/core-tracing span\"),\n    namespace: Symbol.for(\"@azure/core-tracing namespace\"),\n};\n/**\n * Creates a new {@link TracingContext} with the given options.\n * @param options - A set of known keys that may be set on the context.\n * @returns A new {@link TracingContext} with the given options.\n *\n * @internal\n */\nfunction createTracingContext(options = {}) {\n    let context = new TracingContextImpl(options.parentContext);\n    if (options.span) {\n        context = context.setValue(knownContextKeys.span, options.span);\n    }\n    if (options.namespace) {\n        context = context.setValue(knownContextKeys.namespace, options.namespace);\n    }\n    return context;\n}\n/** @internal */\nclass TracingContextImpl {\n    constructor(initialContext) {\n        this._contextMap =\n            initialContext instanceof TracingContextImpl\n                ? new Map(initialContext._contextMap)\n                : new Map();\n    }\n    setValue(key, value) {\n        const newContext = new TracingContextImpl(this);\n        newContext._contextMap.set(key, value);\n        return newContext;\n    }\n    getValue(key) {\n        return this._contextMap.get(key);\n    }\n    deleteValue(key) {\n        const newContext = new TracingContextImpl(this);\n        newContext._contextMap.delete(key);\n        return newContext;\n    }\n}\n//# sourceMappingURL=tracingContext.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdHJhY2luZy9kaXN0L2VzbS90cmFjaW5nQ29udGV4dC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHNCQUFzQjtBQUN4QztBQUNBLG1CQUFtQixzQkFBc0I7QUFDekM7QUFDQTtBQUNBO0FBQ08sMENBQTBDO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWN0b3J3aWxzb24vRGVza3RvcC9wcm9qZWN0cy9FWlZpei9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdHJhY2luZy9kaXN0L2VzbS90cmFjaW5nQ29udGV4dC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBrbm93bkNvbnRleHRLZXlzID0ge1xuICAgIHNwYW46IFN5bWJvbC5mb3IoXCJAYXp1cmUvY29yZS10cmFjaW5nIHNwYW5cIiksXG4gICAgbmFtZXNwYWNlOiBTeW1ib2wuZm9yKFwiQGF6dXJlL2NvcmUtdHJhY2luZyBuYW1lc3BhY2VcIiksXG59O1xuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IHtAbGluayBUcmFjaW5nQ29udGV4dH0gd2l0aCB0aGUgZ2l2ZW4gb3B0aW9ucy5cbiAqIEBwYXJhbSBvcHRpb25zIC0gQSBzZXQgb2Yga25vd24ga2V5cyB0aGF0IG1heSBiZSBzZXQgb24gdGhlIGNvbnRleHQuXG4gKiBAcmV0dXJucyBBIG5ldyB7QGxpbmsgVHJhY2luZ0NvbnRleHR9IHdpdGggdGhlIGdpdmVuIG9wdGlvbnMuXG4gKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVUcmFjaW5nQ29udGV4dChvcHRpb25zID0ge30pIHtcbiAgICBsZXQgY29udGV4dCA9IG5ldyBUcmFjaW5nQ29udGV4dEltcGwob3B0aW9ucy5wYXJlbnRDb250ZXh0KTtcbiAgICBpZiAob3B0aW9ucy5zcGFuKSB7XG4gICAgICAgIGNvbnRleHQgPSBjb250ZXh0LnNldFZhbHVlKGtub3duQ29udGV4dEtleXMuc3Bhbiwgb3B0aW9ucy5zcGFuKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMubmFtZXNwYWNlKSB7XG4gICAgICAgIGNvbnRleHQgPSBjb250ZXh0LnNldFZhbHVlKGtub3duQ29udGV4dEtleXMubmFtZXNwYWNlLCBvcHRpb25zLm5hbWVzcGFjZSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZXh0O1xufVxuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNsYXNzIFRyYWNpbmdDb250ZXh0SW1wbCB7XG4gICAgY29uc3RydWN0b3IoaW5pdGlhbENvbnRleHQpIHtcbiAgICAgICAgdGhpcy5fY29udGV4dE1hcCA9XG4gICAgICAgICAgICBpbml0aWFsQ29udGV4dCBpbnN0YW5jZW9mIFRyYWNpbmdDb250ZXh0SW1wbFxuICAgICAgICAgICAgICAgID8gbmV3IE1hcChpbml0aWFsQ29udGV4dC5fY29udGV4dE1hcClcbiAgICAgICAgICAgICAgICA6IG5ldyBNYXAoKTtcbiAgICB9XG4gICAgc2V0VmFsdWUoa2V5LCB2YWx1ZSkge1xuICAgICAgICBjb25zdCBuZXdDb250ZXh0ID0gbmV3IFRyYWNpbmdDb250ZXh0SW1wbCh0aGlzKTtcbiAgICAgICAgbmV3Q29udGV4dC5fY29udGV4dE1hcC5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgIHJldHVybiBuZXdDb250ZXh0O1xuICAgIH1cbiAgICBnZXRWYWx1ZShrZXkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRleHRNYXAuZ2V0KGtleSk7XG4gICAgfVxuICAgIGRlbGV0ZVZhbHVlKGtleSkge1xuICAgICAgICBjb25zdCBuZXdDb250ZXh0ID0gbmV3IFRyYWNpbmdDb250ZXh0SW1wbCh0aGlzKTtcbiAgICAgICAgbmV3Q29udGV4dC5fY29udGV4dE1hcC5kZWxldGUoa2V5KTtcbiAgICAgICAgcmV0dXJuIG5ld0NvbnRleHQ7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHJhY2luZ0NvbnRleHQuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-tracing/dist/esm/tracingContext.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-util/dist/esm/aborterUtils.js":
/*!****************************************************************!*\
  !*** ./node_modules/@azure/core-util/dist/esm/aborterUtils.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cancelablePromiseRace: () => (/* binding */ cancelablePromiseRace)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * promise.race() wrapper that aborts rest of promises as soon as the first promise settles.\n */\nasync function cancelablePromiseRace(abortablePromiseBuilders, options) {\n    var _a, _b;\n    const aborter = new AbortController();\n    function abortHandler() {\n        aborter.abort();\n    }\n    (_a = options === null || options === void 0 ? void 0 : options.abortSignal) === null || _a === void 0 ? void 0 : _a.addEventListener(\"abort\", abortHandler);\n    try {\n        return await Promise.race(abortablePromiseBuilders.map((p) => p({ abortSignal: aborter.signal })));\n    }\n    finally {\n        aborter.abort();\n        (_b = options === null || options === void 0 ? void 0 : options.abortSignal) === null || _b === void 0 ? void 0 : _b.removeEventListener(\"abort\", abortHandler);\n    }\n}\n//# sourceMappingURL=aborterUtils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdXRpbC9kaXN0L2VzbS9hYm9ydGVyVXRpbHMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEVBQTBFLDZCQUE2QjtBQUN2RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcndpbHNvbi9EZXNrdG9wL3Byb2plY3RzL0VaVml6L25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS11dGlsL2Rpc3QvZXNtL2Fib3J0ZXJVdGlscy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbi8qKlxuICogcHJvbWlzZS5yYWNlKCkgd3JhcHBlciB0aGF0IGFib3J0cyByZXN0IG9mIHByb21pc2VzIGFzIHNvb24gYXMgdGhlIGZpcnN0IHByb21pc2Ugc2V0dGxlcy5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNhbmNlbGFibGVQcm9taXNlUmFjZShhYm9ydGFibGVQcm9taXNlQnVpbGRlcnMsIG9wdGlvbnMpIHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIGNvbnN0IGFib3J0ZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG4gICAgZnVuY3Rpb24gYWJvcnRIYW5kbGVyKCkge1xuICAgICAgICBhYm9ydGVyLmFib3J0KCk7XG4gICAgfVxuICAgIChfYSA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5hYm9ydFNpZ25hbCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBhYm9ydEhhbmRsZXIpO1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBhd2FpdCBQcm9taXNlLnJhY2UoYWJvcnRhYmxlUHJvbWlzZUJ1aWxkZXJzLm1hcCgocCkgPT4gcCh7IGFib3J0U2lnbmFsOiBhYm9ydGVyLnNpZ25hbCB9KSkpO1xuICAgIH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgYWJvcnRlci5hYm9ydCgpO1xuICAgICAgICAoX2IgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuYWJvcnRTaWduYWwpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5yZW1vdmVFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgYWJvcnRIYW5kbGVyKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hYm9ydGVyVXRpbHMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-util/dist/esm/aborterUtils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-util/dist/esm/bytesEncoding.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@azure/core-util/dist/esm/bytesEncoding.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   stringToUint8Array: () => (/* binding */ stringToUint8Array),\n/* harmony export */   uint8ArrayToString: () => (/* binding */ uint8ArrayToString)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * The helper that transforms bytes with specific character encoding into string\n * @param bytes - the uint8array bytes\n * @param format - the format we use to encode the byte\n * @returns a string of the encoded string\n */\nfunction uint8ArrayToString(bytes, format) {\n    return Buffer.from(bytes).toString(format);\n}\n/**\n * The helper that transforms string to specific character encoded bytes array.\n * @param value - the string to be converted\n * @param format - the format we use to decode the value\n * @returns a uint8array\n */\nfunction stringToUint8Array(value, format) {\n    return Buffer.from(value, format);\n}\n//# sourceMappingURL=bytesEncoding.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdXRpbC9kaXN0L2VzbS9ieXRlc0VuY29kaW5nLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvdmljdG9yd2lsc29uL0Rlc2t0b3AvcHJvamVjdHMvRVpWaXovbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXV0aWwvZGlzdC9lc20vYnl0ZXNFbmNvZGluZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbi8qKlxuICogVGhlIGhlbHBlciB0aGF0IHRyYW5zZm9ybXMgYnl0ZXMgd2l0aCBzcGVjaWZpYyBjaGFyYWN0ZXIgZW5jb2RpbmcgaW50byBzdHJpbmdcbiAqIEBwYXJhbSBieXRlcyAtIHRoZSB1aW50OGFycmF5IGJ5dGVzXG4gKiBAcGFyYW0gZm9ybWF0IC0gdGhlIGZvcm1hdCB3ZSB1c2UgdG8gZW5jb2RlIHRoZSBieXRlXG4gKiBAcmV0dXJucyBhIHN0cmluZyBvZiB0aGUgZW5jb2RlZCBzdHJpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVpbnQ4QXJyYXlUb1N0cmluZyhieXRlcywgZm9ybWF0KSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKGJ5dGVzKS50b1N0cmluZyhmb3JtYXQpO1xufVxuLyoqXG4gKiBUaGUgaGVscGVyIHRoYXQgdHJhbnNmb3JtcyBzdHJpbmcgdG8gc3BlY2lmaWMgY2hhcmFjdGVyIGVuY29kZWQgYnl0ZXMgYXJyYXkuXG4gKiBAcGFyYW0gdmFsdWUgLSB0aGUgc3RyaW5nIHRvIGJlIGNvbnZlcnRlZFxuICogQHBhcmFtIGZvcm1hdCAtIHRoZSBmb3JtYXQgd2UgdXNlIHRvIGRlY29kZSB0aGUgdmFsdWVcbiAqIEByZXR1cm5zIGEgdWludDhhcnJheVxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RyaW5nVG9VaW50OEFycmF5KHZhbHVlLCBmb3JtYXQpIHtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20odmFsdWUsIGZvcm1hdCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ieXRlc0VuY29kaW5nLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-util/dist/esm/bytesEncoding.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-util/dist/esm/checkEnvironment.js":
/*!********************************************************************!*\
  !*** ./node_modules/@azure/core-util/dist/esm/checkEnvironment.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isBrowser: () => (/* binding */ isBrowser),\n/* harmony export */   isBun: () => (/* binding */ isBun),\n/* harmony export */   isDeno: () => (/* binding */ isDeno),\n/* harmony export */   isNode: () => (/* binding */ isNode),\n/* harmony export */   isNodeLike: () => (/* binding */ isNodeLike),\n/* harmony export */   isNodeRuntime: () => (/* binding */ isNodeRuntime),\n/* harmony export */   isReactNative: () => (/* binding */ isReactNative),\n/* harmony export */   isWebWorker: () => (/* binding */ isWebWorker)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nvar _a, _b, _c, _d;\n/**\n * A constant that indicates whether the environment the code is running is a Web Browser.\n */\n// eslint-disable-next-line @azure/azure-sdk/ts-no-window\nconst isBrowser = typeof window !== \"undefined\" && typeof window.document !== \"undefined\";\n/**\n * A constant that indicates whether the environment the code is running is a Web Worker.\n */\nconst isWebWorker = typeof self === \"object\" &&\n    typeof (self === null || self === void 0 ? void 0 : self.importScripts) === \"function\" &&\n    (((_a = self.constructor) === null || _a === void 0 ? void 0 : _a.name) === \"DedicatedWorkerGlobalScope\" ||\n        ((_b = self.constructor) === null || _b === void 0 ? void 0 : _b.name) === \"ServiceWorkerGlobalScope\" ||\n        ((_c = self.constructor) === null || _c === void 0 ? void 0 : _c.name) === \"SharedWorkerGlobalScope\");\n/**\n * A constant that indicates whether the environment the code is running is Deno.\n */\nconst isDeno = typeof Deno !== \"undefined\" &&\n    typeof Deno.version !== \"undefined\" &&\n    typeof Deno.version.deno !== \"undefined\";\n/**\n * A constant that indicates whether the environment the code is running is Bun.sh.\n */\nconst isBun = typeof Bun !== \"undefined\" && typeof Bun.version !== \"undefined\";\n/**\n * A constant that indicates whether the environment the code is running is a Node.js compatible environment.\n */\nconst isNodeLike = typeof globalThis.process !== \"undefined\" &&\n    Boolean(globalThis.process.version) &&\n    Boolean((_d = globalThis.process.versions) === null || _d === void 0 ? void 0 : _d.node);\n/**\n * A constant that indicates whether the environment the code is running is a Node.js compatible environment.\n * @deprecated Use `isNodeLike` instead.\n */\nconst isNode = isNodeLike;\n/**\n * A constant that indicates whether the environment the code is running is Node.JS.\n */\nconst isNodeRuntime = isNodeLike && !isBun && !isDeno;\n/**\n * A constant that indicates whether the environment the code is running is in React-Native.\n */\n// https://github.com/facebook/react-native/blob/main/packages/react-native/Libraries/Core/setUpNavigator.js\nconst isReactNative = typeof navigator !== \"undefined\" && (navigator === null || navigator === void 0 ? void 0 : navigator.product) === \"ReactNative\";\n//# sourceMappingURL=checkEnvironment.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdXRpbC9kaXN0L2VzbS9jaGVja0Vudmlyb25tZW50LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcndpbHNvbi9EZXNrdG9wL3Byb2plY3RzL0VaVml6L25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS11dGlsL2Rpc3QvZXNtL2NoZWNrRW52aXJvbm1lbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG52YXIgX2EsIF9iLCBfYywgX2Q7XG4vKipcbiAqIEEgY29uc3RhbnQgdGhhdCBpbmRpY2F0ZXMgd2hldGhlciB0aGUgZW52aXJvbm1lbnQgdGhlIGNvZGUgaXMgcnVubmluZyBpcyBhIFdlYiBCcm93c2VyLlxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQGF6dXJlL2F6dXJlLXNkay90cy1uby13aW5kb3dcbmV4cG9ydCBjb25zdCBpc0Jyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCI7XG4vKipcbiAqIEEgY29uc3RhbnQgdGhhdCBpbmRpY2F0ZXMgd2hldGhlciB0aGUgZW52aXJvbm1lbnQgdGhlIGNvZGUgaXMgcnVubmluZyBpcyBhIFdlYiBXb3JrZXIuXG4gKi9cbmV4cG9ydCBjb25zdCBpc1dlYldvcmtlciA9IHR5cGVvZiBzZWxmID09PSBcIm9iamVjdFwiICYmXG4gICAgdHlwZW9mIChzZWxmID09PSBudWxsIHx8IHNlbGYgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNlbGYuaW1wb3J0U2NyaXB0cykgPT09IFwiZnVuY3Rpb25cIiAmJlxuICAgICgoKF9hID0gc2VsZi5jb25zdHJ1Y3RvcikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm5hbWUpID09PSBcIkRlZGljYXRlZFdvcmtlckdsb2JhbFNjb3BlXCIgfHxcbiAgICAgICAgKChfYiA9IHNlbGYuY29uc3RydWN0b3IpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5uYW1lKSA9PT0gXCJTZXJ2aWNlV29ya2VyR2xvYmFsU2NvcGVcIiB8fFxuICAgICAgICAoKF9jID0gc2VsZi5jb25zdHJ1Y3RvcikgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLm5hbWUpID09PSBcIlNoYXJlZFdvcmtlckdsb2JhbFNjb3BlXCIpO1xuLyoqXG4gKiBBIGNvbnN0YW50IHRoYXQgaW5kaWNhdGVzIHdoZXRoZXIgdGhlIGVudmlyb25tZW50IHRoZSBjb2RlIGlzIHJ1bm5pbmcgaXMgRGVuby5cbiAqL1xuZXhwb3J0IGNvbnN0IGlzRGVubyA9IHR5cGVvZiBEZW5vICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgdHlwZW9mIERlbm8udmVyc2lvbiAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgIHR5cGVvZiBEZW5vLnZlcnNpb24uZGVubyAhPT0gXCJ1bmRlZmluZWRcIjtcbi8qKlxuICogQSBjb25zdGFudCB0aGF0IGluZGljYXRlcyB3aGV0aGVyIHRoZSBlbnZpcm9ubWVudCB0aGUgY29kZSBpcyBydW5uaW5nIGlzIEJ1bi5zaC5cbiAqL1xuZXhwb3J0IGNvbnN0IGlzQnVuID0gdHlwZW9mIEJ1biAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2YgQnVuLnZlcnNpb24gIT09IFwidW5kZWZpbmVkXCI7XG4vKipcbiAqIEEgY29uc3RhbnQgdGhhdCBpbmRpY2F0ZXMgd2hldGhlciB0aGUgZW52aXJvbm1lbnQgdGhlIGNvZGUgaXMgcnVubmluZyBpcyBhIE5vZGUuanMgY29tcGF0aWJsZSBlbnZpcm9ubWVudC5cbiAqL1xuZXhwb3J0IGNvbnN0IGlzTm9kZUxpa2UgPSB0eXBlb2YgZ2xvYmFsVGhpcy5wcm9jZXNzICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgQm9vbGVhbihnbG9iYWxUaGlzLnByb2Nlc3MudmVyc2lvbikgJiZcbiAgICBCb29sZWFuKChfZCA9IGdsb2JhbFRoaXMucHJvY2Vzcy52ZXJzaW9ucykgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLm5vZGUpO1xuLyoqXG4gKiBBIGNvbnN0YW50IHRoYXQgaW5kaWNhdGVzIHdoZXRoZXIgdGhlIGVudmlyb25tZW50IHRoZSBjb2RlIGlzIHJ1bm5pbmcgaXMgYSBOb2RlLmpzIGNvbXBhdGlibGUgZW52aXJvbm1lbnQuXG4gKiBAZGVwcmVjYXRlZCBVc2UgYGlzTm9kZUxpa2VgIGluc3RlYWQuXG4gKi9cbmV4cG9ydCBjb25zdCBpc05vZGUgPSBpc05vZGVMaWtlO1xuLyoqXG4gKiBBIGNvbnN0YW50IHRoYXQgaW5kaWNhdGVzIHdoZXRoZXIgdGhlIGVudmlyb25tZW50IHRoZSBjb2RlIGlzIHJ1bm5pbmcgaXMgTm9kZS5KUy5cbiAqL1xuZXhwb3J0IGNvbnN0IGlzTm9kZVJ1bnRpbWUgPSBpc05vZGVMaWtlICYmICFpc0J1biAmJiAhaXNEZW5vO1xuLyoqXG4gKiBBIGNvbnN0YW50IHRoYXQgaW5kaWNhdGVzIHdoZXRoZXIgdGhlIGVudmlyb25tZW50IHRoZSBjb2RlIGlzIHJ1bm5pbmcgaXMgaW4gUmVhY3QtTmF0aXZlLlxuICovXG4vLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QtbmF0aXZlL2Jsb2IvbWFpbi9wYWNrYWdlcy9yZWFjdC1uYXRpdmUvTGlicmFyaWVzL0NvcmUvc2V0VXBOYXZpZ2F0b3IuanNcbmV4cG9ydCBjb25zdCBpc1JlYWN0TmF0aXZlID0gdHlwZW9mIG5hdmlnYXRvciAhPT0gXCJ1bmRlZmluZWRcIiAmJiAobmF2aWdhdG9yID09PSBudWxsIHx8IG5hdmlnYXRvciA9PT0gdm9pZCAwID8gdm9pZCAwIDogbmF2aWdhdG9yLnByb2R1Y3QpID09PSBcIlJlYWN0TmF0aXZlXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaGVja0Vudmlyb25tZW50LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-util/dist/esm/checkEnvironment.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-util/dist/esm/createAbortablePromise.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@azure/core-util/dist/esm/createAbortablePromise.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createAbortablePromise: () => (/* binding */ createAbortablePromise)\n/* harmony export */ });\n/* harmony import */ var _azure_abort_controller__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/abort-controller */ \"(rsc)/./node_modules/@azure/abort-controller/dist/esm/index.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * Creates an abortable promise.\n * @param buildPromise - A function that takes the resolve and reject functions as parameters.\n * @param options - The options for the abortable promise.\n * @returns A promise that can be aborted.\n */\nfunction createAbortablePromise(buildPromise, options) {\n    const { cleanupBeforeAbort, abortSignal, abortErrorMsg } = options !== null && options !== void 0 ? options : {};\n    return new Promise((resolve, reject) => {\n        function rejectOnAbort() {\n            reject(new _azure_abort_controller__WEBPACK_IMPORTED_MODULE_0__.AbortError(abortErrorMsg !== null && abortErrorMsg !== void 0 ? abortErrorMsg : \"The operation was aborted.\"));\n        }\n        function removeListeners() {\n            abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.removeEventListener(\"abort\", onAbort);\n        }\n        function onAbort() {\n            cleanupBeforeAbort === null || cleanupBeforeAbort === void 0 ? void 0 : cleanupBeforeAbort();\n            removeListeners();\n            rejectOnAbort();\n        }\n        if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {\n            return rejectOnAbort();\n        }\n        try {\n            buildPromise((x) => {\n                removeListeners();\n                resolve(x);\n            }, (x) => {\n                removeListeners();\n                reject(x);\n            });\n        }\n        catch (err) {\n            reject(err);\n        }\n        abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.addEventListener(\"abort\", onAbort);\n    });\n}\n//# sourceMappingURL=createAbortablePromise.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdXRpbC9kaXN0L2VzbS9jcmVhdGVBYm9ydGFibGVQcm9taXNlLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNxRDtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLFlBQVksaURBQWlEO0FBQzdEO0FBQ0E7QUFDQSx1QkFBdUIsK0RBQVU7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWN0b3J3aWxzb24vRGVza3RvcC9wcm9qZWN0cy9FWlZpei9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdXRpbC9kaXN0L2VzbS9jcmVhdGVBYm9ydGFibGVQcm9taXNlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuaW1wb3J0IHsgQWJvcnRFcnJvciB9IGZyb20gXCJAYXp1cmUvYWJvcnQtY29udHJvbGxlclwiO1xuLyoqXG4gKiBDcmVhdGVzIGFuIGFib3J0YWJsZSBwcm9taXNlLlxuICogQHBhcmFtIGJ1aWxkUHJvbWlzZSAtIEEgZnVuY3Rpb24gdGhhdCB0YWtlcyB0aGUgcmVzb2x2ZSBhbmQgcmVqZWN0IGZ1bmN0aW9ucyBhcyBwYXJhbWV0ZXJzLlxuICogQHBhcmFtIG9wdGlvbnMgLSBUaGUgb3B0aW9ucyBmb3IgdGhlIGFib3J0YWJsZSBwcm9taXNlLlxuICogQHJldHVybnMgQSBwcm9taXNlIHRoYXQgY2FuIGJlIGFib3J0ZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVBYm9ydGFibGVQcm9taXNlKGJ1aWxkUHJvbWlzZSwgb3B0aW9ucykge1xuICAgIGNvbnN0IHsgY2xlYW51cEJlZm9yZUFib3J0LCBhYm9ydFNpZ25hbCwgYWJvcnRFcnJvck1zZyB9ID0gb3B0aW9ucyAhPT0gbnVsbCAmJiBvcHRpb25zICE9PSB2b2lkIDAgPyBvcHRpb25zIDoge307XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0T25BYm9ydCgpIHtcbiAgICAgICAgICAgIHJlamVjdChuZXcgQWJvcnRFcnJvcihhYm9ydEVycm9yTXNnICE9PSBudWxsICYmIGFib3J0RXJyb3JNc2cgIT09IHZvaWQgMCA/IGFib3J0RXJyb3JNc2cgOiBcIlRoZSBvcGVyYXRpb24gd2FzIGFib3J0ZWQuXCIpKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lcnMoKSB7XG4gICAgICAgICAgICBhYm9ydFNpZ25hbCA9PT0gbnVsbCB8fCBhYm9ydFNpZ25hbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogYWJvcnRTaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIG9uQWJvcnQpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIG9uQWJvcnQoKSB7XG4gICAgICAgICAgICBjbGVhbnVwQmVmb3JlQWJvcnQgPT09IG51bGwgfHwgY2xlYW51cEJlZm9yZUFib3J0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjbGVhbnVwQmVmb3JlQWJvcnQoKTtcbiAgICAgICAgICAgIHJlbW92ZUxpc3RlbmVycygpO1xuICAgICAgICAgICAgcmVqZWN0T25BYm9ydCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhYm9ydFNpZ25hbCA9PT0gbnVsbCB8fCBhYm9ydFNpZ25hbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogYWJvcnRTaWduYWwuYWJvcnRlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlamVjdE9uQWJvcnQoKTtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYnVpbGRQcm9taXNlKCh4KSA9PiB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlTGlzdGVuZXJzKCk7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSh4KTtcbiAgICAgICAgICAgIH0sICh4KSA9PiB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlTGlzdGVuZXJzKCk7XG4gICAgICAgICAgICAgICAgcmVqZWN0KHgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIH1cbiAgICAgICAgYWJvcnRTaWduYWwgPT09IG51bGwgfHwgYWJvcnRTaWduYWwgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGFib3J0U2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBvbkFib3J0KTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyZWF0ZUFib3J0YWJsZVByb21pc2UuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-util/dist/esm/createAbortablePromise.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-util/dist/esm/delay.js":
/*!*********************************************************!*\
  !*** ./node_modules/@azure/core-util/dist/esm/delay.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calculateRetryDelay: () => (/* binding */ calculateRetryDelay),\n/* harmony export */   delay: () => (/* binding */ delay)\n/* harmony export */ });\n/* harmony import */ var _createAbortablePromise_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./createAbortablePromise.js */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/createAbortablePromise.js\");\n/* harmony import */ var _random_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./random.js */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/random.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\nconst StandardAbortMessage = \"The delay was aborted.\";\n/**\n * A wrapper for setTimeout that resolves a promise after timeInMs milliseconds.\n * @param timeInMs - The number of milliseconds to be delayed.\n * @param options - The options for delay - currently abort options\n * @returns Promise that is resolved after timeInMs\n */\nfunction delay(timeInMs, options) {\n    let token;\n    const { abortSignal, abortErrorMsg } = options !== null && options !== void 0 ? options : {};\n    return (0,_createAbortablePromise_js__WEBPACK_IMPORTED_MODULE_0__.createAbortablePromise)((resolve) => {\n        token = setTimeout(resolve, timeInMs);\n    }, {\n        cleanupBeforeAbort: () => clearTimeout(token),\n        abortSignal,\n        abortErrorMsg: abortErrorMsg !== null && abortErrorMsg !== void 0 ? abortErrorMsg : StandardAbortMessage,\n    });\n}\n/**\n * Calculates the delay interval for retry attempts using exponential delay with jitter.\n * @param retryAttempt - The current retry attempt number.\n * @param config - The exponential retry configuration.\n * @returns An object containing the calculated retry delay.\n */\nfunction calculateRetryDelay(retryAttempt, config) {\n    // Exponentially increase the delay each time\n    const exponentialDelay = config.retryDelayInMs * Math.pow(2, retryAttempt);\n    // Don't let the delay exceed the maximum\n    const clampedDelay = Math.min(config.maxRetryDelayInMs, exponentialDelay);\n    // Allow the final value to have some \"jitter\" (within 50% of the delay size) so\n    // that retries across multiple clients don't occur simultaneously.\n    const retryAfterInMs = clampedDelay / 2 + (0,_random_js__WEBPACK_IMPORTED_MODULE_1__.getRandomIntegerInclusive)(0, clampedDelay / 2);\n    return { retryAfterInMs };\n}\n//# sourceMappingURL=delay.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdXRpbC9kaXN0L2VzbS9kZWxheS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQTtBQUNxRTtBQUNiO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLFlBQVksNkJBQTZCO0FBQ3pDLFdBQVcsa0ZBQXNCO0FBQ2pDO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLHFFQUF5QjtBQUN2RSxhQUFhO0FBQ2I7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcndpbHNvbi9EZXNrdG9wL3Byb2plY3RzL0VaVml6L25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS11dGlsL2Rpc3QvZXNtL2RlbGF5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuaW1wb3J0IHsgY3JlYXRlQWJvcnRhYmxlUHJvbWlzZSB9IGZyb20gXCIuL2NyZWF0ZUFib3J0YWJsZVByb21pc2UuanNcIjtcbmltcG9ydCB7IGdldFJhbmRvbUludGVnZXJJbmNsdXNpdmUgfSBmcm9tIFwiLi9yYW5kb20uanNcIjtcbmNvbnN0IFN0YW5kYXJkQWJvcnRNZXNzYWdlID0gXCJUaGUgZGVsYXkgd2FzIGFib3J0ZWQuXCI7XG4vKipcbiAqIEEgd3JhcHBlciBmb3Igc2V0VGltZW91dCB0aGF0IHJlc29sdmVzIGEgcHJvbWlzZSBhZnRlciB0aW1lSW5NcyBtaWxsaXNlY29uZHMuXG4gKiBAcGFyYW0gdGltZUluTXMgLSBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBiZSBkZWxheWVkLlxuICogQHBhcmFtIG9wdGlvbnMgLSBUaGUgb3B0aW9ucyBmb3IgZGVsYXkgLSBjdXJyZW50bHkgYWJvcnQgb3B0aW9uc1xuICogQHJldHVybnMgUHJvbWlzZSB0aGF0IGlzIHJlc29sdmVkIGFmdGVyIHRpbWVJbk1zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWxheSh0aW1lSW5Ncywgb3B0aW9ucykge1xuICAgIGxldCB0b2tlbjtcbiAgICBjb25zdCB7IGFib3J0U2lnbmFsLCBhYm9ydEVycm9yTXNnIH0gPSBvcHRpb25zICE9PSBudWxsICYmIG9wdGlvbnMgIT09IHZvaWQgMCA/IG9wdGlvbnMgOiB7fTtcbiAgICByZXR1cm4gY3JlYXRlQWJvcnRhYmxlUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICB0b2tlbiA9IHNldFRpbWVvdXQocmVzb2x2ZSwgdGltZUluTXMpO1xuICAgIH0sIHtcbiAgICAgICAgY2xlYW51cEJlZm9yZUFib3J0OiAoKSA9PiBjbGVhclRpbWVvdXQodG9rZW4pLFxuICAgICAgICBhYm9ydFNpZ25hbCxcbiAgICAgICAgYWJvcnRFcnJvck1zZzogYWJvcnRFcnJvck1zZyAhPT0gbnVsbCAmJiBhYm9ydEVycm9yTXNnICE9PSB2b2lkIDAgPyBhYm9ydEVycm9yTXNnIDogU3RhbmRhcmRBYm9ydE1lc3NhZ2UsXG4gICAgfSk7XG59XG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGRlbGF5IGludGVydmFsIGZvciByZXRyeSBhdHRlbXB0cyB1c2luZyBleHBvbmVudGlhbCBkZWxheSB3aXRoIGppdHRlci5cbiAqIEBwYXJhbSByZXRyeUF0dGVtcHQgLSBUaGUgY3VycmVudCByZXRyeSBhdHRlbXB0IG51bWJlci5cbiAqIEBwYXJhbSBjb25maWcgLSBUaGUgZXhwb25lbnRpYWwgcmV0cnkgY29uZmlndXJhdGlvbi5cbiAqIEByZXR1cm5zIEFuIG9iamVjdCBjb250YWluaW5nIHRoZSBjYWxjdWxhdGVkIHJldHJ5IGRlbGF5LlxuICovXG5leHBvcnQgZnVuY3Rpb24gY2FsY3VsYXRlUmV0cnlEZWxheShyZXRyeUF0dGVtcHQsIGNvbmZpZykge1xuICAgIC8vIEV4cG9uZW50aWFsbHkgaW5jcmVhc2UgdGhlIGRlbGF5IGVhY2ggdGltZVxuICAgIGNvbnN0IGV4cG9uZW50aWFsRGVsYXkgPSBjb25maWcucmV0cnlEZWxheUluTXMgKiBNYXRoLnBvdygyLCByZXRyeUF0dGVtcHQpO1xuICAgIC8vIERvbid0IGxldCB0aGUgZGVsYXkgZXhjZWVkIHRoZSBtYXhpbXVtXG4gICAgY29uc3QgY2xhbXBlZERlbGF5ID0gTWF0aC5taW4oY29uZmlnLm1heFJldHJ5RGVsYXlJbk1zLCBleHBvbmVudGlhbERlbGF5KTtcbiAgICAvLyBBbGxvdyB0aGUgZmluYWwgdmFsdWUgdG8gaGF2ZSBzb21lIFwiaml0dGVyXCIgKHdpdGhpbiA1MCUgb2YgdGhlIGRlbGF5IHNpemUpIHNvXG4gICAgLy8gdGhhdCByZXRyaWVzIGFjcm9zcyBtdWx0aXBsZSBjbGllbnRzIGRvbid0IG9jY3VyIHNpbXVsdGFuZW91c2x5LlxuICAgIGNvbnN0IHJldHJ5QWZ0ZXJJbk1zID0gY2xhbXBlZERlbGF5IC8gMiArIGdldFJhbmRvbUludGVnZXJJbmNsdXNpdmUoMCwgY2xhbXBlZERlbGF5IC8gMik7XG4gICAgcmV0dXJuIHsgcmV0cnlBZnRlckluTXMgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlbGF5LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-util/dist/esm/delay.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-util/dist/esm/error.js":
/*!*********************************************************!*\
  !*** ./node_modules/@azure/core-util/dist/esm/error.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getErrorMessage: () => (/* binding */ getErrorMessage),\n/* harmony export */   isError: () => (/* binding */ isError)\n/* harmony export */ });\n/* harmony import */ var _object_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./object.js */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/object.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * Typeguard for an error object shape (has name and message)\n * @param e - Something caught by a catch clause.\n */\nfunction isError(e) {\n    if ((0,_object_js__WEBPACK_IMPORTED_MODULE_0__.isObject)(e)) {\n        const hasName = typeof e.name === \"string\";\n        const hasMessage = typeof e.message === \"string\";\n        return hasName && hasMessage;\n    }\n    return false;\n}\n/**\n * Given what is thought to be an error object, return the message if possible.\n * If the message is missing, returns a stringified version of the input.\n * @param e - Something thrown from a try block\n * @returns The error message or a string of the input\n */\nfunction getErrorMessage(e) {\n    if (isError(e)) {\n        return e.message;\n    }\n    else {\n        let stringified;\n        try {\n            if (typeof e === \"object\" && e) {\n                stringified = JSON.stringify(e);\n            }\n            else {\n                stringified = String(e);\n            }\n        }\n        catch (err) {\n            stringified = \"[unable to stringify input]\";\n        }\n        return `Unknown error ${stringified}`;\n    }\n}\n//# sourceMappingURL=error.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdXRpbC9kaXN0L2VzbS9lcnJvci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ3VDO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxRQUFRLG9EQUFRO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsWUFBWTtBQUM1QztBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWN0b3J3aWxzb24vRGVza3RvcC9wcm9qZWN0cy9FWlZpei9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdXRpbC9kaXN0L2VzbS9lcnJvci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbmltcG9ydCB7IGlzT2JqZWN0IH0gZnJvbSBcIi4vb2JqZWN0LmpzXCI7XG4vKipcbiAqIFR5cGVndWFyZCBmb3IgYW4gZXJyb3Igb2JqZWN0IHNoYXBlIChoYXMgbmFtZSBhbmQgbWVzc2FnZSlcbiAqIEBwYXJhbSBlIC0gU29tZXRoaW5nIGNhdWdodCBieSBhIGNhdGNoIGNsYXVzZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzRXJyb3IoZSkge1xuICAgIGlmIChpc09iamVjdChlKSkge1xuICAgICAgICBjb25zdCBoYXNOYW1lID0gdHlwZW9mIGUubmFtZSA9PT0gXCJzdHJpbmdcIjtcbiAgICAgICAgY29uc3QgaGFzTWVzc2FnZSA9IHR5cGVvZiBlLm1lc3NhZ2UgPT09IFwic3RyaW5nXCI7XG4gICAgICAgIHJldHVybiBoYXNOYW1lICYmIGhhc01lc3NhZ2U7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbi8qKlxuICogR2l2ZW4gd2hhdCBpcyB0aG91Z2h0IHRvIGJlIGFuIGVycm9yIG9iamVjdCwgcmV0dXJuIHRoZSBtZXNzYWdlIGlmIHBvc3NpYmxlLlxuICogSWYgdGhlIG1lc3NhZ2UgaXMgbWlzc2luZywgcmV0dXJucyBhIHN0cmluZ2lmaWVkIHZlcnNpb24gb2YgdGhlIGlucHV0LlxuICogQHBhcmFtIGUgLSBTb21ldGhpbmcgdGhyb3duIGZyb20gYSB0cnkgYmxvY2tcbiAqIEByZXR1cm5zIFRoZSBlcnJvciBtZXNzYWdlIG9yIGEgc3RyaW5nIG9mIHRoZSBpbnB1dFxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0RXJyb3JNZXNzYWdlKGUpIHtcbiAgICBpZiAoaXNFcnJvcihlKSkge1xuICAgICAgICByZXR1cm4gZS5tZXNzYWdlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbGV0IHN0cmluZ2lmaWVkO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBlID09PSBcIm9iamVjdFwiICYmIGUpIHtcbiAgICAgICAgICAgICAgICBzdHJpbmdpZmllZCA9IEpTT04uc3RyaW5naWZ5KGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc3RyaW5naWZpZWQgPSBTdHJpbmcoZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgc3RyaW5naWZpZWQgPSBcIlt1bmFibGUgdG8gc3RyaW5naWZ5IGlucHV0XVwiO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBgVW5rbm93biBlcnJvciAke3N0cmluZ2lmaWVkfWA7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXJyb3IuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-util/dist/esm/error.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-util/dist/esm/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@azure/core-util/dist/esm/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calculateRetryDelay: () => (/* reexport safe */ _delay_js__WEBPACK_IMPORTED_MODULE_0__.calculateRetryDelay),\n/* harmony export */   cancelablePromiseRace: () => (/* reexport safe */ _aborterUtils_js__WEBPACK_IMPORTED_MODULE_1__.cancelablePromiseRace),\n/* harmony export */   computeSha256Hash: () => (/* reexport safe */ _sha256_js__WEBPACK_IMPORTED_MODULE_6__.computeSha256Hash),\n/* harmony export */   computeSha256Hmac: () => (/* reexport safe */ _sha256_js__WEBPACK_IMPORTED_MODULE_6__.computeSha256Hmac),\n/* harmony export */   createAbortablePromise: () => (/* reexport safe */ _createAbortablePromise_js__WEBPACK_IMPORTED_MODULE_2__.createAbortablePromise),\n/* harmony export */   delay: () => (/* reexport safe */ _delay_js__WEBPACK_IMPORTED_MODULE_0__.delay),\n/* harmony export */   getErrorMessage: () => (/* reexport safe */ _error_js__WEBPACK_IMPORTED_MODULE_5__.getErrorMessage),\n/* harmony export */   getRandomIntegerInclusive: () => (/* reexport safe */ _random_js__WEBPACK_IMPORTED_MODULE_3__.getRandomIntegerInclusive),\n/* harmony export */   isBrowser: () => (/* reexport safe */ _checkEnvironment_js__WEBPACK_IMPORTED_MODULE_9__.isBrowser),\n/* harmony export */   isBun: () => (/* reexport safe */ _checkEnvironment_js__WEBPACK_IMPORTED_MODULE_9__.isBun),\n/* harmony export */   isDefined: () => (/* reexport safe */ _typeGuards_js__WEBPACK_IMPORTED_MODULE_7__.isDefined),\n/* harmony export */   isDeno: () => (/* reexport safe */ _checkEnvironment_js__WEBPACK_IMPORTED_MODULE_9__.isDeno),\n/* harmony export */   isError: () => (/* reexport safe */ _error_js__WEBPACK_IMPORTED_MODULE_5__.isError),\n/* harmony export */   isNode: () => (/* reexport safe */ _checkEnvironment_js__WEBPACK_IMPORTED_MODULE_9__.isNode),\n/* harmony export */   isNodeLike: () => (/* reexport safe */ _checkEnvironment_js__WEBPACK_IMPORTED_MODULE_9__.isNodeLike),\n/* harmony export */   isNodeRuntime: () => (/* reexport safe */ _checkEnvironment_js__WEBPACK_IMPORTED_MODULE_9__.isNodeRuntime),\n/* harmony export */   isObject: () => (/* reexport safe */ _object_js__WEBPACK_IMPORTED_MODULE_4__.isObject),\n/* harmony export */   isObjectWithProperties: () => (/* reexport safe */ _typeGuards_js__WEBPACK_IMPORTED_MODULE_7__.isObjectWithProperties),\n/* harmony export */   isReactNative: () => (/* reexport safe */ _checkEnvironment_js__WEBPACK_IMPORTED_MODULE_9__.isReactNative),\n/* harmony export */   isWebWorker: () => (/* reexport safe */ _checkEnvironment_js__WEBPACK_IMPORTED_MODULE_9__.isWebWorker),\n/* harmony export */   objectHasProperty: () => (/* reexport safe */ _typeGuards_js__WEBPACK_IMPORTED_MODULE_7__.objectHasProperty),\n/* harmony export */   randomUUID: () => (/* reexport safe */ _uuidUtils_js__WEBPACK_IMPORTED_MODULE_8__.randomUUID),\n/* harmony export */   stringToUint8Array: () => (/* reexport safe */ _bytesEncoding_js__WEBPACK_IMPORTED_MODULE_10__.stringToUint8Array),\n/* harmony export */   uint8ArrayToString: () => (/* reexport safe */ _bytesEncoding_js__WEBPACK_IMPORTED_MODULE_10__.uint8ArrayToString)\n/* harmony export */ });\n/* harmony import */ var _delay_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./delay.js */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/delay.js\");\n/* harmony import */ var _aborterUtils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./aborterUtils.js */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/aborterUtils.js\");\n/* harmony import */ var _createAbortablePromise_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./createAbortablePromise.js */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/createAbortablePromise.js\");\n/* harmony import */ var _random_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./random.js */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/random.js\");\n/* harmony import */ var _object_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./object.js */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/object.js\");\n/* harmony import */ var _error_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./error.js */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/error.js\");\n/* harmony import */ var _sha256_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./sha256.js */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/sha256.js\");\n/* harmony import */ var _typeGuards_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./typeGuards.js */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/typeGuards.js\");\n/* harmony import */ var _uuidUtils_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./uuidUtils.js */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/uuidUtils.js\");\n/* harmony import */ var _checkEnvironment_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./checkEnvironment.js */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/checkEnvironment.js\");\n/* harmony import */ var _bytesEncoding_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./bytesEncoding.js */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/bytesEncoding.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n\n\n\n\n\n\n\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdXRpbC9kaXN0L2VzbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDd0Q7QUFDRztBQUNXO0FBQ2Q7QUFDakI7QUFDZTtBQUNhO0FBQ29CO0FBQzNDO0FBQ3FGO0FBQ3JEO0FBQzVFIiwic291cmNlcyI6WyIvVXNlcnMvdmljdG9yd2lsc29uL0Rlc2t0b3AvcHJvamVjdHMvRVpWaXovbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXV0aWwvZGlzdC9lc20vaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5leHBvcnQgeyBkZWxheSwgY2FsY3VsYXRlUmV0cnlEZWxheSB9IGZyb20gXCIuL2RlbGF5LmpzXCI7XG5leHBvcnQgeyBjYW5jZWxhYmxlUHJvbWlzZVJhY2UsIH0gZnJvbSBcIi4vYWJvcnRlclV0aWxzLmpzXCI7XG5leHBvcnQgeyBjcmVhdGVBYm9ydGFibGVQcm9taXNlLCB9IGZyb20gXCIuL2NyZWF0ZUFib3J0YWJsZVByb21pc2UuanNcIjtcbmV4cG9ydCB7IGdldFJhbmRvbUludGVnZXJJbmNsdXNpdmUgfSBmcm9tIFwiLi9yYW5kb20uanNcIjtcbmV4cG9ydCB7IGlzT2JqZWN0IH0gZnJvbSBcIi4vb2JqZWN0LmpzXCI7XG5leHBvcnQgeyBpc0Vycm9yLCBnZXRFcnJvck1lc3NhZ2UgfSBmcm9tIFwiLi9lcnJvci5qc1wiO1xuZXhwb3J0IHsgY29tcHV0ZVNoYTI1Nkhhc2gsIGNvbXB1dGVTaGEyNTZIbWFjIH0gZnJvbSBcIi4vc2hhMjU2LmpzXCI7XG5leHBvcnQgeyBpc0RlZmluZWQsIGlzT2JqZWN0V2l0aFByb3BlcnRpZXMsIG9iamVjdEhhc1Byb3BlcnR5IH0gZnJvbSBcIi4vdHlwZUd1YXJkcy5qc1wiO1xuZXhwb3J0IHsgcmFuZG9tVVVJRCB9IGZyb20gXCIuL3V1aWRVdGlscy5qc1wiO1xuZXhwb3J0IHsgaXNCcm93c2VyLCBpc0J1biwgaXNOb2RlLCBpc05vZGVMaWtlLCBpc05vZGVSdW50aW1lLCBpc0Rlbm8sIGlzUmVhY3ROYXRpdmUsIGlzV2ViV29ya2VyLCB9IGZyb20gXCIuL2NoZWNrRW52aXJvbm1lbnQuanNcIjtcbmV4cG9ydCB7IHVpbnQ4QXJyYXlUb1N0cmluZywgc3RyaW5nVG9VaW50OEFycmF5IH0gZnJvbSBcIi4vYnl0ZXNFbmNvZGluZy5qc1wiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-util/dist/esm/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-util/dist/esm/object.js":
/*!**********************************************************!*\
  !*** ./node_modules/@azure/core-util/dist/esm/object.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isObject: () => (/* binding */ isObject)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * Helper to determine when an input is a generic JS object.\n * @returns true when input is an object type that is not null, Array, RegExp, or Date.\n */\nfunction isObject(input) {\n    return (typeof input === \"object\" &&\n        input !== null &&\n        !Array.isArray(input) &&\n        !(input instanceof RegExp) &&\n        !(input instanceof Date));\n}\n//# sourceMappingURL=object.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdXRpbC9kaXN0L2VzbS9vYmplY3QuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWN0b3J3aWxzb24vRGVza3RvcC9wcm9qZWN0cy9FWlZpei9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdXRpbC9kaXN0L2VzbS9vYmplY3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4vKipcbiAqIEhlbHBlciB0byBkZXRlcm1pbmUgd2hlbiBhbiBpbnB1dCBpcyBhIGdlbmVyaWMgSlMgb2JqZWN0LlxuICogQHJldHVybnMgdHJ1ZSB3aGVuIGlucHV0IGlzIGFuIG9iamVjdCB0eXBlIHRoYXQgaXMgbm90IG51bGwsIEFycmF5LCBSZWdFeHAsIG9yIERhdGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc09iamVjdChpbnB1dCkge1xuICAgIHJldHVybiAodHlwZW9mIGlucHV0ID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgIGlucHV0ICE9PSBudWxsICYmXG4gICAgICAgICFBcnJheS5pc0FycmF5KGlucHV0KSAmJlxuICAgICAgICAhKGlucHV0IGluc3RhbmNlb2YgUmVnRXhwKSAmJlxuICAgICAgICAhKGlucHV0IGluc3RhbmNlb2YgRGF0ZSkpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b2JqZWN0LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-util/dist/esm/object.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-util/dist/esm/random.js":
/*!**********************************************************!*\
  !*** ./node_modules/@azure/core-util/dist/esm/random.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getRandomIntegerInclusive: () => (/* binding */ getRandomIntegerInclusive)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * Returns a random integer value between a lower and upper bound,\n * inclusive of both bounds.\n * Note that this uses Math.random and isn't secure. If you need to use\n * this for any kind of security purpose, find a better source of random.\n * @param min - The smallest integer value allowed.\n * @param max - The largest integer value allowed.\n */\nfunction getRandomIntegerInclusive(min, max) {\n    // Make sure inputs are integers.\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    // Pick a random offset from zero to the size of the range.\n    // Since Math.random() can never return 1, we have to make the range one larger\n    // in order to be inclusive of the maximum value after we take the floor.\n    const offset = Math.floor(Math.random() * (max - min + 1));\n    return offset + min;\n}\n//# sourceMappingURL=random.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdXRpbC9kaXN0L2VzbS9yYW5kb20uanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcndpbHNvbi9EZXNrdG9wL3Byb2plY3RzL0VaVml6L25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS11dGlsL2Rpc3QvZXNtL3JhbmRvbS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbi8qKlxuICogUmV0dXJucyBhIHJhbmRvbSBpbnRlZ2VyIHZhbHVlIGJldHdlZW4gYSBsb3dlciBhbmQgdXBwZXIgYm91bmQsXG4gKiBpbmNsdXNpdmUgb2YgYm90aCBib3VuZHMuXG4gKiBOb3RlIHRoYXQgdGhpcyB1c2VzIE1hdGgucmFuZG9tIGFuZCBpc24ndCBzZWN1cmUuIElmIHlvdSBuZWVkIHRvIHVzZVxuICogdGhpcyBmb3IgYW55IGtpbmQgb2Ygc2VjdXJpdHkgcHVycG9zZSwgZmluZCBhIGJldHRlciBzb3VyY2Ugb2YgcmFuZG9tLlxuICogQHBhcmFtIG1pbiAtIFRoZSBzbWFsbGVzdCBpbnRlZ2VyIHZhbHVlIGFsbG93ZWQuXG4gKiBAcGFyYW0gbWF4IC0gVGhlIGxhcmdlc3QgaW50ZWdlciB2YWx1ZSBhbGxvd2VkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0UmFuZG9tSW50ZWdlckluY2x1c2l2ZShtaW4sIG1heCkge1xuICAgIC8vIE1ha2Ugc3VyZSBpbnB1dHMgYXJlIGludGVnZXJzLlxuICAgIG1pbiA9IE1hdGguY2VpbChtaW4pO1xuICAgIG1heCA9IE1hdGguZmxvb3IobWF4KTtcbiAgICAvLyBQaWNrIGEgcmFuZG9tIG9mZnNldCBmcm9tIHplcm8gdG8gdGhlIHNpemUgb2YgdGhlIHJhbmdlLlxuICAgIC8vIFNpbmNlIE1hdGgucmFuZG9tKCkgY2FuIG5ldmVyIHJldHVybiAxLCB3ZSBoYXZlIHRvIG1ha2UgdGhlIHJhbmdlIG9uZSBsYXJnZXJcbiAgICAvLyBpbiBvcmRlciB0byBiZSBpbmNsdXNpdmUgb2YgdGhlIG1heGltdW0gdmFsdWUgYWZ0ZXIgd2UgdGFrZSB0aGUgZmxvb3IuXG4gICAgY29uc3Qgb2Zmc2V0ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbiArIDEpKTtcbiAgICByZXR1cm4gb2Zmc2V0ICsgbWluO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmFuZG9tLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-util/dist/esm/random.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-util/dist/esm/sha256.js":
/*!**********************************************************!*\
  !*** ./node_modules/@azure/core-util/dist/esm/sha256.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   computeSha256Hash: () => (/* binding */ computeSha256Hash),\n/* harmony export */   computeSha256Hmac: () => (/* binding */ computeSha256Hmac)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * Generates a SHA-256 HMAC signature.\n * @param key - The HMAC key represented as a base64 string, used to generate the cryptographic HMAC hash.\n * @param stringToSign - The data to be signed.\n * @param encoding - The textual encoding to use for the returned HMAC digest.\n */\nasync function computeSha256Hmac(key, stringToSign, encoding) {\n    const decodedKey = Buffer.from(key, \"base64\");\n    return (0,crypto__WEBPACK_IMPORTED_MODULE_0__.createHmac)(\"sha256\", decodedKey).update(stringToSign).digest(encoding);\n}\n/**\n * Generates a SHA-256 hash.\n * @param content - The data to be included in the hash.\n * @param encoding - The textual encoding to use for the returned hash.\n */\nasync function computeSha256Hash(content, encoding) {\n    return (0,crypto__WEBPACK_IMPORTED_MODULE_0__.createHash)(\"sha256\").update(content).digest(encoding);\n}\n//# sourceMappingURL=sha256.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdXRpbC9kaXN0L2VzbS9zaGEyNTYuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNnRDtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0EsV0FBVyxrREFBVTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLFdBQVcsa0RBQVU7QUFDckI7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcndpbHNvbi9EZXNrdG9wL3Byb2plY3RzL0VaVml6L25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS11dGlsL2Rpc3QvZXNtL3NoYTI1Ni5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbmltcG9ydCB7IGNyZWF0ZUhhc2gsIGNyZWF0ZUhtYWMgfSBmcm9tIFwiY3J5cHRvXCI7XG4vKipcbiAqIEdlbmVyYXRlcyBhIFNIQS0yNTYgSE1BQyBzaWduYXR1cmUuXG4gKiBAcGFyYW0ga2V5IC0gVGhlIEhNQUMga2V5IHJlcHJlc2VudGVkIGFzIGEgYmFzZTY0IHN0cmluZywgdXNlZCB0byBnZW5lcmF0ZSB0aGUgY3J5cHRvZ3JhcGhpYyBITUFDIGhhc2guXG4gKiBAcGFyYW0gc3RyaW5nVG9TaWduIC0gVGhlIGRhdGEgdG8gYmUgc2lnbmVkLlxuICogQHBhcmFtIGVuY29kaW5nIC0gVGhlIHRleHR1YWwgZW5jb2RpbmcgdG8gdXNlIGZvciB0aGUgcmV0dXJuZWQgSE1BQyBkaWdlc3QuXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjb21wdXRlU2hhMjU2SG1hYyhrZXksIHN0cmluZ1RvU2lnbiwgZW5jb2RpbmcpIHtcbiAgICBjb25zdCBkZWNvZGVkS2V5ID0gQnVmZmVyLmZyb20oa2V5LCBcImJhc2U2NFwiKTtcbiAgICByZXR1cm4gY3JlYXRlSG1hYyhcInNoYTI1NlwiLCBkZWNvZGVkS2V5KS51cGRhdGUoc3RyaW5nVG9TaWduKS5kaWdlc3QoZW5jb2RpbmcpO1xufVxuLyoqXG4gKiBHZW5lcmF0ZXMgYSBTSEEtMjU2IGhhc2guXG4gKiBAcGFyYW0gY29udGVudCAtIFRoZSBkYXRhIHRvIGJlIGluY2x1ZGVkIGluIHRoZSBoYXNoLlxuICogQHBhcmFtIGVuY29kaW5nIC0gVGhlIHRleHR1YWwgZW5jb2RpbmcgdG8gdXNlIGZvciB0aGUgcmV0dXJuZWQgaGFzaC5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNvbXB1dGVTaGEyNTZIYXNoKGNvbnRlbnQsIGVuY29kaW5nKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhhc2goXCJzaGEyNTZcIikudXBkYXRlKGNvbnRlbnQpLmRpZ2VzdChlbmNvZGluZyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zaGEyNTYuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-util/dist/esm/sha256.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-util/dist/esm/typeGuards.js":
/*!**************************************************************!*\
  !*** ./node_modules/@azure/core-util/dist/esm/typeGuards.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isDefined: () => (/* binding */ isDefined),\n/* harmony export */   isObjectWithProperties: () => (/* binding */ isObjectWithProperties),\n/* harmony export */   objectHasProperty: () => (/* binding */ objectHasProperty)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * Helper TypeGuard that checks if something is defined or not.\n * @param thing - Anything\n */\nfunction isDefined(thing) {\n    return typeof thing !== \"undefined\" && thing !== null;\n}\n/**\n * Helper TypeGuard that checks if the input is an object with the specified properties.\n * @param thing - Anything.\n * @param properties - The name of the properties that should appear in the object.\n */\nfunction isObjectWithProperties(thing, properties) {\n    if (!isDefined(thing) || typeof thing !== \"object\") {\n        return false;\n    }\n    for (const property of properties) {\n        if (!objectHasProperty(thing, property)) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Helper TypeGuard that checks if the input is an object with the specified property.\n * @param thing - Any object.\n * @param property - The name of the property that should appear in the object.\n */\nfunction objectHasProperty(thing, property) {\n    return (isDefined(thing) && typeof thing === \"object\" && property in thing);\n}\n//# sourceMappingURL=typeGuards.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdXRpbC9kaXN0L2VzbS90eXBlR3VhcmRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvdmljdG9yd2lsc29uL0Rlc2t0b3AvcHJvamVjdHMvRVpWaXovbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXV0aWwvZGlzdC9lc20vdHlwZUd1YXJkcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbi8qKlxuICogSGVscGVyIFR5cGVHdWFyZCB0aGF0IGNoZWNrcyBpZiBzb21ldGhpbmcgaXMgZGVmaW5lZCBvciBub3QuXG4gKiBAcGFyYW0gdGhpbmcgLSBBbnl0aGluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gaXNEZWZpbmVkKHRoaW5nKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0aGluZyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0aGluZyAhPT0gbnVsbDtcbn1cbi8qKlxuICogSGVscGVyIFR5cGVHdWFyZCB0aGF0IGNoZWNrcyBpZiB0aGUgaW5wdXQgaXMgYW4gb2JqZWN0IHdpdGggdGhlIHNwZWNpZmllZCBwcm9wZXJ0aWVzLlxuICogQHBhcmFtIHRoaW5nIC0gQW55dGhpbmcuXG4gKiBAcGFyYW0gcHJvcGVydGllcyAtIFRoZSBuYW1lIG9mIHRoZSBwcm9wZXJ0aWVzIHRoYXQgc2hvdWxkIGFwcGVhciBpbiB0aGUgb2JqZWN0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNPYmplY3RXaXRoUHJvcGVydGllcyh0aGluZywgcHJvcGVydGllcykge1xuICAgIGlmICghaXNEZWZpbmVkKHRoaW5nKSB8fCB0eXBlb2YgdGhpbmcgIT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IHByb3BlcnR5IG9mIHByb3BlcnRpZXMpIHtcbiAgICAgICAgaWYgKCFvYmplY3RIYXNQcm9wZXJ0eSh0aGluZywgcHJvcGVydHkpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG4vKipcbiAqIEhlbHBlciBUeXBlR3VhcmQgdGhhdCBjaGVja3MgaWYgdGhlIGlucHV0IGlzIGFuIG9iamVjdCB3aXRoIHRoZSBzcGVjaWZpZWQgcHJvcGVydHkuXG4gKiBAcGFyYW0gdGhpbmcgLSBBbnkgb2JqZWN0LlxuICogQHBhcmFtIHByb3BlcnR5IC0gVGhlIG5hbWUgb2YgdGhlIHByb3BlcnR5IHRoYXQgc2hvdWxkIGFwcGVhciBpbiB0aGUgb2JqZWN0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gb2JqZWN0SGFzUHJvcGVydHkodGhpbmcsIHByb3BlcnR5KSB7XG4gICAgcmV0dXJuIChpc0RlZmluZWQodGhpbmcpICYmIHR5cGVvZiB0aGluZyA9PT0gXCJvYmplY3RcIiAmJiBwcm9wZXJ0eSBpbiB0aGluZyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10eXBlR3VhcmRzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-util/dist/esm/typeGuards.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-util/dist/esm/uuidUtils.js":
/*!*************************************************************!*\
  !*** ./node_modules/@azure/core-util/dist/esm/uuidUtils.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   randomUUID: () => (/* binding */ randomUUID)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nvar _a;\n\n// NOTE: This is a workaround until we can use `globalThis.crypto.randomUUID` in Node.js 19+.\nconst uuidFunction = typeof ((_a = globalThis === null || globalThis === void 0 ? void 0 : globalThis.crypto) === null || _a === void 0 ? void 0 : _a.randomUUID) === \"function\"\n    ? globalThis.crypto.randomUUID.bind(globalThis.crypto)\n    : crypto__WEBPACK_IMPORTED_MODULE_0__.randomUUID;\n/**\n * Generated Universally Unique Identifier\n *\n * @returns RFC4122 v4 UUID.\n */\nfunction randomUUID() {\n    return uuidFunction();\n}\n//# sourceMappingURL=uuidUtils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdXRpbC9kaXN0L2VzbS91dWlkVXRpbHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDb0Q7QUFDcEQ7QUFDQTtBQUNBO0FBQ0EsTUFBTSw4Q0FBWTtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWN0b3J3aWxzb24vRGVza3RvcC9wcm9qZWN0cy9FWlZpei9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUtdXRpbC9kaXN0L2VzbS91dWlkVXRpbHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG52YXIgX2E7XG5pbXBvcnQgeyByYW5kb21VVUlEIGFzIHY0UmFuZG9tVVVJRCB9IGZyb20gXCJjcnlwdG9cIjtcbi8vIE5PVEU6IFRoaXMgaXMgYSB3b3JrYXJvdW5kIHVudGlsIHdlIGNhbiB1c2UgYGdsb2JhbFRoaXMuY3J5cHRvLnJhbmRvbVVVSURgIGluIE5vZGUuanMgMTkrLlxuY29uc3QgdXVpZEZ1bmN0aW9uID0gdHlwZW9mICgoX2EgPSBnbG9iYWxUaGlzID09PSBudWxsIHx8IGdsb2JhbFRoaXMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGdsb2JhbFRoaXMuY3J5cHRvKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucmFuZG9tVVVJRCkgPT09IFwiZnVuY3Rpb25cIlxuICAgID8gZ2xvYmFsVGhpcy5jcnlwdG8ucmFuZG9tVVVJRC5iaW5kKGdsb2JhbFRoaXMuY3J5cHRvKVxuICAgIDogdjRSYW5kb21VVUlEO1xuLyoqXG4gKiBHZW5lcmF0ZWQgVW5pdmVyc2FsbHkgVW5pcXVlIElkZW50aWZpZXJcbiAqXG4gKiBAcmV0dXJucyBSRkM0MTIyIHY0IFVVSUQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByYW5kb21VVUlEKCkge1xuICAgIHJldHVybiB1dWlkRnVuY3Rpb24oKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV1aWRVdGlscy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-util/dist/esm/uuidUtils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-xml/dist/esm/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@azure/core-xml/dist/esm/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   XML_ATTRKEY: () => (/* reexport safe */ _xml_common_js__WEBPACK_IMPORTED_MODULE_1__.XML_ATTRKEY),\n/* harmony export */   XML_CHARKEY: () => (/* reexport safe */ _xml_common_js__WEBPACK_IMPORTED_MODULE_1__.XML_CHARKEY),\n/* harmony export */   parseXML: () => (/* reexport safe */ _xml_js__WEBPACK_IMPORTED_MODULE_0__.parseXML),\n/* harmony export */   stringifyXML: () => (/* reexport safe */ _xml_js__WEBPACK_IMPORTED_MODULE_0__.stringifyXML)\n/* harmony export */ });\n/* harmony import */ var _xml_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./xml.js */ \"(rsc)/./node_modules/@azure/core-xml/dist/esm/xml.js\");\n/* harmony import */ var _xml_common_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./xml.common.js */ \"(rsc)/./node_modules/@azure/core-xml/dist/esm/xml.common.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUteG1sL2Rpc3QvZXNtL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDa0Q7QUFDUztBQUMzRCIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcndpbHNvbi9EZXNrdG9wL3Byb2plY3RzL0VaVml6L25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS14bWwvZGlzdC9lc20vaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5leHBvcnQgeyBzdHJpbmdpZnlYTUwsIHBhcnNlWE1MIH0gZnJvbSBcIi4veG1sLmpzXCI7XG5leHBvcnQgeyBYTUxfQVRUUktFWSwgWE1MX0NIQVJLRVkgfSBmcm9tIFwiLi94bWwuY29tbW9uLmpzXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-xml/dist/esm/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-xml/dist/esm/xml.common.js":
/*!*************************************************************!*\
  !*** ./node_modules/@azure/core-xml/dist/esm/xml.common.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   XML_ATTRKEY: () => (/* binding */ XML_ATTRKEY),\n/* harmony export */   XML_CHARKEY: () => (/* binding */ XML_CHARKEY)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * Default key used to access the XML attributes.\n */\nconst XML_ATTRKEY = \"$\";\n/**\n * Default key used to access the XML value content.\n */\nconst XML_CHARKEY = \"_\";\n//# sourceMappingURL=xml.common.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUteG1sL2Rpc3QvZXNtL3htbC5jb21tb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDTztBQUNQIiwic291cmNlcyI6WyIvVXNlcnMvdmljdG9yd2lsc29uL0Rlc2t0b3AvcHJvamVjdHMvRVpWaXovbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXhtbC9kaXN0L2VzbS94bWwuY29tbW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuLyoqXG4gKiBEZWZhdWx0IGtleSB1c2VkIHRvIGFjY2VzcyB0aGUgWE1MIGF0dHJpYnV0ZXMuXG4gKi9cbmV4cG9ydCBjb25zdCBYTUxfQVRUUktFWSA9IFwiJFwiO1xuLyoqXG4gKiBEZWZhdWx0IGtleSB1c2VkIHRvIGFjY2VzcyB0aGUgWE1MIHZhbHVlIGNvbnRlbnQuXG4gKi9cbmV4cG9ydCBjb25zdCBYTUxfQ0hBUktFWSA9IFwiX1wiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9eG1sLmNvbW1vbi5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-xml/dist/esm/xml.common.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-xml/dist/esm/xml.js":
/*!******************************************************!*\
  !*** ./node_modules/@azure/core-xml/dist/esm/xml.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseXML: () => (/* binding */ parseXML),\n/* harmony export */   stringifyXML: () => (/* binding */ stringifyXML)\n/* harmony export */ });\n/* harmony import */ var fast_xml_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fast-xml-parser */ \"(rsc)/./node_modules/@azure/core-xml/node_modules/fast-xml-parser/src/fxp.js\");\n/* harmony import */ var _xml_common_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./xml.common.js */ \"(rsc)/./node_modules/@azure/core-xml/dist/esm/xml.common.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\nfunction getCommonOptions(options) {\n    var _a;\n    return {\n        attributesGroupName: _xml_common_js__WEBPACK_IMPORTED_MODULE_1__.XML_ATTRKEY,\n        textNodeName: (_a = options.xmlCharKey) !== null && _a !== void 0 ? _a : _xml_common_js__WEBPACK_IMPORTED_MODULE_1__.XML_CHARKEY,\n        ignoreAttributes: false,\n        suppressBooleanAttributes: false,\n    };\n}\nfunction getSerializerOptions(options = {}) {\n    var _a, _b;\n    return Object.assign(Object.assign({}, getCommonOptions(options)), { attributeNamePrefix: \"@_\", format: true, suppressEmptyNode: true, indentBy: \"\", rootNodeName: (_a = options.rootName) !== null && _a !== void 0 ? _a : \"root\", cdataPropName: (_b = options.cdataPropName) !== null && _b !== void 0 ? _b : \"__cdata\" });\n}\nfunction getParserOptions(options = {}) {\n    return Object.assign(Object.assign({}, getCommonOptions(options)), { parseAttributeValue: false, parseTagValue: false, attributeNamePrefix: \"\", stopNodes: options.stopNodes, processEntities: true, trimValues: false });\n}\n/**\n * Converts given JSON object to XML string\n * @param obj - JSON object to be converted into XML string\n * @param opts - Options that govern the XML building of given JSON object\n * `rootName` indicates the name of the root element in the resulting XML\n */\nfunction stringifyXML(obj, opts = {}) {\n    const parserOptions = getSerializerOptions(opts);\n    const j2x = new fast_xml_parser__WEBPACK_IMPORTED_MODULE_0__.XMLBuilder(parserOptions);\n    const node = { [parserOptions.rootNodeName]: obj };\n    const xmlData = j2x.build(node);\n    return `<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>${xmlData}`.replace(/\\n/g, \"\");\n}\n/**\n * Converts given XML string into JSON\n * @param str - String containing the XML content to be parsed into JSON\n * @param opts - Options that govern the parsing of given xml string\n * `includeRoot` indicates whether the root element is to be included or not in the output\n */\nasync function parseXML(str, opts = {}) {\n    if (!str) {\n        throw new Error(\"Document is empty\");\n    }\n    const validation = fast_xml_parser__WEBPACK_IMPORTED_MODULE_0__.XMLValidator.validate(str);\n    if (validation !== true) {\n        throw validation;\n    }\n    const parser = new fast_xml_parser__WEBPACK_IMPORTED_MODULE_0__.XMLParser(getParserOptions(opts));\n    const parsedXml = parser.parse(str);\n    // Remove the <?xml version=\"...\" ?> node.\n    // This is a change in behavior on fxp v4. Issue #424\n    if (parsedXml[\"?xml\"]) {\n        delete parsedXml[\"?xml\"];\n    }\n    if (!opts.includeRoot) {\n        for (const key of Object.keys(parsedXml)) {\n            const value = parsedXml[key];\n            return typeof value === \"object\" ? Object.assign({}, value) : value;\n        }\n    }\n    return parsedXml;\n}\n//# sourceMappingURL=xml.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUteG1sL2Rpc3QvZXNtL3htbC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQTtBQUNzRTtBQUNYO0FBQzNEO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qix1REFBVztBQUN4QyxpRkFBaUYsdURBQVc7QUFDNUY7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEM7QUFDMUM7QUFDQSx5Q0FBeUMsZ0NBQWdDLHVQQUF1UDtBQUNoVTtBQUNBLHNDQUFzQztBQUN0Qyx5Q0FBeUMsZ0NBQWdDLG1KQUFtSjtBQUM1TjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLG9DQUFvQztBQUMzQztBQUNBLG9CQUFvQix1REFBVTtBQUM5QixtQkFBbUI7QUFDbkI7QUFDQSxxRUFBcUUsUUFBUTtBQUM3RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLHNDQUFzQztBQUM3QztBQUNBO0FBQ0E7QUFDQSx1QkFBdUIseURBQVk7QUFDbkM7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLHNEQUFTO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtEQUErRDtBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvdmljdG9yd2lsc29uL0Rlc2t0b3AvcHJvamVjdHMvRVpWaXovbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXhtbC9kaXN0L2VzbS94bWwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5pbXBvcnQgeyBYTUxCdWlsZGVyLCBYTUxQYXJzZXIsIFhNTFZhbGlkYXRvciB9IGZyb20gXCJmYXN0LXhtbC1wYXJzZXJcIjtcbmltcG9ydCB7IFhNTF9BVFRSS0VZLCBYTUxfQ0hBUktFWSB9IGZyb20gXCIuL3htbC5jb21tb24uanNcIjtcbmZ1bmN0aW9uIGdldENvbW1vbk9wdGlvbnMob3B0aW9ucykge1xuICAgIHZhciBfYTtcbiAgICByZXR1cm4ge1xuICAgICAgICBhdHRyaWJ1dGVzR3JvdXBOYW1lOiBYTUxfQVRUUktFWSxcbiAgICAgICAgdGV4dE5vZGVOYW1lOiAoX2EgPSBvcHRpb25zLnhtbENoYXJLZXkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFhNTF9DSEFSS0VZLFxuICAgICAgICBpZ25vcmVBdHRyaWJ1dGVzOiBmYWxzZSxcbiAgICAgICAgc3VwcHJlc3NCb29sZWFuQXR0cmlidXRlczogZmFsc2UsXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGdldFNlcmlhbGl6ZXJPcHRpb25zKG9wdGlvbnMgPSB7fSkge1xuICAgIHZhciBfYSwgX2I7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgZ2V0Q29tbW9uT3B0aW9ucyhvcHRpb25zKSksIHsgYXR0cmlidXRlTmFtZVByZWZpeDogXCJAX1wiLCBmb3JtYXQ6IHRydWUsIHN1cHByZXNzRW1wdHlOb2RlOiB0cnVlLCBpbmRlbnRCeTogXCJcIiwgcm9vdE5vZGVOYW1lOiAoX2EgPSBvcHRpb25zLnJvb3ROYW1lKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBcInJvb3RcIiwgY2RhdGFQcm9wTmFtZTogKF9iID0gb3B0aW9ucy5jZGF0YVByb3BOYW1lKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBcIl9fY2RhdGFcIiB9KTtcbn1cbmZ1bmN0aW9uIGdldFBhcnNlck9wdGlvbnMob3B0aW9ucyA9IHt9KSB7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgZ2V0Q29tbW9uT3B0aW9ucyhvcHRpb25zKSksIHsgcGFyc2VBdHRyaWJ1dGVWYWx1ZTogZmFsc2UsIHBhcnNlVGFnVmFsdWU6IGZhbHNlLCBhdHRyaWJ1dGVOYW1lUHJlZml4OiBcIlwiLCBzdG9wTm9kZXM6IG9wdGlvbnMuc3RvcE5vZGVzLCBwcm9jZXNzRW50aXRpZXM6IHRydWUsIHRyaW1WYWx1ZXM6IGZhbHNlIH0pO1xufVxuLyoqXG4gKiBDb252ZXJ0cyBnaXZlbiBKU09OIG9iamVjdCB0byBYTUwgc3RyaW5nXG4gKiBAcGFyYW0gb2JqIC0gSlNPTiBvYmplY3QgdG8gYmUgY29udmVydGVkIGludG8gWE1MIHN0cmluZ1xuICogQHBhcmFtIG9wdHMgLSBPcHRpb25zIHRoYXQgZ292ZXJuIHRoZSBYTUwgYnVpbGRpbmcgb2YgZ2l2ZW4gSlNPTiBvYmplY3RcbiAqIGByb290TmFtZWAgaW5kaWNhdGVzIHRoZSBuYW1lIG9mIHRoZSByb290IGVsZW1lbnQgaW4gdGhlIHJlc3VsdGluZyBYTUxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0cmluZ2lmeVhNTChvYmosIG9wdHMgPSB7fSkge1xuICAgIGNvbnN0IHBhcnNlck9wdGlvbnMgPSBnZXRTZXJpYWxpemVyT3B0aW9ucyhvcHRzKTtcbiAgICBjb25zdCBqMnggPSBuZXcgWE1MQnVpbGRlcihwYXJzZXJPcHRpb25zKTtcbiAgICBjb25zdCBub2RlID0geyBbcGFyc2VyT3B0aW9ucy5yb290Tm9kZU5hbWVdOiBvYmogfTtcbiAgICBjb25zdCB4bWxEYXRhID0gajJ4LmJ1aWxkKG5vZGUpO1xuICAgIHJldHVybiBgPD94bWwgdmVyc2lvbj1cIjEuMFwiIGVuY29kaW5nPVwiVVRGLThcIiBzdGFuZGFsb25lPVwieWVzXCI/PiR7eG1sRGF0YX1gLnJlcGxhY2UoL1xcbi9nLCBcIlwiKTtcbn1cbi8qKlxuICogQ29udmVydHMgZ2l2ZW4gWE1MIHN0cmluZyBpbnRvIEpTT05cbiAqIEBwYXJhbSBzdHIgLSBTdHJpbmcgY29udGFpbmluZyB0aGUgWE1MIGNvbnRlbnQgdG8gYmUgcGFyc2VkIGludG8gSlNPTlxuICogQHBhcmFtIG9wdHMgLSBPcHRpb25zIHRoYXQgZ292ZXJuIHRoZSBwYXJzaW5nIG9mIGdpdmVuIHhtbCBzdHJpbmdcbiAqIGBpbmNsdWRlUm9vdGAgaW5kaWNhdGVzIHdoZXRoZXIgdGhlIHJvb3QgZWxlbWVudCBpcyB0byBiZSBpbmNsdWRlZCBvciBub3QgaW4gdGhlIG91dHB1dFxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcGFyc2VYTUwoc3RyLCBvcHRzID0ge30pIHtcbiAgICBpZiAoIXN0cikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJEb2N1bWVudCBpcyBlbXB0eVwiKTtcbiAgICB9XG4gICAgY29uc3QgdmFsaWRhdGlvbiA9IFhNTFZhbGlkYXRvci52YWxpZGF0ZShzdHIpO1xuICAgIGlmICh2YWxpZGF0aW9uICE9PSB0cnVlKSB7XG4gICAgICAgIHRocm93IHZhbGlkYXRpb247XG4gICAgfVxuICAgIGNvbnN0IHBhcnNlciA9IG5ldyBYTUxQYXJzZXIoZ2V0UGFyc2VyT3B0aW9ucyhvcHRzKSk7XG4gICAgY29uc3QgcGFyc2VkWG1sID0gcGFyc2VyLnBhcnNlKHN0cik7XG4gICAgLy8gUmVtb3ZlIHRoZSA8P3htbCB2ZXJzaW9uPVwiLi4uXCIgPz4gbm9kZS5cbiAgICAvLyBUaGlzIGlzIGEgY2hhbmdlIGluIGJlaGF2aW9yIG9uIGZ4cCB2NC4gSXNzdWUgIzQyNFxuICAgIGlmIChwYXJzZWRYbWxbXCI/eG1sXCJdKSB7XG4gICAgICAgIGRlbGV0ZSBwYXJzZWRYbWxbXCI/eG1sXCJdO1xuICAgIH1cbiAgICBpZiAoIW9wdHMuaW5jbHVkZVJvb3QpIHtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMocGFyc2VkWG1sKSkge1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBwYXJzZWRYbWxba2V5XTtcbiAgICAgICAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgPyBPYmplY3QuYXNzaWduKHt9LCB2YWx1ZSkgOiB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcGFyc2VkWG1sO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9eG1sLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-xml/dist/esm/xml.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-xml/node_modules/fast-xml-parser/src/fxp.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@azure/core-xml/node_modules/fast-xml-parser/src/fxp.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   XMLBuilder: () => (/* reexport safe */ _xmlbuilder_json2xml_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]),\n/* harmony export */   XMLParser: () => (/* reexport safe */ _xmlparser_XMLParser_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]),\n/* harmony export */   XMLValidator: () => (/* binding */ XMLValidator)\n/* harmony export */ });\n/* harmony import */ var _validator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validator.js */ \"(rsc)/./node_modules/@azure/core-xml/node_modules/fast-xml-parser/src/validator.js\");\n/* harmony import */ var _xmlparser_XMLParser_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./xmlparser/XMLParser.js */ \"(rsc)/./node_modules/@azure/core-xml/node_modules/fast-xml-parser/src/xmlparser/XMLParser.js\");\n/* harmony import */ var _xmlbuilder_json2xml_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./xmlbuilder/json2xml.js */ \"(rsc)/./node_modules/@azure/core-xml/node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js\");\n\n\n\n\n\n\nconst XMLValidator = {\n  validate: _validator_js__WEBPACK_IMPORTED_MODULE_0__.validate\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUteG1sL25vZGVfbW9kdWxlcy9mYXN0LXhtbC1wYXJzZXIvc3JjL2Z4cC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBYTs7QUFFMkI7QUFDUztBQUNDOztBQUVsRDtBQUNBLFlBQVksbURBQVE7QUFDcEIiLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWN0b3J3aWxzb24vRGVza3RvcC9wcm9qZWN0cy9FWlZpei9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUteG1sL25vZGVfbW9kdWxlcy9mYXN0LXhtbC1wYXJzZXIvc3JjL2Z4cC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB7dmFsaWRhdGV9IGZyb20gJy4vdmFsaWRhdG9yLmpzJztcbmltcG9ydCBYTUxQYXJzZXIgZnJvbSAnLi94bWxwYXJzZXIvWE1MUGFyc2VyLmpzJztcbmltcG9ydCBYTUxCdWlsZGVyIGZyb20gJy4veG1sYnVpbGRlci9qc29uMnhtbC5qcyc7XG5cbmNvbnN0IFhNTFZhbGlkYXRvciA9IHtcbiAgdmFsaWRhdGU6IHZhbGlkYXRlXG59XG5leHBvcnQge1xuICBYTUxQYXJzZXIsXG4gIFhNTFZhbGlkYXRvcixcbiAgWE1MQnVpbGRlclxufTsiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-xml/node_modules/fast-xml-parser/src/fxp.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-xml/node_modules/fast-xml-parser/src/ignoreAttributes.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@azure/core-xml/node_modules/fast-xml-parser/src/ignoreAttributes.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ getIgnoreAttributesFn)\n/* harmony export */ });\nfunction getIgnoreAttributesFn(ignoreAttributes) {\n    if (typeof ignoreAttributes === 'function') {\n        return ignoreAttributes\n    }\n    if (Array.isArray(ignoreAttributes)) {\n        return (attrName) => {\n            for (const pattern of ignoreAttributes) {\n                if (typeof pattern === 'string' && attrName === pattern) {\n                    return true\n                }\n                if (pattern instanceof RegExp && pattern.test(attrName)) {\n                    return true\n                }\n            }\n        }\n    }\n    return () => false\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUteG1sL25vZGVfbW9kdWxlcy9mYXN0LXhtbC1wYXJzZXIvc3JjL2lnbm9yZUF0dHJpYnV0ZXMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcndpbHNvbi9EZXNrdG9wL3Byb2plY3RzL0VaVml6L25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS14bWwvbm9kZV9tb2R1bGVzL2Zhc3QteG1sLXBhcnNlci9zcmMvaWdub3JlQXR0cmlidXRlcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRJZ25vcmVBdHRyaWJ1dGVzRm4oaWdub3JlQXR0cmlidXRlcykge1xuICAgIGlmICh0eXBlb2YgaWdub3JlQXR0cmlidXRlcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gaWdub3JlQXR0cmlidXRlc1xuICAgIH1cbiAgICBpZiAoQXJyYXkuaXNBcnJheShpZ25vcmVBdHRyaWJ1dGVzKSkge1xuICAgICAgICByZXR1cm4gKGF0dHJOYW1lKSA9PiB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHBhdHRlcm4gb2YgaWdub3JlQXR0cmlidXRlcykge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcGF0dGVybiA9PT0gJ3N0cmluZycgJiYgYXR0ck5hbWUgPT09IHBhdHRlcm4pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHBhdHRlcm4gaW5zdGFuY2VvZiBSZWdFeHAgJiYgcGF0dGVybi50ZXN0KGF0dHJOYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gKCkgPT4gZmFsc2Vcbn0iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-xml/node_modules/fast-xml-parser/src/ignoreAttributes.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-xml/node_modules/fast-xml-parser/src/util.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@azure/core-xml/node_modules/fast-xml-parser/src/util.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getAllMatches: () => (/* binding */ getAllMatches),\n/* harmony export */   getValue: () => (/* binding */ getValue),\n/* harmony export */   isEmptyObject: () => (/* binding */ isEmptyObject),\n/* harmony export */   isExist: () => (/* binding */ isExist),\n/* harmony export */   isName: () => (/* binding */ isName),\n/* harmony export */   merge: () => (/* binding */ merge),\n/* harmony export */   nameRegexp: () => (/* binding */ nameRegexp)\n/* harmony export */ });\n\n\nconst nameStartChar = ':A-Za-z_\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD';\nconst nameChar = nameStartChar + '\\\\-.\\\\d\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040';\nconst nameRegexp = '[' + nameStartChar + '][' + nameChar + ']*';\nconst regexName = new RegExp('^' + nameRegexp + '$');\n\nfunction getAllMatches(string, regex) {\n  const matches = [];\n  let match = regex.exec(string);\n  while (match) {\n    const allmatches = [];\n    allmatches.startIndex = regex.lastIndex - match[0].length;\n    const len = match.length;\n    for (let index = 0; index < len; index++) {\n      allmatches.push(match[index]);\n    }\n    matches.push(allmatches);\n    match = regex.exec(string);\n  }\n  return matches;\n}\n\nconst isName = function(string) {\n  const match = regexName.exec(string);\n  return !(match === null || typeof match === 'undefined');\n}\n\nfunction isExist(v) {\n  return typeof v !== 'undefined';\n}\n\nfunction isEmptyObject(obj) {\n  return Object.keys(obj).length === 0;\n}\n\n/**\n * Copy all the properties of a into b.\n * @param {*} target\n * @param {*} a\n */\nfunction merge(target, a, arrayMode) {\n  if (a) {\n    const keys = Object.keys(a); // will return an array of own properties\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      if (arrayMode === 'strict') {\n        target[keys[i]] = [ a[keys[i]] ];\n      } else {\n        target[keys[i]] = a[keys[i]];\n      }\n    }\n  }\n}\n/* exports.merge =function (b,a){\n  return Object.assign(b,a);\n} */\n\nfunction getValue(v) {\n  if (exports.isExist(v)) {\n    return v;\n  } else {\n    return '';\n  }\n}\n\n// const fakeCall = function(a) {return a;};\n// const fakeCallNoReturn = function() {};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUteG1sL25vZGVfbW9kdWxlcy9mYXN0LXhtbC1wYXJzZXIvc3JjL3V0aWwuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFhOztBQUViO0FBQ0E7QUFDTztBQUNQOztBQUVPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGFBQWE7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRU87QUFDUDtBQUNBO0FBQ0E7O0FBRU87QUFDUDtBQUNBOztBQUVPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxHQUFHO0FBQ2QsV0FBVyxHQUFHO0FBQ2Q7QUFDTztBQUNQO0FBQ0EsaUNBQWlDO0FBQ2pDLDZCQUE2QjtBQUM3QixvQkFBb0IsU0FBUztBQUM3QjtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFSztBQUNQO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBLGlDQUFpQztBQUNqQyIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcndpbHNvbi9EZXNrdG9wL3Byb2plY3RzL0VaVml6L25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS14bWwvbm9kZV9tb2R1bGVzL2Zhc3QteG1sLXBhcnNlci9zcmMvdXRpbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IG5hbWVTdGFydENoYXIgPSAnOkEtWmEtel9cXFxcdTAwQzAtXFxcXHUwMEQ2XFxcXHUwMEQ4LVxcXFx1MDBGNlxcXFx1MDBGOC1cXFxcdTAyRkZcXFxcdTAzNzAtXFxcXHUwMzdEXFxcXHUwMzdGLVxcXFx1MUZGRlxcXFx1MjAwQy1cXFxcdTIwMERcXFxcdTIwNzAtXFxcXHUyMThGXFxcXHUyQzAwLVxcXFx1MkZFRlxcXFx1MzAwMS1cXFxcdUQ3RkZcXFxcdUY5MDAtXFxcXHVGRENGXFxcXHVGREYwLVxcXFx1RkZGRCc7XG5jb25zdCBuYW1lQ2hhciA9IG5hbWVTdGFydENoYXIgKyAnXFxcXC0uXFxcXGRcXFxcdTAwQjdcXFxcdTAzMDAtXFxcXHUwMzZGXFxcXHUyMDNGLVxcXFx1MjA0MCc7XG5leHBvcnQgY29uc3QgbmFtZVJlZ2V4cCA9ICdbJyArIG5hbWVTdGFydENoYXIgKyAnXVsnICsgbmFtZUNoYXIgKyAnXSonO1xuY29uc3QgcmVnZXhOYW1lID0gbmV3IFJlZ0V4cCgnXicgKyBuYW1lUmVnZXhwICsgJyQnKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEFsbE1hdGNoZXMoc3RyaW5nLCByZWdleCkge1xuICBjb25zdCBtYXRjaGVzID0gW107XG4gIGxldCBtYXRjaCA9IHJlZ2V4LmV4ZWMoc3RyaW5nKTtcbiAgd2hpbGUgKG1hdGNoKSB7XG4gICAgY29uc3QgYWxsbWF0Y2hlcyA9IFtdO1xuICAgIGFsbG1hdGNoZXMuc3RhcnRJbmRleCA9IHJlZ2V4Lmxhc3RJbmRleCAtIG1hdGNoWzBdLmxlbmd0aDtcbiAgICBjb25zdCBsZW4gPSBtYXRjaC5sZW5ndGg7XG4gICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGxlbjsgaW5kZXgrKykge1xuICAgICAgYWxsbWF0Y2hlcy5wdXNoKG1hdGNoW2luZGV4XSk7XG4gICAgfVxuICAgIG1hdGNoZXMucHVzaChhbGxtYXRjaGVzKTtcbiAgICBtYXRjaCA9IHJlZ2V4LmV4ZWMoc3RyaW5nKTtcbiAgfVxuICByZXR1cm4gbWF0Y2hlcztcbn1cblxuZXhwb3J0IGNvbnN0IGlzTmFtZSA9IGZ1bmN0aW9uKHN0cmluZykge1xuICBjb25zdCBtYXRjaCA9IHJlZ2V4TmFtZS5leGVjKHN0cmluZyk7XG4gIHJldHVybiAhKG1hdGNoID09PSBudWxsIHx8IHR5cGVvZiBtYXRjaCA9PT0gJ3VuZGVmaW5lZCcpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNFeGlzdCh2KSB7XG4gIHJldHVybiB0eXBlb2YgdiAhPT0gJ3VuZGVmaW5lZCc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0VtcHR5T2JqZWN0KG9iaikge1xuICByZXR1cm4gT2JqZWN0LmtleXMob2JqKS5sZW5ndGggPT09IDA7XG59XG5cbi8qKlxuICogQ29weSBhbGwgdGhlIHByb3BlcnRpZXMgb2YgYSBpbnRvIGIuXG4gKiBAcGFyYW0geyp9IHRhcmdldFxuICogQHBhcmFtIHsqfSBhXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtZXJnZSh0YXJnZXQsIGEsIGFycmF5TW9kZSkge1xuICBpZiAoYSkge1xuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhhKTsgLy8gd2lsbCByZXR1cm4gYW4gYXJyYXkgb2Ygb3duIHByb3BlcnRpZXNcbiAgICBjb25zdCBsZW4gPSBrZXlzLmxlbmd0aDsgLy9kb24ndCBtYWtlIGl0IGlubGluZVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGlmIChhcnJheU1vZGUgPT09ICdzdHJpY3QnKSB7XG4gICAgICAgIHRhcmdldFtrZXlzW2ldXSA9IFsgYVtrZXlzW2ldXSBdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGFyZ2V0W2tleXNbaV1dID0gYVtrZXlzW2ldXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbi8qIGV4cG9ydHMubWVyZ2UgPWZ1bmN0aW9uIChiLGEpe1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbihiLGEpO1xufSAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0VmFsdWUodikge1xuICBpZiAoZXhwb3J0cy5pc0V4aXN0KHYpKSB7XG4gICAgcmV0dXJuIHY7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG59XG5cbi8vIGNvbnN0IGZha2VDYWxsID0gZnVuY3Rpb24oYSkge3JldHVybiBhO307XG4vLyBjb25zdCBmYWtlQ2FsbE5vUmV0dXJuID0gZnVuY3Rpb24oKSB7fTsiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-xml/node_modules/fast-xml-parser/src/util.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-xml/node_modules/fast-xml-parser/src/validator.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@azure/core-xml/node_modules/fast-xml-parser/src/validator.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   validate: () => (/* binding */ validate)\n/* harmony export */ });\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util.js */ \"(rsc)/./node_modules/@azure/core-xml/node_modules/fast-xml-parser/src/util.js\");\n\n\n\n\nconst defaultOptions = {\n  allowBooleanAttributes: false, //A tag can have attributes without any value\n  unpairedTags: []\n};\n\n//const tagsPattern = new RegExp(\"<\\\\/?([\\\\w:\\\\-_\\.]+)\\\\s*\\/?>\",\"g\");\nfunction validate(xmlData, options) {\n  options = Object.assign({}, defaultOptions, options);\n\n  //xmlData = xmlData.replace(/(\\r\\n|\\n|\\r)/gm,\"\");//make it single line\n  //xmlData = xmlData.replace(/(^\\s*<\\?xml.*?\\?>)/g,\"\");//Remove XML starting tag\n  //xmlData = xmlData.replace(/(<!DOCTYPE[\\s\\w\\\"\\.\\/\\-\\:]+(\\[.*\\])*\\s*>)/g,\"\");//Remove DOCTYPE\n  const tags = [];\n  let tagFound = false;\n\n  //indicates that the root tag has been closed (aka. depth 0 has been reached)\n  let reachedRoot = false;\n\n  if (xmlData[0] === '\\ufeff') {\n    // check for byte order mark (BOM)\n    xmlData = xmlData.substr(1);\n  }\n  \n  for (let i = 0; i < xmlData.length; i++) {\n\n    if (xmlData[i] === '<' && xmlData[i+1] === '?') {\n      i+=2;\n      i = readPI(xmlData,i);\n      if (i.err) return i;\n    }else if (xmlData[i] === '<') {\n      //starting of tag\n      //read until you reach to '>' avoiding any '>' in attribute value\n      let tagStartPos = i;\n      i++;\n      \n      if (xmlData[i] === '!') {\n        i = readCommentAndCDATA(xmlData, i);\n        continue;\n      } else {\n        let closingTag = false;\n        if (xmlData[i] === '/') {\n          //closing tag\n          closingTag = true;\n          i++;\n        }\n        //read tagname\n        let tagName = '';\n        for (; i < xmlData.length &&\n          xmlData[i] !== '>' &&\n          xmlData[i] !== ' ' &&\n          xmlData[i] !== '\\t' &&\n          xmlData[i] !== '\\n' &&\n          xmlData[i] !== '\\r'; i++\n        ) {\n          tagName += xmlData[i];\n        }\n        tagName = tagName.trim();\n        //console.log(tagName);\n\n        if (tagName[tagName.length - 1] === '/') {\n          //self closing tag without attributes\n          tagName = tagName.substring(0, tagName.length - 1);\n          //continue;\n          i--;\n        }\n        if (!validateTagName(tagName)) {\n          let msg;\n          if (tagName.trim().length === 0) {\n            msg = \"Invalid space after '<'.\";\n          } else {\n            msg = \"Tag '\"+tagName+\"' is an invalid name.\";\n          }\n          return getErrorObject('InvalidTag', msg, getLineNumberForPosition(xmlData, i));\n        }\n\n        const result = readAttributeStr(xmlData, i);\n        if (result === false) {\n          return getErrorObject('InvalidAttr', \"Attributes for '\"+tagName+\"' have open quote.\", getLineNumberForPosition(xmlData, i));\n        }\n        let attrStr = result.value;\n        i = result.index;\n\n        if (attrStr[attrStr.length - 1] === '/') {\n          //self closing tag\n          const attrStrStart = i - attrStr.length;\n          attrStr = attrStr.substring(0, attrStr.length - 1);\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid === true) {\n            tagFound = true;\n            //continue; //text may presents after self closing tag\n          } else {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));\n          }\n        } else if (closingTag) {\n          if (!result.tagClosed) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' doesn't have proper closing.\", getLineNumberForPosition(xmlData, i));\n          } else if (attrStr.trim().length > 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' can't have attributes or invalid starting.\", getLineNumberForPosition(xmlData, tagStartPos));\n          } else if (tags.length === 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' has not been opened.\", getLineNumberForPosition(xmlData, tagStartPos));\n          } else {\n            const otg = tags.pop();\n            if (tagName !== otg.tagName) {\n              let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);\n              return getErrorObject('InvalidTag',\n                \"Expected closing tag '\"+otg.tagName+\"' (opened in line \"+openPos.line+\", col \"+openPos.col+\") instead of closing tag '\"+tagName+\"'.\",\n                getLineNumberForPosition(xmlData, tagStartPos));\n            }\n\n            //when there are no more tags, we reached the root level.\n            if (tags.length == 0) {\n              reachedRoot = true;\n            }\n          }\n        } else {\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid !== true) {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));\n          }\n\n          //if the root level has been reached before ...\n          if (reachedRoot === true) {\n            return getErrorObject('InvalidXml', 'Multiple possible root nodes found.', getLineNumberForPosition(xmlData, i));\n          } else if(options.unpairedTags.indexOf(tagName) !== -1){\n            //don't push into stack\n          } else {\n            tags.push({tagName, tagStartPos});\n          }\n          tagFound = true;\n        }\n\n        //skip tag text value\n        //It may include comments and CDATA value\n        for (i++; i < xmlData.length; i++) {\n          if (xmlData[i] === '<') {\n            if (xmlData[i + 1] === '!') {\n              //comment or CADATA\n              i++;\n              i = readCommentAndCDATA(xmlData, i);\n              continue;\n            } else if (xmlData[i+1] === '?') {\n              i = readPI(xmlData, ++i);\n              if (i.err) return i;\n            } else{\n              break;\n            }\n          } else if (xmlData[i] === '&') {\n            const afterAmp = validateAmpersand(xmlData, i);\n            if (afterAmp == -1)\n              return getErrorObject('InvalidChar', \"char '&' is not expected.\", getLineNumberForPosition(xmlData, i));\n            i = afterAmp;\n          }else{\n            if (reachedRoot === true && !isWhiteSpace(xmlData[i])) {\n              return getErrorObject('InvalidXml', \"Extra text at the end\", getLineNumberForPosition(xmlData, i));\n            }\n          }\n        } //end of reading tag text value\n        if (xmlData[i] === '<') {\n          i--;\n        }\n      }\n    } else {\n      if ( isWhiteSpace(xmlData[i])) {\n        continue;\n      }\n      return getErrorObject('InvalidChar', \"char '\"+xmlData[i]+\"' is not expected.\", getLineNumberForPosition(xmlData, i));\n    }\n  }\n\n  if (!tagFound) {\n    return getErrorObject('InvalidXml', 'Start tag expected.', 1);\n  }else if (tags.length == 1) {\n      return getErrorObject('InvalidTag', \"Unclosed tag '\"+tags[0].tagName+\"'.\", getLineNumberForPosition(xmlData, tags[0].tagStartPos));\n  }else if (tags.length > 0) {\n      return getErrorObject('InvalidXml', \"Invalid '\"+\n          JSON.stringify(tags.map(t => t.tagName), null, 4).replace(/\\r?\\n/g, '')+\n          \"' found.\", {line: 1, col: 1});\n  }\n\n  return true;\n};\n\nfunction isWhiteSpace(char){\n  return char === ' ' || char === '\\t' || char === '\\n'  || char === '\\r';\n}\n/**\n * Read Processing insstructions and skip\n * @param {*} xmlData\n * @param {*} i\n */\nfunction readPI(xmlData, i) {\n  const start = i;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] == '?' || xmlData[i] == ' ') {\n      //tagname\n      const tagname = xmlData.substr(start, i - start);\n      if (i > 5 && tagname === 'xml') {\n        return getErrorObject('InvalidXml', 'XML declaration allowed only at the start of the document.', getLineNumberForPosition(xmlData, i));\n      } else if (xmlData[i] == '?' && xmlData[i + 1] == '>') {\n        //check if valid attribut string\n        i++;\n        break;\n      } else {\n        continue;\n      }\n    }\n  }\n  return i;\n}\n\nfunction readCommentAndCDATA(xmlData, i) {\n  if (xmlData.length > i + 5 && xmlData[i + 1] === '-' && xmlData[i + 2] === '-') {\n    //comment\n    for (i += 3; i < xmlData.length; i++) {\n      if (xmlData[i] === '-' && xmlData[i + 1] === '-' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  } else if (\n    xmlData.length > i + 8 &&\n    xmlData[i + 1] === 'D' &&\n    xmlData[i + 2] === 'O' &&\n    xmlData[i + 3] === 'C' &&\n    xmlData[i + 4] === 'T' &&\n    xmlData[i + 5] === 'Y' &&\n    xmlData[i + 6] === 'P' &&\n    xmlData[i + 7] === 'E'\n  ) {\n    let angleBracketsCount = 1;\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === '<') {\n        angleBracketsCount++;\n      } else if (xmlData[i] === '>') {\n        angleBracketsCount--;\n        if (angleBracketsCount === 0) {\n          break;\n        }\n      }\n    }\n  } else if (\n    xmlData.length > i + 9 &&\n    xmlData[i + 1] === '[' &&\n    xmlData[i + 2] === 'C' &&\n    xmlData[i + 3] === 'D' &&\n    xmlData[i + 4] === 'A' &&\n    xmlData[i + 5] === 'T' &&\n    xmlData[i + 6] === 'A' &&\n    xmlData[i + 7] === '['\n  ) {\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === ']' && xmlData[i + 1] === ']' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  }\n\n  return i;\n}\n\nconst doubleQuote = '\"';\nconst singleQuote = \"'\";\n\n/**\n * Keep reading xmlData until '<' is found outside the attribute value.\n * @param {string} xmlData\n * @param {number} i\n */\nfunction readAttributeStr(xmlData, i) {\n  let attrStr = '';\n  let startChar = '';\n  let tagClosed = false;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {\n      if (startChar === '') {\n        startChar = xmlData[i];\n      } else if (startChar !== xmlData[i]) {\n        //if vaue is enclosed with double quote then single quotes are allowed inside the value and vice versa\n      } else {\n        startChar = '';\n      }\n    } else if (xmlData[i] === '>') {\n      if (startChar === '') {\n        tagClosed = true;\n        break;\n      }\n    }\n    attrStr += xmlData[i];\n  }\n  if (startChar !== '') {\n    return false;\n  }\n\n  return {\n    value: attrStr,\n    index: i,\n    tagClosed: tagClosed\n  };\n}\n\n/**\n * Select all the attributes whether valid or invalid.\n */\nconst validAttrStrRegxp = new RegExp('(\\\\s*)([^\\\\s=]+)(\\\\s*=)?(\\\\s*([\\'\"])(([\\\\s\\\\S])*?)\\\\5)?', 'g');\n\n//attr, =\"sd\", a=\"amit's\", a=\"sd\"b=\"saf\", ab  cd=\"\"\n\nfunction validateAttributeString(attrStr, options) {\n  //console.log(\"start:\"+attrStr+\":end\");\n\n  //if(attrStr.trim().length === 0) return true; //empty string\n\n  const matches = (0,_util_js__WEBPACK_IMPORTED_MODULE_0__.getAllMatches)(attrStr, validAttrStrRegxp);\n  const attrNames = {};\n\n  for (let i = 0; i < matches.length; i++) {\n    if (matches[i][1].length === 0) {\n      //nospace before attribute name: a=\"sd\"b=\"saf\"\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' has no space in starting.\", getPositionFromMatch(matches[i]))\n    } else if (matches[i][3] !== undefined && matches[i][4] === undefined) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' is without value.\", getPositionFromMatch(matches[i]));\n    } else if (matches[i][3] === undefined && !options.allowBooleanAttributes) {\n      //independent attribute: ab\n      return getErrorObject('InvalidAttr', \"boolean attribute '\"+matches[i][2]+\"' is not allowed.\", getPositionFromMatch(matches[i]));\n    }\n    /* else if(matches[i][6] === undefined){//attribute without value: ab=\n                    return { err: { code:\"InvalidAttr\",msg:\"attribute \" + matches[i][2] + \" has no value assigned.\"}};\n                } */\n    const attrName = matches[i][2];\n    if (!validateAttrName(attrName)) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is an invalid name.\", getPositionFromMatch(matches[i]));\n    }\n    if (!attrNames.hasOwnProperty(attrName)) {\n      //check for duplicate attribute.\n      attrNames[attrName] = 1;\n    } else {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is repeated.\", getPositionFromMatch(matches[i]));\n    }\n  }\n\n  return true;\n}\n\nfunction validateNumberAmpersand(xmlData, i) {\n  let re = /\\d/;\n  if (xmlData[i] === 'x') {\n    i++;\n    re = /[\\da-fA-F]/;\n  }\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === ';')\n      return i;\n    if (!xmlData[i].match(re))\n      break;\n  }\n  return -1;\n}\n\nfunction validateAmpersand(xmlData, i) {\n  // https://www.w3.org/TR/xml/#dt-charref\n  i++;\n  if (xmlData[i] === ';')\n    return -1;\n  if (xmlData[i] === '#') {\n    i++;\n    return validateNumberAmpersand(xmlData, i);\n  }\n  let count = 0;\n  for (; i < xmlData.length; i++, count++) {\n    if (xmlData[i].match(/\\w/) && count < 20)\n      continue;\n    if (xmlData[i] === ';')\n      break;\n    return -1;\n  }\n  return i;\n}\n\nfunction getErrorObject(code, message, lineNumber) {\n  return {\n    err: {\n      code: code,\n      msg: message,\n      line: lineNumber.line || lineNumber,\n      col: lineNumber.col,\n    },\n  };\n}\n\nfunction validateAttrName(attrName) {\n  return (0,_util_js__WEBPACK_IMPORTED_MODULE_0__.isName)(attrName);\n}\n\n// const startsWithXML = /^xml/i;\n\nfunction validateTagName(tagname) {\n  return (0,_util_js__WEBPACK_IMPORTED_MODULE_0__.isName)(tagname) /* && !tagname.match(startsWithXML) */;\n}\n\n//this function returns the line number for the character at the given index\nfunction getLineNumberForPosition(xmlData, index) {\n  const lines = xmlData.substring(0, index).split(/\\r?\\n/);\n  return {\n    line: lines.length,\n\n    // column number is last line's length + 1, because column numbering starts at 1:\n    col: lines[lines.length - 1].length + 1\n  };\n}\n\n//this function returns the position of the first character of match within attrStr\nfunction getPositionFromMatch(match) {\n  return match.startIndex + match[1].length;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-xml/node_modules/fast-xml-parser/src/validator.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-xml/node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@azure/core-xml/node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Builder)\n/* harmony export */ });\n/* harmony import */ var _orderedJs2Xml_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./orderedJs2Xml.js */ \"(rsc)/./node_modules/@azure/core-xml/node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js\");\n/* harmony import */ var _ignoreAttributes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ignoreAttributes.js */ \"(rsc)/./node_modules/@azure/core-xml/node_modules/fast-xml-parser/src/ignoreAttributes.js\");\n\n//parse Empty Node as self closing node\n\n\n\nconst defaultOptions = {\n  attributeNamePrefix: '@_',\n  attributesGroupName: false,\n  textNodeName: '#text',\n  ignoreAttributes: true,\n  cdataPropName: false,\n  format: false,\n  indentBy: '  ',\n  suppressEmptyNode: false,\n  suppressUnpairedNode: true,\n  suppressBooleanAttributes: true,\n  tagValueProcessor: function(key, a) {\n    return a;\n  },\n  attributeValueProcessor: function(attrName, a) {\n    return a;\n  },\n  preserveOrder: false,\n  commentPropName: false,\n  unpairedTags: [],\n  entities: [\n    { regex: new RegExp(\"&\", \"g\"), val: \"&amp;\" },//it must be on top\n    { regex: new RegExp(\">\", \"g\"), val: \"&gt;\" },\n    { regex: new RegExp(\"<\", \"g\"), val: \"&lt;\" },\n    { regex: new RegExp(\"\\'\", \"g\"), val: \"&apos;\" },\n    { regex: new RegExp(\"\\\"\", \"g\"), val: \"&quot;\" }\n  ],\n  processEntities: true,\n  stopNodes: [],\n  // transformTagName: false,\n  // transformAttributeName: false,\n  oneListGroup: false\n};\n\nfunction Builder(options) {\n  this.options = Object.assign({}, defaultOptions, options);\n  if (this.options.ignoreAttributes === true || this.options.attributesGroupName) {\n    this.isAttribute = function(/*a*/) {\n      return false;\n    };\n  } else {\n    this.ignoreAttributesFn = (0,_ignoreAttributes_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(this.options.ignoreAttributes)\n    this.attrPrefixLen = this.options.attributeNamePrefix.length;\n    this.isAttribute = isAttribute;\n  }\n\n  this.processTextOrObjNode = processTextOrObjNode\n\n  if (this.options.format) {\n    this.indentate = indentate;\n    this.tagEndChar = '>\\n';\n    this.newLine = '\\n';\n  } else {\n    this.indentate = function() {\n      return '';\n    };\n    this.tagEndChar = '>';\n    this.newLine = '';\n  }\n}\n\nBuilder.prototype.build = function(jObj) {\n  if(this.options.preserveOrder){\n    return (0,_orderedJs2Xml_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(jObj, this.options);\n  }else {\n    if(Array.isArray(jObj) && this.options.arrayNodeName && this.options.arrayNodeName.length > 1){\n      jObj = {\n        [this.options.arrayNodeName] : jObj\n      }\n    }\n    return this.j2x(jObj, 0, []).val;\n  }\n};\n\nBuilder.prototype.j2x = function(jObj, level, ajPath) {\n  let attrStr = '';\n  let val = '';\n  const jPath = ajPath.join('.')\n  for (let key in jObj) {\n    if(!Object.prototype.hasOwnProperty.call(jObj, key)) continue;\n    if (typeof jObj[key] === 'undefined') {\n      // supress undefined node only if it is not an attribute\n      if (this.isAttribute(key)) {\n        val += '';\n      }\n    } else if (jObj[key] === null) {\n      // null attribute should be ignored by the attribute list, but should not cause the tag closing\n      if (this.isAttribute(key)) {\n        val += '';\n      } else if (key === this.options.cdataPropName) {\n        val += '';\n      } else if (key[0] === '?') {\n        val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;\n      } else {\n        val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n      }\n      // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n    } else if (jObj[key] instanceof Date) {\n      val += this.buildTextValNode(jObj[key], key, '', level);\n    } else if (typeof jObj[key] !== 'object') {\n      //premitive type\n      const attr = this.isAttribute(key);\n      if (attr && !this.ignoreAttributesFn(attr, jPath)) {\n        attrStr += this.buildAttrPairStr(attr, '' + jObj[key]);\n      } else if (!attr) {\n        //tag value\n        if (key === this.options.textNodeName) {\n          let newval = this.options.tagValueProcessor(key, '' + jObj[key]);\n          val += this.replaceEntitiesValue(newval);\n        } else {\n          val += this.buildTextValNode(jObj[key], key, '', level);\n        }\n      }\n    } else if (Array.isArray(jObj[key])) {\n      //repeated nodes\n      const arrLen = jObj[key].length;\n      let listTagVal = \"\";\n      let listTagAttr = \"\";\n      for (let j = 0; j < arrLen; j++) {\n        const item = jObj[key][j];\n        if (typeof item === 'undefined') {\n          // supress undefined node\n        } else if (item === null) {\n          if(key[0] === \"?\") val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;\n          else val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n          // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n        } else if (typeof item === 'object') {\n          if(this.options.oneListGroup){\n            const result = this.j2x(item, level + 1, ajPath.concat(key));\n            listTagVal += result.val;\n            if (this.options.attributesGroupName && item.hasOwnProperty(this.options.attributesGroupName)) {\n              listTagAttr += result.attrStr\n            }\n          }else{\n            listTagVal += this.processTextOrObjNode(item, key, level, ajPath)\n          }\n        } else {\n          if (this.options.oneListGroup) {\n            let textValue = this.options.tagValueProcessor(key, item);\n            textValue = this.replaceEntitiesValue(textValue);\n            listTagVal += textValue;\n          } else {\n            listTagVal += this.buildTextValNode(item, key, '', level);\n          }\n        }\n      }\n      if(this.options.oneListGroup){\n        listTagVal = this.buildObjectNode(listTagVal, key, listTagAttr, level);\n      }\n      val += listTagVal;\n    } else {\n      //nested node\n      if (this.options.attributesGroupName && key === this.options.attributesGroupName) {\n        const Ks = Object.keys(jObj[key]);\n        const L = Ks.length;\n        for (let j = 0; j < L; j++) {\n          attrStr += this.buildAttrPairStr(Ks[j], '' + jObj[key][Ks[j]]);\n        }\n      } else {\n        val += this.processTextOrObjNode(jObj[key], key, level, ajPath)\n      }\n    }\n  }\n  return {attrStr: attrStr, val: val};\n};\n\nBuilder.prototype.buildAttrPairStr = function(attrName, val){\n  val = this.options.attributeValueProcessor(attrName, '' + val);\n  val = this.replaceEntitiesValue(val);\n  if (this.options.suppressBooleanAttributes && val === \"true\") {\n    return ' ' + attrName;\n  } else return ' ' + attrName + '=\"' + val + '\"';\n}\n\nfunction processTextOrObjNode (object, key, level, ajPath) {\n  const result = this.j2x(object, level + 1, ajPath.concat(key));\n  if (object[this.options.textNodeName] !== undefined && Object.keys(object).length === 1) {\n    return this.buildTextValNode(object[this.options.textNodeName], key, result.attrStr, level);\n  } else {\n    return this.buildObjectNode(result.val, key, result.attrStr, level);\n  }\n}\n\nBuilder.prototype.buildObjectNode = function(val, key, attrStr, level) {\n  if(val === \"\"){\n    if(key[0] === \"?\") return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar;\n    else {\n      return this.indentate(level) + '<' + key + attrStr + this.closeTag(key) + this.tagEndChar;\n    }\n  }else{\n\n    let tagEndExp = '</' + key + this.tagEndChar;\n    let piClosingChar = \"\";\n    \n    if(key[0] === \"?\") {\n      piClosingChar = \"?\";\n      tagEndExp = \"\";\n    }\n  \n    // attrStr is an empty string in case the attribute came as undefined or null\n    if ((attrStr || attrStr === '') && val.indexOf('<') === -1) {\n      return ( this.indentate(level) + '<' +  key + attrStr + piClosingChar + '>' + val + tagEndExp );\n    } else if (this.options.commentPropName !== false && key === this.options.commentPropName && piClosingChar.length === 0) {\n      return this.indentate(level) + `<!--${val}-->` + this.newLine;\n    }else {\n      return (\n        this.indentate(level) + '<' + key + attrStr + piClosingChar + this.tagEndChar +\n        val +\n        this.indentate(level) + tagEndExp    );\n    }\n  }\n}\n\nBuilder.prototype.closeTag = function(key){\n  let closeTag = \"\";\n  if(this.options.unpairedTags.indexOf(key) !== -1){ //unpaired\n    if(!this.options.suppressUnpairedNode) closeTag = \"/\"\n  }else if(this.options.suppressEmptyNode){ //empty\n    closeTag = \"/\";\n  }else{\n    closeTag = `></${key}`\n  }\n  return closeTag;\n}\n\nfunction buildEmptyObjNode(val, key, attrStr, level) {\n  if (val !== '') {\n    return this.buildObjectNode(val, key, attrStr, level);\n  } else {\n    if(key[0] === \"?\") return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar;\n    else {\n      return  this.indentate(level) + '<' + key + attrStr + '/' + this.tagEndChar;\n      // return this.buildTagStr(level,key, attrStr);\n    }\n  }\n}\n\nBuilder.prototype.buildTextValNode = function(val, key, attrStr, level) {\n  if (this.options.cdataPropName !== false && key === this.options.cdataPropName) {\n    return this.indentate(level) + `<![CDATA[${val}]]>` +  this.newLine;\n  }else if (this.options.commentPropName !== false && key === this.options.commentPropName) {\n    return this.indentate(level) + `<!--${val}-->` +  this.newLine;\n  }else if(key[0] === \"?\") {//PI tag\n    return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar; \n  }else{\n    let textValue = this.options.tagValueProcessor(key, val);\n    textValue = this.replaceEntitiesValue(textValue);\n  \n    if( textValue === ''){\n      return this.indentate(level) + '<' + key + attrStr + this.closeTag(key) + this.tagEndChar;\n    }else{\n      return this.indentate(level) + '<' + key + attrStr + '>' +\n         textValue +\n        '</' + key + this.tagEndChar;\n    }\n  }\n}\n\nBuilder.prototype.replaceEntitiesValue = function(textValue){\n  if(textValue && textValue.length > 0 && this.options.processEntities){\n    for (let i=0; i<this.options.entities.length; i++) {\n      const entity = this.options.entities[i];\n      textValue = textValue.replace(entity.regex, entity.val);\n    }\n  }\n  return textValue;\n}\n\nfunction indentate(level) {\n  return this.options.indentBy.repeat(level);\n}\n\nfunction isAttribute(name /*, options*/) {\n  if (name.startsWith(this.options.attributeNamePrefix) && name !== this.options.textNodeName) {\n    return name.substr(this.attrPrefixLen);\n  } else {\n    return false;\n  }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-xml/node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-xml/node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@azure/core-xml/node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ toXml)\n/* harmony export */ });\nconst EOL = \"\\n\";\n\n/**\n * \n * @param {array} jArray \n * @param {any} options \n * @returns \n */\nfunction toXml(jArray, options) {\n    let indentation = \"\";\n    if (options.format && options.indentBy.length > 0) {\n        indentation = EOL;\n    }\n    return arrToStr(jArray, options, \"\", indentation);\n}\n\nfunction arrToStr(arr, options, jPath, indentation) {\n    let xmlStr = \"\";\n    let isPreviousElementTag = false;\n\n    for (let i = 0; i < arr.length; i++) {\n        const tagObj = arr[i];\n        const tagName = propName(tagObj);\n        if(tagName === undefined) continue;\n\n        let newJPath = \"\";\n        if (jPath.length === 0) newJPath = tagName\n        else newJPath = `${jPath}.${tagName}`;\n\n        if (tagName === options.textNodeName) {\n            let tagText = tagObj[tagName];\n            if (!isStopNode(newJPath, options)) {\n                tagText = options.tagValueProcessor(tagName, tagText);\n                tagText = replaceEntitiesValue(tagText, options);\n            }\n            if (isPreviousElementTag) {\n                xmlStr += indentation;\n            }\n            xmlStr += tagText;\n            isPreviousElementTag = false;\n            continue;\n        } else if (tagName === options.cdataPropName) {\n            if (isPreviousElementTag) {\n                xmlStr += indentation;\n            }\n            xmlStr += `<![CDATA[${tagObj[tagName][0][options.textNodeName]}]]>`;\n            isPreviousElementTag = false;\n            continue;\n        } else if (tagName === options.commentPropName) {\n            xmlStr += indentation + `<!--${tagObj[tagName][0][options.textNodeName]}-->`;\n            isPreviousElementTag = true;\n            continue;\n        } else if (tagName[0] === \"?\") {\n            const attStr = attr_to_str(tagObj[\":@\"], options);\n            const tempInd = tagName === \"?xml\" ? \"\" : indentation;\n            let piTextNodeName = tagObj[tagName][0][options.textNodeName];\n            piTextNodeName = piTextNodeName.length !== 0 ? \" \" + piTextNodeName : \"\"; //remove extra spacing\n            xmlStr += tempInd + `<${tagName}${piTextNodeName}${attStr}?>`;\n            isPreviousElementTag = true;\n            continue;\n        }\n        let newIdentation = indentation;\n        if (newIdentation !== \"\") {\n            newIdentation += options.indentBy;\n        }\n        const attStr = attr_to_str(tagObj[\":@\"], options);\n        const tagStart = indentation + `<${tagName}${attStr}`;\n        const tagValue = arrToStr(tagObj[tagName], options, newJPath, newIdentation);\n        if (options.unpairedTags.indexOf(tagName) !== -1) {\n            if (options.suppressUnpairedNode) xmlStr += tagStart + \">\";\n            else xmlStr += tagStart + \"/>\";\n        } else if ((!tagValue || tagValue.length === 0) && options.suppressEmptyNode) {\n            xmlStr += tagStart + \"/>\";\n        } else if (tagValue && tagValue.endsWith(\">\")) {\n            xmlStr += tagStart + `>${tagValue}${indentation}</${tagName}>`;\n        } else {\n            xmlStr += tagStart + \">\";\n            if (tagValue && indentation !== \"\" && (tagValue.includes(\"/>\") || tagValue.includes(\"</\"))) {\n                xmlStr += indentation + options.indentBy + tagValue + indentation;\n            } else {\n                xmlStr += tagValue;\n            }\n            xmlStr += `</${tagName}>`;\n        }\n        isPreviousElementTag = true;\n    }\n\n    return xmlStr;\n}\n\nfunction propName(obj) {\n    const keys = Object.keys(obj);\n    for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        if(!obj.hasOwnProperty(key)) continue;\n        if (key !== \":@\") return key;\n    }\n}\n\nfunction attr_to_str(attrMap, options) {\n    let attrStr = \"\";\n    if (attrMap && !options.ignoreAttributes) {\n        for (let attr in attrMap) {\n            if(!attrMap.hasOwnProperty(attr)) continue;\n            let attrVal = options.attributeValueProcessor(attr, attrMap[attr]);\n            attrVal = replaceEntitiesValue(attrVal, options);\n            if (attrVal === true && options.suppressBooleanAttributes) {\n                attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}`;\n            } else {\n                attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}=\"${attrVal}\"`;\n            }\n        }\n    }\n    return attrStr;\n}\n\nfunction isStopNode(jPath, options) {\n    jPath = jPath.substr(0, jPath.length - options.textNodeName.length - 1);\n    let tagName = jPath.substr(jPath.lastIndexOf(\".\") + 1);\n    for (let index in options.stopNodes) {\n        if (options.stopNodes[index] === jPath || options.stopNodes[index] === \"*.\" + tagName) return true;\n    }\n    return false;\n}\n\nfunction replaceEntitiesValue(textValue, options) {\n    if (textValue && textValue.length > 0 && options.processEntities) {\n        for (let i = 0; i < options.entities.length; i++) {\n            const entity = options.entities[i];\n            textValue = textValue.replace(entity.regex, entity.val);\n        }\n    }\n    return textValue;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-xml/node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-xml/node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@azure/core-xml/node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ readDocType)\n/* harmony export */ });\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util.js */ \"(rsc)/./node_modules/@azure/core-xml/node_modules/fast-xml-parser/src/util.js\");\n\n\n//TODO: handle comments\nfunction readDocType(xmlData, i){\n    \n    const entities = {};\n    if( xmlData[i + 3] === 'O' &&\n         xmlData[i + 4] === 'C' &&\n         xmlData[i + 5] === 'T' &&\n         xmlData[i + 6] === 'Y' &&\n         xmlData[i + 7] === 'P' &&\n         xmlData[i + 8] === 'E')\n    {    \n        i = i+9;\n        let angleBracketsCount = 1;\n        let hasBody = false, comment = false;\n        let exp = \"\";\n        for(;i<xmlData.length;i++){\n            if (xmlData[i] === '<' && !comment) { //Determine the tag type\n                if( hasBody && isEntity(xmlData, i)){\n                    i += 7; \n                    let entityName, val;\n                    [entityName, val,i] = readEntityExp(xmlData,i+1);\n                    if(val.indexOf(\"&\") === -1) //Parameter entities are not supported\n                        entities[ validateEntityName(entityName) ] = {\n                            regx : RegExp( `&${entityName};`,\"g\"),\n                            val: val\n                        };\n                }\n                else if( hasBody && isElement(xmlData, i))  i += 8;//Not supported\n                else if( hasBody && isAttlist(xmlData, i))  i += 8;//Not supported\n                else if( hasBody && isNotation(xmlData, i)) i += 9;//Not supported\n                else if( isComment)                         comment = true;\n                else                                        throw new Error(\"Invalid DOCTYPE\");\n\n                angleBracketsCount++;\n                exp = \"\";\n            } else if (xmlData[i] === '>') { //Read tag content\n                if(comment){\n                    if( xmlData[i - 1] === \"-\" && xmlData[i - 2] === \"-\"){\n                        comment = false;\n                        angleBracketsCount--;\n                    }\n                }else{\n                    angleBracketsCount--;\n                }\n                if (angleBracketsCount === 0) {\n                  break;\n                }\n            }else if( xmlData[i] === '['){\n                hasBody = true;\n            }else{\n                exp += xmlData[i];\n            }\n        }\n        if(angleBracketsCount !== 0){\n            throw new Error(`Unclosed DOCTYPE`);\n        }\n    }else{\n        throw new Error(`Invalid Tag instead of DOCTYPE`);\n    }\n    return {entities, i};\n}\n\nfunction readEntityExp(xmlData,i){\n    //External entities are not supported\n    //    <!ENTITY ext SYSTEM \"http://normal-website.com\" >\n\n    //Parameter entities are not supported\n    //    <!ENTITY entityname \"&anotherElement;\">\n\n    //Internal entities are supported\n    //    <!ENTITY entityname \"replacement text\">\n    \n    //read EntityName\n    let entityName = \"\";\n    for (; i < xmlData.length && (xmlData[i] !== \"'\" && xmlData[i] !== '\"' ); i++) {\n        // if(xmlData[i] === \" \") continue;\n        // else \n        entityName += xmlData[i];\n    }\n    entityName = entityName.trim();\n    if(entityName.indexOf(\" \") !== -1) throw new Error(\"External entites are not supported\");\n\n    //read Entity Value\n    const startChar = xmlData[i++];\n    let val = \"\"\n    for (; i < xmlData.length && xmlData[i] !== startChar ; i++) {\n        val += xmlData[i];\n    }\n    return [entityName, val, i];\n}\n\nfunction isComment(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === '-' &&\n    xmlData[i+3] === '-') return true\n    return false\n}\nfunction isEntity(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'E' &&\n    xmlData[i+3] === 'N' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'I' &&\n    xmlData[i+6] === 'T' &&\n    xmlData[i+7] === 'Y') return true\n    return false\n}\nfunction isElement(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'E' &&\n    xmlData[i+3] === 'L' &&\n    xmlData[i+4] === 'E' &&\n    xmlData[i+5] === 'M' &&\n    xmlData[i+6] === 'E' &&\n    xmlData[i+7] === 'N' &&\n    xmlData[i+8] === 'T') return true\n    return false\n}\n\nfunction isAttlist(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'A' &&\n    xmlData[i+3] === 'T' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'L' &&\n    xmlData[i+6] === 'I' &&\n    xmlData[i+7] === 'S' &&\n    xmlData[i+8] === 'T') return true\n    return false\n}\nfunction isNotation(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'N' &&\n    xmlData[i+3] === 'O' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'A' &&\n    xmlData[i+6] === 'T' &&\n    xmlData[i+7] === 'I' &&\n    xmlData[i+8] === 'O' &&\n    xmlData[i+9] === 'N') return true\n    return false\n}\n\nfunction validateEntityName(name){\n    if ((0,_util_js__WEBPACK_IMPORTED_MODULE_0__.isName)(name))\n\treturn name;\n    else\n        throw new Error(`Invalid entity name ${name}`);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUteG1sL25vZGVfbW9kdWxlcy9mYXN0LXhtbC1wYXJzZXIvc3JjL3htbHBhcnNlci9Eb2NUeXBlUmVhZGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQWtDOztBQUVsQztBQUNlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLGlCQUFpQjtBQUM5QixrREFBa0Q7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0NBQStDLFlBQVk7QUFDM0Q7QUFDQTtBQUNBO0FBQ0EsbUVBQW1FO0FBQ25FLG1FQUFtRTtBQUNuRSxtRUFBbUU7QUFDbkU7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsY0FBYywrQkFBK0I7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLCtDQUErQzs7QUFFL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsbUVBQW1FO0FBQzlFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGlEQUFpRDtBQUM1RDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFFBQVEsZ0RBQU07QUFDZDtBQUNBO0FBQ0EsK0NBQStDLEtBQUs7QUFDcEQiLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWN0b3J3aWxzb24vRGVza3RvcC9wcm9qZWN0cy9FWlZpei9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUteG1sL25vZGVfbW9kdWxlcy9mYXN0LXhtbC1wYXJzZXIvc3JjL3htbHBhcnNlci9Eb2NUeXBlUmVhZGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7aXNOYW1lfSBmcm9tICcuLi91dGlsLmpzJztcblxuLy9UT0RPOiBoYW5kbGUgY29tbWVudHNcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlYWREb2NUeXBlKHhtbERhdGEsIGkpe1xuICAgIFxuICAgIGNvbnN0IGVudGl0aWVzID0ge307XG4gICAgaWYoIHhtbERhdGFbaSArIDNdID09PSAnTycgJiZcbiAgICAgICAgIHhtbERhdGFbaSArIDRdID09PSAnQycgJiZcbiAgICAgICAgIHhtbERhdGFbaSArIDVdID09PSAnVCcgJiZcbiAgICAgICAgIHhtbERhdGFbaSArIDZdID09PSAnWScgJiZcbiAgICAgICAgIHhtbERhdGFbaSArIDddID09PSAnUCcgJiZcbiAgICAgICAgIHhtbERhdGFbaSArIDhdID09PSAnRScpXG4gICAgeyAgICBcbiAgICAgICAgaSA9IGkrOTtcbiAgICAgICAgbGV0IGFuZ2xlQnJhY2tldHNDb3VudCA9IDE7XG4gICAgICAgIGxldCBoYXNCb2R5ID0gZmFsc2UsIGNvbW1lbnQgPSBmYWxzZTtcbiAgICAgICAgbGV0IGV4cCA9IFwiXCI7XG4gICAgICAgIGZvcig7aTx4bWxEYXRhLmxlbmd0aDtpKyspe1xuICAgICAgICAgICAgaWYgKHhtbERhdGFbaV0gPT09ICc8JyAmJiAhY29tbWVudCkgeyAvL0RldGVybWluZSB0aGUgdGFnIHR5cGVcbiAgICAgICAgICAgICAgICBpZiggaGFzQm9keSAmJiBpc0VudGl0eSh4bWxEYXRhLCBpKSl7XG4gICAgICAgICAgICAgICAgICAgIGkgKz0gNzsgXG4gICAgICAgICAgICAgICAgICAgIGxldCBlbnRpdHlOYW1lLCB2YWw7XG4gICAgICAgICAgICAgICAgICAgIFtlbnRpdHlOYW1lLCB2YWwsaV0gPSByZWFkRW50aXR5RXhwKHhtbERhdGEsaSsxKTtcbiAgICAgICAgICAgICAgICAgICAgaWYodmFsLmluZGV4T2YoXCImXCIpID09PSAtMSkgLy9QYXJhbWV0ZXIgZW50aXRpZXMgYXJlIG5vdCBzdXBwb3J0ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIGVudGl0aWVzWyB2YWxpZGF0ZUVudGl0eU5hbWUoZW50aXR5TmFtZSkgXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWd4IDogUmVnRXhwKCBgJiR7ZW50aXR5TmFtZX07YCxcImdcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsOiB2YWxcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYoIGhhc0JvZHkgJiYgaXNFbGVtZW50KHhtbERhdGEsIGkpKSAgaSArPSA4Oy8vTm90IHN1cHBvcnRlZFxuICAgICAgICAgICAgICAgIGVsc2UgaWYoIGhhc0JvZHkgJiYgaXNBdHRsaXN0KHhtbERhdGEsIGkpKSAgaSArPSA4Oy8vTm90IHN1cHBvcnRlZFxuICAgICAgICAgICAgICAgIGVsc2UgaWYoIGhhc0JvZHkgJiYgaXNOb3RhdGlvbih4bWxEYXRhLCBpKSkgaSArPSA5Oy8vTm90IHN1cHBvcnRlZFxuICAgICAgICAgICAgICAgIGVsc2UgaWYoIGlzQ29tbWVudCkgICAgICAgICAgICAgICAgICAgICAgICAgY29tbWVudCA9IHRydWU7XG4gICAgICAgICAgICAgICAgZWxzZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIERPQ1RZUEVcIik7XG5cbiAgICAgICAgICAgICAgICBhbmdsZUJyYWNrZXRzQ291bnQrKztcbiAgICAgICAgICAgICAgICBleHAgPSBcIlwiO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh4bWxEYXRhW2ldID09PSAnPicpIHsgLy9SZWFkIHRhZyBjb250ZW50XG4gICAgICAgICAgICAgICAgaWYoY29tbWVudCl7XG4gICAgICAgICAgICAgICAgICAgIGlmKCB4bWxEYXRhW2kgLSAxXSA9PT0gXCItXCIgJiYgeG1sRGF0YVtpIC0gMl0gPT09IFwiLVwiKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1lbnQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuZ2xlQnJhY2tldHNDb3VudC0tO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgIGFuZ2xlQnJhY2tldHNDb3VudC0tO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoYW5nbGVCcmFja2V0c0NvdW50ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9ZWxzZSBpZiggeG1sRGF0YVtpXSA9PT0gJ1snKXtcbiAgICAgICAgICAgICAgICBoYXNCb2R5ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIGV4cCArPSB4bWxEYXRhW2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmKGFuZ2xlQnJhY2tldHNDb3VudCAhPT0gMCl7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuY2xvc2VkIERPQ1RZUEVgKTtcbiAgICAgICAgfVxuICAgIH1lbHNle1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgVGFnIGluc3RlYWQgb2YgRE9DVFlQRWApO1xuICAgIH1cbiAgICByZXR1cm4ge2VudGl0aWVzLCBpfTtcbn1cblxuZnVuY3Rpb24gcmVhZEVudGl0eUV4cCh4bWxEYXRhLGkpe1xuICAgIC8vRXh0ZXJuYWwgZW50aXRpZXMgYXJlIG5vdCBzdXBwb3J0ZWRcbiAgICAvLyAgICA8IUVOVElUWSBleHQgU1lTVEVNIFwiaHR0cDovL25vcm1hbC13ZWJzaXRlLmNvbVwiID5cblxuICAgIC8vUGFyYW1ldGVyIGVudGl0aWVzIGFyZSBub3Qgc3VwcG9ydGVkXG4gICAgLy8gICAgPCFFTlRJVFkgZW50aXR5bmFtZSBcIiZhbm90aGVyRWxlbWVudDtcIj5cblxuICAgIC8vSW50ZXJuYWwgZW50aXRpZXMgYXJlIHN1cHBvcnRlZFxuICAgIC8vICAgIDwhRU5USVRZIGVudGl0eW5hbWUgXCJyZXBsYWNlbWVudCB0ZXh0XCI+XG4gICAgXG4gICAgLy9yZWFkIEVudGl0eU5hbWVcbiAgICBsZXQgZW50aXR5TmFtZSA9IFwiXCI7XG4gICAgZm9yICg7IGkgPCB4bWxEYXRhLmxlbmd0aCAmJiAoeG1sRGF0YVtpXSAhPT0gXCInXCIgJiYgeG1sRGF0YVtpXSAhPT0gJ1wiJyApOyBpKyspIHtcbiAgICAgICAgLy8gaWYoeG1sRGF0YVtpXSA9PT0gXCIgXCIpIGNvbnRpbnVlO1xuICAgICAgICAvLyBlbHNlIFxuICAgICAgICBlbnRpdHlOYW1lICs9IHhtbERhdGFbaV07XG4gICAgfVxuICAgIGVudGl0eU5hbWUgPSBlbnRpdHlOYW1lLnRyaW0oKTtcbiAgICBpZihlbnRpdHlOYW1lLmluZGV4T2YoXCIgXCIpICE9PSAtMSkgdGhyb3cgbmV3IEVycm9yKFwiRXh0ZXJuYWwgZW50aXRlcyBhcmUgbm90IHN1cHBvcnRlZFwiKTtcblxuICAgIC8vcmVhZCBFbnRpdHkgVmFsdWVcbiAgICBjb25zdCBzdGFydENoYXIgPSB4bWxEYXRhW2krK107XG4gICAgbGV0IHZhbCA9IFwiXCJcbiAgICBmb3IgKDsgaSA8IHhtbERhdGEubGVuZ3RoICYmIHhtbERhdGFbaV0gIT09IHN0YXJ0Q2hhciA7IGkrKykge1xuICAgICAgICB2YWwgKz0geG1sRGF0YVtpXTtcbiAgICB9XG4gICAgcmV0dXJuIFtlbnRpdHlOYW1lLCB2YWwsIGldO1xufVxuXG5mdW5jdGlvbiBpc0NvbW1lbnQoeG1sRGF0YSwgaSl7XG4gICAgaWYoeG1sRGF0YVtpKzFdID09PSAnIScgJiZcbiAgICB4bWxEYXRhW2krMl0gPT09ICctJyAmJlxuICAgIHhtbERhdGFbaSszXSA9PT0gJy0nKSByZXR1cm4gdHJ1ZVxuICAgIHJldHVybiBmYWxzZVxufVxuZnVuY3Rpb24gaXNFbnRpdHkoeG1sRGF0YSwgaSl7XG4gICAgaWYoeG1sRGF0YVtpKzFdID09PSAnIScgJiZcbiAgICB4bWxEYXRhW2krMl0gPT09ICdFJyAmJlxuICAgIHhtbERhdGFbaSszXSA9PT0gJ04nICYmXG4gICAgeG1sRGF0YVtpKzRdID09PSAnVCcgJiZcbiAgICB4bWxEYXRhW2krNV0gPT09ICdJJyAmJlxuICAgIHhtbERhdGFbaSs2XSA9PT0gJ1QnICYmXG4gICAgeG1sRGF0YVtpKzddID09PSAnWScpIHJldHVybiB0cnVlXG4gICAgcmV0dXJuIGZhbHNlXG59XG5mdW5jdGlvbiBpc0VsZW1lbnQoeG1sRGF0YSwgaSl7XG4gICAgaWYoeG1sRGF0YVtpKzFdID09PSAnIScgJiZcbiAgICB4bWxEYXRhW2krMl0gPT09ICdFJyAmJlxuICAgIHhtbERhdGFbaSszXSA9PT0gJ0wnICYmXG4gICAgeG1sRGF0YVtpKzRdID09PSAnRScgJiZcbiAgICB4bWxEYXRhW2krNV0gPT09ICdNJyAmJlxuICAgIHhtbERhdGFbaSs2XSA9PT0gJ0UnICYmXG4gICAgeG1sRGF0YVtpKzddID09PSAnTicgJiZcbiAgICB4bWxEYXRhW2krOF0gPT09ICdUJykgcmV0dXJuIHRydWVcbiAgICByZXR1cm4gZmFsc2Vcbn1cblxuZnVuY3Rpb24gaXNBdHRsaXN0KHhtbERhdGEsIGkpe1xuICAgIGlmKHhtbERhdGFbaSsxXSA9PT0gJyEnICYmXG4gICAgeG1sRGF0YVtpKzJdID09PSAnQScgJiZcbiAgICB4bWxEYXRhW2krM10gPT09ICdUJyAmJlxuICAgIHhtbERhdGFbaSs0XSA9PT0gJ1QnICYmXG4gICAgeG1sRGF0YVtpKzVdID09PSAnTCcgJiZcbiAgICB4bWxEYXRhW2krNl0gPT09ICdJJyAmJlxuICAgIHhtbERhdGFbaSs3XSA9PT0gJ1MnICYmXG4gICAgeG1sRGF0YVtpKzhdID09PSAnVCcpIHJldHVybiB0cnVlXG4gICAgcmV0dXJuIGZhbHNlXG59XG5mdW5jdGlvbiBpc05vdGF0aW9uKHhtbERhdGEsIGkpe1xuICAgIGlmKHhtbERhdGFbaSsxXSA9PT0gJyEnICYmXG4gICAgeG1sRGF0YVtpKzJdID09PSAnTicgJiZcbiAgICB4bWxEYXRhW2krM10gPT09ICdPJyAmJlxuICAgIHhtbERhdGFbaSs0XSA9PT0gJ1QnICYmXG4gICAgeG1sRGF0YVtpKzVdID09PSAnQScgJiZcbiAgICB4bWxEYXRhW2krNl0gPT09ICdUJyAmJlxuICAgIHhtbERhdGFbaSs3XSA9PT0gJ0knICYmXG4gICAgeG1sRGF0YVtpKzhdID09PSAnTycgJiZcbiAgICB4bWxEYXRhW2krOV0gPT09ICdOJykgcmV0dXJuIHRydWVcbiAgICByZXR1cm4gZmFsc2Vcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVFbnRpdHlOYW1lKG5hbWUpe1xuICAgIGlmIChpc05hbWUobmFtZSkpXG5cdHJldHVybiBuYW1lO1xuICAgIGVsc2VcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGVudGl0eSBuYW1lICR7bmFtZX1gKTtcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-xml/node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-xml/node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@azure/core-xml/node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildOptions: () => (/* binding */ buildOptions),\n/* harmony export */   defaultOptions: () => (/* binding */ defaultOptions)\n/* harmony export */ });\n\nconst defaultOptions = {\n    preserveOrder: false,\n    attributeNamePrefix: '@_',\n    attributesGroupName: false,\n    textNodeName: '#text',\n    ignoreAttributes: true,\n    removeNSPrefix: false, // remove NS from tag name or attribute name if true\n    allowBooleanAttributes: false, //a tag can have attributes without any value\n    //ignoreRootElement : false,\n    parseTagValue: true,\n    parseAttributeValue: false,\n    trimValues: true, //Trim string values of tag and attributes\n    cdataPropName: false,\n    numberParseOptions: {\n      hex: true,\n      leadingZeros: true,\n      eNotation: true\n    },\n    tagValueProcessor: function(tagName, val) {\n      return val;\n    },\n    attributeValueProcessor: function(attrName, val) {\n      return val;\n    },\n    stopNodes: [], //nested tags will not be parsed even for errors\n    alwaysCreateTextNode: false,\n    isArray: () => false,\n    commentPropName: false,\n    unpairedTags: [],\n    processEntities: true,\n    htmlEntities: false,\n    ignoreDeclaration: false,\n    ignorePiTags: false,\n    transformTagName: false,\n    transformAttributeName: false,\n    updateTag: function(tagName, jPath, attrs){\n      return tagName\n    },\n    // skipEmptyListItem: false\n};\n   \nconst buildOptions = function(options) {\n    return Object.assign({}, defaultOptions, options);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUteG1sL25vZGVfbW9kdWxlcy9mYXN0LXhtbC1wYXJzZXIvc3JjL3htbHBhcnNlci9PcHRpb25zQnVpbGRlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDTztBQUNQLDJCQUEyQjtBQUMzQiIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcndpbHNvbi9EZXNrdG9wL3Byb2plY3RzL0VaVml6L25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS14bWwvbm9kZV9tb2R1bGVzL2Zhc3QteG1sLXBhcnNlci9zcmMveG1scGFyc2VyL09wdGlvbnNCdWlsZGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlxuZXhwb3J0IGNvbnN0IGRlZmF1bHRPcHRpb25zID0ge1xuICAgIHByZXNlcnZlT3JkZXI6IGZhbHNlLFxuICAgIGF0dHJpYnV0ZU5hbWVQcmVmaXg6ICdAXycsXG4gICAgYXR0cmlidXRlc0dyb3VwTmFtZTogZmFsc2UsXG4gICAgdGV4dE5vZGVOYW1lOiAnI3RleHQnLFxuICAgIGlnbm9yZUF0dHJpYnV0ZXM6IHRydWUsXG4gICAgcmVtb3ZlTlNQcmVmaXg6IGZhbHNlLCAvLyByZW1vdmUgTlMgZnJvbSB0YWcgbmFtZSBvciBhdHRyaWJ1dGUgbmFtZSBpZiB0cnVlXG4gICAgYWxsb3dCb29sZWFuQXR0cmlidXRlczogZmFsc2UsIC8vYSB0YWcgY2FuIGhhdmUgYXR0cmlidXRlcyB3aXRob3V0IGFueSB2YWx1ZVxuICAgIC8vaWdub3JlUm9vdEVsZW1lbnQgOiBmYWxzZSxcbiAgICBwYXJzZVRhZ1ZhbHVlOiB0cnVlLFxuICAgIHBhcnNlQXR0cmlidXRlVmFsdWU6IGZhbHNlLFxuICAgIHRyaW1WYWx1ZXM6IHRydWUsIC8vVHJpbSBzdHJpbmcgdmFsdWVzIG9mIHRhZyBhbmQgYXR0cmlidXRlc1xuICAgIGNkYXRhUHJvcE5hbWU6IGZhbHNlLFxuICAgIG51bWJlclBhcnNlT3B0aW9uczoge1xuICAgICAgaGV4OiB0cnVlLFxuICAgICAgbGVhZGluZ1plcm9zOiB0cnVlLFxuICAgICAgZU5vdGF0aW9uOiB0cnVlXG4gICAgfSxcbiAgICB0YWdWYWx1ZVByb2Nlc3NvcjogZnVuY3Rpb24odGFnTmFtZSwgdmFsKSB7XG4gICAgICByZXR1cm4gdmFsO1xuICAgIH0sXG4gICAgYXR0cmlidXRlVmFsdWVQcm9jZXNzb3I6IGZ1bmN0aW9uKGF0dHJOYW1lLCB2YWwpIHtcbiAgICAgIHJldHVybiB2YWw7XG4gICAgfSxcbiAgICBzdG9wTm9kZXM6IFtdLCAvL25lc3RlZCB0YWdzIHdpbGwgbm90IGJlIHBhcnNlZCBldmVuIGZvciBlcnJvcnNcbiAgICBhbHdheXNDcmVhdGVUZXh0Tm9kZTogZmFsc2UsXG4gICAgaXNBcnJheTogKCkgPT4gZmFsc2UsXG4gICAgY29tbWVudFByb3BOYW1lOiBmYWxzZSxcbiAgICB1bnBhaXJlZFRhZ3M6IFtdLFxuICAgIHByb2Nlc3NFbnRpdGllczogdHJ1ZSxcbiAgICBodG1sRW50aXRpZXM6IGZhbHNlLFxuICAgIGlnbm9yZURlY2xhcmF0aW9uOiBmYWxzZSxcbiAgICBpZ25vcmVQaVRhZ3M6IGZhbHNlLFxuICAgIHRyYW5zZm9ybVRhZ05hbWU6IGZhbHNlLFxuICAgIHRyYW5zZm9ybUF0dHJpYnV0ZU5hbWU6IGZhbHNlLFxuICAgIHVwZGF0ZVRhZzogZnVuY3Rpb24odGFnTmFtZSwgalBhdGgsIGF0dHJzKXtcbiAgICAgIHJldHVybiB0YWdOYW1lXG4gICAgfSxcbiAgICAvLyBza2lwRW1wdHlMaXN0SXRlbTogZmFsc2Vcbn07XG4gICBcbmV4cG9ydCBjb25zdCBidWlsZE9wdGlvbnMgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRPcHRpb25zLCBvcHRpb25zKTtcbn07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-xml/node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-xml/node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@azure/core-xml/node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ OrderedObjParser)\n/* harmony export */ });\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util.js */ \"(rsc)/./node_modules/@azure/core-xml/node_modules/fast-xml-parser/src/util.js\");\n/* harmony import */ var _xmlNode_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./xmlNode.js */ \"(rsc)/./node_modules/@azure/core-xml/node_modules/fast-xml-parser/src/xmlparser/xmlNode.js\");\n/* harmony import */ var _DocTypeReader_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./DocTypeReader.js */ \"(rsc)/./node_modules/@azure/core-xml/node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js\");\n/* harmony import */ var strnum__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! strnum */ \"(rsc)/./node_modules/@azure/core-xml/node_modules/strnum/strnum.js\");\n/* harmony import */ var _ignoreAttributes_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ignoreAttributes.js */ \"(rsc)/./node_modules/@azure/core-xml/node_modules/fast-xml-parser/src/ignoreAttributes.js\");\n\n///@ts-check\n\n\n\n\n\n\n\n// const regx =\n//   '<((!\\\\[CDATA\\\\[([\\\\s\\\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\\\/)(NAME)\\\\s*>))([^<]*)'\n//   .replace(/NAME/g, util.nameRegexp);\n\n//const tagsRegx = new RegExp(\"<(\\\\/?[\\\\w:\\\\-\\._]+)([^>]*)>(\\\\s*\"+cdataRegx+\")*([^<]+)?\",\"g\");\n//const tagsRegx = new RegExp(\"<(\\\\/?)((\\\\w*:)?([\\\\w:\\\\-\\._]+))([^>]*)>([^<]*)(\"+cdataRegx+\"([^<]*))*([^<]+)?\",\"g\");\n\nclass OrderedObjParser{\n  constructor(options){\n    this.options = options;\n    this.currentNode = null;\n    this.tagsNodeStack = [];\n    this.docTypeEntities = {};\n    this.lastEntities = {\n      \"apos\" : { regex: /&(apos|#39|#x27);/g, val : \"'\"},\n      \"gt\" : { regex: /&(gt|#62|#x3E);/g, val : \">\"},\n      \"lt\" : { regex: /&(lt|#60|#x3C);/g, val : \"<\"},\n      \"quot\" : { regex: /&(quot|#34|#x22);/g, val : \"\\\"\"},\n    };\n    this.ampEntity = { regex: /&(amp|#38|#x26);/g, val : \"&\"};\n    this.htmlEntities = {\n      \"space\": { regex: /&(nbsp|#160);/g, val: \" \" },\n      // \"lt\" : { regex: /&(lt|#60);/g, val: \"<\" },\n      // \"gt\" : { regex: /&(gt|#62);/g, val: \">\" },\n      // \"amp\" : { regex: /&(amp|#38);/g, val: \"&\" },\n      // \"quot\" : { regex: /&(quot|#34);/g, val: \"\\\"\" },\n      // \"apos\" : { regex: /&(apos|#39);/g, val: \"'\" },\n      \"cent\" : { regex: /&(cent|#162);/g, val: \"¢\" },\n      \"pound\" : { regex: /&(pound|#163);/g, val: \"£\" },\n      \"yen\" : { regex: /&(yen|#165);/g, val: \"¥\" },\n      \"euro\" : { regex: /&(euro|#8364);/g, val: \"€\" },\n      \"copyright\" : { regex: /&(copy|#169);/g, val: \"©\" },\n      \"reg\" : { regex: /&(reg|#174);/g, val: \"®\" },\n      \"inr\" : { regex: /&(inr|#8377);/g, val: \"₹\" },\n      \"num_dec\": { regex: /&#([0-9]{1,7});/g, val : (_, str) => String.fromCodePoint(Number.parseInt(str, 10)) },\n      \"num_hex\": { regex: /&#x([0-9a-fA-F]{1,6});/g, val : (_, str) => String.fromCodePoint(Number.parseInt(str, 16)) },\n    };\n    this.addExternalEntities = addExternalEntities;\n    this.parseXml = parseXml;\n    this.parseTextData = parseTextData;\n    this.resolveNameSpace = resolveNameSpace;\n    this.buildAttributesMap = buildAttributesMap;\n    this.isItStopNode = isItStopNode;\n    this.replaceEntitiesValue = replaceEntitiesValue;\n    this.readStopNodeData = readStopNodeData;\n    this.saveTextToParentTag = saveTextToParentTag;\n    this.addChild = addChild;\n    this.ignoreAttributesFn = (0,_ignoreAttributes_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(this.options.ignoreAttributes)\n  }\n\n}\n\nfunction addExternalEntities(externalEntities){\n  const entKeys = Object.keys(externalEntities);\n  for (let i = 0; i < entKeys.length; i++) {\n    const ent = entKeys[i];\n    this.lastEntities[ent] = {\n       regex: new RegExp(\"&\"+ent+\";\",\"g\"),\n       val : externalEntities[ent]\n    }\n  }\n}\n\n/**\n * @param {string} val\n * @param {string} tagName\n * @param {string} jPath\n * @param {boolean} dontTrim\n * @param {boolean} hasAttributes\n * @param {boolean} isLeafNode\n * @param {boolean} escapeEntities\n */\nfunction parseTextData(val, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {\n  if (val !== undefined) {\n    if (this.options.trimValues && !dontTrim) {\n      val = val.trim();\n    }\n    if(val.length > 0){\n      if(!escapeEntities) val = this.replaceEntitiesValue(val);\n      \n      const newval = this.options.tagValueProcessor(tagName, val, jPath, hasAttributes, isLeafNode);\n      if(newval === null || newval === undefined){\n        //don't parse\n        return val;\n      }else if(typeof newval !== typeof val || newval !== val){\n        //overwrite\n        return newval;\n      }else if(this.options.trimValues){\n        return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n      }else{\n        const trimmedVal = val.trim();\n        if(trimmedVal === val){\n          return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n        }else{\n          return val;\n        }\n      }\n    }\n  }\n}\n\nfunction resolveNameSpace(tagname) {\n  if (this.options.removeNSPrefix) {\n    const tags = tagname.split(':');\n    const prefix = tagname.charAt(0) === '/' ? '/' : '';\n    if (tags[0] === 'xmlns') {\n      return '';\n    }\n    if (tags.length === 2) {\n      tagname = prefix + tags[1];\n    }\n  }\n  return tagname;\n}\n\n//TODO: change regex to capture NS\n//const attrsRegx = new RegExp(\"([\\\\w\\\\-\\\\.\\\\:]+)\\\\s*=\\\\s*(['\\\"])((.|\\n)*?)\\\\2\",\"gm\");\nconst attrsRegx = new RegExp('([^\\\\s=]+)\\\\s*(=\\\\s*([\\'\"])([\\\\s\\\\S]*?)\\\\3)?', 'gm');\n\nfunction buildAttributesMap(attrStr, jPath, tagName) {\n  if (this.options.ignoreAttributes !== true && typeof attrStr === 'string') {\n    // attrStr = attrStr.replace(/\\r?\\n/g, ' ');\n    //attrStr = attrStr || attrStr.trim();\n\n    const matches = (0,_util_js__WEBPACK_IMPORTED_MODULE_0__.getAllMatches)(attrStr, attrsRegx);\n    const len = matches.length; //don't make it inline\n    const attrs = {};\n    for (let i = 0; i < len; i++) {\n      const attrName = this.resolveNameSpace(matches[i][1]);\n      if (this.ignoreAttributesFn(attrName, jPath)) {\n        continue\n      }\n      let oldVal = matches[i][4];\n      let aName = this.options.attributeNamePrefix + attrName;\n      if (attrName.length) {\n        if (this.options.transformAttributeName) {\n          aName = this.options.transformAttributeName(aName);\n        }\n        if(aName === \"__proto__\") aName  = \"#__proto__\";\n        if (oldVal !== undefined) {\n          if (this.options.trimValues) {\n            oldVal = oldVal.trim();\n          }\n          oldVal = this.replaceEntitiesValue(oldVal);\n          const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);\n          if(newVal === null || newVal === undefined){\n            //don't parse\n            attrs[aName] = oldVal;\n          }else if(typeof newVal !== typeof oldVal || newVal !== oldVal){\n            //overwrite\n            attrs[aName] = newVal;\n          }else{\n            //parse\n            attrs[aName] = parseValue(\n              oldVal,\n              this.options.parseAttributeValue,\n              this.options.numberParseOptions\n            );\n          }\n        } else if (this.options.allowBooleanAttributes) {\n          attrs[aName] = true;\n        }\n      }\n    }\n    if (!Object.keys(attrs).length) {\n      return;\n    }\n    if (this.options.attributesGroupName) {\n      const attrCollection = {};\n      attrCollection[this.options.attributesGroupName] = attrs;\n      return attrCollection;\n    }\n    return attrs\n  }\n}\n\nconst parseXml = function(xmlData) {\n  xmlData = xmlData.replace(/\\r\\n?/g, \"\\n\"); //TODO: remove this line\n  const xmlObj = new _xmlNode_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]('!xml');\n  let currentNode = xmlObj;\n  let textData = \"\";\n  let jPath = \"\";\n  for(let i=0; i< xmlData.length; i++){//for each char in XML data\n    const ch = xmlData[i];\n    if(ch === '<'){\n      // const nextIndex = i+1;\n      // const _2ndChar = xmlData[nextIndex];\n      if( xmlData[i+1] === '/') {//Closing Tag\n        const closeIndex = findClosingIndex(xmlData, \">\", i, \"Closing Tag is not closed.\")\n        let tagName = xmlData.substring(i+2,closeIndex).trim();\n\n        if(this.options.removeNSPrefix){\n          const colonIndex = tagName.indexOf(\":\");\n          if(colonIndex !== -1){\n            tagName = tagName.substr(colonIndex+1);\n          }\n        }\n\n        if(this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n\n        if(currentNode){\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        }\n\n        //check if last tag of nested tag was unpaired tag\n        const lastTagName = jPath.substring(jPath.lastIndexOf(\".\")+1);\n        if(tagName && this.options.unpairedTags.indexOf(tagName) !== -1 ){\n          throw new Error(`Unpaired tag can not be used as closing tag: </${tagName}>`);\n        }\n        let propIndex = 0\n        if(lastTagName && this.options.unpairedTags.indexOf(lastTagName) !== -1 ){\n          propIndex = jPath.lastIndexOf('.', jPath.lastIndexOf('.')-1)\n          this.tagsNodeStack.pop();\n        }else{\n          propIndex = jPath.lastIndexOf(\".\");\n        }\n        jPath = jPath.substring(0, propIndex);\n\n        currentNode = this.tagsNodeStack.pop();//avoid recursion, set the parent tag scope\n        textData = \"\";\n        i = closeIndex;\n      } else if( xmlData[i+1] === '?') {\n\n        let tagData = readTagExp(xmlData,i, false, \"?>\");\n        if(!tagData) throw new Error(\"Pi Tag is not closed.\");\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        if( (this.options.ignoreDeclaration && tagData.tagName === \"?xml\") || this.options.ignorePiTags){\n\n        }else{\n  \n          const childNode = new _xmlNode_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](tagData.tagName);\n          childNode.add(this.options.textNodeName, \"\");\n          \n          if(tagData.tagName !== tagData.tagExp && tagData.attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagData.tagExp, jPath, tagData.tagName);\n          }\n          this.addChild(currentNode, childNode, jPath)\n\n        }\n\n\n        i = tagData.closeIndex + 1;\n      } else if(xmlData.substr(i + 1, 3) === '!--') {\n        const endIndex = findClosingIndex(xmlData, \"-->\", i+4, \"Comment is not closed.\")\n        if(this.options.commentPropName){\n          const comment = xmlData.substring(i + 4, endIndex - 2);\n\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n          currentNode.add(this.options.commentPropName, [ { [this.options.textNodeName] : comment } ]);\n        }\n        i = endIndex;\n      } else if( xmlData.substr(i + 1, 2) === '!D') {\n        const result = (0,_DocTypeReader_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(xmlData, i);\n        this.docTypeEntities = result.entities;\n        i = result.i;\n      }else if(xmlData.substr(i + 1, 2) === '![') {\n        const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"CDATA is not closed.\") - 2;\n        const tagExp = xmlData.substring(i + 9,closeIndex);\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n        let val = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true, true);\n        if(val == undefined) val = \"\";\n\n        //cdata should be set even if it is 0 length string\n        if(this.options.cdataPropName){\n          currentNode.add(this.options.cdataPropName, [ { [this.options.textNodeName] : tagExp } ]);\n        }else{\n          currentNode.add(this.options.textNodeName, val);\n        }\n        \n        i = closeIndex + 2;\n      }else {//Opening tag\n        let result = readTagExp(xmlData,i, this.options.removeNSPrefix);\n        let tagName= result.tagName;\n        const rawTagName = result.rawTagName;\n        let tagExp = result.tagExp;\n        let attrExpPresent = result.attrExpPresent;\n        let closeIndex = result.closeIndex;\n\n        if (this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n        \n        //save text as child node\n        if (currentNode && textData) {\n          if(currentNode.tagname !== '!xml'){\n            //when nested tag is found\n            textData = this.saveTextToParentTag(textData, currentNode, jPath, false);\n          }\n        }\n\n        //check if last tag was unpaired tag\n        const lastTag = currentNode;\n        if(lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1 ){\n          currentNode = this.tagsNodeStack.pop();\n          jPath = jPath.substring(0, jPath.lastIndexOf(\".\"));\n        }\n        if(tagName !== xmlObj.tagname){\n          jPath += jPath ? \".\" + tagName : tagName;\n        }\n        if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) {\n          let tagContent = \"\";\n          //self-closing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            if(tagName[tagName.length - 1] === \"/\"){ //remove trailing '/'\n              tagName = tagName.substr(0, tagName.length - 1);\n              jPath = jPath.substr(0, jPath.length - 1);\n              tagExp = tagName;\n            }else{\n              tagExp = tagExp.substr(0, tagExp.length - 1);\n            }\n            i = result.closeIndex;\n          }\n          //unpaired tag\n          else if(this.options.unpairedTags.indexOf(tagName) !== -1){\n            \n            i = result.closeIndex;\n          }\n          //normal tag\n          else{\n            //read until closing tag is found\n            const result = this.readStopNodeData(xmlData, rawTagName, closeIndex + 1);\n            if(!result) throw new Error(`Unexpected end of ${rawTagName}`);\n            i = result.i;\n            tagContent = result.tagContent;\n          }\n\n          const childNode = new _xmlNode_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](tagName);\n          if(tagName !== tagExp && attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n          }\n          if(tagContent) {\n            tagContent = this.parseTextData(tagContent, tagName, jPath, true, attrExpPresent, true, true);\n          }\n          \n          jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          childNode.add(this.options.textNodeName, tagContent);\n          \n          this.addChild(currentNode, childNode, jPath)\n        }else{\n  //selfClosing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            if(tagName[tagName.length - 1] === \"/\"){ //remove trailing '/'\n              tagName = tagName.substr(0, tagName.length - 1);\n              jPath = jPath.substr(0, jPath.length - 1);\n              tagExp = tagName;\n            }else{\n              tagExp = tagExp.substr(0, tagExp.length - 1);\n            }\n            \n            if(this.options.transformTagName) {\n              tagName = this.options.transformTagName(tagName);\n            }\n\n            const childNode = new _xmlNode_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](tagName);\n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n            }\n            this.addChild(currentNode, childNode, jPath)\n            jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          }\n    //opening tag\n          else{\n            const childNode = new _xmlNode_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]( tagName);\n            this.tagsNodeStack.push(currentNode);\n            \n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n            }\n            this.addChild(currentNode, childNode, jPath)\n            currentNode = childNode;\n          }\n          textData = \"\";\n          i = closeIndex;\n        }\n      }\n    }else{\n      textData += xmlData[i];\n    }\n  }\n  return xmlObj.child;\n}\n\nfunction addChild(currentNode, childNode, jPath){\n  const result = this.options.updateTag(childNode.tagname, jPath, childNode[\":@\"])\n  if(result === false){\n  }else if(typeof result === \"string\"){\n    childNode.tagname = result\n    currentNode.addChild(childNode);\n  }else{\n    currentNode.addChild(childNode);\n  }\n}\n\nconst replaceEntitiesValue = function(val){\n\n  if(this.options.processEntities){\n    for(let entityName in this.docTypeEntities){\n      const entity = this.docTypeEntities[entityName];\n      val = val.replace( entity.regx, entity.val);\n    }\n    for(let entityName in this.lastEntities){\n      const entity = this.lastEntities[entityName];\n      val = val.replace( entity.regex, entity.val);\n    }\n    if(this.options.htmlEntities){\n      for(let entityName in this.htmlEntities){\n        const entity = this.htmlEntities[entityName];\n        val = val.replace( entity.regex, entity.val);\n      }\n    }\n    val = val.replace( this.ampEntity.regex, this.ampEntity.val);\n  }\n  return val;\n}\nfunction saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {\n  if (textData) { //store previously collected data as textNode\n    if(isLeafNode === undefined) isLeafNode = currentNode.child.length === 0\n    \n    textData = this.parseTextData(textData,\n      currentNode.tagname,\n      jPath,\n      false,\n      currentNode[\":@\"] ? Object.keys(currentNode[\":@\"]).length !== 0 : false,\n      isLeafNode);\n\n    if (textData !== undefined && textData !== \"\")\n      currentNode.add(this.options.textNodeName, textData);\n    textData = \"\";\n  }\n  return textData;\n}\n\n//TODO: use jPath to simplify the logic\n/**\n * \n * @param {string[]} stopNodes \n * @param {string} jPath\n * @param {string} currentTagName \n */\nfunction isItStopNode(stopNodes, jPath, currentTagName){\n  const allNodesExp = \"*.\" + currentTagName;\n  for (const stopNodePath in stopNodes) {\n    const stopNodeExp = stopNodes[stopNodePath];\n    if( allNodesExp === stopNodeExp || jPath === stopNodeExp  ) return true;\n  }\n  return false;\n}\n\n/**\n * Returns the tag Expression and where it is ending handling single-double quotes situation\n * @param {string} xmlData \n * @param {number} i starting index\n * @returns \n */\nfunction tagExpWithClosingIndex(xmlData, i, closingChar = \">\"){\n  let attrBoundary;\n  let tagExp = \"\";\n  for (let index = i; index < xmlData.length; index++) {\n    let ch = xmlData[index];\n    if (attrBoundary) {\n        if (ch === attrBoundary) attrBoundary = \"\";//reset\n    } else if (ch === '\"' || ch === \"'\") {\n        attrBoundary = ch;\n    } else if (ch === closingChar[0]) {\n      if(closingChar[1]){\n        if(xmlData[index + 1] === closingChar[1]){\n          return {\n            data: tagExp,\n            index: index\n          }\n        }\n      }else{\n        return {\n          data: tagExp,\n          index: index\n        }\n      }\n    } else if (ch === '\\t') {\n      ch = \" \"\n    }\n    tagExp += ch;\n  }\n}\n\nfunction findClosingIndex(xmlData, str, i, errMsg){\n  const closingIndex = xmlData.indexOf(str, i);\n  if(closingIndex === -1){\n    throw new Error(errMsg)\n  }else{\n    return closingIndex + str.length - 1;\n  }\n}\n\nfunction readTagExp(xmlData,i, removeNSPrefix, closingChar = \">\"){\n  const result = tagExpWithClosingIndex(xmlData, i+1, closingChar);\n  if(!result) return;\n  let tagExp = result.data;\n  const closeIndex = result.index;\n  const separatorIndex = tagExp.search(/\\s/);\n  let tagName = tagExp;\n  let attrExpPresent = true;\n  if(separatorIndex !== -1){//separate tag name and attributes expression\n    tagName = tagExp.substring(0, separatorIndex);\n    tagExp = tagExp.substring(separatorIndex + 1).trimStart();\n  }\n\n  const rawTagName = tagName;\n  if(removeNSPrefix){\n    const colonIndex = tagName.indexOf(\":\");\n    if(colonIndex !== -1){\n      tagName = tagName.substr(colonIndex+1);\n      attrExpPresent = tagName !== result.data.substr(colonIndex + 1);\n    }\n  }\n\n  return {\n    tagName: tagName,\n    tagExp: tagExp,\n    closeIndex: closeIndex,\n    attrExpPresent: attrExpPresent,\n    rawTagName: rawTagName,\n  }\n}\n/**\n * find paired tag for a stop node\n * @param {string} xmlData \n * @param {string} tagName \n * @param {number} i \n */\nfunction readStopNodeData(xmlData, tagName, i){\n  const startIndex = i;\n  // Starting at 1 since we already have an open tag\n  let openTagCount = 1;\n\n  for (; i < xmlData.length; i++) {\n    if( xmlData[i] === \"<\"){ \n      if (xmlData[i+1] === \"/\") {//close tag\n          const closeIndex = findClosingIndex(xmlData, \">\", i, `${tagName} is not closed`);\n          let closeTagName = xmlData.substring(i+2,closeIndex).trim();\n          if(closeTagName === tagName){\n            openTagCount--;\n            if (openTagCount === 0) {\n              return {\n                tagContent: xmlData.substring(startIndex, i),\n                i : closeIndex\n              }\n            }\n          }\n          i=closeIndex;\n        } else if(xmlData[i+1] === '?') { \n          const closeIndex = findClosingIndex(xmlData, \"?>\", i+1, \"StopNode is not closed.\")\n          i=closeIndex;\n        } else if(xmlData.substr(i + 1, 3) === '!--') { \n          const closeIndex = findClosingIndex(xmlData, \"-->\", i+3, \"StopNode is not closed.\")\n          i=closeIndex;\n        } else if(xmlData.substr(i + 1, 2) === '![') { \n          const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"StopNode is not closed.\") - 2;\n          i=closeIndex;\n        } else {\n          const tagData = readTagExp(xmlData, i, '>')\n\n          if (tagData) {\n            const openTagName = tagData && tagData.tagName;\n            if (openTagName === tagName && tagData.tagExp[tagData.tagExp.length-1] !== \"/\") {\n              openTagCount++;\n            }\n            i=tagData.closeIndex;\n          }\n        }\n      }\n  }//end for loop\n}\n\nfunction parseValue(val, shouldParse, options) {\n  if (shouldParse && typeof val === 'string') {\n    //console.log(options)\n    const newval = val.trim();\n    if(newval === 'true' ) return true;\n    else if(newval === 'false' ) return false;\n    else return (0,strnum__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(val, options);\n  } else {\n    if ((0,_util_js__WEBPACK_IMPORTED_MODULE_0__.isExist)(val)) {\n      return val;\n    } else {\n      return '';\n    }\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-xml/node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-xml/node_modules/fast-xml-parser/src/xmlparser/XMLParser.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@azure/core-xml/node_modules/fast-xml-parser/src/xmlparser/XMLParser.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ XMLParser)\n/* harmony export */ });\n/* harmony import */ var _OptionsBuilder_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./OptionsBuilder.js */ \"(rsc)/./node_modules/@azure/core-xml/node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js\");\n/* harmony import */ var _OrderedObjParser_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./OrderedObjParser.js */ \"(rsc)/./node_modules/@azure/core-xml/node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js\");\n/* harmony import */ var _node2json_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node2json.js */ \"(rsc)/./node_modules/@azure/core-xml/node_modules/fast-xml-parser/src/xmlparser/node2json.js\");\n/* harmony import */ var _validator_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../validator.js */ \"(rsc)/./node_modules/@azure/core-xml/node_modules/fast-xml-parser/src/validator.js\");\n\n\n\n\n\nclass XMLParser{\n    \n    constructor(options){\n        this.externalEntities = {};\n        this.options = (0,_OptionsBuilder_js__WEBPACK_IMPORTED_MODULE_0__.buildOptions)(options);\n        \n    }\n    /**\n     * Parse XML dats to JS object \n     * @param {string|Buffer} xmlData \n     * @param {boolean|Object} validationOption \n     */\n    parse(xmlData,validationOption){\n        if(typeof xmlData === \"string\"){\n        }else if( xmlData.toString){\n            xmlData = xmlData.toString();\n        }else{\n            throw new Error(\"XML data is accepted in String or Bytes[] form.\")\n        }\n        if( validationOption){\n            if(validationOption === true) validationOption = {}; //validate with default options\n            \n            const result = (0,_validator_js__WEBPACK_IMPORTED_MODULE_3__.validate)(xmlData, validationOption);\n            if (result !== true) {\n              throw Error( `${result.err.msg}:${result.err.line}:${result.err.col}` )\n            }\n          }\n        const orderedObjParser = new _OrderedObjParser_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this.options);\n        orderedObjParser.addExternalEntities(this.externalEntities);\n        const orderedResult = orderedObjParser.parseXml(xmlData);\n        if(this.options.preserveOrder || orderedResult === undefined) return orderedResult;\n        else return (0,_node2json_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(orderedResult, this.options);\n    }\n\n    /**\n     * Add Entity which is not by default supported by this library\n     * @param {string} key \n     * @param {string} value \n     */\n    addEntity(key, value){\n        if(value.indexOf(\"&\") !== -1){\n            throw new Error(\"Entity value can't have '&'\")\n        }else if(key.indexOf(\"&\") !== -1 || key.indexOf(\";\") !== -1){\n            throw new Error(\"An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'\")\n        }else if(value === \"&\"){\n            throw new Error(\"An entity with value '&' is not permitted\");\n        }else{\n            this.externalEntities[key] = value;\n        }\n    }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUteG1sL25vZGVfbW9kdWxlcy9mYXN0LXhtbC1wYXJzZXIvc3JjL3htbHBhcnNlci9YTUxQYXJzZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBa0Q7QUFDRztBQUNmO0FBQ0c7O0FBRTFCO0FBQ2Y7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLGdFQUFZO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxlQUFlO0FBQzlCLGVBQWUsZ0JBQWdCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxpRUFBaUU7QUFDakU7QUFDQSwyQkFBMkIsdURBQVE7QUFDbkM7QUFDQSw4QkFBOEIsZUFBZSxHQUFHLGdCQUFnQixHQUFHLGVBQWU7QUFDbEY7QUFDQTtBQUNBLHFDQUFxQyw0REFBZ0I7QUFDckQ7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLHlEQUFRO0FBQzVCOztBQUVBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxpREFBaUQ7QUFDMUQscUVBQXFFLDJCQUEyQjtBQUNoRyxTQUFTO0FBQ1Q7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWN0b3J3aWxzb24vRGVza3RvcC9wcm9qZWN0cy9FWlZpei9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUteG1sL25vZGVfbW9kdWxlcy9mYXN0LXhtbC1wYXJzZXIvc3JjL3htbHBhcnNlci9YTUxQYXJzZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYnVpbGRPcHRpb25zfSBmcm9tICcuL09wdGlvbnNCdWlsZGVyLmpzJztcbmltcG9ydCBPcmRlcmVkT2JqUGFyc2VyIGZyb20gJy4vT3JkZXJlZE9ialBhcnNlci5qcyc7XG5pbXBvcnQgcHJldHRpZnkgZnJvbSAnLi9ub2RlMmpzb24uanMnO1xuaW1wb3J0IHt2YWxpZGF0ZX0gZnJvbSBcIi4uL3ZhbGlkYXRvci5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBYTUxQYXJzZXJ7XG4gICAgXG4gICAgY29uc3RydWN0b3Iob3B0aW9ucyl7XG4gICAgICAgIHRoaXMuZXh0ZXJuYWxFbnRpdGllcyA9IHt9O1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBidWlsZE9wdGlvbnMob3B0aW9ucyk7XG4gICAgICAgIFxuICAgIH1cbiAgICAvKipcbiAgICAgKiBQYXJzZSBYTUwgZGF0cyB0byBKUyBvYmplY3QgXG4gICAgICogQHBhcmFtIHtzdHJpbmd8QnVmZmVyfSB4bWxEYXRhIFxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbnxPYmplY3R9IHZhbGlkYXRpb25PcHRpb24gXG4gICAgICovXG4gICAgcGFyc2UoeG1sRGF0YSx2YWxpZGF0aW9uT3B0aW9uKXtcbiAgICAgICAgaWYodHlwZW9mIHhtbERhdGEgPT09IFwic3RyaW5nXCIpe1xuICAgICAgICB9ZWxzZSBpZiggeG1sRGF0YS50b1N0cmluZyl7XG4gICAgICAgICAgICB4bWxEYXRhID0geG1sRGF0YS50b1N0cmluZygpO1xuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlhNTCBkYXRhIGlzIGFjY2VwdGVkIGluIFN0cmluZyBvciBCeXRlc1tdIGZvcm0uXCIpXG4gICAgICAgIH1cbiAgICAgICAgaWYoIHZhbGlkYXRpb25PcHRpb24pe1xuICAgICAgICAgICAgaWYodmFsaWRhdGlvbk9wdGlvbiA9PT0gdHJ1ZSkgdmFsaWRhdGlvbk9wdGlvbiA9IHt9OyAvL3ZhbGlkYXRlIHdpdGggZGVmYXVsdCBvcHRpb25zXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHZhbGlkYXRlKHhtbERhdGEsIHZhbGlkYXRpb25PcHRpb24pO1xuICAgICAgICAgICAgaWYgKHJlc3VsdCAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICB0aHJvdyBFcnJvciggYCR7cmVzdWx0LmVyci5tc2d9OiR7cmVzdWx0LmVyci5saW5lfToke3Jlc3VsdC5lcnIuY29sfWAgKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgY29uc3Qgb3JkZXJlZE9ialBhcnNlciA9IG5ldyBPcmRlcmVkT2JqUGFyc2VyKHRoaXMub3B0aW9ucyk7XG4gICAgICAgIG9yZGVyZWRPYmpQYXJzZXIuYWRkRXh0ZXJuYWxFbnRpdGllcyh0aGlzLmV4dGVybmFsRW50aXRpZXMpO1xuICAgICAgICBjb25zdCBvcmRlcmVkUmVzdWx0ID0gb3JkZXJlZE9ialBhcnNlci5wYXJzZVhtbCh4bWxEYXRhKTtcbiAgICAgICAgaWYodGhpcy5vcHRpb25zLnByZXNlcnZlT3JkZXIgfHwgb3JkZXJlZFJlc3VsdCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gb3JkZXJlZFJlc3VsdDtcbiAgICAgICAgZWxzZSByZXR1cm4gcHJldHRpZnkob3JkZXJlZFJlc3VsdCwgdGhpcy5vcHRpb25zKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGQgRW50aXR5IHdoaWNoIGlzIG5vdCBieSBkZWZhdWx0IHN1cHBvcnRlZCBieSB0aGlzIGxpYnJhcnlcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSBcbiAgICAgKi9cbiAgICBhZGRFbnRpdHkoa2V5LCB2YWx1ZSl7XG4gICAgICAgIGlmKHZhbHVlLmluZGV4T2YoXCImXCIpICE9PSAtMSl7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFbnRpdHkgdmFsdWUgY2FuJ3QgaGF2ZSAnJidcIilcbiAgICAgICAgfWVsc2UgaWYoa2V5LmluZGV4T2YoXCImXCIpICE9PSAtMSB8fCBrZXkuaW5kZXhPZihcIjtcIikgIT09IC0xKXtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkFuIGVudGl0eSBtdXN0IGJlIHNldCB3aXRob3V0ICcmJyBhbmQgJzsnLiBFZy4gdXNlICcjeEQnIGZvciAnJiN4RDsnXCIpXG4gICAgICAgIH1lbHNlIGlmKHZhbHVlID09PSBcIiZcIil7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBbiBlbnRpdHkgd2l0aCB2YWx1ZSAnJicgaXMgbm90IHBlcm1pdHRlZFwiKTtcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICB0aGlzLmV4dGVybmFsRW50aXRpZXNba2V5XSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgfVxufSJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-xml/node_modules/fast-xml-parser/src/xmlparser/XMLParser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-xml/node_modules/fast-xml-parser/src/xmlparser/node2json.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@azure/core-xml/node_modules/fast-xml-parser/src/xmlparser/node2json.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ prettify)\n/* harmony export */ });\n\n\n/**\n * \n * @param {array} node \n * @param {any} options \n * @returns \n */\nfunction prettify(node, options){\n  return compress( node, options);\n}\n\n/**\n * \n * @param {array} arr \n * @param {object} options \n * @param {string} jPath \n * @returns object\n */\nfunction compress(arr, options, jPath){\n  let text;\n  const compressedObj = {};\n  for (let i = 0; i < arr.length; i++) {\n    const tagObj = arr[i];\n    const property = propName(tagObj);\n    let newJpath = \"\";\n    if(jPath === undefined) newJpath = property;\n    else newJpath = jPath + \".\" + property;\n\n    if(property === options.textNodeName){\n      if(text === undefined) text = tagObj[property];\n      else text += \"\" + tagObj[property];\n    }else if(property === undefined){\n      continue;\n    }else if(tagObj[property]){\n      \n      let val = compress(tagObj[property], options, newJpath);\n      const isLeaf = isLeafTag(val, options);\n\n      if(tagObj[\":@\"]){\n        assignAttributes( val, tagObj[\":@\"], newJpath, options);\n      }else if(Object.keys(val).length === 1 && val[options.textNodeName] !== undefined && !options.alwaysCreateTextNode){\n        val = val[options.textNodeName];\n      }else if(Object.keys(val).length === 0){\n        if(options.alwaysCreateTextNode) val[options.textNodeName] = \"\";\n        else val = \"\";\n      }\n\n      if(compressedObj[property] !== undefined && compressedObj.hasOwnProperty(property)) {\n        if(!Array.isArray(compressedObj[property])) {\n            compressedObj[property] = [ compressedObj[property] ];\n        }\n        compressedObj[property].push(val);\n      }else{\n        //TODO: if a node is not an array, then check if it should be an array\n        //also determine if it is a leaf node\n        if (options.isArray(property, newJpath, isLeaf )) {\n          compressedObj[property] = [val];\n        }else{\n          compressedObj[property] = val;\n        }\n      }\n    }\n    \n  }\n  // if(text && text.length > 0) compressedObj[options.textNodeName] = text;\n  if(typeof text === \"string\"){\n    if(text.length > 0) compressedObj[options.textNodeName] = text;\n  }else if(text !== undefined) compressedObj[options.textNodeName] = text;\n  return compressedObj;\n}\n\nfunction propName(obj){\n  const keys = Object.keys(obj);\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    if(key !== \":@\") return key;\n  }\n}\n\nfunction assignAttributes(obj, attrMap, jpath, options){\n  if (attrMap) {\n    const keys = Object.keys(attrMap);\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      const atrrName = keys[i];\n      if (options.isArray(atrrName, jpath + \".\" + atrrName, true, true)) {\n        obj[atrrName] = [ attrMap[atrrName] ];\n      } else {\n        obj[atrrName] = attrMap[atrrName];\n      }\n    }\n  }\n}\n\nfunction isLeafTag(obj, options){\n  const { textNodeName } = options;\n  const propCount = Object.keys(obj).length;\n  \n  if (propCount === 0) {\n    return true;\n  }\n\n  if (\n    propCount === 1 &&\n    (obj[textNodeName] || typeof obj[textNodeName] === \"boolean\" || obj[textNodeName] === 0)\n  ) {\n    return true;\n  }\n\n  return false;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUteG1sL25vZGVfbW9kdWxlcy9mYXN0LXhtbC1wYXJzZXIvc3JjL3htbHBhcnNlci9ub2RlMmpzb24uanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFhOztBQUViO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxLQUFLO0FBQ2hCO0FBQ0E7QUFDZTtBQUNmO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsZ0JBQWdCO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQSxrQkFBa0IsaUJBQWlCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QixvQkFBb0IsU0FBUztBQUM3QjtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFVBQVUsZUFBZTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvdmljdG9yd2lsc29uL0Rlc2t0b3AvcHJvamVjdHMvRVpWaXovbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXhtbC9ub2RlX21vZHVsZXMvZmFzdC14bWwtcGFyc2VyL3NyYy94bWxwYXJzZXIvbm9kZTJqc29uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBcbiAqIEBwYXJhbSB7YXJyYXl9IG5vZGUgXG4gKiBAcGFyYW0ge2FueX0gb3B0aW9ucyBcbiAqIEByZXR1cm5zIFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwcmV0dGlmeShub2RlLCBvcHRpb25zKXtcbiAgcmV0dXJuIGNvbXByZXNzKCBub2RlLCBvcHRpb25zKTtcbn1cblxuLyoqXG4gKiBcbiAqIEBwYXJhbSB7YXJyYXl9IGFyciBcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIFxuICogQHBhcmFtIHtzdHJpbmd9IGpQYXRoIFxuICogQHJldHVybnMgb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIGNvbXByZXNzKGFyciwgb3B0aW9ucywgalBhdGgpe1xuICBsZXQgdGV4dDtcbiAgY29uc3QgY29tcHJlc3NlZE9iaiA9IHt9O1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHRhZ09iaiA9IGFycltpXTtcbiAgICBjb25zdCBwcm9wZXJ0eSA9IHByb3BOYW1lKHRhZ09iaik7XG4gICAgbGV0IG5ld0pwYXRoID0gXCJcIjtcbiAgICBpZihqUGF0aCA9PT0gdW5kZWZpbmVkKSBuZXdKcGF0aCA9IHByb3BlcnR5O1xuICAgIGVsc2UgbmV3SnBhdGggPSBqUGF0aCArIFwiLlwiICsgcHJvcGVydHk7XG5cbiAgICBpZihwcm9wZXJ0eSA9PT0gb3B0aW9ucy50ZXh0Tm9kZU5hbWUpe1xuICAgICAgaWYodGV4dCA9PT0gdW5kZWZpbmVkKSB0ZXh0ID0gdGFnT2JqW3Byb3BlcnR5XTtcbiAgICAgIGVsc2UgdGV4dCArPSBcIlwiICsgdGFnT2JqW3Byb3BlcnR5XTtcbiAgICB9ZWxzZSBpZihwcm9wZXJ0eSA9PT0gdW5kZWZpbmVkKXtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1lbHNlIGlmKHRhZ09ialtwcm9wZXJ0eV0pe1xuICAgICAgXG4gICAgICBsZXQgdmFsID0gY29tcHJlc3ModGFnT2JqW3Byb3BlcnR5XSwgb3B0aW9ucywgbmV3SnBhdGgpO1xuICAgICAgY29uc3QgaXNMZWFmID0gaXNMZWFmVGFnKHZhbCwgb3B0aW9ucyk7XG5cbiAgICAgIGlmKHRhZ09ialtcIjpAXCJdKXtcbiAgICAgICAgYXNzaWduQXR0cmlidXRlcyggdmFsLCB0YWdPYmpbXCI6QFwiXSwgbmV3SnBhdGgsIG9wdGlvbnMpO1xuICAgICAgfWVsc2UgaWYoT2JqZWN0LmtleXModmFsKS5sZW5ndGggPT09IDEgJiYgdmFsW29wdGlvbnMudGV4dE5vZGVOYW1lXSAhPT0gdW5kZWZpbmVkICYmICFvcHRpb25zLmFsd2F5c0NyZWF0ZVRleHROb2RlKXtcbiAgICAgICAgdmFsID0gdmFsW29wdGlvbnMudGV4dE5vZGVOYW1lXTtcbiAgICAgIH1lbHNlIGlmKE9iamVjdC5rZXlzKHZhbCkubGVuZ3RoID09PSAwKXtcbiAgICAgICAgaWYob3B0aW9ucy5hbHdheXNDcmVhdGVUZXh0Tm9kZSkgdmFsW29wdGlvbnMudGV4dE5vZGVOYW1lXSA9IFwiXCI7XG4gICAgICAgIGVsc2UgdmFsID0gXCJcIjtcbiAgICAgIH1cblxuICAgICAgaWYoY29tcHJlc3NlZE9ialtwcm9wZXJ0eV0gIT09IHVuZGVmaW5lZCAmJiBjb21wcmVzc2VkT2JqLmhhc093blByb3BlcnR5KHByb3BlcnR5KSkge1xuICAgICAgICBpZighQXJyYXkuaXNBcnJheShjb21wcmVzc2VkT2JqW3Byb3BlcnR5XSkpIHtcbiAgICAgICAgICAgIGNvbXByZXNzZWRPYmpbcHJvcGVydHldID0gWyBjb21wcmVzc2VkT2JqW3Byb3BlcnR5XSBdO1xuICAgICAgICB9XG4gICAgICAgIGNvbXByZXNzZWRPYmpbcHJvcGVydHldLnB1c2godmFsKTtcbiAgICAgIH1lbHNle1xuICAgICAgICAvL1RPRE86IGlmIGEgbm9kZSBpcyBub3QgYW4gYXJyYXksIHRoZW4gY2hlY2sgaWYgaXQgc2hvdWxkIGJlIGFuIGFycmF5XG4gICAgICAgIC8vYWxzbyBkZXRlcm1pbmUgaWYgaXQgaXMgYSBsZWFmIG5vZGVcbiAgICAgICAgaWYgKG9wdGlvbnMuaXNBcnJheShwcm9wZXJ0eSwgbmV3SnBhdGgsIGlzTGVhZiApKSB7XG4gICAgICAgICAgY29tcHJlc3NlZE9ialtwcm9wZXJ0eV0gPSBbdmFsXTtcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgY29tcHJlc3NlZE9ialtwcm9wZXJ0eV0gPSB2YWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgXG4gIH1cbiAgLy8gaWYodGV4dCAmJiB0ZXh0Lmxlbmd0aCA+IDApIGNvbXByZXNzZWRPYmpbb3B0aW9ucy50ZXh0Tm9kZU5hbWVdID0gdGV4dDtcbiAgaWYodHlwZW9mIHRleHQgPT09IFwic3RyaW5nXCIpe1xuICAgIGlmKHRleHQubGVuZ3RoID4gMCkgY29tcHJlc3NlZE9ialtvcHRpb25zLnRleHROb2RlTmFtZV0gPSB0ZXh0O1xuICB9ZWxzZSBpZih0ZXh0ICE9PSB1bmRlZmluZWQpIGNvbXByZXNzZWRPYmpbb3B0aW9ucy50ZXh0Tm9kZU5hbWVdID0gdGV4dDtcbiAgcmV0dXJuIGNvbXByZXNzZWRPYmo7XG59XG5cbmZ1bmN0aW9uIHByb3BOYW1lKG9iail7XG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBrZXkgPSBrZXlzW2ldO1xuICAgIGlmKGtleSAhPT0gXCI6QFwiKSByZXR1cm4ga2V5O1xuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2lnbkF0dHJpYnV0ZXMob2JqLCBhdHRyTWFwLCBqcGF0aCwgb3B0aW9ucyl7XG4gIGlmIChhdHRyTWFwKSB7XG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGF0dHJNYXApO1xuICAgIGNvbnN0IGxlbiA9IGtleXMubGVuZ3RoOyAvL2Rvbid0IG1ha2UgaXQgaW5saW5lXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgY29uc3QgYXRyck5hbWUgPSBrZXlzW2ldO1xuICAgICAgaWYgKG9wdGlvbnMuaXNBcnJheShhdHJyTmFtZSwganBhdGggKyBcIi5cIiArIGF0cnJOYW1lLCB0cnVlLCB0cnVlKSkge1xuICAgICAgICBvYmpbYXRyck5hbWVdID0gWyBhdHRyTWFwW2F0cnJOYW1lXSBdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb2JqW2F0cnJOYW1lXSA9IGF0dHJNYXBbYXRyck5hbWVdO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBpc0xlYWZUYWcob2JqLCBvcHRpb25zKXtcbiAgY29uc3QgeyB0ZXh0Tm9kZU5hbWUgfSA9IG9wdGlvbnM7XG4gIGNvbnN0IHByb3BDb3VudCA9IE9iamVjdC5rZXlzKG9iaikubGVuZ3RoO1xuICBcbiAgaWYgKHByb3BDb3VudCA9PT0gMCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKFxuICAgIHByb3BDb3VudCA9PT0gMSAmJlxuICAgIChvYmpbdGV4dE5vZGVOYW1lXSB8fCB0eXBlb2Ygb2JqW3RleHROb2RlTmFtZV0gPT09IFwiYm9vbGVhblwiIHx8IG9ialt0ZXh0Tm9kZU5hbWVdID09PSAwKVxuICApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-xml/node_modules/fast-xml-parser/src/xmlparser/node2json.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-xml/node_modules/fast-xml-parser/src/xmlparser/xmlNode.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@azure/core-xml/node_modules/fast-xml-parser/src/xmlparser/xmlNode.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ XmlNode)\n/* harmony export */ });\n\n\nclass XmlNode{\n  constructor(tagname) {\n    this.tagname = tagname;\n    this.child = []; //nested tags, text, cdata, comments in order\n    this[\":@\"] = {}; //attributes map\n  }\n  add(key,val){\n    // this.child.push( {name : key, val: val, isCdata: isCdata });\n    if(key === \"__proto__\") key = \"#__proto__\";\n    this.child.push( {[key]: val });\n  }\n  addChild(node) {\n    if(node.tagname === \"__proto__\") node.tagname = \"#__proto__\";\n    if(node[\":@\"] && Object.keys(node[\":@\"]).length > 0){\n      this.child.push( { [node.tagname]: node.child, [\":@\"]: node[\":@\"] });\n    }else{\n      this.child.push( { [node.tagname]: node.child });\n    }\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUteG1sL25vZGVfbW9kdWxlcy9mYXN0LXhtbC1wYXJzZXIvc3JjL3htbHBhcnNlci94bWxOb2RlLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBYTs7QUFFRTtBQUNmO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckIscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQSx5QkFBeUIsd0NBQXdDO0FBQ2pFO0FBQ0Esc0JBQXNCLFlBQVk7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsZ0RBQWdEO0FBQ3pFLEtBQUs7QUFDTCx5QkFBeUIsNEJBQTRCO0FBQ3JEO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcndpbHNvbi9EZXNrdG9wL3Byb2plY3RzL0VaVml6L25vZGVfbW9kdWxlcy9AYXp1cmUvY29yZS14bWwvbm9kZV9tb2R1bGVzL2Zhc3QteG1sLXBhcnNlci9zcmMveG1scGFyc2VyL3htbE5vZGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBYbWxOb2Rle1xuICBjb25zdHJ1Y3Rvcih0YWduYW1lKSB7XG4gICAgdGhpcy50YWduYW1lID0gdGFnbmFtZTtcbiAgICB0aGlzLmNoaWxkID0gW107IC8vbmVzdGVkIHRhZ3MsIHRleHQsIGNkYXRhLCBjb21tZW50cyBpbiBvcmRlclxuICAgIHRoaXNbXCI6QFwiXSA9IHt9OyAvL2F0dHJpYnV0ZXMgbWFwXG4gIH1cbiAgYWRkKGtleSx2YWwpe1xuICAgIC8vIHRoaXMuY2hpbGQucHVzaCgge25hbWUgOiBrZXksIHZhbDogdmFsLCBpc0NkYXRhOiBpc0NkYXRhIH0pO1xuICAgIGlmKGtleSA9PT0gXCJfX3Byb3RvX19cIikga2V5ID0gXCIjX19wcm90b19fXCI7XG4gICAgdGhpcy5jaGlsZC5wdXNoKCB7W2tleV06IHZhbCB9KTtcbiAgfVxuICBhZGRDaGlsZChub2RlKSB7XG4gICAgaWYobm9kZS50YWduYW1lID09PSBcIl9fcHJvdG9fX1wiKSBub2RlLnRhZ25hbWUgPSBcIiNfX3Byb3RvX19cIjtcbiAgICBpZihub2RlW1wiOkBcIl0gJiYgT2JqZWN0LmtleXMobm9kZVtcIjpAXCJdKS5sZW5ndGggPiAwKXtcbiAgICAgIHRoaXMuY2hpbGQucHVzaCggeyBbbm9kZS50YWduYW1lXTogbm9kZS5jaGlsZCwgW1wiOkBcIl06IG5vZGVbXCI6QFwiXSB9KTtcbiAgICB9ZWxzZXtcbiAgICAgIHRoaXMuY2hpbGQucHVzaCggeyBbbm9kZS50YWduYW1lXTogbm9kZS5jaGlsZCB9KTtcbiAgICB9XG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-xml/node_modules/fast-xml-parser/src/xmlparser/xmlNode.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/core-xml/node_modules/strnum/strnum.js":
/*!********************************************************************!*\
  !*** ./node_modules/@azure/core-xml/node_modules/strnum/strnum.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ toNumber)\n/* harmony export */ });\nconst hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;\nconst numRegex = /^([\\-\\+])?(0*)([0-9]*(\\.[0-9]*)?)$/;\n// const octRegex = /^0x[a-z0-9]+/;\n// const binRegex = /0x[a-z0-9]+/;\n\n \nconst consider = {\n    hex :  true,\n    // oct: false,\n    leadingZeros: true,\n    decimalPoint: \"\\.\",\n    eNotation: true,\n    //skipLike: /regex/\n};\n\nfunction toNumber(str, options = {}){\n    options = Object.assign({}, consider, options );\n    if(!str || typeof str !== \"string\" ) return str;\n    \n    let trimmedStr  = str.trim();\n    \n    if(options.skipLike !== undefined && options.skipLike.test(trimmedStr)) return str;\n    else if(str===\"0\") return 0;\n    else if (options.hex && hexRegex.test(trimmedStr)) {\n        return parse_int(trimmedStr, 16);\n    // }else if (options.oct && octRegex.test(str)) {\n    //     return Number.parseInt(val, 8);\n    }else if (trimmedStr.search(/[eE]/)!== -1) { //eNotation\n        const notation = trimmedStr.match(/^([-\\+])?(0*)([0-9]*(\\.[0-9]*)?[eE][-\\+]?[0-9]+)$/); \n        // +00.123 => [ , '+', '00', '.123', ..\n        if(notation){\n            // console.log(notation)\n            if(options.leadingZeros){ //accept with leading zeros\n                trimmedStr = (notation[1] || \"\") + notation[3];\n            }else{\n                if(notation[2] === \"0\" && notation[3][0]=== \".\"){ //valid number\n                }else{\n                    return str;\n                }\n            }\n            return options.eNotation ? Number(trimmedStr) : str;\n        }else{\n            return str;\n        }\n    // }else if (options.parseBin && binRegex.test(str)) {\n    //     return Number.parseInt(val, 2);\n    }else{\n        //separate negative sign, leading zeros, and rest number\n        const match = numRegex.exec(trimmedStr);\n        // +00.123 => [ , '+', '00', '.123', ..\n        if(match){\n            const sign = match[1];\n            const leadingZeros = match[2];\n            let numTrimmedByZeros = trimZeros(match[3]); //complete num without leading zeros\n            //trim ending zeros for floating number\n            \n            if(!options.leadingZeros && leadingZeros.length > 0 && sign && trimmedStr[2] !== \".\") return str; //-0123\n            else if(!options.leadingZeros && leadingZeros.length > 0 && !sign && trimmedStr[1] !== \".\") return str; //0123\n            else if(options.leadingZeros && leadingZeros===str) return 0; //00\n            \n            else{//no leading zeros or leading zeros are allowed\n                const num = Number(trimmedStr);\n                const numStr = \"\" + num;\n\n                if(numStr.search(/[eE]/) !== -1){ //given number is long and parsed to eNotation\n                    if(options.eNotation) return num;\n                    else return str;\n                }else if(trimmedStr.indexOf(\".\") !== -1){ //floating number\n                    if(numStr === \"0\" && (numTrimmedByZeros === \"\") ) return num; //0.0\n                    else if(numStr === numTrimmedByZeros) return num; //0.456. 0.79000\n                    else if( sign && numStr === \"-\"+numTrimmedByZeros) return num;\n                    else return str;\n                }\n                \n                if(leadingZeros){\n                    return (numTrimmedByZeros === numStr) || (sign+numTrimmedByZeros === numStr) ? num : str\n                }else  {\n                    return (trimmedStr === numStr) || (trimmedStr === sign+numStr) ? num : str\n                }\n            }\n        }else{ //non-numeric string\n            return str;\n        }\n    }\n}\n\n/**\n * \n * @param {string} numStr without leading zeros\n * @returns \n */\nfunction trimZeros(numStr){\n    if(numStr && numStr.indexOf(\".\") !== -1){//float\n        numStr = numStr.replace(/0+$/, \"\"); //remove ending zeros\n        if(numStr === \".\")  numStr = \"0\";\n        else if(numStr[0] === \".\")  numStr = \"0\"+numStr;\n        else if(numStr[numStr.length-1] === \".\")  numStr = numStr.substr(0,numStr.length-1);\n        return numStr;\n    }\n    return numStr;\n}\n\nfunction parse_int(numStr, base){\n    //polyfill\n    if(parseInt) return parseInt(numStr, base);\n    else if(Number.parseInt) return Number.parseInt(numStr, base);\n    else if(window && window.parseInt) return window.parseInt(numStr, base);\n    else throw new Error(\"parseInt, Number.parseInt, window.parseInt are not supported\")\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2NvcmUteG1sL25vZGVfbW9kdWxlcy9zdHJudW0vc3RybnVtLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWUsbUNBQW1DO0FBQ2xELDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsS0FBSyw0Q0FBNEM7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0M7QUFDdEM7QUFDQSxhQUFhO0FBQ2Isa0VBQWtFO0FBQ2xFLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RDtBQUN6RDtBQUNBO0FBQ0EsOEdBQThHO0FBQzlHLG9IQUFvSDtBQUNwSCwwRUFBMEU7QUFDMUU7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTs7QUFFQSxrREFBa0Q7QUFDbEQ7QUFDQTtBQUNBLGlCQUFpQix5Q0FBeUM7QUFDMUQsa0ZBQWtGO0FBQ2xGLHNFQUFzRTtBQUN0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0EsU0FBUyxNQUFNO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkM7QUFDN0MsNENBQTRDO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvdmljdG9yd2lsc29uL0Rlc2t0b3AvcHJvamVjdHMvRVpWaXovbm9kZV9tb2R1bGVzL0BhenVyZS9jb3JlLXhtbC9ub2RlX21vZHVsZXMvc3RybnVtL3N0cm51bS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBoZXhSZWdleCA9IC9eWy0rXT8weFthLWZBLUYwLTldKyQvO1xuY29uc3QgbnVtUmVnZXggPSAvXihbXFwtXFwrXSk/KDAqKShbMC05XSooXFwuWzAtOV0qKT8pJC87XG4vLyBjb25zdCBvY3RSZWdleCA9IC9eMHhbYS16MC05XSsvO1xuLy8gY29uc3QgYmluUmVnZXggPSAvMHhbYS16MC05XSsvO1xuXG4gXG5jb25zdCBjb25zaWRlciA9IHtcbiAgICBoZXggOiAgdHJ1ZSxcbiAgICAvLyBvY3Q6IGZhbHNlLFxuICAgIGxlYWRpbmdaZXJvczogdHJ1ZSxcbiAgICBkZWNpbWFsUG9pbnQ6IFwiXFwuXCIsXG4gICAgZU5vdGF0aW9uOiB0cnVlLFxuICAgIC8vc2tpcExpa2U6IC9yZWdleC9cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRvTnVtYmVyKHN0ciwgb3B0aW9ucyA9IHt9KXtcbiAgICBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgY29uc2lkZXIsIG9wdGlvbnMgKTtcbiAgICBpZighc3RyIHx8IHR5cGVvZiBzdHIgIT09IFwic3RyaW5nXCIgKSByZXR1cm4gc3RyO1xuICAgIFxuICAgIGxldCB0cmltbWVkU3RyICA9IHN0ci50cmltKCk7XG4gICAgXG4gICAgaWYob3B0aW9ucy5za2lwTGlrZSAhPT0gdW5kZWZpbmVkICYmIG9wdGlvbnMuc2tpcExpa2UudGVzdCh0cmltbWVkU3RyKSkgcmV0dXJuIHN0cjtcbiAgICBlbHNlIGlmKHN0cj09PVwiMFwiKSByZXR1cm4gMDtcbiAgICBlbHNlIGlmIChvcHRpb25zLmhleCAmJiBoZXhSZWdleC50ZXN0KHRyaW1tZWRTdHIpKSB7XG4gICAgICAgIHJldHVybiBwYXJzZV9pbnQodHJpbW1lZFN0ciwgMTYpO1xuICAgIC8vIH1lbHNlIGlmIChvcHRpb25zLm9jdCAmJiBvY3RSZWdleC50ZXN0KHN0cikpIHtcbiAgICAvLyAgICAgcmV0dXJuIE51bWJlci5wYXJzZUludCh2YWwsIDgpO1xuICAgIH1lbHNlIGlmICh0cmltbWVkU3RyLnNlYXJjaCgvW2VFXS8pIT09IC0xKSB7IC8vZU5vdGF0aW9uXG4gICAgICAgIGNvbnN0IG5vdGF0aW9uID0gdHJpbW1lZFN0ci5tYXRjaCgvXihbLVxcK10pPygwKikoWzAtOV0qKFxcLlswLTldKik/W2VFXVstXFwrXT9bMC05XSspJC8pOyBcbiAgICAgICAgLy8gKzAwLjEyMyA9PiBbICwgJysnLCAnMDAnLCAnLjEyMycsIC4uXG4gICAgICAgIGlmKG5vdGF0aW9uKXtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKG5vdGF0aW9uKVxuICAgICAgICAgICAgaWYob3B0aW9ucy5sZWFkaW5nWmVyb3MpeyAvL2FjY2VwdCB3aXRoIGxlYWRpbmcgemVyb3NcbiAgICAgICAgICAgICAgICB0cmltbWVkU3RyID0gKG5vdGF0aW9uWzFdIHx8IFwiXCIpICsgbm90YXRpb25bM107XG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICBpZihub3RhdGlvblsyXSA9PT0gXCIwXCIgJiYgbm90YXRpb25bM11bMF09PT0gXCIuXCIpeyAvL3ZhbGlkIG51bWJlclxuICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBvcHRpb25zLmVOb3RhdGlvbiA/IE51bWJlcih0cmltbWVkU3RyKSA6IHN0cjtcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICByZXR1cm4gc3RyO1xuICAgICAgICB9XG4gICAgLy8gfWVsc2UgaWYgKG9wdGlvbnMucGFyc2VCaW4gJiYgYmluUmVnZXgudGVzdChzdHIpKSB7XG4gICAgLy8gICAgIHJldHVybiBOdW1iZXIucGFyc2VJbnQodmFsLCAyKTtcbiAgICB9ZWxzZXtcbiAgICAgICAgLy9zZXBhcmF0ZSBuZWdhdGl2ZSBzaWduLCBsZWFkaW5nIHplcm9zLCBhbmQgcmVzdCBudW1iZXJcbiAgICAgICAgY29uc3QgbWF0Y2ggPSBudW1SZWdleC5leGVjKHRyaW1tZWRTdHIpO1xuICAgICAgICAvLyArMDAuMTIzID0+IFsgLCAnKycsICcwMCcsICcuMTIzJywgLi5cbiAgICAgICAgaWYobWF0Y2gpe1xuICAgICAgICAgICAgY29uc3Qgc2lnbiA9IG1hdGNoWzFdO1xuICAgICAgICAgICAgY29uc3QgbGVhZGluZ1plcm9zID0gbWF0Y2hbMl07XG4gICAgICAgICAgICBsZXQgbnVtVHJpbW1lZEJ5WmVyb3MgPSB0cmltWmVyb3MobWF0Y2hbM10pOyAvL2NvbXBsZXRlIG51bSB3aXRob3V0IGxlYWRpbmcgemVyb3NcbiAgICAgICAgICAgIC8vdHJpbSBlbmRpbmcgemVyb3MgZm9yIGZsb2F0aW5nIG51bWJlclxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZighb3B0aW9ucy5sZWFkaW5nWmVyb3MgJiYgbGVhZGluZ1plcm9zLmxlbmd0aCA+IDAgJiYgc2lnbiAmJiB0cmltbWVkU3RyWzJdICE9PSBcIi5cIikgcmV0dXJuIHN0cjsgLy8tMDEyM1xuICAgICAgICAgICAgZWxzZSBpZighb3B0aW9ucy5sZWFkaW5nWmVyb3MgJiYgbGVhZGluZ1plcm9zLmxlbmd0aCA+IDAgJiYgIXNpZ24gJiYgdHJpbW1lZFN0clsxXSAhPT0gXCIuXCIpIHJldHVybiBzdHI7IC8vMDEyM1xuICAgICAgICAgICAgZWxzZSBpZihvcHRpb25zLmxlYWRpbmdaZXJvcyAmJiBsZWFkaW5nWmVyb3M9PT1zdHIpIHJldHVybiAwOyAvLzAwXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGVsc2V7Ly9ubyBsZWFkaW5nIHplcm9zIG9yIGxlYWRpbmcgemVyb3MgYXJlIGFsbG93ZWRcbiAgICAgICAgICAgICAgICBjb25zdCBudW0gPSBOdW1iZXIodHJpbW1lZFN0cik7XG4gICAgICAgICAgICAgICAgY29uc3QgbnVtU3RyID0gXCJcIiArIG51bTtcblxuICAgICAgICAgICAgICAgIGlmKG51bVN0ci5zZWFyY2goL1tlRV0vKSAhPT0gLTEpeyAvL2dpdmVuIG51bWJlciBpcyBsb25nIGFuZCBwYXJzZWQgdG8gZU5vdGF0aW9uXG4gICAgICAgICAgICAgICAgICAgIGlmKG9wdGlvbnMuZU5vdGF0aW9uKSByZXR1cm4gbnVtO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIHJldHVybiBzdHI7XG4gICAgICAgICAgICAgICAgfWVsc2UgaWYodHJpbW1lZFN0ci5pbmRleE9mKFwiLlwiKSAhPT0gLTEpeyAvL2Zsb2F0aW5nIG51bWJlclxuICAgICAgICAgICAgICAgICAgICBpZihudW1TdHIgPT09IFwiMFwiICYmIChudW1UcmltbWVkQnlaZXJvcyA9PT0gXCJcIikgKSByZXR1cm4gbnVtOyAvLzAuMFxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKG51bVN0ciA9PT0gbnVtVHJpbW1lZEJ5WmVyb3MpIHJldHVybiBudW07IC8vMC40NTYuIDAuNzkwMDBcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiggc2lnbiAmJiBudW1TdHIgPT09IFwiLVwiK251bVRyaW1tZWRCeVplcm9zKSByZXR1cm4gbnVtO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIHJldHVybiBzdHI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmKGxlYWRpbmdaZXJvcyl7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAobnVtVHJpbW1lZEJ5WmVyb3MgPT09IG51bVN0cikgfHwgKHNpZ24rbnVtVHJpbW1lZEJ5WmVyb3MgPT09IG51bVN0cikgPyBudW0gOiBzdHJcbiAgICAgICAgICAgICAgICB9ZWxzZSAge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKHRyaW1tZWRTdHIgPT09IG51bVN0cikgfHwgKHRyaW1tZWRTdHIgPT09IHNpZ24rbnVtU3RyKSA/IG51bSA6IHN0clxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfWVsc2V7IC8vbm9uLW51bWVyaWMgc3RyaW5nXG4gICAgICAgICAgICByZXR1cm4gc3RyO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vKipcbiAqIFxuICogQHBhcmFtIHtzdHJpbmd9IG51bVN0ciB3aXRob3V0IGxlYWRpbmcgemVyb3NcbiAqIEByZXR1cm5zIFxuICovXG5mdW5jdGlvbiB0cmltWmVyb3MobnVtU3RyKXtcbiAgICBpZihudW1TdHIgJiYgbnVtU3RyLmluZGV4T2YoXCIuXCIpICE9PSAtMSl7Ly9mbG9hdFxuICAgICAgICBudW1TdHIgPSBudW1TdHIucmVwbGFjZSgvMCskLywgXCJcIik7IC8vcmVtb3ZlIGVuZGluZyB6ZXJvc1xuICAgICAgICBpZihudW1TdHIgPT09IFwiLlwiKSAgbnVtU3RyID0gXCIwXCI7XG4gICAgICAgIGVsc2UgaWYobnVtU3RyWzBdID09PSBcIi5cIikgIG51bVN0ciA9IFwiMFwiK251bVN0cjtcbiAgICAgICAgZWxzZSBpZihudW1TdHJbbnVtU3RyLmxlbmd0aC0xXSA9PT0gXCIuXCIpICBudW1TdHIgPSBudW1TdHIuc3Vic3RyKDAsbnVtU3RyLmxlbmd0aC0xKTtcbiAgICAgICAgcmV0dXJuIG51bVN0cjtcbiAgICB9XG4gICAgcmV0dXJuIG51bVN0cjtcbn1cblxuZnVuY3Rpb24gcGFyc2VfaW50KG51bVN0ciwgYmFzZSl7XG4gICAgLy9wb2x5ZmlsbFxuICAgIGlmKHBhcnNlSW50KSByZXR1cm4gcGFyc2VJbnQobnVtU3RyLCBiYXNlKTtcbiAgICBlbHNlIGlmKE51bWJlci5wYXJzZUludCkgcmV0dXJuIE51bWJlci5wYXJzZUludChudW1TdHIsIGJhc2UpO1xuICAgIGVsc2UgaWYod2luZG93ICYmIHdpbmRvdy5wYXJzZUludCkgcmV0dXJuIHdpbmRvdy5wYXJzZUludChudW1TdHIsIGJhc2UpO1xuICAgIGVsc2UgdGhyb3cgbmV3IEVycm9yKFwicGFyc2VJbnQsIE51bWJlci5wYXJzZUludCwgd2luZG93LnBhcnNlSW50IGFyZSBub3Qgc3VwcG9ydGVkXCIpXG59Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/core-xml/node_modules/strnum/strnum.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/logger/dist/esm/debug.js":
/*!******************************************************!*\
  !*** ./node_modules/@azure/logger/dist/esm/debug.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./log.js */ \"(rsc)/./node_modules/@azure/logger/dist/esm/log.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nconst debugEnvVariable = (typeof process !== \"undefined\" && process.env && process.env.DEBUG) || undefined;\nlet enabledString;\nlet enabledNamespaces = [];\nlet skippedNamespaces = [];\nconst debuggers = [];\nif (debugEnvVariable) {\n    enable(debugEnvVariable);\n}\nconst debugObj = Object.assign((namespace) => {\n    return createDebugger(namespace);\n}, {\n    enable,\n    enabled,\n    disable,\n    log: _log_js__WEBPACK_IMPORTED_MODULE_0__.log,\n});\nfunction enable(namespaces) {\n    enabledString = namespaces;\n    enabledNamespaces = [];\n    skippedNamespaces = [];\n    const wildcard = /\\*/g;\n    const namespaceList = namespaces.split(\",\").map((ns) => ns.trim().replace(wildcard, \".*?\"));\n    for (const ns of namespaceList) {\n        if (ns.startsWith(\"-\")) {\n            skippedNamespaces.push(new RegExp(`^${ns.substr(1)}$`));\n        }\n        else {\n            enabledNamespaces.push(new RegExp(`^${ns}$`));\n        }\n    }\n    for (const instance of debuggers) {\n        instance.enabled = enabled(instance.namespace);\n    }\n}\nfunction enabled(namespace) {\n    if (namespace.endsWith(\"*\")) {\n        return true;\n    }\n    for (const skipped of skippedNamespaces) {\n        if (skipped.test(namespace)) {\n            return false;\n        }\n    }\n    for (const enabledNamespace of enabledNamespaces) {\n        if (enabledNamespace.test(namespace)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction disable() {\n    const result = enabledString || \"\";\n    enable(\"\");\n    return result;\n}\nfunction createDebugger(namespace) {\n    const newDebugger = Object.assign(debug, {\n        enabled: enabled(namespace),\n        destroy,\n        log: debugObj.log,\n        namespace,\n        extend,\n    });\n    function debug(...args) {\n        if (!newDebugger.enabled) {\n            return;\n        }\n        if (args.length > 0) {\n            args[0] = `${namespace} ${args[0]}`;\n        }\n        newDebugger.log(...args);\n    }\n    debuggers.push(newDebugger);\n    return newDebugger;\n}\nfunction destroy() {\n    const index = debuggers.indexOf(this);\n    if (index >= 0) {\n        debuggers.splice(index, 1);\n        return true;\n    }\n    return false;\n}\nfunction extend(namespace) {\n    const newDebugger = createDebugger(`${this.namespace}:${namespace}`);\n    newDebugger.log = this.log;\n    return newDebugger;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (debugObj);\n//# sourceMappingURL=debug.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2xvZ2dlci9kaXN0L2VzbS9kZWJ1Zy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDK0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELGFBQWE7QUFDL0Q7QUFDQTtBQUNBLGtEQUFrRCxHQUFHO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsV0FBVyxFQUFFLFFBQVE7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLGVBQWUsR0FBRyxVQUFVO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBLGlFQUFlLFFBQVEsRUFBQztBQUN4QiIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcndpbHNvbi9EZXNrdG9wL3Byb2plY3RzL0VaVml6L25vZGVfbW9kdWxlcy9AYXp1cmUvbG9nZ2VyL2Rpc3QvZXNtL2RlYnVnLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgbG9nIH0gZnJvbSBcIi4vbG9nLmpzXCI7XG5jb25zdCBkZWJ1Z0VudlZhcmlhYmxlID0gKHR5cGVvZiBwcm9jZXNzICE9PSBcInVuZGVmaW5lZFwiICYmIHByb2Nlc3MuZW52ICYmIHByb2Nlc3MuZW52LkRFQlVHKSB8fCB1bmRlZmluZWQ7XG5sZXQgZW5hYmxlZFN0cmluZztcbmxldCBlbmFibGVkTmFtZXNwYWNlcyA9IFtdO1xubGV0IHNraXBwZWROYW1lc3BhY2VzID0gW107XG5jb25zdCBkZWJ1Z2dlcnMgPSBbXTtcbmlmIChkZWJ1Z0VudlZhcmlhYmxlKSB7XG4gICAgZW5hYmxlKGRlYnVnRW52VmFyaWFibGUpO1xufVxuY29uc3QgZGVidWdPYmogPSBPYmplY3QuYXNzaWduKChuYW1lc3BhY2UpID0+IHtcbiAgICByZXR1cm4gY3JlYXRlRGVidWdnZXIobmFtZXNwYWNlKTtcbn0sIHtcbiAgICBlbmFibGUsXG4gICAgZW5hYmxlZCxcbiAgICBkaXNhYmxlLFxuICAgIGxvZyxcbn0pO1xuZnVuY3Rpb24gZW5hYmxlKG5hbWVzcGFjZXMpIHtcbiAgICBlbmFibGVkU3RyaW5nID0gbmFtZXNwYWNlcztcbiAgICBlbmFibGVkTmFtZXNwYWNlcyA9IFtdO1xuICAgIHNraXBwZWROYW1lc3BhY2VzID0gW107XG4gICAgY29uc3Qgd2lsZGNhcmQgPSAvXFwqL2c7XG4gICAgY29uc3QgbmFtZXNwYWNlTGlzdCA9IG5hbWVzcGFjZXMuc3BsaXQoXCIsXCIpLm1hcCgobnMpID0+IG5zLnRyaW0oKS5yZXBsYWNlKHdpbGRjYXJkLCBcIi4qP1wiKSk7XG4gICAgZm9yIChjb25zdCBucyBvZiBuYW1lc3BhY2VMaXN0KSB7XG4gICAgICAgIGlmIChucy5zdGFydHNXaXRoKFwiLVwiKSkge1xuICAgICAgICAgICAgc2tpcHBlZE5hbWVzcGFjZXMucHVzaChuZXcgUmVnRXhwKGBeJHtucy5zdWJzdHIoMSl9JGApKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGVuYWJsZWROYW1lc3BhY2VzLnB1c2gobmV3IFJlZ0V4cChgXiR7bnN9JGApKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGNvbnN0IGluc3RhbmNlIG9mIGRlYnVnZ2Vycykge1xuICAgICAgICBpbnN0YW5jZS5lbmFibGVkID0gZW5hYmxlZChpbnN0YW5jZS5uYW1lc3BhY2UpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGVuYWJsZWQobmFtZXNwYWNlKSB7XG4gICAgaWYgKG5hbWVzcGFjZS5lbmRzV2l0aChcIipcIikpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGZvciAoY29uc3Qgc2tpcHBlZCBvZiBza2lwcGVkTmFtZXNwYWNlcykge1xuICAgICAgICBpZiAoc2tpcHBlZC50ZXN0KG5hbWVzcGFjZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGNvbnN0IGVuYWJsZWROYW1lc3BhY2Ugb2YgZW5hYmxlZE5hbWVzcGFjZXMpIHtcbiAgICAgICAgaWYgKGVuYWJsZWROYW1lc3BhY2UudGVzdChuYW1lc3BhY2UpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBkaXNhYmxlKCkge1xuICAgIGNvbnN0IHJlc3VsdCA9IGVuYWJsZWRTdHJpbmcgfHwgXCJcIjtcbiAgICBlbmFibGUoXCJcIik7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGNyZWF0ZURlYnVnZ2VyKG5hbWVzcGFjZSkge1xuICAgIGNvbnN0IG5ld0RlYnVnZ2VyID0gT2JqZWN0LmFzc2lnbihkZWJ1Zywge1xuICAgICAgICBlbmFibGVkOiBlbmFibGVkKG5hbWVzcGFjZSksXG4gICAgICAgIGRlc3Ryb3ksXG4gICAgICAgIGxvZzogZGVidWdPYmoubG9nLFxuICAgICAgICBuYW1lc3BhY2UsXG4gICAgICAgIGV4dGVuZCxcbiAgICB9KTtcbiAgICBmdW5jdGlvbiBkZWJ1ZyguLi5hcmdzKSB7XG4gICAgICAgIGlmICghbmV3RGVidWdnZXIuZW5hYmxlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhcmdzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGFyZ3NbMF0gPSBgJHtuYW1lc3BhY2V9ICR7YXJnc1swXX1gO1xuICAgICAgICB9XG4gICAgICAgIG5ld0RlYnVnZ2VyLmxvZyguLi5hcmdzKTtcbiAgICB9XG4gICAgZGVidWdnZXJzLnB1c2gobmV3RGVidWdnZXIpO1xuICAgIHJldHVybiBuZXdEZWJ1Z2dlcjtcbn1cbmZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgY29uc3QgaW5kZXggPSBkZWJ1Z2dlcnMuaW5kZXhPZih0aGlzKTtcbiAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgICBkZWJ1Z2dlcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGV4dGVuZChuYW1lc3BhY2UpIHtcbiAgICBjb25zdCBuZXdEZWJ1Z2dlciA9IGNyZWF0ZURlYnVnZ2VyKGAke3RoaXMubmFtZXNwYWNlfToke25hbWVzcGFjZX1gKTtcbiAgICBuZXdEZWJ1Z2dlci5sb2cgPSB0aGlzLmxvZztcbiAgICByZXR1cm4gbmV3RGVidWdnZXI7XG59XG5leHBvcnQgZGVmYXVsdCBkZWJ1Z09iajtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlYnVnLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/logger/dist/esm/debug.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/logger/dist/esm/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@azure/logger/dist/esm/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AzureLogger: () => (/* binding */ AzureLogger),\n/* harmony export */   createClientLogger: () => (/* binding */ createClientLogger),\n/* harmony export */   getLogLevel: () => (/* binding */ getLogLevel),\n/* harmony export */   setLogLevel: () => (/* binding */ setLogLevel)\n/* harmony export */ });\n/* harmony import */ var _debug_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./debug.js */ \"(rsc)/./node_modules/@azure/logger/dist/esm/debug.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nconst registeredLoggers = new Set();\nconst logLevelFromEnv = (typeof process !== \"undefined\" && process.env && process.env.AZURE_LOG_LEVEL) || undefined;\nlet azureLogLevel;\n/**\n * The AzureLogger provides a mechanism for overriding where logs are output to.\n * By default, logs are sent to stderr.\n * Override the `log` method to redirect logs to another location.\n */\nconst AzureLogger = (0,_debug_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"azure\");\nAzureLogger.log = (...args) => {\n    _debug_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].log(...args);\n};\nconst AZURE_LOG_LEVELS = [\"verbose\", \"info\", \"warning\", \"error\"];\nif (logLevelFromEnv) {\n    // avoid calling setLogLevel because we don't want a mis-set environment variable to crash\n    if (isAzureLogLevel(logLevelFromEnv)) {\n        setLogLevel(logLevelFromEnv);\n    }\n    else {\n        console.error(`AZURE_LOG_LEVEL set to unknown log level '${logLevelFromEnv}'; logging is not enabled. Acceptable values: ${AZURE_LOG_LEVELS.join(\", \")}.`);\n    }\n}\n/**\n * Immediately enables logging at the specified log level. If no level is specified, logging is disabled.\n * @param level - The log level to enable for logging.\n * Options from most verbose to least verbose are:\n * - verbose\n * - info\n * - warning\n * - error\n */\nfunction setLogLevel(level) {\n    if (level && !isAzureLogLevel(level)) {\n        throw new Error(`Unknown log level '${level}'. Acceptable values: ${AZURE_LOG_LEVELS.join(\",\")}`);\n    }\n    azureLogLevel = level;\n    const enabledNamespaces = [];\n    for (const logger of registeredLoggers) {\n        if (shouldEnable(logger)) {\n            enabledNamespaces.push(logger.namespace);\n        }\n    }\n    _debug_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].enable(enabledNamespaces.join(\",\"));\n}\n/**\n * Retrieves the currently specified log level.\n */\nfunction getLogLevel() {\n    return azureLogLevel;\n}\nconst levelMap = {\n    verbose: 400,\n    info: 300,\n    warning: 200,\n    error: 100,\n};\n/**\n * Creates a logger for use by the Azure SDKs that inherits from `AzureLogger`.\n * @param namespace - The name of the SDK package.\n * @hidden\n */\nfunction createClientLogger(namespace) {\n    const clientRootLogger = AzureLogger.extend(namespace);\n    patchLogMethod(AzureLogger, clientRootLogger);\n    return {\n        error: createLogger(clientRootLogger, \"error\"),\n        warning: createLogger(clientRootLogger, \"warning\"),\n        info: createLogger(clientRootLogger, \"info\"),\n        verbose: createLogger(clientRootLogger, \"verbose\"),\n    };\n}\nfunction patchLogMethod(parent, child) {\n    child.log = (...args) => {\n        parent.log(...args);\n    };\n}\nfunction createLogger(parent, level) {\n    const logger = Object.assign(parent.extend(level), {\n        level,\n    });\n    patchLogMethod(parent, logger);\n    if (shouldEnable(logger)) {\n        const enabledNamespaces = _debug_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].disable();\n        _debug_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].enable(enabledNamespaces + \",\" + logger.namespace);\n    }\n    registeredLoggers.add(logger);\n    return logger;\n}\nfunction shouldEnable(logger) {\n    return Boolean(azureLogLevel && levelMap[logger.level] <= levelMap[azureLogLevel]);\n}\nfunction isAzureLogLevel(logLevel) {\n    return AZURE_LOG_LEVELS.includes(logLevel);\n}\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2xvZ2dlci9kaXN0L2VzbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQ0E7QUFDK0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLG9CQUFvQixxREFBSztBQUNoQztBQUNBLElBQUksaURBQUs7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUVBQW1FLGdCQUFnQixHQUFHLDZDQUE2Qyw0QkFBNEI7QUFDL0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQSw4Q0FBOEMsTUFBTSx3QkFBd0IsMkJBQTJCO0FBQ3ZHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLGlEQUFLO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxrQ0FBa0MsaURBQUs7QUFDdkMsUUFBUSxpREFBSztBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWN0b3J3aWxzb24vRGVza3RvcC9wcm9qZWN0cy9FWlZpei9ub2RlX21vZHVsZXMvQGF6dXJlL2xvZ2dlci9kaXN0L2VzbS9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbmltcG9ydCBkZWJ1ZyBmcm9tIFwiLi9kZWJ1Zy5qc1wiO1xuY29uc3QgcmVnaXN0ZXJlZExvZ2dlcnMgPSBuZXcgU2V0KCk7XG5jb25zdCBsb2dMZXZlbEZyb21FbnYgPSAodHlwZW9mIHByb2Nlc3MgIT09IFwidW5kZWZpbmVkXCIgJiYgcHJvY2Vzcy5lbnYgJiYgcHJvY2Vzcy5lbnYuQVpVUkVfTE9HX0xFVkVMKSB8fCB1bmRlZmluZWQ7XG5sZXQgYXp1cmVMb2dMZXZlbDtcbi8qKlxuICogVGhlIEF6dXJlTG9nZ2VyIHByb3ZpZGVzIGEgbWVjaGFuaXNtIGZvciBvdmVycmlkaW5nIHdoZXJlIGxvZ3MgYXJlIG91dHB1dCB0by5cbiAqIEJ5IGRlZmF1bHQsIGxvZ3MgYXJlIHNlbnQgdG8gc3RkZXJyLlxuICogT3ZlcnJpZGUgdGhlIGBsb2dgIG1ldGhvZCB0byByZWRpcmVjdCBsb2dzIHRvIGFub3RoZXIgbG9jYXRpb24uXG4gKi9cbmV4cG9ydCBjb25zdCBBenVyZUxvZ2dlciA9IGRlYnVnKFwiYXp1cmVcIik7XG5BenVyZUxvZ2dlci5sb2cgPSAoLi4uYXJncykgPT4ge1xuICAgIGRlYnVnLmxvZyguLi5hcmdzKTtcbn07XG5jb25zdCBBWlVSRV9MT0dfTEVWRUxTID0gW1widmVyYm9zZVwiLCBcImluZm9cIiwgXCJ3YXJuaW5nXCIsIFwiZXJyb3JcIl07XG5pZiAobG9nTGV2ZWxGcm9tRW52KSB7XG4gICAgLy8gYXZvaWQgY2FsbGluZyBzZXRMb2dMZXZlbCBiZWNhdXNlIHdlIGRvbid0IHdhbnQgYSBtaXMtc2V0IGVudmlyb25tZW50IHZhcmlhYmxlIHRvIGNyYXNoXG4gICAgaWYgKGlzQXp1cmVMb2dMZXZlbChsb2dMZXZlbEZyb21FbnYpKSB7XG4gICAgICAgIHNldExvZ0xldmVsKGxvZ0xldmVsRnJvbUVudik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zb2xlLmVycm9yKGBBWlVSRV9MT0dfTEVWRUwgc2V0IHRvIHVua25vd24gbG9nIGxldmVsICcke2xvZ0xldmVsRnJvbUVudn0nOyBsb2dnaW5nIGlzIG5vdCBlbmFibGVkLiBBY2NlcHRhYmxlIHZhbHVlczogJHtBWlVSRV9MT0dfTEVWRUxTLmpvaW4oXCIsIFwiKX0uYCk7XG4gICAgfVxufVxuLyoqXG4gKiBJbW1lZGlhdGVseSBlbmFibGVzIGxvZ2dpbmcgYXQgdGhlIHNwZWNpZmllZCBsb2cgbGV2ZWwuIElmIG5vIGxldmVsIGlzIHNwZWNpZmllZCwgbG9nZ2luZyBpcyBkaXNhYmxlZC5cbiAqIEBwYXJhbSBsZXZlbCAtIFRoZSBsb2cgbGV2ZWwgdG8gZW5hYmxlIGZvciBsb2dnaW5nLlxuICogT3B0aW9ucyBmcm9tIG1vc3QgdmVyYm9zZSB0byBsZWFzdCB2ZXJib3NlIGFyZTpcbiAqIC0gdmVyYm9zZVxuICogLSBpbmZvXG4gKiAtIHdhcm5pbmdcbiAqIC0gZXJyb3JcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldExvZ0xldmVsKGxldmVsKSB7XG4gICAgaWYgKGxldmVsICYmICFpc0F6dXJlTG9nTGV2ZWwobGV2ZWwpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBsb2cgbGV2ZWwgJyR7bGV2ZWx9Jy4gQWNjZXB0YWJsZSB2YWx1ZXM6ICR7QVpVUkVfTE9HX0xFVkVMUy5qb2luKFwiLFwiKX1gKTtcbiAgICB9XG4gICAgYXp1cmVMb2dMZXZlbCA9IGxldmVsO1xuICAgIGNvbnN0IGVuYWJsZWROYW1lc3BhY2VzID0gW107XG4gICAgZm9yIChjb25zdCBsb2dnZXIgb2YgcmVnaXN0ZXJlZExvZ2dlcnMpIHtcbiAgICAgICAgaWYgKHNob3VsZEVuYWJsZShsb2dnZXIpKSB7XG4gICAgICAgICAgICBlbmFibGVkTmFtZXNwYWNlcy5wdXNoKGxvZ2dlci5uYW1lc3BhY2UpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGRlYnVnLmVuYWJsZShlbmFibGVkTmFtZXNwYWNlcy5qb2luKFwiLFwiKSk7XG59XG4vKipcbiAqIFJldHJpZXZlcyB0aGUgY3VycmVudGx5IHNwZWNpZmllZCBsb2cgbGV2ZWwuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRMb2dMZXZlbCgpIHtcbiAgICByZXR1cm4gYXp1cmVMb2dMZXZlbDtcbn1cbmNvbnN0IGxldmVsTWFwID0ge1xuICAgIHZlcmJvc2U6IDQwMCxcbiAgICBpbmZvOiAzMDAsXG4gICAgd2FybmluZzogMjAwLFxuICAgIGVycm9yOiAxMDAsXG59O1xuLyoqXG4gKiBDcmVhdGVzIGEgbG9nZ2VyIGZvciB1c2UgYnkgdGhlIEF6dXJlIFNES3MgdGhhdCBpbmhlcml0cyBmcm9tIGBBenVyZUxvZ2dlcmAuXG4gKiBAcGFyYW0gbmFtZXNwYWNlIC0gVGhlIG5hbWUgb2YgdGhlIFNESyBwYWNrYWdlLlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ2xpZW50TG9nZ2VyKG5hbWVzcGFjZSkge1xuICAgIGNvbnN0IGNsaWVudFJvb3RMb2dnZXIgPSBBenVyZUxvZ2dlci5leHRlbmQobmFtZXNwYWNlKTtcbiAgICBwYXRjaExvZ01ldGhvZChBenVyZUxvZ2dlciwgY2xpZW50Um9vdExvZ2dlcik7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZXJyb3I6IGNyZWF0ZUxvZ2dlcihjbGllbnRSb290TG9nZ2VyLCBcImVycm9yXCIpLFxuICAgICAgICB3YXJuaW5nOiBjcmVhdGVMb2dnZXIoY2xpZW50Um9vdExvZ2dlciwgXCJ3YXJuaW5nXCIpLFxuICAgICAgICBpbmZvOiBjcmVhdGVMb2dnZXIoY2xpZW50Um9vdExvZ2dlciwgXCJpbmZvXCIpLFxuICAgICAgICB2ZXJib3NlOiBjcmVhdGVMb2dnZXIoY2xpZW50Um9vdExvZ2dlciwgXCJ2ZXJib3NlXCIpLFxuICAgIH07XG59XG5mdW5jdGlvbiBwYXRjaExvZ01ldGhvZChwYXJlbnQsIGNoaWxkKSB7XG4gICAgY2hpbGQubG9nID0gKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgcGFyZW50LmxvZyguLi5hcmdzKTtcbiAgICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlTG9nZ2VyKHBhcmVudCwgbGV2ZWwpIHtcbiAgICBjb25zdCBsb2dnZXIgPSBPYmplY3QuYXNzaWduKHBhcmVudC5leHRlbmQobGV2ZWwpLCB7XG4gICAgICAgIGxldmVsLFxuICAgIH0pO1xuICAgIHBhdGNoTG9nTWV0aG9kKHBhcmVudCwgbG9nZ2VyKTtcbiAgICBpZiAoc2hvdWxkRW5hYmxlKGxvZ2dlcikpIHtcbiAgICAgICAgY29uc3QgZW5hYmxlZE5hbWVzcGFjZXMgPSBkZWJ1Zy5kaXNhYmxlKCk7XG4gICAgICAgIGRlYnVnLmVuYWJsZShlbmFibGVkTmFtZXNwYWNlcyArIFwiLFwiICsgbG9nZ2VyLm5hbWVzcGFjZSk7XG4gICAgfVxuICAgIHJlZ2lzdGVyZWRMb2dnZXJzLmFkZChsb2dnZXIpO1xuICAgIHJldHVybiBsb2dnZXI7XG59XG5mdW5jdGlvbiBzaG91bGRFbmFibGUobG9nZ2VyKSB7XG4gICAgcmV0dXJuIEJvb2xlYW4oYXp1cmVMb2dMZXZlbCAmJiBsZXZlbE1hcFtsb2dnZXIubGV2ZWxdIDw9IGxldmVsTWFwW2F6dXJlTG9nTGV2ZWxdKTtcbn1cbmZ1bmN0aW9uIGlzQXp1cmVMb2dMZXZlbChsb2dMZXZlbCkge1xuICAgIHJldHVybiBBWlVSRV9MT0dfTEVWRUxTLmluY2x1ZGVzKGxvZ0xldmVsKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/logger/dist/esm/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/logger/dist/esm/log.js":
/*!****************************************************!*\
  !*** ./node_modules/@azure/logger/dist/esm/log.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   log: () => (/* binding */ log)\n/* harmony export */ });\n/* harmony import */ var node_os__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:os */ \"node:os\");\n/* harmony import */ var node_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node:util */ \"node:util\");\n/* harmony import */ var node_process__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! node:process */ \"node:process\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\nfunction log(message, ...args) {\n    node_process__WEBPACK_IMPORTED_MODULE_2__.stderr.write(`${node_util__WEBPACK_IMPORTED_MODULE_1__.format(message, ...args)}${node_os__WEBPACK_IMPORTED_MODULE_0__.EOL}`);\n}\n//# sourceMappingURL=log.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL2xvZ2dlci9kaXN0L2VzbS9sb2cuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDOEI7QUFDRDtBQUNXO0FBQ2pDO0FBQ1AsSUFBSSxnREFBYyxVQUFVLDZDQUFXLG1CQUFtQixFQUFFLHdDQUFHLENBQUM7QUFDaEU7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcndpbHNvbi9EZXNrdG9wL3Byb2plY3RzL0VaVml6L25vZGVfbW9kdWxlcy9AYXp1cmUvbG9nZ2VyL2Rpc3QvZXNtL2xvZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbmltcG9ydCB7IEVPTCB9IGZyb20gXCJub2RlOm9zXCI7XG5pbXBvcnQgdXRpbCBmcm9tIFwibm9kZTp1dGlsXCI7XG5pbXBvcnQgKiBhcyBwcm9jZXNzIGZyb20gXCJub2RlOnByb2Nlc3NcIjtcbmV4cG9ydCBmdW5jdGlvbiBsb2cobWVzc2FnZSwgLi4uYXJncykge1xuICAgIHByb2Nlc3Muc3RkZXJyLndyaXRlKGAke3V0aWwuZm9ybWF0KG1lc3NhZ2UsIC4uLmFyZ3MpfSR7RU9MfWApO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9nLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/logger/dist/esm/log.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BatchResponseParser.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BatchResponseParser.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BatchResponseParser: () => (/* binding */ BatchResponseParser)\n/* harmony export */ });\n/* harmony import */ var _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-rest-pipeline */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/index.js\");\n/* harmony import */ var _azure_core_http_compat__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/core-http-compat */ \"(rsc)/./node_modules/@azure/core-http-compat/dist/esm/index.js\");\n/* harmony import */ var _utils_constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/constants */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js\");\n/* harmony import */ var _BatchUtils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./BatchUtils */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BatchUtils.js\");\n/* harmony import */ var _log__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./log */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/log.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n\n\nconst HTTP_HEADER_DELIMITER = \": \";\nconst SPACE_DELIMITER = \" \";\nconst NOT_FOUND = -1;\n/**\n * Util class for parsing batch response.\n */\nclass BatchResponseParser {\n    constructor(batchResponse, subRequests) {\n        if (!batchResponse || !batchResponse.contentType) {\n            // In special case(reported), server may return invalid content-type which could not be parsed.\n            throw new RangeError(\"batchResponse is malformed or doesn't contain valid content-type.\");\n        }\n        if (!subRequests || subRequests.size === 0) {\n            // This should be prevent during coding.\n            throw new RangeError(\"Invalid state: subRequests is not provided or size is 0.\");\n        }\n        this.batchResponse = batchResponse;\n        this.subRequests = subRequests;\n        this.responseBatchBoundary = this.batchResponse.contentType.split(\"=\")[1];\n        this.perResponsePrefix = `--${this.responseBatchBoundary}${_utils_constants__WEBPACK_IMPORTED_MODULE_2__.HTTP_LINE_ENDING}`;\n        this.batchResponseEnding = `--${this.responseBatchBoundary}--`;\n    }\n    // For example of response, please refer to https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch#response\n    async parseBatchResponse() {\n        // When logic reach here, suppose batch request has already succeeded with 202, so we can further parse\n        // sub request's response.\n        if (this.batchResponse._response.status !== _utils_constants__WEBPACK_IMPORTED_MODULE_2__.HTTPURLConnection.HTTP_ACCEPTED) {\n            throw new Error(`Invalid state: batch request failed with status: '${this.batchResponse._response.status}'.`);\n        }\n        const responseBodyAsText = await (0,_BatchUtils__WEBPACK_IMPORTED_MODULE_3__.getBodyAsText)(this.batchResponse);\n        const subResponses = responseBodyAsText\n            .split(this.batchResponseEnding)[0] // string after ending is useless\n            .split(this.perResponsePrefix)\n            .slice(1); // string before first response boundary is useless\n        const subResponseCount = subResponses.length;\n        // Defensive coding in case of potential error parsing.\n        // Note: subResponseCount == 1 is special case where sub request is invalid.\n        // We try to prevent such cases through early validation, e.g. validate sub request count >= 1.\n        // While in unexpected sub request invalid case, we allow sub response to be parsed and return to user.\n        if (subResponseCount !== this.subRequests.size && subResponseCount !== 1) {\n            throw new Error(\"Invalid state: sub responses' count is not equal to sub requests' count.\");\n        }\n        const deserializedSubResponses = new Array(subResponseCount);\n        let subResponsesSucceededCount = 0;\n        let subResponsesFailedCount = 0;\n        // Parse sub subResponses.\n        for (let index = 0; index < subResponseCount; index++) {\n            const subResponse = subResponses[index];\n            const deserializedSubResponse = {};\n            deserializedSubResponse.headers = (0,_azure_core_http_compat__WEBPACK_IMPORTED_MODULE_1__.toHttpHeadersLike)((0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__.createHttpHeaders)());\n            const responseLines = subResponse.split(`${_utils_constants__WEBPACK_IMPORTED_MODULE_2__.HTTP_LINE_ENDING}`);\n            let subRespHeaderStartFound = false;\n            let subRespHeaderEndFound = false;\n            let subRespFailed = false;\n            let contentId = NOT_FOUND;\n            for (const responseLine of responseLines) {\n                if (!subRespHeaderStartFound) {\n                    // Convention line to indicate content ID\n                    if (responseLine.startsWith(_utils_constants__WEBPACK_IMPORTED_MODULE_2__.HeaderConstants.CONTENT_ID)) {\n                        contentId = parseInt(responseLine.split(HTTP_HEADER_DELIMITER)[1]);\n                    }\n                    // Http version line with status code indicates the start of sub request's response.\n                    // Example: HTTP/1.1 202 Accepted\n                    if (responseLine.startsWith(_utils_constants__WEBPACK_IMPORTED_MODULE_2__.HTTP_VERSION_1_1)) {\n                        subRespHeaderStartFound = true;\n                        const tokens = responseLine.split(SPACE_DELIMITER);\n                        deserializedSubResponse.status = parseInt(tokens[1]);\n                        deserializedSubResponse.statusMessage = tokens.slice(2).join(SPACE_DELIMITER);\n                    }\n                    continue; // Skip convention headers not specifically for sub request i.e. Content-Type: application/http and Content-ID: *\n                }\n                if (responseLine.trim() === \"\") {\n                    // Sub response's header start line already found, and the first empty line indicates header end line found.\n                    if (!subRespHeaderEndFound) {\n                        subRespHeaderEndFound = true;\n                    }\n                    continue; // Skip empty line\n                }\n                // Note: when code reach here, it indicates subRespHeaderStartFound == true\n                if (!subRespHeaderEndFound) {\n                    if (responseLine.indexOf(HTTP_HEADER_DELIMITER) === -1) {\n                        // Defensive coding to prevent from missing valuable lines.\n                        throw new Error(`Invalid state: find non-empty line '${responseLine}' without HTTP header delimiter '${HTTP_HEADER_DELIMITER}'.`);\n                    }\n                    // Parse headers of sub response.\n                    const tokens = responseLine.split(HTTP_HEADER_DELIMITER);\n                    deserializedSubResponse.headers.set(tokens[0], tokens[1]);\n                    if (tokens[0] === _utils_constants__WEBPACK_IMPORTED_MODULE_2__.HeaderConstants.X_MS_ERROR_CODE) {\n                        deserializedSubResponse.errorCode = tokens[1];\n                        subRespFailed = true;\n                    }\n                }\n                else {\n                    // Assemble body of sub response.\n                    if (!deserializedSubResponse.bodyAsText) {\n                        deserializedSubResponse.bodyAsText = \"\";\n                    }\n                    deserializedSubResponse.bodyAsText += responseLine;\n                }\n            } // Inner for end\n            // The response will contain the Content-ID header for each corresponding subrequest response to use for tracking.\n            // The Content-IDs are set to a valid index in the subrequests we sent. In the status code 202 path, we could expect it\n            // to be 1-1 mapping from the [0, subRequests.size) to the Content-IDs returned. If not, we simply don't return that\n            // unexpected subResponse in the parsed reponse and we can always look it up in the raw response for debugging purpose.\n            if (contentId !== NOT_FOUND &&\n                Number.isInteger(contentId) &&\n                contentId >= 0 &&\n                contentId < this.subRequests.size &&\n                deserializedSubResponses[contentId] === undefined) {\n                deserializedSubResponse._request = this.subRequests.get(contentId);\n                deserializedSubResponses[contentId] = deserializedSubResponse;\n            }\n            else {\n                _log__WEBPACK_IMPORTED_MODULE_4__.logger.error(`subResponses[${index}] is dropped as the Content-ID is not found or invalid, Content-ID: ${contentId}`);\n            }\n            if (subRespFailed) {\n                subResponsesFailedCount++;\n            }\n            else {\n                subResponsesSucceededCount++;\n            }\n        }\n        return {\n            subResponses: deserializedSubResponses,\n            subResponsesSucceededCount: subResponsesSucceededCount,\n            subResponsesFailedCount: subResponsesFailedCount,\n        };\n    }\n}\n//# sourceMappingURL=BatchResponseParser.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BatchResponseParser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BatchUtils.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BatchUtils.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getBodyAsText: () => (/* binding */ getBodyAsText),\n/* harmony export */   utf8ByteLength: () => (/* binding */ utf8ByteLength)\n/* harmony export */ });\n/* harmony import */ var _utils_utils_node__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/utils.node */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.node.js\");\n/* harmony import */ var _utils_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/constants */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\nasync function getBodyAsText(batchResponse) {\n    let buffer = Buffer.alloc(_utils_constants__WEBPACK_IMPORTED_MODULE_0__.BATCH_MAX_PAYLOAD_IN_BYTES);\n    const responseLength = await (0,_utils_utils_node__WEBPACK_IMPORTED_MODULE_1__.streamToBuffer2)(batchResponse.readableStreamBody, buffer);\n    // Slice the buffer to trim the empty ending.\n    buffer = buffer.slice(0, responseLength);\n    return buffer.toString();\n}\nfunction utf8ByteLength(str) {\n    return Buffer.byteLength(str);\n}\n//# sourceMappingURL=BatchUtils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL0JhdGNoVXRpbHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDcUQ7QUFDVTtBQUN4RDtBQUNQLDhCQUE4Qix3RUFBMEI7QUFDeEQsaUNBQWlDLGtFQUFlO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWN0b3J3aWxzb24vRGVza3RvcC9wcm9qZWN0cy9FWlZpei9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL0JhdGNoVXRpbHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5pbXBvcnQgeyBzdHJlYW1Ub0J1ZmZlcjIgfSBmcm9tIFwiLi91dGlscy91dGlscy5ub2RlXCI7XG5pbXBvcnQgeyBCQVRDSF9NQVhfUEFZTE9BRF9JTl9CWVRFUyB9IGZyb20gXCIuL3V0aWxzL2NvbnN0YW50c1wiO1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEJvZHlBc1RleHQoYmF0Y2hSZXNwb25zZSkge1xuICAgIGxldCBidWZmZXIgPSBCdWZmZXIuYWxsb2MoQkFUQ0hfTUFYX1BBWUxPQURfSU5fQllURVMpO1xuICAgIGNvbnN0IHJlc3BvbnNlTGVuZ3RoID0gYXdhaXQgc3RyZWFtVG9CdWZmZXIyKGJhdGNoUmVzcG9uc2UucmVhZGFibGVTdHJlYW1Cb2R5LCBidWZmZXIpO1xuICAgIC8vIFNsaWNlIHRoZSBidWZmZXIgdG8gdHJpbSB0aGUgZW1wdHkgZW5kaW5nLlxuICAgIGJ1ZmZlciA9IGJ1ZmZlci5zbGljZSgwLCByZXNwb25zZUxlbmd0aCk7XG4gICAgcmV0dXJuIGJ1ZmZlci50b1N0cmluZygpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHV0ZjhCeXRlTGVuZ3RoKHN0cikge1xuICAgIHJldHVybiBCdWZmZXIuYnl0ZUxlbmd0aChzdHIpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QmF0Y2hVdGlscy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BatchUtils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobBatch.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobBatch.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BlobBatch: () => (/* binding */ BlobBatch)\n/* harmony export */ });\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-util */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/index.js\");\n/* harmony import */ var _azure_core_auth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/core-auth */ \"(rsc)/./node_modules/@azure/core-auth/dist/esm/index.js\");\n/* harmony import */ var _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @azure/core-rest-pipeline */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/index.js\");\n/* harmony import */ var _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./credentials/AnonymousCredential */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/AnonymousCredential.js\");\n/* harmony import */ var _Clients__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Clients */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Clients.js\");\n/* harmony import */ var _utils_Mutex__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/Mutex */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/Mutex.js\");\n/* harmony import */ var _Pipeline__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./Pipeline */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Pipeline.js\");\n/* harmony import */ var _utils_utils_common__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./utils/utils.common */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js\");\n/* harmony import */ var _azure_core_xml__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @azure/core-xml */ \"(rsc)/./node_modules/@azure/core-xml/dist/esm/index.js\");\n/* harmony import */ var _utils_constants__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./utils/constants */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js\");\n/* harmony import */ var _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./credentials/StorageSharedKeyCredential */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/StorageSharedKeyCredential.js\");\n/* harmony import */ var _utils_tracing__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils/tracing */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/tracing.js\");\n/* harmony import */ var _azure_core_client__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @azure/core-client */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/index.js\");\n/* harmony import */ var _policies_StorageSharedKeyCredentialPolicyV2__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./policies/StorageSharedKeyCredentialPolicyV2 */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageSharedKeyCredentialPolicyV2.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * A BlobBatch represents an aggregated set of operations on blobs.\n * Currently, only `delete` and `setAccessTier` are supported.\n */\nclass BlobBatch {\n    constructor() {\n        this.batch = \"batch\";\n        this.batchRequest = new InnerBatchRequest();\n    }\n    /**\n     * Get the value of Content-Type for a batch request.\n     * The value must be multipart/mixed with a batch boundary.\n     * Example: multipart/mixed; boundary=batch_a81786c8-e301-4e42-a729-a32ca24ae252\n     */\n    getMultiPartContentType() {\n        return this.batchRequest.getMultipartContentType();\n    }\n    /**\n     * Get assembled HTTP request body for sub requests.\n     */\n    getHttpRequestBody() {\n        return this.batchRequest.getHttpRequestBody();\n    }\n    /**\n     * Get sub requests that are added into the batch request.\n     */\n    getSubRequests() {\n        return this.batchRequest.getSubRequests();\n    }\n    async addSubRequestInternal(subRequest, assembleSubRequestFunc) {\n        await _utils_Mutex__WEBPACK_IMPORTED_MODULE_5__.Mutex.lock(this.batch);\n        try {\n            this.batchRequest.preAddSubRequest(subRequest);\n            await assembleSubRequestFunc();\n            this.batchRequest.postAddSubRequest(subRequest);\n        }\n        finally {\n            await _utils_Mutex__WEBPACK_IMPORTED_MODULE_5__.Mutex.unlock(this.batch);\n        }\n    }\n    setBatchType(batchType) {\n        if (!this.batchType) {\n            this.batchType = batchType;\n        }\n        if (this.batchType !== batchType) {\n            throw new RangeError(`BlobBatch only supports one operation type per batch and it already is being used for ${this.batchType} operations.`);\n        }\n    }\n    async deleteBlob(urlOrBlobClient, credentialOrOptions, options) {\n        let url;\n        let credential;\n        if (typeof urlOrBlobClient === \"string\" &&\n            ((_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.isNode && credentialOrOptions instanceof _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_6__.StorageSharedKeyCredential) ||\n                credentialOrOptions instanceof _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_7__.AnonymousCredential ||\n                (0,_azure_core_auth__WEBPACK_IMPORTED_MODULE_1__.isTokenCredential)(credentialOrOptions))) {\n            // First overload\n            url = urlOrBlobClient;\n            credential = credentialOrOptions;\n        }\n        else if (urlOrBlobClient instanceof _Clients__WEBPACK_IMPORTED_MODULE_8__.BlobClient) {\n            // Second overload\n            url = urlOrBlobClient.url;\n            credential = urlOrBlobClient.credential;\n            options = credentialOrOptions;\n        }\n        else {\n            throw new RangeError(\"Invalid arguments. Either url and credential, or BlobClient need be provided.\");\n        }\n        if (!options) {\n            options = {};\n        }\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_9__.tracingClient.withSpan(\"BatchDeleteRequest-addSubRequest\", options, async (updatedOptions) => {\n            this.setBatchType(\"delete\");\n            await this.addSubRequestInternal({\n                url: url,\n                credential: credential,\n            }, async () => {\n                await new _Clients__WEBPACK_IMPORTED_MODULE_8__.BlobClient(url, this.batchRequest.createPipeline(credential)).delete(updatedOptions);\n            });\n        });\n    }\n    async setBlobAccessTier(urlOrBlobClient, credentialOrTier, tierOrOptions, options) {\n        let url;\n        let credential;\n        let tier;\n        if (typeof urlOrBlobClient === \"string\" &&\n            ((_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.isNode && credentialOrTier instanceof _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_6__.StorageSharedKeyCredential) ||\n                credentialOrTier instanceof _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_7__.AnonymousCredential ||\n                (0,_azure_core_auth__WEBPACK_IMPORTED_MODULE_1__.isTokenCredential)(credentialOrTier))) {\n            // First overload\n            url = urlOrBlobClient;\n            credential = credentialOrTier;\n            tier = tierOrOptions;\n        }\n        else if (urlOrBlobClient instanceof _Clients__WEBPACK_IMPORTED_MODULE_8__.BlobClient) {\n            // Second overload\n            url = urlOrBlobClient.url;\n            credential = urlOrBlobClient.credential;\n            tier = credentialOrTier;\n            options = tierOrOptions;\n        }\n        else {\n            throw new RangeError(\"Invalid arguments. Either url and credential, or BlobClient need be provided.\");\n        }\n        if (!options) {\n            options = {};\n        }\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_9__.tracingClient.withSpan(\"BatchSetTierRequest-addSubRequest\", options, async (updatedOptions) => {\n            this.setBatchType(\"setAccessTier\");\n            await this.addSubRequestInternal({\n                url: url,\n                credential: credential,\n            }, async () => {\n                await new _Clients__WEBPACK_IMPORTED_MODULE_8__.BlobClient(url, this.batchRequest.createPipeline(credential)).setAccessTier(tier, updatedOptions);\n            });\n        });\n    }\n}\n/**\n * Inner batch request class which is responsible for assembling and serializing sub requests.\n * See https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch#request-body for how requests are assembled.\n */\nclass InnerBatchRequest {\n    constructor() {\n        this.operationCount = 0;\n        this.body = \"\";\n        const tempGuid = (0,_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.randomUUID)();\n        // batch_{batchid}\n        this.boundary = `batch_${tempGuid}`;\n        // --batch_{batchid}\n        // Content-Type: application/http\n        // Content-Transfer-Encoding: binary\n        this.subRequestPrefix = `--${this.boundary}${_utils_constants__WEBPACK_IMPORTED_MODULE_10__.HTTP_LINE_ENDING}${_utils_constants__WEBPACK_IMPORTED_MODULE_10__.HeaderConstants.CONTENT_TYPE}: application/http${_utils_constants__WEBPACK_IMPORTED_MODULE_10__.HTTP_LINE_ENDING}${_utils_constants__WEBPACK_IMPORTED_MODULE_10__.HeaderConstants.CONTENT_TRANSFER_ENCODING}: binary`;\n        // multipart/mixed; boundary=batch_{batchid}\n        this.multipartContentType = `multipart/mixed; boundary=${this.boundary}`;\n        // --batch_{batchid}--\n        this.batchRequestEnding = `--${this.boundary}--`;\n        this.subRequests = new Map();\n    }\n    /**\n     * Create pipeline to assemble sub requests. The idea here is to use existing\n     * credential and serialization/deserialization components, with additional policies to\n     * filter unnecessary headers, assemble sub requests into request's body\n     * and intercept request from going to wire.\n     * @param credential -  Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.\n     */\n    createPipeline(credential) {\n        const corePipeline = (0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_2__.createEmptyPipeline)();\n        corePipeline.addPolicy((0,_azure_core_client__WEBPACK_IMPORTED_MODULE_4__.serializationPolicy)({\n            stringifyXML: _azure_core_xml__WEBPACK_IMPORTED_MODULE_3__.stringifyXML,\n            serializerOptions: {\n                xml: {\n                    xmlCharKey: \"#\",\n                },\n            },\n        }), { phase: \"Serialize\" });\n        // Use batch header filter policy to exclude unnecessary headers\n        corePipeline.addPolicy(batchHeaderFilterPolicy());\n        // Use batch assemble policy to assemble request and intercept request from going to wire\n        corePipeline.addPolicy(batchRequestAssemblePolicy(this), { afterPhase: \"Sign\" });\n        if ((0,_azure_core_auth__WEBPACK_IMPORTED_MODULE_1__.isTokenCredential)(credential)) {\n            corePipeline.addPolicy((0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_2__.bearerTokenAuthenticationPolicy)({\n                credential,\n                scopes: _utils_constants__WEBPACK_IMPORTED_MODULE_10__.StorageOAuthScopes,\n                challengeCallbacks: { authorizeRequestOnChallenge: _azure_core_client__WEBPACK_IMPORTED_MODULE_4__.authorizeRequestOnTenantChallenge },\n            }), { phase: \"Sign\" });\n        }\n        else if (credential instanceof _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_6__.StorageSharedKeyCredential) {\n            corePipeline.addPolicy((0,_policies_StorageSharedKeyCredentialPolicyV2__WEBPACK_IMPORTED_MODULE_11__.storageSharedKeyCredentialPolicy)({\n                accountName: credential.accountName,\n                accountKey: credential.accountKey,\n            }), { phase: \"Sign\" });\n        }\n        const pipeline = new _Pipeline__WEBPACK_IMPORTED_MODULE_12__.Pipeline([]);\n        // attach the v2 pipeline to this one\n        pipeline._credential = credential;\n        pipeline._corePipeline = corePipeline;\n        return pipeline;\n    }\n    appendSubRequestToBody(request) {\n        // Start to assemble sub request\n        this.body += [\n            this.subRequestPrefix, // sub request constant prefix\n            `${_utils_constants__WEBPACK_IMPORTED_MODULE_10__.HeaderConstants.CONTENT_ID}: ${this.operationCount}`, // sub request's content ID\n            \"\", // empty line after sub request's content ID\n            `${request.method.toString()} ${(0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_13__.getURLPathAndQuery)(request.url)} ${_utils_constants__WEBPACK_IMPORTED_MODULE_10__.HTTP_VERSION_1_1}${_utils_constants__WEBPACK_IMPORTED_MODULE_10__.HTTP_LINE_ENDING}`, // sub request start line with method\n        ].join(_utils_constants__WEBPACK_IMPORTED_MODULE_10__.HTTP_LINE_ENDING);\n        for (const [name, value] of request.headers) {\n            this.body += `${name}: ${value}${_utils_constants__WEBPACK_IMPORTED_MODULE_10__.HTTP_LINE_ENDING}`;\n        }\n        this.body += _utils_constants__WEBPACK_IMPORTED_MODULE_10__.HTTP_LINE_ENDING; // sub request's headers need be ending with an empty line\n        // No body to assemble for current batch request support\n        // End to assemble sub request\n    }\n    preAddSubRequest(subRequest) {\n        if (this.operationCount >= _utils_constants__WEBPACK_IMPORTED_MODULE_10__.BATCH_MAX_REQUEST) {\n            throw new RangeError(`Cannot exceed ${_utils_constants__WEBPACK_IMPORTED_MODULE_10__.BATCH_MAX_REQUEST} sub requests in a single batch`);\n        }\n        // Fast fail if url for sub request is invalid\n        const path = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_13__.getURLPath)(subRequest.url);\n        if (!path || path === \"\") {\n            throw new RangeError(`Invalid url for sub request: '${subRequest.url}'`);\n        }\n    }\n    postAddSubRequest(subRequest) {\n        this.subRequests.set(this.operationCount, subRequest);\n        this.operationCount++;\n    }\n    // Return the http request body with assembling the ending line to the sub request body.\n    getHttpRequestBody() {\n        return `${this.body}${this.batchRequestEnding}${_utils_constants__WEBPACK_IMPORTED_MODULE_10__.HTTP_LINE_ENDING}`;\n    }\n    getMultipartContentType() {\n        return this.multipartContentType;\n    }\n    getSubRequests() {\n        return this.subRequests;\n    }\n}\nfunction batchRequestAssemblePolicy(batchRequest) {\n    return {\n        name: \"batchRequestAssemblePolicy\",\n        async sendRequest(request) {\n            batchRequest.appendSubRequestToBody(request);\n            return {\n                request,\n                status: 200,\n                headers: (0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_2__.createHttpHeaders)(),\n            };\n        },\n    };\n}\nfunction batchHeaderFilterPolicy() {\n    return {\n        name: \"batchHeaderFilterPolicy\",\n        async sendRequest(request, next) {\n            let xMsHeaderName = \"\";\n            for (const [name] of request.headers) {\n                if ((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_13__.iEqual)(name, _utils_constants__WEBPACK_IMPORTED_MODULE_10__.HeaderConstants.X_MS_VERSION)) {\n                    xMsHeaderName = name;\n                }\n            }\n            if (xMsHeaderName !== \"\") {\n                request.headers.delete(xMsHeaderName); // The subrequests should not have the x-ms-version header.\n            }\n            return next(request);\n        },\n    };\n}\n//# sourceMappingURL=BlobBatch.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobBatch.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobBatchClient.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobBatchClient.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BlobBatchClient: () => (/* binding */ BlobBatchClient)\n/* harmony export */ });\n/* harmony import */ var _BatchResponseParser__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./BatchResponseParser */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BatchResponseParser.js\");\n/* harmony import */ var _BatchUtils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./BatchUtils */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BatchUtils.js\");\n/* harmony import */ var _BlobBatch__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./BlobBatch */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobBatch.js\");\n/* harmony import */ var _utils_tracing__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/tracing */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/tracing.js\");\n/* harmony import */ var _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./credentials/AnonymousCredential */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/AnonymousCredential.js\");\n/* harmony import */ var _StorageContextClient__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./StorageContextClient */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageContextClient.js\");\n/* harmony import */ var _Pipeline__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Pipeline */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Pipeline.js\");\n/* harmony import */ var _utils_utils_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/utils.common */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n\n\n\n\n\n/**\n * A BlobBatchClient allows you to make batched requests to the Azure Storage Blob service.\n *\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch\n */\nclass BlobBatchClient {\n    constructor(url, credentialOrPipeline, \n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options) {\n        let pipeline;\n        if ((0,_Pipeline__WEBPACK_IMPORTED_MODULE_0__.isPipelineLike)(credentialOrPipeline)) {\n            pipeline = credentialOrPipeline;\n        }\n        else if (!credentialOrPipeline) {\n            // no credential provided\n            pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_0__.newPipeline)(new _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_1__.AnonymousCredential(), options);\n        }\n        else {\n            pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_0__.newPipeline)(credentialOrPipeline, options);\n        }\n        const storageClientContext = new _StorageContextClient__WEBPACK_IMPORTED_MODULE_2__.StorageContextClient(url, (0,_Pipeline__WEBPACK_IMPORTED_MODULE_0__.getCoreClientOptions)(pipeline));\n        const path = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_3__.getURLPath)(url);\n        if (path && path !== \"/\") {\n            // Container scoped.\n            this.serviceOrContainerContext = storageClientContext.container;\n        }\n        else {\n            this.serviceOrContainerContext = storageClientContext.service;\n        }\n    }\n    /**\n     * Creates a {@link BlobBatch}.\n     * A BlobBatch represents an aggregated set of operations on blobs.\n     */\n    createBatch() {\n        return new _BlobBatch__WEBPACK_IMPORTED_MODULE_4__.BlobBatch();\n    }\n    async deleteBlobs(urlsOrBlobClients, credentialOrOptions, \n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options) {\n        const batch = new _BlobBatch__WEBPACK_IMPORTED_MODULE_4__.BlobBatch();\n        for (const urlOrBlobClient of urlsOrBlobClients) {\n            if (typeof urlOrBlobClient === \"string\") {\n                await batch.deleteBlob(urlOrBlobClient, credentialOrOptions, options);\n            }\n            else {\n                await batch.deleteBlob(urlOrBlobClient, credentialOrOptions);\n            }\n        }\n        return this.submitBatch(batch);\n    }\n    async setBlobsAccessTier(urlsOrBlobClients, credentialOrTier, tierOrOptions, \n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options) {\n        const batch = new _BlobBatch__WEBPACK_IMPORTED_MODULE_4__.BlobBatch();\n        for (const urlOrBlobClient of urlsOrBlobClients) {\n            if (typeof urlOrBlobClient === \"string\") {\n                await batch.setBlobAccessTier(urlOrBlobClient, credentialOrTier, tierOrOptions, options);\n            }\n            else {\n                await batch.setBlobAccessTier(urlOrBlobClient, credentialOrTier, tierOrOptions);\n            }\n        }\n        return this.submitBatch(batch);\n    }\n    /**\n     * Submit batch request which consists of multiple subrequests.\n     *\n     * Get `blobBatchClient` and other details before running the snippets.\n     * `blobServiceClient.getBlobBatchClient()` gives the `blobBatchClient`\n     *\n     * Example usage:\n     *\n     * ```js\n     * let batchRequest = new BlobBatch();\n     * await batchRequest.deleteBlob(urlInString0, credential0);\n     * await batchRequest.deleteBlob(urlInString1, credential1, {\n     *  deleteSnapshots: \"include\"\n     * });\n     * const batchResp = await blobBatchClient.submitBatch(batchRequest);\n     * console.log(batchResp.subResponsesSucceededCount);\n     * ```\n     *\n     * Example using a lease:\n     *\n     * ```js\n     * let batchRequest = new BlobBatch();\n     * await batchRequest.setBlobAccessTier(blockBlobClient0, \"Cool\");\n     * await batchRequest.setBlobAccessTier(blockBlobClient1, \"Cool\", {\n     *  conditions: { leaseId: leaseId }\n     * });\n     * const batchResp = await blobBatchClient.submitBatch(batchRequest);\n     * console.log(batchResp.subResponsesSucceededCount);\n     * ```\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch\n     *\n     * @param batchRequest - A set of Delete or SetTier operations.\n     * @param options -\n     */\n    async submitBatch(batchRequest, options = {}) {\n        if (!batchRequest || batchRequest.getSubRequests().size === 0) {\n            throw new RangeError(\"Batch request should contain one or more sub requests.\");\n        }\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_5__.tracingClient.withSpan(\"BlobBatchClient-submitBatch\", options, async (updatedOptions) => {\n            const batchRequestBody = batchRequest.getHttpRequestBody();\n            // ServiceSubmitBatchResponseModel and ContainerSubmitBatchResponse are compatible for now.\n            const rawBatchResponse = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_3__.assertResponse)(await this.serviceOrContainerContext.submitBatch((0,_BatchUtils__WEBPACK_IMPORTED_MODULE_6__.utf8ByteLength)(batchRequestBody), batchRequest.getMultiPartContentType(), batchRequestBody, Object.assign({}, updatedOptions)));\n            // Parse the sub responses result, if logic reaches here(i.e. the batch request succeeded with status code 202).\n            const batchResponseParser = new _BatchResponseParser__WEBPACK_IMPORTED_MODULE_7__.BatchResponseParser(rawBatchResponse, batchRequest.getSubRequests());\n            const responseSummary = await batchResponseParser.parseBatchResponse();\n            const res = {\n                _response: rawBatchResponse._response,\n                contentType: rawBatchResponse.contentType,\n                errorCode: rawBatchResponse.errorCode,\n                requestId: rawBatchResponse.requestId,\n                clientRequestId: rawBatchResponse.clientRequestId,\n                version: rawBatchResponse.version,\n                subResponses: responseSummary.subResponses,\n                subResponsesSucceededCount: responseSummary.subResponsesSucceededCount,\n                subResponsesFailedCount: responseSummary.subResponsesFailedCount,\n            };\n            return res;\n        });\n    }\n}\n//# sourceMappingURL=BlobBatchClient.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL0Jsb2JCYXRjaENsaWVudC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQzREO0FBQ2Q7QUFDTjtBQUNRO0FBQ3dCO0FBQ1Y7QUFDaUI7QUFDYjtBQUNsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSx5REFBYztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixzREFBVyxLQUFLLGlGQUFtQjtBQUMxRDtBQUNBO0FBQ0EsdUJBQXVCLHNEQUFXO0FBQ2xDO0FBQ0EseUNBQXlDLHVFQUFvQixNQUFNLCtEQUFvQjtBQUN2RixxQkFBcUIsK0RBQVU7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLGdCQUFnQjtBQUNsQztBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsaURBQVM7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixpREFBUztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLGlEQUFTO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEIsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRDtBQUNoRDtBQUNBO0FBQ0E7QUFDQSxlQUFlLHlEQUFhO0FBQzVCO0FBQ0E7QUFDQSxxQ0FBcUMsbUVBQWMsa0RBQWtELDJEQUFjLDhGQUE4RjtBQUNqTjtBQUNBLDRDQUE0QyxxRUFBbUI7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvdmljdG9yd2lsc29uL0Rlc2t0b3AvcHJvamVjdHMvRVpWaXovbm9kZV9tb2R1bGVzL0BhenVyZS9zdG9yYWdlLWJsb2IvZGlzdC1lc20vc3RvcmFnZS1ibG9iL3NyYy9CbG9iQmF0Y2hDbGllbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5pbXBvcnQgeyBCYXRjaFJlc3BvbnNlUGFyc2VyIH0gZnJvbSBcIi4vQmF0Y2hSZXNwb25zZVBhcnNlclwiO1xuaW1wb3J0IHsgdXRmOEJ5dGVMZW5ndGggfSBmcm9tIFwiLi9CYXRjaFV0aWxzXCI7XG5pbXBvcnQgeyBCbG9iQmF0Y2ggfSBmcm9tIFwiLi9CbG9iQmF0Y2hcIjtcbmltcG9ydCB7IHRyYWNpbmdDbGllbnQgfSBmcm9tIFwiLi91dGlscy90cmFjaW5nXCI7XG5pbXBvcnQgeyBBbm9ueW1vdXNDcmVkZW50aWFsIH0gZnJvbSBcIi4vY3JlZGVudGlhbHMvQW5vbnltb3VzQ3JlZGVudGlhbFwiO1xuaW1wb3J0IHsgU3RvcmFnZUNvbnRleHRDbGllbnQgfSBmcm9tIFwiLi9TdG9yYWdlQ29udGV4dENsaWVudFwiO1xuaW1wb3J0IHsgbmV3UGlwZWxpbmUsIGlzUGlwZWxpbmVMaWtlLCBnZXRDb3JlQ2xpZW50T3B0aW9ucyB9IGZyb20gXCIuL1BpcGVsaW5lXCI7XG5pbXBvcnQgeyBhc3NlcnRSZXNwb25zZSwgZ2V0VVJMUGF0aCB9IGZyb20gXCIuL3V0aWxzL3V0aWxzLmNvbW1vblwiO1xuLyoqXG4gKiBBIEJsb2JCYXRjaENsaWVudCBhbGxvd3MgeW91IHRvIG1ha2UgYmF0Y2hlZCByZXF1ZXN0cyB0byB0aGUgQXp1cmUgU3RvcmFnZSBCbG9iIHNlcnZpY2UuXG4gKlxuICogQHNlZSBodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9lbi11cy9yZXN0L2FwaS9zdG9yYWdlc2VydmljZXMvYmxvYi1iYXRjaFxuICovXG5leHBvcnQgY2xhc3MgQmxvYkJhdGNoQ2xpZW50IHtcbiAgICBjb25zdHJ1Y3Rvcih1cmwsIGNyZWRlbnRpYWxPclBpcGVsaW5lLCBcbiAgICAvLyBMZWdhY3ksIG5vIGZpeCBmb3IgZXNsaW50IGVycm9yIHdpdGhvdXQgYnJlYWtpbmcuIERpc2FibGUgaXQgZm9yIHRoaXMgaW50ZXJmYWNlLlxuICAgIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAYXp1cmUvYXp1cmUtc2RrL3RzLW5hbWluZy1vcHRpb25zKi9cbiAgICBvcHRpb25zKSB7XG4gICAgICAgIGxldCBwaXBlbGluZTtcbiAgICAgICAgaWYgKGlzUGlwZWxpbmVMaWtlKGNyZWRlbnRpYWxPclBpcGVsaW5lKSkge1xuICAgICAgICAgICAgcGlwZWxpbmUgPSBjcmVkZW50aWFsT3JQaXBlbGluZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghY3JlZGVudGlhbE9yUGlwZWxpbmUpIHtcbiAgICAgICAgICAgIC8vIG5vIGNyZWRlbnRpYWwgcHJvdmlkZWRcbiAgICAgICAgICAgIHBpcGVsaW5lID0gbmV3UGlwZWxpbmUobmV3IEFub255bW91c0NyZWRlbnRpYWwoKSwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBwaXBlbGluZSA9IG5ld1BpcGVsaW5lKGNyZWRlbnRpYWxPclBpcGVsaW5lLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzdG9yYWdlQ2xpZW50Q29udGV4dCA9IG5ldyBTdG9yYWdlQ29udGV4dENsaWVudCh1cmwsIGdldENvcmVDbGllbnRPcHRpb25zKHBpcGVsaW5lKSk7XG4gICAgICAgIGNvbnN0IHBhdGggPSBnZXRVUkxQYXRoKHVybCk7XG4gICAgICAgIGlmIChwYXRoICYmIHBhdGggIT09IFwiL1wiKSB7XG4gICAgICAgICAgICAvLyBDb250YWluZXIgc2NvcGVkLlxuICAgICAgICAgICAgdGhpcy5zZXJ2aWNlT3JDb250YWluZXJDb250ZXh0ID0gc3RvcmFnZUNsaWVudENvbnRleHQuY29udGFpbmVyO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zZXJ2aWNlT3JDb250YWluZXJDb250ZXh0ID0gc3RvcmFnZUNsaWVudENvbnRleHQuc2VydmljZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEge0BsaW5rIEJsb2JCYXRjaH0uXG4gICAgICogQSBCbG9iQmF0Y2ggcmVwcmVzZW50cyBhbiBhZ2dyZWdhdGVkIHNldCBvZiBvcGVyYXRpb25zIG9uIGJsb2JzLlxuICAgICAqL1xuICAgIGNyZWF0ZUJhdGNoKCkge1xuICAgICAgICByZXR1cm4gbmV3IEJsb2JCYXRjaCgpO1xuICAgIH1cbiAgICBhc3luYyBkZWxldGVCbG9icyh1cmxzT3JCbG9iQ2xpZW50cywgY3JlZGVudGlhbE9yT3B0aW9ucywgXG4gICAgLy8gTGVnYWN5LCBubyBmaXggZm9yIGVzbGludCBlcnJvciB3aXRob3V0IGJyZWFraW5nLiBEaXNhYmxlIGl0IGZvciB0aGlzIGludGVyZmFjZS5cbiAgICAvKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQGF6dXJlL2F6dXJlLXNkay90cy1uYW1pbmctb3B0aW9ucyovXG4gICAgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBiYXRjaCA9IG5ldyBCbG9iQmF0Y2goKTtcbiAgICAgICAgZm9yIChjb25zdCB1cmxPckJsb2JDbGllbnQgb2YgdXJsc09yQmxvYkNsaWVudHMpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdXJsT3JCbG9iQ2xpZW50ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgYmF0Y2guZGVsZXRlQmxvYih1cmxPckJsb2JDbGllbnQsIGNyZWRlbnRpYWxPck9wdGlvbnMsIG9wdGlvbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgYmF0Y2guZGVsZXRlQmxvYih1cmxPckJsb2JDbGllbnQsIGNyZWRlbnRpYWxPck9wdGlvbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnN1Ym1pdEJhdGNoKGJhdGNoKTtcbiAgICB9XG4gICAgYXN5bmMgc2V0QmxvYnNBY2Nlc3NUaWVyKHVybHNPckJsb2JDbGllbnRzLCBjcmVkZW50aWFsT3JUaWVyLCB0aWVyT3JPcHRpb25zLCBcbiAgICAvLyBMZWdhY3ksIG5vIGZpeCBmb3IgZXNsaW50IGVycm9yIHdpdGhvdXQgYnJlYWtpbmcuIERpc2FibGUgaXQgZm9yIHRoaXMgaW50ZXJmYWNlLlxuICAgIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAYXp1cmUvYXp1cmUtc2RrL3RzLW5hbWluZy1vcHRpb25zKi9cbiAgICBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGJhdGNoID0gbmV3IEJsb2JCYXRjaCgpO1xuICAgICAgICBmb3IgKGNvbnN0IHVybE9yQmxvYkNsaWVudCBvZiB1cmxzT3JCbG9iQ2xpZW50cykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB1cmxPckJsb2JDbGllbnQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCBiYXRjaC5zZXRCbG9iQWNjZXNzVGllcih1cmxPckJsb2JDbGllbnQsIGNyZWRlbnRpYWxPclRpZXIsIHRpZXJPck9wdGlvbnMsIG9wdGlvbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgYmF0Y2guc2V0QmxvYkFjY2Vzc1RpZXIodXJsT3JCbG9iQ2xpZW50LCBjcmVkZW50aWFsT3JUaWVyLCB0aWVyT3JPcHRpb25zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5zdWJtaXRCYXRjaChiYXRjaCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN1Ym1pdCBiYXRjaCByZXF1ZXN0IHdoaWNoIGNvbnNpc3RzIG9mIG11bHRpcGxlIHN1YnJlcXVlc3RzLlxuICAgICAqXG4gICAgICogR2V0IGBibG9iQmF0Y2hDbGllbnRgIGFuZCBvdGhlciBkZXRhaWxzIGJlZm9yZSBydW5uaW5nIHRoZSBzbmlwcGV0cy5cbiAgICAgKiBgYmxvYlNlcnZpY2VDbGllbnQuZ2V0QmxvYkJhdGNoQ2xpZW50KClgIGdpdmVzIHRoZSBgYmxvYkJhdGNoQ2xpZW50YFxuICAgICAqXG4gICAgICogRXhhbXBsZSB1c2FnZTpcbiAgICAgKlxuICAgICAqIGBgYGpzXG4gICAgICogbGV0IGJhdGNoUmVxdWVzdCA9IG5ldyBCbG9iQmF0Y2goKTtcbiAgICAgKiBhd2FpdCBiYXRjaFJlcXVlc3QuZGVsZXRlQmxvYih1cmxJblN0cmluZzAsIGNyZWRlbnRpYWwwKTtcbiAgICAgKiBhd2FpdCBiYXRjaFJlcXVlc3QuZGVsZXRlQmxvYih1cmxJblN0cmluZzEsIGNyZWRlbnRpYWwxLCB7XG4gICAgICogIGRlbGV0ZVNuYXBzaG90czogXCJpbmNsdWRlXCJcbiAgICAgKiB9KTtcbiAgICAgKiBjb25zdCBiYXRjaFJlc3AgPSBhd2FpdCBibG9iQmF0Y2hDbGllbnQuc3VibWl0QmF0Y2goYmF0Y2hSZXF1ZXN0KTtcbiAgICAgKiBjb25zb2xlLmxvZyhiYXRjaFJlc3Auc3ViUmVzcG9uc2VzU3VjY2VlZGVkQ291bnQpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogRXhhbXBsZSB1c2luZyBhIGxlYXNlOlxuICAgICAqXG4gICAgICogYGBganNcbiAgICAgKiBsZXQgYmF0Y2hSZXF1ZXN0ID0gbmV3IEJsb2JCYXRjaCgpO1xuICAgICAqIGF3YWl0IGJhdGNoUmVxdWVzdC5zZXRCbG9iQWNjZXNzVGllcihibG9ja0Jsb2JDbGllbnQwLCBcIkNvb2xcIik7XG4gICAgICogYXdhaXQgYmF0Y2hSZXF1ZXN0LnNldEJsb2JBY2Nlc3NUaWVyKGJsb2NrQmxvYkNsaWVudDEsIFwiQ29vbFwiLCB7XG4gICAgICogIGNvbmRpdGlvbnM6IHsgbGVhc2VJZDogbGVhc2VJZCB9XG4gICAgICogfSk7XG4gICAgICogY29uc3QgYmF0Y2hSZXNwID0gYXdhaXQgYmxvYkJhdGNoQ2xpZW50LnN1Ym1pdEJhdGNoKGJhdGNoUmVxdWVzdCk7XG4gICAgICogY29uc29sZS5sb2coYmF0Y2hSZXNwLnN1YlJlc3BvbnNlc1N1Y2NlZWRlZENvdW50KTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBzZWUgaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvcmVzdC9hcGkvc3RvcmFnZXNlcnZpY2VzL2Jsb2ItYmF0Y2hcbiAgICAgKlxuICAgICAqIEBwYXJhbSBiYXRjaFJlcXVlc3QgLSBBIHNldCBvZiBEZWxldGUgb3IgU2V0VGllciBvcGVyYXRpb25zLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC1cbiAgICAgKi9cbiAgICBhc3luYyBzdWJtaXRCYXRjaChiYXRjaFJlcXVlc3QsIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBpZiAoIWJhdGNoUmVxdWVzdCB8fCBiYXRjaFJlcXVlc3QuZ2V0U3ViUmVxdWVzdHMoKS5zaXplID09PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkJhdGNoIHJlcXVlc3Qgc2hvdWxkIGNvbnRhaW4gb25lIG9yIG1vcmUgc3ViIHJlcXVlc3RzLlwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJhY2luZ0NsaWVudC53aXRoU3BhbihcIkJsb2JCYXRjaENsaWVudC1zdWJtaXRCYXRjaFwiLCBvcHRpb25zLCBhc3luYyAodXBkYXRlZE9wdGlvbnMpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGJhdGNoUmVxdWVzdEJvZHkgPSBiYXRjaFJlcXVlc3QuZ2V0SHR0cFJlcXVlc3RCb2R5KCk7XG4gICAgICAgICAgICAvLyBTZXJ2aWNlU3VibWl0QmF0Y2hSZXNwb25zZU1vZGVsIGFuZCBDb250YWluZXJTdWJtaXRCYXRjaFJlc3BvbnNlIGFyZSBjb21wYXRpYmxlIGZvciBub3cuXG4gICAgICAgICAgICBjb25zdCByYXdCYXRjaFJlc3BvbnNlID0gYXNzZXJ0UmVzcG9uc2UoYXdhaXQgdGhpcy5zZXJ2aWNlT3JDb250YWluZXJDb250ZXh0LnN1Ym1pdEJhdGNoKHV0ZjhCeXRlTGVuZ3RoKGJhdGNoUmVxdWVzdEJvZHkpLCBiYXRjaFJlcXVlc3QuZ2V0TXVsdGlQYXJ0Q29udGVudFR5cGUoKSwgYmF0Y2hSZXF1ZXN0Qm9keSwgT2JqZWN0LmFzc2lnbih7fSwgdXBkYXRlZE9wdGlvbnMpKSk7XG4gICAgICAgICAgICAvLyBQYXJzZSB0aGUgc3ViIHJlc3BvbnNlcyByZXN1bHQsIGlmIGxvZ2ljIHJlYWNoZXMgaGVyZShpLmUuIHRoZSBiYXRjaCByZXF1ZXN0IHN1Y2NlZWRlZCB3aXRoIHN0YXR1cyBjb2RlIDIwMikuXG4gICAgICAgICAgICBjb25zdCBiYXRjaFJlc3BvbnNlUGFyc2VyID0gbmV3IEJhdGNoUmVzcG9uc2VQYXJzZXIocmF3QmF0Y2hSZXNwb25zZSwgYmF0Y2hSZXF1ZXN0LmdldFN1YlJlcXVlc3RzKCkpO1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2VTdW1tYXJ5ID0gYXdhaXQgYmF0Y2hSZXNwb25zZVBhcnNlci5wYXJzZUJhdGNoUmVzcG9uc2UoKTtcbiAgICAgICAgICAgIGNvbnN0IHJlcyA9IHtcbiAgICAgICAgICAgICAgICBfcmVzcG9uc2U6IHJhd0JhdGNoUmVzcG9uc2UuX3Jlc3BvbnNlLFxuICAgICAgICAgICAgICAgIGNvbnRlbnRUeXBlOiByYXdCYXRjaFJlc3BvbnNlLmNvbnRlbnRUeXBlLFxuICAgICAgICAgICAgICAgIGVycm9yQ29kZTogcmF3QmF0Y2hSZXNwb25zZS5lcnJvckNvZGUsXG4gICAgICAgICAgICAgICAgcmVxdWVzdElkOiByYXdCYXRjaFJlc3BvbnNlLnJlcXVlc3RJZCxcbiAgICAgICAgICAgICAgICBjbGllbnRSZXF1ZXN0SWQ6IHJhd0JhdGNoUmVzcG9uc2UuY2xpZW50UmVxdWVzdElkLFxuICAgICAgICAgICAgICAgIHZlcnNpb246IHJhd0JhdGNoUmVzcG9uc2UudmVyc2lvbixcbiAgICAgICAgICAgICAgICBzdWJSZXNwb25zZXM6IHJlc3BvbnNlU3VtbWFyeS5zdWJSZXNwb25zZXMsXG4gICAgICAgICAgICAgICAgc3ViUmVzcG9uc2VzU3VjY2VlZGVkQ291bnQ6IHJlc3BvbnNlU3VtbWFyeS5zdWJSZXNwb25zZXNTdWNjZWVkZWRDb3VudCxcbiAgICAgICAgICAgICAgICBzdWJSZXNwb25zZXNGYWlsZWRDb3VudDogcmVzcG9uc2VTdW1tYXJ5LnN1YlJlc3BvbnNlc0ZhaWxlZENvdW50LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUJsb2JCYXRjaENsaWVudC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobBatchClient.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobDownloadResponse.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobDownloadResponse.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BlobDownloadResponse: () => (/* binding */ BlobDownloadResponse)\n/* harmony export */ });\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-util */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/index.js\");\n/* harmony import */ var _utils_RetriableReadableStream__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/RetriableReadableStream */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/RetriableReadableStream.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * BlobDownloadResponse implements BlobDownloadResponseParsed interface, and in Node.js runtime it will\n * automatically retry when internal read stream unexpected ends. (This kind of unexpected ends cannot\n * trigger retries defined in pipeline retry policy.)\n *\n * The {@link readableStreamBody} stream will retry underlayer, you can just use it as a normal Node.js\n * Readable stream.\n */\nclass BlobDownloadResponse {\n    /**\n     * Indicates that the service supports\n     * requests for partial file content.\n     *\n     * @readonly\n     */\n    get acceptRanges() {\n        return this.originalResponse.acceptRanges;\n    }\n    /**\n     * Returns if it was previously specified\n     * for the file.\n     *\n     * @readonly\n     */\n    get cacheControl() {\n        return this.originalResponse.cacheControl;\n    }\n    /**\n     * Returns the value that was specified\n     * for the 'x-ms-content-disposition' header and specifies how to process the\n     * response.\n     *\n     * @readonly\n     */\n    get contentDisposition() {\n        return this.originalResponse.contentDisposition;\n    }\n    /**\n     * Returns the value that was specified\n     * for the Content-Encoding request header.\n     *\n     * @readonly\n     */\n    get contentEncoding() {\n        return this.originalResponse.contentEncoding;\n    }\n    /**\n     * Returns the value that was specified\n     * for the Content-Language request header.\n     *\n     * @readonly\n     */\n    get contentLanguage() {\n        return this.originalResponse.contentLanguage;\n    }\n    /**\n     * The current sequence number for a\n     * page blob. This header is not returned for block blobs or append blobs.\n     *\n     * @readonly\n     */\n    get blobSequenceNumber() {\n        return this.originalResponse.blobSequenceNumber;\n    }\n    /**\n     * The blob's type. Possible values include:\n     * 'BlockBlob', 'PageBlob', 'AppendBlob'.\n     *\n     * @readonly\n     */\n    get blobType() {\n        return this.originalResponse.blobType;\n    }\n    /**\n     * The number of bytes present in the\n     * response body.\n     *\n     * @readonly\n     */\n    get contentLength() {\n        return this.originalResponse.contentLength;\n    }\n    /**\n     * If the file has an MD5 hash and the\n     * request is to read the full file, this response header is returned so that\n     * the client can check for message content integrity. If the request is to\n     * read a specified range and the 'x-ms-range-get-content-md5' is set to\n     * true, then the request returns an MD5 hash for the range, as long as the\n     * range size is less than or equal to 4 MB. If neither of these sets of\n     * conditions is true, then no value is returned for the 'Content-MD5'\n     * header.\n     *\n     * @readonly\n     */\n    get contentMD5() {\n        return this.originalResponse.contentMD5;\n    }\n    /**\n     * Indicates the range of bytes returned if\n     * the client requested a subset of the file by setting the Range request\n     * header.\n     *\n     * @readonly\n     */\n    get contentRange() {\n        return this.originalResponse.contentRange;\n    }\n    /**\n     * The content type specified for the file.\n     * The default content type is 'application/octet-stream'\n     *\n     * @readonly\n     */\n    get contentType() {\n        return this.originalResponse.contentType;\n    }\n    /**\n     * Conclusion time of the last attempted\n     * Copy File operation where this file was the destination file. This value\n     * can specify the time of a completed, aborted, or failed copy attempt.\n     *\n     * @readonly\n     */\n    get copyCompletedOn() {\n        return this.originalResponse.copyCompletedOn;\n    }\n    /**\n     * String identifier for the last attempted Copy\n     * File operation where this file was the destination file.\n     *\n     * @readonly\n     */\n    get copyId() {\n        return this.originalResponse.copyId;\n    }\n    /**\n     * Contains the number of bytes copied and\n     * the total bytes in the source in the last attempted Copy File operation\n     * where this file was the destination file. Can show between 0 and\n     * Content-Length bytes copied.\n     *\n     * @readonly\n     */\n    get copyProgress() {\n        return this.originalResponse.copyProgress;\n    }\n    /**\n     * URL up to 2KB in length that specifies the\n     * source file used in the last attempted Copy File operation where this file\n     * was the destination file.\n     *\n     * @readonly\n     */\n    get copySource() {\n        return this.originalResponse.copySource;\n    }\n    /**\n     * State of the copy operation\n     * identified by 'x-ms-copy-id'. Possible values include: 'pending',\n     * 'success', 'aborted', 'failed'\n     *\n     * @readonly\n     */\n    get copyStatus() {\n        return this.originalResponse.copyStatus;\n    }\n    /**\n     * Only appears when\n     * x-ms-copy-status is failed or pending. Describes cause of fatal or\n     * non-fatal copy operation failure.\n     *\n     * @readonly\n     */\n    get copyStatusDescription() {\n        return this.originalResponse.copyStatusDescription;\n    }\n    /**\n     * When a blob is leased,\n     * specifies whether the lease is of infinite or fixed duration. Possible\n     * values include: 'infinite', 'fixed'.\n     *\n     * @readonly\n     */\n    get leaseDuration() {\n        return this.originalResponse.leaseDuration;\n    }\n    /**\n     * Lease state of the blob. Possible\n     * values include: 'available', 'leased', 'expired', 'breaking', 'broken'.\n     *\n     * @readonly\n     */\n    get leaseState() {\n        return this.originalResponse.leaseState;\n    }\n    /**\n     * The current lease status of the\n     * blob. Possible values include: 'locked', 'unlocked'.\n     *\n     * @readonly\n     */\n    get leaseStatus() {\n        return this.originalResponse.leaseStatus;\n    }\n    /**\n     * A UTC date/time value generated by the service that\n     * indicates the time at which the response was initiated.\n     *\n     * @readonly\n     */\n    get date() {\n        return this.originalResponse.date;\n    }\n    /**\n     * The number of committed blocks\n     * present in the blob. This header is returned only for append blobs.\n     *\n     * @readonly\n     */\n    get blobCommittedBlockCount() {\n        return this.originalResponse.blobCommittedBlockCount;\n    }\n    /**\n     * The ETag contains a value that you can use to\n     * perform operations conditionally, in quotes.\n     *\n     * @readonly\n     */\n    get etag() {\n        return this.originalResponse.etag;\n    }\n    /**\n     * The number of tags associated with the blob\n     *\n     * @readonly\n     */\n    get tagCount() {\n        return this.originalResponse.tagCount;\n    }\n    /**\n     * The error code.\n     *\n     * @readonly\n     */\n    get errorCode() {\n        return this.originalResponse.errorCode;\n    }\n    /**\n     * The value of this header is set to\n     * true if the file data and application metadata are completely encrypted\n     * using the specified algorithm. Otherwise, the value is set to false (when\n     * the file is unencrypted, or if only parts of the file/application metadata\n     * are encrypted).\n     *\n     * @readonly\n     */\n    get isServerEncrypted() {\n        return this.originalResponse.isServerEncrypted;\n    }\n    /**\n     * If the blob has a MD5 hash, and if\n     * request contains range header (Range or x-ms-range), this response header\n     * is returned with the value of the whole blob's MD5 value. This value may\n     * or may not be equal to the value returned in Content-MD5 header, with the\n     * latter calculated from the requested range.\n     *\n     * @readonly\n     */\n    get blobContentMD5() {\n        return this.originalResponse.blobContentMD5;\n    }\n    /**\n     * Returns the date and time the file was last\n     * modified. Any operation that modifies the file or its properties updates\n     * the last modified time.\n     *\n     * @readonly\n     */\n    get lastModified() {\n        return this.originalResponse.lastModified;\n    }\n    /**\n     * Returns the UTC date and time generated by the service that indicates the time at which the blob was\n     * last read or written to.\n     *\n     * @readonly\n     */\n    get lastAccessed() {\n        return this.originalResponse.lastAccessed;\n    }\n    /**\n     * Returns the date and time the blob was created.\n     *\n     * @readonly\n     */\n    get createdOn() {\n        return this.originalResponse.createdOn;\n    }\n    /**\n     * A name-value pair\n     * to associate with a file storage object.\n     *\n     * @readonly\n     */\n    get metadata() {\n        return this.originalResponse.metadata;\n    }\n    /**\n     * This header uniquely identifies the request\n     * that was made and can be used for troubleshooting the request.\n     *\n     * @readonly\n     */\n    get requestId() {\n        return this.originalResponse.requestId;\n    }\n    /**\n     * If a client request id header is sent in the request, this header will be present in the\n     * response with the same value.\n     *\n     * @readonly\n     */\n    get clientRequestId() {\n        return this.originalResponse.clientRequestId;\n    }\n    /**\n     * Indicates the version of the Blob service used\n     * to execute the request.\n     *\n     * @readonly\n     */\n    get version() {\n        return this.originalResponse.version;\n    }\n    /**\n     * Indicates the versionId of the downloaded blob version.\n     *\n     * @readonly\n     */\n    get versionId() {\n        return this.originalResponse.versionId;\n    }\n    /**\n     * Indicates whether version of this blob is a current version.\n     *\n     * @readonly\n     */\n    get isCurrentVersion() {\n        return this.originalResponse.isCurrentVersion;\n    }\n    /**\n     * The SHA-256 hash of the encryption key used to encrypt the blob. This value is only returned\n     * when the blob was encrypted with a customer-provided key.\n     *\n     * @readonly\n     */\n    get encryptionKeySha256() {\n        return this.originalResponse.encryptionKeySha256;\n    }\n    /**\n     * If the request is to read a specified range and the x-ms-range-get-content-crc64 is set to\n     * true, then the request returns a crc64 for the range, as long as the range size is less than\n     * or equal to 4 MB. If both x-ms-range-get-content-crc64 & x-ms-range-get-content-md5 is\n     * specified in the same request, it will fail with 400(Bad Request)\n     */\n    get contentCrc64() {\n        return this.originalResponse.contentCrc64;\n    }\n    /**\n     * Object Replication Policy Id of the destination blob.\n     *\n     * @readonly\n     */\n    get objectReplicationDestinationPolicyId() {\n        return this.originalResponse.objectReplicationDestinationPolicyId;\n    }\n    /**\n     * Parsed Object Replication Policy Id, Rule Id(s) and status of the source blob.\n     *\n     * @readonly\n     */\n    get objectReplicationSourceProperties() {\n        return this.originalResponse.objectReplicationSourceProperties;\n    }\n    /**\n     * If this blob has been sealed.\n     *\n     * @readonly\n     */\n    get isSealed() {\n        return this.originalResponse.isSealed;\n    }\n    /**\n     * UTC date/time value generated by the service that indicates the time at which the blob immutability policy will expire.\n     *\n     * @readonly\n     */\n    get immutabilityPolicyExpiresOn() {\n        return this.originalResponse.immutabilityPolicyExpiresOn;\n    }\n    /**\n     * Indicates immutability policy mode.\n     *\n     * @readonly\n     */\n    get immutabilityPolicyMode() {\n        return this.originalResponse.immutabilityPolicyMode;\n    }\n    /**\n     * Indicates if a legal hold is present on the blob.\n     *\n     * @readonly\n     */\n    get legalHold() {\n        return this.originalResponse.legalHold;\n    }\n    /**\n     * The response body as a browser Blob.\n     * Always undefined in node.js.\n     *\n     * @readonly\n     */\n    get contentAsBlob() {\n        return this.originalResponse.blobBody;\n    }\n    /**\n     * The response body as a node.js Readable stream.\n     * Always undefined in the browser.\n     *\n     * It will automatically retry when internal read stream unexpected ends.\n     *\n     * @readonly\n     */\n    get readableStreamBody() {\n        return _azure_core_util__WEBPACK_IMPORTED_MODULE_0__.isNode ? this.blobDownloadStream : undefined;\n    }\n    /**\n     * The HTTP response.\n     */\n    get _response() {\n        return this.originalResponse._response;\n    }\n    /**\n     * Creates an instance of BlobDownloadResponse.\n     *\n     * @param originalResponse -\n     * @param getter -\n     * @param offset -\n     * @param count -\n     * @param options -\n     */\n    constructor(originalResponse, getter, offset, count, options = {}) {\n        this.originalResponse = originalResponse;\n        this.blobDownloadStream = new _utils_RetriableReadableStream__WEBPACK_IMPORTED_MODULE_1__.RetriableReadableStream(this.originalResponse.readableStreamBody, getter, offset, count, options);\n    }\n}\n//# sourceMappingURL=BlobDownloadResponse.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobDownloadResponse.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobLeaseClient.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobLeaseClient.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BlobLeaseClient: () => (/* binding */ BlobLeaseClient)\n/* harmony export */ });\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-util */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/index.js\");\n/* harmony import */ var _utils_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/constants */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js\");\n/* harmony import */ var _utils_tracing__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/tracing */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/tracing.js\");\n/* harmony import */ var _utils_utils_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/utils.common */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n\n/**\n * A client that manages leases for a {@link ContainerClient} or a {@link BlobClient}.\n */\nclass BlobLeaseClient {\n    /**\n     * Gets the lease Id.\n     *\n     * @readonly\n     */\n    get leaseId() {\n        return this._leaseId;\n    }\n    /**\n     * Gets the url.\n     *\n     * @readonly\n     */\n    get url() {\n        return this._url;\n    }\n    /**\n     * Creates an instance of BlobLeaseClient.\n     * @param client - The client to make the lease operation requests.\n     * @param leaseId - Initial proposed lease id.\n     */\n    constructor(client, leaseId) {\n        const clientContext = client.storageClientContext;\n        this._url = client.url;\n        if (client.name === undefined) {\n            this._isContainer = true;\n            this._containerOrBlobOperation = clientContext.container;\n        }\n        else {\n            this._isContainer = false;\n            this._containerOrBlobOperation = clientContext.blob;\n        }\n        if (!leaseId) {\n            leaseId = (0,_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.randomUUID)();\n        }\n        this._leaseId = leaseId;\n    }\n    /**\n     * Establishes and manages a lock on a container for delete operations, or on a blob\n     * for write and delete operations.\n     * The lock duration can be 15 to 60 seconds, or can be infinite.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n     * and\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n     *\n     * @param duration - Must be between 15 to 60 seconds, or infinite (-1)\n     * @param options - option to configure lease management operations.\n     * @returns Response data for acquire lease operation.\n     */\n    async acquireLease(duration, options = {}) {\n        var _a, _b, _c, _d, _e;\n        if (this._isContainer &&\n            ((((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== _utils_constants__WEBPACK_IMPORTED_MODULE_1__.ETagNone) ||\n                (((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== _utils_constants__WEBPACK_IMPORTED_MODULE_1__.ETagNone) ||\n                ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions))) {\n            throw new RangeError(\"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\");\n        }\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_2__.tracingClient.withSpan(\"BlobLeaseClient-acquireLease\", options, async (updatedOptions) => {\n            var _a;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_3__.assertResponse)(await this._containerOrBlobOperation.acquireLease({\n                abortSignal: options.abortSignal,\n                duration,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                proposedLeaseId: this._leaseId,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * To change the ID of the lease.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n     * and\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n     *\n     * @param proposedLeaseId - the proposed new lease Id.\n     * @param options - option to configure lease management operations.\n     * @returns Response data for change lease operation.\n     */\n    async changeLease(proposedLeaseId, options = {}) {\n        var _a, _b, _c, _d, _e;\n        if (this._isContainer &&\n            ((((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== _utils_constants__WEBPACK_IMPORTED_MODULE_1__.ETagNone) ||\n                (((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== _utils_constants__WEBPACK_IMPORTED_MODULE_1__.ETagNone) ||\n                ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions))) {\n            throw new RangeError(\"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\");\n        }\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_2__.tracingClient.withSpan(\"BlobLeaseClient-changeLease\", options, async (updatedOptions) => {\n            var _a;\n            const response = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_3__.assertResponse)(await this._containerOrBlobOperation.changeLease(this._leaseId, proposedLeaseId, {\n                abortSignal: options.abortSignal,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n            this._leaseId = proposedLeaseId;\n            return response;\n        });\n    }\n    /**\n     * To free the lease if it is no longer needed so that another client may\n     * immediately acquire a lease against the container or the blob.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n     * and\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n     *\n     * @param options - option to configure lease management operations.\n     * @returns Response data for release lease operation.\n     */\n    async releaseLease(options = {}) {\n        var _a, _b, _c, _d, _e;\n        if (this._isContainer &&\n            ((((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== _utils_constants__WEBPACK_IMPORTED_MODULE_1__.ETagNone) ||\n                (((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== _utils_constants__WEBPACK_IMPORTED_MODULE_1__.ETagNone) ||\n                ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions))) {\n            throw new RangeError(\"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\");\n        }\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_2__.tracingClient.withSpan(\"BlobLeaseClient-releaseLease\", options, async (updatedOptions) => {\n            var _a;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_3__.assertResponse)(await this._containerOrBlobOperation.releaseLease(this._leaseId, {\n                abortSignal: options.abortSignal,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * To renew the lease.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n     * and\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n     *\n     * @param options - Optional option to configure lease management operations.\n     * @returns Response data for renew lease operation.\n     */\n    async renewLease(options = {}) {\n        var _a, _b, _c, _d, _e;\n        if (this._isContainer &&\n            ((((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== _utils_constants__WEBPACK_IMPORTED_MODULE_1__.ETagNone) ||\n                (((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== _utils_constants__WEBPACK_IMPORTED_MODULE_1__.ETagNone) ||\n                ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions))) {\n            throw new RangeError(\"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\");\n        }\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_2__.tracingClient.withSpan(\"BlobLeaseClient-renewLease\", options, async (updatedOptions) => {\n            var _a;\n            return this._containerOrBlobOperation.renewLease(this._leaseId, {\n                abortSignal: options.abortSignal,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                tracingOptions: updatedOptions.tracingOptions,\n            });\n        });\n    }\n    /**\n     * To end the lease but ensure that another client cannot acquire a new lease\n     * until the current lease period has expired.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n     * and\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n     *\n     * @param breakPeriod - Break period\n     * @param options - Optional options to configure lease management operations.\n     * @returns Response data for break lease operation.\n     */\n    async breakLease(breakPeriod, options = {}) {\n        var _a, _b, _c, _d, _e;\n        if (this._isContainer &&\n            ((((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== _utils_constants__WEBPACK_IMPORTED_MODULE_1__.ETagNone) ||\n                (((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== _utils_constants__WEBPACK_IMPORTED_MODULE_1__.ETagNone) ||\n                ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions))) {\n            throw new RangeError(\"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\");\n        }\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_2__.tracingClient.withSpan(\"BlobLeaseClient-breakLease\", options, async (updatedOptions) => {\n            var _a;\n            const operationOptions = {\n                abortSignal: options.abortSignal,\n                breakPeriod,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                tracingOptions: updatedOptions.tracingOptions,\n            };\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_3__.assertResponse)(await this._containerOrBlobOperation.breakLease(operationOptions));\n        });\n    }\n}\n//# sourceMappingURL=BlobLeaseClient.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobLeaseClient.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobQueryResponse.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobQueryResponse.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BlobQueryResponse: () => (/* binding */ BlobQueryResponse)\n/* harmony export */ });\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-util */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/index.js\");\n/* harmony import */ var _utils_BlobQuickQueryStream__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/BlobQuickQueryStream */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/BlobQuickQueryStream.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * BlobQueryResponse implements BlobDownloadResponseModel interface, and in Node.js runtime it will\n * parse avor data returned by blob query.\n */\nclass BlobQueryResponse {\n    /**\n     * Indicates that the service supports\n     * requests for partial file content.\n     *\n     * @readonly\n     */\n    get acceptRanges() {\n        return this.originalResponse.acceptRanges;\n    }\n    /**\n     * Returns if it was previously specified\n     * for the file.\n     *\n     * @readonly\n     */\n    get cacheControl() {\n        return this.originalResponse.cacheControl;\n    }\n    /**\n     * Returns the value that was specified\n     * for the 'x-ms-content-disposition' header and specifies how to process the\n     * response.\n     *\n     * @readonly\n     */\n    get contentDisposition() {\n        return this.originalResponse.contentDisposition;\n    }\n    /**\n     * Returns the value that was specified\n     * for the Content-Encoding request header.\n     *\n     * @readonly\n     */\n    get contentEncoding() {\n        return this.originalResponse.contentEncoding;\n    }\n    /**\n     * Returns the value that was specified\n     * for the Content-Language request header.\n     *\n     * @readonly\n     */\n    get contentLanguage() {\n        return this.originalResponse.contentLanguage;\n    }\n    /**\n     * The current sequence number for a\n     * page blob. This header is not returned for block blobs or append blobs.\n     *\n     * @readonly\n     */\n    get blobSequenceNumber() {\n        return this.originalResponse.blobSequenceNumber;\n    }\n    /**\n     * The blob's type. Possible values include:\n     * 'BlockBlob', 'PageBlob', 'AppendBlob'.\n     *\n     * @readonly\n     */\n    get blobType() {\n        return this.originalResponse.blobType;\n    }\n    /**\n     * The number of bytes present in the\n     * response body.\n     *\n     * @readonly\n     */\n    get contentLength() {\n        return this.originalResponse.contentLength;\n    }\n    /**\n     * If the file has an MD5 hash and the\n     * request is to read the full file, this response header is returned so that\n     * the client can check for message content integrity. If the request is to\n     * read a specified range and the 'x-ms-range-get-content-md5' is set to\n     * true, then the request returns an MD5 hash for the range, as long as the\n     * range size is less than or equal to 4 MB. If neither of these sets of\n     * conditions is true, then no value is returned for the 'Content-MD5'\n     * header.\n     *\n     * @readonly\n     */\n    get contentMD5() {\n        return this.originalResponse.contentMD5;\n    }\n    /**\n     * Indicates the range of bytes returned if\n     * the client requested a subset of the file by setting the Range request\n     * header.\n     *\n     * @readonly\n     */\n    get contentRange() {\n        return this.originalResponse.contentRange;\n    }\n    /**\n     * The content type specified for the file.\n     * The default content type is 'application/octet-stream'\n     *\n     * @readonly\n     */\n    get contentType() {\n        return this.originalResponse.contentType;\n    }\n    /**\n     * Conclusion time of the last attempted\n     * Copy File operation where this file was the destination file. This value\n     * can specify the time of a completed, aborted, or failed copy attempt.\n     *\n     * @readonly\n     */\n    get copyCompletedOn() {\n        return undefined;\n    }\n    /**\n     * String identifier for the last attempted Copy\n     * File operation where this file was the destination file.\n     *\n     * @readonly\n     */\n    get copyId() {\n        return this.originalResponse.copyId;\n    }\n    /**\n     * Contains the number of bytes copied and\n     * the total bytes in the source in the last attempted Copy File operation\n     * where this file was the destination file. Can show between 0 and\n     * Content-Length bytes copied.\n     *\n     * @readonly\n     */\n    get copyProgress() {\n        return this.originalResponse.copyProgress;\n    }\n    /**\n     * URL up to 2KB in length that specifies the\n     * source file used in the last attempted Copy File operation where this file\n     * was the destination file.\n     *\n     * @readonly\n     */\n    get copySource() {\n        return this.originalResponse.copySource;\n    }\n    /**\n     * State of the copy operation\n     * identified by 'x-ms-copy-id'. Possible values include: 'pending',\n     * 'success', 'aborted', 'failed'\n     *\n     * @readonly\n     */\n    get copyStatus() {\n        return this.originalResponse.copyStatus;\n    }\n    /**\n     * Only appears when\n     * x-ms-copy-status is failed or pending. Describes cause of fatal or\n     * non-fatal copy operation failure.\n     *\n     * @readonly\n     */\n    get copyStatusDescription() {\n        return this.originalResponse.copyStatusDescription;\n    }\n    /**\n     * When a blob is leased,\n     * specifies whether the lease is of infinite or fixed duration. Possible\n     * values include: 'infinite', 'fixed'.\n     *\n     * @readonly\n     */\n    get leaseDuration() {\n        return this.originalResponse.leaseDuration;\n    }\n    /**\n     * Lease state of the blob. Possible\n     * values include: 'available', 'leased', 'expired', 'breaking', 'broken'.\n     *\n     * @readonly\n     */\n    get leaseState() {\n        return this.originalResponse.leaseState;\n    }\n    /**\n     * The current lease status of the\n     * blob. Possible values include: 'locked', 'unlocked'.\n     *\n     * @readonly\n     */\n    get leaseStatus() {\n        return this.originalResponse.leaseStatus;\n    }\n    /**\n     * A UTC date/time value generated by the service that\n     * indicates the time at which the response was initiated.\n     *\n     * @readonly\n     */\n    get date() {\n        return this.originalResponse.date;\n    }\n    /**\n     * The number of committed blocks\n     * present in the blob. This header is returned only for append blobs.\n     *\n     * @readonly\n     */\n    get blobCommittedBlockCount() {\n        return this.originalResponse.blobCommittedBlockCount;\n    }\n    /**\n     * The ETag contains a value that you can use to\n     * perform operations conditionally, in quotes.\n     *\n     * @readonly\n     */\n    get etag() {\n        return this.originalResponse.etag;\n    }\n    /**\n     * The error code.\n     *\n     * @readonly\n     */\n    get errorCode() {\n        return this.originalResponse.errorCode;\n    }\n    /**\n     * The value of this header is set to\n     * true if the file data and application metadata are completely encrypted\n     * using the specified algorithm. Otherwise, the value is set to false (when\n     * the file is unencrypted, or if only parts of the file/application metadata\n     * are encrypted).\n     *\n     * @readonly\n     */\n    get isServerEncrypted() {\n        return this.originalResponse.isServerEncrypted;\n    }\n    /**\n     * If the blob has a MD5 hash, and if\n     * request contains range header (Range or x-ms-range), this response header\n     * is returned with the value of the whole blob's MD5 value. This value may\n     * or may not be equal to the value returned in Content-MD5 header, with the\n     * latter calculated from the requested range.\n     *\n     * @readonly\n     */\n    get blobContentMD5() {\n        return this.originalResponse.blobContentMD5;\n    }\n    /**\n     * Returns the date and time the file was last\n     * modified. Any operation that modifies the file or its properties updates\n     * the last modified time.\n     *\n     * @readonly\n     */\n    get lastModified() {\n        return this.originalResponse.lastModified;\n    }\n    /**\n     * A name-value pair\n     * to associate with a file storage object.\n     *\n     * @readonly\n     */\n    get metadata() {\n        return this.originalResponse.metadata;\n    }\n    /**\n     * This header uniquely identifies the request\n     * that was made and can be used for troubleshooting the request.\n     *\n     * @readonly\n     */\n    get requestId() {\n        return this.originalResponse.requestId;\n    }\n    /**\n     * If a client request id header is sent in the request, this header will be present in the\n     * response with the same value.\n     *\n     * @readonly\n     */\n    get clientRequestId() {\n        return this.originalResponse.clientRequestId;\n    }\n    /**\n     * Indicates the version of the File service used\n     * to execute the request.\n     *\n     * @readonly\n     */\n    get version() {\n        return this.originalResponse.version;\n    }\n    /**\n     * The SHA-256 hash of the encryption key used to encrypt the blob. This value is only returned\n     * when the blob was encrypted with a customer-provided key.\n     *\n     * @readonly\n     */\n    get encryptionKeySha256() {\n        return this.originalResponse.encryptionKeySha256;\n    }\n    /**\n     * If the request is to read a specified range and the x-ms-range-get-content-crc64 is set to\n     * true, then the request returns a crc64 for the range, as long as the range size is less than\n     * or equal to 4 MB. If both x-ms-range-get-content-crc64 & x-ms-range-get-content-md5 is\n     * specified in the same request, it will fail with 400(Bad Request)\n     */\n    get contentCrc64() {\n        return this.originalResponse.contentCrc64;\n    }\n    /**\n     * The response body as a browser Blob.\n     * Always undefined in node.js.\n     *\n     * @readonly\n     */\n    get blobBody() {\n        return undefined;\n    }\n    /**\n     * The response body as a node.js Readable stream.\n     * Always undefined in the browser.\n     *\n     * It will parse avor data returned by blob query.\n     *\n     * @readonly\n     */\n    get readableStreamBody() {\n        return _azure_core_util__WEBPACK_IMPORTED_MODULE_0__.isNode ? this.blobDownloadStream : undefined;\n    }\n    /**\n     * The HTTP response.\n     */\n    get _response() {\n        return this.originalResponse._response;\n    }\n    /**\n     * Creates an instance of BlobQueryResponse.\n     *\n     * @param originalResponse -\n     * @param options -\n     */\n    constructor(originalResponse, options = {}) {\n        this.originalResponse = originalResponse;\n        this.blobDownloadStream = new _utils_BlobQuickQueryStream__WEBPACK_IMPORTED_MODULE_1__.BlobQuickQueryStream(this.originalResponse.readableStreamBody, options);\n    }\n}\n//# sourceMappingURL=BlobQueryResponse.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobQueryResponse.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobServiceClient.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobServiceClient.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BlobServiceClient: () => (/* binding */ BlobServiceClient)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _azure_core_auth__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-auth */ \"(rsc)/./node_modules/@azure/core-auth/dist/esm/index.js\");\n/* harmony import */ var _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/core-rest-pipeline */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/index.js\");\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @azure/core-util */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/index.js\");\n/* harmony import */ var _Pipeline__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Pipeline */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Pipeline.js\");\n/* harmony import */ var _ContainerClient__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./ContainerClient */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/ContainerClient.js\");\n/* harmony import */ var _utils_utils_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/utils.common */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js\");\n/* harmony import */ var _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./credentials/StorageSharedKeyCredential */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/StorageSharedKeyCredential.js\");\n/* harmony import */ var _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./credentials/AnonymousCredential */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/AnonymousCredential.js\");\n/* harmony import */ var _utils_tracing__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils/tracing */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/tracing.js\");\n/* harmony import */ var _BlobBatchClient__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./BlobBatchClient */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobBatchClient.js\");\n/* harmony import */ var _StorageClient__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./StorageClient */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageClient.js\");\n/* harmony import */ var _sas_AccountSASPermissions__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./sas/AccountSASPermissions */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASPermissions.js\");\n/* harmony import */ var _sas_AccountSASSignatureValues__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./sas/AccountSASSignatureValues */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASSignatureValues.js\");\n/* harmony import */ var _sas_AccountSASServices__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./sas/AccountSASServices */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASServices.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * A BlobServiceClient represents a Client to the Azure Storage Blob service allowing you\n * to manipulate blob containers.\n */\nclass BlobServiceClient extends _StorageClient__WEBPACK_IMPORTED_MODULE_3__.StorageClient {\n    /**\n     *\n     * Creates an instance of BlobServiceClient from connection string.\n     *\n     * @param connectionString - Account connection string or a SAS connection string of an Azure storage account.\n     *                                  [ Note - Account connection string can only be used in NODE.JS runtime. ]\n     *                                  Account connection string example -\n     *                                  `DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=accountKey;EndpointSuffix=core.windows.net`\n     *                                  SAS connection string example -\n     *                                  `BlobEndpoint=https://myaccount.blob.core.windows.net/;QueueEndpoint=https://myaccount.queue.core.windows.net/;FileEndpoint=https://myaccount.file.core.windows.net/;TableEndpoint=https://myaccount.table.core.windows.net/;SharedAccessSignature=sasString`\n     * @param options - Optional. Options to configure the HTTP pipeline.\n     */\n    static fromConnectionString(connectionString, \n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options) {\n        options = options || {};\n        const extractedCreds = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_4__.extractConnectionStringParts)(connectionString);\n        if (extractedCreds.kind === \"AccountConnString\") {\n            if (_azure_core_util__WEBPACK_IMPORTED_MODULE_2__.isNode) {\n                const sharedKeyCredential = new _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_5__.StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);\n                if (!options.proxyOptions) {\n                    options.proxyOptions = (0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_1__.getDefaultProxySettings)(extractedCreds.proxyUri);\n                }\n                const pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_6__.newPipeline)(sharedKeyCredential, options);\n                return new BlobServiceClient(extractedCreds.url, pipeline);\n            }\n            else {\n                throw new Error(\"Account connection string is only supported in Node.js environment\");\n            }\n        }\n        else if (extractedCreds.kind === \"SASConnString\") {\n            const pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_6__.newPipeline)(new _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_7__.AnonymousCredential(), options);\n            return new BlobServiceClient(extractedCreds.url + \"?\" + extractedCreds.accountSas, pipeline);\n        }\n        else {\n            throw new Error(\"Connection string must be either an Account connection string or a SAS connection string\");\n        }\n    }\n    constructor(url, credentialOrPipeline, \n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options) {\n        let pipeline;\n        if ((0,_Pipeline__WEBPACK_IMPORTED_MODULE_6__.isPipelineLike)(credentialOrPipeline)) {\n            pipeline = credentialOrPipeline;\n        }\n        else if ((_azure_core_util__WEBPACK_IMPORTED_MODULE_2__.isNode && credentialOrPipeline instanceof _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_5__.StorageSharedKeyCredential) ||\n            credentialOrPipeline instanceof _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_7__.AnonymousCredential ||\n            (0,_azure_core_auth__WEBPACK_IMPORTED_MODULE_0__.isTokenCredential)(credentialOrPipeline)) {\n            pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_6__.newPipeline)(credentialOrPipeline, options);\n        }\n        else {\n            // The second parameter is undefined. Use anonymous credential\n            pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_6__.newPipeline)(new _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_7__.AnonymousCredential(), options);\n        }\n        super(url, pipeline);\n        this.serviceContext = this.storageClientContext.service;\n    }\n    /**\n     * Creates a {@link ContainerClient} object\n     *\n     * @param containerName - A container name\n     * @returns A new ContainerClient object for the given container name.\n     *\n     * Example usage:\n     *\n     * ```js\n     * const containerClient = blobServiceClient.getContainerClient(\"<container name>\");\n     * ```\n     */\n    getContainerClient(containerName) {\n        return new _ContainerClient__WEBPACK_IMPORTED_MODULE_8__.ContainerClient((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_4__.appendToURLPath)(this.url, encodeURIComponent(containerName)), this.pipeline);\n    }\n    /**\n     * Create a Blob container. @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-container\n     *\n     * @param containerName - Name of the container to create.\n     * @param options - Options to configure Container Create operation.\n     * @returns Container creation response and the corresponding container client.\n     */\n    async createContainer(containerName, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_9__.tracingClient.withSpan(\"BlobServiceClient-createContainer\", options, async (updatedOptions) => {\n            const containerClient = this.getContainerClient(containerName);\n            const containerCreateResponse = await containerClient.create(updatedOptions);\n            return {\n                containerClient,\n                containerCreateResponse,\n            };\n        });\n    }\n    /**\n     * Deletes a Blob container.\n     *\n     * @param containerName - Name of the container to delete.\n     * @param options - Options to configure Container Delete operation.\n     * @returns Container deletion response.\n     */\n    async deleteContainer(containerName, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_9__.tracingClient.withSpan(\"BlobServiceClient-deleteContainer\", options, async (updatedOptions) => {\n            const containerClient = this.getContainerClient(containerName);\n            return containerClient.delete(updatedOptions);\n        });\n    }\n    /**\n     * Restore a previously deleted Blob container.\n     * This API is only functional if Container Soft Delete is enabled for the storage account associated with the container.\n     *\n     * @param deletedContainerName - Name of the previously deleted container.\n     * @param deletedContainerVersion - Version of the previously deleted container, used to uniquely identify the deleted container.\n     * @param options - Options to configure Container Restore operation.\n     * @returns Container deletion response.\n     */\n    async undeleteContainer(deletedContainerName, deletedContainerVersion, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_9__.tracingClient.withSpan(\"BlobServiceClient-undeleteContainer\", options, async (updatedOptions) => {\n            const containerClient = this.getContainerClient(options.destinationContainerName || deletedContainerName);\n            // Hack to access a protected member.\n            const containerContext = containerClient[\"storageClientContext\"].container;\n            const containerUndeleteResponse = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_4__.assertResponse)(await containerContext.restore({\n                deletedContainerName,\n                deletedContainerVersion,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n            return { containerClient, containerUndeleteResponse };\n        });\n    }\n    /**\n     * Rename an existing Blob Container.\n     *\n     * @param sourceContainerName - The name of the source container.\n     * @param destinationContainerName - The new name of the container.\n     * @param options - Options to configure Container Rename operation.\n     */\n    /* eslint-disable-next-line @typescript-eslint/ban-ts-comment */\n    // @ts-ignore Need to hide this interface for now. Make it public and turn on the live tests for it when the service is ready.\n    async renameContainer(sourceContainerName, destinationContainerName, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_9__.tracingClient.withSpan(\"BlobServiceClient-renameContainer\", options, async (updatedOptions) => {\n            var _a;\n            const containerClient = this.getContainerClient(destinationContainerName);\n            // Hack to access a protected member.\n            const containerContext = containerClient[\"storageClientContext\"].container;\n            const containerRenameResponse = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_4__.assertResponse)(await containerContext.rename(sourceContainerName, Object.assign(Object.assign({}, updatedOptions), { sourceLeaseId: (_a = options.sourceCondition) === null || _a === void 0 ? void 0 : _a.leaseId })));\n            return { containerClient, containerRenameResponse };\n        });\n    }\n    /**\n     * Gets the properties of a storage account’s Blob service, including properties\n     * for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-service-properties\n     *\n     * @param options - Options to the Service Get Properties operation.\n     * @returns Response data for the Service Get Properties operation.\n     */\n    async getProperties(options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_9__.tracingClient.withSpan(\"BlobServiceClient-getProperties\", options, async (updatedOptions) => {\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_4__.assertResponse)(await this.serviceContext.getProperties({\n                abortSignal: options.abortSignal,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Sets properties for a storage account’s Blob service endpoint, including properties\n     * for Storage Analytics, CORS (Cross-Origin Resource Sharing) rules and soft delete settings.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-service-properties\n     *\n     * @param properties -\n     * @param options - Options to the Service Set Properties operation.\n     * @returns Response data for the Service Set Properties operation.\n     */\n    async setProperties(properties, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_9__.tracingClient.withSpan(\"BlobServiceClient-setProperties\", options, async (updatedOptions) => {\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_4__.assertResponse)(await this.serviceContext.setProperties(properties, {\n                abortSignal: options.abortSignal,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Retrieves statistics related to replication for the Blob service. It is only\n     * available on the secondary location endpoint when read-access geo-redundant\n     * replication is enabled for the storage account.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-service-stats\n     *\n     * @param options - Options to the Service Get Statistics operation.\n     * @returns Response data for the Service Get Statistics operation.\n     */\n    async getStatistics(options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_9__.tracingClient.withSpan(\"BlobServiceClient-getStatistics\", options, async (updatedOptions) => {\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_4__.assertResponse)(await this.serviceContext.getStatistics({\n                abortSignal: options.abortSignal,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * The Get Account Information operation returns the sku name and account kind\n     * for the specified account.\n     * The Get Account Information operation is available on service versions beginning\n     * with version 2018-03-28.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-account-information\n     *\n     * @param options - Options to the Service Get Account Info operation.\n     * @returns Response data for the Service Get Account Info operation.\n     */\n    async getAccountInfo(options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_9__.tracingClient.withSpan(\"BlobServiceClient-getAccountInfo\", options, async (updatedOptions) => {\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_4__.assertResponse)(await this.serviceContext.getAccountInfo({\n                abortSignal: options.abortSignal,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Returns a list of the containers under the specified account.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/list-containers2\n     *\n     * @param marker - A string value that identifies the portion of\n     *                        the list of containers to be returned with the next listing operation. The\n     *                        operation returns the continuationToken value within the response body if the\n     *                        listing operation did not return all containers remaining to be listed\n     *                        with the current page. The continuationToken value can be used as the value for\n     *                        the marker parameter in a subsequent call to request the next page of list\n     *                        items. The marker value is opaque to the client.\n     * @param options - Options to the Service List Container Segment operation.\n     * @returns Response data for the Service List Container Segment operation.\n     */\n    async listContainersSegment(marker, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_9__.tracingClient.withSpan(\"BlobServiceClient-listContainersSegment\", options, async (updatedOptions) => {\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_4__.assertResponse)(await this.serviceContext.listContainersSegment(Object.assign(Object.assign({ abortSignal: options.abortSignal, marker }, options), { include: typeof options.include === \"string\" ? [options.include] : options.include, tracingOptions: updatedOptions.tracingOptions })));\n        });\n    }\n    /**\n     * The Filter Blobs operation enables callers to list blobs across all containers whose tags\n     * match a given search expression. Filter blobs searches across all containers within a\n     * storage account but can be scoped within the expression to a single container.\n     *\n     * @param tagFilterSqlExpression - The where parameter enables the caller to query blobs whose tags match a given expression.\n     *                                        The given expression must evaluate to true for a blob to be returned in the results.\n     *                                        The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;\n     *                                        however, only a subset of the OData filter syntax is supported in the Blob service.\n     * @param marker - A string value that identifies the portion of\n     *                          the list of blobs to be returned with the next listing operation. The\n     *                          operation returns the continuationToken value within the response body if the\n     *                          listing operation did not return all blobs remaining to be listed\n     *                          with the current page. The continuationToken value can be used as the value for\n     *                          the marker parameter in a subsequent call to request the next page of list\n     *                          items. The marker value is opaque to the client.\n     * @param options - Options to find blobs by tags.\n     */\n    async findBlobsByTagsSegment(tagFilterSqlExpression, marker, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_9__.tracingClient.withSpan(\"BlobServiceClient-findBlobsByTagsSegment\", options, async (updatedOptions) => {\n            const response = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_4__.assertResponse)(await this.serviceContext.filterBlobs({\n                abortSignal: options.abortSignal,\n                where: tagFilterSqlExpression,\n                marker,\n                maxPageSize: options.maxPageSize,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n            const wrappedResponse = Object.assign(Object.assign({}, response), { _response: response._response, blobs: response.blobs.map((blob) => {\n                    var _a;\n                    let tagValue = \"\";\n                    if (((_a = blob.tags) === null || _a === void 0 ? void 0 : _a.blobTagSet.length) === 1) {\n                        tagValue = blob.tags.blobTagSet[0].value;\n                    }\n                    return Object.assign(Object.assign({}, blob), { tags: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_4__.toTags)(blob.tags), tagValue });\n                }) });\n            return wrappedResponse;\n        });\n    }\n    /**\n     * Returns an AsyncIterableIterator for ServiceFindBlobsByTagsSegmentResponse.\n     *\n     * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.\n     *                                         The given expression must evaluate to true for a blob to be returned in the results.\n     *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;\n     *                                         however, only a subset of the OData filter syntax is supported in the Blob service.\n     * @param marker - A string value that identifies the portion of\n     *                          the list of blobs to be returned with the next listing operation. The\n     *                          operation returns the continuationToken value within the response body if the\n     *                          listing operation did not return all blobs remaining to be listed\n     *                          with the current page. The continuationToken value can be used as the value for\n     *                          the marker parameter in a subsequent call to request the next page of list\n     *                          items. The marker value is opaque to the client.\n     * @param options - Options to find blobs by tags.\n     */\n    findBlobsByTagsSegments(tagFilterSqlExpression_1, marker_1) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__asyncGenerator)(this, arguments, function* findBlobsByTagsSegments_1(tagFilterSqlExpression, marker, options = {}) {\n            let response;\n            if (!!marker || marker === undefined) {\n                do {\n                    response = yield (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__await)(this.findBlobsByTagsSegment(tagFilterSqlExpression, marker, options));\n                    response.blobs = response.blobs || [];\n                    marker = response.continuationToken;\n                    yield yield (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__await)(response);\n                } while (marker);\n            }\n        });\n    }\n    /**\n     * Returns an AsyncIterableIterator for blobs.\n     *\n     * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.\n     *                                         The given expression must evaluate to true for a blob to be returned in the results.\n     *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;\n     *                                         however, only a subset of the OData filter syntax is supported in the Blob service.\n     * @param options - Options to findBlobsByTagsItems.\n     */\n    findBlobsByTagsItems(tagFilterSqlExpression_1) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__asyncGenerator)(this, arguments, function* findBlobsByTagsItems_1(tagFilterSqlExpression, options = {}) {\n            var _a, e_1, _b, _c;\n            let marker;\n            try {\n                for (var _d = true, _e = (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__asyncValues)(this.findBlobsByTagsSegments(tagFilterSqlExpression, marker, options)), _f; _f = yield (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__await)(_e.next()), _a = _f.done, !_a; _d = true) {\n                    _c = _f.value;\n                    _d = false;\n                    const segment = _c;\n                    yield (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__await)(yield* (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__asyncDelegator)((0,tslib__WEBPACK_IMPORTED_MODULE_10__.__asyncValues)(segment.blobs)));\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (!_d && !_a && (_b = _e.return)) yield (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__await)(_b.call(_e));\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n        });\n    }\n    /**\n     * Returns an async iterable iterator to find all blobs with specified tag\n     * under the specified account.\n     *\n     * .byPage() returns an async iterable iterator to list the blobs in pages.\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-service-properties\n     *\n     * Example using `for await` syntax:\n     *\n     * ```js\n     * let i = 1;\n     * for await (const blob of blobServiceClient.findBlobsByTags(\"tagkey='tagvalue'\")) {\n     *   console.log(`Blob ${i++}: ${container.name}`);\n     * }\n     * ```\n     *\n     * Example using `iter.next()`:\n     *\n     * ```js\n     * let i = 1;\n     * const iter = blobServiceClient.findBlobsByTags(\"tagkey='tagvalue'\");\n     * let blobItem = await iter.next();\n     * while (!blobItem.done) {\n     *   console.log(`Blob ${i++}: ${blobItem.value.name}`);\n     *   blobItem = await iter.next();\n     * }\n     * ```\n     *\n     * Example using `byPage()`:\n     *\n     * ```js\n     * // passing optional maxPageSize in the page settings\n     * let i = 1;\n     * for await (const response of blobServiceClient.findBlobsByTags(\"tagkey='tagvalue'\").byPage({ maxPageSize: 20 })) {\n     *   if (response.blobs) {\n     *     for (const blob of response.blobs) {\n     *       console.log(`Blob ${i++}: ${blob.name}`);\n     *     }\n     *   }\n     * }\n     * ```\n     *\n     * Example using paging with a marker:\n     *\n     * ```js\n     * let i = 1;\n     * let iterator = blobServiceClient.findBlobsByTags(\"tagkey='tagvalue'\").byPage({ maxPageSize: 2 });\n     * let response = (await iterator.next()).value;\n     *\n     * // Prints 2 blob names\n     * if (response.blobs) {\n     *   for (const blob of response.blobs) {\n     *     console.log(`Blob ${i++}: ${blob.name}`);\n     *   }\n     * }\n     *\n     * // Gets next marker\n     * let marker = response.continuationToken;\n     * // Passing next marker as continuationToken\n     * iterator = blobServiceClient\n     *   .findBlobsByTags(\"tagkey='tagvalue'\")\n     *   .byPage({ continuationToken: marker, maxPageSize: 10 });\n     * response = (await iterator.next()).value;\n     *\n     * // Prints blob names\n     * if (response.blobs) {\n     *   for (const blob of response.blobs) {\n     *      console.log(`Blob ${i++}: ${blob.name}`);\n     *   }\n     * }\n     * ```\n     *\n     * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.\n     *                                         The given expression must evaluate to true for a blob to be returned in the results.\n     *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;\n     *                                         however, only a subset of the OData filter syntax is supported in the Blob service.\n     * @param options - Options to find blobs by tags.\n     */\n    findBlobsByTags(tagFilterSqlExpression, options = {}) {\n        // AsyncIterableIterator to iterate over blobs\n        const listSegmentOptions = Object.assign({}, options);\n        const iter = this.findBlobsByTagsItems(tagFilterSqlExpression, listSegmentOptions);\n        return {\n            /**\n             * The next method, part of the iteration protocol\n             */\n            next() {\n                return iter.next();\n            },\n            /**\n             * The connection to the async iterator, part of the iteration protocol\n             */\n            [Symbol.asyncIterator]() {\n                return this;\n            },\n            /**\n             * Return an AsyncIterableIterator that works a page at a time\n             */\n            byPage: (settings = {}) => {\n                return this.findBlobsByTagsSegments(tagFilterSqlExpression, settings.continuationToken, Object.assign({ maxPageSize: settings.maxPageSize }, listSegmentOptions));\n            },\n        };\n    }\n    /**\n     * Returns an AsyncIterableIterator for ServiceListContainersSegmentResponses\n     *\n     * @param marker - A string value that identifies the portion of\n     *                        the list of containers to be returned with the next listing operation. The\n     *                        operation returns the continuationToken value within the response body if the\n     *                        listing operation did not return all containers remaining to be listed\n     *                        with the current page. The continuationToken value can be used as the value for\n     *                        the marker parameter in a subsequent call to request the next page of list\n     *                        items. The marker value is opaque to the client.\n     * @param options - Options to list containers operation.\n     */\n    listSegments(marker_1) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__asyncGenerator)(this, arguments, function* listSegments_1(marker, options = {}) {\n            let listContainersSegmentResponse;\n            if (!!marker || marker === undefined) {\n                do {\n                    listContainersSegmentResponse = yield (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__await)(this.listContainersSegment(marker, options));\n                    listContainersSegmentResponse.containerItems =\n                        listContainersSegmentResponse.containerItems || [];\n                    marker = listContainersSegmentResponse.continuationToken;\n                    yield yield (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__await)(yield (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__await)(listContainersSegmentResponse));\n                } while (marker);\n            }\n        });\n    }\n    /**\n     * Returns an AsyncIterableIterator for Container Items\n     *\n     * @param options - Options to list containers operation.\n     */\n    listItems() {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__asyncGenerator)(this, arguments, function* listItems_1(options = {}) {\n            var _a, e_2, _b, _c;\n            let marker;\n            try {\n                for (var _d = true, _e = (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__asyncValues)(this.listSegments(marker, options)), _f; _f = yield (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__await)(_e.next()), _a = _f.done, !_a; _d = true) {\n                    _c = _f.value;\n                    _d = false;\n                    const segment = _c;\n                    yield (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__await)(yield* (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__asyncDelegator)((0,tslib__WEBPACK_IMPORTED_MODULE_10__.__asyncValues)(segment.containerItems)));\n                }\n            }\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n            finally {\n                try {\n                    if (!_d && !_a && (_b = _e.return)) yield (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__await)(_b.call(_e));\n                }\n                finally { if (e_2) throw e_2.error; }\n            }\n        });\n    }\n    /**\n     * Returns an async iterable iterator to list all the containers\n     * under the specified account.\n     *\n     * .byPage() returns an async iterable iterator to list the containers in pages.\n     *\n     * Example using `for await` syntax:\n     *\n     * ```js\n     * let i = 1;\n     * for await (const container of blobServiceClient.listContainers()) {\n     *   console.log(`Container ${i++}: ${container.name}`);\n     * }\n     * ```\n     *\n     * Example using `iter.next()`:\n     *\n     * ```js\n     * let i = 1;\n     * const iter = blobServiceClient.listContainers();\n     * let containerItem = await iter.next();\n     * while (!containerItem.done) {\n     *   console.log(`Container ${i++}: ${containerItem.value.name}`);\n     *   containerItem = await iter.next();\n     * }\n     * ```\n     *\n     * Example using `byPage()`:\n     *\n     * ```js\n     * // passing optional maxPageSize in the page settings\n     * let i = 1;\n     * for await (const response of blobServiceClient.listContainers().byPage({ maxPageSize: 20 })) {\n     *   if (response.containerItems) {\n     *     for (const container of response.containerItems) {\n     *       console.log(`Container ${i++}: ${container.name}`);\n     *     }\n     *   }\n     * }\n     * ```\n     *\n     * Example using paging with a marker:\n     *\n     * ```js\n     * let i = 1;\n     * let iterator = blobServiceClient.listContainers().byPage({ maxPageSize: 2 });\n     * let response = (await iterator.next()).value;\n     *\n     * // Prints 2 container names\n     * if (response.containerItems) {\n     *   for (const container of response.containerItems) {\n     *     console.log(`Container ${i++}: ${container.name}`);\n     *   }\n     * }\n     *\n     * // Gets next marker\n     * let marker = response.continuationToken;\n     * // Passing next marker as continuationToken\n     * iterator = blobServiceClient\n     *   .listContainers()\n     *   .byPage({ continuationToken: marker, maxPageSize: 10 });\n     * response = (await iterator.next()).value;\n     *\n     * // Prints 10 container names\n     * if (response.containerItems) {\n     *   for (const container of response.containerItems) {\n     *      console.log(`Container ${i++}: ${container.name}`);\n     *   }\n     * }\n     * ```\n     *\n     * @param options - Options to list containers.\n     * @returns An asyncIterableIterator that supports paging.\n     */\n    listContainers(options = {}) {\n        if (options.prefix === \"\") {\n            options.prefix = undefined;\n        }\n        const include = [];\n        if (options.includeDeleted) {\n            include.push(\"deleted\");\n        }\n        if (options.includeMetadata) {\n            include.push(\"metadata\");\n        }\n        if (options.includeSystem) {\n            include.push(\"system\");\n        }\n        // AsyncIterableIterator to iterate over containers\n        const listSegmentOptions = Object.assign(Object.assign({}, options), (include.length > 0 ? { include } : {}));\n        const iter = this.listItems(listSegmentOptions);\n        return {\n            /**\n             * The next method, part of the iteration protocol\n             */\n            next() {\n                return iter.next();\n            },\n            /**\n             * The connection to the async iterator, part of the iteration protocol\n             */\n            [Symbol.asyncIterator]() {\n                return this;\n            },\n            /**\n             * Return an AsyncIterableIterator that works a page at a time\n             */\n            byPage: (settings = {}) => {\n                return this.listSegments(settings.continuationToken, Object.assign({ maxPageSize: settings.maxPageSize }, listSegmentOptions));\n            },\n        };\n    }\n    /**\n     * ONLY AVAILABLE WHEN USING BEARER TOKEN AUTHENTICATION (TokenCredential).\n     *\n     * Retrieves a user delegation key for the Blob service. This is only a valid operation when using\n     * bearer token authentication.\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-user-delegation-key\n     *\n     * @param startsOn -      The start time for the user delegation SAS. Must be within 7 days of the current time\n     * @param expiresOn -     The end time for the user delegation SAS. Must be within 7 days of the current time\n     */\n    async getUserDelegationKey(startsOn, expiresOn, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_9__.tracingClient.withSpan(\"BlobServiceClient-getUserDelegationKey\", options, async (updatedOptions) => {\n            const response = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_4__.assertResponse)(await this.serviceContext.getUserDelegationKey({\n                startsOn: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_4__.truncatedISO8061Date)(startsOn, false),\n                expiresOn: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_4__.truncatedISO8061Date)(expiresOn, false),\n            }, {\n                abortSignal: options.abortSignal,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n            const userDelegationKey = {\n                signedObjectId: response.signedObjectId,\n                signedTenantId: response.signedTenantId,\n                signedStartsOn: new Date(response.signedStartsOn),\n                signedExpiresOn: new Date(response.signedExpiresOn),\n                signedService: response.signedService,\n                signedVersion: response.signedVersion,\n                value: response.value,\n            };\n            const res = Object.assign({ _response: response._response, requestId: response.requestId, clientRequestId: response.clientRequestId, version: response.version, date: response.date, errorCode: response.errorCode }, userDelegationKey);\n            return res;\n        });\n    }\n    /**\n     * Creates a BlobBatchClient object to conduct batch operations.\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch\n     *\n     * @returns A new BlobBatchClient object for this service.\n     */\n    getBlobBatchClient() {\n        return new _BlobBatchClient__WEBPACK_IMPORTED_MODULE_11__.BlobBatchClient(this.url, this.pipeline);\n    }\n    /**\n     * Only available for BlobServiceClient constructed with a shared key credential.\n     *\n     * Generates a Blob account Shared Access Signature (SAS) URI based on the client properties\n     * and parameters passed in. The SAS is signed by the shared key credential of the client.\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-account-sas\n     *\n     * @param expiresOn - Optional. The time at which the shared access signature becomes invalid. Default to an hour later if not provided.\n     * @param permissions - Specifies the list of permissions to be associated with the SAS.\n     * @param resourceTypes - Specifies the resource types associated with the shared access signature.\n     * @param options - Optional parameters.\n     * @returns An account SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.\n     */\n    generateAccountSasUrl(expiresOn, permissions = _sas_AccountSASPermissions__WEBPACK_IMPORTED_MODULE_12__.AccountSASPermissions.parse(\"r\"), resourceTypes = \"sco\", options = {}) {\n        if (!(this.credential instanceof _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_5__.StorageSharedKeyCredential)) {\n            throw RangeError(\"Can only generate the account SAS when the client is initialized with a shared key credential\");\n        }\n        if (expiresOn === undefined) {\n            const now = new Date();\n            expiresOn = new Date(now.getTime() + 3600 * 1000);\n        }\n        const sas = (0,_sas_AccountSASSignatureValues__WEBPACK_IMPORTED_MODULE_13__.generateAccountSASQueryParameters)(Object.assign({ permissions,\n            expiresOn,\n            resourceTypes, services: _sas_AccountSASServices__WEBPACK_IMPORTED_MODULE_14__.AccountSASServices.parse(\"b\").toString() }, options), this.credential).toString();\n        return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_4__.appendToURLQuery)(this.url, sas);\n    }\n    /**\n     * Only available for BlobServiceClient constructed with a shared key credential.\n     *\n     * Generates string to sign for a Blob account Shared Access Signature (SAS) URI based on\n     * the client properties and parameters passed in. The SAS is signed by the shared key credential of the client.\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-account-sas\n     *\n     * @param expiresOn - Optional. The time at which the shared access signature becomes invalid. Default to an hour later if not provided.\n     * @param permissions - Specifies the list of permissions to be associated with the SAS.\n     * @param resourceTypes - Specifies the resource types associated with the shared access signature.\n     * @param options - Optional parameters.\n     * @returns An account SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.\n     */\n    generateSasStringToSign(expiresOn, permissions = _sas_AccountSASPermissions__WEBPACK_IMPORTED_MODULE_12__.AccountSASPermissions.parse(\"r\"), resourceTypes = \"sco\", options = {}) {\n        if (!(this.credential instanceof _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_5__.StorageSharedKeyCredential)) {\n            throw RangeError(\"Can only generate the account SAS when the client is initialized with a shared key credential\");\n        }\n        if (expiresOn === undefined) {\n            const now = new Date();\n            expiresOn = new Date(now.getTime() + 3600 * 1000);\n        }\n        return (0,_sas_AccountSASSignatureValues__WEBPACK_IMPORTED_MODULE_13__.generateAccountSASQueryParametersInternal)(Object.assign({ permissions,\n            expiresOn,\n            resourceTypes, services: _sas_AccountSASServices__WEBPACK_IMPORTED_MODULE_14__.AccountSASServices.parse(\"b\").toString() }, options), this.credential).stringToSign;\n    }\n}\n//# sourceMappingURL=BlobServiceClient.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobServiceClient.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Clients.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Clients.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AppendBlobClient: () => (/* binding */ AppendBlobClient),\n/* harmony export */   BlobClient: () => (/* binding */ BlobClient),\n/* harmony export */   BlockBlobClient: () => (/* binding */ BlockBlobClient),\n/* harmony export */   PageBlobClient: () => (/* binding */ PageBlobClient)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-rest-pipeline */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/index.js\");\n/* harmony import */ var _azure_core_auth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/core-auth */ \"(rsc)/./node_modules/@azure/core-auth/dist/esm/index.js\");\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @azure/core-util */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/index.js\");\n/* harmony import */ var _BlobDownloadResponse__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./BlobDownloadResponse */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobDownloadResponse.js\");\n/* harmony import */ var _BlobQueryResponse__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./BlobQueryResponse */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobQueryResponse.js\");\n/* harmony import */ var _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./credentials/AnonymousCredential */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/AnonymousCredential.js\");\n/* harmony import */ var _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./credentials/StorageSharedKeyCredential */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/StorageSharedKeyCredential.js\");\n/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./models */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/models.js\");\n/* harmony import */ var _PageBlobRangeResponse__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./PageBlobRangeResponse */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/PageBlobRangeResponse.js\");\n/* harmony import */ var _Pipeline__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Pipeline */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Pipeline.js\");\n/* harmony import */ var _pollers_BlobStartCopyFromUrlPoller__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./pollers/BlobStartCopyFromUrlPoller */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/pollers/BlobStartCopyFromUrlPoller.js\");\n/* harmony import */ var _Range__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./Range */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Range.js\");\n/* harmony import */ var _StorageClient__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./StorageClient */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageClient.js\");\n/* harmony import */ var _utils_Batch__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./utils/Batch */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/Batch.js\");\n/* harmony import */ var _storage_common_src__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../storage-common/src */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-common/src/BufferScheduler.js\");\n/* harmony import */ var _utils_constants__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils/constants */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js\");\n/* harmony import */ var _utils_tracing__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./utils/tracing */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/tracing.js\");\n/* harmony import */ var _utils_utils_common__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils/utils.common */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js\");\n/* harmony import */ var _utils_utils_node__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./utils/utils.node */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.node.js\");\n/* harmony import */ var _sas_BlobSASSignatureValues__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./sas/BlobSASSignatureValues */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/BlobSASSignatureValues.js\");\n/* harmony import */ var _BlobLeaseClient__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./BlobLeaseClient */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobLeaseClient.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * A BlobClient represents a URL to an Azure Storage blob; the blob may be a block blob,\n * append blob, or page blob.\n */\nclass BlobClient extends _StorageClient__WEBPACK_IMPORTED_MODULE_3__.StorageClient {\n    /**\n     * The name of the blob.\n     */\n    get name() {\n        return this._name;\n    }\n    /**\n     * The name of the storage container the blob is associated with.\n     */\n    get containerName() {\n        return this._containerName;\n    }\n    constructor(urlOrConnectionString, credentialOrPipelineOrContainerName, blobNameOrOptions, \n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options) {\n        options = options || {};\n        let pipeline;\n        let url;\n        if ((0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.isPipelineLike)(credentialOrPipelineOrContainerName)) {\n            // (url: string, pipeline: Pipeline)\n            url = urlOrConnectionString;\n            pipeline = credentialOrPipelineOrContainerName;\n        }\n        else if ((_azure_core_util__WEBPACK_IMPORTED_MODULE_2__.isNode && credentialOrPipelineOrContainerName instanceof _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_5__.StorageSharedKeyCredential) ||\n            credentialOrPipelineOrContainerName instanceof _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__.AnonymousCredential ||\n            (0,_azure_core_auth__WEBPACK_IMPORTED_MODULE_1__.isTokenCredential)(credentialOrPipelineOrContainerName)) {\n            // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n            url = urlOrConnectionString;\n            options = blobNameOrOptions;\n            pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.newPipeline)(credentialOrPipelineOrContainerName, options);\n        }\n        else if (!credentialOrPipelineOrContainerName &&\n            typeof credentialOrPipelineOrContainerName !== \"string\") {\n            // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n            // The second parameter is undefined. Use anonymous credential.\n            url = urlOrConnectionString;\n            if (blobNameOrOptions && typeof blobNameOrOptions !== \"string\") {\n                options = blobNameOrOptions;\n            }\n            pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.newPipeline)(new _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__.AnonymousCredential(), options);\n        }\n        else if (credentialOrPipelineOrContainerName &&\n            typeof credentialOrPipelineOrContainerName === \"string\" &&\n            blobNameOrOptions &&\n            typeof blobNameOrOptions === \"string\") {\n            // (connectionString: string, containerName: string, blobName: string, options?: StoragePipelineOptions)\n            const containerName = credentialOrPipelineOrContainerName;\n            const blobName = blobNameOrOptions;\n            const extractedCreds = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.extractConnectionStringParts)(urlOrConnectionString);\n            if (extractedCreds.kind === \"AccountConnString\") {\n                if (_azure_core_util__WEBPACK_IMPORTED_MODULE_2__.isNode) {\n                    const sharedKeyCredential = new _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_5__.StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);\n                    url = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLPath)((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLPath)(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName));\n                    if (!options.proxyOptions) {\n                        options.proxyOptions = (0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__.getDefaultProxySettings)(extractedCreds.proxyUri);\n                    }\n                    pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.newPipeline)(sharedKeyCredential, options);\n                }\n                else {\n                    throw new Error(\"Account connection string is only supported in Node.js environment\");\n                }\n            }\n            else if (extractedCreds.kind === \"SASConnString\") {\n                url =\n                    (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLPath)((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLPath)(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName)) +\n                        \"?\" +\n                        extractedCreds.accountSas;\n                pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.newPipeline)(new _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__.AnonymousCredential(), options);\n            }\n            else {\n                throw new Error(\"Connection string must be either an Account connection string or a SAS connection string\");\n            }\n        }\n        else {\n            throw new Error(\"Expecting non-empty strings for containerName and blobName parameters\");\n        }\n        super(url, pipeline);\n        ({ blobName: this._name, containerName: this._containerName } =\n            this.getBlobAndContainerNamesFromUrl());\n        this.blobContext = this.storageClientContext.blob;\n        this._snapshot = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.getURLParameter)(this.url, _utils_constants__WEBPACK_IMPORTED_MODULE_8__.URLConstants.Parameters.SNAPSHOT);\n        this._versionId = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.getURLParameter)(this.url, _utils_constants__WEBPACK_IMPORTED_MODULE_8__.URLConstants.Parameters.VERSIONID);\n    }\n    /**\n     * Creates a new BlobClient object identical to the source but with the specified snapshot timestamp.\n     * Provide \"\" will remove the snapshot and return a Client to the base blob.\n     *\n     * @param snapshot - The snapshot timestamp.\n     * @returns A new BlobClient object identical to the source but with the specified snapshot timestamp\n     */\n    withSnapshot(snapshot) {\n        return new BlobClient((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.setURLParameter)(this.url, _utils_constants__WEBPACK_IMPORTED_MODULE_8__.URLConstants.Parameters.SNAPSHOT, snapshot.length === 0 ? undefined : snapshot), this.pipeline);\n    }\n    /**\n     * Creates a new BlobClient object pointing to a version of this blob.\n     * Provide \"\" will remove the versionId and return a Client to the base blob.\n     *\n     * @param versionId - The versionId.\n     * @returns A new BlobClient object pointing to the version of this blob.\n     */\n    withVersion(versionId) {\n        return new BlobClient((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.setURLParameter)(this.url, _utils_constants__WEBPACK_IMPORTED_MODULE_8__.URLConstants.Parameters.VERSIONID, versionId.length === 0 ? undefined : versionId), this.pipeline);\n    }\n    /**\n     * Creates a AppendBlobClient object.\n     *\n     */\n    getAppendBlobClient() {\n        return new AppendBlobClient(this.url, this.pipeline);\n    }\n    /**\n     * Creates a BlockBlobClient object.\n     *\n     */\n    getBlockBlobClient() {\n        return new BlockBlobClient(this.url, this.pipeline);\n    }\n    /**\n     * Creates a PageBlobClient object.\n     *\n     */\n    getPageBlobClient() {\n        return new PageBlobClient(this.url, this.pipeline);\n    }\n    /**\n     * Reads or downloads a blob from the system, including its metadata and properties.\n     * You can also call Get Blob to read a snapshot.\n     *\n     * * In Node.js, data returns in a Readable stream readableStreamBody\n     * * In browsers, data returns in a promise blobBody\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob\n     *\n     * @param offset - From which position of the blob to download, greater than or equal to 0\n     * @param count - How much data to be downloaded, greater than 0. Will download to the end when undefined\n     * @param options - Optional options to Blob Download operation.\n     *\n     *\n     * Example usage (Node.js):\n     *\n     * ```js\n     * // Download and convert a blob to a string\n     * const downloadBlockBlobResponse = await blobClient.download();\n     * const downloaded = await streamToBuffer(downloadBlockBlobResponse.readableStreamBody);\n     * console.log(\"Downloaded blob content:\", downloaded.toString());\n     *\n     * async function streamToBuffer(readableStream) {\n     * return new Promise((resolve, reject) => {\n     * const chunks = [];\n     * readableStream.on(\"data\", (data) => {\n     * chunks.push(data instanceof Buffer ? data : Buffer.from(data));\n     * });\n     * readableStream.on(\"end\", () => {\n     * resolve(Buffer.concat(chunks));\n     * });\n     * readableStream.on(\"error\", reject);\n     * });\n     * }\n     * ```\n     *\n     * Example usage (browser):\n     *\n     * ```js\n     * // Download and convert a blob to a string\n     * const downloadBlockBlobResponse = await blobClient.download();\n     * const downloaded = await blobToString(await downloadBlockBlobResponse.blobBody);\n     * console.log(\n     *   \"Downloaded blob content\",\n     *   downloaded\n     * );\n     *\n     * async function blobToString(blob: Blob): Promise<string> {\n     *   const fileReader = new FileReader();\n     *   return new Promise<string>((resolve, reject) => {\n     *     fileReader.onloadend = (ev: any) => {\n     *       resolve(ev.target!.result);\n     *     };\n     *     fileReader.onerror = reject;\n     *     fileReader.readAsText(blob);\n     *   });\n     * }\n     * ```\n     */\n    async download(offset = 0, count, options = {}) {\n        options.conditions = options.conditions || {};\n        options.conditions = options.conditions || {};\n        (0,_models__WEBPACK_IMPORTED_MODULE_9__.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlobClient-download\", options, async (updatedOptions) => {\n            var _a;\n            const res = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.blobContext.download({\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                requestOptions: {\n                    onDownloadProgress: _azure_core_util__WEBPACK_IMPORTED_MODULE_2__.isNode ? undefined : options.onProgress, // for Node.js, progress is reported by RetriableReadableStream\n                },\n                range: offset === 0 && !count ? undefined : (0,_Range__WEBPACK_IMPORTED_MODULE_11__.rangeToString)({ offset, count }),\n                rangeGetContentMD5: options.rangeGetContentMD5,\n                rangeGetContentCRC64: options.rangeGetContentCrc64,\n                snapshot: options.snapshot,\n                cpkInfo: options.customerProvidedKey,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n            const wrappedRes = Object.assign(Object.assign({}, res), { _response: res._response, objectReplicationDestinationPolicyId: res.objectReplicationPolicyId, objectReplicationSourceProperties: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.parseObjectReplicationRecord)(res.objectReplicationRules) });\n            // Return browser response immediately\n            if (!_azure_core_util__WEBPACK_IMPORTED_MODULE_2__.isNode) {\n                return wrappedRes;\n            }\n            // We support retrying when download stream unexpected ends in Node.js runtime\n            // Following code shouldn't be bundled into browser build, however some\n            // bundlers may try to bundle following code and \"FileReadResponse.ts\".\n            // In this case, \"FileDownloadResponse.browser.ts\" will be used as a shim of \"FileDownloadResponse.ts\"\n            // The config is in package.json \"browser\" field\n            if (options.maxRetryRequests === undefined || options.maxRetryRequests < 0) {\n                // TODO: Default value or make it a required parameter?\n                options.maxRetryRequests = _utils_constants__WEBPACK_IMPORTED_MODULE_8__.DEFAULT_MAX_DOWNLOAD_RETRY_REQUESTS;\n            }\n            if (res.contentLength === undefined) {\n                throw new RangeError(`File download response doesn't contain valid content length header`);\n            }\n            if (!res.etag) {\n                throw new RangeError(`File download response doesn't contain valid etag header`);\n            }\n            return new _BlobDownloadResponse__WEBPACK_IMPORTED_MODULE_12__.BlobDownloadResponse(wrappedRes, async (start) => {\n                var _a;\n                const updatedDownloadOptions = {\n                    leaseAccessConditions: options.conditions,\n                    modifiedAccessConditions: {\n                        ifMatch: options.conditions.ifMatch || res.etag,\n                        ifModifiedSince: options.conditions.ifModifiedSince,\n                        ifNoneMatch: options.conditions.ifNoneMatch,\n                        ifUnmodifiedSince: options.conditions.ifUnmodifiedSince,\n                        ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions,\n                    },\n                    range: (0,_Range__WEBPACK_IMPORTED_MODULE_11__.rangeToString)({\n                        count: offset + res.contentLength - start,\n                        offset: start,\n                    }),\n                    rangeGetContentMD5: options.rangeGetContentMD5,\n                    rangeGetContentCRC64: options.rangeGetContentCrc64,\n                    snapshot: options.snapshot,\n                    cpkInfo: options.customerProvidedKey,\n                };\n                // Debug purpose only\n                // console.log(\n                //   `Read from internal stream, range: ${\n                //     updatedOptions.range\n                //   }, options: ${JSON.stringify(updatedOptions)}`\n                // );\n                return (await this.blobContext.download(Object.assign({ abortSignal: options.abortSignal }, updatedDownloadOptions))).readableStreamBody;\n            }, offset, res.contentLength, {\n                maxRetryRequests: options.maxRetryRequests,\n                onProgress: options.onProgress,\n            });\n        });\n    }\n    /**\n     * Returns true if the Azure blob resource represented by this client exists; false otherwise.\n     *\n     * NOTE: use this function with care since an existing blob might be deleted by other clients or\n     * applications. Vice versa new blobs might be added by other clients or applications after this\n     * function completes.\n     *\n     * @param options - options to Exists operation.\n     */\n    async exists(options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlobClient-exists\", options, async (updatedOptions) => {\n            try {\n                (0,_models__WEBPACK_IMPORTED_MODULE_9__.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);\n                await this.getProperties({\n                    abortSignal: options.abortSignal,\n                    customerProvidedKey: options.customerProvidedKey,\n                    conditions: options.conditions,\n                    tracingOptions: updatedOptions.tracingOptions,\n                });\n                return true;\n            }\n            catch (e) {\n                if (e.statusCode === 404) {\n                    // Expected exception when checking blob existence\n                    return false;\n                }\n                else if (e.statusCode === 409 &&\n                    (e.details.errorCode === _utils_constants__WEBPACK_IMPORTED_MODULE_8__.BlobUsesCustomerSpecifiedEncryptionMsg ||\n                        e.details.errorCode === _utils_constants__WEBPACK_IMPORTED_MODULE_8__.BlobDoesNotUseCustomerSpecifiedEncryption)) {\n                    // Expected exception when checking blob existence\n                    return true;\n                }\n                throw e;\n            }\n        });\n    }\n    /**\n     * Returns all user-defined metadata, standard HTTP properties, and system properties\n     * for the blob. It does not return the content of the blob.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-properties\n     *\n     * WARNING: The `metadata` object returned in the response will have its keys in lowercase, even if\n     * they originally contained uppercase characters. This differs from the metadata keys returned by\n     * the methods of {@link ContainerClient} that list blobs using the `includeMetadata` option, which\n     * will retain their original casing.\n     *\n     * @param options - Optional options to Get Properties operation.\n     */\n    async getProperties(options = {}) {\n        options.conditions = options.conditions || {};\n        (0,_models__WEBPACK_IMPORTED_MODULE_9__.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlobClient-getProperties\", options, async (updatedOptions) => {\n            var _a;\n            const res = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.blobContext.getProperties({\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                cpkInfo: options.customerProvidedKey,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n            return Object.assign(Object.assign({}, res), { _response: res._response, objectReplicationDestinationPolicyId: res.objectReplicationPolicyId, objectReplicationSourceProperties: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.parseObjectReplicationRecord)(res.objectReplicationRules) });\n        });\n    }\n    /**\n     * Marks the specified blob or snapshot for deletion. The blob is later deleted\n     * during garbage collection. Note that in order to delete a blob, you must delete\n     * all of its snapshots. You can delete both at the same time with the Delete\n     * Blob operation.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-blob\n     *\n     * @param options - Optional options to Blob Delete operation.\n     */\n    async delete(options = {}) {\n        options.conditions = options.conditions || {};\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlobClient-delete\", options, async (updatedOptions) => {\n            var _a;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.blobContext.delete({\n                abortSignal: options.abortSignal,\n                deleteSnapshots: options.deleteSnapshots,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Marks the specified blob or snapshot for deletion if it exists. The blob is later deleted\n     * during garbage collection. Note that in order to delete a blob, you must delete\n     * all of its snapshots. You can delete both at the same time with the Delete\n     * Blob operation.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-blob\n     *\n     * @param options - Optional options to Blob Delete operation.\n     */\n    async deleteIfExists(options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlobClient-deleteIfExists\", options, async (updatedOptions) => {\n            var _a, _b;\n            try {\n                const res = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.delete(updatedOptions));\n                return Object.assign(Object.assign({ succeeded: true }, res), { _response: res._response });\n            }\n            catch (e) {\n                if (((_a = e.details) === null || _a === void 0 ? void 0 : _a.errorCode) === \"BlobNotFound\") {\n                    return Object.assign(Object.assign({ succeeded: false }, (_b = e.response) === null || _b === void 0 ? void 0 : _b.parsedHeaders), { _response: e.response });\n                }\n                throw e;\n            }\n        });\n    }\n    /**\n     * Restores the contents and metadata of soft deleted blob and any associated\n     * soft deleted snapshots. Undelete Blob is supported only on version 2017-07-29\n     * or later.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/undelete-blob\n     *\n     * @param options - Optional options to Blob Undelete operation.\n     */\n    async undelete(options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlobClient-undelete\", options, async (updatedOptions) => {\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.blobContext.undelete({\n                abortSignal: options.abortSignal,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Sets system properties on the blob.\n     *\n     * If no value provided, or no value provided for the specified blob HTTP headers,\n     * these blob HTTP headers without a value will be cleared.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-properties\n     *\n     * @param blobHTTPHeaders - If no value provided, or no value provided for\n     *                                                   the specified blob HTTP headers, these blob HTTP\n     *                                                   headers without a value will be cleared.\n     *                                                   A common header to set is `blobContentType`\n     *                                                   enabling the browser to provide functionality\n     *                                                   based on file type.\n     * @param options - Optional options to Blob Set HTTP Headers operation.\n     */\n    async setHTTPHeaders(blobHTTPHeaders, options = {}) {\n        options.conditions = options.conditions || {};\n        (0,_models__WEBPACK_IMPORTED_MODULE_9__.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlobClient-setHTTPHeaders\", options, async (updatedOptions) => {\n            var _a;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.blobContext.setHttpHeaders({\n                abortSignal: options.abortSignal,\n                blobHttpHeaders: blobHTTPHeaders,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                // cpkInfo: options.customerProvidedKey, // CPK is not included in Swagger, should change this back when this issue is fixed in Swagger.\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Sets user-defined metadata for the specified blob as one or more name-value pairs.\n     *\n     * If no option provided, or no metadata defined in the parameter, the blob\n     * metadata will be removed.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-metadata\n     *\n     * @param metadata - Replace existing metadata with this value.\n     *                               If no value provided the existing metadata will be removed.\n     * @param options - Optional options to Set Metadata operation.\n     */\n    async setMetadata(metadata, options = {}) {\n        options.conditions = options.conditions || {};\n        (0,_models__WEBPACK_IMPORTED_MODULE_9__.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlobClient-setMetadata\", options, async (updatedOptions) => {\n            var _a;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.blobContext.setMetadata({\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                metadata,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                cpkInfo: options.customerProvidedKey,\n                encryptionScope: options.encryptionScope,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Sets tags on the underlying blob.\n     * A blob can have up to 10 tags. Tag keys must be between 1 and 128 characters.  Tag values must be between 0 and 256 characters.\n     * Valid tag key and value characters include lower and upper case letters, digits (0-9),\n     * space (' '), plus ('+'), minus ('-'), period ('.'), foward slash ('/'), colon (':'), equals ('='), and underscore ('_').\n     *\n     * @param tags -\n     * @param options -\n     */\n    async setTags(tags, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlobClient-setTags\", options, async (updatedOptions) => {\n            var _a;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.blobContext.setTags({\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                tracingOptions: updatedOptions.tracingOptions,\n                tags: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.toBlobTags)(tags),\n            }));\n        });\n    }\n    /**\n     * Gets the tags associated with the underlying blob.\n     *\n     * @param options -\n     */\n    async getTags(options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlobClient-getTags\", options, async (updatedOptions) => {\n            var _a;\n            const response = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.blobContext.getTags({\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n            const wrappedResponse = Object.assign(Object.assign({}, response), { _response: response._response, tags: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.toTags)({ blobTagSet: response.blobTagSet }) || {} });\n            return wrappedResponse;\n        });\n    }\n    /**\n     * Get a {@link BlobLeaseClient} that manages leases on the blob.\n     *\n     * @param proposeLeaseId - Initial proposed lease Id.\n     * @returns A new BlobLeaseClient object for managing leases on the blob.\n     */\n    getBlobLeaseClient(proposeLeaseId) {\n        return new _BlobLeaseClient__WEBPACK_IMPORTED_MODULE_13__.BlobLeaseClient(this, proposeLeaseId);\n    }\n    /**\n     * Creates a read-only snapshot of a blob.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/snapshot-blob\n     *\n     * @param options - Optional options to the Blob Create Snapshot operation.\n     */\n    async createSnapshot(options = {}) {\n        options.conditions = options.conditions || {};\n        (0,_models__WEBPACK_IMPORTED_MODULE_9__.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlobClient-createSnapshot\", options, async (updatedOptions) => {\n            var _a;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.blobContext.createSnapshot({\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                metadata: options.metadata,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                cpkInfo: options.customerProvidedKey,\n                encryptionScope: options.encryptionScope,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Asynchronously copies a blob to a destination within the storage account.\n     * This method returns a long running operation poller that allows you to wait\n     * indefinitely until the copy is completed.\n     * You can also cancel a copy before it is completed by calling `cancelOperation` on the poller.\n     * Note that the onProgress callback will not be invoked if the operation completes in the first\n     * request, and attempting to cancel a completed copy will result in an error being thrown.\n     *\n     * In version 2012-02-12 and later, the source for a Copy Blob operation can be\n     * a committed blob in any Azure storage account.\n     * Beginning with version 2015-02-21, the source for a Copy Blob operation can be\n     * an Azure file in any Azure storage account.\n     * Only storage accounts created on or after June 7th, 2012 allow the Copy Blob\n     * operation to copy from another storage account.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/copy-blob\n     *\n     * Example using automatic polling:\n     *\n     * ```js\n     * const copyPoller = await blobClient.beginCopyFromURL('url');\n     * const result = await copyPoller.pollUntilDone();\n     * ```\n     *\n     * Example using manual polling:\n     *\n     * ```js\n     * const copyPoller = await blobClient.beginCopyFromURL('url');\n     * while (!poller.isDone()) {\n     *    await poller.poll();\n     * }\n     * const result = copyPoller.getResult();\n     * ```\n     *\n     * Example using progress updates:\n     *\n     * ```js\n     * const copyPoller = await blobClient.beginCopyFromURL('url', {\n     *   onProgress(state) {\n     *     console.log(`Progress: ${state.copyProgress}`);\n     *   }\n     * });\n     * const result = await copyPoller.pollUntilDone();\n     * ```\n     *\n     * Example using a changing polling interval (default 15 seconds):\n     *\n     * ```js\n     * const copyPoller = await blobClient.beginCopyFromURL('url', {\n     *   intervalInMs: 1000 // poll blob every 1 second for copy progress\n     * });\n     * const result = await copyPoller.pollUntilDone();\n     * ```\n     *\n     * Example using copy cancellation:\n     *\n     * ```js\n     * const copyPoller = await blobClient.beginCopyFromURL('url');\n     * // cancel operation after starting it.\n     * try {\n     *   await copyPoller.cancelOperation();\n     *   // calls to get the result now throw PollerCancelledError\n     *   await copyPoller.getResult();\n     * } catch (err) {\n     *   if (err.name === 'PollerCancelledError') {\n     *     console.log('The copy was cancelled.');\n     *   }\n     * }\n     * ```\n     *\n     * @param copySource - url to the source Azure Blob/File.\n     * @param options - Optional options to the Blob Start Copy From URL operation.\n     */\n    async beginCopyFromURL(copySource, options = {}) {\n        const client = {\n            abortCopyFromURL: (...args) => this.abortCopyFromURL(...args),\n            getProperties: (...args) => this.getProperties(...args),\n            startCopyFromURL: (...args) => this.startCopyFromURL(...args),\n        };\n        const poller = new _pollers_BlobStartCopyFromUrlPoller__WEBPACK_IMPORTED_MODULE_14__.BlobBeginCopyFromUrlPoller({\n            blobClient: client,\n            copySource,\n            intervalInMs: options.intervalInMs,\n            onProgress: options.onProgress,\n            resumeFrom: options.resumeFrom,\n            startCopyFromURLOptions: options,\n        });\n        // Trigger the startCopyFromURL call by calling poll.\n        // Any errors from this method should be surfaced to the user.\n        await poller.poll();\n        return poller;\n    }\n    /**\n     * Aborts a pending asynchronous Copy Blob operation, and leaves a destination blob with zero\n     * length and full metadata. Version 2012-02-12 and newer.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/abort-copy-blob\n     *\n     * @param copyId - Id of the Copy From URL operation.\n     * @param options - Optional options to the Blob Abort Copy From URL operation.\n     */\n    async abortCopyFromURL(copyId, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlobClient-abortCopyFromURL\", options, async (updatedOptions) => {\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.blobContext.abortCopyFromURL(copyId, {\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * The synchronous Copy From URL operation copies a blob or an internet resource to a new blob. It will not\n     * return a response until the copy is complete.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/copy-blob-from-url\n     *\n     * @param copySource - The source URL to copy from, Shared Access Signature(SAS) maybe needed for authentication\n     * @param options -\n     */\n    async syncCopyFromURL(copySource, options = {}) {\n        options.conditions = options.conditions || {};\n        options.sourceConditions = options.sourceConditions || {};\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlobClient-syncCopyFromURL\", options, async (updatedOptions) => {\n            var _a, _b, _c, _d, _e, _f, _g;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.blobContext.copyFromURL(copySource, {\n                abortSignal: options.abortSignal,\n                metadata: options.metadata,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                sourceModifiedAccessConditions: {\n                    sourceIfMatch: (_b = options.sourceConditions) === null || _b === void 0 ? void 0 : _b.ifMatch,\n                    sourceIfModifiedSince: (_c = options.sourceConditions) === null || _c === void 0 ? void 0 : _c.ifModifiedSince,\n                    sourceIfNoneMatch: (_d = options.sourceConditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch,\n                    sourceIfUnmodifiedSince: (_e = options.sourceConditions) === null || _e === void 0 ? void 0 : _e.ifUnmodifiedSince,\n                },\n                sourceContentMD5: options.sourceContentMD5,\n                copySourceAuthorization: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.httpAuthorizationToString)(options.sourceAuthorization),\n                tier: (0,_models__WEBPACK_IMPORTED_MODULE_9__.toAccessTier)(options.tier),\n                blobTagsString: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.toBlobTagsString)(options.tags),\n                immutabilityPolicyExpiry: (_f = options.immutabilityPolicy) === null || _f === void 0 ? void 0 : _f.expiriesOn,\n                immutabilityPolicyMode: (_g = options.immutabilityPolicy) === null || _g === void 0 ? void 0 : _g.policyMode,\n                legalHold: options.legalHold,\n                encryptionScope: options.encryptionScope,\n                copySourceTags: options.copySourceTags,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Sets the tier on a blob. The operation is allowed on a page blob in a premium\n     * storage account and on a block blob in a blob storage account (locally redundant\n     * storage only). A premium page blob's tier determines the allowed size, IOPS,\n     * and bandwidth of the blob. A block blob's tier determines Hot/Cool/Archive\n     * storage type. This operation does not update the blob's ETag.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-tier\n     *\n     * @param tier - The tier to be set on the blob. Valid values are Hot, Cool, or Archive.\n     * @param options - Optional options to the Blob Set Tier operation.\n     */\n    async setAccessTier(tier, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlobClient-setAccessTier\", options, async (updatedOptions) => {\n            var _a;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.blobContext.setTier((0,_models__WEBPACK_IMPORTED_MODULE_9__.toAccessTier)(tier), {\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                rehydratePriority: options.rehydratePriority,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    async downloadToBuffer(param1, param2, param3, param4 = {}) {\n        var _a;\n        let buffer;\n        let offset = 0;\n        let count = 0;\n        let options = param4;\n        if (param1 instanceof Buffer) {\n            buffer = param1;\n            offset = param2 || 0;\n            count = typeof param3 === \"number\" ? param3 : 0;\n        }\n        else {\n            offset = typeof param1 === \"number\" ? param1 : 0;\n            count = typeof param2 === \"number\" ? param2 : 0;\n            options = param3 || {};\n        }\n        let blockSize = (_a = options.blockSize) !== null && _a !== void 0 ? _a : 0;\n        if (blockSize < 0) {\n            throw new RangeError(\"blockSize option must be >= 0\");\n        }\n        if (blockSize === 0) {\n            blockSize = _utils_constants__WEBPACK_IMPORTED_MODULE_8__.DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES;\n        }\n        if (offset < 0) {\n            throw new RangeError(\"offset option must be >= 0\");\n        }\n        if (count && count <= 0) {\n            throw new RangeError(\"count option must be greater than 0\");\n        }\n        if (!options.conditions) {\n            options.conditions = {};\n        }\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlobClient-downloadToBuffer\", options, async (updatedOptions) => {\n            // Customer doesn't specify length, get it\n            if (!count) {\n                const response = await this.getProperties(Object.assign(Object.assign({}, options), { tracingOptions: updatedOptions.tracingOptions }));\n                count = response.contentLength - offset;\n                if (count < 0) {\n                    throw new RangeError(`offset ${offset} shouldn't be larger than blob size ${response.contentLength}`);\n                }\n            }\n            // Allocate the buffer of size = count if the buffer is not provided\n            if (!buffer) {\n                try {\n                    buffer = Buffer.alloc(count);\n                }\n                catch (error) {\n                    throw new Error(`Unable to allocate the buffer of size: ${count}(in bytes). Please try passing your own buffer to the \"downloadToBuffer\" method or try using other methods like \"download\" or \"downloadToFile\".\\t ${error.message}`);\n                }\n            }\n            if (buffer.length < count) {\n                throw new RangeError(`The buffer's size should be equal to or larger than the request count of bytes: ${count}`);\n            }\n            let transferProgress = 0;\n            const batch = new _utils_Batch__WEBPACK_IMPORTED_MODULE_15__.Batch(options.concurrency);\n            for (let off = offset; off < offset + count; off = off + blockSize) {\n                batch.addOperation(async () => {\n                    // Exclusive chunk end position\n                    let chunkEnd = offset + count;\n                    if (off + blockSize < chunkEnd) {\n                        chunkEnd = off + blockSize;\n                    }\n                    const response = await this.download(off, chunkEnd - off, {\n                        abortSignal: options.abortSignal,\n                        conditions: options.conditions,\n                        maxRetryRequests: options.maxRetryRequestsPerBlock,\n                        customerProvidedKey: options.customerProvidedKey,\n                        tracingOptions: updatedOptions.tracingOptions,\n                    });\n                    const stream = response.readableStreamBody;\n                    await (0,_utils_utils_node__WEBPACK_IMPORTED_MODULE_16__.streamToBuffer)(stream, buffer, off - offset, chunkEnd - offset);\n                    // Update progress after block is downloaded, in case of block trying\n                    // Could provide finer grained progress updating inside HTTP requests,\n                    // only if convenience layer download try is enabled\n                    transferProgress += chunkEnd - off;\n                    if (options.onProgress) {\n                        options.onProgress({ loadedBytes: transferProgress });\n                    }\n                });\n            }\n            await batch.do();\n            return buffer;\n        });\n    }\n    /**\n     * ONLY AVAILABLE IN NODE.JS RUNTIME.\n     *\n     * Downloads an Azure Blob to a local file.\n     * Fails if the the given file path already exits.\n     * Offset and count are optional, pass 0 and undefined respectively to download the entire blob.\n     *\n     * @param filePath -\n     * @param offset - From which position of the block blob to download.\n     * @param count - How much data to be downloaded. Will download to the end when passing undefined.\n     * @param options - Options to Blob download options.\n     * @returns The response data for blob download operation,\n     *                                                 but with readableStreamBody set to undefined since its\n     *                                                 content is already read and written into a local file\n     *                                                 at the specified path.\n     */\n    async downloadToFile(filePath, offset = 0, count, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlobClient-downloadToFile\", options, async (updatedOptions) => {\n            const response = await this.download(offset, count, Object.assign(Object.assign({}, options), { tracingOptions: updatedOptions.tracingOptions }));\n            if (response.readableStreamBody) {\n                await (0,_utils_utils_node__WEBPACK_IMPORTED_MODULE_16__.readStreamToLocalFile)(response.readableStreamBody, filePath);\n            }\n            // The stream is no longer accessible so setting it to undefined.\n            response.blobDownloadStream = undefined;\n            return response;\n        });\n    }\n    getBlobAndContainerNamesFromUrl() {\n        let containerName;\n        let blobName;\n        try {\n            //  URL may look like the following\n            // \"https://myaccount.blob.core.windows.net/mycontainer/blob?sasString\";\n            // \"https://myaccount.blob.core.windows.net/mycontainer/blob\";\n            // \"https://myaccount.blob.core.windows.net/mycontainer/blob/a.txt?sasString\";\n            // \"https://myaccount.blob.core.windows.net/mycontainer/blob/a.txt\";\n            // IPv4/IPv6 address hosts, Endpoints - `http://127.0.0.1:10000/devstoreaccount1/containername/blob`\n            // http://localhost:10001/devstoreaccount1/containername/blob\n            const parsedUrl = new URL(this.url);\n            if (parsedUrl.host.split(\".\")[1] === \"blob\") {\n                // \"https://myaccount.blob.core.windows.net/containername/blob\".\n                // .getPath() -> /containername/blob\n                const pathComponents = parsedUrl.pathname.match(\"/([^/]*)(/(.*))?\");\n                containerName = pathComponents[1];\n                blobName = pathComponents[3];\n            }\n            else if ((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.isIpEndpointStyle)(parsedUrl)) {\n                // IPv4/IPv6 address hosts... Example - http://192.0.0.10:10001/devstoreaccount1/containername/blob\n                // Single word domain without a [dot] in the endpoint... Example - http://localhost:10001/devstoreaccount1/containername/blob\n                // .getPath() -> /devstoreaccount1/containername/blob\n                const pathComponents = parsedUrl.pathname.match(\"/([^/]*)/([^/]*)(/(.*))?\");\n                containerName = pathComponents[2];\n                blobName = pathComponents[4];\n            }\n            else {\n                // \"https://customdomain.com/containername/blob\".\n                // .getPath() -> /containername/blob\n                const pathComponents = parsedUrl.pathname.match(\"/([^/]*)(/(.*))?\");\n                containerName = pathComponents[1];\n                blobName = pathComponents[3];\n            }\n            // decode the encoded blobName, containerName - to get all the special characters that might be present in them\n            containerName = decodeURIComponent(containerName);\n            blobName = decodeURIComponent(blobName);\n            // Azure Storage Server will replace \"\\\" with \"/\" in the blob names\n            //   doing the same in the SDK side so that the user doesn't have to replace \"\\\" instances in the blobName\n            blobName = blobName.replace(/\\\\/g, \"/\");\n            if (!containerName) {\n                throw new Error(\"Provided containerName is invalid.\");\n            }\n            return { blobName, containerName };\n        }\n        catch (error) {\n            throw new Error(\"Unable to extract blobName and containerName with provided information.\");\n        }\n    }\n    /**\n     * Asynchronously copies a blob to a destination within the storage account.\n     * In version 2012-02-12 and later, the source for a Copy Blob operation can be\n     * a committed blob in any Azure storage account.\n     * Beginning with version 2015-02-21, the source for a Copy Blob operation can be\n     * an Azure file in any Azure storage account.\n     * Only storage accounts created on or after June 7th, 2012 allow the Copy Blob\n     * operation to copy from another storage account.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/copy-blob\n     *\n     * @param copySource - url to the source Azure Blob/File.\n     * @param options - Optional options to the Blob Start Copy From URL operation.\n     */\n    async startCopyFromURL(copySource, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlobClient-startCopyFromURL\", options, async (updatedOptions) => {\n            var _a, _b, _c;\n            options.conditions = options.conditions || {};\n            options.sourceConditions = options.sourceConditions || {};\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.blobContext.startCopyFromURL(copySource, {\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                metadata: options.metadata,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                sourceModifiedAccessConditions: {\n                    sourceIfMatch: options.sourceConditions.ifMatch,\n                    sourceIfModifiedSince: options.sourceConditions.ifModifiedSince,\n                    sourceIfNoneMatch: options.sourceConditions.ifNoneMatch,\n                    sourceIfUnmodifiedSince: options.sourceConditions.ifUnmodifiedSince,\n                    sourceIfTags: options.sourceConditions.tagConditions,\n                },\n                immutabilityPolicyExpiry: (_b = options.immutabilityPolicy) === null || _b === void 0 ? void 0 : _b.expiriesOn,\n                immutabilityPolicyMode: (_c = options.immutabilityPolicy) === null || _c === void 0 ? void 0 : _c.policyMode,\n                legalHold: options.legalHold,\n                rehydratePriority: options.rehydratePriority,\n                tier: (0,_models__WEBPACK_IMPORTED_MODULE_9__.toAccessTier)(options.tier),\n                blobTagsString: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.toBlobTagsString)(options.tags),\n                sealBlob: options.sealBlob,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Only available for BlobClient constructed with a shared key credential.\n     *\n     * Generates a Blob Service Shared Access Signature (SAS) URI based on the client properties\n     * and parameters passed in. The SAS is signed by the shared key credential of the client.\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas\n     *\n     * @param options - Optional parameters.\n     * @returns The SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.\n     */\n    generateSasUrl(options) {\n        return new Promise((resolve) => {\n            if (!(this.credential instanceof _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_5__.StorageSharedKeyCredential)) {\n                throw new RangeError(\"Can only generate the SAS when the client is initialized with a shared key credential\");\n            }\n            const sas = (0,_sas_BlobSASSignatureValues__WEBPACK_IMPORTED_MODULE_17__.generateBlobSASQueryParameters)(Object.assign({ containerName: this._containerName, blobName: this._name, snapshotTime: this._snapshot, versionId: this._versionId }, options), this.credential).toString();\n            resolve((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLQuery)(this.url, sas));\n        });\n    }\n    /**\n     * Only available for BlobClient constructed with a shared key credential.\n     *\n     * Generates string to sign for a Blob Service Shared Access Signature (SAS) URI based on\n     * the client properties and parameters passed in. The SAS is signed by the shared key credential of the client.\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas\n     *\n     * @param options - Optional parameters.\n     * @returns The SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.\n     */\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    generateSasStringToSign(options) {\n        if (!(this.credential instanceof _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_5__.StorageSharedKeyCredential)) {\n            throw new RangeError(\"Can only generate the SAS when the client is initialized with a shared key credential\");\n        }\n        return (0,_sas_BlobSASSignatureValues__WEBPACK_IMPORTED_MODULE_17__.generateBlobSASQueryParametersInternal)(Object.assign({ containerName: this._containerName, blobName: this._name, snapshotTime: this._snapshot, versionId: this._versionId }, options), this.credential).stringToSign;\n    }\n    /**\n     *\n     * Generates a Blob Service Shared Access Signature (SAS) URI based on\n     * the client properties and parameters passed in. The SAS is signed by the input user delegation key.\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas\n     *\n     * @param options - Optional parameters.\n     * @param userDelegationKey -  Return value of `blobServiceClient.getUserDelegationKey()`\n     * @returns The SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.\n     */\n    generateUserDelegationSasUrl(options, userDelegationKey) {\n        return new Promise((resolve) => {\n            const sas = (0,_sas_BlobSASSignatureValues__WEBPACK_IMPORTED_MODULE_17__.generateBlobSASQueryParameters)(Object.assign({ containerName: this._containerName, blobName: this._name, snapshotTime: this._snapshot, versionId: this._versionId }, options), userDelegationKey, this.accountName).toString();\n            resolve((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLQuery)(this.url, sas));\n        });\n    }\n    /**\n     * Only available for BlobClient constructed with a shared key credential.\n     *\n     * Generates string to sign for a Blob Service Shared Access Signature (SAS) URI based on\n     * the client properties and parameters passed in. The SAS is signed by the input user delegation key.\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas\n     *\n     * @param options - Optional parameters.\n     * @param userDelegationKey -  Return value of `blobServiceClient.getUserDelegationKey()`\n     * @returns The SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.\n     */\n    generateUserDelegationSasStringToSign(options, userDelegationKey) {\n        return (0,_sas_BlobSASSignatureValues__WEBPACK_IMPORTED_MODULE_17__.generateBlobSASQueryParametersInternal)(Object.assign({ containerName: this._containerName, blobName: this._name, snapshotTime: this._snapshot, versionId: this._versionId }, options), userDelegationKey, this.accountName).stringToSign;\n    }\n    /**\n     * Delete the immutablility policy on the blob.\n     *\n     * @param options - Optional options to delete immutability policy on the blob.\n     */\n    async deleteImmutabilityPolicy(options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlobClient-deleteImmutabilityPolicy\", options, async (updatedOptions) => {\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.blobContext.deleteImmutabilityPolicy({\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Set immutability policy on the blob.\n     *\n     * @param options - Optional options to set immutability policy on the blob.\n     */\n    async setImmutabilityPolicy(immutabilityPolicy, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlobClient-setImmutabilityPolicy\", options, async (updatedOptions) => {\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.blobContext.setImmutabilityPolicy({\n                immutabilityPolicyExpiry: immutabilityPolicy.expiriesOn,\n                immutabilityPolicyMode: immutabilityPolicy.policyMode,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Set legal hold on the blob.\n     *\n     * @param options - Optional options to set legal hold on the blob.\n     */\n    async setLegalHold(legalHoldEnabled, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlobClient-setLegalHold\", options, async (updatedOptions) => {\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.blobContext.setLegalHold(legalHoldEnabled, {\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * The Get Account Information operation returns the sku name and account kind\n     * for the specified account.\n     * The Get Account Information operation is available on service versions beginning\n     * with version 2018-03-28.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-account-information\n     *\n     * @param options - Options to the Service Get Account Info operation.\n     * @returns Response data for the Service Get Account Info operation.\n     */\n    async getAccountInfo(options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlobClient-getAccountInfo\", options, async (updatedOptions) => {\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.blobContext.getAccountInfo({\n                abortSignal: options.abortSignal,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n}\n/**\n * AppendBlobClient defines a set of operations applicable to append blobs.\n */\nclass AppendBlobClient extends BlobClient {\n    constructor(urlOrConnectionString, credentialOrPipelineOrContainerName, blobNameOrOptions, \n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options) {\n        // In TypeScript we cannot simply pass all parameters to super() like below so have to duplicate the code instead.\n        //   super(s, credentialOrPipelineOrContainerNameOrOptions, blobNameOrOptions, options);\n        let pipeline;\n        let url;\n        options = options || {};\n        if ((0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.isPipelineLike)(credentialOrPipelineOrContainerName)) {\n            // (url: string, pipeline: Pipeline)\n            url = urlOrConnectionString;\n            pipeline = credentialOrPipelineOrContainerName;\n        }\n        else if ((_azure_core_util__WEBPACK_IMPORTED_MODULE_2__.isNode && credentialOrPipelineOrContainerName instanceof _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_5__.StorageSharedKeyCredential) ||\n            credentialOrPipelineOrContainerName instanceof _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__.AnonymousCredential ||\n            (0,_azure_core_auth__WEBPACK_IMPORTED_MODULE_1__.isTokenCredential)(credentialOrPipelineOrContainerName)) {\n            // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)      url = urlOrConnectionString;\n            url = urlOrConnectionString;\n            options = blobNameOrOptions;\n            pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.newPipeline)(credentialOrPipelineOrContainerName, options);\n        }\n        else if (!credentialOrPipelineOrContainerName &&\n            typeof credentialOrPipelineOrContainerName !== \"string\") {\n            // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n            url = urlOrConnectionString;\n            // The second parameter is undefined. Use anonymous credential.\n            pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.newPipeline)(new _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__.AnonymousCredential(), options);\n        }\n        else if (credentialOrPipelineOrContainerName &&\n            typeof credentialOrPipelineOrContainerName === \"string\" &&\n            blobNameOrOptions &&\n            typeof blobNameOrOptions === \"string\") {\n            // (connectionString: string, containerName: string, blobName: string, options?: StoragePipelineOptions)\n            const containerName = credentialOrPipelineOrContainerName;\n            const blobName = blobNameOrOptions;\n            const extractedCreds = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.extractConnectionStringParts)(urlOrConnectionString);\n            if (extractedCreds.kind === \"AccountConnString\") {\n                if (_azure_core_util__WEBPACK_IMPORTED_MODULE_2__.isNode) {\n                    const sharedKeyCredential = new _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_5__.StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);\n                    url = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLPath)((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLPath)(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName));\n                    if (!options.proxyOptions) {\n                        options.proxyOptions = (0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__.getDefaultProxySettings)(extractedCreds.proxyUri);\n                    }\n                    pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.newPipeline)(sharedKeyCredential, options);\n                }\n                else {\n                    throw new Error(\"Account connection string is only supported in Node.js environment\");\n                }\n            }\n            else if (extractedCreds.kind === \"SASConnString\") {\n                url =\n                    (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLPath)((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLPath)(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName)) +\n                        \"?\" +\n                        extractedCreds.accountSas;\n                pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.newPipeline)(new _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__.AnonymousCredential(), options);\n            }\n            else {\n                throw new Error(\"Connection string must be either an Account connection string or a SAS connection string\");\n            }\n        }\n        else {\n            throw new Error(\"Expecting non-empty strings for containerName and blobName parameters\");\n        }\n        super(url, pipeline);\n        this.appendBlobContext = this.storageClientContext.appendBlob;\n    }\n    /**\n     * Creates a new AppendBlobClient object identical to the source but with the\n     * specified snapshot timestamp.\n     * Provide \"\" will remove the snapshot and return a Client to the base blob.\n     *\n     * @param snapshot - The snapshot timestamp.\n     * @returns A new AppendBlobClient object identical to the source but with the specified snapshot timestamp.\n     */\n    withSnapshot(snapshot) {\n        return new AppendBlobClient((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.setURLParameter)(this.url, _utils_constants__WEBPACK_IMPORTED_MODULE_8__.URLConstants.Parameters.SNAPSHOT, snapshot.length === 0 ? undefined : snapshot), this.pipeline);\n    }\n    /**\n     * Creates a 0-length append blob. Call AppendBlock to append data to an append blob.\n     * @see https://docs.microsoft.com/rest/api/storageservices/put-blob\n     *\n     * @param options - Options to the Append Block Create operation.\n     *\n     *\n     * Example usage:\n     *\n     * ```js\n     * const appendBlobClient = containerClient.getAppendBlobClient(\"<blob name>\");\n     * await appendBlobClient.create();\n     * ```\n     */\n    async create(options = {}) {\n        options.conditions = options.conditions || {};\n        (0,_models__WEBPACK_IMPORTED_MODULE_9__.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"AppendBlobClient-create\", options, async (updatedOptions) => {\n            var _a, _b, _c;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.appendBlobContext.create(0, {\n                abortSignal: options.abortSignal,\n                blobHttpHeaders: options.blobHTTPHeaders,\n                leaseAccessConditions: options.conditions,\n                metadata: options.metadata,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                cpkInfo: options.customerProvidedKey,\n                encryptionScope: options.encryptionScope,\n                immutabilityPolicyExpiry: (_b = options.immutabilityPolicy) === null || _b === void 0 ? void 0 : _b.expiriesOn,\n                immutabilityPolicyMode: (_c = options.immutabilityPolicy) === null || _c === void 0 ? void 0 : _c.policyMode,\n                legalHold: options.legalHold,\n                blobTagsString: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.toBlobTagsString)(options.tags),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Creates a 0-length append blob. Call AppendBlock to append data to an append blob.\n     * If the blob with the same name already exists, the content of the existing blob will remain unchanged.\n     * @see https://docs.microsoft.com/rest/api/storageservices/put-blob\n     *\n     * @param options -\n     */\n    async createIfNotExists(options = {}) {\n        const conditions = { ifNoneMatch: _utils_constants__WEBPACK_IMPORTED_MODULE_8__.ETagAny };\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"AppendBlobClient-createIfNotExists\", options, async (updatedOptions) => {\n            var _a, _b;\n            try {\n                const res = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.create(Object.assign(Object.assign({}, updatedOptions), { conditions })));\n                return Object.assign(Object.assign({ succeeded: true }, res), { _response: res._response });\n            }\n            catch (e) {\n                if (((_a = e.details) === null || _a === void 0 ? void 0 : _a.errorCode) === \"BlobAlreadyExists\") {\n                    return Object.assign(Object.assign({ succeeded: false }, (_b = e.response) === null || _b === void 0 ? void 0 : _b.parsedHeaders), { _response: e.response });\n                }\n                throw e;\n            }\n        });\n    }\n    /**\n     * Seals the append blob, making it read only.\n     *\n     * @param options -\n     */\n    async seal(options = {}) {\n        options.conditions = options.conditions || {};\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"AppendBlobClient-seal\", options, async (updatedOptions) => {\n            var _a;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.appendBlobContext.seal({\n                abortSignal: options.abortSignal,\n                appendPositionAccessConditions: options.conditions,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Commits a new block of data to the end of the existing append blob.\n     * @see https://docs.microsoft.com/rest/api/storageservices/append-block\n     *\n     * @param body - Data to be appended.\n     * @param contentLength - Length of the body in bytes.\n     * @param options - Options to the Append Block operation.\n     *\n     *\n     * Example usage:\n     *\n     * ```js\n     * const content = \"Hello World!\";\n     *\n     * // Create a new append blob and append data to the blob.\n     * const newAppendBlobClient = containerClient.getAppendBlobClient(\"<blob name>\");\n     * await newAppendBlobClient.create();\n     * await newAppendBlobClient.appendBlock(content, content.length);\n     *\n     * // Append data to an existing append blob.\n     * const existingAppendBlobClient = containerClient.getAppendBlobClient(\"<blob name>\");\n     * await existingAppendBlobClient.appendBlock(content, content.length);\n     * ```\n     */\n    async appendBlock(body, contentLength, options = {}) {\n        options.conditions = options.conditions || {};\n        (0,_models__WEBPACK_IMPORTED_MODULE_9__.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"AppendBlobClient-appendBlock\", options, async (updatedOptions) => {\n            var _a;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.appendBlobContext.appendBlock(contentLength, body, {\n                abortSignal: options.abortSignal,\n                appendPositionAccessConditions: options.conditions,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                requestOptions: {\n                    onUploadProgress: options.onProgress,\n                },\n                transactionalContentMD5: options.transactionalContentMD5,\n                transactionalContentCrc64: options.transactionalContentCrc64,\n                cpkInfo: options.customerProvidedKey,\n                encryptionScope: options.encryptionScope,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * The Append Block operation commits a new block of data to the end of an existing append blob\n     * where the contents are read from a source url.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/append-block-from-url\n     *\n     * @param sourceURL -\n     *                 The url to the blob that will be the source of the copy. A source blob in the same storage account can\n     *                 be authenticated via Shared Key. However, if the source is a blob in another account, the source blob\n     *                 must either be public or must be authenticated via a shared access signature. If the source blob is\n     *                 public, no authentication is required to perform the operation.\n     * @param sourceOffset - Offset in source to be appended\n     * @param count - Number of bytes to be appended as a block\n     * @param options -\n     */\n    async appendBlockFromURL(sourceURL, sourceOffset, count, options = {}) {\n        options.conditions = options.conditions || {};\n        options.sourceConditions = options.sourceConditions || {};\n        (0,_models__WEBPACK_IMPORTED_MODULE_9__.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"AppendBlobClient-appendBlockFromURL\", options, async (updatedOptions) => {\n            var _a, _b, _c, _d, _e;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.appendBlobContext.appendBlockFromUrl(sourceURL, 0, {\n                abortSignal: options.abortSignal,\n                sourceRange: (0,_Range__WEBPACK_IMPORTED_MODULE_11__.rangeToString)({ offset: sourceOffset, count }),\n                sourceContentMD5: options.sourceContentMD5,\n                sourceContentCrc64: options.sourceContentCrc64,\n                leaseAccessConditions: options.conditions,\n                appendPositionAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                sourceModifiedAccessConditions: {\n                    sourceIfMatch: (_b = options.sourceConditions) === null || _b === void 0 ? void 0 : _b.ifMatch,\n                    sourceIfModifiedSince: (_c = options.sourceConditions) === null || _c === void 0 ? void 0 : _c.ifModifiedSince,\n                    sourceIfNoneMatch: (_d = options.sourceConditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch,\n                    sourceIfUnmodifiedSince: (_e = options.sourceConditions) === null || _e === void 0 ? void 0 : _e.ifUnmodifiedSince,\n                },\n                copySourceAuthorization: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.httpAuthorizationToString)(options.sourceAuthorization),\n                cpkInfo: options.customerProvidedKey,\n                encryptionScope: options.encryptionScope,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n}\n/**\n * BlockBlobClient defines a set of operations applicable to block blobs.\n */\nclass BlockBlobClient extends BlobClient {\n    constructor(urlOrConnectionString, credentialOrPipelineOrContainerName, blobNameOrOptions, \n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options) {\n        // In TypeScript we cannot simply pass all parameters to super() like below so have to duplicate the code instead.\n        //   super(s, credentialOrPipelineOrContainerNameOrOptions, blobNameOrOptions, options);\n        let pipeline;\n        let url;\n        options = options || {};\n        if ((0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.isPipelineLike)(credentialOrPipelineOrContainerName)) {\n            // (url: string, pipeline: Pipeline)\n            url = urlOrConnectionString;\n            pipeline = credentialOrPipelineOrContainerName;\n        }\n        else if ((_azure_core_util__WEBPACK_IMPORTED_MODULE_2__.isNode && credentialOrPipelineOrContainerName instanceof _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_5__.StorageSharedKeyCredential) ||\n            credentialOrPipelineOrContainerName instanceof _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__.AnonymousCredential ||\n            (0,_azure_core_auth__WEBPACK_IMPORTED_MODULE_1__.isTokenCredential)(credentialOrPipelineOrContainerName)) {\n            // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n            url = urlOrConnectionString;\n            options = blobNameOrOptions;\n            pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.newPipeline)(credentialOrPipelineOrContainerName, options);\n        }\n        else if (!credentialOrPipelineOrContainerName &&\n            typeof credentialOrPipelineOrContainerName !== \"string\") {\n            // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n            // The second parameter is undefined. Use anonymous credential.\n            url = urlOrConnectionString;\n            if (blobNameOrOptions && typeof blobNameOrOptions !== \"string\") {\n                options = blobNameOrOptions;\n            }\n            pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.newPipeline)(new _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__.AnonymousCredential(), options);\n        }\n        else if (credentialOrPipelineOrContainerName &&\n            typeof credentialOrPipelineOrContainerName === \"string\" &&\n            blobNameOrOptions &&\n            typeof blobNameOrOptions === \"string\") {\n            // (connectionString: string, containerName: string, blobName: string, options?: StoragePipelineOptions)\n            const containerName = credentialOrPipelineOrContainerName;\n            const blobName = blobNameOrOptions;\n            const extractedCreds = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.extractConnectionStringParts)(urlOrConnectionString);\n            if (extractedCreds.kind === \"AccountConnString\") {\n                if (_azure_core_util__WEBPACK_IMPORTED_MODULE_2__.isNode) {\n                    const sharedKeyCredential = new _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_5__.StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);\n                    url = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLPath)((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLPath)(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName));\n                    if (!options.proxyOptions) {\n                        options.proxyOptions = (0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__.getDefaultProxySettings)(extractedCreds.proxyUri);\n                    }\n                    pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.newPipeline)(sharedKeyCredential, options);\n                }\n                else {\n                    throw new Error(\"Account connection string is only supported in Node.js environment\");\n                }\n            }\n            else if (extractedCreds.kind === \"SASConnString\") {\n                url =\n                    (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLPath)((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLPath)(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName)) +\n                        \"?\" +\n                        extractedCreds.accountSas;\n                pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.newPipeline)(new _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__.AnonymousCredential(), options);\n            }\n            else {\n                throw new Error(\"Connection string must be either an Account connection string or a SAS connection string\");\n            }\n        }\n        else {\n            throw new Error(\"Expecting non-empty strings for containerName and blobName parameters\");\n        }\n        super(url, pipeline);\n        this.blockBlobContext = this.storageClientContext.blockBlob;\n        this._blobContext = this.storageClientContext.blob;\n    }\n    /**\n     * Creates a new BlockBlobClient object identical to the source but with the\n     * specified snapshot timestamp.\n     * Provide \"\" will remove the snapshot and return a URL to the base blob.\n     *\n     * @param snapshot - The snapshot timestamp.\n     * @returns A new BlockBlobClient object identical to the source but with the specified snapshot timestamp.\n     */\n    withSnapshot(snapshot) {\n        return new BlockBlobClient((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.setURLParameter)(this.url, _utils_constants__WEBPACK_IMPORTED_MODULE_8__.URLConstants.Parameters.SNAPSHOT, snapshot.length === 0 ? undefined : snapshot), this.pipeline);\n    }\n    /**\n     * ONLY AVAILABLE IN NODE.JS RUNTIME.\n     *\n     * Quick query for a JSON or CSV formatted blob.\n     *\n     * Example usage (Node.js):\n     *\n     * ```js\n     * // Query and convert a blob to a string\n     * const queryBlockBlobResponse = await blockBlobClient.query(\"select * from BlobStorage\");\n     * const downloaded = (await streamToBuffer(queryBlockBlobResponse.readableStreamBody)).toString();\n     * console.log(\"Query blob content:\", downloaded);\n     *\n     * async function streamToBuffer(readableStream) {\n     *   return new Promise((resolve, reject) => {\n     *     const chunks = [];\n     *     readableStream.on(\"data\", (data) => {\n     *       chunks.push(data instanceof Buffer ? data : Buffer.from(data));\n     *     });\n     *     readableStream.on(\"end\", () => {\n     *       resolve(Buffer.concat(chunks));\n     *     });\n     *     readableStream.on(\"error\", reject);\n     *   });\n     * }\n     * ```\n     *\n     * @param query -\n     * @param options -\n     */\n    async query(query, options = {}) {\n        (0,_models__WEBPACK_IMPORTED_MODULE_9__.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);\n        if (!_azure_core_util__WEBPACK_IMPORTED_MODULE_2__.isNode) {\n            throw new Error(\"This operation currently is only supported in Node.js.\");\n        }\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlockBlobClient-query\", options, async (updatedOptions) => {\n            var _a;\n            const response = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this._blobContext.query({\n                abortSignal: options.abortSignal,\n                queryRequest: {\n                    queryType: \"SQL\",\n                    expression: query,\n                    inputSerialization: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.toQuerySerialization)(options.inputTextConfiguration),\n                    outputSerialization: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.toQuerySerialization)(options.outputTextConfiguration),\n                },\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                cpkInfo: options.customerProvidedKey,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n            return new _BlobQueryResponse__WEBPACK_IMPORTED_MODULE_18__.BlobQueryResponse(response, {\n                abortSignal: options.abortSignal,\n                onProgress: options.onProgress,\n                onError: options.onError,\n            });\n        });\n    }\n    /**\n     * Creates a new block blob, or updates the content of an existing block blob.\n     * Updating an existing block blob overwrites any existing metadata on the blob.\n     * Partial updates are not supported; the content of the existing blob is\n     * overwritten with the new content. To perform a partial update of a block blob's,\n     * use {@link stageBlock} and {@link commitBlockList}.\n     *\n     * This is a non-parallel uploading method, please use {@link uploadFile},\n     * {@link uploadStream} or {@link uploadBrowserData} for better performance\n     * with concurrency uploading.\n     *\n     * @see https://docs.microsoft.com/rest/api/storageservices/put-blob\n     *\n     * @param body - Blob, string, ArrayBuffer, ArrayBufferView or a function\n     *                               which returns a new Readable stream whose offset is from data source beginning.\n     * @param contentLength - Length of body in bytes. Use Buffer.byteLength() to calculate body length for a\n     *                               string including non non-Base64/Hex-encoded characters.\n     * @param options - Options to the Block Blob Upload operation.\n     * @returns Response data for the Block Blob Upload operation.\n     *\n     * Example usage:\n     *\n     * ```js\n     * const content = \"Hello world!\";\n     * const uploadBlobResponse = await blockBlobClient.upload(content, content.length);\n     * ```\n     */\n    async upload(body, contentLength, options = {}) {\n        options.conditions = options.conditions || {};\n        (0,_models__WEBPACK_IMPORTED_MODULE_9__.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlockBlobClient-upload\", options, async (updatedOptions) => {\n            var _a, _b, _c;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.blockBlobContext.upload(contentLength, body, {\n                abortSignal: options.abortSignal,\n                blobHttpHeaders: options.blobHTTPHeaders,\n                leaseAccessConditions: options.conditions,\n                metadata: options.metadata,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                requestOptions: {\n                    onUploadProgress: options.onProgress,\n                },\n                cpkInfo: options.customerProvidedKey,\n                encryptionScope: options.encryptionScope,\n                immutabilityPolicyExpiry: (_b = options.immutabilityPolicy) === null || _b === void 0 ? void 0 : _b.expiriesOn,\n                immutabilityPolicyMode: (_c = options.immutabilityPolicy) === null || _c === void 0 ? void 0 : _c.policyMode,\n                legalHold: options.legalHold,\n                tier: (0,_models__WEBPACK_IMPORTED_MODULE_9__.toAccessTier)(options.tier),\n                blobTagsString: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.toBlobTagsString)(options.tags),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Creates a new Block Blob where the contents of the blob are read from a given URL.\n     * This API is supported beginning with the 2020-04-08 version. Partial updates\n     * are not supported with Put Blob from URL; the content of an existing blob is overwritten with\n     * the content of the new blob.  To perform partial updates to a block blob’s contents using a\n     * source URL, use {@link stageBlockFromURL} and {@link commitBlockList}.\n     *\n     * @param sourceURL - Specifies the URL of the blob. The value\n     *                           may be a URL of up to 2 KB in length that specifies a blob.\n     *                           The value should be URL-encoded as it would appear\n     *                           in a request URI. The source blob must either be public\n     *                           or must be authenticated via a shared access signature.\n     *                           If the source blob is public, no authentication is required\n     *                           to perform the operation. Here are some examples of source object URLs:\n     *                           - https://myaccount.blob.core.windows.net/mycontainer/myblob\n     *                           - https://myaccount.blob.core.windows.net/mycontainer/myblob?snapshot=<DateTime>\n     * @param options - Optional parameters.\n     */\n    async syncUploadFromURL(sourceURL, options = {}) {\n        options.conditions = options.conditions || {};\n        (0,_models__WEBPACK_IMPORTED_MODULE_9__.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlockBlobClient-syncUploadFromURL\", options, async (updatedOptions) => {\n            var _a, _b, _c, _d, _e, _f;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.blockBlobContext.putBlobFromUrl(0, sourceURL, Object.assign(Object.assign({}, options), { blobHttpHeaders: options.blobHTTPHeaders, leaseAccessConditions: options.conditions, modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }), sourceModifiedAccessConditions: {\n                    sourceIfMatch: (_b = options.sourceConditions) === null || _b === void 0 ? void 0 : _b.ifMatch,\n                    sourceIfModifiedSince: (_c = options.sourceConditions) === null || _c === void 0 ? void 0 : _c.ifModifiedSince,\n                    sourceIfNoneMatch: (_d = options.sourceConditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch,\n                    sourceIfUnmodifiedSince: (_e = options.sourceConditions) === null || _e === void 0 ? void 0 : _e.ifUnmodifiedSince,\n                    sourceIfTags: (_f = options.sourceConditions) === null || _f === void 0 ? void 0 : _f.tagConditions,\n                }, cpkInfo: options.customerProvidedKey, copySourceAuthorization: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.httpAuthorizationToString)(options.sourceAuthorization), tier: (0,_models__WEBPACK_IMPORTED_MODULE_9__.toAccessTier)(options.tier), blobTagsString: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.toBlobTagsString)(options.tags), copySourceTags: options.copySourceTags, tracingOptions: updatedOptions.tracingOptions })));\n        });\n    }\n    /**\n     * Uploads the specified block to the block blob's \"staging area\" to be later\n     * committed by a call to commitBlockList.\n     * @see https://docs.microsoft.com/rest/api/storageservices/put-block\n     *\n     * @param blockId - A 64-byte value that is base64-encoded\n     * @param body - Data to upload to the staging area.\n     * @param contentLength - Number of bytes to upload.\n     * @param options - Options to the Block Blob Stage Block operation.\n     * @returns Response data for the Block Blob Stage Block operation.\n     */\n    async stageBlock(blockId, body, contentLength, options = {}) {\n        (0,_models__WEBPACK_IMPORTED_MODULE_9__.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlockBlobClient-stageBlock\", options, async (updatedOptions) => {\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.blockBlobContext.stageBlock(blockId, contentLength, body, {\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                requestOptions: {\n                    onUploadProgress: options.onProgress,\n                },\n                transactionalContentMD5: options.transactionalContentMD5,\n                transactionalContentCrc64: options.transactionalContentCrc64,\n                cpkInfo: options.customerProvidedKey,\n                encryptionScope: options.encryptionScope,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * The Stage Block From URL operation creates a new block to be committed as part\n     * of a blob where the contents are read from a URL.\n     * This API is available starting in version 2018-03-28.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/put-block-from-url\n     *\n     * @param blockId - A 64-byte value that is base64-encoded\n     * @param sourceURL - Specifies the URL of the blob. The value\n     *                           may be a URL of up to 2 KB in length that specifies a blob.\n     *                           The value should be URL-encoded as it would appear\n     *                           in a request URI. The source blob must either be public\n     *                           or must be authenticated via a shared access signature.\n     *                           If the source blob is public, no authentication is required\n     *                           to perform the operation. Here are some examples of source object URLs:\n     *                           - https://myaccount.blob.core.windows.net/mycontainer/myblob\n     *                           - https://myaccount.blob.core.windows.net/mycontainer/myblob?snapshot=<DateTime>\n     * @param offset - From which position of the blob to download, greater than or equal to 0\n     * @param count - How much data to be downloaded, greater than 0. Will download to the end when undefined\n     * @param options - Options to the Block Blob Stage Block From URL operation.\n     * @returns Response data for the Block Blob Stage Block From URL operation.\n     */\n    async stageBlockFromURL(blockId, sourceURL, offset = 0, count, options = {}) {\n        (0,_models__WEBPACK_IMPORTED_MODULE_9__.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlockBlobClient-stageBlockFromURL\", options, async (updatedOptions) => {\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.blockBlobContext.stageBlockFromURL(blockId, 0, sourceURL, {\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                sourceContentMD5: options.sourceContentMD5,\n                sourceContentCrc64: options.sourceContentCrc64,\n                sourceRange: offset === 0 && !count ? undefined : (0,_Range__WEBPACK_IMPORTED_MODULE_11__.rangeToString)({ offset, count }),\n                cpkInfo: options.customerProvidedKey,\n                encryptionScope: options.encryptionScope,\n                copySourceAuthorization: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.httpAuthorizationToString)(options.sourceAuthorization),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Writes a blob by specifying the list of block IDs that make up the blob.\n     * In order to be written as part of a blob, a block must have been successfully written\n     * to the server in a prior {@link stageBlock} operation. You can call {@link commitBlockList} to\n     * update a blob by uploading only those blocks that have changed, then committing the new and existing\n     * blocks together. Any blocks not specified in the block list and permanently deleted.\n     * @see https://docs.microsoft.com/rest/api/storageservices/put-block-list\n     *\n     * @param blocks -  Array of 64-byte value that is base64-encoded\n     * @param options - Options to the Block Blob Commit Block List operation.\n     * @returns Response data for the Block Blob Commit Block List operation.\n     */\n    async commitBlockList(blocks, options = {}) {\n        options.conditions = options.conditions || {};\n        (0,_models__WEBPACK_IMPORTED_MODULE_9__.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlockBlobClient-commitBlockList\", options, async (updatedOptions) => {\n            var _a, _b, _c;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.blockBlobContext.commitBlockList({ latest: blocks }, {\n                abortSignal: options.abortSignal,\n                blobHttpHeaders: options.blobHTTPHeaders,\n                leaseAccessConditions: options.conditions,\n                metadata: options.metadata,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                cpkInfo: options.customerProvidedKey,\n                encryptionScope: options.encryptionScope,\n                immutabilityPolicyExpiry: (_b = options.immutabilityPolicy) === null || _b === void 0 ? void 0 : _b.expiriesOn,\n                immutabilityPolicyMode: (_c = options.immutabilityPolicy) === null || _c === void 0 ? void 0 : _c.policyMode,\n                legalHold: options.legalHold,\n                tier: (0,_models__WEBPACK_IMPORTED_MODULE_9__.toAccessTier)(options.tier),\n                blobTagsString: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.toBlobTagsString)(options.tags),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Returns the list of blocks that have been uploaded as part of a block blob\n     * using the specified block list filter.\n     * @see https://docs.microsoft.com/rest/api/storageservices/get-block-list\n     *\n     * @param listType - Specifies whether to return the list of committed blocks,\n     *                                        the list of uncommitted blocks, or both lists together.\n     * @param options - Options to the Block Blob Get Block List operation.\n     * @returns Response data for the Block Blob Get Block List operation.\n     */\n    async getBlockList(listType, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlockBlobClient-getBlockList\", options, async (updatedOptions) => {\n            var _a;\n            const res = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.blockBlobContext.getBlockList(listType, {\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n            if (!res.committedBlocks) {\n                res.committedBlocks = [];\n            }\n            if (!res.uncommittedBlocks) {\n                res.uncommittedBlocks = [];\n            }\n            return res;\n        });\n    }\n    // High level functions\n    /**\n     * Uploads a Buffer(Node.js)/Blob(browsers)/ArrayBuffer/ArrayBufferView object to a BlockBlob.\n     *\n     * When data length is no more than the specifiled {@link BlockBlobParallelUploadOptions.maxSingleShotSize} (default is\n     * {@link BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES}), this method will use 1 {@link upload} call to finish the upload.\n     * Otherwise, this method will call {@link stageBlock} to upload blocks, and finally call {@link commitBlockList}\n     * to commit the block list.\n     *\n     * A common {@link BlockBlobParallelUploadOptions.blobHTTPHeaders} option to set is\n     * `blobContentType`, enabling the browser to provide\n     * functionality based on file type.\n     *\n     * @param data - Buffer(Node.js), Blob, ArrayBuffer or ArrayBufferView\n     * @param options -\n     */\n    async uploadData(data, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlockBlobClient-uploadData\", options, async (updatedOptions) => {\n            if (_azure_core_util__WEBPACK_IMPORTED_MODULE_2__.isNode) {\n                let buffer;\n                if (data instanceof Buffer) {\n                    buffer = data;\n                }\n                else if (data instanceof ArrayBuffer) {\n                    buffer = Buffer.from(data);\n                }\n                else {\n                    data = data;\n                    buffer = Buffer.from(data.buffer, data.byteOffset, data.byteLength);\n                }\n                return this.uploadSeekableInternal((offset, size) => buffer.slice(offset, offset + size), buffer.byteLength, updatedOptions);\n            }\n            else {\n                const browserBlob = new Blob([data]);\n                return this.uploadSeekableInternal((offset, size) => browserBlob.slice(offset, offset + size), browserBlob.size, updatedOptions);\n            }\n        });\n    }\n    /**\n     * ONLY AVAILABLE IN BROWSERS.\n     *\n     * Uploads a browser Blob/File/ArrayBuffer/ArrayBufferView object to block blob.\n     *\n     * When buffer length lesser than or equal to 256MB, this method will use 1 upload call to finish the upload.\n     * Otherwise, this method will call {@link stageBlock} to upload blocks, and finally call\n     * {@link commitBlockList} to commit the block list.\n     *\n     * A common {@link BlockBlobParallelUploadOptions.blobHTTPHeaders} option to set is\n     * `blobContentType`, enabling the browser to provide\n     * functionality based on file type.\n     *\n     * @deprecated Use {@link uploadData} instead.\n     *\n     * @param browserData - Blob, File, ArrayBuffer or ArrayBufferView\n     * @param options - Options to upload browser data.\n     * @returns Response data for the Blob Upload operation.\n     */\n    async uploadBrowserData(browserData, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlockBlobClient-uploadBrowserData\", options, async (updatedOptions) => {\n            const browserBlob = new Blob([browserData]);\n            return this.uploadSeekableInternal((offset, size) => browserBlob.slice(offset, offset + size), browserBlob.size, updatedOptions);\n        });\n    }\n    /**\n     *\n     * Uploads data to block blob. Requires a bodyFactory as the data source,\n     * which need to return a {@link HttpRequestBody} object with the offset and size provided.\n     *\n     * When data length is no more than the specified {@link BlockBlobParallelUploadOptions.maxSingleShotSize} (default is\n     * {@link BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES}), this method will use 1 {@link upload} call to finish the upload.\n     * Otherwise, this method will call {@link stageBlock} to upload blocks, and finally call {@link commitBlockList}\n     * to commit the block list.\n     *\n     * @param bodyFactory -\n     * @param size - size of the data to upload.\n     * @param options - Options to Upload to Block Blob operation.\n     * @returns Response data for the Blob Upload operation.\n     */\n    async uploadSeekableInternal(bodyFactory, size, options = {}) {\n        var _a, _b;\n        let blockSize = (_a = options.blockSize) !== null && _a !== void 0 ? _a : 0;\n        if (blockSize < 0 || blockSize > _utils_constants__WEBPACK_IMPORTED_MODULE_8__.BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES) {\n            throw new RangeError(`blockSize option must be >= 0 and <= ${_utils_constants__WEBPACK_IMPORTED_MODULE_8__.BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES}`);\n        }\n        const maxSingleShotSize = (_b = options.maxSingleShotSize) !== null && _b !== void 0 ? _b : _utils_constants__WEBPACK_IMPORTED_MODULE_8__.BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES;\n        if (maxSingleShotSize < 0 || maxSingleShotSize > _utils_constants__WEBPACK_IMPORTED_MODULE_8__.BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES) {\n            throw new RangeError(`maxSingleShotSize option must be >= 0 and <= ${_utils_constants__WEBPACK_IMPORTED_MODULE_8__.BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES}`);\n        }\n        if (blockSize === 0) {\n            if (size > _utils_constants__WEBPACK_IMPORTED_MODULE_8__.BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES * _utils_constants__WEBPACK_IMPORTED_MODULE_8__.BLOCK_BLOB_MAX_BLOCKS) {\n                throw new RangeError(`${size} is too larger to upload to a block blob.`);\n            }\n            if (size > maxSingleShotSize) {\n                blockSize = Math.ceil(size / _utils_constants__WEBPACK_IMPORTED_MODULE_8__.BLOCK_BLOB_MAX_BLOCKS);\n                if (blockSize < _utils_constants__WEBPACK_IMPORTED_MODULE_8__.DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES) {\n                    blockSize = _utils_constants__WEBPACK_IMPORTED_MODULE_8__.DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES;\n                }\n            }\n        }\n        if (!options.blobHTTPHeaders) {\n            options.blobHTTPHeaders = {};\n        }\n        if (!options.conditions) {\n            options.conditions = {};\n        }\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlockBlobClient-uploadSeekableInternal\", options, async (updatedOptions) => {\n            if (size <= maxSingleShotSize) {\n                return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.upload(bodyFactory(0, size), size, updatedOptions));\n            }\n            const numBlocks = Math.floor((size - 1) / blockSize) + 1;\n            if (numBlocks > _utils_constants__WEBPACK_IMPORTED_MODULE_8__.BLOCK_BLOB_MAX_BLOCKS) {\n                throw new RangeError(`The buffer's size is too big or the BlockSize is too small;` +\n                    `the number of blocks must be <= ${_utils_constants__WEBPACK_IMPORTED_MODULE_8__.BLOCK_BLOB_MAX_BLOCKS}`);\n            }\n            const blockList = [];\n            const blockIDPrefix = (0,_azure_core_util__WEBPACK_IMPORTED_MODULE_2__.randomUUID)();\n            let transferProgress = 0;\n            const batch = new _utils_Batch__WEBPACK_IMPORTED_MODULE_15__.Batch(options.concurrency);\n            for (let i = 0; i < numBlocks; i++) {\n                batch.addOperation(async () => {\n                    const blockID = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.generateBlockID)(blockIDPrefix, i);\n                    const start = blockSize * i;\n                    const end = i === numBlocks - 1 ? size : start + blockSize;\n                    const contentLength = end - start;\n                    blockList.push(blockID);\n                    await this.stageBlock(blockID, bodyFactory(start, contentLength), contentLength, {\n                        abortSignal: options.abortSignal,\n                        conditions: options.conditions,\n                        encryptionScope: options.encryptionScope,\n                        tracingOptions: updatedOptions.tracingOptions,\n                    });\n                    // Update progress after block is successfully uploaded to server, in case of block trying\n                    // TODO: Hook with convenience layer progress event in finer level\n                    transferProgress += contentLength;\n                    if (options.onProgress) {\n                        options.onProgress({\n                            loadedBytes: transferProgress,\n                        });\n                    }\n                });\n            }\n            await batch.do();\n            return this.commitBlockList(blockList, updatedOptions);\n        });\n    }\n    /**\n     * ONLY AVAILABLE IN NODE.JS RUNTIME.\n     *\n     * Uploads a local file in blocks to a block blob.\n     *\n     * When file size lesser than or equal to 256MB, this method will use 1 upload call to finish the upload.\n     * Otherwise, this method will call stageBlock to upload blocks, and finally call commitBlockList\n     * to commit the block list.\n     *\n     * @param filePath - Full path of local file\n     * @param options - Options to Upload to Block Blob operation.\n     * @returns Response data for the Blob Upload operation.\n     */\n    async uploadFile(filePath, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlockBlobClient-uploadFile\", options, async (updatedOptions) => {\n            const size = (await (0,_utils_utils_node__WEBPACK_IMPORTED_MODULE_16__.fsStat)(filePath)).size;\n            return this.uploadSeekableInternal((offset, count) => {\n                return () => (0,_utils_utils_node__WEBPACK_IMPORTED_MODULE_16__.fsCreateReadStream)(filePath, {\n                    autoClose: true,\n                    end: count ? offset + count - 1 : Infinity,\n                    start: offset,\n                });\n            }, size, Object.assign(Object.assign({}, options), { tracingOptions: updatedOptions.tracingOptions }));\n        });\n    }\n    /**\n     * ONLY AVAILABLE IN NODE.JS RUNTIME.\n     *\n     * Uploads a Node.js Readable stream into block blob.\n     *\n     * PERFORMANCE IMPROVEMENT TIPS:\n     * * Input stream highWaterMark is better to set a same value with bufferSize\n     *    parameter, which will avoid Buffer.concat() operations.\n     *\n     * @param stream - Node.js Readable stream\n     * @param bufferSize - Size of every buffer allocated, also the block size in the uploaded block blob. Default value is 8MB\n     * @param maxConcurrency -  Max concurrency indicates the max number of buffers that can be allocated,\n     *                                 positive correlation with max uploading concurrency. Default value is 5\n     * @param options - Options to Upload Stream to Block Blob operation.\n     * @returns Response data for the Blob Upload operation.\n     */\n    async uploadStream(stream, bufferSize = _utils_constants__WEBPACK_IMPORTED_MODULE_8__.DEFAULT_BLOCK_BUFFER_SIZE_BYTES, maxConcurrency = 5, options = {}) {\n        if (!options.blobHTTPHeaders) {\n            options.blobHTTPHeaders = {};\n        }\n        if (!options.conditions) {\n            options.conditions = {};\n        }\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlockBlobClient-uploadStream\", options, async (updatedOptions) => {\n            let blockNum = 0;\n            const blockIDPrefix = (0,_azure_core_util__WEBPACK_IMPORTED_MODULE_2__.randomUUID)();\n            let transferProgress = 0;\n            const blockList = [];\n            const scheduler = new _storage_common_src__WEBPACK_IMPORTED_MODULE_19__.BufferScheduler(stream, bufferSize, maxConcurrency, async (body, length) => {\n                const blockID = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.generateBlockID)(blockIDPrefix, blockNum);\n                blockList.push(blockID);\n                blockNum++;\n                await this.stageBlock(blockID, body, length, {\n                    customerProvidedKey: options.customerProvidedKey,\n                    conditions: options.conditions,\n                    encryptionScope: options.encryptionScope,\n                    tracingOptions: updatedOptions.tracingOptions,\n                });\n                // Update progress after block is successfully uploaded to server, in case of block trying\n                transferProgress += length;\n                if (options.onProgress) {\n                    options.onProgress({ loadedBytes: transferProgress });\n                }\n            }, \n            // concurrency should set a smaller value than maxConcurrency, which is helpful to\n            // reduce the possibility when a outgoing handler waits for stream data, in\n            // this situation, outgoing handlers are blocked.\n            // Outgoing queue shouldn't be empty.\n            Math.ceil((maxConcurrency / 4) * 3));\n            await scheduler.do();\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.commitBlockList(blockList, Object.assign(Object.assign({}, options), { tracingOptions: updatedOptions.tracingOptions })));\n        });\n    }\n}\n/**\n * PageBlobClient defines a set of operations applicable to page blobs.\n */\nclass PageBlobClient extends BlobClient {\n    constructor(urlOrConnectionString, credentialOrPipelineOrContainerName, blobNameOrOptions, \n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options) {\n        // In TypeScript we cannot simply pass all parameters to super() like below so have to duplicate the code instead.\n        //   super(s, credentialOrPipelineOrContainerNameOrOptions, blobNameOrOptions, options);\n        let pipeline;\n        let url;\n        options = options || {};\n        if ((0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.isPipelineLike)(credentialOrPipelineOrContainerName)) {\n            // (url: string, pipeline: Pipeline)\n            url = urlOrConnectionString;\n            pipeline = credentialOrPipelineOrContainerName;\n        }\n        else if ((_azure_core_util__WEBPACK_IMPORTED_MODULE_2__.isNode && credentialOrPipelineOrContainerName instanceof _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_5__.StorageSharedKeyCredential) ||\n            credentialOrPipelineOrContainerName instanceof _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__.AnonymousCredential ||\n            (0,_azure_core_auth__WEBPACK_IMPORTED_MODULE_1__.isTokenCredential)(credentialOrPipelineOrContainerName)) {\n            // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n            url = urlOrConnectionString;\n            options = blobNameOrOptions;\n            pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.newPipeline)(credentialOrPipelineOrContainerName, options);\n        }\n        else if (!credentialOrPipelineOrContainerName &&\n            typeof credentialOrPipelineOrContainerName !== \"string\") {\n            // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n            // The second parameter is undefined. Use anonymous credential.\n            url = urlOrConnectionString;\n            pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.newPipeline)(new _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__.AnonymousCredential(), options);\n        }\n        else if (credentialOrPipelineOrContainerName &&\n            typeof credentialOrPipelineOrContainerName === \"string\" &&\n            blobNameOrOptions &&\n            typeof blobNameOrOptions === \"string\") {\n            // (connectionString: string, containerName: string, blobName: string, options?: StoragePipelineOptions)\n            const containerName = credentialOrPipelineOrContainerName;\n            const blobName = blobNameOrOptions;\n            const extractedCreds = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.extractConnectionStringParts)(urlOrConnectionString);\n            if (extractedCreds.kind === \"AccountConnString\") {\n                if (_azure_core_util__WEBPACK_IMPORTED_MODULE_2__.isNode) {\n                    const sharedKeyCredential = new _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_5__.StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);\n                    url = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLPath)((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLPath)(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName));\n                    if (!options.proxyOptions) {\n                        options.proxyOptions = (0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__.getDefaultProxySettings)(extractedCreds.proxyUri);\n                    }\n                    pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.newPipeline)(sharedKeyCredential, options);\n                }\n                else {\n                    throw new Error(\"Account connection string is only supported in Node.js environment\");\n                }\n            }\n            else if (extractedCreds.kind === \"SASConnString\") {\n                url =\n                    (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLPath)((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLPath)(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName)) +\n                        \"?\" +\n                        extractedCreds.accountSas;\n                pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.newPipeline)(new _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__.AnonymousCredential(), options);\n            }\n            else {\n                throw new Error(\"Connection string must be either an Account connection string or a SAS connection string\");\n            }\n        }\n        else {\n            throw new Error(\"Expecting non-empty strings for containerName and blobName parameters\");\n        }\n        super(url, pipeline);\n        this.pageBlobContext = this.storageClientContext.pageBlob;\n    }\n    /**\n     * Creates a new PageBlobClient object identical to the source but with the\n     * specified snapshot timestamp.\n     * Provide \"\" will remove the snapshot and return a Client to the base blob.\n     *\n     * @param snapshot - The snapshot timestamp.\n     * @returns A new PageBlobClient object identical to the source but with the specified snapshot timestamp.\n     */\n    withSnapshot(snapshot) {\n        return new PageBlobClient((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.setURLParameter)(this.url, _utils_constants__WEBPACK_IMPORTED_MODULE_8__.URLConstants.Parameters.SNAPSHOT, snapshot.length === 0 ? undefined : snapshot), this.pipeline);\n    }\n    /**\n     * Creates a page blob of the specified length. Call uploadPages to upload data\n     * data to a page blob.\n     * @see https://docs.microsoft.com/rest/api/storageservices/put-blob\n     *\n     * @param size - size of the page blob.\n     * @param options - Options to the Page Blob Create operation.\n     * @returns Response data for the Page Blob Create operation.\n     */\n    async create(size, options = {}) {\n        options.conditions = options.conditions || {};\n        (0,_models__WEBPACK_IMPORTED_MODULE_9__.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"PageBlobClient-create\", options, async (updatedOptions) => {\n            var _a, _b, _c;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.pageBlobContext.create(0, size, {\n                abortSignal: options.abortSignal,\n                blobHttpHeaders: options.blobHTTPHeaders,\n                blobSequenceNumber: options.blobSequenceNumber,\n                leaseAccessConditions: options.conditions,\n                metadata: options.metadata,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                cpkInfo: options.customerProvidedKey,\n                encryptionScope: options.encryptionScope,\n                immutabilityPolicyExpiry: (_b = options.immutabilityPolicy) === null || _b === void 0 ? void 0 : _b.expiriesOn,\n                immutabilityPolicyMode: (_c = options.immutabilityPolicy) === null || _c === void 0 ? void 0 : _c.policyMode,\n                legalHold: options.legalHold,\n                tier: (0,_models__WEBPACK_IMPORTED_MODULE_9__.toAccessTier)(options.tier),\n                blobTagsString: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.toBlobTagsString)(options.tags),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Creates a page blob of the specified length. Call uploadPages to upload data\n     * data to a page blob. If the blob with the same name already exists, the content\n     * of the existing blob will remain unchanged.\n     * @see https://docs.microsoft.com/rest/api/storageservices/put-blob\n     *\n     * @param size - size of the page blob.\n     * @param options -\n     */\n    async createIfNotExists(size, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"PageBlobClient-createIfNotExists\", options, async (updatedOptions) => {\n            var _a, _b;\n            try {\n                const conditions = { ifNoneMatch: _utils_constants__WEBPACK_IMPORTED_MODULE_8__.ETagAny };\n                const res = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.create(size, Object.assign(Object.assign({}, options), { conditions, tracingOptions: updatedOptions.tracingOptions })));\n                return Object.assign(Object.assign({ succeeded: true }, res), { _response: res._response });\n            }\n            catch (e) {\n                if (((_a = e.details) === null || _a === void 0 ? void 0 : _a.errorCode) === \"BlobAlreadyExists\") {\n                    return Object.assign(Object.assign({ succeeded: false }, (_b = e.response) === null || _b === void 0 ? void 0 : _b.parsedHeaders), { _response: e.response });\n                }\n                throw e;\n            }\n        });\n    }\n    /**\n     * Writes 1 or more pages to the page blob. The start and end offsets must be a multiple of 512.\n     * @see https://docs.microsoft.com/rest/api/storageservices/put-page\n     *\n     * @param body - Data to upload\n     * @param offset - Offset of destination page blob\n     * @param count - Content length of the body, also number of bytes to be uploaded\n     * @param options - Options to the Page Blob Upload Pages operation.\n     * @returns Response data for the Page Blob Upload Pages operation.\n     */\n    async uploadPages(body, offset, count, options = {}) {\n        options.conditions = options.conditions || {};\n        (0,_models__WEBPACK_IMPORTED_MODULE_9__.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"PageBlobClient-uploadPages\", options, async (updatedOptions) => {\n            var _a;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.pageBlobContext.uploadPages(count, body, {\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                requestOptions: {\n                    onUploadProgress: options.onProgress,\n                },\n                range: (0,_Range__WEBPACK_IMPORTED_MODULE_11__.rangeToString)({ offset, count }),\n                sequenceNumberAccessConditions: options.conditions,\n                transactionalContentMD5: options.transactionalContentMD5,\n                transactionalContentCrc64: options.transactionalContentCrc64,\n                cpkInfo: options.customerProvidedKey,\n                encryptionScope: options.encryptionScope,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * The Upload Pages operation writes a range of pages to a page blob where the\n     * contents are read from a URL.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/put-page-from-url\n     *\n     * @param sourceURL - Specify a URL to the copy source, Shared Access Signature(SAS) maybe needed for authentication\n     * @param sourceOffset - The source offset to copy from. Pass 0 to copy from the beginning of source page blob\n     * @param destOffset - Offset of destination page blob\n     * @param count - Number of bytes to be uploaded from source page blob\n     * @param options -\n     */\n    async uploadPagesFromURL(sourceURL, sourceOffset, destOffset, count, options = {}) {\n        options.conditions = options.conditions || {};\n        options.sourceConditions = options.sourceConditions || {};\n        (0,_models__WEBPACK_IMPORTED_MODULE_9__.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"PageBlobClient-uploadPagesFromURL\", options, async (updatedOptions) => {\n            var _a, _b, _c, _d, _e;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.pageBlobContext.uploadPagesFromURL(sourceURL, (0,_Range__WEBPACK_IMPORTED_MODULE_11__.rangeToString)({ offset: sourceOffset, count }), 0, (0,_Range__WEBPACK_IMPORTED_MODULE_11__.rangeToString)({ offset: destOffset, count }), {\n                abortSignal: options.abortSignal,\n                sourceContentMD5: options.sourceContentMD5,\n                sourceContentCrc64: options.sourceContentCrc64,\n                leaseAccessConditions: options.conditions,\n                sequenceNumberAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                sourceModifiedAccessConditions: {\n                    sourceIfMatch: (_b = options.sourceConditions) === null || _b === void 0 ? void 0 : _b.ifMatch,\n                    sourceIfModifiedSince: (_c = options.sourceConditions) === null || _c === void 0 ? void 0 : _c.ifModifiedSince,\n                    sourceIfNoneMatch: (_d = options.sourceConditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch,\n                    sourceIfUnmodifiedSince: (_e = options.sourceConditions) === null || _e === void 0 ? void 0 : _e.ifUnmodifiedSince,\n                },\n                cpkInfo: options.customerProvidedKey,\n                encryptionScope: options.encryptionScope,\n                copySourceAuthorization: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.httpAuthorizationToString)(options.sourceAuthorization),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Frees the specified pages from the page blob.\n     * @see https://docs.microsoft.com/rest/api/storageservices/put-page\n     *\n     * @param offset - Starting byte position of the pages to clear.\n     * @param count - Number of bytes to clear.\n     * @param options - Options to the Page Blob Clear Pages operation.\n     * @returns Response data for the Page Blob Clear Pages operation.\n     */\n    async clearPages(offset = 0, count, options = {}) {\n        options.conditions = options.conditions || {};\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"PageBlobClient-clearPages\", options, async (updatedOptions) => {\n            var _a;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.pageBlobContext.clearPages(0, {\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                range: (0,_Range__WEBPACK_IMPORTED_MODULE_11__.rangeToString)({ offset, count }),\n                sequenceNumberAccessConditions: options.conditions,\n                cpkInfo: options.customerProvidedKey,\n                encryptionScope: options.encryptionScope,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Returns the list of valid page ranges for a page blob or snapshot of a page blob.\n     * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges\n     *\n     * @param offset - Starting byte position of the page ranges.\n     * @param count - Number of bytes to get.\n     * @param options - Options to the Page Blob Get Ranges operation.\n     * @returns Response data for the Page Blob Get Ranges operation.\n     */\n    async getPageRanges(offset = 0, count, options = {}) {\n        options.conditions = options.conditions || {};\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"PageBlobClient-getPageRanges\", options, async (updatedOptions) => {\n            var _a;\n            const response = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.pageBlobContext.getPageRanges({\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                range: (0,_Range__WEBPACK_IMPORTED_MODULE_11__.rangeToString)({ offset, count }),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n            return (0,_PageBlobRangeResponse__WEBPACK_IMPORTED_MODULE_20__.rangeResponseFromModel)(response);\n        });\n    }\n    /**\n     * getPageRangesSegment returns a single segment of page ranges starting from the\n     * specified Marker. Use an empty Marker to start enumeration from the beginning.\n     * After getting a segment, process it, and then call getPageRangesSegment again\n     * (passing the the previously-returned Marker) to get the next segment.\n     * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges\n     *\n     * @param offset - Starting byte position of the page ranges.\n     * @param count - Number of bytes to get.\n     * @param marker - A string value that identifies the portion of the list to be returned with the next list operation.\n     * @param options - Options to PageBlob Get Page Ranges Segment operation.\n     */\n    async listPageRangesSegment(offset = 0, count, marker, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"PageBlobClient-getPageRangesSegment\", options, async (updatedOptions) => {\n            var _a;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.pageBlobContext.getPageRanges({\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                range: (0,_Range__WEBPACK_IMPORTED_MODULE_11__.rangeToString)({ offset, count }),\n                marker: marker,\n                maxPageSize: options.maxPageSize,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Returns an AsyncIterableIterator for {@link PageBlobGetPageRangesResponseModel}\n     *\n     * @param offset - Starting byte position of the page ranges.\n     * @param count - Number of bytes to get.\n     * @param marker - A string value that identifies the portion of\n     *                          the get of page ranges to be returned with the next getting operation. The\n     *                          operation returns the ContinuationToken value within the response body if the\n     *                          getting operation did not return all page ranges remaining within the current page.\n     *                          The ContinuationToken value can be used as the value for\n     *                          the marker parameter in a subsequent call to request the next page of get\n     *                          items. The marker value is opaque to the client.\n     * @param options - Options to List Page Ranges operation.\n     */\n    listPageRangeItemSegments() {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__asyncGenerator)(this, arguments, function* listPageRangeItemSegments_1(offset = 0, count, marker, options = {}) {\n            let getPageRangeItemSegmentsResponse;\n            if (!!marker || marker === undefined) {\n                do {\n                    getPageRangeItemSegmentsResponse = yield (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__await)(this.listPageRangesSegment(offset, count, marker, options));\n                    marker = getPageRangeItemSegmentsResponse.continuationToken;\n                    yield yield (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__await)(yield (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__await)(getPageRangeItemSegmentsResponse));\n                } while (marker);\n            }\n        });\n    }\n    /**\n     * Returns an AsyncIterableIterator of {@link PageRangeInfo} objects\n     *\n     * @param offset - Starting byte position of the page ranges.\n     * @param count - Number of bytes to get.\n     * @param options - Options to List Page Ranges operation.\n     */\n    listPageRangeItems() {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__asyncGenerator)(this, arguments, function* listPageRangeItems_1(offset = 0, count, options = {}) {\n            var _a, e_1, _b, _c;\n            let marker;\n            try {\n                for (var _d = true, _e = (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__asyncValues)(this.listPageRangeItemSegments(offset, count, marker, options)), _f; _f = yield (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__await)(_e.next()), _a = _f.done, !_a; _d = true) {\n                    _c = _f.value;\n                    _d = false;\n                    const getPageRangesSegment = _c;\n                    yield (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__await)(yield* (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__asyncDelegator)((0,tslib__WEBPACK_IMPORTED_MODULE_21__.__asyncValues)((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.ExtractPageRangeInfoItems)(getPageRangesSegment))));\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (!_d && !_a && (_b = _e.return)) yield (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__await)(_b.call(_e));\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n        });\n    }\n    /**\n     * Returns an async iterable iterator to list of page ranges for a page blob.\n     * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges\n     *\n     *  .byPage() returns an async iterable iterator to list of page ranges for a page blob.\n     *\n     * Example using `for await` syntax:\n     *\n     * ```js\n     * // Get the pageBlobClient before you run these snippets,\n     * // Can be obtained from `blobServiceClient.getContainerClient(\"<your-container-name>\").getPageBlobClient(\"<your-blob-name>\");`\n     * let i = 1;\n     * for await (const pageRange of pageBlobClient.listPageRanges()) {\n     *   console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);\n     * }\n     * ```\n     *\n     * Example using `iter.next()`:\n     *\n     * ```js\n     * let i = 1;\n     * let iter = pageBlobClient.listPageRanges();\n     * let pageRangeItem = await iter.next();\n     * while (!pageRangeItem.done) {\n     *   console.log(`Page range ${i++}: ${pageRangeItem.value.start} - ${pageRangeItem.value.end}, IsClear: ${pageRangeItem.value.isClear}`);\n     *   pageRangeItem = await iter.next();\n     * }\n     * ```\n     *\n     * Example using `byPage()`:\n     *\n     * ```js\n     * // passing optional maxPageSize in the page settings\n     * let i = 1;\n     * for await (const response of pageBlobClient.listPageRanges().byPage({ maxPageSize: 20 })) {\n     *   for (const pageRange of response) {\n     *     console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);\n     *   }\n     * }\n     * ```\n     *\n     * Example using paging with a marker:\n     *\n     * ```js\n     * let i = 1;\n     * let iterator = pageBlobClient.listPageRanges().byPage({ maxPageSize: 2 });\n     * let response = (await iterator.next()).value;\n     *\n     * // Prints 2 page ranges\n     * for (const pageRange of response) {\n     *   console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);\n     * }\n     *\n     * // Gets next marker\n     * let marker = response.continuationToken;\n     *\n     * // Passing next marker as continuationToken\n     *\n     * iterator = pageBlobClient.listPageRanges().byPage({ continuationToken: marker, maxPageSize: 10 });\n     * response = (await iterator.next()).value;\n     *\n     * // Prints 10 page ranges\n     * for (const blob of response) {\n     *   console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);\n     * }\n     * ```\n     * @param offset - Starting byte position of the page ranges.\n     * @param count - Number of bytes to get.\n     * @param options - Options to the Page Blob Get Ranges operation.\n     * @returns An asyncIterableIterator that supports paging.\n     */\n    listPageRanges(offset = 0, count, options = {}) {\n        options.conditions = options.conditions || {};\n        // AsyncIterableIterator to iterate over blobs\n        const iter = this.listPageRangeItems(offset, count, options);\n        return {\n            /**\n             * The next method, part of the iteration protocol\n             */\n            next() {\n                return iter.next();\n            },\n            /**\n             * The connection to the async iterator, part of the iteration protocol\n             */\n            [Symbol.asyncIterator]() {\n                return this;\n            },\n            /**\n             * Return an AsyncIterableIterator that works a page at a time\n             */\n            byPage: (settings = {}) => {\n                return this.listPageRangeItemSegments(offset, count, settings.continuationToken, Object.assign({ maxPageSize: settings.maxPageSize }, options));\n            },\n        };\n    }\n    /**\n     * Gets the collection of page ranges that differ between a specified snapshot and this page blob.\n     * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges\n     *\n     * @param offset - Starting byte position of the page blob\n     * @param count - Number of bytes to get ranges diff.\n     * @param prevSnapshot - Timestamp of snapshot to retrieve the difference.\n     * @param options - Options to the Page Blob Get Page Ranges Diff operation.\n     * @returns Response data for the Page Blob Get Page Range Diff operation.\n     */\n    async getPageRangesDiff(offset, count, prevSnapshot, options = {}) {\n        options.conditions = options.conditions || {};\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"PageBlobClient-getPageRangesDiff\", options, async (updatedOptions) => {\n            var _a;\n            const result = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.pageBlobContext.getPageRangesDiff({\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                prevsnapshot: prevSnapshot,\n                range: (0,_Range__WEBPACK_IMPORTED_MODULE_11__.rangeToString)({ offset, count }),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n            return (0,_PageBlobRangeResponse__WEBPACK_IMPORTED_MODULE_20__.rangeResponseFromModel)(result);\n        });\n    }\n    /**\n     * getPageRangesDiffSegment returns a single segment of page ranges starting from the\n     * specified Marker for difference between previous snapshot and the target page blob.\n     * Use an empty Marker to start enumeration from the beginning.\n     * After getting a segment, process it, and then call getPageRangesDiffSegment again\n     * (passing the the previously-returned Marker) to get the next segment.\n     * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges\n     *\n     * @param offset - Starting byte position of the page ranges.\n     * @param count - Number of bytes to get.\n     * @param prevSnapshotOrUrl - Timestamp of snapshot to retrieve the difference or URL of snapshot to retrieve the difference.\n     * @param marker - A string value that identifies the portion of the get to be returned with the next get operation.\n     * @param options - Options to the Page Blob Get Page Ranges Diff operation.\n     */\n    async listPageRangesDiffSegment(offset, count, prevSnapshotOrUrl, marker, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"PageBlobClient-getPageRangesDiffSegment\", options, async (updatedOptions) => {\n            var _a;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.pageBlobContext.getPageRangesDiff({\n                abortSignal: options === null || options === void 0 ? void 0 : options.abortSignal,\n                leaseAccessConditions: options === null || options === void 0 ? void 0 : options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options === null || options === void 0 ? void 0 : options.conditions), { ifTags: (_a = options === null || options === void 0 ? void 0 : options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                prevsnapshot: prevSnapshotOrUrl,\n                range: (0,_Range__WEBPACK_IMPORTED_MODULE_11__.rangeToString)({\n                    offset: offset,\n                    count: count,\n                }),\n                marker: marker,\n                maxPageSize: options === null || options === void 0 ? void 0 : options.maxPageSize,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Returns an AsyncIterableIterator for {@link PageBlobGetPageRangesDiffResponseModel}\n     *\n     *\n     * @param offset - Starting byte position of the page ranges.\n     * @param count - Number of bytes to get.\n     * @param prevSnapshotOrUrl - Timestamp of snapshot to retrieve the difference or URL of snapshot to retrieve the difference.\n     * @param marker - A string value that identifies the portion of\n     *                          the get of page ranges to be returned with the next getting operation. The\n     *                          operation returns the ContinuationToken value within the response body if the\n     *                          getting operation did not return all page ranges remaining within the current page.\n     *                          The ContinuationToken value can be used as the value for\n     *                          the marker parameter in a subsequent call to request the next page of get\n     *                          items. The marker value is opaque to the client.\n     * @param options - Options to the Page Blob Get Page Ranges Diff operation.\n     */\n    listPageRangeDiffItemSegments(offset, count, prevSnapshotOrUrl, marker, options) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__asyncGenerator)(this, arguments, function* listPageRangeDiffItemSegments_1() {\n            let getPageRangeItemSegmentsResponse;\n            if (!!marker || marker === undefined) {\n                do {\n                    getPageRangeItemSegmentsResponse = yield (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__await)(this.listPageRangesDiffSegment(offset, count, prevSnapshotOrUrl, marker, options));\n                    marker = getPageRangeItemSegmentsResponse.continuationToken;\n                    yield yield (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__await)(yield (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__await)(getPageRangeItemSegmentsResponse));\n                } while (marker);\n            }\n        });\n    }\n    /**\n     * Returns an AsyncIterableIterator of {@link PageRangeInfo} objects\n     *\n     * @param offset - Starting byte position of the page ranges.\n     * @param count - Number of bytes to get.\n     * @param prevSnapshotOrUrl - Timestamp of snapshot to retrieve the difference or URL of snapshot to retrieve the difference.\n     * @param options - Options to the Page Blob Get Page Ranges Diff operation.\n     */\n    listPageRangeDiffItems(offset, count, prevSnapshotOrUrl, options) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__asyncGenerator)(this, arguments, function* listPageRangeDiffItems_1() {\n            var _a, e_2, _b, _c;\n            let marker;\n            try {\n                for (var _d = true, _e = (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__asyncValues)(this.listPageRangeDiffItemSegments(offset, count, prevSnapshotOrUrl, marker, options)), _f; _f = yield (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__await)(_e.next()), _a = _f.done, !_a; _d = true) {\n                    _c = _f.value;\n                    _d = false;\n                    const getPageRangesSegment = _c;\n                    yield (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__await)(yield* (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__asyncDelegator)((0,tslib__WEBPACK_IMPORTED_MODULE_21__.__asyncValues)((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.ExtractPageRangeInfoItems)(getPageRangesSegment))));\n                }\n            }\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n            finally {\n                try {\n                    if (!_d && !_a && (_b = _e.return)) yield (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__await)(_b.call(_e));\n                }\n                finally { if (e_2) throw e_2.error; }\n            }\n        });\n    }\n    /**\n     * Returns an async iterable iterator to list of page ranges that differ between a specified snapshot and this page blob.\n     * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges\n     *\n     *  .byPage() returns an async iterable iterator to list of page ranges that differ between a specified snapshot and this page blob.\n     *\n     * Example using `for await` syntax:\n     *\n     * ```js\n     * // Get the pageBlobClient before you run these snippets,\n     * // Can be obtained from `blobServiceClient.getContainerClient(\"<your-container-name>\").getPageBlobClient(\"<your-blob-name>\");`\n     * let i = 1;\n     * for await (const pageRange of pageBlobClient.listPageRangesDiff()) {\n     *   console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);\n     * }\n     * ```\n     *\n     * Example using `iter.next()`:\n     *\n     * ```js\n     * let i = 1;\n     * let iter = pageBlobClient.listPageRangesDiff();\n     * let pageRangeItem = await iter.next();\n     * while (!pageRangeItem.done) {\n     *   console.log(`Page range ${i++}: ${pageRangeItem.value.start} - ${pageRangeItem.value.end}, IsClear: ${pageRangeItem.value.isClear}`);\n     *   pageRangeItem = await iter.next();\n     * }\n     * ```\n     *\n     * Example using `byPage()`:\n     *\n     * ```js\n     * // passing optional maxPageSize in the page settings\n     * let i = 1;\n     * for await (const response of pageBlobClient.listPageRangesDiff().byPage({ maxPageSize: 20 })) {\n     *   for (const pageRange of response) {\n     *     console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);\n     *   }\n     * }\n     * ```\n     *\n     * Example using paging with a marker:\n     *\n     * ```js\n     * let i = 1;\n     * let iterator = pageBlobClient.listPageRangesDiff().byPage({ maxPageSize: 2 });\n     * let response = (await iterator.next()).value;\n     *\n     * // Prints 2 page ranges\n     * for (const pageRange of response) {\n     *   console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);\n     * }\n     *\n     * // Gets next marker\n     * let marker = response.continuationToken;\n     *\n     * // Passing next marker as continuationToken\n     *\n     * iterator = pageBlobClient.listPageRangesDiff().byPage({ continuationToken: marker, maxPageSize: 10 });\n     * response = (await iterator.next()).value;\n     *\n     * // Prints 10 page ranges\n     * for (const blob of response) {\n     *   console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);\n     * }\n     * ```\n     * @param offset - Starting byte position of the page ranges.\n     * @param count - Number of bytes to get.\n     * @param prevSnapshot - Timestamp of snapshot to retrieve the difference.\n     * @param options - Options to the Page Blob Get Ranges operation.\n     * @returns An asyncIterableIterator that supports paging.\n     */\n    listPageRangesDiff(offset, count, prevSnapshot, options = {}) {\n        options.conditions = options.conditions || {};\n        // AsyncIterableIterator to iterate over blobs\n        const iter = this.listPageRangeDiffItems(offset, count, prevSnapshot, Object.assign({}, options));\n        return {\n            /**\n             * The next method, part of the iteration protocol\n             */\n            next() {\n                return iter.next();\n            },\n            /**\n             * The connection to the async iterator, part of the iteration protocol\n             */\n            [Symbol.asyncIterator]() {\n                return this;\n            },\n            /**\n             * Return an AsyncIterableIterator that works a page at a time\n             */\n            byPage: (settings = {}) => {\n                return this.listPageRangeDiffItemSegments(offset, count, prevSnapshot, settings.continuationToken, Object.assign({ maxPageSize: settings.maxPageSize }, options));\n            },\n        };\n    }\n    /**\n     * Gets the collection of page ranges that differ between a specified snapshot and this page blob for managed disks.\n     * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges\n     *\n     * @param offset - Starting byte position of the page blob\n     * @param count - Number of bytes to get ranges diff.\n     * @param prevSnapshotUrl - URL of snapshot to retrieve the difference.\n     * @param options - Options to the Page Blob Get Page Ranges Diff operation.\n     * @returns Response data for the Page Blob Get Page Range Diff operation.\n     */\n    async getPageRangesDiffForManagedDisks(offset, count, prevSnapshotUrl, options = {}) {\n        options.conditions = options.conditions || {};\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"PageBlobClient-GetPageRangesDiffForManagedDisks\", options, async (updatedOptions) => {\n            var _a;\n            const response = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.pageBlobContext.getPageRangesDiff({\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                prevSnapshotUrl,\n                range: (0,_Range__WEBPACK_IMPORTED_MODULE_11__.rangeToString)({ offset, count }),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n            return (0,_PageBlobRangeResponse__WEBPACK_IMPORTED_MODULE_20__.rangeResponseFromModel)(response);\n        });\n    }\n    /**\n     * Resizes the page blob to the specified size (which must be a multiple of 512).\n     * @see https://docs.microsoft.com/rest/api/storageservices/set-blob-properties\n     *\n     * @param size - Target size\n     * @param options - Options to the Page Blob Resize operation.\n     * @returns Response data for the Page Blob Resize operation.\n     */\n    async resize(size, options = {}) {\n        options.conditions = options.conditions || {};\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"PageBlobClient-resize\", options, async (updatedOptions) => {\n            var _a;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.pageBlobContext.resize(size, {\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                encryptionScope: options.encryptionScope,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Sets a page blob's sequence number.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-properties\n     *\n     * @param sequenceNumberAction - Indicates how the service should modify the blob's sequence number.\n     * @param sequenceNumber - Required if sequenceNumberAction is max or update\n     * @param options - Options to the Page Blob Update Sequence Number operation.\n     * @returns Response data for the Page Blob Update Sequence Number operation.\n     */\n    async updateSequenceNumber(sequenceNumberAction, sequenceNumber, options = {}) {\n        options.conditions = options.conditions || {};\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"PageBlobClient-updateSequenceNumber\", options, async (updatedOptions) => {\n            var _a;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.pageBlobContext.updateSequenceNumber(sequenceNumberAction, {\n                abortSignal: options.abortSignal,\n                blobSequenceNumber: sequenceNumber,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Begins an operation to start an incremental copy from one page blob's snapshot to this page blob.\n     * The snapshot is copied such that only the differential changes between the previously\n     * copied snapshot are transferred to the destination.\n     * The copied snapshots are complete copies of the original snapshot and can be read or copied from as usual.\n     * @see https://docs.microsoft.com/rest/api/storageservices/incremental-copy-blob\n     * @see https://docs.microsoft.com/en-us/azure/virtual-machines/windows/incremental-snapshots\n     *\n     * @param copySource - Specifies the name of the source page blob snapshot. For example,\n     *                            https://myaccount.blob.core.windows.net/mycontainer/myblob?snapshot=<DateTime>\n     * @param options - Options to the Page Blob Copy Incremental operation.\n     * @returns Response data for the Page Blob Copy Incremental operation.\n     */\n    async startCopyIncremental(copySource, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"PageBlobClient-startCopyIncremental\", options, async (updatedOptions) => {\n            var _a;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.pageBlobContext.copyIncremental(copySource, {\n                abortSignal: options.abortSignal,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n}\n//# sourceMappingURL=Clients.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Clients.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/ContainerClient.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/ContainerClient.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ContainerClient: () => (/* binding */ ContainerClient)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-rest-pipeline */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/index.js\");\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/core-util */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/index.js\");\n/* harmony import */ var _azure_core_auth__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @azure/core-auth */ \"(rsc)/./node_modules/@azure/core-auth/dist/esm/index.js\");\n/* harmony import */ var _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./credentials/AnonymousCredential */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/AnonymousCredential.js\");\n/* harmony import */ var _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./credentials/StorageSharedKeyCredential */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/StorageSharedKeyCredential.js\");\n/* harmony import */ var _Pipeline__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Pipeline */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Pipeline.js\");\n/* harmony import */ var _StorageClient__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./StorageClient */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageClient.js\");\n/* harmony import */ var _utils_tracing__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils/tracing */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/tracing.js\");\n/* harmony import */ var _utils_utils_common__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils/utils.common */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js\");\n/* harmony import */ var _sas_BlobSASSignatureValues__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./sas/BlobSASSignatureValues */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/BlobSASSignatureValues.js\");\n/* harmony import */ var _BlobLeaseClient__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./BlobLeaseClient */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobLeaseClient.js\");\n/* harmony import */ var _Clients__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Clients */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Clients.js\");\n/* harmony import */ var _BlobBatchClient__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./BlobBatchClient */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobBatchClient.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * A ContainerClient represents a URL to the Azure Storage container allowing you to manipulate its blobs.\n */\nclass ContainerClient extends _StorageClient__WEBPACK_IMPORTED_MODULE_3__.StorageClient {\n    /**\n     * The name of the container.\n     */\n    get containerName() {\n        return this._containerName;\n    }\n    constructor(urlOrConnectionString, credentialOrPipelineOrContainerName, \n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options) {\n        let pipeline;\n        let url;\n        options = options || {};\n        if ((0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.isPipelineLike)(credentialOrPipelineOrContainerName)) {\n            // (url: string, pipeline: Pipeline)\n            url = urlOrConnectionString;\n            pipeline = credentialOrPipelineOrContainerName;\n        }\n        else if ((_azure_core_util__WEBPACK_IMPORTED_MODULE_1__.isNode && credentialOrPipelineOrContainerName instanceof _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_5__.StorageSharedKeyCredential) ||\n            credentialOrPipelineOrContainerName instanceof _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__.AnonymousCredential ||\n            (0,_azure_core_auth__WEBPACK_IMPORTED_MODULE_2__.isTokenCredential)(credentialOrPipelineOrContainerName)) {\n            // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n            url = urlOrConnectionString;\n            pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.newPipeline)(credentialOrPipelineOrContainerName, options);\n        }\n        else if (!credentialOrPipelineOrContainerName &&\n            typeof credentialOrPipelineOrContainerName !== \"string\") {\n            // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n            // The second parameter is undefined. Use anonymous credential.\n            url = urlOrConnectionString;\n            pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.newPipeline)(new _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__.AnonymousCredential(), options);\n        }\n        else if (credentialOrPipelineOrContainerName &&\n            typeof credentialOrPipelineOrContainerName === \"string\") {\n            // (connectionString: string, containerName: string, blobName: string, options?: StoragePipelineOptions)\n            const containerName = credentialOrPipelineOrContainerName;\n            const extractedCreds = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.extractConnectionStringParts)(urlOrConnectionString);\n            if (extractedCreds.kind === \"AccountConnString\") {\n                if (_azure_core_util__WEBPACK_IMPORTED_MODULE_1__.isNode) {\n                    const sharedKeyCredential = new _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_5__.StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);\n                    url = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLPath)(extractedCreds.url, encodeURIComponent(containerName));\n                    if (!options.proxyOptions) {\n                        options.proxyOptions = (0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__.getDefaultProxySettings)(extractedCreds.proxyUri);\n                    }\n                    pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.newPipeline)(sharedKeyCredential, options);\n                }\n                else {\n                    throw new Error(\"Account connection string is only supported in Node.js environment\");\n                }\n            }\n            else if (extractedCreds.kind === \"SASConnString\") {\n                url =\n                    (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLPath)(extractedCreds.url, encodeURIComponent(containerName)) +\n                        \"?\" +\n                        extractedCreds.accountSas;\n                pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.newPipeline)(new _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__.AnonymousCredential(), options);\n            }\n            else {\n                throw new Error(\"Connection string must be either an Account connection string or a SAS connection string\");\n            }\n        }\n        else {\n            throw new Error(\"Expecting non-empty strings for containerName parameter\");\n        }\n        super(url, pipeline);\n        this._containerName = this.getContainerNameFromUrl();\n        this.containerContext = this.storageClientContext.container;\n    }\n    /**\n     * Creates a new container under the specified account. If the container with\n     * the same name already exists, the operation fails.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-container\n     * Naming rules: @see https://learn.microsoft.com/rest/api/storageservices/naming-and-referencing-containers--blobs--and-metadata\n     *\n     * @param options - Options to Container Create operation.\n     *\n     *\n     * Example usage:\n     *\n     * ```js\n     * const containerClient = blobServiceClient.getContainerClient(\"<container name>\");\n     * const createContainerResponse = await containerClient.create();\n     * console.log(\"Container was created successfully\", createContainerResponse.requestId);\n     * ```\n     */\n    async create(options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_8__.tracingClient.withSpan(\"ContainerClient-create\", options, async (updatedOptions) => {\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.containerContext.create(updatedOptions));\n        });\n    }\n    /**\n     * Creates a new container under the specified account. If the container with\n     * the same name already exists, it is not changed.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-container\n     * Naming rules: @see https://learn.microsoft.com/rest/api/storageservices/naming-and-referencing-containers--blobs--and-metadata\n     *\n     * @param options -\n     */\n    async createIfNotExists(options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_8__.tracingClient.withSpan(\"ContainerClient-createIfNotExists\", options, async (updatedOptions) => {\n            var _a, _b;\n            try {\n                const res = await this.create(updatedOptions);\n                return Object.assign(Object.assign({ succeeded: true }, res), { _response: res._response });\n            }\n            catch (e) {\n                if (((_a = e.details) === null || _a === void 0 ? void 0 : _a.errorCode) === \"ContainerAlreadyExists\") {\n                    return Object.assign(Object.assign({ succeeded: false }, (_b = e.response) === null || _b === void 0 ? void 0 : _b.parsedHeaders), { _response: e.response });\n                }\n                else {\n                    throw e;\n                }\n            }\n        });\n    }\n    /**\n     * Returns true if the Azure container resource represented by this client exists; false otherwise.\n     *\n     * NOTE: use this function with care since an existing container might be deleted by other clients or\n     * applications. Vice versa new containers with the same name might be added by other clients or\n     * applications after this function completes.\n     *\n     * @param options -\n     */\n    async exists(options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_8__.tracingClient.withSpan(\"ContainerClient-exists\", options, async (updatedOptions) => {\n            try {\n                await this.getProperties({\n                    abortSignal: options.abortSignal,\n                    tracingOptions: updatedOptions.tracingOptions,\n                });\n                return true;\n            }\n            catch (e) {\n                if (e.statusCode === 404) {\n                    return false;\n                }\n                throw e;\n            }\n        });\n    }\n    /**\n     * Creates a {@link BlobClient}\n     *\n     * @param blobName - A blob name\n     * @returns A new BlobClient object for the given blob name.\n     */\n    getBlobClient(blobName) {\n        return new _Clients__WEBPACK_IMPORTED_MODULE_9__.BlobClient((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLPath)(this.url, (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.EscapePath)(blobName)), this.pipeline);\n    }\n    /**\n     * Creates an {@link AppendBlobClient}\n     *\n     * @param blobName - An append blob name\n     */\n    getAppendBlobClient(blobName) {\n        return new _Clients__WEBPACK_IMPORTED_MODULE_9__.AppendBlobClient((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLPath)(this.url, (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.EscapePath)(blobName)), this.pipeline);\n    }\n    /**\n     * Creates a {@link BlockBlobClient}\n     *\n     * @param blobName - A block blob name\n     *\n     *\n     * Example usage:\n     *\n     * ```js\n     * const content = \"Hello world!\";\n     *\n     * const blockBlobClient = containerClient.getBlockBlobClient(\"<blob name>\");\n     * const uploadBlobResponse = await blockBlobClient.upload(content, content.length);\n     * ```\n     */\n    getBlockBlobClient(blobName) {\n        return new _Clients__WEBPACK_IMPORTED_MODULE_9__.BlockBlobClient((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLPath)(this.url, (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.EscapePath)(blobName)), this.pipeline);\n    }\n    /**\n     * Creates a {@link PageBlobClient}\n     *\n     * @param blobName - A page blob name\n     */\n    getPageBlobClient(blobName) {\n        return new _Clients__WEBPACK_IMPORTED_MODULE_9__.PageBlobClient((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLPath)(this.url, (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.EscapePath)(blobName)), this.pipeline);\n    }\n    /**\n     * Returns all user-defined metadata and system properties for the specified\n     * container. The data returned does not include the container's list of blobs.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-container-properties\n     *\n     * WARNING: The `metadata` object returned in the response will have its keys in lowercase, even if\n     * they originally contained uppercase characters. This differs from the metadata keys returned by\n     * the `listContainers` method of {@link BlobServiceClient} using the `includeMetadata` option, which\n     * will retain their original casing.\n     *\n     * @param options - Options to Container Get Properties operation.\n     */\n    async getProperties(options = {}) {\n        if (!options.conditions) {\n            options.conditions = {};\n        }\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_8__.tracingClient.withSpan(\"ContainerClient-getProperties\", options, async (updatedOptions) => {\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.containerContext.getProperties(Object.assign(Object.assign({ abortSignal: options.abortSignal }, options.conditions), { tracingOptions: updatedOptions.tracingOptions })));\n        });\n    }\n    /**\n     * Marks the specified container for deletion. The container and any blobs\n     * contained within it are later deleted during garbage collection.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-container\n     *\n     * @param options - Options to Container Delete operation.\n     */\n    async delete(options = {}) {\n        if (!options.conditions) {\n            options.conditions = {};\n        }\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_8__.tracingClient.withSpan(\"ContainerClient-delete\", options, async (updatedOptions) => {\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.containerContext.delete({\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: options.conditions,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Marks the specified container for deletion if it exists. The container and any blobs\n     * contained within it are later deleted during garbage collection.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-container\n     *\n     * @param options - Options to Container Delete operation.\n     */\n    async deleteIfExists(options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_8__.tracingClient.withSpan(\"ContainerClient-deleteIfExists\", options, async (updatedOptions) => {\n            var _a, _b;\n            try {\n                const res = await this.delete(updatedOptions);\n                return Object.assign(Object.assign({ succeeded: true }, res), { _response: res._response });\n            }\n            catch (e) {\n                if (((_a = e.details) === null || _a === void 0 ? void 0 : _a.errorCode) === \"ContainerNotFound\") {\n                    return Object.assign(Object.assign({ succeeded: false }, (_b = e.response) === null || _b === void 0 ? void 0 : _b.parsedHeaders), { _response: e.response });\n                }\n                throw e;\n            }\n        });\n    }\n    /**\n     * Sets one or more user-defined name-value pairs for the specified container.\n     *\n     * If no option provided, or no metadata defined in the parameter, the container\n     * metadata will be removed.\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-container-metadata\n     *\n     * @param metadata - Replace existing metadata with this value.\n     *                            If no value provided the existing metadata will be removed.\n     * @param options - Options to Container Set Metadata operation.\n     */\n    async setMetadata(metadata, options = {}) {\n        if (!options.conditions) {\n            options.conditions = {};\n        }\n        if (options.conditions.ifUnmodifiedSince) {\n            throw new RangeError(\"the IfUnmodifiedSince must have their default values because they are ignored by the blob service\");\n        }\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_8__.tracingClient.withSpan(\"ContainerClient-setMetadata\", options, async (updatedOptions) => {\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.containerContext.setMetadata({\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                metadata,\n                modifiedAccessConditions: options.conditions,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Gets the permissions for the specified container. The permissions indicate\n     * whether container data may be accessed publicly.\n     *\n     * WARNING: JavaScript Date will potentially lose precision when parsing startsOn and expiresOn strings.\n     * For example, new Date(\"2018-12-31T03:44:23.8827891Z\").toISOString() will get \"2018-12-31T03:44:23.882Z\".\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-container-acl\n     *\n     * @param options - Options to Container Get Access Policy operation.\n     */\n    async getAccessPolicy(options = {}) {\n        if (!options.conditions) {\n            options.conditions = {};\n        }\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_8__.tracingClient.withSpan(\"ContainerClient-getAccessPolicy\", options, async (updatedOptions) => {\n            const response = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.containerContext.getAccessPolicy({\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n            const res = {\n                _response: response._response,\n                blobPublicAccess: response.blobPublicAccess,\n                date: response.date,\n                etag: response.etag,\n                errorCode: response.errorCode,\n                lastModified: response.lastModified,\n                requestId: response.requestId,\n                clientRequestId: response.clientRequestId,\n                signedIdentifiers: [],\n                version: response.version,\n            };\n            for (const identifier of response) {\n                let accessPolicy = undefined;\n                if (identifier.accessPolicy) {\n                    accessPolicy = {\n                        permissions: identifier.accessPolicy.permissions,\n                    };\n                    if (identifier.accessPolicy.expiresOn) {\n                        accessPolicy.expiresOn = new Date(identifier.accessPolicy.expiresOn);\n                    }\n                    if (identifier.accessPolicy.startsOn) {\n                        accessPolicy.startsOn = new Date(identifier.accessPolicy.startsOn);\n                    }\n                }\n                res.signedIdentifiers.push({\n                    accessPolicy,\n                    id: identifier.id,\n                });\n            }\n            return res;\n        });\n    }\n    /**\n     * Sets the permissions for the specified container. The permissions indicate\n     * whether blobs in a container may be accessed publicly.\n     *\n     * When you set permissions for a container, the existing permissions are replaced.\n     * If no access or containerAcl provided, the existing container ACL will be\n     * removed.\n     *\n     * When you establish a stored access policy on a container, it may take up to 30 seconds to take effect.\n     * During this interval, a shared access signature that is associated with the stored access policy will\n     * fail with status code 403 (Forbidden), until the access policy becomes active.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-container-acl\n     *\n     * @param access - The level of public access to data in the container.\n     * @param containerAcl - Array of elements each having a unique Id and details of the access policy.\n     * @param options - Options to Container Set Access Policy operation.\n     */\n    async setAccessPolicy(access, containerAcl, options = {}) {\n        options.conditions = options.conditions || {};\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_8__.tracingClient.withSpan(\"ContainerClient-setAccessPolicy\", options, async (updatedOptions) => {\n            const acl = [];\n            for (const identifier of containerAcl || []) {\n                acl.push({\n                    accessPolicy: {\n                        expiresOn: identifier.accessPolicy.expiresOn\n                            ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.truncatedISO8061Date)(identifier.accessPolicy.expiresOn)\n                            : \"\",\n                        permissions: identifier.accessPolicy.permissions,\n                        startsOn: identifier.accessPolicy.startsOn\n                            ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.truncatedISO8061Date)(identifier.accessPolicy.startsOn)\n                            : \"\",\n                    },\n                    id: identifier.id,\n                });\n            }\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.containerContext.setAccessPolicy({\n                abortSignal: options.abortSignal,\n                access,\n                containerAcl: acl,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: options.conditions,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Get a {@link BlobLeaseClient} that manages leases on the container.\n     *\n     * @param proposeLeaseId - Initial proposed lease Id.\n     * @returns A new BlobLeaseClient object for managing leases on the container.\n     */\n    getBlobLeaseClient(proposeLeaseId) {\n        return new _BlobLeaseClient__WEBPACK_IMPORTED_MODULE_10__.BlobLeaseClient(this, proposeLeaseId);\n    }\n    /**\n     * Creates a new block blob, or updates the content of an existing block blob.\n     *\n     * Updating an existing block blob overwrites any existing metadata on the blob.\n     * Partial updates are not supported; the content of the existing blob is\n     * overwritten with the new content. To perform a partial update of a block blob's,\n     * use {@link BlockBlobClient.stageBlock} and {@link BlockBlobClient.commitBlockList}.\n     *\n     * This is a non-parallel uploading method, please use {@link BlockBlobClient.uploadFile},\n     * {@link BlockBlobClient.uploadStream} or {@link BlockBlobClient.uploadBrowserData} for better\n     * performance with concurrency uploading.\n     *\n     * @see https://docs.microsoft.com/rest/api/storageservices/put-blob\n     *\n     * @param blobName - Name of the block blob to create or update.\n     * @param body - Blob, string, ArrayBuffer, ArrayBufferView or a function\n     *                               which returns a new Readable stream whose offset is from data source beginning.\n     * @param contentLength - Length of body in bytes. Use Buffer.byteLength() to calculate body length for a\n     *                               string including non non-Base64/Hex-encoded characters.\n     * @param options - Options to configure the Block Blob Upload operation.\n     * @returns Block Blob upload response data and the corresponding BlockBlobClient instance.\n     */\n    async uploadBlockBlob(blobName, body, contentLength, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_8__.tracingClient.withSpan(\"ContainerClient-uploadBlockBlob\", options, async (updatedOptions) => {\n            const blockBlobClient = this.getBlockBlobClient(blobName);\n            const response = await blockBlobClient.upload(body, contentLength, updatedOptions);\n            return {\n                blockBlobClient,\n                response,\n            };\n        });\n    }\n    /**\n     * Marks the specified blob or snapshot for deletion. The blob is later deleted\n     * during garbage collection. Note that in order to delete a blob, you must delete\n     * all of its snapshots. You can delete both at the same time with the Delete\n     * Blob operation.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-blob\n     *\n     * @param blobName -\n     * @param options - Options to Blob Delete operation.\n     * @returns Block blob deletion response data.\n     */\n    async deleteBlob(blobName, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_8__.tracingClient.withSpan(\"ContainerClient-deleteBlob\", options, async (updatedOptions) => {\n            let blobClient = this.getBlobClient(blobName);\n            if (options.versionId) {\n                blobClient = blobClient.withVersion(options.versionId);\n            }\n            return blobClient.delete(updatedOptions);\n        });\n    }\n    /**\n     * listBlobFlatSegment returns a single segment of blobs starting from the\n     * specified Marker. Use an empty Marker to start enumeration from the beginning.\n     * After getting a segment, process it, and then call listBlobsFlatSegment again\n     * (passing the the previously-returned Marker) to get the next segment.\n     * @see https://docs.microsoft.com/rest/api/storageservices/list-blobs\n     *\n     * @param marker - A string value that identifies the portion of the list to be returned with the next list operation.\n     * @param options - Options to Container List Blob Flat Segment operation.\n     */\n    async listBlobFlatSegment(marker, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_8__.tracingClient.withSpan(\"ContainerClient-listBlobFlatSegment\", options, async (updatedOptions) => {\n            const response = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.containerContext.listBlobFlatSegment(Object.assign(Object.assign({ marker }, options), { tracingOptions: updatedOptions.tracingOptions })));\n            const wrappedResponse = Object.assign(Object.assign({}, response), { _response: Object.assign(Object.assign({}, response._response), { parsedBody: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.ConvertInternalResponseOfListBlobFlat)(response._response.parsedBody) }), segment: Object.assign(Object.assign({}, response.segment), { blobItems: response.segment.blobItems.map((blobItemInternal) => {\n                        const blobItem = Object.assign(Object.assign({}, blobItemInternal), { name: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.BlobNameToString)(blobItemInternal.name), tags: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.toTags)(blobItemInternal.blobTags), objectReplicationSourceProperties: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.parseObjectReplicationRecord)(blobItemInternal.objectReplicationMetadata) });\n                        return blobItem;\n                    }) }) });\n            return wrappedResponse;\n        });\n    }\n    /**\n     * listBlobHierarchySegment returns a single segment of blobs starting from\n     * the specified Marker. Use an empty Marker to start enumeration from the\n     * beginning. After getting a segment, process it, and then call listBlobsHierarchicalSegment\n     * again (passing the the previously-returned Marker) to get the next segment.\n     * @see https://docs.microsoft.com/rest/api/storageservices/list-blobs\n     *\n     * @param delimiter - The character or string used to define the virtual hierarchy\n     * @param marker - A string value that identifies the portion of the list to be returned with the next list operation.\n     * @param options - Options to Container List Blob Hierarchy Segment operation.\n     */\n    async listBlobHierarchySegment(delimiter, marker, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_8__.tracingClient.withSpan(\"ContainerClient-listBlobHierarchySegment\", options, async (updatedOptions) => {\n            var _a;\n            const response = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.containerContext.listBlobHierarchySegment(delimiter, Object.assign(Object.assign({ marker }, options), { tracingOptions: updatedOptions.tracingOptions })));\n            const wrappedResponse = Object.assign(Object.assign({}, response), { _response: Object.assign(Object.assign({}, response._response), { parsedBody: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.ConvertInternalResponseOfListBlobHierarchy)(response._response.parsedBody) }), segment: Object.assign(Object.assign({}, response.segment), { blobItems: response.segment.blobItems.map((blobItemInternal) => {\n                        const blobItem = Object.assign(Object.assign({}, blobItemInternal), { name: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.BlobNameToString)(blobItemInternal.name), tags: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.toTags)(blobItemInternal.blobTags), objectReplicationSourceProperties: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.parseObjectReplicationRecord)(blobItemInternal.objectReplicationMetadata) });\n                        return blobItem;\n                    }), blobPrefixes: (_a = response.segment.blobPrefixes) === null || _a === void 0 ? void 0 : _a.map((blobPrefixInternal) => {\n                        const blobPrefix = Object.assign(Object.assign({}, blobPrefixInternal), { name: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.BlobNameToString)(blobPrefixInternal.name) });\n                        return blobPrefix;\n                    }) }) });\n            return wrappedResponse;\n        });\n    }\n    /**\n     * Returns an AsyncIterableIterator for ContainerListBlobFlatSegmentResponse\n     *\n     * @param marker - A string value that identifies the portion of\n     *                          the list of blobs to be returned with the next listing operation. The\n     *                          operation returns the ContinuationToken value within the response body if the\n     *                          listing operation did not return all blobs remaining to be listed\n     *                          with the current page. The ContinuationToken value can be used as the value for\n     *                          the marker parameter in a subsequent call to request the next page of list\n     *                          items. The marker value is opaque to the client.\n     * @param options - Options to list blobs operation.\n     */\n    listSegments(marker_1) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__asyncGenerator)(this, arguments, function* listSegments_1(marker, options = {}) {\n            let listBlobsFlatSegmentResponse;\n            if (!!marker || marker === undefined) {\n                do {\n                    listBlobsFlatSegmentResponse = yield (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__await)(this.listBlobFlatSegment(marker, options));\n                    marker = listBlobsFlatSegmentResponse.continuationToken;\n                    yield yield (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__await)(yield (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__await)(listBlobsFlatSegmentResponse));\n                } while (marker);\n            }\n        });\n    }\n    /**\n     * Returns an AsyncIterableIterator of {@link BlobItem} objects\n     *\n     * @param options - Options to list blobs operation.\n     */\n    listItems() {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__asyncGenerator)(this, arguments, function* listItems_1(options = {}) {\n            var _a, e_1, _b, _c;\n            let marker;\n            try {\n                for (var _d = true, _e = (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__asyncValues)(this.listSegments(marker, options)), _f; _f = yield (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__await)(_e.next()), _a = _f.done, !_a; _d = true) {\n                    _c = _f.value;\n                    _d = false;\n                    const listBlobsFlatSegmentResponse = _c;\n                    yield (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__await)(yield* (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__asyncDelegator)((0,tslib__WEBPACK_IMPORTED_MODULE_11__.__asyncValues)(listBlobsFlatSegmentResponse.segment.blobItems)));\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (!_d && !_a && (_b = _e.return)) yield (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__await)(_b.call(_e));\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n        });\n    }\n    /**\n     * Returns an async iterable iterator to list all the blobs\n     * under the specified account.\n     *\n     * .byPage() returns an async iterable iterator to list the blobs in pages.\n     *\n     * Example using `for await` syntax:\n     *\n     * ```js\n     * // Get the containerClient before you run these snippets,\n     * // Can be obtained from `blobServiceClient.getContainerClient(\"<your-container-name>\");`\n     * let i = 1;\n     * for await (const blob of containerClient.listBlobsFlat()) {\n     *   console.log(`Blob ${i++}: ${blob.name}`);\n     * }\n     * ```\n     *\n     * Example using `iter.next()`:\n     *\n     * ```js\n     * let i = 1;\n     * let iter = containerClient.listBlobsFlat();\n     * let blobItem = await iter.next();\n     * while (!blobItem.done) {\n     *   console.log(`Blob ${i++}: ${blobItem.value.name}`);\n     *   blobItem = await iter.next();\n     * }\n     * ```\n     *\n     * Example using `byPage()`:\n     *\n     * ```js\n     * // passing optional maxPageSize in the page settings\n     * let i = 1;\n     * for await (const response of containerClient.listBlobsFlat().byPage({ maxPageSize: 20 })) {\n     *   for (const blob of response.segment.blobItems) {\n     *     console.log(`Blob ${i++}: ${blob.name}`);\n     *   }\n     * }\n     * ```\n     *\n     * Example using paging with a marker:\n     *\n     * ```js\n     * let i = 1;\n     * let iterator = containerClient.listBlobsFlat().byPage({ maxPageSize: 2 });\n     * let response = (await iterator.next()).value;\n     *\n     * // Prints 2 blob names\n     * for (const blob of response.segment.blobItems) {\n     *   console.log(`Blob ${i++}: ${blob.name}`);\n     * }\n     *\n     * // Gets next marker\n     * let marker = response.continuationToken;\n     *\n     * // Passing next marker as continuationToken\n     *\n     * iterator = containerClient.listBlobsFlat().byPage({ continuationToken: marker, maxPageSize: 10 });\n     * response = (await iterator.next()).value;\n     *\n     * // Prints 10 blob names\n     * for (const blob of response.segment.blobItems) {\n     *   console.log(`Blob ${i++}: ${blob.name}`);\n     * }\n     * ```\n     *\n     * @param options - Options to list blobs.\n     * @returns An asyncIterableIterator that supports paging.\n     */\n    listBlobsFlat(options = {}) {\n        const include = [];\n        if (options.includeCopy) {\n            include.push(\"copy\");\n        }\n        if (options.includeDeleted) {\n            include.push(\"deleted\");\n        }\n        if (options.includeMetadata) {\n            include.push(\"metadata\");\n        }\n        if (options.includeSnapshots) {\n            include.push(\"snapshots\");\n        }\n        if (options.includeVersions) {\n            include.push(\"versions\");\n        }\n        if (options.includeUncommitedBlobs) {\n            include.push(\"uncommittedblobs\");\n        }\n        if (options.includeTags) {\n            include.push(\"tags\");\n        }\n        if (options.includeDeletedWithVersions) {\n            include.push(\"deletedwithversions\");\n        }\n        if (options.includeImmutabilityPolicy) {\n            include.push(\"immutabilitypolicy\");\n        }\n        if (options.includeLegalHold) {\n            include.push(\"legalhold\");\n        }\n        if (options.prefix === \"\") {\n            options.prefix = undefined;\n        }\n        const updatedOptions = Object.assign(Object.assign({}, options), (include.length > 0 ? { include: include } : {}));\n        // AsyncIterableIterator to iterate over blobs\n        const iter = this.listItems(updatedOptions);\n        return {\n            /**\n             * The next method, part of the iteration protocol\n             */\n            next() {\n                return iter.next();\n            },\n            /**\n             * The connection to the async iterator, part of the iteration protocol\n             */\n            [Symbol.asyncIterator]() {\n                return this;\n            },\n            /**\n             * Return an AsyncIterableIterator that works a page at a time\n             */\n            byPage: (settings = {}) => {\n                return this.listSegments(settings.continuationToken, Object.assign({ maxPageSize: settings.maxPageSize }, updatedOptions));\n            },\n        };\n    }\n    /**\n     * Returns an AsyncIterableIterator for ContainerListBlobHierarchySegmentResponse\n     *\n     * @param delimiter - The character or string used to define the virtual hierarchy\n     * @param marker - A string value that identifies the portion of\n     *                          the list of blobs to be returned with the next listing operation. The\n     *                          operation returns the ContinuationToken value within the response body if the\n     *                          listing operation did not return all blobs remaining to be listed\n     *                          with the current page. The ContinuationToken value can be used as the value for\n     *                          the marker parameter in a subsequent call to request the next page of list\n     *                          items. The marker value is opaque to the client.\n     * @param options - Options to list blobs operation.\n     */\n    listHierarchySegments(delimiter_1, marker_1) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__asyncGenerator)(this, arguments, function* listHierarchySegments_1(delimiter, marker, options = {}) {\n            let listBlobsHierarchySegmentResponse;\n            if (!!marker || marker === undefined) {\n                do {\n                    listBlobsHierarchySegmentResponse = yield (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__await)(this.listBlobHierarchySegment(delimiter, marker, options));\n                    marker = listBlobsHierarchySegmentResponse.continuationToken;\n                    yield yield (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__await)(yield (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__await)(listBlobsHierarchySegmentResponse));\n                } while (marker);\n            }\n        });\n    }\n    /**\n     * Returns an AsyncIterableIterator for {@link BlobPrefix} and {@link BlobItem} objects.\n     *\n     * @param delimiter - The character or string used to define the virtual hierarchy\n     * @param options - Options to list blobs operation.\n     */\n    listItemsByHierarchy(delimiter_1) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__asyncGenerator)(this, arguments, function* listItemsByHierarchy_1(delimiter, options = {}) {\n            var _a, e_2, _b, _c;\n            let marker;\n            try {\n                for (var _d = true, _e = (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__asyncValues)(this.listHierarchySegments(delimiter, marker, options)), _f; _f = yield (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__await)(_e.next()), _a = _f.done, !_a; _d = true) {\n                    _c = _f.value;\n                    _d = false;\n                    const listBlobsHierarchySegmentResponse = _c;\n                    const segment = listBlobsHierarchySegmentResponse.segment;\n                    if (segment.blobPrefixes) {\n                        for (const prefix of segment.blobPrefixes) {\n                            yield yield (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__await)(Object.assign({ kind: \"prefix\" }, prefix));\n                        }\n                    }\n                    for (const blob of segment.blobItems) {\n                        yield yield (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__await)(Object.assign({ kind: \"blob\" }, blob));\n                    }\n                }\n            }\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n            finally {\n                try {\n                    if (!_d && !_a && (_b = _e.return)) yield (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__await)(_b.call(_e));\n                }\n                finally { if (e_2) throw e_2.error; }\n            }\n        });\n    }\n    /**\n     * Returns an async iterable iterator to list all the blobs by hierarchy.\n     * under the specified account.\n     *\n     * .byPage() returns an async iterable iterator to list the blobs by hierarchy in pages.\n     *\n     * Example using `for await` syntax:\n     *\n     * ```js\n     * for await (const item of containerClient.listBlobsByHierarchy(\"/\")) {\n     *   if (item.kind === \"prefix\") {\n     *     console.log(`\\tBlobPrefix: ${item.name}`);\n     *   } else {\n     *     console.log(`\\tBlobItem: name - ${item.name}`);\n     *   }\n     * }\n     * ```\n     *\n     * Example using `iter.next()`:\n     *\n     * ```js\n     * let iter = containerClient.listBlobsByHierarchy(\"/\", { prefix: \"prefix1/\" });\n     * let entity = await iter.next();\n     * while (!entity.done) {\n     *   let item = entity.value;\n     *   if (item.kind === \"prefix\") {\n     *     console.log(`\\tBlobPrefix: ${item.name}`);\n     *   } else {\n     *     console.log(`\\tBlobItem: name - ${item.name}`);\n     *   }\n     *   entity = await iter.next();\n     * }\n     * ```\n     *\n     * Example using `byPage()`:\n     *\n     * ```js\n     * console.log(\"Listing blobs by hierarchy by page\");\n     * for await (const response of containerClient.listBlobsByHierarchy(\"/\").byPage()) {\n     *   const segment = response.segment;\n     *   if (segment.blobPrefixes) {\n     *     for (const prefix of segment.blobPrefixes) {\n     *       console.log(`\\tBlobPrefix: ${prefix.name}`);\n     *     }\n     *   }\n     *   for (const blob of response.segment.blobItems) {\n     *     console.log(`\\tBlobItem: name - ${blob.name}`);\n     *   }\n     * }\n     * ```\n     *\n     * Example using paging with a max page size:\n     *\n     * ```js\n     * console.log(\"Listing blobs by hierarchy by page, specifying a prefix and a max page size\");\n     *\n     * let i = 1;\n     * for await (const response of containerClient\n     *   .listBlobsByHierarchy(\"/\", { prefix: \"prefix2/sub1/\" })\n     *   .byPage({ maxPageSize: 2 })) {\n     *   console.log(`Page ${i++}`);\n     *   const segment = response.segment;\n     *\n     *   if (segment.blobPrefixes) {\n     *     for (const prefix of segment.blobPrefixes) {\n     *       console.log(`\\tBlobPrefix: ${prefix.name}`);\n     *     }\n     *   }\n     *\n     *   for (const blob of response.segment.blobItems) {\n     *     console.log(`\\tBlobItem: name - ${blob.name}`);\n     *   }\n     * }\n     * ```\n     *\n     * @param delimiter - The character or string used to define the virtual hierarchy\n     * @param options - Options to list blobs operation.\n     */\n    listBlobsByHierarchy(delimiter, options = {}) {\n        if (delimiter === \"\") {\n            throw new RangeError(\"delimiter should contain one or more characters\");\n        }\n        const include = [];\n        if (options.includeCopy) {\n            include.push(\"copy\");\n        }\n        if (options.includeDeleted) {\n            include.push(\"deleted\");\n        }\n        if (options.includeMetadata) {\n            include.push(\"metadata\");\n        }\n        if (options.includeSnapshots) {\n            include.push(\"snapshots\");\n        }\n        if (options.includeVersions) {\n            include.push(\"versions\");\n        }\n        if (options.includeUncommitedBlobs) {\n            include.push(\"uncommittedblobs\");\n        }\n        if (options.includeTags) {\n            include.push(\"tags\");\n        }\n        if (options.includeDeletedWithVersions) {\n            include.push(\"deletedwithversions\");\n        }\n        if (options.includeImmutabilityPolicy) {\n            include.push(\"immutabilitypolicy\");\n        }\n        if (options.includeLegalHold) {\n            include.push(\"legalhold\");\n        }\n        if (options.prefix === \"\") {\n            options.prefix = undefined;\n        }\n        const updatedOptions = Object.assign(Object.assign({}, options), (include.length > 0 ? { include: include } : {}));\n        // AsyncIterableIterator to iterate over blob prefixes and blobs\n        const iter = this.listItemsByHierarchy(delimiter, updatedOptions);\n        return {\n            /**\n             * The next method, part of the iteration protocol\n             */\n            async next() {\n                return iter.next();\n            },\n            /**\n             * The connection to the async iterator, part of the iteration protocol\n             */\n            [Symbol.asyncIterator]() {\n                return this;\n            },\n            /**\n             * Return an AsyncIterableIterator that works a page at a time\n             */\n            byPage: (settings = {}) => {\n                return this.listHierarchySegments(delimiter, settings.continuationToken, Object.assign({ maxPageSize: settings.maxPageSize }, updatedOptions));\n            },\n        };\n    }\n    /**\n     * The Filter Blobs operation enables callers to list blobs in the container whose tags\n     * match a given search expression.\n     *\n     * @param tagFilterSqlExpression - The where parameter enables the caller to query blobs whose tags match a given expression.\n     *                                        The given expression must evaluate to true for a blob to be returned in the results.\n     *                                        The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;\n     *                                        however, only a subset of the OData filter syntax is supported in the Blob service.\n     * @param marker - A string value that identifies the portion of\n     *                          the list of blobs to be returned with the next listing operation. The\n     *                          operation returns the continuationToken value within the response body if the\n     *                          listing operation did not return all blobs remaining to be listed\n     *                          with the current page. The continuationToken value can be used as the value for\n     *                          the marker parameter in a subsequent call to request the next page of list\n     *                          items. The marker value is opaque to the client.\n     * @param options - Options to find blobs by tags.\n     */\n    async findBlobsByTagsSegment(tagFilterSqlExpression, marker, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_8__.tracingClient.withSpan(\"ContainerClient-findBlobsByTagsSegment\", options, async (updatedOptions) => {\n            const response = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.containerContext.filterBlobs({\n                abortSignal: options.abortSignal,\n                where: tagFilterSqlExpression,\n                marker,\n                maxPageSize: options.maxPageSize,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n            const wrappedResponse = Object.assign(Object.assign({}, response), { _response: response._response, blobs: response.blobs.map((blob) => {\n                    var _a;\n                    let tagValue = \"\";\n                    if (((_a = blob.tags) === null || _a === void 0 ? void 0 : _a.blobTagSet.length) === 1) {\n                        tagValue = blob.tags.blobTagSet[0].value;\n                    }\n                    return Object.assign(Object.assign({}, blob), { tags: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.toTags)(blob.tags), tagValue });\n                }) });\n            return wrappedResponse;\n        });\n    }\n    /**\n     * Returns an AsyncIterableIterator for ContainerFindBlobsByTagsSegmentResponse.\n     *\n     * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.\n     *                                         The given expression must evaluate to true for a blob to be returned in the results.\n     *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;\n     *                                         however, only a subset of the OData filter syntax is supported in the Blob service.\n     * @param marker - A string value that identifies the portion of\n     *                          the list of blobs to be returned with the next listing operation. The\n     *                          operation returns the continuationToken value within the response body if the\n     *                          listing operation did not return all blobs remaining to be listed\n     *                          with the current page. The continuationToken value can be used as the value for\n     *                          the marker parameter in a subsequent call to request the next page of list\n     *                          items. The marker value is opaque to the client.\n     * @param options - Options to find blobs by tags.\n     */\n    findBlobsByTagsSegments(tagFilterSqlExpression_1, marker_1) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__asyncGenerator)(this, arguments, function* findBlobsByTagsSegments_1(tagFilterSqlExpression, marker, options = {}) {\n            let response;\n            if (!!marker || marker === undefined) {\n                do {\n                    response = yield (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__await)(this.findBlobsByTagsSegment(tagFilterSqlExpression, marker, options));\n                    response.blobs = response.blobs || [];\n                    marker = response.continuationToken;\n                    yield yield (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__await)(response);\n                } while (marker);\n            }\n        });\n    }\n    /**\n     * Returns an AsyncIterableIterator for blobs.\n     *\n     * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.\n     *                                         The given expression must evaluate to true for a blob to be returned in the results.\n     *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;\n     *                                         however, only a subset of the OData filter syntax is supported in the Blob service.\n     * @param options - Options to findBlobsByTagsItems.\n     */\n    findBlobsByTagsItems(tagFilterSqlExpression_1) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__asyncGenerator)(this, arguments, function* findBlobsByTagsItems_1(tagFilterSqlExpression, options = {}) {\n            var _a, e_3, _b, _c;\n            let marker;\n            try {\n                for (var _d = true, _e = (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__asyncValues)(this.findBlobsByTagsSegments(tagFilterSqlExpression, marker, options)), _f; _f = yield (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__await)(_e.next()), _a = _f.done, !_a; _d = true) {\n                    _c = _f.value;\n                    _d = false;\n                    const segment = _c;\n                    yield (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__await)(yield* (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__asyncDelegator)((0,tslib__WEBPACK_IMPORTED_MODULE_11__.__asyncValues)(segment.blobs)));\n                }\n            }\n            catch (e_3_1) { e_3 = { error: e_3_1 }; }\n            finally {\n                try {\n                    if (!_d && !_a && (_b = _e.return)) yield (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__await)(_b.call(_e));\n                }\n                finally { if (e_3) throw e_3.error; }\n            }\n        });\n    }\n    /**\n     * Returns an async iterable iterator to find all blobs with specified tag\n     * under the specified container.\n     *\n     * .byPage() returns an async iterable iterator to list the blobs in pages.\n     *\n     * Example using `for await` syntax:\n     *\n     * ```js\n     * let i = 1;\n     * for await (const blob of containerClient.findBlobsByTags(\"tagkey='tagvalue'\")) {\n     *   console.log(`Blob ${i++}: ${blob.name}`);\n     * }\n     * ```\n     *\n     * Example using `iter.next()`:\n     *\n     * ```js\n     * let i = 1;\n     * const iter = containerClient.findBlobsByTags(\"tagkey='tagvalue'\");\n     * let blobItem = await iter.next();\n     * while (!blobItem.done) {\n     *   console.log(`Blob ${i++}: ${blobItem.value.name}`);\n     *   blobItem = await iter.next();\n     * }\n     * ```\n     *\n     * Example using `byPage()`:\n     *\n     * ```js\n     * // passing optional maxPageSize in the page settings\n     * let i = 1;\n     * for await (const response of containerClient.findBlobsByTags(\"tagkey='tagvalue'\").byPage({ maxPageSize: 20 })) {\n     *   if (response.blobs) {\n     *     for (const blob of response.blobs) {\n     *       console.log(`Blob ${i++}: ${blob.name}`);\n     *     }\n     *   }\n     * }\n     * ```\n     *\n     * Example using paging with a marker:\n     *\n     * ```js\n     * let i = 1;\n     * let iterator = containerClient.findBlobsByTags(\"tagkey='tagvalue'\").byPage({ maxPageSize: 2 });\n     * let response = (await iterator.next()).value;\n     *\n     * // Prints 2 blob names\n     * if (response.blobs) {\n     *   for (const blob of response.blobs) {\n     *     console.log(`Blob ${i++}: ${blob.name}`);\n     *   }\n     * }\n     *\n     * // Gets next marker\n     * let marker = response.continuationToken;\n     * // Passing next marker as continuationToken\n     * iterator = containerClient\n     *   .findBlobsByTags(\"tagkey='tagvalue'\")\n     *   .byPage({ continuationToken: marker, maxPageSize: 10 });\n     * response = (await iterator.next()).value;\n     *\n     * // Prints blob names\n     * if (response.blobs) {\n     *   for (const blob of response.blobs) {\n     *      console.log(`Blob ${i++}: ${blob.name}`);\n     *   }\n     * }\n     * ```\n     *\n     * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.\n     *                                         The given expression must evaluate to true for a blob to be returned in the results.\n     *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;\n     *                                         however, only a subset of the OData filter syntax is supported in the Blob service.\n     * @param options - Options to find blobs by tags.\n     */\n    findBlobsByTags(tagFilterSqlExpression, options = {}) {\n        // AsyncIterableIterator to iterate over blobs\n        const listSegmentOptions = Object.assign({}, options);\n        const iter = this.findBlobsByTagsItems(tagFilterSqlExpression, listSegmentOptions);\n        return {\n            /**\n             * The next method, part of the iteration protocol\n             */\n            next() {\n                return iter.next();\n            },\n            /**\n             * The connection to the async iterator, part of the iteration protocol\n             */\n            [Symbol.asyncIterator]() {\n                return this;\n            },\n            /**\n             * Return an AsyncIterableIterator that works a page at a time\n             */\n            byPage: (settings = {}) => {\n                return this.findBlobsByTagsSegments(tagFilterSqlExpression, settings.continuationToken, Object.assign({ maxPageSize: settings.maxPageSize }, listSegmentOptions));\n            },\n        };\n    }\n    /**\n     * The Get Account Information operation returns the sku name and account kind\n     * for the specified account.\n     * The Get Account Information operation is available on service versions beginning\n     * with version 2018-03-28.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-account-information\n     *\n     * @param options - Options to the Service Get Account Info operation.\n     * @returns Response data for the Service Get Account Info operation.\n     */\n    async getAccountInfo(options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_8__.tracingClient.withSpan(\"ContainerClient-getAccountInfo\", options, async (updatedOptions) => {\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.containerContext.getAccountInfo({\n                abortSignal: options.abortSignal,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    getContainerNameFromUrl() {\n        let containerName;\n        try {\n            //  URL may look like the following\n            // \"https://myaccount.blob.core.windows.net/mycontainer?sasString\";\n            // \"https://myaccount.blob.core.windows.net/mycontainer\";\n            // IPv4/IPv6 address hosts, Endpoints - `http://127.0.0.1:10000/devstoreaccount1/containername`\n            // http://localhost:10001/devstoreaccount1/containername\n            const parsedUrl = new URL(this.url);\n            if (parsedUrl.hostname.split(\".\")[1] === \"blob\") {\n                // \"https://myaccount.blob.core.windows.net/containername\".\n                // \"https://customdomain.com/containername\".\n                // .getPath() -> /containername\n                containerName = parsedUrl.pathname.split(\"/\")[1];\n            }\n            else if ((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.isIpEndpointStyle)(parsedUrl)) {\n                // IPv4/IPv6 address hosts... Example - http://192.0.0.10:10001/devstoreaccount1/containername\n                // Single word domain without a [dot] in the endpoint... Example - http://localhost:10001/devstoreaccount1/containername\n                // .getPath() -> /devstoreaccount1/containername\n                containerName = parsedUrl.pathname.split(\"/\")[2];\n            }\n            else {\n                // \"https://customdomain.com/containername\".\n                // .getPath() -> /containername\n                containerName = parsedUrl.pathname.split(\"/\")[1];\n            }\n            // decode the encoded containerName - to get all the special characters that might be present in it\n            containerName = decodeURIComponent(containerName);\n            if (!containerName) {\n                throw new Error(\"Provided containerName is invalid.\");\n            }\n            return containerName;\n        }\n        catch (error) {\n            throw new Error(\"Unable to extract containerName with provided information.\");\n        }\n    }\n    /**\n     * Only available for ContainerClient constructed with a shared key credential.\n     *\n     * Generates a Blob Container Service Shared Access Signature (SAS) URI based on the client properties\n     * and parameters passed in. The SAS is signed by the shared key credential of the client.\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas\n     *\n     * @param options - Optional parameters.\n     * @returns The SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.\n     */\n    generateSasUrl(options) {\n        return new Promise((resolve) => {\n            if (!(this.credential instanceof _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_5__.StorageSharedKeyCredential)) {\n                throw new RangeError(\"Can only generate the SAS when the client is initialized with a shared key credential\");\n            }\n            const sas = (0,_sas_BlobSASSignatureValues__WEBPACK_IMPORTED_MODULE_12__.generateBlobSASQueryParameters)(Object.assign({ containerName: this._containerName }, options), this.credential).toString();\n            resolve((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLQuery)(this.url, sas));\n        });\n    }\n    /**\n     * Only available for ContainerClient constructed with a shared key credential.\n     *\n     * Generates string to sign for a Blob Container Service Shared Access Signature (SAS) URI\n     * based on the client properties and parameters passed in. The SAS is signed by the shared key credential of the client.\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas\n     *\n     * @param options - Optional parameters.\n     * @returns The SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.\n     */\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    generateSasStringToSign(options) {\n        if (!(this.credential instanceof _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_5__.StorageSharedKeyCredential)) {\n            throw new RangeError(\"Can only generate the SAS when the client is initialized with a shared key credential\");\n        }\n        return (0,_sas_BlobSASSignatureValues__WEBPACK_IMPORTED_MODULE_12__.generateBlobSASQueryParametersInternal)(Object.assign({ containerName: this._containerName }, options), this.credential).stringToSign;\n    }\n    /**\n     * Generates a Blob Container Service Shared Access Signature (SAS) URI based on the client properties\n     * and parameters passed in. The SAS is signed by the input user delegation key.\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas\n     *\n     * @param options - Optional parameters.\n     * @param userDelegationKey -  Return value of `blobServiceClient.getUserDelegationKey()`\n     * @returns The SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.\n     */\n    generateUserDelegationSasUrl(options, userDelegationKey) {\n        return new Promise((resolve) => {\n            const sas = (0,_sas_BlobSASSignatureValues__WEBPACK_IMPORTED_MODULE_12__.generateBlobSASQueryParameters)(Object.assign({ containerName: this._containerName }, options), userDelegationKey, this.accountName).toString();\n            resolve((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLQuery)(this.url, sas));\n        });\n    }\n    /**\n     * Generates string to sign for a Blob Container Service Shared Access Signature (SAS) URI\n     * based on the client properties and parameters passed in. The SAS is signed by the input user delegation key.\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas\n     *\n     * @param options - Optional parameters.\n     * @param userDelegationKey -  Return value of `blobServiceClient.getUserDelegationKey()`\n     * @returns The SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.\n     */\n    generateUserDelegationSasStringToSign(options, userDelegationKey) {\n        return (0,_sas_BlobSASSignatureValues__WEBPACK_IMPORTED_MODULE_12__.generateBlobSASQueryParametersInternal)(Object.assign({ containerName: this._containerName }, options), userDelegationKey, this.accountName).stringToSign;\n    }\n    /**\n     * Creates a BlobBatchClient object to conduct batch operations.\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch\n     *\n     * @returns A new BlobBatchClient object for this container.\n     */\n    getBlobBatchClient() {\n        return new _BlobBatchClient__WEBPACK_IMPORTED_MODULE_13__.BlobBatchClient(this.url, this.pipeline);\n    }\n}\n//# sourceMappingURL=ContainerClient.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/ContainerClient.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/PageBlobRangeResponse.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/PageBlobRangeResponse.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   rangeResponseFromModel: () => (/* binding */ rangeResponseFromModel)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * Function that converts PageRange and ClearRange to a common Range object.\n * PageRange and ClearRange have start and end while Range offset and count\n * this function normalizes to Range.\n * @param response - Model PageBlob Range response\n */\nfunction rangeResponseFromModel(response) {\n    const pageRange = (response._response.parsedBody.pageRange || []).map((x) => ({\n        offset: x.start,\n        count: x.end - x.start,\n    }));\n    const clearRange = (response._response.parsedBody.clearRange || []).map((x) => ({\n        offset: x.start,\n        count: x.end - x.start,\n    }));\n    return Object.assign(Object.assign({}, response), { pageRange,\n        clearRange, _response: Object.assign(Object.assign({}, response._response), { parsedBody: {\n                pageRange,\n                clearRange,\n            } }) });\n}\n//# sourceMappingURL=PageBlobRangeResponse.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL1BhZ2VCbG9iUmFuZ2VSZXNwb25zZS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCx5Q0FBeUMsZUFBZTtBQUN4RCw2REFBNkQseUJBQXlCO0FBQ3RGO0FBQ0E7QUFDQSxlQUFlLEdBQUc7QUFDbEI7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcndpbHNvbi9EZXNrdG9wL3Byb2plY3RzL0VaVml6L25vZGVfbW9kdWxlcy9AYXp1cmUvc3RvcmFnZS1ibG9iL2Rpc3QtZXNtL3N0b3JhZ2UtYmxvYi9zcmMvUGFnZUJsb2JSYW5nZVJlc3BvbnNlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuLyoqXG4gKiBGdW5jdGlvbiB0aGF0IGNvbnZlcnRzIFBhZ2VSYW5nZSBhbmQgQ2xlYXJSYW5nZSB0byBhIGNvbW1vbiBSYW5nZSBvYmplY3QuXG4gKiBQYWdlUmFuZ2UgYW5kIENsZWFyUmFuZ2UgaGF2ZSBzdGFydCBhbmQgZW5kIHdoaWxlIFJhbmdlIG9mZnNldCBhbmQgY291bnRcbiAqIHRoaXMgZnVuY3Rpb24gbm9ybWFsaXplcyB0byBSYW5nZS5cbiAqIEBwYXJhbSByZXNwb25zZSAtIE1vZGVsIFBhZ2VCbG9iIFJhbmdlIHJlc3BvbnNlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByYW5nZVJlc3BvbnNlRnJvbU1vZGVsKHJlc3BvbnNlKSB7XG4gICAgY29uc3QgcGFnZVJhbmdlID0gKHJlc3BvbnNlLl9yZXNwb25zZS5wYXJzZWRCb2R5LnBhZ2VSYW5nZSB8fCBbXSkubWFwKCh4KSA9PiAoe1xuICAgICAgICBvZmZzZXQ6IHguc3RhcnQsXG4gICAgICAgIGNvdW50OiB4LmVuZCAtIHguc3RhcnQsXG4gICAgfSkpO1xuICAgIGNvbnN0IGNsZWFyUmFuZ2UgPSAocmVzcG9uc2UuX3Jlc3BvbnNlLnBhcnNlZEJvZHkuY2xlYXJSYW5nZSB8fCBbXSkubWFwKCh4KSA9PiAoe1xuICAgICAgICBvZmZzZXQ6IHguc3RhcnQsXG4gICAgICAgIGNvdW50OiB4LmVuZCAtIHguc3RhcnQsXG4gICAgfSkpO1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlc3BvbnNlKSwgeyBwYWdlUmFuZ2UsXG4gICAgICAgIGNsZWFyUmFuZ2UsIF9yZXNwb25zZTogT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXNwb25zZS5fcmVzcG9uc2UpLCB7IHBhcnNlZEJvZHk6IHtcbiAgICAgICAgICAgICAgICBwYWdlUmFuZ2UsXG4gICAgICAgICAgICAgICAgY2xlYXJSYW5nZSxcbiAgICAgICAgICAgIH0gfSkgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1QYWdlQmxvYlJhbmdlUmVzcG9uc2UuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/PageBlobRangeResponse.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Pipeline.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Pipeline.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Pipeline: () => (/* binding */ Pipeline),\n/* harmony export */   StorageOAuthScopes: () => (/* reexport safe */ _utils_constants__WEBPACK_IMPORTED_MODULE_5__.StorageOAuthScopes),\n/* harmony export */   getCoreClientOptions: () => (/* binding */ getCoreClientOptions),\n/* harmony export */   getCredentialFromPipeline: () => (/* binding */ getCredentialFromPipeline),\n/* harmony export */   isPipelineLike: () => (/* binding */ isPipelineLike),\n/* harmony export */   newPipeline: () => (/* binding */ newPipeline)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _azure_core_http_compat__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-http-compat */ \"(rsc)/./node_modules/@azure/core-http-compat/dist/esm/index.js\");\n/* harmony import */ var _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/core-rest-pipeline */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/index.js\");\n/* harmony import */ var _azure_core_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @azure/core-client */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/index.js\");\n/* harmony import */ var _azure_core_xml__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @azure/core-xml */ \"(rsc)/./node_modules/@azure/core-xml/dist/esm/index.js\");\n/* harmony import */ var _azure_core_auth__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @azure/core-auth */ \"(rsc)/./node_modules/@azure/core-auth/dist/esm/index.js\");\n/* harmony import */ var _log__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./log */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/log.js\");\n/* harmony import */ var _StorageRetryPolicyFactory__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./StorageRetryPolicyFactory */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageRetryPolicyFactory.js\");\n/* harmony import */ var _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./credentials/StorageSharedKeyCredential */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/StorageSharedKeyCredential.js\");\n/* harmony import */ var _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./credentials/AnonymousCredential */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/AnonymousCredential.js\");\n/* harmony import */ var _utils_constants__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/constants */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js\");\n/* harmony import */ var _utils_cache__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils/cache */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/cache.js\");\n/* harmony import */ var _policies_StorageBrowserPolicyV2__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./policies/StorageBrowserPolicyV2 */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageBrowserPolicyV2.js\");\n/* harmony import */ var _policies_StorageRetryPolicyV2__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./policies/StorageRetryPolicyV2 */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageRetryPolicyV2.js\");\n/* harmony import */ var _policies_StorageSharedKeyCredentialPolicyV2__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./policies/StorageSharedKeyCredentialPolicyV2 */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageSharedKeyCredentialPolicyV2.js\");\n/* harmony import */ var _StorageBrowserPolicyFactory__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./StorageBrowserPolicyFactory */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageBrowserPolicyFactory.js\");\n/* harmony import */ var _policies_StorageCorrectContentLengthPolicy__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./policies/StorageCorrectContentLengthPolicy */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageCorrectContentLengthPolicy.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// Export following interfaces and types for customers who want to implement their\n// own RequestPolicy or HTTPClient\n\n/**\n * A helper to decide if a given argument satisfies the Pipeline contract\n * @param pipeline - An argument that may be a Pipeline\n * @returns true when the argument satisfies the Pipeline contract\n */\nfunction isPipelineLike(pipeline) {\n    if (!pipeline || typeof pipeline !== \"object\") {\n        return false;\n    }\n    const castPipeline = pipeline;\n    return (Array.isArray(castPipeline.factories) &&\n        typeof castPipeline.options === \"object\" &&\n        typeof castPipeline.toServiceClientOptions === \"function\");\n}\n/**\n * A Pipeline class containing HTTP request policies.\n * You can create a default Pipeline by calling {@link newPipeline}.\n * Or you can create a Pipeline with your own policies by the constructor of Pipeline.\n *\n * Refer to {@link newPipeline} and provided policies before implementing your\n * customized Pipeline.\n */\nclass Pipeline {\n    /**\n     * Creates an instance of Pipeline. Customize HTTPClient by implementing IHttpClient interface.\n     *\n     * @param factories -\n     * @param options -\n     */\n    constructor(factories, options = {}) {\n        this.factories = factories;\n        this.options = options;\n    }\n    /**\n     * Transfer Pipeline object to ServiceClientOptions object which is required by\n     * ServiceClient constructor.\n     *\n     * @returns The ServiceClientOptions object from this Pipeline.\n     */\n    toServiceClientOptions() {\n        return {\n            httpClient: this.options.httpClient,\n            requestPolicyFactories: this.factories,\n        };\n    }\n}\n/**\n * Creates a new Pipeline object with Credential provided.\n *\n * @param credential -  Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.\n * @param pipelineOptions - Optional. Options.\n * @returns A new Pipeline object.\n */\nfunction newPipeline(credential, pipelineOptions = {}) {\n    if (!credential) {\n        credential = new _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__.AnonymousCredential();\n    }\n    const pipeline = new Pipeline([], pipelineOptions);\n    pipeline._credential = credential;\n    return pipeline;\n}\nfunction processDownlevelPipeline(pipeline) {\n    const knownFactoryFunctions = [\n        isAnonymousCredential,\n        isStorageSharedKeyCredential,\n        isCoreHttpBearerTokenFactory,\n        isStorageBrowserPolicyFactory,\n        isStorageRetryPolicyFactory,\n        isStorageTelemetryPolicyFactory,\n        isCoreHttpPolicyFactory,\n    ];\n    if (pipeline.factories.length) {\n        const novelFactories = pipeline.factories.filter((factory) => {\n            return !knownFactoryFunctions.some((knownFactory) => knownFactory(factory));\n        });\n        if (novelFactories.length) {\n            const hasInjector = novelFactories.some((factory) => isInjectorPolicyFactory(factory));\n            // if there are any left over, wrap in a requestPolicyFactoryPolicy\n            return {\n                wrappedPolicies: (0,_azure_core_http_compat__WEBPACK_IMPORTED_MODULE_0__.createRequestPolicyFactoryPolicy)(novelFactories),\n                afterRetry: hasInjector,\n            };\n        }\n    }\n    return undefined;\n}\nfunction getCoreClientOptions(pipeline) {\n    var _a;\n    const _b = pipeline.options, { httpClient: v1Client } = _b, restOptions = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__rest)(_b, [\"httpClient\"]);\n    let httpClient = pipeline._coreHttpClient;\n    if (!httpClient) {\n        httpClient = v1Client ? (0,_azure_core_http_compat__WEBPACK_IMPORTED_MODULE_0__.convertHttpClient)(v1Client) : (0,_utils_cache__WEBPACK_IMPORTED_MODULE_8__.getCachedDefaultHttpClient)();\n        pipeline._coreHttpClient = httpClient;\n    }\n    let corePipeline = pipeline._corePipeline;\n    if (!corePipeline) {\n        const packageDetails = `azsdk-js-azure-storage-blob/${_utils_constants__WEBPACK_IMPORTED_MODULE_5__.SDK_VERSION}`;\n        const userAgentPrefix = restOptions.userAgentOptions && restOptions.userAgentOptions.userAgentPrefix\n            ? `${restOptions.userAgentOptions.userAgentPrefix} ${packageDetails}`\n            : `${packageDetails}`;\n        corePipeline = (0,_azure_core_client__WEBPACK_IMPORTED_MODULE_2__.createClientPipeline)(Object.assign(Object.assign({}, restOptions), { loggingOptions: {\n                additionalAllowedHeaderNames: _utils_constants__WEBPACK_IMPORTED_MODULE_5__.StorageBlobLoggingAllowedHeaderNames,\n                additionalAllowedQueryParameters: _utils_constants__WEBPACK_IMPORTED_MODULE_5__.StorageBlobLoggingAllowedQueryParameters,\n                logger: _log__WEBPACK_IMPORTED_MODULE_9__.logger.info,\n            }, userAgentOptions: {\n                userAgentPrefix,\n            }, serializationOptions: {\n                stringifyXML: _azure_core_xml__WEBPACK_IMPORTED_MODULE_3__.stringifyXML,\n                serializerOptions: {\n                    xml: {\n                        // Use customized XML char key of \"#\" so we can deserialize metadata\n                        // with \"_\" key\n                        xmlCharKey: \"#\",\n                    },\n                },\n            }, deserializationOptions: {\n                parseXML: _azure_core_xml__WEBPACK_IMPORTED_MODULE_3__.parseXML,\n                serializerOptions: {\n                    xml: {\n                        // Use customized XML char key of \"#\" so we can deserialize metadata\n                        // with \"_\" key\n                        xmlCharKey: \"#\",\n                    },\n                },\n            } }));\n        corePipeline.removePolicy({ phase: \"Retry\" });\n        corePipeline.removePolicy({ name: _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_1__.decompressResponsePolicyName });\n        corePipeline.addPolicy((0,_policies_StorageCorrectContentLengthPolicy__WEBPACK_IMPORTED_MODULE_10__.storageCorrectContentLengthPolicy)());\n        corePipeline.addPolicy((0,_policies_StorageRetryPolicyV2__WEBPACK_IMPORTED_MODULE_11__.storageRetryPolicy)(restOptions.retryOptions), { phase: \"Retry\" });\n        corePipeline.addPolicy((0,_policies_StorageBrowserPolicyV2__WEBPACK_IMPORTED_MODULE_12__.storageBrowserPolicy)());\n        const downlevelResults = processDownlevelPipeline(pipeline);\n        if (downlevelResults) {\n            corePipeline.addPolicy(downlevelResults.wrappedPolicies, downlevelResults.afterRetry ? { afterPhase: \"Retry\" } : undefined);\n        }\n        const credential = getCredentialFromPipeline(pipeline);\n        if ((0,_azure_core_auth__WEBPACK_IMPORTED_MODULE_4__.isTokenCredential)(credential)) {\n            corePipeline.addPolicy((0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_1__.bearerTokenAuthenticationPolicy)({\n                credential,\n                scopes: (_a = restOptions.audience) !== null && _a !== void 0 ? _a : _utils_constants__WEBPACK_IMPORTED_MODULE_5__.StorageOAuthScopes,\n                challengeCallbacks: { authorizeRequestOnChallenge: _azure_core_client__WEBPACK_IMPORTED_MODULE_2__.authorizeRequestOnTenantChallenge },\n            }), { phase: \"Sign\" });\n        }\n        else if (credential instanceof _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_13__.StorageSharedKeyCredential) {\n            corePipeline.addPolicy((0,_policies_StorageSharedKeyCredentialPolicyV2__WEBPACK_IMPORTED_MODULE_14__.storageSharedKeyCredentialPolicy)({\n                accountName: credential.accountName,\n                accountKey: credential.accountKey,\n            }), { phase: \"Sign\" });\n        }\n        pipeline._corePipeline = corePipeline;\n    }\n    return Object.assign(Object.assign({}, restOptions), { allowInsecureConnection: true, httpClient, pipeline: corePipeline });\n}\nfunction getCredentialFromPipeline(pipeline) {\n    // see if we squirreled one away on the type itself\n    if (pipeline._credential) {\n        return pipeline._credential;\n    }\n    // if it came from another package, loop over the factories and look for one like before\n    let credential = new _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__.AnonymousCredential();\n    for (const factory of pipeline.factories) {\n        if ((0,_azure_core_auth__WEBPACK_IMPORTED_MODULE_4__.isTokenCredential)(factory.credential)) {\n            // Only works if the factory has been attached a \"credential\" property.\n            // We do that in newPipeline() when using TokenCredential.\n            credential = factory.credential;\n        }\n        else if (isStorageSharedKeyCredential(factory)) {\n            return factory;\n        }\n    }\n    return credential;\n}\nfunction isStorageSharedKeyCredential(factory) {\n    if (factory instanceof _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_13__.StorageSharedKeyCredential) {\n        return true;\n    }\n    return factory.constructor.name === \"StorageSharedKeyCredential\";\n}\nfunction isAnonymousCredential(factory) {\n    if (factory instanceof _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__.AnonymousCredential) {\n        return true;\n    }\n    return factory.constructor.name === \"AnonymousCredential\";\n}\nfunction isCoreHttpBearerTokenFactory(factory) {\n    return (0,_azure_core_auth__WEBPACK_IMPORTED_MODULE_4__.isTokenCredential)(factory.credential);\n}\nfunction isStorageBrowserPolicyFactory(factory) {\n    if (factory instanceof _StorageBrowserPolicyFactory__WEBPACK_IMPORTED_MODULE_15__.StorageBrowserPolicyFactory) {\n        return true;\n    }\n    return factory.constructor.name === \"StorageBrowserPolicyFactory\";\n}\nfunction isStorageRetryPolicyFactory(factory) {\n    if (factory instanceof _StorageRetryPolicyFactory__WEBPACK_IMPORTED_MODULE_16__.StorageRetryPolicyFactory) {\n        return true;\n    }\n    return factory.constructor.name === \"StorageRetryPolicyFactory\";\n}\nfunction isStorageTelemetryPolicyFactory(factory) {\n    return factory.constructor.name === \"TelemetryPolicyFactory\";\n}\nfunction isInjectorPolicyFactory(factory) {\n    return factory.constructor.name === \"InjectorPolicyFactory\";\n}\nfunction isCoreHttpPolicyFactory(factory) {\n    const knownPolicies = [\n        \"GenerateClientRequestIdPolicy\",\n        \"TracingPolicy\",\n        \"LogPolicy\",\n        \"ProxyPolicy\",\n        \"DisableResponseDecompressionPolicy\",\n        \"KeepAlivePolicy\",\n        \"DeserializationPolicy\",\n    ];\n    const mockHttpClient = {\n        sendRequest: async (request) => {\n            return {\n                request,\n                headers: request.headers.clone(),\n                status: 500,\n            };\n        },\n    };\n    const mockRequestPolicyOptions = {\n        log(_logLevel, _message) {\n            /* do nothing */\n        },\n        shouldLog(_logLevel) {\n            return false;\n        },\n    };\n    const policyInstance = factory.create(mockHttpClient, mockRequestPolicyOptions);\n    const policyName = policyInstance.constructor.name;\n    // bundlers sometimes add a custom suffix to the class name to make it unique\n    return knownPolicies.some((knownPolicyName) => {\n        return policyName.startsWith(knownPolicyName);\n    });\n}\n//# sourceMappingURL=Pipeline.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Pipeline.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Range.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Range.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   rangeToString: () => (/* binding */ rangeToString)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * Generate a range string. For example:\n *\n * \"bytes=255-\" or \"bytes=0-511\"\n *\n * @param iRange -\n */\nfunction rangeToString(iRange) {\n    if (iRange.offset < 0) {\n        throw new RangeError(`Range.offset cannot be smaller than 0.`);\n    }\n    if (iRange.count && iRange.count <= 0) {\n        throw new RangeError(`Range.count must be larger than 0. Leave it undefined if you want a range from offset to the end.`);\n    }\n    return iRange.count\n        ? `bytes=${iRange.offset}-${iRange.offset + iRange.count - 1}`\n        : `bytes=${iRange.offset}-`;\n}\n//# sourceMappingURL=Range.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL1JhbmdlLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLGNBQWMsR0FBRyxpQ0FBaUM7QUFDckUsbUJBQW1CLGNBQWM7QUFDakM7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcndpbHNvbi9EZXNrdG9wL3Byb2plY3RzL0VaVml6L25vZGVfbW9kdWxlcy9AYXp1cmUvc3RvcmFnZS1ibG9iL2Rpc3QtZXNtL3N0b3JhZ2UtYmxvYi9zcmMvUmFuZ2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4vKipcbiAqIEdlbmVyYXRlIGEgcmFuZ2Ugc3RyaW5nLiBGb3IgZXhhbXBsZTpcbiAqXG4gKiBcImJ5dGVzPTI1NS1cIiBvciBcImJ5dGVzPTAtNTExXCJcbiAqXG4gKiBAcGFyYW0gaVJhbmdlIC1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJhbmdlVG9TdHJpbmcoaVJhbmdlKSB7XG4gICAgaWYgKGlSYW5nZS5vZmZzZXQgPCAwKSB7XG4gICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKGBSYW5nZS5vZmZzZXQgY2Fubm90IGJlIHNtYWxsZXIgdGhhbiAwLmApO1xuICAgIH1cbiAgICBpZiAoaVJhbmdlLmNvdW50ICYmIGlSYW5nZS5jb3VudCA8PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKGBSYW5nZS5jb3VudCBtdXN0IGJlIGxhcmdlciB0aGFuIDAuIExlYXZlIGl0IHVuZGVmaW5lZCBpZiB5b3Ugd2FudCBhIHJhbmdlIGZyb20gb2Zmc2V0IHRvIHRoZSBlbmQuYCk7XG4gICAgfVxuICAgIHJldHVybiBpUmFuZ2UuY291bnRcbiAgICAgICAgPyBgYnl0ZXM9JHtpUmFuZ2Uub2Zmc2V0fS0ke2lSYW5nZS5vZmZzZXQgKyBpUmFuZ2UuY291bnQgLSAxfWBcbiAgICAgICAgOiBgYnl0ZXM9JHtpUmFuZ2Uub2Zmc2V0fS1gO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UmFuZ2UuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Range.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageBrowserPolicyFactory.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageBrowserPolicyFactory.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StorageBrowserPolicy: () => (/* reexport safe */ _policies_StorageBrowserPolicy__WEBPACK_IMPORTED_MODULE_0__.StorageBrowserPolicy),\n/* harmony export */   StorageBrowserPolicyFactory: () => (/* binding */ StorageBrowserPolicyFactory)\n/* harmony export */ });\n/* harmony import */ var _policies_StorageBrowserPolicy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./policies/StorageBrowserPolicy */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageBrowserPolicy.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n/**\n * StorageBrowserPolicyFactory is a factory class helping generating StorageBrowserPolicy objects.\n */\nclass StorageBrowserPolicyFactory {\n    /**\n     * Creates a StorageBrowserPolicyFactory object.\n     *\n     * @param nextPolicy -\n     * @param options -\n     */\n    create(nextPolicy, options) {\n        return new _policies_StorageBrowserPolicy__WEBPACK_IMPORTED_MODULE_0__.StorageBrowserPolicy(nextPolicy, options);\n    }\n}\n//# sourceMappingURL=StorageBrowserPolicyFactory.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL1N0b3JhZ2VCcm93c2VyUG9saWN5RmFjdG9yeS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ3VFO0FBQ3ZDO0FBQ2hDO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsZ0ZBQW9CO0FBQ3ZDO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcndpbHNvbi9EZXNrdG9wL3Byb2plY3RzL0VaVml6L25vZGVfbW9kdWxlcy9AYXp1cmUvc3RvcmFnZS1ibG9iL2Rpc3QtZXNtL3N0b3JhZ2UtYmxvYi9zcmMvU3RvcmFnZUJyb3dzZXJQb2xpY3lGYWN0b3J5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuaW1wb3J0IHsgU3RvcmFnZUJyb3dzZXJQb2xpY3kgfSBmcm9tIFwiLi9wb2xpY2llcy9TdG9yYWdlQnJvd3NlclBvbGljeVwiO1xuZXhwb3J0IHsgU3RvcmFnZUJyb3dzZXJQb2xpY3kgfTtcbi8qKlxuICogU3RvcmFnZUJyb3dzZXJQb2xpY3lGYWN0b3J5IGlzIGEgZmFjdG9yeSBjbGFzcyBoZWxwaW5nIGdlbmVyYXRpbmcgU3RvcmFnZUJyb3dzZXJQb2xpY3kgb2JqZWN0cy5cbiAqL1xuZXhwb3J0IGNsYXNzIFN0b3JhZ2VCcm93c2VyUG9saWN5RmFjdG9yeSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIFN0b3JhZ2VCcm93c2VyUG9saWN5RmFjdG9yeSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbmV4dFBvbGljeSAtXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLVxuICAgICAqL1xuICAgIGNyZWF0ZShuZXh0UG9saWN5LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBuZXcgU3RvcmFnZUJyb3dzZXJQb2xpY3kobmV4dFBvbGljeSwgb3B0aW9ucyk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3RvcmFnZUJyb3dzZXJQb2xpY3lGYWN0b3J5LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageBrowserPolicyFactory.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageClient.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageClient.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StorageClient: () => (/* binding */ StorageClient)\n/* harmony export */ });\n/* harmony import */ var _StorageContextClient__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./StorageContextClient */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageContextClient.js\");\n/* harmony import */ var _Pipeline__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Pipeline */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Pipeline.js\");\n/* harmony import */ var _utils_utils_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/utils.common */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n/**\n * A StorageClient represents a based URL class for {@link BlobServiceClient}, {@link ContainerClient}\n * and etc.\n */\nclass StorageClient {\n    /**\n     * Creates an instance of StorageClient.\n     * @param url - url to resource\n     * @param pipeline - request policy pipeline.\n     */\n    constructor(url, pipeline) {\n        // URL should be encoded and only once, protocol layer shouldn't encode URL again\n        this.url = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_0__.escapeURLPath)(url);\n        this.accountName = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_0__.getAccountNameFromUrl)(url);\n        this.pipeline = pipeline;\n        this.storageClientContext = new _StorageContextClient__WEBPACK_IMPORTED_MODULE_1__.StorageContextClient(this.url, (0,_Pipeline__WEBPACK_IMPORTED_MODULE_2__.getCoreClientOptions)(pipeline));\n        this.isHttps = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_0__.iEqual)((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_0__.getURLScheme)(this.url) || \"\", \"https\");\n        this.credential = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_2__.getCredentialFromPipeline)(pipeline);\n        // Override protocol layer's default content-type\n        const storageClientContext = this.storageClientContext;\n        storageClientContext.requestContentType = undefined;\n    }\n}\n//# sourceMappingURL=StorageClient.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL1N0b3JhZ2VDbGllbnQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDOEQ7QUFDZTtBQUNxQjtBQUNsRztBQUNBLHFEQUFxRCx3QkFBd0IsR0FBRztBQUNoRjtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixrRUFBYTtBQUNoQywyQkFBMkIsMEVBQXFCO0FBQ2hEO0FBQ0Esd0NBQXdDLHVFQUFvQixXQUFXLCtEQUFvQjtBQUMzRix1QkFBdUIsMkRBQU0sQ0FBQyxpRUFBWTtBQUMxQywwQkFBMEIsb0VBQXlCO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcndpbHNvbi9EZXNrdG9wL3Byb2plY3RzL0VaVml6L25vZGVfbW9kdWxlcy9AYXp1cmUvc3RvcmFnZS1ibG9iL2Rpc3QtZXNtL3N0b3JhZ2UtYmxvYi9zcmMvU3RvcmFnZUNsaWVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbmltcG9ydCB7IFN0b3JhZ2VDb250ZXh0Q2xpZW50IH0gZnJvbSBcIi4vU3RvcmFnZUNvbnRleHRDbGllbnRcIjtcbmltcG9ydCB7IGdldENvcmVDbGllbnRPcHRpb25zLCBnZXRDcmVkZW50aWFsRnJvbVBpcGVsaW5lIH0gZnJvbSBcIi4vUGlwZWxpbmVcIjtcbmltcG9ydCB7IGVzY2FwZVVSTFBhdGgsIGdldFVSTFNjaGVtZSwgaUVxdWFsLCBnZXRBY2NvdW50TmFtZUZyb21VcmwgfSBmcm9tIFwiLi91dGlscy91dGlscy5jb21tb25cIjtcbi8qKlxuICogQSBTdG9yYWdlQ2xpZW50IHJlcHJlc2VudHMgYSBiYXNlZCBVUkwgY2xhc3MgZm9yIHtAbGluayBCbG9iU2VydmljZUNsaWVudH0sIHtAbGluayBDb250YWluZXJDbGllbnR9XG4gKiBhbmQgZXRjLlxuICovXG5leHBvcnQgY2xhc3MgU3RvcmFnZUNsaWVudCB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBTdG9yYWdlQ2xpZW50LlxuICAgICAqIEBwYXJhbSB1cmwgLSB1cmwgdG8gcmVzb3VyY2VcbiAgICAgKiBAcGFyYW0gcGlwZWxpbmUgLSByZXF1ZXN0IHBvbGljeSBwaXBlbGluZS5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcih1cmwsIHBpcGVsaW5lKSB7XG4gICAgICAgIC8vIFVSTCBzaG91bGQgYmUgZW5jb2RlZCBhbmQgb25seSBvbmNlLCBwcm90b2NvbCBsYXllciBzaG91bGRuJ3QgZW5jb2RlIFVSTCBhZ2FpblxuICAgICAgICB0aGlzLnVybCA9IGVzY2FwZVVSTFBhdGgodXJsKTtcbiAgICAgICAgdGhpcy5hY2NvdW50TmFtZSA9IGdldEFjY291bnROYW1lRnJvbVVybCh1cmwpO1xuICAgICAgICB0aGlzLnBpcGVsaW5lID0gcGlwZWxpbmU7XG4gICAgICAgIHRoaXMuc3RvcmFnZUNsaWVudENvbnRleHQgPSBuZXcgU3RvcmFnZUNvbnRleHRDbGllbnQodGhpcy51cmwsIGdldENvcmVDbGllbnRPcHRpb25zKHBpcGVsaW5lKSk7XG4gICAgICAgIHRoaXMuaXNIdHRwcyA9IGlFcXVhbChnZXRVUkxTY2hlbWUodGhpcy51cmwpIHx8IFwiXCIsIFwiaHR0cHNcIik7XG4gICAgICAgIHRoaXMuY3JlZGVudGlhbCA9IGdldENyZWRlbnRpYWxGcm9tUGlwZWxpbmUocGlwZWxpbmUpO1xuICAgICAgICAvLyBPdmVycmlkZSBwcm90b2NvbCBsYXllcidzIGRlZmF1bHQgY29udGVudC10eXBlXG4gICAgICAgIGNvbnN0IHN0b3JhZ2VDbGllbnRDb250ZXh0ID0gdGhpcy5zdG9yYWdlQ2xpZW50Q29udGV4dDtcbiAgICAgICAgc3RvcmFnZUNsaWVudENvbnRleHQucmVxdWVzdENvbnRlbnRUeXBlID0gdW5kZWZpbmVkO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN0b3JhZ2VDbGllbnQuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageClient.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageContextClient.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageContextClient.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StorageContextClient: () => (/* binding */ StorageContextClient)\n/* harmony export */ });\n/* harmony import */ var _generated_src__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./generated/src */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/storageClient.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * @internal\n */\nclass StorageContextClient extends _generated_src__WEBPACK_IMPORTED_MODULE_0__.StorageClient {\n    async sendOperationRequest(operationArguments, operationSpec) {\n        const operationSpecToSend = Object.assign({}, operationSpec);\n        if (operationSpecToSend.path === \"/{containerName}\" ||\n            operationSpecToSend.path === \"/{containerName}/{blob}\") {\n            operationSpecToSend.path = \"\";\n        }\n        return super.sendOperationRequest(operationArguments, operationSpecToSend);\n    }\n}\n//# sourceMappingURL=StorageContextClient.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL1N0b3JhZ2VDb250ZXh0Q2xpZW50LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNnRDtBQUNoRDtBQUNBO0FBQ0E7QUFDTyxtQ0FBbUMseURBQWE7QUFDdkQ7QUFDQSxvREFBb0Q7QUFDcEQsNENBQTRDLGNBQWM7QUFDMUQsNENBQTRDLGNBQWMsRUFBRSxLQUFLO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcndpbHNvbi9EZXNrdG9wL3Byb2plY3RzL0VaVml6L25vZGVfbW9kdWxlcy9AYXp1cmUvc3RvcmFnZS1ibG9iL2Rpc3QtZXNtL3N0b3JhZ2UtYmxvYi9zcmMvU3RvcmFnZUNvbnRleHRDbGllbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5pbXBvcnQgeyBTdG9yYWdlQ2xpZW50IH0gZnJvbSBcIi4vZ2VuZXJhdGVkL3NyY1wiO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNsYXNzIFN0b3JhZ2VDb250ZXh0Q2xpZW50IGV4dGVuZHMgU3RvcmFnZUNsaWVudCB7XG4gICAgYXN5bmMgc2VuZE9wZXJhdGlvblJlcXVlc3Qob3BlcmF0aW9uQXJndW1lbnRzLCBvcGVyYXRpb25TcGVjKSB7XG4gICAgICAgIGNvbnN0IG9wZXJhdGlvblNwZWNUb1NlbmQgPSBPYmplY3QuYXNzaWduKHt9LCBvcGVyYXRpb25TcGVjKTtcbiAgICAgICAgaWYgKG9wZXJhdGlvblNwZWNUb1NlbmQucGF0aCA9PT0gXCIve2NvbnRhaW5lck5hbWV9XCIgfHxcbiAgICAgICAgICAgIG9wZXJhdGlvblNwZWNUb1NlbmQucGF0aCA9PT0gXCIve2NvbnRhaW5lck5hbWV9L3tibG9ifVwiKSB7XG4gICAgICAgICAgICBvcGVyYXRpb25TcGVjVG9TZW5kLnBhdGggPSBcIlwiO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdXBlci5zZW5kT3BlcmF0aW9uUmVxdWVzdChvcGVyYXRpb25Bcmd1bWVudHMsIG9wZXJhdGlvblNwZWNUb1NlbmQpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN0b3JhZ2VDb250ZXh0Q2xpZW50LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageContextClient.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageRetryPolicyFactory.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageRetryPolicyFactory.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StorageRetryPolicy: () => (/* reexport safe */ _policies_StorageRetryPolicy__WEBPACK_IMPORTED_MODULE_0__.StorageRetryPolicy),\n/* harmony export */   StorageRetryPolicyFactory: () => (/* binding */ StorageRetryPolicyFactory),\n/* harmony export */   StorageRetryPolicyType: () => (/* reexport safe */ _policies_StorageRetryPolicy__WEBPACK_IMPORTED_MODULE_0__.StorageRetryPolicyType)\n/* harmony export */ });\n/* harmony import */ var _policies_StorageRetryPolicy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./policies/StorageRetryPolicy */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageRetryPolicy.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n/**\n * StorageRetryPolicyFactory is a factory class helping generating {@link StorageRetryPolicy} objects.\n */\nclass StorageRetryPolicyFactory {\n    /**\n     * Creates an instance of StorageRetryPolicyFactory.\n     * @param retryOptions -\n     */\n    constructor(retryOptions) {\n        this.retryOptions = retryOptions;\n    }\n    /**\n     * Creates a StorageRetryPolicy object.\n     *\n     * @param nextPolicy -\n     * @param options -\n     */\n    create(nextPolicy, options) {\n        return new _policies_StorageRetryPolicy__WEBPACK_IMPORTED_MODULE_0__.StorageRetryPolicy(nextPolicy, options, this.retryOptions);\n    }\n}\n//# sourceMappingURL=StorageRetryPolicyFactory.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL1N0b3JhZ2VSZXRyeVBvbGljeUZhY3RvcnkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDMkY7QUFDckM7QUFDdEQ7QUFDQSxvRUFBb0UsMEJBQTBCO0FBQzlGO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLDRFQUFrQjtBQUNyQztBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWN0b3J3aWxzb24vRGVza3RvcC9wcm9qZWN0cy9FWlZpei9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL1N0b3JhZ2VSZXRyeVBvbGljeUZhY3RvcnkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5pbXBvcnQgeyBTdG9yYWdlUmV0cnlQb2xpY3ksIFN0b3JhZ2VSZXRyeVBvbGljeVR5cGUgfSBmcm9tIFwiLi9wb2xpY2llcy9TdG9yYWdlUmV0cnlQb2xpY3lcIjtcbmV4cG9ydCB7IFN0b3JhZ2VSZXRyeVBvbGljeVR5cGUsIFN0b3JhZ2VSZXRyeVBvbGljeSB9O1xuLyoqXG4gKiBTdG9yYWdlUmV0cnlQb2xpY3lGYWN0b3J5IGlzIGEgZmFjdG9yeSBjbGFzcyBoZWxwaW5nIGdlbmVyYXRpbmcge0BsaW5rIFN0b3JhZ2VSZXRyeVBvbGljeX0gb2JqZWN0cy5cbiAqL1xuZXhwb3J0IGNsYXNzIFN0b3JhZ2VSZXRyeVBvbGljeUZhY3Rvcnkge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgU3RvcmFnZVJldHJ5UG9saWN5RmFjdG9yeS5cbiAgICAgKiBAcGFyYW0gcmV0cnlPcHRpb25zIC1cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihyZXRyeU9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5yZXRyeU9wdGlvbnMgPSByZXRyeU9wdGlvbnM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBTdG9yYWdlUmV0cnlQb2xpY3kgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHBhcmFtIG5leHRQb2xpY3kgLVxuICAgICAqIEBwYXJhbSBvcHRpb25zIC1cbiAgICAgKi9cbiAgICBjcmVhdGUobmV4dFBvbGljeSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbmV3IFN0b3JhZ2VSZXRyeVBvbGljeShuZXh0UG9saWN5LCBvcHRpb25zLCB0aGlzLnJldHJ5T3B0aW9ucyk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3RvcmFnZVJldHJ5UG9saWN5RmFjdG9yeS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageRetryPolicyFactory.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/AnonymousCredential.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/AnonymousCredential.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AnonymousCredential: () => (/* binding */ AnonymousCredential)\n/* harmony export */ });\n/* harmony import */ var _policies_AnonymousCredentialPolicy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../policies/AnonymousCredentialPolicy */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/AnonymousCredentialPolicy.js\");\n/* harmony import */ var _Credential__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Credential */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/Credential.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n/**\n * AnonymousCredential provides a credentialPolicyCreator member used to create\n * AnonymousCredentialPolicy objects. AnonymousCredentialPolicy is used with\n * HTTP(S) requests that read public resources or for use with Shared Access\n * Signatures (SAS).\n */\nclass AnonymousCredential extends _Credential__WEBPACK_IMPORTED_MODULE_0__.Credential {\n    /**\n     * Creates an {@link AnonymousCredentialPolicy} object.\n     *\n     * @param nextPolicy -\n     * @param options -\n     */\n    create(nextPolicy, options) {\n        return new _policies_AnonymousCredentialPolicy__WEBPACK_IMPORTED_MODULE_1__.AnonymousCredentialPolicy(nextPolicy, options);\n    }\n}\n//# sourceMappingURL=AnonymousCredential.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL2NyZWRlbnRpYWxzL0Fub255bW91c0NyZWRlbnRpYWwuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNrRjtBQUN4QztBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxrQ0FBa0MsbURBQVU7QUFDbkQ7QUFDQSxtQkFBbUIsaUNBQWlDO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsMEZBQXlCO0FBQzVDO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcndpbHNvbi9EZXNrdG9wL3Byb2plY3RzL0VaVml6L25vZGVfbW9kdWxlcy9AYXp1cmUvc3RvcmFnZS1ibG9iL2Rpc3QtZXNtL3N0b3JhZ2UtYmxvYi9zcmMvY3JlZGVudGlhbHMvQW5vbnltb3VzQ3JlZGVudGlhbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbmltcG9ydCB7IEFub255bW91c0NyZWRlbnRpYWxQb2xpY3kgfSBmcm9tIFwiLi4vcG9saWNpZXMvQW5vbnltb3VzQ3JlZGVudGlhbFBvbGljeVwiO1xuaW1wb3J0IHsgQ3JlZGVudGlhbCB9IGZyb20gXCIuL0NyZWRlbnRpYWxcIjtcbi8qKlxuICogQW5vbnltb3VzQ3JlZGVudGlhbCBwcm92aWRlcyBhIGNyZWRlbnRpYWxQb2xpY3lDcmVhdG9yIG1lbWJlciB1c2VkIHRvIGNyZWF0ZVxuICogQW5vbnltb3VzQ3JlZGVudGlhbFBvbGljeSBvYmplY3RzLiBBbm9ueW1vdXNDcmVkZW50aWFsUG9saWN5IGlzIHVzZWQgd2l0aFxuICogSFRUUChTKSByZXF1ZXN0cyB0aGF0IHJlYWQgcHVibGljIHJlc291cmNlcyBvciBmb3IgdXNlIHdpdGggU2hhcmVkIEFjY2Vzc1xuICogU2lnbmF0dXJlcyAoU0FTKS5cbiAqL1xuZXhwb3J0IGNsYXNzIEFub255bW91c0NyZWRlbnRpYWwgZXh0ZW5kcyBDcmVkZW50aWFsIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIHtAbGluayBBbm9ueW1vdXNDcmVkZW50aWFsUG9saWN5fSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbmV4dFBvbGljeSAtXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLVxuICAgICAqL1xuICAgIGNyZWF0ZShuZXh0UG9saWN5LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBuZXcgQW5vbnltb3VzQ3JlZGVudGlhbFBvbGljeShuZXh0UG9saWN5LCBvcHRpb25zKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Bbm9ueW1vdXNDcmVkZW50aWFsLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/AnonymousCredential.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/Credential.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/Credential.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Credential: () => (/* binding */ Credential)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * Credential is an abstract class for Azure Storage HTTP requests signing. This\n * class will host an credentialPolicyCreator factory which generates CredentialPolicy.\n */\nclass Credential {\n    /**\n     * Creates a RequestPolicy object.\n     *\n     * @param _nextPolicy -\n     * @param _options -\n     */\n    create(_nextPolicy, _options) {\n        throw new Error(\"Method should be implemented in children classes.\");\n    }\n}\n//# sourceMappingURL=Credential.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL2NyZWRlbnRpYWxzL0NyZWRlbnRpYWwuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcndpbHNvbi9EZXNrdG9wL3Byb2plY3RzL0VaVml6L25vZGVfbW9kdWxlcy9AYXp1cmUvc3RvcmFnZS1ibG9iL2Rpc3QtZXNtL3N0b3JhZ2UtYmxvYi9zcmMvY3JlZGVudGlhbHMvQ3JlZGVudGlhbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbi8qKlxuICogQ3JlZGVudGlhbCBpcyBhbiBhYnN0cmFjdCBjbGFzcyBmb3IgQXp1cmUgU3RvcmFnZSBIVFRQIHJlcXVlc3RzIHNpZ25pbmcuIFRoaXNcbiAqIGNsYXNzIHdpbGwgaG9zdCBhbiBjcmVkZW50aWFsUG9saWN5Q3JlYXRvciBmYWN0b3J5IHdoaWNoIGdlbmVyYXRlcyBDcmVkZW50aWFsUG9saWN5LlxuICovXG5leHBvcnQgY2xhc3MgQ3JlZGVudGlhbCB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIFJlcXVlc3RQb2xpY3kgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHBhcmFtIF9uZXh0UG9saWN5IC1cbiAgICAgKiBAcGFyYW0gX29wdGlvbnMgLVxuICAgICAqL1xuICAgIGNyZWF0ZShfbmV4dFBvbGljeSwgX29wdGlvbnMpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWV0aG9kIHNob3VsZCBiZSBpbXBsZW1lbnRlZCBpbiBjaGlsZHJlbiBjbGFzc2VzLlwiKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1DcmVkZW50aWFsLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/Credential.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/StorageSharedKeyCredential.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/StorageSharedKeyCredential.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StorageSharedKeyCredential: () => (/* binding */ StorageSharedKeyCredential)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _policies_StorageSharedKeyCredentialPolicy__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../policies/StorageSharedKeyCredentialPolicy */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageSharedKeyCredentialPolicy.js\");\n/* harmony import */ var _Credential__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Credential */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/Credential.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * StorageSharedKeyCredential for account key authorization of Azure Storage service.\n */\nclass StorageSharedKeyCredential extends _Credential__WEBPACK_IMPORTED_MODULE_1__.Credential {\n    /**\n     * Creates an instance of StorageSharedKeyCredential.\n     * @param accountName -\n     * @param accountKey -\n     */\n    constructor(accountName, accountKey) {\n        super();\n        this.accountName = accountName;\n        this.accountKey = Buffer.from(accountKey, \"base64\");\n    }\n    /**\n     * Creates a StorageSharedKeyCredentialPolicy object.\n     *\n     * @param nextPolicy -\n     * @param options -\n     */\n    create(nextPolicy, options) {\n        return new _policies_StorageSharedKeyCredentialPolicy__WEBPACK_IMPORTED_MODULE_2__.StorageSharedKeyCredentialPolicy(nextPolicy, options, this);\n    }\n    /**\n     * Generates a hash signature for an HTTP request or for a SAS.\n     *\n     * @param stringToSign -\n     */\n    computeHMACSHA256(stringToSign) {\n        return (0,crypto__WEBPACK_IMPORTED_MODULE_0__.createHmac)(\"sha256\", this.accountKey).update(stringToSign, \"utf8\").digest(\"base64\");\n    }\n}\n//# sourceMappingURL=StorageSharedKeyCredential.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL2NyZWRlbnRpYWxzL1N0b3JhZ2VTaGFyZWRLZXlDcmVkZW50aWFsLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNvQztBQUM0RDtBQUN0RDtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08seUNBQXlDLG1EQUFVO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsd0dBQWdDO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxrREFBVTtBQUN6QjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWN0b3J3aWxzb24vRGVza3RvcC9wcm9qZWN0cy9FWlZpei9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL2NyZWRlbnRpYWxzL1N0b3JhZ2VTaGFyZWRLZXlDcmVkZW50aWFsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuaW1wb3J0IHsgY3JlYXRlSG1hYyB9IGZyb20gXCJjcnlwdG9cIjtcbmltcG9ydCB7IFN0b3JhZ2VTaGFyZWRLZXlDcmVkZW50aWFsUG9saWN5IH0gZnJvbSBcIi4uL3BvbGljaWVzL1N0b3JhZ2VTaGFyZWRLZXlDcmVkZW50aWFsUG9saWN5XCI7XG5pbXBvcnQgeyBDcmVkZW50aWFsIH0gZnJvbSBcIi4vQ3JlZGVudGlhbFwiO1xuLyoqXG4gKiBPTkxZIEFWQUlMQUJMRSBJTiBOT0RFLkpTIFJVTlRJTUUuXG4gKlxuICogU3RvcmFnZVNoYXJlZEtleUNyZWRlbnRpYWwgZm9yIGFjY291bnQga2V5IGF1dGhvcml6YXRpb24gb2YgQXp1cmUgU3RvcmFnZSBzZXJ2aWNlLlxuICovXG5leHBvcnQgY2xhc3MgU3RvcmFnZVNoYXJlZEtleUNyZWRlbnRpYWwgZXh0ZW5kcyBDcmVkZW50aWFsIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIFN0b3JhZ2VTaGFyZWRLZXlDcmVkZW50aWFsLlxuICAgICAqIEBwYXJhbSBhY2NvdW50TmFtZSAtXG4gICAgICogQHBhcmFtIGFjY291bnRLZXkgLVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGFjY291bnROYW1lLCBhY2NvdW50S2V5KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuYWNjb3VudE5hbWUgPSBhY2NvdW50TmFtZTtcbiAgICAgICAgdGhpcy5hY2NvdW50S2V5ID0gQnVmZmVyLmZyb20oYWNjb3VudEtleSwgXCJiYXNlNjRcIik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBTdG9yYWdlU2hhcmVkS2V5Q3JlZGVudGlhbFBvbGljeSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbmV4dFBvbGljeSAtXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLVxuICAgICAqL1xuICAgIGNyZWF0ZShuZXh0UG9saWN5LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBuZXcgU3RvcmFnZVNoYXJlZEtleUNyZWRlbnRpYWxQb2xpY3kobmV4dFBvbGljeSwgb3B0aW9ucywgdGhpcyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyBhIGhhc2ggc2lnbmF0dXJlIGZvciBhbiBIVFRQIHJlcXVlc3Qgb3IgZm9yIGEgU0FTLlxuICAgICAqXG4gICAgICogQHBhcmFtIHN0cmluZ1RvU2lnbiAtXG4gICAgICovXG4gICAgY29tcHV0ZUhNQUNTSEEyNTYoc3RyaW5nVG9TaWduKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVIbWFjKFwic2hhMjU2XCIsIHRoaXMuYWNjb3VudEtleSkudXBkYXRlKHN0cmluZ1RvU2lnbiwgXCJ1dGY4XCIpLmRpZ2VzdChcImJhc2U2NFwiKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TdG9yYWdlU2hhcmVkS2V5Q3JlZGVudGlhbC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/StorageSharedKeyCredential.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/UserDelegationKeyCredential.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/UserDelegationKeyCredential.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UserDelegationKeyCredential: () => (/* binding */ UserDelegationKeyCredential)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * UserDelegationKeyCredential is only used for generation of user delegation SAS.\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-user-delegation-sas\n */\nclass UserDelegationKeyCredential {\n    /**\n     * Creates an instance of UserDelegationKeyCredential.\n     * @param accountName -\n     * @param userDelegationKey -\n     */\n    constructor(accountName, userDelegationKey) {\n        this.accountName = accountName;\n        this.userDelegationKey = userDelegationKey;\n        this.key = Buffer.from(userDelegationKey.value, \"base64\");\n    }\n    /**\n     * Generates a hash signature for an HTTP request or for a SAS.\n     *\n     * @param stringToSign -\n     */\n    computeHMACSHA256(stringToSign) {\n        // console.log(`stringToSign: ${JSON.stringify(stringToSign)}`);\n        return (0,crypto__WEBPACK_IMPORTED_MODULE_0__.createHmac)(\"sha256\", this.key).update(stringToSign, \"utf8\").digest(\"base64\");\n    }\n}\n//# sourceMappingURL=UserDelegationKeyCredential.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL2NyZWRlbnRpYWxzL1VzZXJEZWxlZ2F0aW9uS2V5Q3JlZGVudGlhbC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ29DO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0MsNkJBQTZCO0FBQ3JFLGVBQWUsa0RBQVU7QUFDekI7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvdmljdG9yd2lsc29uL0Rlc2t0b3AvcHJvamVjdHMvRVpWaXovbm9kZV9tb2R1bGVzL0BhenVyZS9zdG9yYWdlLWJsb2IvZGlzdC1lc20vc3RvcmFnZS1ibG9iL3NyYy9jcmVkZW50aWFscy9Vc2VyRGVsZWdhdGlvbktleUNyZWRlbnRpYWwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5pbXBvcnQgeyBjcmVhdGVIbWFjIH0gZnJvbSBcImNyeXB0b1wiO1xuLyoqXG4gKiBPTkxZIEFWQUlMQUJMRSBJTiBOT0RFLkpTIFJVTlRJTUUuXG4gKlxuICogVXNlckRlbGVnYXRpb25LZXlDcmVkZW50aWFsIGlzIG9ubHkgdXNlZCBmb3IgZ2VuZXJhdGlvbiBvZiB1c2VyIGRlbGVnYXRpb24gU0FTLlxuICogQHNlZSBodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9lbi11cy9yZXN0L2FwaS9zdG9yYWdlc2VydmljZXMvY3JlYXRlLXVzZXItZGVsZWdhdGlvbi1zYXNcbiAqL1xuZXhwb3J0IGNsYXNzIFVzZXJEZWxlZ2F0aW9uS2V5Q3JlZGVudGlhbCB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBVc2VyRGVsZWdhdGlvbktleUNyZWRlbnRpYWwuXG4gICAgICogQHBhcmFtIGFjY291bnROYW1lIC1cbiAgICAgKiBAcGFyYW0gdXNlckRlbGVnYXRpb25LZXkgLVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGFjY291bnROYW1lLCB1c2VyRGVsZWdhdGlvbktleSkge1xuICAgICAgICB0aGlzLmFjY291bnROYW1lID0gYWNjb3VudE5hbWU7XG4gICAgICAgIHRoaXMudXNlckRlbGVnYXRpb25LZXkgPSB1c2VyRGVsZWdhdGlvbktleTtcbiAgICAgICAgdGhpcy5rZXkgPSBCdWZmZXIuZnJvbSh1c2VyRGVsZWdhdGlvbktleS52YWx1ZSwgXCJiYXNlNjRcIik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyBhIGhhc2ggc2lnbmF0dXJlIGZvciBhbiBIVFRQIHJlcXVlc3Qgb3IgZm9yIGEgU0FTLlxuICAgICAqXG4gICAgICogQHBhcmFtIHN0cmluZ1RvU2lnbiAtXG4gICAgICovXG4gICAgY29tcHV0ZUhNQUNTSEEyNTYoc3RyaW5nVG9TaWduKSB7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGBzdHJpbmdUb1NpZ246ICR7SlNPTi5zdHJpbmdpZnkoc3RyaW5nVG9TaWduKX1gKTtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUhtYWMoXCJzaGEyNTZcIiwgdGhpcy5rZXkpLnVwZGF0ZShzdHJpbmdUb1NpZ24sIFwidXRmOFwiKS5kaWdlc3QoXCJiYXNlNjRcIik7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VXNlckRlbGVnYXRpb25LZXlDcmVkZW50aWFsLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/UserDelegationKeyCredential.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/mappers.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/mappers.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AccessPolicy: () => (/* binding */ AccessPolicy),\n/* harmony export */   AppendBlobAppendBlockExceptionHeaders: () => (/* binding */ AppendBlobAppendBlockExceptionHeaders),\n/* harmony export */   AppendBlobAppendBlockFromUrlExceptionHeaders: () => (/* binding */ AppendBlobAppendBlockFromUrlExceptionHeaders),\n/* harmony export */   AppendBlobAppendBlockFromUrlHeaders: () => (/* binding */ AppendBlobAppendBlockFromUrlHeaders),\n/* harmony export */   AppendBlobAppendBlockHeaders: () => (/* binding */ AppendBlobAppendBlockHeaders),\n/* harmony export */   AppendBlobCreateExceptionHeaders: () => (/* binding */ AppendBlobCreateExceptionHeaders),\n/* harmony export */   AppendBlobCreateHeaders: () => (/* binding */ AppendBlobCreateHeaders),\n/* harmony export */   AppendBlobSealExceptionHeaders: () => (/* binding */ AppendBlobSealExceptionHeaders),\n/* harmony export */   AppendBlobSealHeaders: () => (/* binding */ AppendBlobSealHeaders),\n/* harmony export */   ArrowConfiguration: () => (/* binding */ ArrowConfiguration),\n/* harmony export */   ArrowField: () => (/* binding */ ArrowField),\n/* harmony export */   BlobAbortCopyFromURLExceptionHeaders: () => (/* binding */ BlobAbortCopyFromURLExceptionHeaders),\n/* harmony export */   BlobAbortCopyFromURLHeaders: () => (/* binding */ BlobAbortCopyFromURLHeaders),\n/* harmony export */   BlobAcquireLeaseExceptionHeaders: () => (/* binding */ BlobAcquireLeaseExceptionHeaders),\n/* harmony export */   BlobAcquireLeaseHeaders: () => (/* binding */ BlobAcquireLeaseHeaders),\n/* harmony export */   BlobBreakLeaseExceptionHeaders: () => (/* binding */ BlobBreakLeaseExceptionHeaders),\n/* harmony export */   BlobBreakLeaseHeaders: () => (/* binding */ BlobBreakLeaseHeaders),\n/* harmony export */   BlobChangeLeaseExceptionHeaders: () => (/* binding */ BlobChangeLeaseExceptionHeaders),\n/* harmony export */   BlobChangeLeaseHeaders: () => (/* binding */ BlobChangeLeaseHeaders),\n/* harmony export */   BlobCopyFromURLExceptionHeaders: () => (/* binding */ BlobCopyFromURLExceptionHeaders),\n/* harmony export */   BlobCopyFromURLHeaders: () => (/* binding */ BlobCopyFromURLHeaders),\n/* harmony export */   BlobCreateSnapshotExceptionHeaders: () => (/* binding */ BlobCreateSnapshotExceptionHeaders),\n/* harmony export */   BlobCreateSnapshotHeaders: () => (/* binding */ BlobCreateSnapshotHeaders),\n/* harmony export */   BlobDeleteExceptionHeaders: () => (/* binding */ BlobDeleteExceptionHeaders),\n/* harmony export */   BlobDeleteHeaders: () => (/* binding */ BlobDeleteHeaders),\n/* harmony export */   BlobDeleteImmutabilityPolicyExceptionHeaders: () => (/* binding */ BlobDeleteImmutabilityPolicyExceptionHeaders),\n/* harmony export */   BlobDeleteImmutabilityPolicyHeaders: () => (/* binding */ BlobDeleteImmutabilityPolicyHeaders),\n/* harmony export */   BlobDownloadExceptionHeaders: () => (/* binding */ BlobDownloadExceptionHeaders),\n/* harmony export */   BlobDownloadHeaders: () => (/* binding */ BlobDownloadHeaders),\n/* harmony export */   BlobFlatListSegment: () => (/* binding */ BlobFlatListSegment),\n/* harmony export */   BlobGetAccountInfoExceptionHeaders: () => (/* binding */ BlobGetAccountInfoExceptionHeaders),\n/* harmony export */   BlobGetAccountInfoHeaders: () => (/* binding */ BlobGetAccountInfoHeaders),\n/* harmony export */   BlobGetPropertiesExceptionHeaders: () => (/* binding */ BlobGetPropertiesExceptionHeaders),\n/* harmony export */   BlobGetPropertiesHeaders: () => (/* binding */ BlobGetPropertiesHeaders),\n/* harmony export */   BlobGetTagsExceptionHeaders: () => (/* binding */ BlobGetTagsExceptionHeaders),\n/* harmony export */   BlobGetTagsHeaders: () => (/* binding */ BlobGetTagsHeaders),\n/* harmony export */   BlobHierarchyListSegment: () => (/* binding */ BlobHierarchyListSegment),\n/* harmony export */   BlobItemInternal: () => (/* binding */ BlobItemInternal),\n/* harmony export */   BlobName: () => (/* binding */ BlobName),\n/* harmony export */   BlobPrefix: () => (/* binding */ BlobPrefix),\n/* harmony export */   BlobPropertiesInternal: () => (/* binding */ BlobPropertiesInternal),\n/* harmony export */   BlobQueryExceptionHeaders: () => (/* binding */ BlobQueryExceptionHeaders),\n/* harmony export */   BlobQueryHeaders: () => (/* binding */ BlobQueryHeaders),\n/* harmony export */   BlobReleaseLeaseExceptionHeaders: () => (/* binding */ BlobReleaseLeaseExceptionHeaders),\n/* harmony export */   BlobReleaseLeaseHeaders: () => (/* binding */ BlobReleaseLeaseHeaders),\n/* harmony export */   BlobRenewLeaseExceptionHeaders: () => (/* binding */ BlobRenewLeaseExceptionHeaders),\n/* harmony export */   BlobRenewLeaseHeaders: () => (/* binding */ BlobRenewLeaseHeaders),\n/* harmony export */   BlobServiceProperties: () => (/* binding */ BlobServiceProperties),\n/* harmony export */   BlobServiceStatistics: () => (/* binding */ BlobServiceStatistics),\n/* harmony export */   BlobSetExpiryExceptionHeaders: () => (/* binding */ BlobSetExpiryExceptionHeaders),\n/* harmony export */   BlobSetExpiryHeaders: () => (/* binding */ BlobSetExpiryHeaders),\n/* harmony export */   BlobSetHttpHeadersExceptionHeaders: () => (/* binding */ BlobSetHttpHeadersExceptionHeaders),\n/* harmony export */   BlobSetHttpHeadersHeaders: () => (/* binding */ BlobSetHttpHeadersHeaders),\n/* harmony export */   BlobSetImmutabilityPolicyExceptionHeaders: () => (/* binding */ BlobSetImmutabilityPolicyExceptionHeaders),\n/* harmony export */   BlobSetImmutabilityPolicyHeaders: () => (/* binding */ BlobSetImmutabilityPolicyHeaders),\n/* harmony export */   BlobSetLegalHoldExceptionHeaders: () => (/* binding */ BlobSetLegalHoldExceptionHeaders),\n/* harmony export */   BlobSetLegalHoldHeaders: () => (/* binding */ BlobSetLegalHoldHeaders),\n/* harmony export */   BlobSetMetadataExceptionHeaders: () => (/* binding */ BlobSetMetadataExceptionHeaders),\n/* harmony export */   BlobSetMetadataHeaders: () => (/* binding */ BlobSetMetadataHeaders),\n/* harmony export */   BlobSetTagsExceptionHeaders: () => (/* binding */ BlobSetTagsExceptionHeaders),\n/* harmony export */   BlobSetTagsHeaders: () => (/* binding */ BlobSetTagsHeaders),\n/* harmony export */   BlobSetTierExceptionHeaders: () => (/* binding */ BlobSetTierExceptionHeaders),\n/* harmony export */   BlobSetTierHeaders: () => (/* binding */ BlobSetTierHeaders),\n/* harmony export */   BlobStartCopyFromURLExceptionHeaders: () => (/* binding */ BlobStartCopyFromURLExceptionHeaders),\n/* harmony export */   BlobStartCopyFromURLHeaders: () => (/* binding */ BlobStartCopyFromURLHeaders),\n/* harmony export */   BlobTag: () => (/* binding */ BlobTag),\n/* harmony export */   BlobTags: () => (/* binding */ BlobTags),\n/* harmony export */   BlobUndeleteExceptionHeaders: () => (/* binding */ BlobUndeleteExceptionHeaders),\n/* harmony export */   BlobUndeleteHeaders: () => (/* binding */ BlobUndeleteHeaders),\n/* harmony export */   Block: () => (/* binding */ Block),\n/* harmony export */   BlockBlobCommitBlockListExceptionHeaders: () => (/* binding */ BlockBlobCommitBlockListExceptionHeaders),\n/* harmony export */   BlockBlobCommitBlockListHeaders: () => (/* binding */ BlockBlobCommitBlockListHeaders),\n/* harmony export */   BlockBlobGetBlockListExceptionHeaders: () => (/* binding */ BlockBlobGetBlockListExceptionHeaders),\n/* harmony export */   BlockBlobGetBlockListHeaders: () => (/* binding */ BlockBlobGetBlockListHeaders),\n/* harmony export */   BlockBlobPutBlobFromUrlExceptionHeaders: () => (/* binding */ BlockBlobPutBlobFromUrlExceptionHeaders),\n/* harmony export */   BlockBlobPutBlobFromUrlHeaders: () => (/* binding */ BlockBlobPutBlobFromUrlHeaders),\n/* harmony export */   BlockBlobStageBlockExceptionHeaders: () => (/* binding */ BlockBlobStageBlockExceptionHeaders),\n/* harmony export */   BlockBlobStageBlockFromURLExceptionHeaders: () => (/* binding */ BlockBlobStageBlockFromURLExceptionHeaders),\n/* harmony export */   BlockBlobStageBlockFromURLHeaders: () => (/* binding */ BlockBlobStageBlockFromURLHeaders),\n/* harmony export */   BlockBlobStageBlockHeaders: () => (/* binding */ BlockBlobStageBlockHeaders),\n/* harmony export */   BlockBlobUploadExceptionHeaders: () => (/* binding */ BlockBlobUploadExceptionHeaders),\n/* harmony export */   BlockBlobUploadHeaders: () => (/* binding */ BlockBlobUploadHeaders),\n/* harmony export */   BlockList: () => (/* binding */ BlockList),\n/* harmony export */   BlockLookupList: () => (/* binding */ BlockLookupList),\n/* harmony export */   ClearRange: () => (/* binding */ ClearRange),\n/* harmony export */   ContainerAcquireLeaseExceptionHeaders: () => (/* binding */ ContainerAcquireLeaseExceptionHeaders),\n/* harmony export */   ContainerAcquireLeaseHeaders: () => (/* binding */ ContainerAcquireLeaseHeaders),\n/* harmony export */   ContainerBreakLeaseExceptionHeaders: () => (/* binding */ ContainerBreakLeaseExceptionHeaders),\n/* harmony export */   ContainerBreakLeaseHeaders: () => (/* binding */ ContainerBreakLeaseHeaders),\n/* harmony export */   ContainerChangeLeaseExceptionHeaders: () => (/* binding */ ContainerChangeLeaseExceptionHeaders),\n/* harmony export */   ContainerChangeLeaseHeaders: () => (/* binding */ ContainerChangeLeaseHeaders),\n/* harmony export */   ContainerCreateExceptionHeaders: () => (/* binding */ ContainerCreateExceptionHeaders),\n/* harmony export */   ContainerCreateHeaders: () => (/* binding */ ContainerCreateHeaders),\n/* harmony export */   ContainerDeleteExceptionHeaders: () => (/* binding */ ContainerDeleteExceptionHeaders),\n/* harmony export */   ContainerDeleteHeaders: () => (/* binding */ ContainerDeleteHeaders),\n/* harmony export */   ContainerFilterBlobsExceptionHeaders: () => (/* binding */ ContainerFilterBlobsExceptionHeaders),\n/* harmony export */   ContainerFilterBlobsHeaders: () => (/* binding */ ContainerFilterBlobsHeaders),\n/* harmony export */   ContainerGetAccessPolicyExceptionHeaders: () => (/* binding */ ContainerGetAccessPolicyExceptionHeaders),\n/* harmony export */   ContainerGetAccessPolicyHeaders: () => (/* binding */ ContainerGetAccessPolicyHeaders),\n/* harmony export */   ContainerGetAccountInfoExceptionHeaders: () => (/* binding */ ContainerGetAccountInfoExceptionHeaders),\n/* harmony export */   ContainerGetAccountInfoHeaders: () => (/* binding */ ContainerGetAccountInfoHeaders),\n/* harmony export */   ContainerGetPropertiesExceptionHeaders: () => (/* binding */ ContainerGetPropertiesExceptionHeaders),\n/* harmony export */   ContainerGetPropertiesHeaders: () => (/* binding */ ContainerGetPropertiesHeaders),\n/* harmony export */   ContainerItem: () => (/* binding */ ContainerItem),\n/* harmony export */   ContainerListBlobFlatSegmentExceptionHeaders: () => (/* binding */ ContainerListBlobFlatSegmentExceptionHeaders),\n/* harmony export */   ContainerListBlobFlatSegmentHeaders: () => (/* binding */ ContainerListBlobFlatSegmentHeaders),\n/* harmony export */   ContainerListBlobHierarchySegmentExceptionHeaders: () => (/* binding */ ContainerListBlobHierarchySegmentExceptionHeaders),\n/* harmony export */   ContainerListBlobHierarchySegmentHeaders: () => (/* binding */ ContainerListBlobHierarchySegmentHeaders),\n/* harmony export */   ContainerProperties: () => (/* binding */ ContainerProperties),\n/* harmony export */   ContainerReleaseLeaseExceptionHeaders: () => (/* binding */ ContainerReleaseLeaseExceptionHeaders),\n/* harmony export */   ContainerReleaseLeaseHeaders: () => (/* binding */ ContainerReleaseLeaseHeaders),\n/* harmony export */   ContainerRenameExceptionHeaders: () => (/* binding */ ContainerRenameExceptionHeaders),\n/* harmony export */   ContainerRenameHeaders: () => (/* binding */ ContainerRenameHeaders),\n/* harmony export */   ContainerRenewLeaseExceptionHeaders: () => (/* binding */ ContainerRenewLeaseExceptionHeaders),\n/* harmony export */   ContainerRenewLeaseHeaders: () => (/* binding */ ContainerRenewLeaseHeaders),\n/* harmony export */   ContainerRestoreExceptionHeaders: () => (/* binding */ ContainerRestoreExceptionHeaders),\n/* harmony export */   ContainerRestoreHeaders: () => (/* binding */ ContainerRestoreHeaders),\n/* harmony export */   ContainerSetAccessPolicyExceptionHeaders: () => (/* binding */ ContainerSetAccessPolicyExceptionHeaders),\n/* harmony export */   ContainerSetAccessPolicyHeaders: () => (/* binding */ ContainerSetAccessPolicyHeaders),\n/* harmony export */   ContainerSetMetadataExceptionHeaders: () => (/* binding */ ContainerSetMetadataExceptionHeaders),\n/* harmony export */   ContainerSetMetadataHeaders: () => (/* binding */ ContainerSetMetadataHeaders),\n/* harmony export */   ContainerSubmitBatchExceptionHeaders: () => (/* binding */ ContainerSubmitBatchExceptionHeaders),\n/* harmony export */   ContainerSubmitBatchHeaders: () => (/* binding */ ContainerSubmitBatchHeaders),\n/* harmony export */   CorsRule: () => (/* binding */ CorsRule),\n/* harmony export */   DelimitedTextConfiguration: () => (/* binding */ DelimitedTextConfiguration),\n/* harmony export */   FilterBlobItem: () => (/* binding */ FilterBlobItem),\n/* harmony export */   FilterBlobSegment: () => (/* binding */ FilterBlobSegment),\n/* harmony export */   GeoReplication: () => (/* binding */ GeoReplication),\n/* harmony export */   JsonTextConfiguration: () => (/* binding */ JsonTextConfiguration),\n/* harmony export */   KeyInfo: () => (/* binding */ KeyInfo),\n/* harmony export */   ListBlobsFlatSegmentResponse: () => (/* binding */ ListBlobsFlatSegmentResponse),\n/* harmony export */   ListBlobsHierarchySegmentResponse: () => (/* binding */ ListBlobsHierarchySegmentResponse),\n/* harmony export */   ListContainersSegmentResponse: () => (/* binding */ ListContainersSegmentResponse),\n/* harmony export */   Logging: () => (/* binding */ Logging),\n/* harmony export */   Metrics: () => (/* binding */ Metrics),\n/* harmony export */   PageBlobClearPagesExceptionHeaders: () => (/* binding */ PageBlobClearPagesExceptionHeaders),\n/* harmony export */   PageBlobClearPagesHeaders: () => (/* binding */ PageBlobClearPagesHeaders),\n/* harmony export */   PageBlobCopyIncrementalExceptionHeaders: () => (/* binding */ PageBlobCopyIncrementalExceptionHeaders),\n/* harmony export */   PageBlobCopyIncrementalHeaders: () => (/* binding */ PageBlobCopyIncrementalHeaders),\n/* harmony export */   PageBlobCreateExceptionHeaders: () => (/* binding */ PageBlobCreateExceptionHeaders),\n/* harmony export */   PageBlobCreateHeaders: () => (/* binding */ PageBlobCreateHeaders),\n/* harmony export */   PageBlobGetPageRangesDiffExceptionHeaders: () => (/* binding */ PageBlobGetPageRangesDiffExceptionHeaders),\n/* harmony export */   PageBlobGetPageRangesDiffHeaders: () => (/* binding */ PageBlobGetPageRangesDiffHeaders),\n/* harmony export */   PageBlobGetPageRangesExceptionHeaders: () => (/* binding */ PageBlobGetPageRangesExceptionHeaders),\n/* harmony export */   PageBlobGetPageRangesHeaders: () => (/* binding */ PageBlobGetPageRangesHeaders),\n/* harmony export */   PageBlobResizeExceptionHeaders: () => (/* binding */ PageBlobResizeExceptionHeaders),\n/* harmony export */   PageBlobResizeHeaders: () => (/* binding */ PageBlobResizeHeaders),\n/* harmony export */   PageBlobUpdateSequenceNumberExceptionHeaders: () => (/* binding */ PageBlobUpdateSequenceNumberExceptionHeaders),\n/* harmony export */   PageBlobUpdateSequenceNumberHeaders: () => (/* binding */ PageBlobUpdateSequenceNumberHeaders),\n/* harmony export */   PageBlobUploadPagesExceptionHeaders: () => (/* binding */ PageBlobUploadPagesExceptionHeaders),\n/* harmony export */   PageBlobUploadPagesFromURLExceptionHeaders: () => (/* binding */ PageBlobUploadPagesFromURLExceptionHeaders),\n/* harmony export */   PageBlobUploadPagesFromURLHeaders: () => (/* binding */ PageBlobUploadPagesFromURLHeaders),\n/* harmony export */   PageBlobUploadPagesHeaders: () => (/* binding */ PageBlobUploadPagesHeaders),\n/* harmony export */   PageList: () => (/* binding */ PageList),\n/* harmony export */   PageRange: () => (/* binding */ PageRange),\n/* harmony export */   QueryFormat: () => (/* binding */ QueryFormat),\n/* harmony export */   QueryRequest: () => (/* binding */ QueryRequest),\n/* harmony export */   QuerySerialization: () => (/* binding */ QuerySerialization),\n/* harmony export */   RetentionPolicy: () => (/* binding */ RetentionPolicy),\n/* harmony export */   ServiceFilterBlobsExceptionHeaders: () => (/* binding */ ServiceFilterBlobsExceptionHeaders),\n/* harmony export */   ServiceFilterBlobsHeaders: () => (/* binding */ ServiceFilterBlobsHeaders),\n/* harmony export */   ServiceGetAccountInfoExceptionHeaders: () => (/* binding */ ServiceGetAccountInfoExceptionHeaders),\n/* harmony export */   ServiceGetAccountInfoHeaders: () => (/* binding */ ServiceGetAccountInfoHeaders),\n/* harmony export */   ServiceGetPropertiesExceptionHeaders: () => (/* binding */ ServiceGetPropertiesExceptionHeaders),\n/* harmony export */   ServiceGetPropertiesHeaders: () => (/* binding */ ServiceGetPropertiesHeaders),\n/* harmony export */   ServiceGetStatisticsExceptionHeaders: () => (/* binding */ ServiceGetStatisticsExceptionHeaders),\n/* harmony export */   ServiceGetStatisticsHeaders: () => (/* binding */ ServiceGetStatisticsHeaders),\n/* harmony export */   ServiceGetUserDelegationKeyExceptionHeaders: () => (/* binding */ ServiceGetUserDelegationKeyExceptionHeaders),\n/* harmony export */   ServiceGetUserDelegationKeyHeaders: () => (/* binding */ ServiceGetUserDelegationKeyHeaders),\n/* harmony export */   ServiceListContainersSegmentExceptionHeaders: () => (/* binding */ ServiceListContainersSegmentExceptionHeaders),\n/* harmony export */   ServiceListContainersSegmentHeaders: () => (/* binding */ ServiceListContainersSegmentHeaders),\n/* harmony export */   ServiceSetPropertiesExceptionHeaders: () => (/* binding */ ServiceSetPropertiesExceptionHeaders),\n/* harmony export */   ServiceSetPropertiesHeaders: () => (/* binding */ ServiceSetPropertiesHeaders),\n/* harmony export */   ServiceSubmitBatchExceptionHeaders: () => (/* binding */ ServiceSubmitBatchExceptionHeaders),\n/* harmony export */   ServiceSubmitBatchHeaders: () => (/* binding */ ServiceSubmitBatchHeaders),\n/* harmony export */   SignedIdentifier: () => (/* binding */ SignedIdentifier),\n/* harmony export */   StaticWebsite: () => (/* binding */ StaticWebsite),\n/* harmony export */   StorageError: () => (/* binding */ StorageError),\n/* harmony export */   UserDelegationKey: () => (/* binding */ UserDelegationKey)\n/* harmony export */ });\n/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\nconst BlobServiceProperties = {\n    serializedName: \"BlobServiceProperties\",\n    xmlName: \"StorageServiceProperties\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobServiceProperties\",\n        modelProperties: {\n            blobAnalyticsLogging: {\n                serializedName: \"Logging\",\n                xmlName: \"Logging\",\n                type: {\n                    name: \"Composite\",\n                    className: \"Logging\",\n                },\n            },\n            hourMetrics: {\n                serializedName: \"HourMetrics\",\n                xmlName: \"HourMetrics\",\n                type: {\n                    name: \"Composite\",\n                    className: \"Metrics\",\n                },\n            },\n            minuteMetrics: {\n                serializedName: \"MinuteMetrics\",\n                xmlName: \"MinuteMetrics\",\n                type: {\n                    name: \"Composite\",\n                    className: \"Metrics\",\n                },\n            },\n            cors: {\n                serializedName: \"Cors\",\n                xmlName: \"Cors\",\n                xmlIsWrapped: true,\n                xmlElementName: \"CorsRule\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"CorsRule\",\n                        },\n                    },\n                },\n            },\n            defaultServiceVersion: {\n                serializedName: \"DefaultServiceVersion\",\n                xmlName: \"DefaultServiceVersion\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            deleteRetentionPolicy: {\n                serializedName: \"DeleteRetentionPolicy\",\n                xmlName: \"DeleteRetentionPolicy\",\n                type: {\n                    name: \"Composite\",\n                    className: \"RetentionPolicy\",\n                },\n            },\n            staticWebsite: {\n                serializedName: \"StaticWebsite\",\n                xmlName: \"StaticWebsite\",\n                type: {\n                    name: \"Composite\",\n                    className: \"StaticWebsite\",\n                },\n            },\n        },\n    },\n};\nconst Logging = {\n    serializedName: \"Logging\",\n    type: {\n        name: \"Composite\",\n        className: \"Logging\",\n        modelProperties: {\n            version: {\n                serializedName: \"Version\",\n                required: true,\n                xmlName: \"Version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            deleteProperty: {\n                serializedName: \"Delete\",\n                required: true,\n                xmlName: \"Delete\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            read: {\n                serializedName: \"Read\",\n                required: true,\n                xmlName: \"Read\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            write: {\n                serializedName: \"Write\",\n                required: true,\n                xmlName: \"Write\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            retentionPolicy: {\n                serializedName: \"RetentionPolicy\",\n                xmlName: \"RetentionPolicy\",\n                type: {\n                    name: \"Composite\",\n                    className: \"RetentionPolicy\",\n                },\n            },\n        },\n    },\n};\nconst RetentionPolicy = {\n    serializedName: \"RetentionPolicy\",\n    type: {\n        name: \"Composite\",\n        className: \"RetentionPolicy\",\n        modelProperties: {\n            enabled: {\n                serializedName: \"Enabled\",\n                required: true,\n                xmlName: \"Enabled\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            days: {\n                constraints: {\n                    InclusiveMinimum: 1,\n                },\n                serializedName: \"Days\",\n                xmlName: \"Days\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n        },\n    },\n};\nconst Metrics = {\n    serializedName: \"Metrics\",\n    type: {\n        name: \"Composite\",\n        className: \"Metrics\",\n        modelProperties: {\n            version: {\n                serializedName: \"Version\",\n                xmlName: \"Version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            enabled: {\n                serializedName: \"Enabled\",\n                required: true,\n                xmlName: \"Enabled\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            includeAPIs: {\n                serializedName: \"IncludeAPIs\",\n                xmlName: \"IncludeAPIs\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            retentionPolicy: {\n                serializedName: \"RetentionPolicy\",\n                xmlName: \"RetentionPolicy\",\n                type: {\n                    name: \"Composite\",\n                    className: \"RetentionPolicy\",\n                },\n            },\n        },\n    },\n};\nconst CorsRule = {\n    serializedName: \"CorsRule\",\n    type: {\n        name: \"Composite\",\n        className: \"CorsRule\",\n        modelProperties: {\n            allowedOrigins: {\n                serializedName: \"AllowedOrigins\",\n                required: true,\n                xmlName: \"AllowedOrigins\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            allowedMethods: {\n                serializedName: \"AllowedMethods\",\n                required: true,\n                xmlName: \"AllowedMethods\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            allowedHeaders: {\n                serializedName: \"AllowedHeaders\",\n                required: true,\n                xmlName: \"AllowedHeaders\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            exposedHeaders: {\n                serializedName: \"ExposedHeaders\",\n                required: true,\n                xmlName: \"ExposedHeaders\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            maxAgeInSeconds: {\n                constraints: {\n                    InclusiveMinimum: 0,\n                },\n                serializedName: \"MaxAgeInSeconds\",\n                required: true,\n                xmlName: \"MaxAgeInSeconds\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n        },\n    },\n};\nconst StaticWebsite = {\n    serializedName: \"StaticWebsite\",\n    type: {\n        name: \"Composite\",\n        className: \"StaticWebsite\",\n        modelProperties: {\n            enabled: {\n                serializedName: \"Enabled\",\n                required: true,\n                xmlName: \"Enabled\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            indexDocument: {\n                serializedName: \"IndexDocument\",\n                xmlName: \"IndexDocument\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorDocument404Path: {\n                serializedName: \"ErrorDocument404Path\",\n                xmlName: \"ErrorDocument404Path\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            defaultIndexDocumentPath: {\n                serializedName: \"DefaultIndexDocumentPath\",\n                xmlName: \"DefaultIndexDocumentPath\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst StorageError = {\n    serializedName: \"StorageError\",\n    type: {\n        name: \"Composite\",\n        className: \"StorageError\",\n        modelProperties: {\n            message: {\n                serializedName: \"Message\",\n                xmlName: \"Message\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            code: {\n                serializedName: \"Code\",\n                xmlName: \"Code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            authenticationErrorDetail: {\n                serializedName: \"AuthenticationErrorDetail\",\n                xmlName: \"AuthenticationErrorDetail\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobServiceStatistics = {\n    serializedName: \"BlobServiceStatistics\",\n    xmlName: \"StorageServiceStats\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobServiceStatistics\",\n        modelProperties: {\n            geoReplication: {\n                serializedName: \"GeoReplication\",\n                xmlName: \"GeoReplication\",\n                type: {\n                    name: \"Composite\",\n                    className: \"GeoReplication\",\n                },\n            },\n        },\n    },\n};\nconst GeoReplication = {\n    serializedName: \"GeoReplication\",\n    type: {\n        name: \"Composite\",\n        className: \"GeoReplication\",\n        modelProperties: {\n            status: {\n                serializedName: \"Status\",\n                required: true,\n                xmlName: \"Status\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"live\", \"bootstrap\", \"unavailable\"],\n                },\n            },\n            lastSyncOn: {\n                serializedName: \"LastSyncTime\",\n                required: true,\n                xmlName: \"LastSyncTime\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n        },\n    },\n};\nconst ListContainersSegmentResponse = {\n    serializedName: \"ListContainersSegmentResponse\",\n    xmlName: \"EnumerationResults\",\n    type: {\n        name: \"Composite\",\n        className: \"ListContainersSegmentResponse\",\n        modelProperties: {\n            serviceEndpoint: {\n                serializedName: \"ServiceEndpoint\",\n                required: true,\n                xmlName: \"ServiceEndpoint\",\n                xmlIsAttribute: true,\n                type: {\n                    name: \"String\",\n                },\n            },\n            prefix: {\n                serializedName: \"Prefix\",\n                xmlName: \"Prefix\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            marker: {\n                serializedName: \"Marker\",\n                xmlName: \"Marker\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            maxPageSize: {\n                serializedName: \"MaxResults\",\n                xmlName: \"MaxResults\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            containerItems: {\n                serializedName: \"ContainerItems\",\n                required: true,\n                xmlName: \"Containers\",\n                xmlIsWrapped: true,\n                xmlElementName: \"Container\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"ContainerItem\",\n                        },\n                    },\n                },\n            },\n            continuationToken: {\n                serializedName: \"NextMarker\",\n                xmlName: \"NextMarker\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerItem = {\n    serializedName: \"ContainerItem\",\n    xmlName: \"Container\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerItem\",\n        modelProperties: {\n            name: {\n                serializedName: \"Name\",\n                required: true,\n                xmlName: \"Name\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            deleted: {\n                serializedName: \"Deleted\",\n                xmlName: \"Deleted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            version: {\n                serializedName: \"Version\",\n                xmlName: \"Version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            properties: {\n                serializedName: \"Properties\",\n                xmlName: \"Properties\",\n                type: {\n                    name: \"Composite\",\n                    className: \"ContainerProperties\",\n                },\n            },\n            metadata: {\n                serializedName: \"Metadata\",\n                xmlName: \"Metadata\",\n                type: {\n                    name: \"Dictionary\",\n                    value: { type: { name: \"String\" } },\n                },\n            },\n        },\n    },\n};\nconst ContainerProperties = {\n    serializedName: \"ContainerProperties\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerProperties\",\n        modelProperties: {\n            lastModified: {\n                serializedName: \"Last-Modified\",\n                required: true,\n                xmlName: \"Last-Modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            etag: {\n                serializedName: \"Etag\",\n                required: true,\n                xmlName: \"Etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            leaseStatus: {\n                serializedName: \"LeaseStatus\",\n                xmlName: \"LeaseStatus\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"locked\", \"unlocked\"],\n                },\n            },\n            leaseState: {\n                serializedName: \"LeaseState\",\n                xmlName: \"LeaseState\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"available\",\n                        \"leased\",\n                        \"expired\",\n                        \"breaking\",\n                        \"broken\",\n                    ],\n                },\n            },\n            leaseDuration: {\n                serializedName: \"LeaseDuration\",\n                xmlName: \"LeaseDuration\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"infinite\", \"fixed\"],\n                },\n            },\n            publicAccess: {\n                serializedName: \"PublicAccess\",\n                xmlName: \"PublicAccess\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"container\", \"blob\"],\n                },\n            },\n            hasImmutabilityPolicy: {\n                serializedName: \"HasImmutabilityPolicy\",\n                xmlName: \"HasImmutabilityPolicy\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            hasLegalHold: {\n                serializedName: \"HasLegalHold\",\n                xmlName: \"HasLegalHold\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            defaultEncryptionScope: {\n                serializedName: \"DefaultEncryptionScope\",\n                xmlName: \"DefaultEncryptionScope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            preventEncryptionScopeOverride: {\n                serializedName: \"DenyEncryptionScopeOverride\",\n                xmlName: \"DenyEncryptionScopeOverride\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            deletedOn: {\n                serializedName: \"DeletedTime\",\n                xmlName: \"DeletedTime\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            remainingRetentionDays: {\n                serializedName: \"RemainingRetentionDays\",\n                xmlName: \"RemainingRetentionDays\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            isImmutableStorageWithVersioningEnabled: {\n                serializedName: \"ImmutableStorageWithVersioningEnabled\",\n                xmlName: \"ImmutableStorageWithVersioningEnabled\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n        },\n    },\n};\nconst KeyInfo = {\n    serializedName: \"KeyInfo\",\n    type: {\n        name: \"Composite\",\n        className: \"KeyInfo\",\n        modelProperties: {\n            startsOn: {\n                serializedName: \"Start\",\n                required: true,\n                xmlName: \"Start\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            expiresOn: {\n                serializedName: \"Expiry\",\n                required: true,\n                xmlName: \"Expiry\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst UserDelegationKey = {\n    serializedName: \"UserDelegationKey\",\n    type: {\n        name: \"Composite\",\n        className: \"UserDelegationKey\",\n        modelProperties: {\n            signedObjectId: {\n                serializedName: \"SignedOid\",\n                required: true,\n                xmlName: \"SignedOid\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            signedTenantId: {\n                serializedName: \"SignedTid\",\n                required: true,\n                xmlName: \"SignedTid\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            signedStartsOn: {\n                serializedName: \"SignedStart\",\n                required: true,\n                xmlName: \"SignedStart\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            signedExpiresOn: {\n                serializedName: \"SignedExpiry\",\n                required: true,\n                xmlName: \"SignedExpiry\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            signedService: {\n                serializedName: \"SignedService\",\n                required: true,\n                xmlName: \"SignedService\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            signedVersion: {\n                serializedName: \"SignedVersion\",\n                required: true,\n                xmlName: \"SignedVersion\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            value: {\n                serializedName: \"Value\",\n                required: true,\n                xmlName: \"Value\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst FilterBlobSegment = {\n    serializedName: \"FilterBlobSegment\",\n    xmlName: \"EnumerationResults\",\n    type: {\n        name: \"Composite\",\n        className: \"FilterBlobSegment\",\n        modelProperties: {\n            serviceEndpoint: {\n                serializedName: \"ServiceEndpoint\",\n                required: true,\n                xmlName: \"ServiceEndpoint\",\n                xmlIsAttribute: true,\n                type: {\n                    name: \"String\",\n                },\n            },\n            where: {\n                serializedName: \"Where\",\n                required: true,\n                xmlName: \"Where\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            blobs: {\n                serializedName: \"Blobs\",\n                required: true,\n                xmlName: \"Blobs\",\n                xmlIsWrapped: true,\n                xmlElementName: \"Blob\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"FilterBlobItem\",\n                        },\n                    },\n                },\n            },\n            continuationToken: {\n                serializedName: \"NextMarker\",\n                xmlName: \"NextMarker\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst FilterBlobItem = {\n    serializedName: \"FilterBlobItem\",\n    xmlName: \"Blob\",\n    type: {\n        name: \"Composite\",\n        className: \"FilterBlobItem\",\n        modelProperties: {\n            name: {\n                serializedName: \"Name\",\n                required: true,\n                xmlName: \"Name\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            containerName: {\n                serializedName: \"ContainerName\",\n                required: true,\n                xmlName: \"ContainerName\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            tags: {\n                serializedName: \"Tags\",\n                xmlName: \"Tags\",\n                type: {\n                    name: \"Composite\",\n                    className: \"BlobTags\",\n                },\n            },\n        },\n    },\n};\nconst BlobTags = {\n    serializedName: \"BlobTags\",\n    xmlName: \"Tags\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobTags\",\n        modelProperties: {\n            blobTagSet: {\n                serializedName: \"BlobTagSet\",\n                required: true,\n                xmlName: \"TagSet\",\n                xmlIsWrapped: true,\n                xmlElementName: \"Tag\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"BlobTag\",\n                        },\n                    },\n                },\n            },\n        },\n    },\n};\nconst BlobTag = {\n    serializedName: \"BlobTag\",\n    xmlName: \"Tag\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobTag\",\n        modelProperties: {\n            key: {\n                serializedName: \"Key\",\n                required: true,\n                xmlName: \"Key\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            value: {\n                serializedName: \"Value\",\n                required: true,\n                xmlName: \"Value\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst SignedIdentifier = {\n    serializedName: \"SignedIdentifier\",\n    xmlName: \"SignedIdentifier\",\n    type: {\n        name: \"Composite\",\n        className: \"SignedIdentifier\",\n        modelProperties: {\n            id: {\n                serializedName: \"Id\",\n                required: true,\n                xmlName: \"Id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            accessPolicy: {\n                serializedName: \"AccessPolicy\",\n                xmlName: \"AccessPolicy\",\n                type: {\n                    name: \"Composite\",\n                    className: \"AccessPolicy\",\n                },\n            },\n        },\n    },\n};\nconst AccessPolicy = {\n    serializedName: \"AccessPolicy\",\n    type: {\n        name: \"Composite\",\n        className: \"AccessPolicy\",\n        modelProperties: {\n            startsOn: {\n                serializedName: \"Start\",\n                xmlName: \"Start\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            expiresOn: {\n                serializedName: \"Expiry\",\n                xmlName: \"Expiry\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            permissions: {\n                serializedName: \"Permission\",\n                xmlName: \"Permission\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ListBlobsFlatSegmentResponse = {\n    serializedName: \"ListBlobsFlatSegmentResponse\",\n    xmlName: \"EnumerationResults\",\n    type: {\n        name: \"Composite\",\n        className: \"ListBlobsFlatSegmentResponse\",\n        modelProperties: {\n            serviceEndpoint: {\n                serializedName: \"ServiceEndpoint\",\n                required: true,\n                xmlName: \"ServiceEndpoint\",\n                xmlIsAttribute: true,\n                type: {\n                    name: \"String\",\n                },\n            },\n            containerName: {\n                serializedName: \"ContainerName\",\n                required: true,\n                xmlName: \"ContainerName\",\n                xmlIsAttribute: true,\n                type: {\n                    name: \"String\",\n                },\n            },\n            prefix: {\n                serializedName: \"Prefix\",\n                xmlName: \"Prefix\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            marker: {\n                serializedName: \"Marker\",\n                xmlName: \"Marker\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            maxPageSize: {\n                serializedName: \"MaxResults\",\n                xmlName: \"MaxResults\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            segment: {\n                serializedName: \"Segment\",\n                xmlName: \"Blobs\",\n                type: {\n                    name: \"Composite\",\n                    className: \"BlobFlatListSegment\",\n                },\n            },\n            continuationToken: {\n                serializedName: \"NextMarker\",\n                xmlName: \"NextMarker\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobFlatListSegment = {\n    serializedName: \"BlobFlatListSegment\",\n    xmlName: \"Blobs\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobFlatListSegment\",\n        modelProperties: {\n            blobItems: {\n                serializedName: \"BlobItems\",\n                required: true,\n                xmlName: \"BlobItems\",\n                xmlElementName: \"Blob\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"BlobItemInternal\",\n                        },\n                    },\n                },\n            },\n        },\n    },\n};\nconst BlobItemInternal = {\n    serializedName: \"BlobItemInternal\",\n    xmlName: \"Blob\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobItemInternal\",\n        modelProperties: {\n            name: {\n                serializedName: \"Name\",\n                xmlName: \"Name\",\n                type: {\n                    name: \"Composite\",\n                    className: \"BlobName\",\n                },\n            },\n            deleted: {\n                serializedName: \"Deleted\",\n                required: true,\n                xmlName: \"Deleted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            snapshot: {\n                serializedName: \"Snapshot\",\n                required: true,\n                xmlName: \"Snapshot\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            versionId: {\n                serializedName: \"VersionId\",\n                xmlName: \"VersionId\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            isCurrentVersion: {\n                serializedName: \"IsCurrentVersion\",\n                xmlName: \"IsCurrentVersion\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            properties: {\n                serializedName: \"Properties\",\n                xmlName: \"Properties\",\n                type: {\n                    name: \"Composite\",\n                    className: \"BlobPropertiesInternal\",\n                },\n            },\n            metadata: {\n                serializedName: \"Metadata\",\n                xmlName: \"Metadata\",\n                type: {\n                    name: \"Dictionary\",\n                    value: { type: { name: \"String\" } },\n                },\n            },\n            blobTags: {\n                serializedName: \"BlobTags\",\n                xmlName: \"Tags\",\n                type: {\n                    name: \"Composite\",\n                    className: \"BlobTags\",\n                },\n            },\n            objectReplicationMetadata: {\n                serializedName: \"ObjectReplicationMetadata\",\n                xmlName: \"OrMetadata\",\n                type: {\n                    name: \"Dictionary\",\n                    value: { type: { name: \"String\" } },\n                },\n            },\n            hasVersionsOnly: {\n                serializedName: \"HasVersionsOnly\",\n                xmlName: \"HasVersionsOnly\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n        },\n    },\n};\nconst BlobName = {\n    serializedName: \"BlobName\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobName\",\n        modelProperties: {\n            encoded: {\n                serializedName: \"Encoded\",\n                xmlName: \"Encoded\",\n                xmlIsAttribute: true,\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            content: {\n                serializedName: \"content\",\n                xmlName: \"content\",\n                xmlIsMsText: true,\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobPropertiesInternal = {\n    serializedName: \"BlobPropertiesInternal\",\n    xmlName: \"Properties\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobPropertiesInternal\",\n        modelProperties: {\n            createdOn: {\n                serializedName: \"Creation-Time\",\n                xmlName: \"Creation-Time\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            lastModified: {\n                serializedName: \"Last-Modified\",\n                required: true,\n                xmlName: \"Last-Modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            etag: {\n                serializedName: \"Etag\",\n                required: true,\n                xmlName: \"Etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentLength: {\n                serializedName: \"Content-Length\",\n                xmlName: \"Content-Length\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            contentType: {\n                serializedName: \"Content-Type\",\n                xmlName: \"Content-Type\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentEncoding: {\n                serializedName: \"Content-Encoding\",\n                xmlName: \"Content-Encoding\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentLanguage: {\n                serializedName: \"Content-Language\",\n                xmlName: \"Content-Language\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"Content-MD5\",\n                xmlName: \"Content-MD5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            contentDisposition: {\n                serializedName: \"Content-Disposition\",\n                xmlName: \"Content-Disposition\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            cacheControl: {\n                serializedName: \"Cache-Control\",\n                xmlName: \"Cache-Control\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            blobSequenceNumber: {\n                serializedName: \"x-ms-blob-sequence-number\",\n                xmlName: \"x-ms-blob-sequence-number\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            blobType: {\n                serializedName: \"BlobType\",\n                xmlName: \"BlobType\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"BlockBlob\", \"PageBlob\", \"AppendBlob\"],\n                },\n            },\n            leaseStatus: {\n                serializedName: \"LeaseStatus\",\n                xmlName: \"LeaseStatus\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"locked\", \"unlocked\"],\n                },\n            },\n            leaseState: {\n                serializedName: \"LeaseState\",\n                xmlName: \"LeaseState\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"available\",\n                        \"leased\",\n                        \"expired\",\n                        \"breaking\",\n                        \"broken\",\n                    ],\n                },\n            },\n            leaseDuration: {\n                serializedName: \"LeaseDuration\",\n                xmlName: \"LeaseDuration\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"infinite\", \"fixed\"],\n                },\n            },\n            copyId: {\n                serializedName: \"CopyId\",\n                xmlName: \"CopyId\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyStatus: {\n                serializedName: \"CopyStatus\",\n                xmlName: \"CopyStatus\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"pending\", \"success\", \"aborted\", \"failed\"],\n                },\n            },\n            copySource: {\n                serializedName: \"CopySource\",\n                xmlName: \"CopySource\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyProgress: {\n                serializedName: \"CopyProgress\",\n                xmlName: \"CopyProgress\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyCompletedOn: {\n                serializedName: \"CopyCompletionTime\",\n                xmlName: \"CopyCompletionTime\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            copyStatusDescription: {\n                serializedName: \"CopyStatusDescription\",\n                xmlName: \"CopyStatusDescription\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            serverEncrypted: {\n                serializedName: \"ServerEncrypted\",\n                xmlName: \"ServerEncrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            incrementalCopy: {\n                serializedName: \"IncrementalCopy\",\n                xmlName: \"IncrementalCopy\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            destinationSnapshot: {\n                serializedName: \"DestinationSnapshot\",\n                xmlName: \"DestinationSnapshot\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            deletedOn: {\n                serializedName: \"DeletedTime\",\n                xmlName: \"DeletedTime\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            remainingRetentionDays: {\n                serializedName: \"RemainingRetentionDays\",\n                xmlName: \"RemainingRetentionDays\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            accessTier: {\n                serializedName: \"AccessTier\",\n                xmlName: \"AccessTier\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"P4\",\n                        \"P6\",\n                        \"P10\",\n                        \"P15\",\n                        \"P20\",\n                        \"P30\",\n                        \"P40\",\n                        \"P50\",\n                        \"P60\",\n                        \"P70\",\n                        \"P80\",\n                        \"Hot\",\n                        \"Cool\",\n                        \"Archive\",\n                        \"Cold\",\n                    ],\n                },\n            },\n            accessTierInferred: {\n                serializedName: \"AccessTierInferred\",\n                xmlName: \"AccessTierInferred\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            archiveStatus: {\n                serializedName: \"ArchiveStatus\",\n                xmlName: \"ArchiveStatus\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"rehydrate-pending-to-hot\",\n                        \"rehydrate-pending-to-cool\",\n                        \"rehydrate-pending-to-cold\",\n                    ],\n                },\n            },\n            customerProvidedKeySha256: {\n                serializedName: \"CustomerProvidedKeySha256\",\n                xmlName: \"CustomerProvidedKeySha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"EncryptionScope\",\n                xmlName: \"EncryptionScope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            accessTierChangedOn: {\n                serializedName: \"AccessTierChangeTime\",\n                xmlName: \"AccessTierChangeTime\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            tagCount: {\n                serializedName: \"TagCount\",\n                xmlName: \"TagCount\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            expiresOn: {\n                serializedName: \"Expiry-Time\",\n                xmlName: \"Expiry-Time\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            isSealed: {\n                serializedName: \"Sealed\",\n                xmlName: \"Sealed\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            rehydratePriority: {\n                serializedName: \"RehydratePriority\",\n                xmlName: \"RehydratePriority\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"High\", \"Standard\"],\n                },\n            },\n            lastAccessedOn: {\n                serializedName: \"LastAccessTime\",\n                xmlName: \"LastAccessTime\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            immutabilityPolicyExpiresOn: {\n                serializedName: \"ImmutabilityPolicyUntilDate\",\n                xmlName: \"ImmutabilityPolicyUntilDate\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            immutabilityPolicyMode: {\n                serializedName: \"ImmutabilityPolicyMode\",\n                xmlName: \"ImmutabilityPolicyMode\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"Mutable\", \"Unlocked\", \"Locked\"],\n                },\n            },\n            legalHold: {\n                serializedName: \"LegalHold\",\n                xmlName: \"LegalHold\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n        },\n    },\n};\nconst ListBlobsHierarchySegmentResponse = {\n    serializedName: \"ListBlobsHierarchySegmentResponse\",\n    xmlName: \"EnumerationResults\",\n    type: {\n        name: \"Composite\",\n        className: \"ListBlobsHierarchySegmentResponse\",\n        modelProperties: {\n            serviceEndpoint: {\n                serializedName: \"ServiceEndpoint\",\n                required: true,\n                xmlName: \"ServiceEndpoint\",\n                xmlIsAttribute: true,\n                type: {\n                    name: \"String\",\n                },\n            },\n            containerName: {\n                serializedName: \"ContainerName\",\n                required: true,\n                xmlName: \"ContainerName\",\n                xmlIsAttribute: true,\n                type: {\n                    name: \"String\",\n                },\n            },\n            prefix: {\n                serializedName: \"Prefix\",\n                xmlName: \"Prefix\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            marker: {\n                serializedName: \"Marker\",\n                xmlName: \"Marker\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            maxPageSize: {\n                serializedName: \"MaxResults\",\n                xmlName: \"MaxResults\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            delimiter: {\n                serializedName: \"Delimiter\",\n                xmlName: \"Delimiter\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            segment: {\n                serializedName: \"Segment\",\n                xmlName: \"Blobs\",\n                type: {\n                    name: \"Composite\",\n                    className: \"BlobHierarchyListSegment\",\n                },\n            },\n            continuationToken: {\n                serializedName: \"NextMarker\",\n                xmlName: \"NextMarker\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobHierarchyListSegment = {\n    serializedName: \"BlobHierarchyListSegment\",\n    xmlName: \"Blobs\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobHierarchyListSegment\",\n        modelProperties: {\n            blobPrefixes: {\n                serializedName: \"BlobPrefixes\",\n                xmlName: \"BlobPrefixes\",\n                xmlElementName: \"BlobPrefix\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"BlobPrefix\",\n                        },\n                    },\n                },\n            },\n            blobItems: {\n                serializedName: \"BlobItems\",\n                required: true,\n                xmlName: \"BlobItems\",\n                xmlElementName: \"Blob\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"BlobItemInternal\",\n                        },\n                    },\n                },\n            },\n        },\n    },\n};\nconst BlobPrefix = {\n    serializedName: \"BlobPrefix\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobPrefix\",\n        modelProperties: {\n            name: {\n                serializedName: \"Name\",\n                xmlName: \"Name\",\n                type: {\n                    name: \"Composite\",\n                    className: \"BlobName\",\n                },\n            },\n        },\n    },\n};\nconst BlockLookupList = {\n    serializedName: \"BlockLookupList\",\n    xmlName: \"BlockList\",\n    type: {\n        name: \"Composite\",\n        className: \"BlockLookupList\",\n        modelProperties: {\n            committed: {\n                serializedName: \"Committed\",\n                xmlName: \"Committed\",\n                xmlElementName: \"Committed\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"String\",\n                        },\n                    },\n                },\n            },\n            uncommitted: {\n                serializedName: \"Uncommitted\",\n                xmlName: \"Uncommitted\",\n                xmlElementName: \"Uncommitted\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"String\",\n                        },\n                    },\n                },\n            },\n            latest: {\n                serializedName: \"Latest\",\n                xmlName: \"Latest\",\n                xmlElementName: \"Latest\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"String\",\n                        },\n                    },\n                },\n            },\n        },\n    },\n};\nconst BlockList = {\n    serializedName: \"BlockList\",\n    type: {\n        name: \"Composite\",\n        className: \"BlockList\",\n        modelProperties: {\n            committedBlocks: {\n                serializedName: \"CommittedBlocks\",\n                xmlName: \"CommittedBlocks\",\n                xmlIsWrapped: true,\n                xmlElementName: \"Block\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"Block\",\n                        },\n                    },\n                },\n            },\n            uncommittedBlocks: {\n                serializedName: \"UncommittedBlocks\",\n                xmlName: \"UncommittedBlocks\",\n                xmlIsWrapped: true,\n                xmlElementName: \"Block\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"Block\",\n                        },\n                    },\n                },\n            },\n        },\n    },\n};\nconst Block = {\n    serializedName: \"Block\",\n    type: {\n        name: \"Composite\",\n        className: \"Block\",\n        modelProperties: {\n            name: {\n                serializedName: \"Name\",\n                required: true,\n                xmlName: \"Name\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            size: {\n                serializedName: \"Size\",\n                required: true,\n                xmlName: \"Size\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n        },\n    },\n};\nconst PageList = {\n    serializedName: \"PageList\",\n    type: {\n        name: \"Composite\",\n        className: \"PageList\",\n        modelProperties: {\n            pageRange: {\n                serializedName: \"PageRange\",\n                xmlName: \"PageRange\",\n                xmlElementName: \"PageRange\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"PageRange\",\n                        },\n                    },\n                },\n            },\n            clearRange: {\n                serializedName: \"ClearRange\",\n                xmlName: \"ClearRange\",\n                xmlElementName: \"ClearRange\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"ClearRange\",\n                        },\n                    },\n                },\n            },\n            continuationToken: {\n                serializedName: \"NextMarker\",\n                xmlName: \"NextMarker\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst PageRange = {\n    serializedName: \"PageRange\",\n    xmlName: \"PageRange\",\n    type: {\n        name: \"Composite\",\n        className: \"PageRange\",\n        modelProperties: {\n            start: {\n                serializedName: \"Start\",\n                required: true,\n                xmlName: \"Start\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            end: {\n                serializedName: \"End\",\n                required: true,\n                xmlName: \"End\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n        },\n    },\n};\nconst ClearRange = {\n    serializedName: \"ClearRange\",\n    xmlName: \"ClearRange\",\n    type: {\n        name: \"Composite\",\n        className: \"ClearRange\",\n        modelProperties: {\n            start: {\n                serializedName: \"Start\",\n                required: true,\n                xmlName: \"Start\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            end: {\n                serializedName: \"End\",\n                required: true,\n                xmlName: \"End\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n        },\n    },\n};\nconst QueryRequest = {\n    serializedName: \"QueryRequest\",\n    xmlName: \"QueryRequest\",\n    type: {\n        name: \"Composite\",\n        className: \"QueryRequest\",\n        modelProperties: {\n            queryType: {\n                serializedName: \"QueryType\",\n                required: true,\n                xmlName: \"QueryType\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            expression: {\n                serializedName: \"Expression\",\n                required: true,\n                xmlName: \"Expression\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            inputSerialization: {\n                serializedName: \"InputSerialization\",\n                xmlName: \"InputSerialization\",\n                type: {\n                    name: \"Composite\",\n                    className: \"QuerySerialization\",\n                },\n            },\n            outputSerialization: {\n                serializedName: \"OutputSerialization\",\n                xmlName: \"OutputSerialization\",\n                type: {\n                    name: \"Composite\",\n                    className: \"QuerySerialization\",\n                },\n            },\n        },\n    },\n};\nconst QuerySerialization = {\n    serializedName: \"QuerySerialization\",\n    type: {\n        name: \"Composite\",\n        className: \"QuerySerialization\",\n        modelProperties: {\n            format: {\n                serializedName: \"Format\",\n                xmlName: \"Format\",\n                type: {\n                    name: \"Composite\",\n                    className: \"QueryFormat\",\n                },\n            },\n        },\n    },\n};\nconst QueryFormat = {\n    serializedName: \"QueryFormat\",\n    type: {\n        name: \"Composite\",\n        className: \"QueryFormat\",\n        modelProperties: {\n            type: {\n                serializedName: \"Type\",\n                required: true,\n                xmlName: \"Type\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"delimited\", \"json\", \"arrow\", \"parquet\"],\n                },\n            },\n            delimitedTextConfiguration: {\n                serializedName: \"DelimitedTextConfiguration\",\n                xmlName: \"DelimitedTextConfiguration\",\n                type: {\n                    name: \"Composite\",\n                    className: \"DelimitedTextConfiguration\",\n                },\n            },\n            jsonTextConfiguration: {\n                serializedName: \"JsonTextConfiguration\",\n                xmlName: \"JsonTextConfiguration\",\n                type: {\n                    name: \"Composite\",\n                    className: \"JsonTextConfiguration\",\n                },\n            },\n            arrowConfiguration: {\n                serializedName: \"ArrowConfiguration\",\n                xmlName: \"ArrowConfiguration\",\n                type: {\n                    name: \"Composite\",\n                    className: \"ArrowConfiguration\",\n                },\n            },\n            parquetTextConfiguration: {\n                serializedName: \"ParquetTextConfiguration\",\n                xmlName: \"ParquetTextConfiguration\",\n                type: {\n                    name: \"Dictionary\",\n                    value: { type: { name: \"any\" } },\n                },\n            },\n        },\n    },\n};\nconst DelimitedTextConfiguration = {\n    serializedName: \"DelimitedTextConfiguration\",\n    xmlName: \"DelimitedTextConfiguration\",\n    type: {\n        name: \"Composite\",\n        className: \"DelimitedTextConfiguration\",\n        modelProperties: {\n            columnSeparator: {\n                serializedName: \"ColumnSeparator\",\n                xmlName: \"ColumnSeparator\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            fieldQuote: {\n                serializedName: \"FieldQuote\",\n                xmlName: \"FieldQuote\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            recordSeparator: {\n                serializedName: \"RecordSeparator\",\n                xmlName: \"RecordSeparator\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            escapeChar: {\n                serializedName: \"EscapeChar\",\n                xmlName: \"EscapeChar\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            headersPresent: {\n                serializedName: \"HeadersPresent\",\n                xmlName: \"HasHeaders\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n        },\n    },\n};\nconst JsonTextConfiguration = {\n    serializedName: \"JsonTextConfiguration\",\n    xmlName: \"JsonTextConfiguration\",\n    type: {\n        name: \"Composite\",\n        className: \"JsonTextConfiguration\",\n        modelProperties: {\n            recordSeparator: {\n                serializedName: \"RecordSeparator\",\n                xmlName: \"RecordSeparator\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ArrowConfiguration = {\n    serializedName: \"ArrowConfiguration\",\n    xmlName: \"ArrowConfiguration\",\n    type: {\n        name: \"Composite\",\n        className: \"ArrowConfiguration\",\n        modelProperties: {\n            schema: {\n                serializedName: \"Schema\",\n                required: true,\n                xmlName: \"Schema\",\n                xmlIsWrapped: true,\n                xmlElementName: \"Field\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"ArrowField\",\n                        },\n                    },\n                },\n            },\n        },\n    },\n};\nconst ArrowField = {\n    serializedName: \"ArrowField\",\n    xmlName: \"Field\",\n    type: {\n        name: \"Composite\",\n        className: \"ArrowField\",\n        modelProperties: {\n            type: {\n                serializedName: \"Type\",\n                required: true,\n                xmlName: \"Type\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            name: {\n                serializedName: \"Name\",\n                xmlName: \"Name\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            precision: {\n                serializedName: \"Precision\",\n                xmlName: \"Precision\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            scale: {\n                serializedName: \"Scale\",\n                xmlName: \"Scale\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n        },\n    },\n};\nconst ServiceSetPropertiesHeaders = {\n    serializedName: \"Service_setPropertiesHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceSetPropertiesHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ServiceSetPropertiesExceptionHeaders = {\n    serializedName: \"Service_setPropertiesExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceSetPropertiesExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ServiceGetPropertiesHeaders = {\n    serializedName: \"Service_getPropertiesHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceGetPropertiesHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ServiceGetPropertiesExceptionHeaders = {\n    serializedName: \"Service_getPropertiesExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceGetPropertiesExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ServiceGetStatisticsHeaders = {\n    serializedName: \"Service_getStatisticsHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceGetStatisticsHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ServiceGetStatisticsExceptionHeaders = {\n    serializedName: \"Service_getStatisticsExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceGetStatisticsExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ServiceListContainersSegmentHeaders = {\n    serializedName: \"Service_listContainersSegmentHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceListContainersSegmentHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ServiceListContainersSegmentExceptionHeaders = {\n    serializedName: \"Service_listContainersSegmentExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceListContainersSegmentExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ServiceGetUserDelegationKeyHeaders = {\n    serializedName: \"Service_getUserDelegationKeyHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceGetUserDelegationKeyHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ServiceGetUserDelegationKeyExceptionHeaders = {\n    serializedName: \"Service_getUserDelegationKeyExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceGetUserDelegationKeyExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ServiceGetAccountInfoHeaders = {\n    serializedName: \"Service_getAccountInfoHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceGetAccountInfoHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            skuName: {\n                serializedName: \"x-ms-sku-name\",\n                xmlName: \"x-ms-sku-name\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"Standard_LRS\",\n                        \"Standard_GRS\",\n                        \"Standard_RAGRS\",\n                        \"Standard_ZRS\",\n                        \"Premium_LRS\",\n                    ],\n                },\n            },\n            accountKind: {\n                serializedName: \"x-ms-account-kind\",\n                xmlName: \"x-ms-account-kind\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"Storage\",\n                        \"BlobStorage\",\n                        \"StorageV2\",\n                        \"FileStorage\",\n                        \"BlockBlobStorage\",\n                    ],\n                },\n            },\n            isHierarchicalNamespaceEnabled: {\n                serializedName: \"x-ms-is-hns-enabled\",\n                xmlName: \"x-ms-is-hns-enabled\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ServiceGetAccountInfoExceptionHeaders = {\n    serializedName: \"Service_getAccountInfoExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceGetAccountInfoExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ServiceSubmitBatchHeaders = {\n    serializedName: \"Service_submitBatchHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceSubmitBatchHeaders\",\n        modelProperties: {\n            contentType: {\n                serializedName: \"content-type\",\n                xmlName: \"content-type\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ServiceSubmitBatchExceptionHeaders = {\n    serializedName: \"Service_submitBatchExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceSubmitBatchExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ServiceFilterBlobsHeaders = {\n    serializedName: \"Service_filterBlobsHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceFilterBlobsHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ServiceFilterBlobsExceptionHeaders = {\n    serializedName: \"Service_filterBlobsExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceFilterBlobsExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerCreateHeaders = {\n    serializedName: \"Container_createHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerCreateHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerCreateExceptionHeaders = {\n    serializedName: \"Container_createExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerCreateExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerGetPropertiesHeaders = {\n    serializedName: \"Container_getPropertiesHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerGetPropertiesHeaders\",\n        modelProperties: {\n            metadata: {\n                serializedName: \"x-ms-meta\",\n                headerCollectionPrefix: \"x-ms-meta-\",\n                xmlName: \"x-ms-meta\",\n                type: {\n                    name: \"Dictionary\",\n                    value: { type: { name: \"String\" } },\n                },\n            },\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            leaseDuration: {\n                serializedName: \"x-ms-lease-duration\",\n                xmlName: \"x-ms-lease-duration\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"infinite\", \"fixed\"],\n                },\n            },\n            leaseState: {\n                serializedName: \"x-ms-lease-state\",\n                xmlName: \"x-ms-lease-state\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"available\",\n                        \"leased\",\n                        \"expired\",\n                        \"breaking\",\n                        \"broken\",\n                    ],\n                },\n            },\n            leaseStatus: {\n                serializedName: \"x-ms-lease-status\",\n                xmlName: \"x-ms-lease-status\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"locked\", \"unlocked\"],\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            blobPublicAccess: {\n                serializedName: \"x-ms-blob-public-access\",\n                xmlName: \"x-ms-blob-public-access\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"container\", \"blob\"],\n                },\n            },\n            hasImmutabilityPolicy: {\n                serializedName: \"x-ms-has-immutability-policy\",\n                xmlName: \"x-ms-has-immutability-policy\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            hasLegalHold: {\n                serializedName: \"x-ms-has-legal-hold\",\n                xmlName: \"x-ms-has-legal-hold\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            defaultEncryptionScope: {\n                serializedName: \"x-ms-default-encryption-scope\",\n                xmlName: \"x-ms-default-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            denyEncryptionScopeOverride: {\n                serializedName: \"x-ms-deny-encryption-scope-override\",\n                xmlName: \"x-ms-deny-encryption-scope-override\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            isImmutableStorageWithVersioningEnabled: {\n                serializedName: \"x-ms-immutable-storage-with-versioning-enabled\",\n                xmlName: \"x-ms-immutable-storage-with-versioning-enabled\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerGetPropertiesExceptionHeaders = {\n    serializedName: \"Container_getPropertiesExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerGetPropertiesExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerDeleteHeaders = {\n    serializedName: \"Container_deleteHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerDeleteHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerDeleteExceptionHeaders = {\n    serializedName: \"Container_deleteExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerDeleteExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerSetMetadataHeaders = {\n    serializedName: \"Container_setMetadataHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerSetMetadataHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerSetMetadataExceptionHeaders = {\n    serializedName: \"Container_setMetadataExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerSetMetadataExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerGetAccessPolicyHeaders = {\n    serializedName: \"Container_getAccessPolicyHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerGetAccessPolicyHeaders\",\n        modelProperties: {\n            blobPublicAccess: {\n                serializedName: \"x-ms-blob-public-access\",\n                xmlName: \"x-ms-blob-public-access\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"container\", \"blob\"],\n                },\n            },\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerGetAccessPolicyExceptionHeaders = {\n    serializedName: \"Container_getAccessPolicyExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerGetAccessPolicyExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerSetAccessPolicyHeaders = {\n    serializedName: \"Container_setAccessPolicyHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerSetAccessPolicyHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerSetAccessPolicyExceptionHeaders = {\n    serializedName: \"Container_setAccessPolicyExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerSetAccessPolicyExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerRestoreHeaders = {\n    serializedName: \"Container_restoreHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerRestoreHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerRestoreExceptionHeaders = {\n    serializedName: \"Container_restoreExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerRestoreExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerRenameHeaders = {\n    serializedName: \"Container_renameHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerRenameHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerRenameExceptionHeaders = {\n    serializedName: \"Container_renameExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerRenameExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerSubmitBatchHeaders = {\n    serializedName: \"Container_submitBatchHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerSubmitBatchHeaders\",\n        modelProperties: {\n            contentType: {\n                serializedName: \"content-type\",\n                xmlName: \"content-type\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerSubmitBatchExceptionHeaders = {\n    serializedName: \"Container_submitBatchExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerSubmitBatchExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerFilterBlobsHeaders = {\n    serializedName: \"Container_filterBlobsHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerFilterBlobsHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n        },\n    },\n};\nconst ContainerFilterBlobsExceptionHeaders = {\n    serializedName: \"Container_filterBlobsExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerFilterBlobsExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerAcquireLeaseHeaders = {\n    serializedName: \"Container_acquireLeaseHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerAcquireLeaseHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            leaseId: {\n                serializedName: \"x-ms-lease-id\",\n                xmlName: \"x-ms-lease-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n        },\n    },\n};\nconst ContainerAcquireLeaseExceptionHeaders = {\n    serializedName: \"Container_acquireLeaseExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerAcquireLeaseExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerReleaseLeaseHeaders = {\n    serializedName: \"Container_releaseLeaseHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerReleaseLeaseHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n        },\n    },\n};\nconst ContainerReleaseLeaseExceptionHeaders = {\n    serializedName: \"Container_releaseLeaseExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerReleaseLeaseExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerRenewLeaseHeaders = {\n    serializedName: \"Container_renewLeaseHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerRenewLeaseHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            leaseId: {\n                serializedName: \"x-ms-lease-id\",\n                xmlName: \"x-ms-lease-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n        },\n    },\n};\nconst ContainerRenewLeaseExceptionHeaders = {\n    serializedName: \"Container_renewLeaseExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerRenewLeaseExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerBreakLeaseHeaders = {\n    serializedName: \"Container_breakLeaseHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerBreakLeaseHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            leaseTime: {\n                serializedName: \"x-ms-lease-time\",\n                xmlName: \"x-ms-lease-time\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n        },\n    },\n};\nconst ContainerBreakLeaseExceptionHeaders = {\n    serializedName: \"Container_breakLeaseExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerBreakLeaseExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerChangeLeaseHeaders = {\n    serializedName: \"Container_changeLeaseHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerChangeLeaseHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            leaseId: {\n                serializedName: \"x-ms-lease-id\",\n                xmlName: \"x-ms-lease-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n        },\n    },\n};\nconst ContainerChangeLeaseExceptionHeaders = {\n    serializedName: \"Container_changeLeaseExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerChangeLeaseExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerListBlobFlatSegmentHeaders = {\n    serializedName: \"Container_listBlobFlatSegmentHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerListBlobFlatSegmentHeaders\",\n        modelProperties: {\n            contentType: {\n                serializedName: \"content-type\",\n                xmlName: \"content-type\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerListBlobFlatSegmentExceptionHeaders = {\n    serializedName: \"Container_listBlobFlatSegmentExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerListBlobFlatSegmentExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerListBlobHierarchySegmentHeaders = {\n    serializedName: \"Container_listBlobHierarchySegmentHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerListBlobHierarchySegmentHeaders\",\n        modelProperties: {\n            contentType: {\n                serializedName: \"content-type\",\n                xmlName: \"content-type\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerListBlobHierarchySegmentExceptionHeaders = {\n    serializedName: \"Container_listBlobHierarchySegmentExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerListBlobHierarchySegmentExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerGetAccountInfoHeaders = {\n    serializedName: \"Container_getAccountInfoHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerGetAccountInfoHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            skuName: {\n                serializedName: \"x-ms-sku-name\",\n                xmlName: \"x-ms-sku-name\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"Standard_LRS\",\n                        \"Standard_GRS\",\n                        \"Standard_RAGRS\",\n                        \"Standard_ZRS\",\n                        \"Premium_LRS\",\n                    ],\n                },\n            },\n            accountKind: {\n                serializedName: \"x-ms-account-kind\",\n                xmlName: \"x-ms-account-kind\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"Storage\",\n                        \"BlobStorage\",\n                        \"StorageV2\",\n                        \"FileStorage\",\n                        \"BlockBlobStorage\",\n                    ],\n                },\n            },\n            isHierarchicalNamespaceEnabled: {\n                serializedName: \"x-ms-is-hns-enabled\",\n                xmlName: \"x-ms-is-hns-enabled\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n        },\n    },\n};\nconst ContainerGetAccountInfoExceptionHeaders = {\n    serializedName: \"Container_getAccountInfoExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerGetAccountInfoExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobDownloadHeaders = {\n    serializedName: \"Blob_downloadHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobDownloadHeaders\",\n        modelProperties: {\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            createdOn: {\n                serializedName: \"x-ms-creation-time\",\n                xmlName: \"x-ms-creation-time\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            metadata: {\n                serializedName: \"x-ms-meta\",\n                headerCollectionPrefix: \"x-ms-meta-\",\n                xmlName: \"x-ms-meta\",\n                type: {\n                    name: \"Dictionary\",\n                    value: { type: { name: \"String\" } },\n                },\n            },\n            objectReplicationPolicyId: {\n                serializedName: \"x-ms-or-policy-id\",\n                xmlName: \"x-ms-or-policy-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            objectReplicationRules: {\n                serializedName: \"x-ms-or\",\n                headerCollectionPrefix: \"x-ms-or-\",\n                xmlName: \"x-ms-or\",\n                type: {\n                    name: \"Dictionary\",\n                    value: { type: { name: \"String\" } },\n                },\n            },\n            contentLength: {\n                serializedName: \"content-length\",\n                xmlName: \"content-length\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            contentType: {\n                serializedName: \"content-type\",\n                xmlName: \"content-type\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentRange: {\n                serializedName: \"content-range\",\n                xmlName: \"content-range\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            contentEncoding: {\n                serializedName: \"content-encoding\",\n                xmlName: \"content-encoding\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            cacheControl: {\n                serializedName: \"cache-control\",\n                xmlName: \"cache-control\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentDisposition: {\n                serializedName: \"content-disposition\",\n                xmlName: \"content-disposition\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentLanguage: {\n                serializedName: \"content-language\",\n                xmlName: \"content-language\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            blobSequenceNumber: {\n                serializedName: \"x-ms-blob-sequence-number\",\n                xmlName: \"x-ms-blob-sequence-number\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            blobType: {\n                serializedName: \"x-ms-blob-type\",\n                xmlName: \"x-ms-blob-type\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"BlockBlob\", \"PageBlob\", \"AppendBlob\"],\n                },\n            },\n            copyCompletedOn: {\n                serializedName: \"x-ms-copy-completion-time\",\n                xmlName: \"x-ms-copy-completion-time\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            copyStatusDescription: {\n                serializedName: \"x-ms-copy-status-description\",\n                xmlName: \"x-ms-copy-status-description\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyId: {\n                serializedName: \"x-ms-copy-id\",\n                xmlName: \"x-ms-copy-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyProgress: {\n                serializedName: \"x-ms-copy-progress\",\n                xmlName: \"x-ms-copy-progress\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copySource: {\n                serializedName: \"x-ms-copy-source\",\n                xmlName: \"x-ms-copy-source\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyStatus: {\n                serializedName: \"x-ms-copy-status\",\n                xmlName: \"x-ms-copy-status\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"pending\", \"success\", \"aborted\", \"failed\"],\n                },\n            },\n            leaseDuration: {\n                serializedName: \"x-ms-lease-duration\",\n                xmlName: \"x-ms-lease-duration\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"infinite\", \"fixed\"],\n                },\n            },\n            leaseState: {\n                serializedName: \"x-ms-lease-state\",\n                xmlName: \"x-ms-lease-state\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"available\",\n                        \"leased\",\n                        \"expired\",\n                        \"breaking\",\n                        \"broken\",\n                    ],\n                },\n            },\n            leaseStatus: {\n                serializedName: \"x-ms-lease-status\",\n                xmlName: \"x-ms-lease-status\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"locked\", \"unlocked\"],\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            versionId: {\n                serializedName: \"x-ms-version-id\",\n                xmlName: \"x-ms-version-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            isCurrentVersion: {\n                serializedName: \"x-ms-is-current-version\",\n                xmlName: \"x-ms-is-current-version\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            acceptRanges: {\n                serializedName: \"accept-ranges\",\n                xmlName: \"accept-ranges\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            blobCommittedBlockCount: {\n                serializedName: \"x-ms-blob-committed-block-count\",\n                xmlName: \"x-ms-blob-committed-block-count\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-server-encrypted\",\n                xmlName: \"x-ms-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            blobContentMD5: {\n                serializedName: \"x-ms-blob-content-md5\",\n                xmlName: \"x-ms-blob-content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            tagCount: {\n                serializedName: \"x-ms-tag-count\",\n                xmlName: \"x-ms-tag-count\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            isSealed: {\n                serializedName: \"x-ms-blob-sealed\",\n                xmlName: \"x-ms-blob-sealed\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            lastAccessed: {\n                serializedName: \"x-ms-last-access-time\",\n                xmlName: \"x-ms-last-access-time\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            immutabilityPolicyExpiresOn: {\n                serializedName: \"x-ms-immutability-policy-until-date\",\n                xmlName: \"x-ms-immutability-policy-until-date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            immutabilityPolicyMode: {\n                serializedName: \"x-ms-immutability-policy-mode\",\n                xmlName: \"x-ms-immutability-policy-mode\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"Mutable\", \"Unlocked\", \"Locked\"],\n                },\n            },\n            legalHold: {\n                serializedName: \"x-ms-legal-hold\",\n                xmlName: \"x-ms-legal-hold\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentCrc64: {\n                serializedName: \"x-ms-content-crc64\",\n                xmlName: \"x-ms-content-crc64\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n        },\n    },\n};\nconst BlobDownloadExceptionHeaders = {\n    serializedName: \"Blob_downloadExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobDownloadExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobGetPropertiesHeaders = {\n    serializedName: \"Blob_getPropertiesHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobGetPropertiesHeaders\",\n        modelProperties: {\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            createdOn: {\n                serializedName: \"x-ms-creation-time\",\n                xmlName: \"x-ms-creation-time\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            metadata: {\n                serializedName: \"x-ms-meta\",\n                headerCollectionPrefix: \"x-ms-meta-\",\n                xmlName: \"x-ms-meta\",\n                type: {\n                    name: \"Dictionary\",\n                    value: { type: { name: \"String\" } },\n                },\n            },\n            objectReplicationPolicyId: {\n                serializedName: \"x-ms-or-policy-id\",\n                xmlName: \"x-ms-or-policy-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            objectReplicationRules: {\n                serializedName: \"x-ms-or\",\n                headerCollectionPrefix: \"x-ms-or-\",\n                xmlName: \"x-ms-or\",\n                type: {\n                    name: \"Dictionary\",\n                    value: { type: { name: \"String\" } },\n                },\n            },\n            blobType: {\n                serializedName: \"x-ms-blob-type\",\n                xmlName: \"x-ms-blob-type\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"BlockBlob\", \"PageBlob\", \"AppendBlob\"],\n                },\n            },\n            copyCompletedOn: {\n                serializedName: \"x-ms-copy-completion-time\",\n                xmlName: \"x-ms-copy-completion-time\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            copyStatusDescription: {\n                serializedName: \"x-ms-copy-status-description\",\n                xmlName: \"x-ms-copy-status-description\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyId: {\n                serializedName: \"x-ms-copy-id\",\n                xmlName: \"x-ms-copy-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyProgress: {\n                serializedName: \"x-ms-copy-progress\",\n                xmlName: \"x-ms-copy-progress\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copySource: {\n                serializedName: \"x-ms-copy-source\",\n                xmlName: \"x-ms-copy-source\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyStatus: {\n                serializedName: \"x-ms-copy-status\",\n                xmlName: \"x-ms-copy-status\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"pending\", \"success\", \"aborted\", \"failed\"],\n                },\n            },\n            isIncrementalCopy: {\n                serializedName: \"x-ms-incremental-copy\",\n                xmlName: \"x-ms-incremental-copy\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            destinationSnapshot: {\n                serializedName: \"x-ms-copy-destination-snapshot\",\n                xmlName: \"x-ms-copy-destination-snapshot\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            leaseDuration: {\n                serializedName: \"x-ms-lease-duration\",\n                xmlName: \"x-ms-lease-duration\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"infinite\", \"fixed\"],\n                },\n            },\n            leaseState: {\n                serializedName: \"x-ms-lease-state\",\n                xmlName: \"x-ms-lease-state\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"available\",\n                        \"leased\",\n                        \"expired\",\n                        \"breaking\",\n                        \"broken\",\n                    ],\n                },\n            },\n            leaseStatus: {\n                serializedName: \"x-ms-lease-status\",\n                xmlName: \"x-ms-lease-status\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"locked\", \"unlocked\"],\n                },\n            },\n            contentLength: {\n                serializedName: \"content-length\",\n                xmlName: \"content-length\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            contentType: {\n                serializedName: \"content-type\",\n                xmlName: \"content-type\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            contentEncoding: {\n                serializedName: \"content-encoding\",\n                xmlName: \"content-encoding\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentDisposition: {\n                serializedName: \"content-disposition\",\n                xmlName: \"content-disposition\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentLanguage: {\n                serializedName: \"content-language\",\n                xmlName: \"content-language\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            cacheControl: {\n                serializedName: \"cache-control\",\n                xmlName: \"cache-control\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            blobSequenceNumber: {\n                serializedName: \"x-ms-blob-sequence-number\",\n                xmlName: \"x-ms-blob-sequence-number\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            acceptRanges: {\n                serializedName: \"accept-ranges\",\n                xmlName: \"accept-ranges\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            blobCommittedBlockCount: {\n                serializedName: \"x-ms-blob-committed-block-count\",\n                xmlName: \"x-ms-blob-committed-block-count\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-server-encrypted\",\n                xmlName: \"x-ms-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            accessTier: {\n                serializedName: \"x-ms-access-tier\",\n                xmlName: \"x-ms-access-tier\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            accessTierInferred: {\n                serializedName: \"x-ms-access-tier-inferred\",\n                xmlName: \"x-ms-access-tier-inferred\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            archiveStatus: {\n                serializedName: \"x-ms-archive-status\",\n                xmlName: \"x-ms-archive-status\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            accessTierChangedOn: {\n                serializedName: \"x-ms-access-tier-change-time\",\n                xmlName: \"x-ms-access-tier-change-time\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            versionId: {\n                serializedName: \"x-ms-version-id\",\n                xmlName: \"x-ms-version-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            isCurrentVersion: {\n                serializedName: \"x-ms-is-current-version\",\n                xmlName: \"x-ms-is-current-version\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            tagCount: {\n                serializedName: \"x-ms-tag-count\",\n                xmlName: \"x-ms-tag-count\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            expiresOn: {\n                serializedName: \"x-ms-expiry-time\",\n                xmlName: \"x-ms-expiry-time\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            isSealed: {\n                serializedName: \"x-ms-blob-sealed\",\n                xmlName: \"x-ms-blob-sealed\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            rehydratePriority: {\n                serializedName: \"x-ms-rehydrate-priority\",\n                xmlName: \"x-ms-rehydrate-priority\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"High\", \"Standard\"],\n                },\n            },\n            lastAccessed: {\n                serializedName: \"x-ms-last-access-time\",\n                xmlName: \"x-ms-last-access-time\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            immutabilityPolicyExpiresOn: {\n                serializedName: \"x-ms-immutability-policy-until-date\",\n                xmlName: \"x-ms-immutability-policy-until-date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            immutabilityPolicyMode: {\n                serializedName: \"x-ms-immutability-policy-mode\",\n                xmlName: \"x-ms-immutability-policy-mode\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"Mutable\", \"Unlocked\", \"Locked\"],\n                },\n            },\n            legalHold: {\n                serializedName: \"x-ms-legal-hold\",\n                xmlName: \"x-ms-legal-hold\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobGetPropertiesExceptionHeaders = {\n    serializedName: \"Blob_getPropertiesExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobGetPropertiesExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobDeleteHeaders = {\n    serializedName: \"Blob_deleteHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobDeleteHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobDeleteExceptionHeaders = {\n    serializedName: \"Blob_deleteExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobDeleteExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobUndeleteHeaders = {\n    serializedName: \"Blob_undeleteHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobUndeleteHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobUndeleteExceptionHeaders = {\n    serializedName: \"Blob_undeleteExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobUndeleteExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobSetExpiryHeaders = {\n    serializedName: \"Blob_setExpiryHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobSetExpiryHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n        },\n    },\n};\nconst BlobSetExpiryExceptionHeaders = {\n    serializedName: \"Blob_setExpiryExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobSetExpiryExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobSetHttpHeadersHeaders = {\n    serializedName: \"Blob_setHttpHeadersHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobSetHttpHeadersHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            blobSequenceNumber: {\n                serializedName: \"x-ms-blob-sequence-number\",\n                xmlName: \"x-ms-blob-sequence-number\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobSetHttpHeadersExceptionHeaders = {\n    serializedName: \"Blob_setHttpHeadersExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobSetHttpHeadersExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobSetImmutabilityPolicyHeaders = {\n    serializedName: \"Blob_setImmutabilityPolicyHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobSetImmutabilityPolicyHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            immutabilityPolicyExpiry: {\n                serializedName: \"x-ms-immutability-policy-until-date\",\n                xmlName: \"x-ms-immutability-policy-until-date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            immutabilityPolicyMode: {\n                serializedName: \"x-ms-immutability-policy-mode\",\n                xmlName: \"x-ms-immutability-policy-mode\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"Mutable\", \"Unlocked\", \"Locked\"],\n                },\n            },\n        },\n    },\n};\nconst BlobSetImmutabilityPolicyExceptionHeaders = {\n    serializedName: \"Blob_setImmutabilityPolicyExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobSetImmutabilityPolicyExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobDeleteImmutabilityPolicyHeaders = {\n    serializedName: \"Blob_deleteImmutabilityPolicyHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobDeleteImmutabilityPolicyHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n        },\n    },\n};\nconst BlobDeleteImmutabilityPolicyExceptionHeaders = {\n    serializedName: \"Blob_deleteImmutabilityPolicyExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobDeleteImmutabilityPolicyExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobSetLegalHoldHeaders = {\n    serializedName: \"Blob_setLegalHoldHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobSetLegalHoldHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            legalHold: {\n                serializedName: \"x-ms-legal-hold\",\n                xmlName: \"x-ms-legal-hold\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n        },\n    },\n};\nconst BlobSetLegalHoldExceptionHeaders = {\n    serializedName: \"Blob_setLegalHoldExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobSetLegalHoldExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobSetMetadataHeaders = {\n    serializedName: \"Blob_setMetadataHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobSetMetadataHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            versionId: {\n                serializedName: \"x-ms-version-id\",\n                xmlName: \"x-ms-version-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-request-server-encrypted\",\n                xmlName: \"x-ms-request-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobSetMetadataExceptionHeaders = {\n    serializedName: \"Blob_setMetadataExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobSetMetadataExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobAcquireLeaseHeaders = {\n    serializedName: \"Blob_acquireLeaseHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobAcquireLeaseHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            leaseId: {\n                serializedName: \"x-ms-lease-id\",\n                xmlName: \"x-ms-lease-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n        },\n    },\n};\nconst BlobAcquireLeaseExceptionHeaders = {\n    serializedName: \"Blob_acquireLeaseExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobAcquireLeaseExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobReleaseLeaseHeaders = {\n    serializedName: \"Blob_releaseLeaseHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobReleaseLeaseHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n        },\n    },\n};\nconst BlobReleaseLeaseExceptionHeaders = {\n    serializedName: \"Blob_releaseLeaseExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobReleaseLeaseExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobRenewLeaseHeaders = {\n    serializedName: \"Blob_renewLeaseHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobRenewLeaseHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            leaseId: {\n                serializedName: \"x-ms-lease-id\",\n                xmlName: \"x-ms-lease-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n        },\n    },\n};\nconst BlobRenewLeaseExceptionHeaders = {\n    serializedName: \"Blob_renewLeaseExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobRenewLeaseExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobChangeLeaseHeaders = {\n    serializedName: \"Blob_changeLeaseHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobChangeLeaseHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            leaseId: {\n                serializedName: \"x-ms-lease-id\",\n                xmlName: \"x-ms-lease-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n        },\n    },\n};\nconst BlobChangeLeaseExceptionHeaders = {\n    serializedName: \"Blob_changeLeaseExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobChangeLeaseExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobBreakLeaseHeaders = {\n    serializedName: \"Blob_breakLeaseHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobBreakLeaseHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            leaseTime: {\n                serializedName: \"x-ms-lease-time\",\n                xmlName: \"x-ms-lease-time\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n        },\n    },\n};\nconst BlobBreakLeaseExceptionHeaders = {\n    serializedName: \"Blob_breakLeaseExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobBreakLeaseExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobCreateSnapshotHeaders = {\n    serializedName: \"Blob_createSnapshotHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobCreateSnapshotHeaders\",\n        modelProperties: {\n            snapshot: {\n                serializedName: \"x-ms-snapshot\",\n                xmlName: \"x-ms-snapshot\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            versionId: {\n                serializedName: \"x-ms-version-id\",\n                xmlName: \"x-ms-version-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-request-server-encrypted\",\n                xmlName: \"x-ms-request-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobCreateSnapshotExceptionHeaders = {\n    serializedName: \"Blob_createSnapshotExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobCreateSnapshotExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobStartCopyFromURLHeaders = {\n    serializedName: \"Blob_startCopyFromURLHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobStartCopyFromURLHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            versionId: {\n                serializedName: \"x-ms-version-id\",\n                xmlName: \"x-ms-version-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            copyId: {\n                serializedName: \"x-ms-copy-id\",\n                xmlName: \"x-ms-copy-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyStatus: {\n                serializedName: \"x-ms-copy-status\",\n                xmlName: \"x-ms-copy-status\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"pending\", \"success\", \"aborted\", \"failed\"],\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobStartCopyFromURLExceptionHeaders = {\n    serializedName: \"Blob_startCopyFromURLExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobStartCopyFromURLExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobCopyFromURLHeaders = {\n    serializedName: \"Blob_copyFromURLHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobCopyFromURLHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            versionId: {\n                serializedName: \"x-ms-version-id\",\n                xmlName: \"x-ms-version-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            copyId: {\n                serializedName: \"x-ms-copy-id\",\n                xmlName: \"x-ms-copy-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyStatus: {\n                defaultValue: \"success\",\n                isConstant: true,\n                serializedName: \"x-ms-copy-status\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            xMsContentCrc64: {\n                serializedName: \"x-ms-content-crc64\",\n                xmlName: \"x-ms-content-crc64\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobCopyFromURLExceptionHeaders = {\n    serializedName: \"Blob_copyFromURLExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobCopyFromURLExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobAbortCopyFromURLHeaders = {\n    serializedName: \"Blob_abortCopyFromURLHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobAbortCopyFromURLHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobAbortCopyFromURLExceptionHeaders = {\n    serializedName: \"Blob_abortCopyFromURLExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobAbortCopyFromURLExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobSetTierHeaders = {\n    serializedName: \"Blob_setTierHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobSetTierHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobSetTierExceptionHeaders = {\n    serializedName: \"Blob_setTierExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobSetTierExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobGetAccountInfoHeaders = {\n    serializedName: \"Blob_getAccountInfoHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobGetAccountInfoHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            skuName: {\n                serializedName: \"x-ms-sku-name\",\n                xmlName: \"x-ms-sku-name\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"Standard_LRS\",\n                        \"Standard_GRS\",\n                        \"Standard_RAGRS\",\n                        \"Standard_ZRS\",\n                        \"Premium_LRS\",\n                    ],\n                },\n            },\n            accountKind: {\n                serializedName: \"x-ms-account-kind\",\n                xmlName: \"x-ms-account-kind\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"Storage\",\n                        \"BlobStorage\",\n                        \"StorageV2\",\n                        \"FileStorage\",\n                        \"BlockBlobStorage\",\n                    ],\n                },\n            },\n            isHierarchicalNamespaceEnabled: {\n                serializedName: \"x-ms-is-hns-enabled\",\n                xmlName: \"x-ms-is-hns-enabled\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n        },\n    },\n};\nconst BlobGetAccountInfoExceptionHeaders = {\n    serializedName: \"Blob_getAccountInfoExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobGetAccountInfoExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobQueryHeaders = {\n    serializedName: \"Blob_queryHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobQueryHeaders\",\n        modelProperties: {\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            metadata: {\n                serializedName: \"x-ms-meta\",\n                headerCollectionPrefix: \"x-ms-meta-\",\n                xmlName: \"x-ms-meta\",\n                type: {\n                    name: \"Dictionary\",\n                    value: { type: { name: \"String\" } },\n                },\n            },\n            contentLength: {\n                serializedName: \"content-length\",\n                xmlName: \"content-length\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            contentType: {\n                serializedName: \"content-type\",\n                xmlName: \"content-type\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentRange: {\n                serializedName: \"content-range\",\n                xmlName: \"content-range\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            contentEncoding: {\n                serializedName: \"content-encoding\",\n                xmlName: \"content-encoding\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            cacheControl: {\n                serializedName: \"cache-control\",\n                xmlName: \"cache-control\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentDisposition: {\n                serializedName: \"content-disposition\",\n                xmlName: \"content-disposition\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentLanguage: {\n                serializedName: \"content-language\",\n                xmlName: \"content-language\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            blobSequenceNumber: {\n                serializedName: \"x-ms-blob-sequence-number\",\n                xmlName: \"x-ms-blob-sequence-number\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            blobType: {\n                serializedName: \"x-ms-blob-type\",\n                xmlName: \"x-ms-blob-type\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"BlockBlob\", \"PageBlob\", \"AppendBlob\"],\n                },\n            },\n            copyCompletionTime: {\n                serializedName: \"x-ms-copy-completion-time\",\n                xmlName: \"x-ms-copy-completion-time\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            copyStatusDescription: {\n                serializedName: \"x-ms-copy-status-description\",\n                xmlName: \"x-ms-copy-status-description\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyId: {\n                serializedName: \"x-ms-copy-id\",\n                xmlName: \"x-ms-copy-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyProgress: {\n                serializedName: \"x-ms-copy-progress\",\n                xmlName: \"x-ms-copy-progress\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copySource: {\n                serializedName: \"x-ms-copy-source\",\n                xmlName: \"x-ms-copy-source\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyStatus: {\n                serializedName: \"x-ms-copy-status\",\n                xmlName: \"x-ms-copy-status\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"pending\", \"success\", \"aborted\", \"failed\"],\n                },\n            },\n            leaseDuration: {\n                serializedName: \"x-ms-lease-duration\",\n                xmlName: \"x-ms-lease-duration\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"infinite\", \"fixed\"],\n                },\n            },\n            leaseState: {\n                serializedName: \"x-ms-lease-state\",\n                xmlName: \"x-ms-lease-state\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"available\",\n                        \"leased\",\n                        \"expired\",\n                        \"breaking\",\n                        \"broken\",\n                    ],\n                },\n            },\n            leaseStatus: {\n                serializedName: \"x-ms-lease-status\",\n                xmlName: \"x-ms-lease-status\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"locked\", \"unlocked\"],\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            acceptRanges: {\n                serializedName: \"accept-ranges\",\n                xmlName: \"accept-ranges\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            blobCommittedBlockCount: {\n                serializedName: \"x-ms-blob-committed-block-count\",\n                xmlName: \"x-ms-blob-committed-block-count\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-server-encrypted\",\n                xmlName: \"x-ms-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            blobContentMD5: {\n                serializedName: \"x-ms-blob-content-md5\",\n                xmlName: \"x-ms-blob-content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentCrc64: {\n                serializedName: \"x-ms-content-crc64\",\n                xmlName: \"x-ms-content-crc64\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n        },\n    },\n};\nconst BlobQueryExceptionHeaders = {\n    serializedName: \"Blob_queryExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobQueryExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobGetTagsHeaders = {\n    serializedName: \"Blob_getTagsHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobGetTagsHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobGetTagsExceptionHeaders = {\n    serializedName: \"Blob_getTagsExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobGetTagsExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobSetTagsHeaders = {\n    serializedName: \"Blob_setTagsHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobSetTagsHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobSetTagsExceptionHeaders = {\n    serializedName: \"Blob_setTagsExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobSetTagsExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst PageBlobCreateHeaders = {\n    serializedName: \"PageBlob_createHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobCreateHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            versionId: {\n                serializedName: \"x-ms-version-id\",\n                xmlName: \"x-ms-version-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-request-server-encrypted\",\n                xmlName: \"x-ms-request-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst PageBlobCreateExceptionHeaders = {\n    serializedName: \"PageBlob_createExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobCreateExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst PageBlobUploadPagesHeaders = {\n    serializedName: \"PageBlob_uploadPagesHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobUploadPagesHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            xMsContentCrc64: {\n                serializedName: \"x-ms-content-crc64\",\n                xmlName: \"x-ms-content-crc64\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            blobSequenceNumber: {\n                serializedName: \"x-ms-blob-sequence-number\",\n                xmlName: \"x-ms-blob-sequence-number\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-request-server-encrypted\",\n                xmlName: \"x-ms-request-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst PageBlobUploadPagesExceptionHeaders = {\n    serializedName: \"PageBlob_uploadPagesExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobUploadPagesExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst PageBlobClearPagesHeaders = {\n    serializedName: \"PageBlob_clearPagesHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobClearPagesHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            xMsContentCrc64: {\n                serializedName: \"x-ms-content-crc64\",\n                xmlName: \"x-ms-content-crc64\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            blobSequenceNumber: {\n                serializedName: \"x-ms-blob-sequence-number\",\n                xmlName: \"x-ms-blob-sequence-number\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst PageBlobClearPagesExceptionHeaders = {\n    serializedName: \"PageBlob_clearPagesExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobClearPagesExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst PageBlobUploadPagesFromURLHeaders = {\n    serializedName: \"PageBlob_uploadPagesFromURLHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobUploadPagesFromURLHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            xMsContentCrc64: {\n                serializedName: \"x-ms-content-crc64\",\n                xmlName: \"x-ms-content-crc64\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            blobSequenceNumber: {\n                serializedName: \"x-ms-blob-sequence-number\",\n                xmlName: \"x-ms-blob-sequence-number\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-request-server-encrypted\",\n                xmlName: \"x-ms-request-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst PageBlobUploadPagesFromURLExceptionHeaders = {\n    serializedName: \"PageBlob_uploadPagesFromURLExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobUploadPagesFromURLExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst PageBlobGetPageRangesHeaders = {\n    serializedName: \"PageBlob_getPageRangesHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobGetPageRangesHeaders\",\n        modelProperties: {\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            blobContentLength: {\n                serializedName: \"x-ms-blob-content-length\",\n                xmlName: \"x-ms-blob-content-length\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst PageBlobGetPageRangesExceptionHeaders = {\n    serializedName: \"PageBlob_getPageRangesExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobGetPageRangesExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst PageBlobGetPageRangesDiffHeaders = {\n    serializedName: \"PageBlob_getPageRangesDiffHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobGetPageRangesDiffHeaders\",\n        modelProperties: {\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            blobContentLength: {\n                serializedName: \"x-ms-blob-content-length\",\n                xmlName: \"x-ms-blob-content-length\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst PageBlobGetPageRangesDiffExceptionHeaders = {\n    serializedName: \"PageBlob_getPageRangesDiffExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobGetPageRangesDiffExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst PageBlobResizeHeaders = {\n    serializedName: \"PageBlob_resizeHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobResizeHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            blobSequenceNumber: {\n                serializedName: \"x-ms-blob-sequence-number\",\n                xmlName: \"x-ms-blob-sequence-number\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst PageBlobResizeExceptionHeaders = {\n    serializedName: \"PageBlob_resizeExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobResizeExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst PageBlobUpdateSequenceNumberHeaders = {\n    serializedName: \"PageBlob_updateSequenceNumberHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobUpdateSequenceNumberHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            blobSequenceNumber: {\n                serializedName: \"x-ms-blob-sequence-number\",\n                xmlName: \"x-ms-blob-sequence-number\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst PageBlobUpdateSequenceNumberExceptionHeaders = {\n    serializedName: \"PageBlob_updateSequenceNumberExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobUpdateSequenceNumberExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst PageBlobCopyIncrementalHeaders = {\n    serializedName: \"PageBlob_copyIncrementalHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobCopyIncrementalHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            copyId: {\n                serializedName: \"x-ms-copy-id\",\n                xmlName: \"x-ms-copy-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyStatus: {\n                serializedName: \"x-ms-copy-status\",\n                xmlName: \"x-ms-copy-status\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"pending\", \"success\", \"aborted\", \"failed\"],\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst PageBlobCopyIncrementalExceptionHeaders = {\n    serializedName: \"PageBlob_copyIncrementalExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobCopyIncrementalExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst AppendBlobCreateHeaders = {\n    serializedName: \"AppendBlob_createHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"AppendBlobCreateHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            versionId: {\n                serializedName: \"x-ms-version-id\",\n                xmlName: \"x-ms-version-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-request-server-encrypted\",\n                xmlName: \"x-ms-request-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst AppendBlobCreateExceptionHeaders = {\n    serializedName: \"AppendBlob_createExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"AppendBlobCreateExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst AppendBlobAppendBlockHeaders = {\n    serializedName: \"AppendBlob_appendBlockHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"AppendBlobAppendBlockHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            xMsContentCrc64: {\n                serializedName: \"x-ms-content-crc64\",\n                xmlName: \"x-ms-content-crc64\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            blobAppendOffset: {\n                serializedName: \"x-ms-blob-append-offset\",\n                xmlName: \"x-ms-blob-append-offset\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            blobCommittedBlockCount: {\n                serializedName: \"x-ms-blob-committed-block-count\",\n                xmlName: \"x-ms-blob-committed-block-count\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-request-server-encrypted\",\n                xmlName: \"x-ms-request-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst AppendBlobAppendBlockExceptionHeaders = {\n    serializedName: \"AppendBlob_appendBlockExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"AppendBlobAppendBlockExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst AppendBlobAppendBlockFromUrlHeaders = {\n    serializedName: \"AppendBlob_appendBlockFromUrlHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"AppendBlobAppendBlockFromUrlHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            xMsContentCrc64: {\n                serializedName: \"x-ms-content-crc64\",\n                xmlName: \"x-ms-content-crc64\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            blobAppendOffset: {\n                serializedName: \"x-ms-blob-append-offset\",\n                xmlName: \"x-ms-blob-append-offset\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            blobCommittedBlockCount: {\n                serializedName: \"x-ms-blob-committed-block-count\",\n                xmlName: \"x-ms-blob-committed-block-count\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-request-server-encrypted\",\n                xmlName: \"x-ms-request-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst AppendBlobAppendBlockFromUrlExceptionHeaders = {\n    serializedName: \"AppendBlob_appendBlockFromUrlExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"AppendBlobAppendBlockFromUrlExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst AppendBlobSealHeaders = {\n    serializedName: \"AppendBlob_sealHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"AppendBlobSealHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            isSealed: {\n                serializedName: \"x-ms-blob-sealed\",\n                xmlName: \"x-ms-blob-sealed\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n        },\n    },\n};\nconst AppendBlobSealExceptionHeaders = {\n    serializedName: \"AppendBlob_sealExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"AppendBlobSealExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlockBlobUploadHeaders = {\n    serializedName: \"BlockBlob_uploadHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlockBlobUploadHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            versionId: {\n                serializedName: \"x-ms-version-id\",\n                xmlName: \"x-ms-version-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-request-server-encrypted\",\n                xmlName: \"x-ms-request-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlockBlobUploadExceptionHeaders = {\n    serializedName: \"BlockBlob_uploadExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlockBlobUploadExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlockBlobPutBlobFromUrlHeaders = {\n    serializedName: \"BlockBlob_putBlobFromUrlHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlockBlobPutBlobFromUrlHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            versionId: {\n                serializedName: \"x-ms-version-id\",\n                xmlName: \"x-ms-version-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-request-server-encrypted\",\n                xmlName: \"x-ms-request-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlockBlobPutBlobFromUrlExceptionHeaders = {\n    serializedName: \"BlockBlob_putBlobFromUrlExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlockBlobPutBlobFromUrlExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlockBlobStageBlockHeaders = {\n    serializedName: \"BlockBlob_stageBlockHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlockBlobStageBlockHeaders\",\n        modelProperties: {\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            xMsContentCrc64: {\n                serializedName: \"x-ms-content-crc64\",\n                xmlName: \"x-ms-content-crc64\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-request-server-encrypted\",\n                xmlName: \"x-ms-request-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlockBlobStageBlockExceptionHeaders = {\n    serializedName: \"BlockBlob_stageBlockExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlockBlobStageBlockExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlockBlobStageBlockFromURLHeaders = {\n    serializedName: \"BlockBlob_stageBlockFromURLHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlockBlobStageBlockFromURLHeaders\",\n        modelProperties: {\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            xMsContentCrc64: {\n                serializedName: \"x-ms-content-crc64\",\n                xmlName: \"x-ms-content-crc64\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-request-server-encrypted\",\n                xmlName: \"x-ms-request-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlockBlobStageBlockFromURLExceptionHeaders = {\n    serializedName: \"BlockBlob_stageBlockFromURLExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlockBlobStageBlockFromURLExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlockBlobCommitBlockListHeaders = {\n    serializedName: \"BlockBlob_commitBlockListHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlockBlobCommitBlockListHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            xMsContentCrc64: {\n                serializedName: \"x-ms-content-crc64\",\n                xmlName: \"x-ms-content-crc64\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            versionId: {\n                serializedName: \"x-ms-version-id\",\n                xmlName: \"x-ms-version-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-request-server-encrypted\",\n                xmlName: \"x-ms-request-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlockBlobCommitBlockListExceptionHeaders = {\n    serializedName: \"BlockBlob_commitBlockListExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlockBlobCommitBlockListExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlockBlobGetBlockListHeaders = {\n    serializedName: \"BlockBlob_getBlockListHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlockBlobGetBlockListHeaders\",\n        modelProperties: {\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentType: {\n                serializedName: \"content-type\",\n                xmlName: \"content-type\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            blobContentLength: {\n                serializedName: \"x-ms-blob-content-length\",\n                xmlName: \"x-ms-blob-content-length\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlockBlobGetBlockListExceptionHeaders = {\n    serializedName: \"BlockBlob_getBlockListExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlockBlobGetBlockListExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\n//# sourceMappingURL=mappers.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/mappers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/parameters.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/parameters.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   accept: () => (/* binding */ accept),\n/* harmony export */   accept1: () => (/* binding */ accept1),\n/* harmony export */   accept2: () => (/* binding */ accept2),\n/* harmony export */   access: () => (/* binding */ access),\n/* harmony export */   action: () => (/* binding */ action),\n/* harmony export */   action1: () => (/* binding */ action1),\n/* harmony export */   action2: () => (/* binding */ action2),\n/* harmony export */   action3: () => (/* binding */ action3),\n/* harmony export */   action4: () => (/* binding */ action4),\n/* harmony export */   appendPosition: () => (/* binding */ appendPosition),\n/* harmony export */   blobCacheControl: () => (/* binding */ blobCacheControl),\n/* harmony export */   blobContentDisposition: () => (/* binding */ blobContentDisposition),\n/* harmony export */   blobContentEncoding: () => (/* binding */ blobContentEncoding),\n/* harmony export */   blobContentLanguage: () => (/* binding */ blobContentLanguage),\n/* harmony export */   blobContentLength: () => (/* binding */ blobContentLength),\n/* harmony export */   blobContentMD5: () => (/* binding */ blobContentMD5),\n/* harmony export */   blobContentType: () => (/* binding */ blobContentType),\n/* harmony export */   blobDeleteType: () => (/* binding */ blobDeleteType),\n/* harmony export */   blobSequenceNumber: () => (/* binding */ blobSequenceNumber),\n/* harmony export */   blobServiceProperties: () => (/* binding */ blobServiceProperties),\n/* harmony export */   blobTagsString: () => (/* binding */ blobTagsString),\n/* harmony export */   blobType: () => (/* binding */ blobType),\n/* harmony export */   blobType1: () => (/* binding */ blobType1),\n/* harmony export */   blobType2: () => (/* binding */ blobType2),\n/* harmony export */   blockId: () => (/* binding */ blockId),\n/* harmony export */   blocks: () => (/* binding */ blocks),\n/* harmony export */   body: () => (/* binding */ body),\n/* harmony export */   body1: () => (/* binding */ body1),\n/* harmony export */   breakPeriod: () => (/* binding */ breakPeriod),\n/* harmony export */   comp: () => (/* binding */ comp),\n/* harmony export */   comp1: () => (/* binding */ comp1),\n/* harmony export */   comp10: () => (/* binding */ comp10),\n/* harmony export */   comp11: () => (/* binding */ comp11),\n/* harmony export */   comp12: () => (/* binding */ comp12),\n/* harmony export */   comp13: () => (/* binding */ comp13),\n/* harmony export */   comp14: () => (/* binding */ comp14),\n/* harmony export */   comp15: () => (/* binding */ comp15),\n/* harmony export */   comp16: () => (/* binding */ comp16),\n/* harmony export */   comp17: () => (/* binding */ comp17),\n/* harmony export */   comp18: () => (/* binding */ comp18),\n/* harmony export */   comp19: () => (/* binding */ comp19),\n/* harmony export */   comp2: () => (/* binding */ comp2),\n/* harmony export */   comp20: () => (/* binding */ comp20),\n/* harmony export */   comp21: () => (/* binding */ comp21),\n/* harmony export */   comp22: () => (/* binding */ comp22),\n/* harmony export */   comp23: () => (/* binding */ comp23),\n/* harmony export */   comp24: () => (/* binding */ comp24),\n/* harmony export */   comp25: () => (/* binding */ comp25),\n/* harmony export */   comp3: () => (/* binding */ comp3),\n/* harmony export */   comp4: () => (/* binding */ comp4),\n/* harmony export */   comp5: () => (/* binding */ comp5),\n/* harmony export */   comp6: () => (/* binding */ comp6),\n/* harmony export */   comp7: () => (/* binding */ comp7),\n/* harmony export */   comp8: () => (/* binding */ comp8),\n/* harmony export */   comp9: () => (/* binding */ comp9),\n/* harmony export */   containerAcl: () => (/* binding */ containerAcl),\n/* harmony export */   contentLength: () => (/* binding */ contentLength),\n/* harmony export */   contentType: () => (/* binding */ contentType),\n/* harmony export */   contentType1: () => (/* binding */ contentType1),\n/* harmony export */   copyActionAbortConstant: () => (/* binding */ copyActionAbortConstant),\n/* harmony export */   copyId: () => (/* binding */ copyId),\n/* harmony export */   copySource: () => (/* binding */ copySource),\n/* harmony export */   copySourceAuthorization: () => (/* binding */ copySourceAuthorization),\n/* harmony export */   copySourceBlobProperties: () => (/* binding */ copySourceBlobProperties),\n/* harmony export */   copySourceTags: () => (/* binding */ copySourceTags),\n/* harmony export */   defaultEncryptionScope: () => (/* binding */ defaultEncryptionScope),\n/* harmony export */   deleteSnapshots: () => (/* binding */ deleteSnapshots),\n/* harmony export */   deletedContainerName: () => (/* binding */ deletedContainerName),\n/* harmony export */   deletedContainerVersion: () => (/* binding */ deletedContainerVersion),\n/* harmony export */   delimiter: () => (/* binding */ delimiter),\n/* harmony export */   duration: () => (/* binding */ duration),\n/* harmony export */   encryptionAlgorithm: () => (/* binding */ encryptionAlgorithm),\n/* harmony export */   encryptionKey: () => (/* binding */ encryptionKey),\n/* harmony export */   encryptionKeySha256: () => (/* binding */ encryptionKeySha256),\n/* harmony export */   encryptionScope: () => (/* binding */ encryptionScope),\n/* harmony export */   expiresOn: () => (/* binding */ expiresOn),\n/* harmony export */   expiryOptions: () => (/* binding */ expiryOptions),\n/* harmony export */   ifMatch: () => (/* binding */ ifMatch),\n/* harmony export */   ifModifiedSince: () => (/* binding */ ifModifiedSince),\n/* harmony export */   ifNoneMatch: () => (/* binding */ ifNoneMatch),\n/* harmony export */   ifSequenceNumberEqualTo: () => (/* binding */ ifSequenceNumberEqualTo),\n/* harmony export */   ifSequenceNumberLessThan: () => (/* binding */ ifSequenceNumberLessThan),\n/* harmony export */   ifSequenceNumberLessThanOrEqualTo: () => (/* binding */ ifSequenceNumberLessThanOrEqualTo),\n/* harmony export */   ifTags: () => (/* binding */ ifTags),\n/* harmony export */   ifUnmodifiedSince: () => (/* binding */ ifUnmodifiedSince),\n/* harmony export */   immutabilityPolicyExpiry: () => (/* binding */ immutabilityPolicyExpiry),\n/* harmony export */   immutabilityPolicyMode: () => (/* binding */ immutabilityPolicyMode),\n/* harmony export */   include: () => (/* binding */ include),\n/* harmony export */   include1: () => (/* binding */ include1),\n/* harmony export */   keyInfo: () => (/* binding */ keyInfo),\n/* harmony export */   leaseId: () => (/* binding */ leaseId),\n/* harmony export */   leaseId1: () => (/* binding */ leaseId1),\n/* harmony export */   legalHold: () => (/* binding */ legalHold),\n/* harmony export */   legalHold1: () => (/* binding */ legalHold1),\n/* harmony export */   listType: () => (/* binding */ listType),\n/* harmony export */   marker: () => (/* binding */ marker),\n/* harmony export */   maxPageSize: () => (/* binding */ maxPageSize),\n/* harmony export */   maxSize: () => (/* binding */ maxSize),\n/* harmony export */   metadata: () => (/* binding */ metadata),\n/* harmony export */   multipartContentType: () => (/* binding */ multipartContentType),\n/* harmony export */   pageWrite: () => (/* binding */ pageWrite),\n/* harmony export */   pageWrite1: () => (/* binding */ pageWrite1),\n/* harmony export */   prefix: () => (/* binding */ prefix),\n/* harmony export */   prevSnapshotUrl: () => (/* binding */ prevSnapshotUrl),\n/* harmony export */   preventEncryptionScopeOverride: () => (/* binding */ preventEncryptionScopeOverride),\n/* harmony export */   prevsnapshot: () => (/* binding */ prevsnapshot),\n/* harmony export */   proposedLeaseId: () => (/* binding */ proposedLeaseId),\n/* harmony export */   proposedLeaseId1: () => (/* binding */ proposedLeaseId1),\n/* harmony export */   queryRequest: () => (/* binding */ queryRequest),\n/* harmony export */   range: () => (/* binding */ range),\n/* harmony export */   range1: () => (/* binding */ range1),\n/* harmony export */   rangeGetContentCRC64: () => (/* binding */ rangeGetContentCRC64),\n/* harmony export */   rangeGetContentMD5: () => (/* binding */ rangeGetContentMD5),\n/* harmony export */   rehydratePriority: () => (/* binding */ rehydratePriority),\n/* harmony export */   requestId: () => (/* binding */ requestId),\n/* harmony export */   restype: () => (/* binding */ restype),\n/* harmony export */   restype1: () => (/* binding */ restype1),\n/* harmony export */   restype2: () => (/* binding */ restype2),\n/* harmony export */   sealBlob: () => (/* binding */ sealBlob),\n/* harmony export */   sequenceNumberAction: () => (/* binding */ sequenceNumberAction),\n/* harmony export */   snapshot: () => (/* binding */ snapshot),\n/* harmony export */   sourceContainerName: () => (/* binding */ sourceContainerName),\n/* harmony export */   sourceContentCrc64: () => (/* binding */ sourceContentCrc64),\n/* harmony export */   sourceContentMD5: () => (/* binding */ sourceContentMD5),\n/* harmony export */   sourceIfMatch: () => (/* binding */ sourceIfMatch),\n/* harmony export */   sourceIfModifiedSince: () => (/* binding */ sourceIfModifiedSince),\n/* harmony export */   sourceIfNoneMatch: () => (/* binding */ sourceIfNoneMatch),\n/* harmony export */   sourceIfTags: () => (/* binding */ sourceIfTags),\n/* harmony export */   sourceIfUnmodifiedSince: () => (/* binding */ sourceIfUnmodifiedSince),\n/* harmony export */   sourceLeaseId: () => (/* binding */ sourceLeaseId),\n/* harmony export */   sourceRange: () => (/* binding */ sourceRange),\n/* harmony export */   sourceRange1: () => (/* binding */ sourceRange1),\n/* harmony export */   sourceUrl: () => (/* binding */ sourceUrl),\n/* harmony export */   tags: () => (/* binding */ tags),\n/* harmony export */   tier: () => (/* binding */ tier),\n/* harmony export */   tier1: () => (/* binding */ tier1),\n/* harmony export */   timeoutInSeconds: () => (/* binding */ timeoutInSeconds),\n/* harmony export */   transactionalContentCrc64: () => (/* binding */ transactionalContentCrc64),\n/* harmony export */   transactionalContentMD5: () => (/* binding */ transactionalContentMD5),\n/* harmony export */   url: () => (/* binding */ url),\n/* harmony export */   version: () => (/* binding */ version),\n/* harmony export */   versionId: () => (/* binding */ versionId),\n/* harmony export */   where: () => (/* binding */ where),\n/* harmony export */   xMsRequiresSync: () => (/* binding */ xMsRequiresSync)\n/* harmony export */ });\n/* harmony import */ var _models_mappers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models/mappers */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/mappers.js\");\n/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nconst contentType = {\n    parameterPath: [\"options\", \"contentType\"],\n    mapper: {\n        defaultValue: \"application/xml\",\n        isConstant: true,\n        serializedName: \"Content-Type\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst blobServiceProperties = {\n    parameterPath: \"blobServiceProperties\",\n    mapper: _models_mappers__WEBPACK_IMPORTED_MODULE_0__.BlobServiceProperties,\n};\nconst accept = {\n    parameterPath: \"accept\",\n    mapper: {\n        defaultValue: \"application/xml\",\n        isConstant: true,\n        serializedName: \"Accept\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst url = {\n    parameterPath: \"url\",\n    mapper: {\n        serializedName: \"url\",\n        required: true,\n        xmlName: \"url\",\n        type: {\n            name: \"String\",\n        },\n    },\n    skipEncoding: true,\n};\nconst restype = {\n    parameterPath: \"restype\",\n    mapper: {\n        defaultValue: \"service\",\n        isConstant: true,\n        serializedName: \"restype\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst comp = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"properties\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst timeoutInSeconds = {\n    parameterPath: [\"options\", \"timeoutInSeconds\"],\n    mapper: {\n        constraints: {\n            InclusiveMinimum: 0,\n        },\n        serializedName: \"timeout\",\n        xmlName: \"timeout\",\n        type: {\n            name: \"Number\",\n        },\n    },\n};\nconst version = {\n    parameterPath: \"version\",\n    mapper: {\n        defaultValue: \"2025-01-05\",\n        isConstant: true,\n        serializedName: \"x-ms-version\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst requestId = {\n    parameterPath: [\"options\", \"requestId\"],\n    mapper: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst accept1 = {\n    parameterPath: \"accept\",\n    mapper: {\n        defaultValue: \"application/xml\",\n        isConstant: true,\n        serializedName: \"Accept\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst comp1 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"stats\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst comp2 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"list\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst prefix = {\n    parameterPath: [\"options\", \"prefix\"],\n    mapper: {\n        serializedName: \"prefix\",\n        xmlName: \"prefix\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst marker = {\n    parameterPath: [\"options\", \"marker\"],\n    mapper: {\n        serializedName: \"marker\",\n        xmlName: \"marker\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst maxPageSize = {\n    parameterPath: [\"options\", \"maxPageSize\"],\n    mapper: {\n        constraints: {\n            InclusiveMinimum: 1,\n        },\n        serializedName: \"maxresults\",\n        xmlName: \"maxresults\",\n        type: {\n            name: \"Number\",\n        },\n    },\n};\nconst include = {\n    parameterPath: [\"options\", \"include\"],\n    mapper: {\n        serializedName: \"include\",\n        xmlName: \"include\",\n        xmlElementName: \"ListContainersIncludeType\",\n        type: {\n            name: \"Sequence\",\n            element: {\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"metadata\", \"deleted\", \"system\"],\n                },\n            },\n        },\n    },\n    collectionFormat: \"CSV\",\n};\nconst keyInfo = {\n    parameterPath: \"keyInfo\",\n    mapper: _models_mappers__WEBPACK_IMPORTED_MODULE_0__.KeyInfo,\n};\nconst comp3 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"userdelegationkey\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst restype1 = {\n    parameterPath: \"restype\",\n    mapper: {\n        defaultValue: \"account\",\n        isConstant: true,\n        serializedName: \"restype\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst body = {\n    parameterPath: \"body\",\n    mapper: {\n        serializedName: \"body\",\n        required: true,\n        xmlName: \"body\",\n        type: {\n            name: \"Stream\",\n        },\n    },\n};\nconst comp4 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"batch\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst contentLength = {\n    parameterPath: \"contentLength\",\n    mapper: {\n        serializedName: \"Content-Length\",\n        required: true,\n        xmlName: \"Content-Length\",\n        type: {\n            name: \"Number\",\n        },\n    },\n};\nconst multipartContentType = {\n    parameterPath: \"multipartContentType\",\n    mapper: {\n        serializedName: \"Content-Type\",\n        required: true,\n        xmlName: \"Content-Type\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst comp5 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"blobs\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst where = {\n    parameterPath: [\"options\", \"where\"],\n    mapper: {\n        serializedName: \"where\",\n        xmlName: \"where\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst restype2 = {\n    parameterPath: \"restype\",\n    mapper: {\n        defaultValue: \"container\",\n        isConstant: true,\n        serializedName: \"restype\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst metadata = {\n    parameterPath: [\"options\", \"metadata\"],\n    mapper: {\n        serializedName: \"x-ms-meta\",\n        xmlName: \"x-ms-meta\",\n        headerCollectionPrefix: \"x-ms-meta-\",\n        type: {\n            name: \"Dictionary\",\n            value: { type: { name: \"String\" } },\n        },\n    },\n};\nconst access = {\n    parameterPath: [\"options\", \"access\"],\n    mapper: {\n        serializedName: \"x-ms-blob-public-access\",\n        xmlName: \"x-ms-blob-public-access\",\n        type: {\n            name: \"Enum\",\n            allowedValues: [\"container\", \"blob\"],\n        },\n    },\n};\nconst defaultEncryptionScope = {\n    parameterPath: [\n        \"options\",\n        \"containerEncryptionScope\",\n        \"defaultEncryptionScope\",\n    ],\n    mapper: {\n        serializedName: \"x-ms-default-encryption-scope\",\n        xmlName: \"x-ms-default-encryption-scope\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst preventEncryptionScopeOverride = {\n    parameterPath: [\n        \"options\",\n        \"containerEncryptionScope\",\n        \"preventEncryptionScopeOverride\",\n    ],\n    mapper: {\n        serializedName: \"x-ms-deny-encryption-scope-override\",\n        xmlName: \"x-ms-deny-encryption-scope-override\",\n        type: {\n            name: \"Boolean\",\n        },\n    },\n};\nconst leaseId = {\n    parameterPath: [\"options\", \"leaseAccessConditions\", \"leaseId\"],\n    mapper: {\n        serializedName: \"x-ms-lease-id\",\n        xmlName: \"x-ms-lease-id\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst ifModifiedSince = {\n    parameterPath: [\"options\", \"modifiedAccessConditions\", \"ifModifiedSince\"],\n    mapper: {\n        serializedName: \"If-Modified-Since\",\n        xmlName: \"If-Modified-Since\",\n        type: {\n            name: \"DateTimeRfc1123\",\n        },\n    },\n};\nconst ifUnmodifiedSince = {\n    parameterPath: [\"options\", \"modifiedAccessConditions\", \"ifUnmodifiedSince\"],\n    mapper: {\n        serializedName: \"If-Unmodified-Since\",\n        xmlName: \"If-Unmodified-Since\",\n        type: {\n            name: \"DateTimeRfc1123\",\n        },\n    },\n};\nconst comp6 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"metadata\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst comp7 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"acl\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst containerAcl = {\n    parameterPath: [\"options\", \"containerAcl\"],\n    mapper: {\n        serializedName: \"containerAcl\",\n        xmlName: \"SignedIdentifiers\",\n        xmlIsWrapped: true,\n        xmlElementName: \"SignedIdentifier\",\n        type: {\n            name: \"Sequence\",\n            element: {\n                type: {\n                    name: \"Composite\",\n                    className: \"SignedIdentifier\",\n                },\n            },\n        },\n    },\n};\nconst comp8 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"undelete\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst deletedContainerName = {\n    parameterPath: [\"options\", \"deletedContainerName\"],\n    mapper: {\n        serializedName: \"x-ms-deleted-container-name\",\n        xmlName: \"x-ms-deleted-container-name\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst deletedContainerVersion = {\n    parameterPath: [\"options\", \"deletedContainerVersion\"],\n    mapper: {\n        serializedName: \"x-ms-deleted-container-version\",\n        xmlName: \"x-ms-deleted-container-version\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst comp9 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"rename\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst sourceContainerName = {\n    parameterPath: \"sourceContainerName\",\n    mapper: {\n        serializedName: \"x-ms-source-container-name\",\n        required: true,\n        xmlName: \"x-ms-source-container-name\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst sourceLeaseId = {\n    parameterPath: [\"options\", \"sourceLeaseId\"],\n    mapper: {\n        serializedName: \"x-ms-source-lease-id\",\n        xmlName: \"x-ms-source-lease-id\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst comp10 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"lease\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst action = {\n    parameterPath: \"action\",\n    mapper: {\n        defaultValue: \"acquire\",\n        isConstant: true,\n        serializedName: \"x-ms-lease-action\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst duration = {\n    parameterPath: [\"options\", \"duration\"],\n    mapper: {\n        serializedName: \"x-ms-lease-duration\",\n        xmlName: \"x-ms-lease-duration\",\n        type: {\n            name: \"Number\",\n        },\n    },\n};\nconst proposedLeaseId = {\n    parameterPath: [\"options\", \"proposedLeaseId\"],\n    mapper: {\n        serializedName: \"x-ms-proposed-lease-id\",\n        xmlName: \"x-ms-proposed-lease-id\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst action1 = {\n    parameterPath: \"action\",\n    mapper: {\n        defaultValue: \"release\",\n        isConstant: true,\n        serializedName: \"x-ms-lease-action\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst leaseId1 = {\n    parameterPath: \"leaseId\",\n    mapper: {\n        serializedName: \"x-ms-lease-id\",\n        required: true,\n        xmlName: \"x-ms-lease-id\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst action2 = {\n    parameterPath: \"action\",\n    mapper: {\n        defaultValue: \"renew\",\n        isConstant: true,\n        serializedName: \"x-ms-lease-action\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst action3 = {\n    parameterPath: \"action\",\n    mapper: {\n        defaultValue: \"break\",\n        isConstant: true,\n        serializedName: \"x-ms-lease-action\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst breakPeriod = {\n    parameterPath: [\"options\", \"breakPeriod\"],\n    mapper: {\n        serializedName: \"x-ms-lease-break-period\",\n        xmlName: \"x-ms-lease-break-period\",\n        type: {\n            name: \"Number\",\n        },\n    },\n};\nconst action4 = {\n    parameterPath: \"action\",\n    mapper: {\n        defaultValue: \"change\",\n        isConstant: true,\n        serializedName: \"x-ms-lease-action\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst proposedLeaseId1 = {\n    parameterPath: \"proposedLeaseId\",\n    mapper: {\n        serializedName: \"x-ms-proposed-lease-id\",\n        required: true,\n        xmlName: \"x-ms-proposed-lease-id\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst include1 = {\n    parameterPath: [\"options\", \"include\"],\n    mapper: {\n        serializedName: \"include\",\n        xmlName: \"include\",\n        xmlElementName: \"ListBlobsIncludeItem\",\n        type: {\n            name: \"Sequence\",\n            element: {\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"copy\",\n                        \"deleted\",\n                        \"metadata\",\n                        \"snapshots\",\n                        \"uncommittedblobs\",\n                        \"versions\",\n                        \"tags\",\n                        \"immutabilitypolicy\",\n                        \"legalhold\",\n                        \"deletedwithversions\",\n                    ],\n                },\n            },\n        },\n    },\n    collectionFormat: \"CSV\",\n};\nconst delimiter = {\n    parameterPath: \"delimiter\",\n    mapper: {\n        serializedName: \"delimiter\",\n        required: true,\n        xmlName: \"delimiter\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst snapshot = {\n    parameterPath: [\"options\", \"snapshot\"],\n    mapper: {\n        serializedName: \"snapshot\",\n        xmlName: \"snapshot\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst versionId = {\n    parameterPath: [\"options\", \"versionId\"],\n    mapper: {\n        serializedName: \"versionid\",\n        xmlName: \"versionid\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst range = {\n    parameterPath: [\"options\", \"range\"],\n    mapper: {\n        serializedName: \"x-ms-range\",\n        xmlName: \"x-ms-range\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst rangeGetContentMD5 = {\n    parameterPath: [\"options\", \"rangeGetContentMD5\"],\n    mapper: {\n        serializedName: \"x-ms-range-get-content-md5\",\n        xmlName: \"x-ms-range-get-content-md5\",\n        type: {\n            name: \"Boolean\",\n        },\n    },\n};\nconst rangeGetContentCRC64 = {\n    parameterPath: [\"options\", \"rangeGetContentCRC64\"],\n    mapper: {\n        serializedName: \"x-ms-range-get-content-crc64\",\n        xmlName: \"x-ms-range-get-content-crc64\",\n        type: {\n            name: \"Boolean\",\n        },\n    },\n};\nconst encryptionKey = {\n    parameterPath: [\"options\", \"cpkInfo\", \"encryptionKey\"],\n    mapper: {\n        serializedName: \"x-ms-encryption-key\",\n        xmlName: \"x-ms-encryption-key\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst encryptionKeySha256 = {\n    parameterPath: [\"options\", \"cpkInfo\", \"encryptionKeySha256\"],\n    mapper: {\n        serializedName: \"x-ms-encryption-key-sha256\",\n        xmlName: \"x-ms-encryption-key-sha256\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst encryptionAlgorithm = {\n    parameterPath: [\"options\", \"cpkInfo\", \"encryptionAlgorithm\"],\n    mapper: {\n        serializedName: \"x-ms-encryption-algorithm\",\n        xmlName: \"x-ms-encryption-algorithm\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst ifMatch = {\n    parameterPath: [\"options\", \"modifiedAccessConditions\", \"ifMatch\"],\n    mapper: {\n        serializedName: \"If-Match\",\n        xmlName: \"If-Match\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst ifNoneMatch = {\n    parameterPath: [\"options\", \"modifiedAccessConditions\", \"ifNoneMatch\"],\n    mapper: {\n        serializedName: \"If-None-Match\",\n        xmlName: \"If-None-Match\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst ifTags = {\n    parameterPath: [\"options\", \"modifiedAccessConditions\", \"ifTags\"],\n    mapper: {\n        serializedName: \"x-ms-if-tags\",\n        xmlName: \"x-ms-if-tags\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst deleteSnapshots = {\n    parameterPath: [\"options\", \"deleteSnapshots\"],\n    mapper: {\n        serializedName: \"x-ms-delete-snapshots\",\n        xmlName: \"x-ms-delete-snapshots\",\n        type: {\n            name: \"Enum\",\n            allowedValues: [\"include\", \"only\"],\n        },\n    },\n};\nconst blobDeleteType = {\n    parameterPath: [\"options\", \"blobDeleteType\"],\n    mapper: {\n        serializedName: \"deletetype\",\n        xmlName: \"deletetype\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst comp11 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"expiry\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst expiryOptions = {\n    parameterPath: \"expiryOptions\",\n    mapper: {\n        serializedName: \"x-ms-expiry-option\",\n        required: true,\n        xmlName: \"x-ms-expiry-option\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst expiresOn = {\n    parameterPath: [\"options\", \"expiresOn\"],\n    mapper: {\n        serializedName: \"x-ms-expiry-time\",\n        xmlName: \"x-ms-expiry-time\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst blobCacheControl = {\n    parameterPath: [\"options\", \"blobHttpHeaders\", \"blobCacheControl\"],\n    mapper: {\n        serializedName: \"x-ms-blob-cache-control\",\n        xmlName: \"x-ms-blob-cache-control\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst blobContentType = {\n    parameterPath: [\"options\", \"blobHttpHeaders\", \"blobContentType\"],\n    mapper: {\n        serializedName: \"x-ms-blob-content-type\",\n        xmlName: \"x-ms-blob-content-type\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst blobContentMD5 = {\n    parameterPath: [\"options\", \"blobHttpHeaders\", \"blobContentMD5\"],\n    mapper: {\n        serializedName: \"x-ms-blob-content-md5\",\n        xmlName: \"x-ms-blob-content-md5\",\n        type: {\n            name: \"ByteArray\",\n        },\n    },\n};\nconst blobContentEncoding = {\n    parameterPath: [\"options\", \"blobHttpHeaders\", \"blobContentEncoding\"],\n    mapper: {\n        serializedName: \"x-ms-blob-content-encoding\",\n        xmlName: \"x-ms-blob-content-encoding\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst blobContentLanguage = {\n    parameterPath: [\"options\", \"blobHttpHeaders\", \"blobContentLanguage\"],\n    mapper: {\n        serializedName: \"x-ms-blob-content-language\",\n        xmlName: \"x-ms-blob-content-language\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst blobContentDisposition = {\n    parameterPath: [\"options\", \"blobHttpHeaders\", \"blobContentDisposition\"],\n    mapper: {\n        serializedName: \"x-ms-blob-content-disposition\",\n        xmlName: \"x-ms-blob-content-disposition\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst comp12 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"immutabilityPolicies\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst immutabilityPolicyExpiry = {\n    parameterPath: [\"options\", \"immutabilityPolicyExpiry\"],\n    mapper: {\n        serializedName: \"x-ms-immutability-policy-until-date\",\n        xmlName: \"x-ms-immutability-policy-until-date\",\n        type: {\n            name: \"DateTimeRfc1123\",\n        },\n    },\n};\nconst immutabilityPolicyMode = {\n    parameterPath: [\"options\", \"immutabilityPolicyMode\"],\n    mapper: {\n        serializedName: \"x-ms-immutability-policy-mode\",\n        xmlName: \"x-ms-immutability-policy-mode\",\n        type: {\n            name: \"Enum\",\n            allowedValues: [\"Mutable\", \"Unlocked\", \"Locked\"],\n        },\n    },\n};\nconst comp13 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"legalhold\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst legalHold = {\n    parameterPath: \"legalHold\",\n    mapper: {\n        serializedName: \"x-ms-legal-hold\",\n        required: true,\n        xmlName: \"x-ms-legal-hold\",\n        type: {\n            name: \"Boolean\",\n        },\n    },\n};\nconst encryptionScope = {\n    parameterPath: [\"options\", \"encryptionScope\"],\n    mapper: {\n        serializedName: \"x-ms-encryption-scope\",\n        xmlName: \"x-ms-encryption-scope\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst comp14 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"snapshot\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst tier = {\n    parameterPath: [\"options\", \"tier\"],\n    mapper: {\n        serializedName: \"x-ms-access-tier\",\n        xmlName: \"x-ms-access-tier\",\n        type: {\n            name: \"Enum\",\n            allowedValues: [\n                \"P4\",\n                \"P6\",\n                \"P10\",\n                \"P15\",\n                \"P20\",\n                \"P30\",\n                \"P40\",\n                \"P50\",\n                \"P60\",\n                \"P70\",\n                \"P80\",\n                \"Hot\",\n                \"Cool\",\n                \"Archive\",\n                \"Cold\",\n            ],\n        },\n    },\n};\nconst rehydratePriority = {\n    parameterPath: [\"options\", \"rehydratePriority\"],\n    mapper: {\n        serializedName: \"x-ms-rehydrate-priority\",\n        xmlName: \"x-ms-rehydrate-priority\",\n        type: {\n            name: \"Enum\",\n            allowedValues: [\"High\", \"Standard\"],\n        },\n    },\n};\nconst sourceIfModifiedSince = {\n    parameterPath: [\n        \"options\",\n        \"sourceModifiedAccessConditions\",\n        \"sourceIfModifiedSince\",\n    ],\n    mapper: {\n        serializedName: \"x-ms-source-if-modified-since\",\n        xmlName: \"x-ms-source-if-modified-since\",\n        type: {\n            name: \"DateTimeRfc1123\",\n        },\n    },\n};\nconst sourceIfUnmodifiedSince = {\n    parameterPath: [\n        \"options\",\n        \"sourceModifiedAccessConditions\",\n        \"sourceIfUnmodifiedSince\",\n    ],\n    mapper: {\n        serializedName: \"x-ms-source-if-unmodified-since\",\n        xmlName: \"x-ms-source-if-unmodified-since\",\n        type: {\n            name: \"DateTimeRfc1123\",\n        },\n    },\n};\nconst sourceIfMatch = {\n    parameterPath: [\"options\", \"sourceModifiedAccessConditions\", \"sourceIfMatch\"],\n    mapper: {\n        serializedName: \"x-ms-source-if-match\",\n        xmlName: \"x-ms-source-if-match\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst sourceIfNoneMatch = {\n    parameterPath: [\n        \"options\",\n        \"sourceModifiedAccessConditions\",\n        \"sourceIfNoneMatch\",\n    ],\n    mapper: {\n        serializedName: \"x-ms-source-if-none-match\",\n        xmlName: \"x-ms-source-if-none-match\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst sourceIfTags = {\n    parameterPath: [\"options\", \"sourceModifiedAccessConditions\", \"sourceIfTags\"],\n    mapper: {\n        serializedName: \"x-ms-source-if-tags\",\n        xmlName: \"x-ms-source-if-tags\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst copySource = {\n    parameterPath: \"copySource\",\n    mapper: {\n        serializedName: \"x-ms-copy-source\",\n        required: true,\n        xmlName: \"x-ms-copy-source\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst blobTagsString = {\n    parameterPath: [\"options\", \"blobTagsString\"],\n    mapper: {\n        serializedName: \"x-ms-tags\",\n        xmlName: \"x-ms-tags\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst sealBlob = {\n    parameterPath: [\"options\", \"sealBlob\"],\n    mapper: {\n        serializedName: \"x-ms-seal-blob\",\n        xmlName: \"x-ms-seal-blob\",\n        type: {\n            name: \"Boolean\",\n        },\n    },\n};\nconst legalHold1 = {\n    parameterPath: [\"options\", \"legalHold\"],\n    mapper: {\n        serializedName: \"x-ms-legal-hold\",\n        xmlName: \"x-ms-legal-hold\",\n        type: {\n            name: \"Boolean\",\n        },\n    },\n};\nconst xMsRequiresSync = {\n    parameterPath: \"xMsRequiresSync\",\n    mapper: {\n        defaultValue: \"true\",\n        isConstant: true,\n        serializedName: \"x-ms-requires-sync\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst sourceContentMD5 = {\n    parameterPath: [\"options\", \"sourceContentMD5\"],\n    mapper: {\n        serializedName: \"x-ms-source-content-md5\",\n        xmlName: \"x-ms-source-content-md5\",\n        type: {\n            name: \"ByteArray\",\n        },\n    },\n};\nconst copySourceAuthorization = {\n    parameterPath: [\"options\", \"copySourceAuthorization\"],\n    mapper: {\n        serializedName: \"x-ms-copy-source-authorization\",\n        xmlName: \"x-ms-copy-source-authorization\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst copySourceTags = {\n    parameterPath: [\"options\", \"copySourceTags\"],\n    mapper: {\n        serializedName: \"x-ms-copy-source-tag-option\",\n        xmlName: \"x-ms-copy-source-tag-option\",\n        type: {\n            name: \"Enum\",\n            allowedValues: [\"REPLACE\", \"COPY\"],\n        },\n    },\n};\nconst comp15 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"copy\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst copyActionAbortConstant = {\n    parameterPath: \"copyActionAbortConstant\",\n    mapper: {\n        defaultValue: \"abort\",\n        isConstant: true,\n        serializedName: \"x-ms-copy-action\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst copyId = {\n    parameterPath: \"copyId\",\n    mapper: {\n        serializedName: \"copyid\",\n        required: true,\n        xmlName: \"copyid\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst comp16 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"tier\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst tier1 = {\n    parameterPath: \"tier\",\n    mapper: {\n        serializedName: \"x-ms-access-tier\",\n        required: true,\n        xmlName: \"x-ms-access-tier\",\n        type: {\n            name: \"Enum\",\n            allowedValues: [\n                \"P4\",\n                \"P6\",\n                \"P10\",\n                \"P15\",\n                \"P20\",\n                \"P30\",\n                \"P40\",\n                \"P50\",\n                \"P60\",\n                \"P70\",\n                \"P80\",\n                \"Hot\",\n                \"Cool\",\n                \"Archive\",\n                \"Cold\",\n            ],\n        },\n    },\n};\nconst queryRequest = {\n    parameterPath: [\"options\", \"queryRequest\"],\n    mapper: _models_mappers__WEBPACK_IMPORTED_MODULE_0__.QueryRequest,\n};\nconst comp17 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"query\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst comp18 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"tags\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst tags = {\n    parameterPath: [\"options\", \"tags\"],\n    mapper: _models_mappers__WEBPACK_IMPORTED_MODULE_0__.BlobTags,\n};\nconst transactionalContentMD5 = {\n    parameterPath: [\"options\", \"transactionalContentMD5\"],\n    mapper: {\n        serializedName: \"Content-MD5\",\n        xmlName: \"Content-MD5\",\n        type: {\n            name: \"ByteArray\",\n        },\n    },\n};\nconst transactionalContentCrc64 = {\n    parameterPath: [\"options\", \"transactionalContentCrc64\"],\n    mapper: {\n        serializedName: \"x-ms-content-crc64\",\n        xmlName: \"x-ms-content-crc64\",\n        type: {\n            name: \"ByteArray\",\n        },\n    },\n};\nconst blobType = {\n    parameterPath: \"blobType\",\n    mapper: {\n        defaultValue: \"PageBlob\",\n        isConstant: true,\n        serializedName: \"x-ms-blob-type\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst blobContentLength = {\n    parameterPath: \"blobContentLength\",\n    mapper: {\n        serializedName: \"x-ms-blob-content-length\",\n        required: true,\n        xmlName: \"x-ms-blob-content-length\",\n        type: {\n            name: \"Number\",\n        },\n    },\n};\nconst blobSequenceNumber = {\n    parameterPath: [\"options\", \"blobSequenceNumber\"],\n    mapper: {\n        defaultValue: 0,\n        serializedName: \"x-ms-blob-sequence-number\",\n        xmlName: \"x-ms-blob-sequence-number\",\n        type: {\n            name: \"Number\",\n        },\n    },\n};\nconst contentType1 = {\n    parameterPath: [\"options\", \"contentType\"],\n    mapper: {\n        defaultValue: \"application/octet-stream\",\n        isConstant: true,\n        serializedName: \"Content-Type\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst body1 = {\n    parameterPath: \"body\",\n    mapper: {\n        serializedName: \"body\",\n        required: true,\n        xmlName: \"body\",\n        type: {\n            name: \"Stream\",\n        },\n    },\n};\nconst accept2 = {\n    parameterPath: \"accept\",\n    mapper: {\n        defaultValue: \"application/xml\",\n        isConstant: true,\n        serializedName: \"Accept\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst comp19 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"page\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst pageWrite = {\n    parameterPath: \"pageWrite\",\n    mapper: {\n        defaultValue: \"update\",\n        isConstant: true,\n        serializedName: \"x-ms-page-write\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst ifSequenceNumberLessThanOrEqualTo = {\n    parameterPath: [\n        \"options\",\n        \"sequenceNumberAccessConditions\",\n        \"ifSequenceNumberLessThanOrEqualTo\",\n    ],\n    mapper: {\n        serializedName: \"x-ms-if-sequence-number-le\",\n        xmlName: \"x-ms-if-sequence-number-le\",\n        type: {\n            name: \"Number\",\n        },\n    },\n};\nconst ifSequenceNumberLessThan = {\n    parameterPath: [\n        \"options\",\n        \"sequenceNumberAccessConditions\",\n        \"ifSequenceNumberLessThan\",\n    ],\n    mapper: {\n        serializedName: \"x-ms-if-sequence-number-lt\",\n        xmlName: \"x-ms-if-sequence-number-lt\",\n        type: {\n            name: \"Number\",\n        },\n    },\n};\nconst ifSequenceNumberEqualTo = {\n    parameterPath: [\n        \"options\",\n        \"sequenceNumberAccessConditions\",\n        \"ifSequenceNumberEqualTo\",\n    ],\n    mapper: {\n        serializedName: \"x-ms-if-sequence-number-eq\",\n        xmlName: \"x-ms-if-sequence-number-eq\",\n        type: {\n            name: \"Number\",\n        },\n    },\n};\nconst pageWrite1 = {\n    parameterPath: \"pageWrite\",\n    mapper: {\n        defaultValue: \"clear\",\n        isConstant: true,\n        serializedName: \"x-ms-page-write\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst sourceUrl = {\n    parameterPath: \"sourceUrl\",\n    mapper: {\n        serializedName: \"x-ms-copy-source\",\n        required: true,\n        xmlName: \"x-ms-copy-source\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst sourceRange = {\n    parameterPath: \"sourceRange\",\n    mapper: {\n        serializedName: \"x-ms-source-range\",\n        required: true,\n        xmlName: \"x-ms-source-range\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst sourceContentCrc64 = {\n    parameterPath: [\"options\", \"sourceContentCrc64\"],\n    mapper: {\n        serializedName: \"x-ms-source-content-crc64\",\n        xmlName: \"x-ms-source-content-crc64\",\n        type: {\n            name: \"ByteArray\",\n        },\n    },\n};\nconst range1 = {\n    parameterPath: \"range\",\n    mapper: {\n        serializedName: \"x-ms-range\",\n        required: true,\n        xmlName: \"x-ms-range\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst comp20 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"pagelist\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst prevsnapshot = {\n    parameterPath: [\"options\", \"prevsnapshot\"],\n    mapper: {\n        serializedName: \"prevsnapshot\",\n        xmlName: \"prevsnapshot\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst prevSnapshotUrl = {\n    parameterPath: [\"options\", \"prevSnapshotUrl\"],\n    mapper: {\n        serializedName: \"x-ms-previous-snapshot-url\",\n        xmlName: \"x-ms-previous-snapshot-url\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst sequenceNumberAction = {\n    parameterPath: \"sequenceNumberAction\",\n    mapper: {\n        serializedName: \"x-ms-sequence-number-action\",\n        required: true,\n        xmlName: \"x-ms-sequence-number-action\",\n        type: {\n            name: \"Enum\",\n            allowedValues: [\"max\", \"update\", \"increment\"],\n        },\n    },\n};\nconst comp21 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"incrementalcopy\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst blobType1 = {\n    parameterPath: \"blobType\",\n    mapper: {\n        defaultValue: \"AppendBlob\",\n        isConstant: true,\n        serializedName: \"x-ms-blob-type\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst comp22 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"appendblock\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst maxSize = {\n    parameterPath: [\"options\", \"appendPositionAccessConditions\", \"maxSize\"],\n    mapper: {\n        serializedName: \"x-ms-blob-condition-maxsize\",\n        xmlName: \"x-ms-blob-condition-maxsize\",\n        type: {\n            name: \"Number\",\n        },\n    },\n};\nconst appendPosition = {\n    parameterPath: [\n        \"options\",\n        \"appendPositionAccessConditions\",\n        \"appendPosition\",\n    ],\n    mapper: {\n        serializedName: \"x-ms-blob-condition-appendpos\",\n        xmlName: \"x-ms-blob-condition-appendpos\",\n        type: {\n            name: \"Number\",\n        },\n    },\n};\nconst sourceRange1 = {\n    parameterPath: [\"options\", \"sourceRange\"],\n    mapper: {\n        serializedName: \"x-ms-source-range\",\n        xmlName: \"x-ms-source-range\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst comp23 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"seal\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst blobType2 = {\n    parameterPath: \"blobType\",\n    mapper: {\n        defaultValue: \"BlockBlob\",\n        isConstant: true,\n        serializedName: \"x-ms-blob-type\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst copySourceBlobProperties = {\n    parameterPath: [\"options\", \"copySourceBlobProperties\"],\n    mapper: {\n        serializedName: \"x-ms-copy-source-blob-properties\",\n        xmlName: \"x-ms-copy-source-blob-properties\",\n        type: {\n            name: \"Boolean\",\n        },\n    },\n};\nconst comp24 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"block\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst blockId = {\n    parameterPath: \"blockId\",\n    mapper: {\n        serializedName: \"blockid\",\n        required: true,\n        xmlName: \"blockid\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst blocks = {\n    parameterPath: \"blocks\",\n    mapper: _models_mappers__WEBPACK_IMPORTED_MODULE_0__.BlockLookupList,\n};\nconst comp25 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"blocklist\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst listType = {\n    parameterPath: \"listType\",\n    mapper: {\n        defaultValue: \"committed\",\n        serializedName: \"blocklisttype\",\n        required: true,\n        xmlName: \"blocklisttype\",\n        type: {\n            name: \"Enum\",\n            allowedValues: [\"committed\", \"uncommitted\", \"all\"],\n        },\n    },\n};\n//# sourceMappingURL=parameters.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/parameters.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/appendBlob.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/appendBlob.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AppendBlobImpl: () => (/* binding */ AppendBlobImpl)\n/* harmony export */ });\n/* harmony import */ var _azure_core_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-client */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/index.js\");\n/* harmony import */ var _models_mappers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/mappers */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/mappers.js\");\n/* harmony import */ var _models_parameters__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/parameters */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/parameters.js\");\n/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\n\n\n/** Class containing AppendBlob operations. */\nclass AppendBlobImpl {\n    /**\n     * Initialize a new instance of the class AppendBlob class.\n     * @param client Reference to the service client\n     */\n    constructor(client) {\n        this.client = client;\n    }\n    /**\n     * The Create Append Blob operation creates a new append blob.\n     * @param contentLength The length of the request.\n     * @param options The options parameters.\n     */\n    create(contentLength, options) {\n        return this.client.sendOperationRequest({ contentLength, options }, createOperationSpec);\n    }\n    /**\n     * The Append Block operation commits a new block of data to the end of an existing append blob. The\n     * Append Block operation is permitted only if the blob was created with x-ms-blob-type set to\n     * AppendBlob. Append Block is supported only on version 2015-02-21 version or later.\n     * @param contentLength The length of the request.\n     * @param body Initial data\n     * @param options The options parameters.\n     */\n    appendBlock(contentLength, body, options) {\n        return this.client.sendOperationRequest({ contentLength, body, options }, appendBlockOperationSpec);\n    }\n    /**\n     * The Append Block operation commits a new block of data to the end of an existing append blob where\n     * the contents are read from a source url. The Append Block operation is permitted only if the blob\n     * was created with x-ms-blob-type set to AppendBlob. Append Block is supported only on version\n     * 2015-02-21 version or later.\n     * @param sourceUrl Specify a URL to the copy source.\n     * @param contentLength The length of the request.\n     * @param options The options parameters.\n     */\n    appendBlockFromUrl(sourceUrl, contentLength, options) {\n        return this.client.sendOperationRequest({ sourceUrl, contentLength, options }, appendBlockFromUrlOperationSpec);\n    }\n    /**\n     * The Seal operation seals the Append Blob to make it read-only. Seal is supported only on version\n     * 2019-12-12 version or later.\n     * @param options The options parameters.\n     */\n    seal(options) {\n        return this.client.sendOperationRequest({ options }, sealOperationSpec);\n    }\n}\n// Operation Specifications\nconst xmlSerializer = _azure_core_client__WEBPACK_IMPORTED_MODULE_0__.createSerializer(_models_mappers__WEBPACK_IMPORTED_MODULE_1__, /* isXml */ true);\nconst createOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.AppendBlobCreateHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.AppendBlobCreateExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.contentLength,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.metadata,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKey,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKeySha256,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionAlgorithm,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobCacheControl,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentType,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentMD5,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentEncoding,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentLanguage,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentDisposition,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.immutabilityPolicyExpiry,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.immutabilityPolicyMode,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionScope,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobTagsString,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.legalHold1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobType1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst appendBlockOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.AppendBlobAppendBlockHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.AppendBlobAppendBlockExceptionHeaders,\n        },\n    },\n    requestBody: _models_parameters__WEBPACK_IMPORTED_MODULE_2__.body1,\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp22],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.contentLength,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKey,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKeySha256,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionAlgorithm,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionScope,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.transactionalContentMD5,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.transactionalContentCrc64,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.contentType1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept2,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.maxSize,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.appendPosition,\n    ],\n    isXML: true,\n    contentType: \"application/xml; charset=utf-8\",\n    mediaType: \"binary\",\n    serializer: xmlSerializer,\n};\nconst appendBlockFromUrlOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.AppendBlobAppendBlockFromUrlHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.AppendBlobAppendBlockFromUrlExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp22],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.contentLength,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKey,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKeySha256,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionAlgorithm,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionScope,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceContentMD5,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.copySourceAuthorization,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.transactionalContentMD5,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceUrl,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceContentCrc64,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.maxSize,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.appendPosition,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceRange1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst sealOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.AppendBlobSealHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.AppendBlobSealExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp23],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.appendPosition,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\n//# sourceMappingURL=appendBlob.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/appendBlob.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/blob.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/blob.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BlobImpl: () => (/* binding */ BlobImpl)\n/* harmony export */ });\n/* harmony import */ var _azure_core_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-client */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/index.js\");\n/* harmony import */ var _models_mappers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/mappers */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/mappers.js\");\n/* harmony import */ var _models_parameters__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/parameters */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/parameters.js\");\n/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\n\n\n/** Class containing Blob operations. */\nclass BlobImpl {\n    /**\n     * Initialize a new instance of the class Blob class.\n     * @param client Reference to the service client\n     */\n    constructor(client) {\n        this.client = client;\n    }\n    /**\n     * The Download operation reads or downloads a blob from the system, including its metadata and\n     * properties. You can also call Download to read a snapshot.\n     * @param options The options parameters.\n     */\n    download(options) {\n        return this.client.sendOperationRequest({ options }, downloadOperationSpec);\n    }\n    /**\n     * The Get Properties operation returns all user-defined metadata, standard HTTP properties, and system\n     * properties for the blob. It does not return the content of the blob.\n     * @param options The options parameters.\n     */\n    getProperties(options) {\n        return this.client.sendOperationRequest({ options }, getPropertiesOperationSpec);\n    }\n    /**\n     * If the storage account's soft delete feature is disabled then, when a blob is deleted, it is\n     * permanently removed from the storage account. If the storage account's soft delete feature is\n     * enabled, then, when a blob is deleted, it is marked for deletion and becomes inaccessible\n     * immediately. However, the blob service retains the blob or snapshot for the number of days specified\n     * by the DeleteRetentionPolicy section of [Storage service properties]\n     * (Set-Blob-Service-Properties.md). After the specified number of days has passed, the blob's data is\n     * permanently removed from the storage account. Note that you continue to be charged for the\n     * soft-deleted blob's storage until it is permanently removed. Use the List Blobs API and specify the\n     * \"include=deleted\" query parameter to discover which blobs and snapshots have been soft deleted. You\n     * can then use the Undelete Blob API to restore a soft-deleted blob. All other operations on a\n     * soft-deleted blob or snapshot causes the service to return an HTTP status code of 404\n     * (ResourceNotFound).\n     * @param options The options parameters.\n     */\n    delete(options) {\n        return this.client.sendOperationRequest({ options }, deleteOperationSpec);\n    }\n    /**\n     * Undelete a blob that was previously soft deleted\n     * @param options The options parameters.\n     */\n    undelete(options) {\n        return this.client.sendOperationRequest({ options }, undeleteOperationSpec);\n    }\n    /**\n     * Sets the time a blob will expire and be deleted.\n     * @param expiryOptions Required. Indicates mode of the expiry time\n     * @param options The options parameters.\n     */\n    setExpiry(expiryOptions, options) {\n        return this.client.sendOperationRequest({ expiryOptions, options }, setExpiryOperationSpec);\n    }\n    /**\n     * The Set HTTP Headers operation sets system properties on the blob\n     * @param options The options parameters.\n     */\n    setHttpHeaders(options) {\n        return this.client.sendOperationRequest({ options }, setHttpHeadersOperationSpec);\n    }\n    /**\n     * The Set Immutability Policy operation sets the immutability policy on the blob\n     * @param options The options parameters.\n     */\n    setImmutabilityPolicy(options) {\n        return this.client.sendOperationRequest({ options }, setImmutabilityPolicyOperationSpec);\n    }\n    /**\n     * The Delete Immutability Policy operation deletes the immutability policy on the blob\n     * @param options The options parameters.\n     */\n    deleteImmutabilityPolicy(options) {\n        return this.client.sendOperationRequest({ options }, deleteImmutabilityPolicyOperationSpec);\n    }\n    /**\n     * The Set Legal Hold operation sets a legal hold on the blob.\n     * @param legalHold Specified if a legal hold should be set on the blob.\n     * @param options The options parameters.\n     */\n    setLegalHold(legalHold, options) {\n        return this.client.sendOperationRequest({ legalHold, options }, setLegalHoldOperationSpec);\n    }\n    /**\n     * The Set Blob Metadata operation sets user-defined metadata for the specified blob as one or more\n     * name-value pairs\n     * @param options The options parameters.\n     */\n    setMetadata(options) {\n        return this.client.sendOperationRequest({ options }, setMetadataOperationSpec);\n    }\n    /**\n     * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete\n     * operations\n     * @param options The options parameters.\n     */\n    acquireLease(options) {\n        return this.client.sendOperationRequest({ options }, acquireLeaseOperationSpec);\n    }\n    /**\n     * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete\n     * operations\n     * @param leaseId Specifies the current lease ID on the resource.\n     * @param options The options parameters.\n     */\n    releaseLease(leaseId, options) {\n        return this.client.sendOperationRequest({ leaseId, options }, releaseLeaseOperationSpec);\n    }\n    /**\n     * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete\n     * operations\n     * @param leaseId Specifies the current lease ID on the resource.\n     * @param options The options parameters.\n     */\n    renewLease(leaseId, options) {\n        return this.client.sendOperationRequest({ leaseId, options }, renewLeaseOperationSpec);\n    }\n    /**\n     * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete\n     * operations\n     * @param leaseId Specifies the current lease ID on the resource.\n     * @param proposedLeaseId Proposed lease ID, in a GUID string format. The Blob service returns 400\n     *                        (Invalid request) if the proposed lease ID is not in the correct format. See Guid Constructor\n     *                        (String) for a list of valid GUID string formats.\n     * @param options The options parameters.\n     */\n    changeLease(leaseId, proposedLeaseId, options) {\n        return this.client.sendOperationRequest({ leaseId, proposedLeaseId, options }, changeLeaseOperationSpec);\n    }\n    /**\n     * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete\n     * operations\n     * @param options The options parameters.\n     */\n    breakLease(options) {\n        return this.client.sendOperationRequest({ options }, breakLeaseOperationSpec);\n    }\n    /**\n     * The Create Snapshot operation creates a read-only snapshot of a blob\n     * @param options The options parameters.\n     */\n    createSnapshot(options) {\n        return this.client.sendOperationRequest({ options }, createSnapshotOperationSpec);\n    }\n    /**\n     * The Start Copy From URL operation copies a blob or an internet resource to a new blob.\n     * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to\n     *                   2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would\n     *                   appear in a request URI. The source blob must either be public or must be authenticated via a shared\n     *                   access signature.\n     * @param options The options parameters.\n     */\n    startCopyFromURL(copySource, options) {\n        return this.client.sendOperationRequest({ copySource, options }, startCopyFromURLOperationSpec);\n    }\n    /**\n     * The Copy From URL operation copies a blob or an internet resource to a new blob. It will not return\n     * a response until the copy is complete.\n     * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to\n     *                   2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would\n     *                   appear in a request URI. The source blob must either be public or must be authenticated via a shared\n     *                   access signature.\n     * @param options The options parameters.\n     */\n    copyFromURL(copySource, options) {\n        return this.client.sendOperationRequest({ copySource, options }, copyFromURLOperationSpec);\n    }\n    /**\n     * The Abort Copy From URL operation aborts a pending Copy From URL operation, and leaves a destination\n     * blob with zero length and full metadata.\n     * @param copyId The copy identifier provided in the x-ms-copy-id header of the original Copy Blob\n     *               operation.\n     * @param options The options parameters.\n     */\n    abortCopyFromURL(copyId, options) {\n        return this.client.sendOperationRequest({ copyId, options }, abortCopyFromURLOperationSpec);\n    }\n    /**\n     * The Set Tier operation sets the tier on a blob. The operation is allowed on a page blob in a premium\n     * storage account and on a block blob in a blob storage account (locally redundant storage only). A\n     * premium page blob's tier determines the allowed size, IOPS, and bandwidth of the blob. A block\n     * blob's tier determines Hot/Cool/Archive storage type. This operation does not update the blob's\n     * ETag.\n     * @param tier Indicates the tier to be set on the blob.\n     * @param options The options parameters.\n     */\n    setTier(tier, options) {\n        return this.client.sendOperationRequest({ tier, options }, setTierOperationSpec);\n    }\n    /**\n     * Returns the sku name and account kind\n     * @param options The options parameters.\n     */\n    getAccountInfo(options) {\n        return this.client.sendOperationRequest({ options }, getAccountInfoOperationSpec);\n    }\n    /**\n     * The Query operation enables users to select/project on blob data by providing simple query\n     * expressions.\n     * @param options The options parameters.\n     */\n    query(options) {\n        return this.client.sendOperationRequest({ options }, queryOperationSpec);\n    }\n    /**\n     * The Get Tags operation enables users to get the tags associated with a blob.\n     * @param options The options parameters.\n     */\n    getTags(options) {\n        return this.client.sendOperationRequest({ options }, getTagsOperationSpec);\n    }\n    /**\n     * The Set Tags operation enables users to set tags on a blob.\n     * @param options The options parameters.\n     */\n    setTags(options) {\n        return this.client.sendOperationRequest({ options }, setTagsOperationSpec);\n    }\n}\n// Operation Specifications\nconst xmlSerializer = _azure_core_client__WEBPACK_IMPORTED_MODULE_0__.createSerializer(_models_mappers__WEBPACK_IMPORTED_MODULE_1__, /* isXml */ true);\nconst downloadOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: {\n                type: { name: \"Stream\" },\n                serializedName: \"parsedResponse\",\n            },\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobDownloadHeaders,\n        },\n        206: {\n            bodyMapper: {\n                type: { name: \"Stream\" },\n                serializedName: \"parsedResponse\",\n            },\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobDownloadHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobDownloadExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.snapshot,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.versionId,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.range,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.rangeGetContentMD5,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.rangeGetContentCRC64,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKey,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKeySha256,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionAlgorithm,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst getPropertiesOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"HEAD\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobGetPropertiesHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobGetPropertiesExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.snapshot,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.versionId,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKey,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKeySha256,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionAlgorithm,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst deleteOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"DELETE\",\n    responses: {\n        202: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobDeleteHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobDeleteExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.snapshot,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.versionId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobDeleteType,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.deleteSnapshots,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst undeleteOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobUndeleteHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobUndeleteExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp8],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst setExpiryOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobSetExpiryHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobSetExpiryExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp11],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.expiryOptions,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.expiresOn,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst setHttpHeadersOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobSetHttpHeadersHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobSetHttpHeadersExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobCacheControl,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentType,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentMD5,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentEncoding,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentLanguage,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentDisposition,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst setImmutabilityPolicyOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobSetImmutabilityPolicyHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobSetImmutabilityPolicyExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.snapshot,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.versionId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp12,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.immutabilityPolicyExpiry,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.immutabilityPolicyMode,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst deleteImmutabilityPolicyOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"DELETE\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobDeleteImmutabilityPolicyHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobDeleteImmutabilityPolicyExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.snapshot,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.versionId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp12,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst setLegalHoldOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobSetLegalHoldHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobSetLegalHoldExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.snapshot,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.versionId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp13,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.legalHold,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst setMetadataOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobSetMetadataHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobSetMetadataExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp6],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.metadata,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKey,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKeySha256,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionAlgorithm,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionScope,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst acquireLeaseOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobAcquireLeaseHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobAcquireLeaseExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp10],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.action,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.duration,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.proposedLeaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst releaseLeaseOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobReleaseLeaseHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobReleaseLeaseExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp10],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.action1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst renewLeaseOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobRenewLeaseHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobRenewLeaseExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp10],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.action2,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst changeLeaseOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobChangeLeaseHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobChangeLeaseExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp10],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.action4,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.proposedLeaseId1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst breakLeaseOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        202: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobBreakLeaseHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobBreakLeaseExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp10],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.action3,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.breakPeriod,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst createSnapshotOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobCreateSnapshotHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobCreateSnapshotExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp14],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.metadata,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKey,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKeySha256,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionAlgorithm,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionScope,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst startCopyFromURLOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        202: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobStartCopyFromURLHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobStartCopyFromURLExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.metadata,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.immutabilityPolicyExpiry,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.immutabilityPolicyMode,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.tier,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.rehydratePriority,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.copySource,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobTagsString,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sealBlob,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.legalHold1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst copyFromURLOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        202: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobCopyFromURLHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobCopyFromURLExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.metadata,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.immutabilityPolicyExpiry,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.immutabilityPolicyMode,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionScope,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.tier,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.copySource,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobTagsString,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.legalHold1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.xMsRequiresSync,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceContentMD5,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.copySourceAuthorization,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.copySourceTags,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst abortCopyFromURLOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        204: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobAbortCopyFromURLHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobAbortCopyFromURLExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp15,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.copyId,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.copyActionAbortConstant,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst setTierOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobSetTierHeaders,\n        },\n        202: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobSetTierHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobSetTierExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.snapshot,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.versionId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp16,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.rehydratePriority,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.tier1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst getAccountInfoOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobGetAccountInfoHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobGetAccountInfoExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.restype1,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst queryOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"POST\",\n    responses: {\n        200: {\n            bodyMapper: {\n                type: { name: \"Stream\" },\n                serializedName: \"parsedResponse\",\n            },\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobQueryHeaders,\n        },\n        206: {\n            bodyMapper: {\n                type: { name: \"Stream\" },\n                serializedName: \"parsedResponse\",\n            },\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobQueryHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobQueryExceptionHeaders,\n        },\n    },\n    requestBody: _models_parameters__WEBPACK_IMPORTED_MODULE_2__.queryRequest,\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.snapshot,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp17,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.contentType,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKey,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKeySha256,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionAlgorithm,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n    ],\n    isXML: true,\n    contentType: \"application/xml; charset=utf-8\",\n    mediaType: \"xml\",\n    serializer: xmlSerializer,\n};\nconst getTagsOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobTags,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobGetTagsHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobGetTagsExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.snapshot,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.versionId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp18,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst setTagsOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        204: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobSetTagsHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobSetTagsExceptionHeaders,\n        },\n    },\n    requestBody: _models_parameters__WEBPACK_IMPORTED_MODULE_2__.tags,\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.versionId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp18,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.contentType,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.transactionalContentMD5,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.transactionalContentCrc64,\n    ],\n    isXML: true,\n    contentType: \"application/xml; charset=utf-8\",\n    mediaType: \"xml\",\n    serializer: xmlSerializer,\n};\n//# sourceMappingURL=blob.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/blob.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/blockBlob.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/blockBlob.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BlockBlobImpl: () => (/* binding */ BlockBlobImpl)\n/* harmony export */ });\n/* harmony import */ var _azure_core_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-client */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/index.js\");\n/* harmony import */ var _models_mappers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/mappers */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/mappers.js\");\n/* harmony import */ var _models_parameters__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/parameters */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/parameters.js\");\n/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\n\n\n/** Class containing BlockBlob operations. */\nclass BlockBlobImpl {\n    /**\n     * Initialize a new instance of the class BlockBlob class.\n     * @param client Reference to the service client\n     */\n    constructor(client) {\n        this.client = client;\n    }\n    /**\n     * The Upload Block Blob operation updates the content of an existing block blob. Updating an existing\n     * block blob overwrites any existing metadata on the blob. Partial updates are not supported with Put\n     * Blob; the content of the existing blob is overwritten with the content of the new blob. To perform a\n     * partial update of the content of a block blob, use the Put Block List operation.\n     * @param contentLength The length of the request.\n     * @param body Initial data\n     * @param options The options parameters.\n     */\n    upload(contentLength, body, options) {\n        return this.client.sendOperationRequest({ contentLength, body, options }, uploadOperationSpec);\n    }\n    /**\n     * The Put Blob from URL operation creates a new Block Blob where the contents of the blob are read\n     * from a given URL.  This API is supported beginning with the 2020-04-08 version. Partial updates are\n     * not supported with Put Blob from URL; the content of an existing blob is overwritten with the\n     * content of the new blob.  To perform partial updates to a block blob’s contents using a source URL,\n     * use the Put Block from URL API in conjunction with Put Block List.\n     * @param contentLength The length of the request.\n     * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to\n     *                   2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would\n     *                   appear in a request URI. The source blob must either be public or must be authenticated via a shared\n     *                   access signature.\n     * @param options The options parameters.\n     */\n    putBlobFromUrl(contentLength, copySource, options) {\n        return this.client.sendOperationRequest({ contentLength, copySource, options }, putBlobFromUrlOperationSpec);\n    }\n    /**\n     * The Stage Block operation creates a new block to be committed as part of a blob\n     * @param blockId A valid Base64 string value that identifies the block. Prior to encoding, the string\n     *                must be less than or equal to 64 bytes in size. For a given blob, the length of the value specified\n     *                for the blockid parameter must be the same size for each block.\n     * @param contentLength The length of the request.\n     * @param body Initial data\n     * @param options The options parameters.\n     */\n    stageBlock(blockId, contentLength, body, options) {\n        return this.client.sendOperationRequest({ blockId, contentLength, body, options }, stageBlockOperationSpec);\n    }\n    /**\n     * The Stage Block operation creates a new block to be committed as part of a blob where the contents\n     * are read from a URL.\n     * @param blockId A valid Base64 string value that identifies the block. Prior to encoding, the string\n     *                must be less than or equal to 64 bytes in size. For a given blob, the length of the value specified\n     *                for the blockid parameter must be the same size for each block.\n     * @param contentLength The length of the request.\n     * @param sourceUrl Specify a URL to the copy source.\n     * @param options The options parameters.\n     */\n    stageBlockFromURL(blockId, contentLength, sourceUrl, options) {\n        return this.client.sendOperationRequest({ blockId, contentLength, sourceUrl, options }, stageBlockFromURLOperationSpec);\n    }\n    /**\n     * The Commit Block List operation writes a blob by specifying the list of block IDs that make up the\n     * blob. In order to be written as part of a blob, a block must have been successfully written to the\n     * server in a prior Put Block operation. You can call Put Block List to update a blob by uploading\n     * only those blocks that have changed, then committing the new and existing blocks together. You can\n     * do this by specifying whether to commit a block from the committed block list or from the\n     * uncommitted block list, or to commit the most recently uploaded version of the block, whichever list\n     * it may belong to.\n     * @param blocks Blob Blocks.\n     * @param options The options parameters.\n     */\n    commitBlockList(blocks, options) {\n        return this.client.sendOperationRequest({ blocks, options }, commitBlockListOperationSpec);\n    }\n    /**\n     * The Get Block List operation retrieves the list of blocks that have been uploaded as part of a block\n     * blob\n     * @param listType Specifies whether to return the list of committed blocks, the list of uncommitted\n     *                 blocks, or both lists together.\n     * @param options The options parameters.\n     */\n    getBlockList(listType, options) {\n        return this.client.sendOperationRequest({ listType, options }, getBlockListOperationSpec);\n    }\n}\n// Operation Specifications\nconst xmlSerializer = _azure_core_client__WEBPACK_IMPORTED_MODULE_0__.createSerializer(_models_mappers__WEBPACK_IMPORTED_MODULE_1__, /* isXml */ true);\nconst uploadOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlockBlobUploadHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlockBlobUploadExceptionHeaders,\n        },\n    },\n    requestBody: _models_parameters__WEBPACK_IMPORTED_MODULE_2__.body1,\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.contentLength,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.metadata,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKey,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKeySha256,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionAlgorithm,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobCacheControl,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentType,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentMD5,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentEncoding,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentLanguage,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentDisposition,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.immutabilityPolicyExpiry,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.immutabilityPolicyMode,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionScope,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.tier,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobTagsString,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.legalHold1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.transactionalContentMD5,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.transactionalContentCrc64,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.contentType1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept2,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobType2,\n    ],\n    isXML: true,\n    contentType: \"application/xml; charset=utf-8\",\n    mediaType: \"binary\",\n    serializer: xmlSerializer,\n};\nconst putBlobFromUrlOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlockBlobPutBlobFromUrlHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlockBlobPutBlobFromUrlExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.contentLength,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.metadata,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKey,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKeySha256,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionAlgorithm,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobCacheControl,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentType,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentMD5,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentEncoding,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentLanguage,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentDisposition,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionScope,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.tier,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.copySource,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobTagsString,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceContentMD5,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.copySourceAuthorization,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.copySourceTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.transactionalContentMD5,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobType2,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.copySourceBlobProperties,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst stageBlockOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlockBlobStageBlockHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlockBlobStageBlockExceptionHeaders,\n        },\n    },\n    requestBody: _models_parameters__WEBPACK_IMPORTED_MODULE_2__.body1,\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp24,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blockId,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.contentLength,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKey,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKeySha256,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionAlgorithm,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionScope,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.transactionalContentMD5,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.transactionalContentCrc64,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.contentType1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept2,\n    ],\n    isXML: true,\n    contentType: \"application/xml; charset=utf-8\",\n    mediaType: \"binary\",\n    serializer: xmlSerializer,\n};\nconst stageBlockFromURLOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlockBlobStageBlockFromURLHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlockBlobStageBlockFromURLExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp24,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blockId,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.contentLength,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKey,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKeySha256,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionAlgorithm,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionScope,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceContentMD5,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.copySourceAuthorization,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceUrl,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceContentCrc64,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceRange1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst commitBlockListOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlockBlobCommitBlockListHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlockBlobCommitBlockListExceptionHeaders,\n        },\n    },\n    requestBody: _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blocks,\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp25],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.contentType,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.metadata,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKey,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKeySha256,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionAlgorithm,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobCacheControl,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentType,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentMD5,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentEncoding,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentLanguage,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentDisposition,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.immutabilityPolicyExpiry,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.immutabilityPolicyMode,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionScope,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.tier,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobTagsString,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.legalHold1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.transactionalContentMD5,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.transactionalContentCrc64,\n    ],\n    isXML: true,\n    contentType: \"application/xml; charset=utf-8\",\n    mediaType: \"xml\",\n    serializer: xmlSerializer,\n};\nconst getBlockListOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlockList,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlockBlobGetBlockListHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlockBlobGetBlockListExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.snapshot,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp25,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.listType,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\n//# sourceMappingURL=blockBlob.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/blockBlob.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/container.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/container.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ContainerImpl: () => (/* binding */ ContainerImpl)\n/* harmony export */ });\n/* harmony import */ var _azure_core_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-client */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/index.js\");\n/* harmony import */ var _models_mappers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/mappers */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/mappers.js\");\n/* harmony import */ var _models_parameters__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/parameters */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/parameters.js\");\n/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\n\n\n/** Class containing Container operations. */\nclass ContainerImpl {\n    /**\n     * Initialize a new instance of the class Container class.\n     * @param client Reference to the service client\n     */\n    constructor(client) {\n        this.client = client;\n    }\n    /**\n     * creates a new container under the specified account. If the container with the same name already\n     * exists, the operation fails\n     * @param options The options parameters.\n     */\n    create(options) {\n        return this.client.sendOperationRequest({ options }, createOperationSpec);\n    }\n    /**\n     * returns all user-defined metadata and system properties for the specified container. The data\n     * returned does not include the container's list of blobs\n     * @param options The options parameters.\n     */\n    getProperties(options) {\n        return this.client.sendOperationRequest({ options }, getPropertiesOperationSpec);\n    }\n    /**\n     * operation marks the specified container for deletion. The container and any blobs contained within\n     * it are later deleted during garbage collection\n     * @param options The options parameters.\n     */\n    delete(options) {\n        return this.client.sendOperationRequest({ options }, deleteOperationSpec);\n    }\n    /**\n     * operation sets one or more user-defined name-value pairs for the specified container.\n     * @param options The options parameters.\n     */\n    setMetadata(options) {\n        return this.client.sendOperationRequest({ options }, setMetadataOperationSpec);\n    }\n    /**\n     * gets the permissions for the specified container. The permissions indicate whether container data\n     * may be accessed publicly.\n     * @param options The options parameters.\n     */\n    getAccessPolicy(options) {\n        return this.client.sendOperationRequest({ options }, getAccessPolicyOperationSpec);\n    }\n    /**\n     * sets the permissions for the specified container. The permissions indicate whether blobs in a\n     * container may be accessed publicly.\n     * @param options The options parameters.\n     */\n    setAccessPolicy(options) {\n        return this.client.sendOperationRequest({ options }, setAccessPolicyOperationSpec);\n    }\n    /**\n     * Restores a previously-deleted container.\n     * @param options The options parameters.\n     */\n    restore(options) {\n        return this.client.sendOperationRequest({ options }, restoreOperationSpec);\n    }\n    /**\n     * Renames an existing container.\n     * @param sourceContainerName Required.  Specifies the name of the container to rename.\n     * @param options The options parameters.\n     */\n    rename(sourceContainerName, options) {\n        return this.client.sendOperationRequest({ sourceContainerName, options }, renameOperationSpec);\n    }\n    /**\n     * The Batch operation allows multiple API calls to be embedded into a single HTTP request.\n     * @param contentLength The length of the request.\n     * @param multipartContentType Required. The value of this header must be multipart/mixed with a batch\n     *                             boundary. Example header value: multipart/mixed; boundary=batch_<GUID>\n     * @param body Initial data\n     * @param options The options parameters.\n     */\n    submitBatch(contentLength, multipartContentType, body, options) {\n        return this.client.sendOperationRequest({ contentLength, multipartContentType, body, options }, submitBatchOperationSpec);\n    }\n    /**\n     * The Filter Blobs operation enables callers to list blobs in a container whose tags match a given\n     * search expression.  Filter blobs searches within the given container.\n     * @param options The options parameters.\n     */\n    filterBlobs(options) {\n        return this.client.sendOperationRequest({ options }, filterBlobsOperationSpec);\n    }\n    /**\n     * [Update] establishes and manages a lock on a container for delete operations. The lock duration can\n     * be 15 to 60 seconds, or can be infinite\n     * @param options The options parameters.\n     */\n    acquireLease(options) {\n        return this.client.sendOperationRequest({ options }, acquireLeaseOperationSpec);\n    }\n    /**\n     * [Update] establishes and manages a lock on a container for delete operations. The lock duration can\n     * be 15 to 60 seconds, or can be infinite\n     * @param leaseId Specifies the current lease ID on the resource.\n     * @param options The options parameters.\n     */\n    releaseLease(leaseId, options) {\n        return this.client.sendOperationRequest({ leaseId, options }, releaseLeaseOperationSpec);\n    }\n    /**\n     * [Update] establishes and manages a lock on a container for delete operations. The lock duration can\n     * be 15 to 60 seconds, or can be infinite\n     * @param leaseId Specifies the current lease ID on the resource.\n     * @param options The options parameters.\n     */\n    renewLease(leaseId, options) {\n        return this.client.sendOperationRequest({ leaseId, options }, renewLeaseOperationSpec);\n    }\n    /**\n     * [Update] establishes and manages a lock on a container for delete operations. The lock duration can\n     * be 15 to 60 seconds, or can be infinite\n     * @param options The options parameters.\n     */\n    breakLease(options) {\n        return this.client.sendOperationRequest({ options }, breakLeaseOperationSpec);\n    }\n    /**\n     * [Update] establishes and manages a lock on a container for delete operations. The lock duration can\n     * be 15 to 60 seconds, or can be infinite\n     * @param leaseId Specifies the current lease ID on the resource.\n     * @param proposedLeaseId Proposed lease ID, in a GUID string format. The Blob service returns 400\n     *                        (Invalid request) if the proposed lease ID is not in the correct format. See Guid Constructor\n     *                        (String) for a list of valid GUID string formats.\n     * @param options The options parameters.\n     */\n    changeLease(leaseId, proposedLeaseId, options) {\n        return this.client.sendOperationRequest({ leaseId, proposedLeaseId, options }, changeLeaseOperationSpec);\n    }\n    /**\n     * [Update] The List Blobs operation returns a list of the blobs under the specified container\n     * @param options The options parameters.\n     */\n    listBlobFlatSegment(options) {\n        return this.client.sendOperationRequest({ options }, listBlobFlatSegmentOperationSpec);\n    }\n    /**\n     * [Update] The List Blobs operation returns a list of the blobs under the specified container\n     * @param delimiter When the request includes this parameter, the operation returns a BlobPrefix\n     *                  element in the response body that acts as a placeholder for all blobs whose names begin with the\n     *                  same substring up to the appearance of the delimiter character. The delimiter may be a single\n     *                  character or a string.\n     * @param options The options parameters.\n     */\n    listBlobHierarchySegment(delimiter, options) {\n        return this.client.sendOperationRequest({ delimiter, options }, listBlobHierarchySegmentOperationSpec);\n    }\n    /**\n     * Returns the sku name and account kind\n     * @param options The options parameters.\n     */\n    getAccountInfo(options) {\n        return this.client.sendOperationRequest({ options }, getAccountInfoOperationSpec);\n    }\n}\n// Operation Specifications\nconst xmlSerializer = _azure_core_client__WEBPACK_IMPORTED_MODULE_0__.createSerializer(_models_mappers__WEBPACK_IMPORTED_MODULE_1__, /* isXml */ true);\nconst createOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerCreateHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerCreateExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.restype2],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.metadata,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.access,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.defaultEncryptionScope,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.preventEncryptionScopeOverride,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst getPropertiesOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerGetPropertiesHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerGetPropertiesExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.restype2],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst deleteOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"DELETE\",\n    responses: {\n        202: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerDeleteHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerDeleteExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.restype2],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst setMetadataOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerSetMetadataHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerSetMetadataExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.restype2,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp6,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.metadata,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst getAccessPolicyOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: {\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: { name: \"Composite\", className: \"SignedIdentifier\" },\n                    },\n                },\n                serializedName: \"SignedIdentifiers\",\n                xmlName: \"SignedIdentifiers\",\n                xmlIsWrapped: true,\n                xmlElementName: \"SignedIdentifier\",\n            },\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerGetAccessPolicyHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerGetAccessPolicyExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.restype2,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp7,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst setAccessPolicyOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerSetAccessPolicyHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerSetAccessPolicyExceptionHeaders,\n        },\n    },\n    requestBody: _models_parameters__WEBPACK_IMPORTED_MODULE_2__.containerAcl,\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.restype2,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp7,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.contentType,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.access,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n    ],\n    isXML: true,\n    contentType: \"application/xml; charset=utf-8\",\n    mediaType: \"xml\",\n    serializer: xmlSerializer,\n};\nconst restoreOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerRestoreHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerRestoreExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.restype2,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp8,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.deletedContainerName,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.deletedContainerVersion,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst renameOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerRenameHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerRenameExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.restype2,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp9,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceContainerName,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceLeaseId,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst submitBatchOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"POST\",\n    responses: {\n        202: {\n            bodyMapper: {\n                type: { name: \"Stream\" },\n                serializedName: \"parsedResponse\",\n            },\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerSubmitBatchHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerSubmitBatchExceptionHeaders,\n        },\n    },\n    requestBody: _models_parameters__WEBPACK_IMPORTED_MODULE_2__.body,\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp4,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.restype2,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.contentLength,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.multipartContentType,\n    ],\n    isXML: true,\n    contentType: \"application/xml; charset=utf-8\",\n    mediaType: \"xml\",\n    serializer: xmlSerializer,\n};\nconst filterBlobsOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.FilterBlobSegment,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerFilterBlobsHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerFilterBlobsExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.marker,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.maxPageSize,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp5,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.where,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.restype2,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst acquireLeaseOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerAcquireLeaseHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerAcquireLeaseExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.restype2,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp10,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.action,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.duration,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.proposedLeaseId,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst releaseLeaseOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerReleaseLeaseHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerReleaseLeaseExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.restype2,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp10,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.action1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst renewLeaseOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerRenewLeaseHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerRenewLeaseExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.restype2,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp10,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.action2,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst breakLeaseOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"PUT\",\n    responses: {\n        202: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerBreakLeaseHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerBreakLeaseExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.restype2,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp10,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.action3,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.breakPeriod,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst changeLeaseOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerChangeLeaseHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerChangeLeaseExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.restype2,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp10,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.action4,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.proposedLeaseId1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst listBlobFlatSegmentOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ListBlobsFlatSegmentResponse,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerListBlobFlatSegmentHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerListBlobFlatSegmentExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp2,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.prefix,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.marker,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.maxPageSize,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.restype2,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.include1,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst listBlobHierarchySegmentOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ListBlobsHierarchySegmentResponse,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerListBlobHierarchySegmentHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerListBlobHierarchySegmentExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp2,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.prefix,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.marker,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.maxPageSize,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.restype2,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.include1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.delimiter,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst getAccountInfoOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerGetAccountInfoHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerGetAccountInfoExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.restype1,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\n//# sourceMappingURL=container.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL2dlbmVyYXRlZC9zcmMvb3BlcmF0aW9ucy9jb250YWluZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ2lEO0FBQ0o7QUFDTTtBQUNuRDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrREFBa0QsU0FBUztBQUMzRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRCxTQUFTO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELFNBQVM7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELFNBQVM7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrREFBa0QsU0FBUztBQUMzRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRCxTQUFTO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRCxTQUFTO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELDhCQUE4QjtBQUNoRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0ZBQW9GO0FBQ3BGO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELG9EQUFvRDtBQUN0RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRCxTQUFTO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELFNBQVM7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRCxrQkFBa0I7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRCxrQkFBa0I7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrREFBa0QsU0FBUztBQUMzRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELG1DQUFtQztBQUNyRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrREFBa0QsU0FBUztBQUMzRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRCxvQkFBb0I7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELFNBQVM7QUFDM0Q7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLGdFQUEyQixDQUFDLDRDQUFPO0FBQ3pEO0FBQ0EsYUFBYSxjQUFjO0FBQzNCO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixtRUFBOEI7QUFDekQsU0FBUztBQUNUO0FBQ0Esd0JBQXdCLHlEQUFvQjtBQUM1QywyQkFBMkIsNEVBQXVDO0FBQ2xFLFNBQVM7QUFDVCxLQUFLO0FBQ0wsc0JBQXNCLGdFQUEyQixFQUFFLHdEQUFtQjtBQUN0RSxvQkFBb0IsbURBQWM7QUFDbEM7QUFDQSxRQUFRLHVEQUFrQjtBQUMxQixRQUFRLHlEQUFvQjtBQUM1QixRQUFRLHVEQUFrQjtBQUMxQixRQUFRLHdEQUFtQjtBQUMzQixRQUFRLHNEQUFpQjtBQUN6QixRQUFRLHNFQUFpQztBQUN6QyxRQUFRLDhFQUF5QztBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxjQUFjO0FBQzNCO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQiwwRUFBcUM7QUFDaEUsU0FBUztBQUNUO0FBQ0Esd0JBQXdCLHlEQUFvQjtBQUM1QywyQkFBMkIsbUZBQThDO0FBQ3pFLFNBQVM7QUFDVCxLQUFLO0FBQ0wsc0JBQXNCLGdFQUEyQixFQUFFLHdEQUFtQjtBQUN0RSxvQkFBb0IsbURBQWM7QUFDbEM7QUFDQSxRQUFRLHVEQUFrQjtBQUMxQixRQUFRLHlEQUFvQjtBQUM1QixRQUFRLHVEQUFrQjtBQUMxQixRQUFRLHVEQUFrQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxjQUFjO0FBQzNCO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixtRUFBOEI7QUFDekQsU0FBUztBQUNUO0FBQ0Esd0JBQXdCLHlEQUFvQjtBQUM1QywyQkFBMkIsNEVBQXVDO0FBQ2xFLFNBQVM7QUFDVCxLQUFLO0FBQ0wsc0JBQXNCLGdFQUEyQixFQUFFLHdEQUFtQjtBQUN0RSxvQkFBb0IsbURBQWM7QUFDbEM7QUFDQSxRQUFRLHVEQUFrQjtBQUMxQixRQUFRLHlEQUFvQjtBQUM1QixRQUFRLHVEQUFrQjtBQUMxQixRQUFRLHVEQUFrQjtBQUMxQixRQUFRLCtEQUEwQjtBQUNsQyxRQUFRLGlFQUE0QjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxjQUFjO0FBQzNCO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQix3RUFBbUM7QUFDOUQsU0FBUztBQUNUO0FBQ0Esd0JBQXdCLHlEQUFvQjtBQUM1QywyQkFBMkIsaUZBQTRDO0FBQ3ZFLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDQSxRQUFRLGdFQUEyQjtBQUNuQyxRQUFRLHdEQUFtQjtBQUMzQixRQUFRLHFEQUFnQjtBQUN4QjtBQUNBLG9CQUFvQixtREFBYztBQUNsQztBQUNBLFFBQVEsdURBQWtCO0FBQzFCLFFBQVEseURBQW9CO0FBQzVCLFFBQVEsdURBQWtCO0FBQzFCLFFBQVEsd0RBQW1CO0FBQzNCLFFBQVEsdURBQWtCO0FBQzFCLFFBQVEsK0RBQTBCO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLGNBQWM7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0Msa0RBQWtEO0FBQ2xGLHFCQUFxQjtBQUNyQixpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsMkJBQTJCLDRFQUF1QztBQUNsRSxTQUFTO0FBQ1Q7QUFDQSx3QkFBd0IseURBQW9CO0FBQzVDLDJCQUEyQixxRkFBZ0Q7QUFDM0UsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNBLFFBQVEsZ0VBQTJCO0FBQ25DLFFBQVEsd0RBQW1CO0FBQzNCLFFBQVEscURBQWdCO0FBQ3hCO0FBQ0Esb0JBQW9CLG1EQUFjO0FBQ2xDO0FBQ0EsUUFBUSx1REFBa0I7QUFDMUIsUUFBUSx5REFBb0I7QUFDNUIsUUFBUSx1REFBa0I7QUFDMUIsUUFBUSx1REFBa0I7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsY0FBYztBQUMzQjtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsNEVBQXVDO0FBQ2xFLFNBQVM7QUFDVDtBQUNBLHdCQUF3Qix5REFBb0I7QUFDNUMsMkJBQTJCLHFGQUFnRDtBQUMzRSxTQUFTO0FBQ1QsS0FBSztBQUNMLGlCQUFpQiw0REFBdUI7QUFDeEM7QUFDQSxRQUFRLGdFQUEyQjtBQUNuQyxRQUFRLHdEQUFtQjtBQUMzQixRQUFRLHFEQUFnQjtBQUN4QjtBQUNBLG9CQUFvQixtREFBYztBQUNsQztBQUNBLFFBQVEsMkRBQXNCO0FBQzlCLFFBQVEsc0RBQWlCO0FBQ3pCLFFBQVEsdURBQWtCO0FBQzFCLFFBQVEseURBQW9CO0FBQzVCLFFBQVEsc0RBQWlCO0FBQ3pCLFFBQVEsdURBQWtCO0FBQzFCLFFBQVEsK0RBQTBCO0FBQ2xDLFFBQVEsaUVBQTRCO0FBQ3BDO0FBQ0E7QUFDQSxtQ0FBbUM7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLGNBQWM7QUFDM0I7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLG9FQUErQjtBQUMxRCxTQUFTO0FBQ1Q7QUFDQSx3QkFBd0IseURBQW9CO0FBQzVDLDJCQUEyQiw2RUFBd0M7QUFDbkUsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNBLFFBQVEsZ0VBQTJCO0FBQ25DLFFBQVEsd0RBQW1CO0FBQzNCLFFBQVEscURBQWdCO0FBQ3hCO0FBQ0Esb0JBQW9CLG1EQUFjO0FBQ2xDO0FBQ0EsUUFBUSx1REFBa0I7QUFDMUIsUUFBUSx5REFBb0I7QUFDNUIsUUFBUSx1REFBa0I7QUFDMUIsUUFBUSxvRUFBK0I7QUFDdkMsUUFBUSx1RUFBa0M7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsY0FBYztBQUMzQjtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsbUVBQThCO0FBQ3pELFNBQVM7QUFDVDtBQUNBLHdCQUF3Qix5REFBb0I7QUFDNUMsMkJBQTJCLDRFQUF1QztBQUNsRSxTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ0EsUUFBUSxnRUFBMkI7QUFDbkMsUUFBUSx3REFBbUI7QUFDM0IsUUFBUSxxREFBZ0I7QUFDeEI7QUFDQSxvQkFBb0IsbURBQWM7QUFDbEM7QUFDQSxRQUFRLHVEQUFrQjtBQUMxQixRQUFRLHlEQUFvQjtBQUM1QixRQUFRLHVEQUFrQjtBQUMxQixRQUFRLG1FQUE4QjtBQUN0QyxRQUFRLDZEQUF3QjtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxjQUFjO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGdCQUFnQjtBQUN4QztBQUNBLGFBQWE7QUFDYiwyQkFBMkIsd0VBQW1DO0FBQzlELFNBQVM7QUFDVDtBQUNBLHdCQUF3Qix5REFBb0I7QUFDNUMsMkJBQTJCLGlGQUE0QztBQUN2RSxTQUFTO0FBQ1QsS0FBSztBQUNMLGlCQUFpQixvREFBZTtBQUNoQztBQUNBLFFBQVEsZ0VBQTJCO0FBQ25DLFFBQVEscURBQWdCO0FBQ3hCLFFBQVEsd0RBQW1CO0FBQzNCO0FBQ0Esb0JBQW9CLG1EQUFjO0FBQ2xDO0FBQ0EsUUFBUSxzREFBaUI7QUFDekIsUUFBUSx1REFBa0I7QUFDMUIsUUFBUSx5REFBb0I7QUFDNUIsUUFBUSw2REFBd0I7QUFDaEMsUUFBUSxvRUFBK0I7QUFDdkM7QUFDQTtBQUNBLG1DQUFtQztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsY0FBYztBQUMzQjtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsOERBQXlCO0FBQ2pELDJCQUEyQix3RUFBbUM7QUFDOUQsU0FBUztBQUNUO0FBQ0Esd0JBQXdCLHlEQUFvQjtBQUM1QywyQkFBMkIsaUZBQTRDO0FBQ3ZFLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDQSxRQUFRLGdFQUEyQjtBQUNuQyxRQUFRLHNEQUFpQjtBQUN6QixRQUFRLDJEQUFzQjtBQUM5QixRQUFRLHFEQUFnQjtBQUN4QixRQUFRLHFEQUFnQjtBQUN4QixRQUFRLHdEQUFtQjtBQUMzQjtBQUNBLG9CQUFvQixtREFBYztBQUNsQztBQUNBLFFBQVEsdURBQWtCO0FBQzFCLFFBQVEseURBQW9CO0FBQzVCLFFBQVEsdURBQWtCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLGNBQWM7QUFDM0I7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLHlFQUFvQztBQUMvRCxTQUFTO0FBQ1Q7QUFDQSx3QkFBd0IseURBQW9CO0FBQzVDLDJCQUEyQixrRkFBNkM7QUFDeEUsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNBLFFBQVEsZ0VBQTJCO0FBQ25DLFFBQVEsd0RBQW1CO0FBQzNCLFFBQVEsc0RBQWlCO0FBQ3pCO0FBQ0Esb0JBQW9CLG1EQUFjO0FBQ2xDO0FBQ0EsUUFBUSx1REFBa0I7QUFDMUIsUUFBUSx5REFBb0I7QUFDNUIsUUFBUSx1REFBa0I7QUFDMUIsUUFBUSwrREFBMEI7QUFDbEMsUUFBUSxpRUFBNEI7QUFDcEMsUUFBUSxzREFBaUI7QUFDekIsUUFBUSx3REFBbUI7QUFDM0IsUUFBUSwrREFBMEI7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsY0FBYztBQUMzQjtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIseUVBQW9DO0FBQy9ELFNBQVM7QUFDVDtBQUNBLHdCQUF3Qix5REFBb0I7QUFDNUMsMkJBQTJCLGtGQUE2QztBQUN4RSxTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ0EsUUFBUSxnRUFBMkI7QUFDbkMsUUFBUSx3REFBbUI7QUFDM0IsUUFBUSxzREFBaUI7QUFDekI7QUFDQSxvQkFBb0IsbURBQWM7QUFDbEM7QUFDQSxRQUFRLHVEQUFrQjtBQUMxQixRQUFRLHlEQUFvQjtBQUM1QixRQUFRLHVEQUFrQjtBQUMxQixRQUFRLCtEQUEwQjtBQUNsQyxRQUFRLGlFQUE0QjtBQUNwQyxRQUFRLHVEQUFrQjtBQUMxQixRQUFRLHdEQUFtQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxjQUFjO0FBQzNCO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQix1RUFBa0M7QUFDN0QsU0FBUztBQUNUO0FBQ0Esd0JBQXdCLHlEQUFvQjtBQUM1QywyQkFBMkIsZ0ZBQTJDO0FBQ3RFLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDQSxRQUFRLGdFQUEyQjtBQUNuQyxRQUFRLHdEQUFtQjtBQUMzQixRQUFRLHNEQUFpQjtBQUN6QjtBQUNBLG9CQUFvQixtREFBYztBQUNsQztBQUNBLFFBQVEsdURBQWtCO0FBQzFCLFFBQVEseURBQW9CO0FBQzVCLFFBQVEsdURBQWtCO0FBQzFCLFFBQVEsK0RBQTBCO0FBQ2xDLFFBQVEsaUVBQTRCO0FBQ3BDLFFBQVEsd0RBQW1CO0FBQzNCLFFBQVEsdURBQWtCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLGNBQWM7QUFDM0I7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLHVFQUFrQztBQUM3RCxTQUFTO0FBQ1Q7QUFDQSx3QkFBd0IseURBQW9CO0FBQzVDLDJCQUEyQixnRkFBMkM7QUFDdEUsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNBLFFBQVEsZ0VBQTJCO0FBQ25DLFFBQVEsd0RBQW1CO0FBQzNCLFFBQVEsc0RBQWlCO0FBQ3pCO0FBQ0Esb0JBQW9CLG1EQUFjO0FBQ2xDO0FBQ0EsUUFBUSx1REFBa0I7QUFDMUIsUUFBUSx5REFBb0I7QUFDNUIsUUFBUSx1REFBa0I7QUFDMUIsUUFBUSwrREFBMEI7QUFDbEMsUUFBUSxpRUFBNEI7QUFDcEMsUUFBUSx1REFBa0I7QUFDMUIsUUFBUSwyREFBc0I7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsY0FBYztBQUMzQjtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsd0VBQW1DO0FBQzlELFNBQVM7QUFDVDtBQUNBLHdCQUF3Qix5REFBb0I7QUFDNUMsMkJBQTJCLGlGQUE0QztBQUN2RSxTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ0EsUUFBUSxnRUFBMkI7QUFDbkMsUUFBUSx3REFBbUI7QUFDM0IsUUFBUSxzREFBaUI7QUFDekI7QUFDQSxvQkFBb0IsbURBQWM7QUFDbEM7QUFDQSxRQUFRLHVEQUFrQjtBQUMxQixRQUFRLHlEQUFvQjtBQUM1QixRQUFRLHVEQUFrQjtBQUMxQixRQUFRLCtEQUEwQjtBQUNsQyxRQUFRLGlFQUE0QjtBQUNwQyxRQUFRLHdEQUFtQjtBQUMzQixRQUFRLHVEQUFrQjtBQUMxQixRQUFRLGdFQUEyQjtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxjQUFjO0FBQzNCO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qix5RUFBb0M7QUFDNUQsMkJBQTJCLGdGQUEyQztBQUN0RSxTQUFTO0FBQ1Q7QUFDQSx3QkFBd0IseURBQW9CO0FBQzVDLDJCQUEyQix5RkFBb0Q7QUFDL0UsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNBLFFBQVEsZ0VBQTJCO0FBQ25DLFFBQVEscURBQWdCO0FBQ3hCLFFBQVEsc0RBQWlCO0FBQ3pCLFFBQVEsc0RBQWlCO0FBQ3pCLFFBQVEsMkRBQXNCO0FBQzlCLFFBQVEsd0RBQW1CO0FBQzNCLFFBQVEsd0RBQW1CO0FBQzNCO0FBQ0Esb0JBQW9CLG1EQUFjO0FBQ2xDO0FBQ0EsUUFBUSx1REFBa0I7QUFDMUIsUUFBUSx5REFBb0I7QUFDNUIsUUFBUSx1REFBa0I7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsY0FBYztBQUMzQjtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsOEVBQXlDO0FBQ2pFLDJCQUEyQixxRkFBZ0Q7QUFDM0UsU0FBUztBQUNUO0FBQ0Esd0JBQXdCLHlEQUFvQjtBQUM1QywyQkFBMkIsOEZBQXlEO0FBQ3BGLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDQSxRQUFRLGdFQUEyQjtBQUNuQyxRQUFRLHFEQUFnQjtBQUN4QixRQUFRLHNEQUFpQjtBQUN6QixRQUFRLHNEQUFpQjtBQUN6QixRQUFRLDJEQUFzQjtBQUM5QixRQUFRLHdEQUFtQjtBQUMzQixRQUFRLHdEQUFtQjtBQUMzQixRQUFRLHlEQUFvQjtBQUM1QjtBQUNBLG9CQUFvQixtREFBYztBQUNsQztBQUNBLFFBQVEsdURBQWtCO0FBQzFCLFFBQVEseURBQW9CO0FBQzVCLFFBQVEsdURBQWtCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLGNBQWM7QUFDM0I7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLDJFQUFzQztBQUNqRSxTQUFTO0FBQ1Q7QUFDQSx3QkFBd0IseURBQW9CO0FBQzVDLDJCQUEyQixvRkFBK0M7QUFDMUUsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNBLFFBQVEsb0RBQWU7QUFDdkIsUUFBUSxnRUFBMkI7QUFDbkMsUUFBUSx3REFBbUI7QUFDM0I7QUFDQSxvQkFBb0IsbURBQWM7QUFDbEM7QUFDQSxRQUFRLHVEQUFrQjtBQUMxQixRQUFRLHlEQUFvQjtBQUM1QixRQUFRLHVEQUFrQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvdmljdG9yd2lsc29uL0Rlc2t0b3AvcHJvamVjdHMvRVpWaXovbm9kZV9tb2R1bGVzL0BhenVyZS9zdG9yYWdlLWJsb2IvZGlzdC1lc20vc3RvcmFnZS1ibG9iL3NyYy9nZW5lcmF0ZWQvc3JjL29wZXJhdGlvbnMvY29udGFpbmVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbiAqXG4gKiBDb2RlIGdlbmVyYXRlZCBieSBNaWNyb3NvZnQgKFIpIEF1dG9SZXN0IENvZGUgR2VuZXJhdG9yLlxuICogQ2hhbmdlcyBtYXkgY2F1c2UgaW5jb3JyZWN0IGJlaGF2aW9yIGFuZCB3aWxsIGJlIGxvc3QgaWYgdGhlIGNvZGUgaXMgcmVnZW5lcmF0ZWQuXG4gKi9cbmltcG9ydCAqIGFzIGNvcmVDbGllbnQgZnJvbSBcIkBhenVyZS9jb3JlLWNsaWVudFwiO1xuaW1wb3J0ICogYXMgTWFwcGVycyBmcm9tIFwiLi4vbW9kZWxzL21hcHBlcnNcIjtcbmltcG9ydCAqIGFzIFBhcmFtZXRlcnMgZnJvbSBcIi4uL21vZGVscy9wYXJhbWV0ZXJzXCI7XG4vKiogQ2xhc3MgY29udGFpbmluZyBDb250YWluZXIgb3BlcmF0aW9ucy4gKi9cbmV4cG9ydCBjbGFzcyBDb250YWluZXJJbXBsIHtcbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplIGEgbmV3IGluc3RhbmNlIG9mIHRoZSBjbGFzcyBDb250YWluZXIgY2xhc3MuXG4gICAgICogQHBhcmFtIGNsaWVudCBSZWZlcmVuY2UgdG8gdGhlIHNlcnZpY2UgY2xpZW50XG4gICAgICovXG4gICAgY29uc3RydWN0b3IoY2xpZW50KSB7XG4gICAgICAgIHRoaXMuY2xpZW50ID0gY2xpZW50O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBjcmVhdGVzIGEgbmV3IGNvbnRhaW5lciB1bmRlciB0aGUgc3BlY2lmaWVkIGFjY291bnQuIElmIHRoZSBjb250YWluZXIgd2l0aCB0aGUgc2FtZSBuYW1lIGFscmVhZHlcbiAgICAgKiBleGlzdHMsIHRoZSBvcGVyYXRpb24gZmFpbHNcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBUaGUgb3B0aW9ucyBwYXJhbWV0ZXJzLlxuICAgICAqL1xuICAgIGNyZWF0ZShvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNsaWVudC5zZW5kT3BlcmF0aW9uUmVxdWVzdCh7IG9wdGlvbnMgfSwgY3JlYXRlT3BlcmF0aW9uU3BlYyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIHJldHVybnMgYWxsIHVzZXItZGVmaW5lZCBtZXRhZGF0YSBhbmQgc3lzdGVtIHByb3BlcnRpZXMgZm9yIHRoZSBzcGVjaWZpZWQgY29udGFpbmVyLiBUaGUgZGF0YVxuICAgICAqIHJldHVybmVkIGRvZXMgbm90IGluY2x1ZGUgdGhlIGNvbnRhaW5lcidzIGxpc3Qgb2YgYmxvYnNcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBUaGUgb3B0aW9ucyBwYXJhbWV0ZXJzLlxuICAgICAqL1xuICAgIGdldFByb3BlcnRpZXMob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5jbGllbnQuc2VuZE9wZXJhdGlvblJlcXVlc3QoeyBvcHRpb25zIH0sIGdldFByb3BlcnRpZXNPcGVyYXRpb25TcGVjKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogb3BlcmF0aW9uIG1hcmtzIHRoZSBzcGVjaWZpZWQgY29udGFpbmVyIGZvciBkZWxldGlvbi4gVGhlIGNvbnRhaW5lciBhbmQgYW55IGJsb2JzIGNvbnRhaW5lZCB3aXRoaW5cbiAgICAgKiBpdCBhcmUgbGF0ZXIgZGVsZXRlZCBkdXJpbmcgZ2FyYmFnZSBjb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIG9wdGlvbnMgVGhlIG9wdGlvbnMgcGFyYW1ldGVycy5cbiAgICAgKi9cbiAgICBkZWxldGUob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5jbGllbnQuc2VuZE9wZXJhdGlvblJlcXVlc3QoeyBvcHRpb25zIH0sIGRlbGV0ZU9wZXJhdGlvblNwZWMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBvcGVyYXRpb24gc2V0cyBvbmUgb3IgbW9yZSB1c2VyLWRlZmluZWQgbmFtZS12YWx1ZSBwYWlycyBmb3IgdGhlIHNwZWNpZmllZCBjb250YWluZXIuXG4gICAgICogQHBhcmFtIG9wdGlvbnMgVGhlIG9wdGlvbnMgcGFyYW1ldGVycy5cbiAgICAgKi9cbiAgICBzZXRNZXRhZGF0YShvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNsaWVudC5zZW5kT3BlcmF0aW9uUmVxdWVzdCh7IG9wdGlvbnMgfSwgc2V0TWV0YWRhdGFPcGVyYXRpb25TcGVjKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogZ2V0cyB0aGUgcGVybWlzc2lvbnMgZm9yIHRoZSBzcGVjaWZpZWQgY29udGFpbmVyLiBUaGUgcGVybWlzc2lvbnMgaW5kaWNhdGUgd2hldGhlciBjb250YWluZXIgZGF0YVxuICAgICAqIG1heSBiZSBhY2Nlc3NlZCBwdWJsaWNseS5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBUaGUgb3B0aW9ucyBwYXJhbWV0ZXJzLlxuICAgICAqL1xuICAgIGdldEFjY2Vzc1BvbGljeShvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNsaWVudC5zZW5kT3BlcmF0aW9uUmVxdWVzdCh7IG9wdGlvbnMgfSwgZ2V0QWNjZXNzUG9saWN5T3BlcmF0aW9uU3BlYyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIHNldHMgdGhlIHBlcm1pc3Npb25zIGZvciB0aGUgc3BlY2lmaWVkIGNvbnRhaW5lci4gVGhlIHBlcm1pc3Npb25zIGluZGljYXRlIHdoZXRoZXIgYmxvYnMgaW4gYVxuICAgICAqIGNvbnRhaW5lciBtYXkgYmUgYWNjZXNzZWQgcHVibGljbHkuXG4gICAgICogQHBhcmFtIG9wdGlvbnMgVGhlIG9wdGlvbnMgcGFyYW1ldGVycy5cbiAgICAgKi9cbiAgICBzZXRBY2Nlc3NQb2xpY3kob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5jbGllbnQuc2VuZE9wZXJhdGlvblJlcXVlc3QoeyBvcHRpb25zIH0sIHNldEFjY2Vzc1BvbGljeU9wZXJhdGlvblNwZWMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXN0b3JlcyBhIHByZXZpb3VzbHktZGVsZXRlZCBjb250YWluZXIuXG4gICAgICogQHBhcmFtIG9wdGlvbnMgVGhlIG9wdGlvbnMgcGFyYW1ldGVycy5cbiAgICAgKi9cbiAgICByZXN0b3JlKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xpZW50LnNlbmRPcGVyYXRpb25SZXF1ZXN0KHsgb3B0aW9ucyB9LCByZXN0b3JlT3BlcmF0aW9uU3BlYyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlbmFtZXMgYW4gZXhpc3RpbmcgY29udGFpbmVyLlxuICAgICAqIEBwYXJhbSBzb3VyY2VDb250YWluZXJOYW1lIFJlcXVpcmVkLiAgU3BlY2lmaWVzIHRoZSBuYW1lIG9mIHRoZSBjb250YWluZXIgdG8gcmVuYW1lLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIFRoZSBvcHRpb25zIHBhcmFtZXRlcnMuXG4gICAgICovXG4gICAgcmVuYW1lKHNvdXJjZUNvbnRhaW5lck5hbWUsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xpZW50LnNlbmRPcGVyYXRpb25SZXF1ZXN0KHsgc291cmNlQ29udGFpbmVyTmFtZSwgb3B0aW9ucyB9LCByZW5hbWVPcGVyYXRpb25TcGVjKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIEJhdGNoIG9wZXJhdGlvbiBhbGxvd3MgbXVsdGlwbGUgQVBJIGNhbGxzIHRvIGJlIGVtYmVkZGVkIGludG8gYSBzaW5nbGUgSFRUUCByZXF1ZXN0LlxuICAgICAqIEBwYXJhbSBjb250ZW50TGVuZ3RoIFRoZSBsZW5ndGggb2YgdGhlIHJlcXVlc3QuXG4gICAgICogQHBhcmFtIG11bHRpcGFydENvbnRlbnRUeXBlIFJlcXVpcmVkLiBUaGUgdmFsdWUgb2YgdGhpcyBoZWFkZXIgbXVzdCBiZSBtdWx0aXBhcnQvbWl4ZWQgd2l0aCBhIGJhdGNoXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvdW5kYXJ5LiBFeGFtcGxlIGhlYWRlciB2YWx1ZTogbXVsdGlwYXJ0L21peGVkOyBib3VuZGFyeT1iYXRjaF88R1VJRD5cbiAgICAgKiBAcGFyYW0gYm9keSBJbml0aWFsIGRhdGFcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBUaGUgb3B0aW9ucyBwYXJhbWV0ZXJzLlxuICAgICAqL1xuICAgIHN1Ym1pdEJhdGNoKGNvbnRlbnRMZW5ndGgsIG11bHRpcGFydENvbnRlbnRUeXBlLCBib2R5LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNsaWVudC5zZW5kT3BlcmF0aW9uUmVxdWVzdCh7IGNvbnRlbnRMZW5ndGgsIG11bHRpcGFydENvbnRlbnRUeXBlLCBib2R5LCBvcHRpb25zIH0sIHN1Ym1pdEJhdGNoT3BlcmF0aW9uU3BlYyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBGaWx0ZXIgQmxvYnMgb3BlcmF0aW9uIGVuYWJsZXMgY2FsbGVycyB0byBsaXN0IGJsb2JzIGluIGEgY29udGFpbmVyIHdob3NlIHRhZ3MgbWF0Y2ggYSBnaXZlblxuICAgICAqIHNlYXJjaCBleHByZXNzaW9uLiAgRmlsdGVyIGJsb2JzIHNlYXJjaGVzIHdpdGhpbiB0aGUgZ2l2ZW4gY29udGFpbmVyLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIFRoZSBvcHRpb25zIHBhcmFtZXRlcnMuXG4gICAgICovXG4gICAgZmlsdGVyQmxvYnMob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5jbGllbnQuc2VuZE9wZXJhdGlvblJlcXVlc3QoeyBvcHRpb25zIH0sIGZpbHRlckJsb2JzT3BlcmF0aW9uU3BlYyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFtVcGRhdGVdIGVzdGFibGlzaGVzIGFuZCBtYW5hZ2VzIGEgbG9jayBvbiBhIGNvbnRhaW5lciBmb3IgZGVsZXRlIG9wZXJhdGlvbnMuIFRoZSBsb2NrIGR1cmF0aW9uIGNhblxuICAgICAqIGJlIDE1IHRvIDYwIHNlY29uZHMsIG9yIGNhbiBiZSBpbmZpbml0ZVxuICAgICAqIEBwYXJhbSBvcHRpb25zIFRoZSBvcHRpb25zIHBhcmFtZXRlcnMuXG4gICAgICovXG4gICAgYWNxdWlyZUxlYXNlKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xpZW50LnNlbmRPcGVyYXRpb25SZXF1ZXN0KHsgb3B0aW9ucyB9LCBhY3F1aXJlTGVhc2VPcGVyYXRpb25TcGVjKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogW1VwZGF0ZV0gZXN0YWJsaXNoZXMgYW5kIG1hbmFnZXMgYSBsb2NrIG9uIGEgY29udGFpbmVyIGZvciBkZWxldGUgb3BlcmF0aW9ucy4gVGhlIGxvY2sgZHVyYXRpb24gY2FuXG4gICAgICogYmUgMTUgdG8gNjAgc2Vjb25kcywgb3IgY2FuIGJlIGluZmluaXRlXG4gICAgICogQHBhcmFtIGxlYXNlSWQgU3BlY2lmaWVzIHRoZSBjdXJyZW50IGxlYXNlIElEIG9uIHRoZSByZXNvdXJjZS5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBUaGUgb3B0aW9ucyBwYXJhbWV0ZXJzLlxuICAgICAqL1xuICAgIHJlbGVhc2VMZWFzZShsZWFzZUlkLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNsaWVudC5zZW5kT3BlcmF0aW9uUmVxdWVzdCh7IGxlYXNlSWQsIG9wdGlvbnMgfSwgcmVsZWFzZUxlYXNlT3BlcmF0aW9uU3BlYyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFtVcGRhdGVdIGVzdGFibGlzaGVzIGFuZCBtYW5hZ2VzIGEgbG9jayBvbiBhIGNvbnRhaW5lciBmb3IgZGVsZXRlIG9wZXJhdGlvbnMuIFRoZSBsb2NrIGR1cmF0aW9uIGNhblxuICAgICAqIGJlIDE1IHRvIDYwIHNlY29uZHMsIG9yIGNhbiBiZSBpbmZpbml0ZVxuICAgICAqIEBwYXJhbSBsZWFzZUlkIFNwZWNpZmllcyB0aGUgY3VycmVudCBsZWFzZSBJRCBvbiB0aGUgcmVzb3VyY2UuXG4gICAgICogQHBhcmFtIG9wdGlvbnMgVGhlIG9wdGlvbnMgcGFyYW1ldGVycy5cbiAgICAgKi9cbiAgICByZW5ld0xlYXNlKGxlYXNlSWQsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xpZW50LnNlbmRPcGVyYXRpb25SZXF1ZXN0KHsgbGVhc2VJZCwgb3B0aW9ucyB9LCByZW5ld0xlYXNlT3BlcmF0aW9uU3BlYyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFtVcGRhdGVdIGVzdGFibGlzaGVzIGFuZCBtYW5hZ2VzIGEgbG9jayBvbiBhIGNvbnRhaW5lciBmb3IgZGVsZXRlIG9wZXJhdGlvbnMuIFRoZSBsb2NrIGR1cmF0aW9uIGNhblxuICAgICAqIGJlIDE1IHRvIDYwIHNlY29uZHMsIG9yIGNhbiBiZSBpbmZpbml0ZVxuICAgICAqIEBwYXJhbSBvcHRpb25zIFRoZSBvcHRpb25zIHBhcmFtZXRlcnMuXG4gICAgICovXG4gICAgYnJlYWtMZWFzZShvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNsaWVudC5zZW5kT3BlcmF0aW9uUmVxdWVzdCh7IG9wdGlvbnMgfSwgYnJlYWtMZWFzZU9wZXJhdGlvblNwZWMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBbVXBkYXRlXSBlc3RhYmxpc2hlcyBhbmQgbWFuYWdlcyBhIGxvY2sgb24gYSBjb250YWluZXIgZm9yIGRlbGV0ZSBvcGVyYXRpb25zLiBUaGUgbG9jayBkdXJhdGlvbiBjYW5cbiAgICAgKiBiZSAxNSB0byA2MCBzZWNvbmRzLCBvciBjYW4gYmUgaW5maW5pdGVcbiAgICAgKiBAcGFyYW0gbGVhc2VJZCBTcGVjaWZpZXMgdGhlIGN1cnJlbnQgbGVhc2UgSUQgb24gdGhlIHJlc291cmNlLlxuICAgICAqIEBwYXJhbSBwcm9wb3NlZExlYXNlSWQgUHJvcG9zZWQgbGVhc2UgSUQsIGluIGEgR1VJRCBzdHJpbmcgZm9ybWF0LiBUaGUgQmxvYiBzZXJ2aWNlIHJldHVybnMgNDAwXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAoSW52YWxpZCByZXF1ZXN0KSBpZiB0aGUgcHJvcG9zZWQgbGVhc2UgSUQgaXMgbm90IGluIHRoZSBjb3JyZWN0IGZvcm1hdC4gU2VlIEd1aWQgQ29uc3RydWN0b3JcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgIChTdHJpbmcpIGZvciBhIGxpc3Qgb2YgdmFsaWQgR1VJRCBzdHJpbmcgZm9ybWF0cy5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBUaGUgb3B0aW9ucyBwYXJhbWV0ZXJzLlxuICAgICAqL1xuICAgIGNoYW5nZUxlYXNlKGxlYXNlSWQsIHByb3Bvc2VkTGVhc2VJZCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5jbGllbnQuc2VuZE9wZXJhdGlvblJlcXVlc3QoeyBsZWFzZUlkLCBwcm9wb3NlZExlYXNlSWQsIG9wdGlvbnMgfSwgY2hhbmdlTGVhc2VPcGVyYXRpb25TcGVjKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogW1VwZGF0ZV0gVGhlIExpc3QgQmxvYnMgb3BlcmF0aW9uIHJldHVybnMgYSBsaXN0IG9mIHRoZSBibG9icyB1bmRlciB0aGUgc3BlY2lmaWVkIGNvbnRhaW5lclxuICAgICAqIEBwYXJhbSBvcHRpb25zIFRoZSBvcHRpb25zIHBhcmFtZXRlcnMuXG4gICAgICovXG4gICAgbGlzdEJsb2JGbGF0U2VnbWVudChvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNsaWVudC5zZW5kT3BlcmF0aW9uUmVxdWVzdCh7IG9wdGlvbnMgfSwgbGlzdEJsb2JGbGF0U2VnbWVudE9wZXJhdGlvblNwZWMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBbVXBkYXRlXSBUaGUgTGlzdCBCbG9icyBvcGVyYXRpb24gcmV0dXJucyBhIGxpc3Qgb2YgdGhlIGJsb2JzIHVuZGVyIHRoZSBzcGVjaWZpZWQgY29udGFpbmVyXG4gICAgICogQHBhcmFtIGRlbGltaXRlciBXaGVuIHRoZSByZXF1ZXN0IGluY2x1ZGVzIHRoaXMgcGFyYW1ldGVyLCB0aGUgb3BlcmF0aW9uIHJldHVybnMgYSBCbG9iUHJlZml4XG4gICAgICogICAgICAgICAgICAgICAgICBlbGVtZW50IGluIHRoZSByZXNwb25zZSBib2R5IHRoYXQgYWN0cyBhcyBhIHBsYWNlaG9sZGVyIGZvciBhbGwgYmxvYnMgd2hvc2UgbmFtZXMgYmVnaW4gd2l0aCB0aGVcbiAgICAgKiAgICAgICAgICAgICAgICAgIHNhbWUgc3Vic3RyaW5nIHVwIHRvIHRoZSBhcHBlYXJhbmNlIG9mIHRoZSBkZWxpbWl0ZXIgY2hhcmFjdGVyLiBUaGUgZGVsaW1pdGVyIG1heSBiZSBhIHNpbmdsZVxuICAgICAqICAgICAgICAgICAgICAgICAgY2hhcmFjdGVyIG9yIGEgc3RyaW5nLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIFRoZSBvcHRpb25zIHBhcmFtZXRlcnMuXG4gICAgICovXG4gICAgbGlzdEJsb2JIaWVyYXJjaHlTZWdtZW50KGRlbGltaXRlciwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5jbGllbnQuc2VuZE9wZXJhdGlvblJlcXVlc3QoeyBkZWxpbWl0ZXIsIG9wdGlvbnMgfSwgbGlzdEJsb2JIaWVyYXJjaHlTZWdtZW50T3BlcmF0aW9uU3BlYyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHNrdSBuYW1lIGFuZCBhY2NvdW50IGtpbmRcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBUaGUgb3B0aW9ucyBwYXJhbWV0ZXJzLlxuICAgICAqL1xuICAgIGdldEFjY291bnRJbmZvKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xpZW50LnNlbmRPcGVyYXRpb25SZXF1ZXN0KHsgb3B0aW9ucyB9LCBnZXRBY2NvdW50SW5mb09wZXJhdGlvblNwZWMpO1xuICAgIH1cbn1cbi8vIE9wZXJhdGlvbiBTcGVjaWZpY2F0aW9uc1xuY29uc3QgeG1sU2VyaWFsaXplciA9IGNvcmVDbGllbnQuY3JlYXRlU2VyaWFsaXplcihNYXBwZXJzLCAvKiBpc1htbCAqLyB0cnVlKTtcbmNvbnN0IGNyZWF0ZU9wZXJhdGlvblNwZWMgPSB7XG4gICAgcGF0aDogXCIve2NvbnRhaW5lck5hbWV9XCIsXG4gICAgaHR0cE1ldGhvZDogXCJQVVRcIixcbiAgICByZXNwb25zZXM6IHtcbiAgICAgICAgMjAxOiB7XG4gICAgICAgICAgICBoZWFkZXJzTWFwcGVyOiBNYXBwZXJzLkNvbnRhaW5lckNyZWF0ZUhlYWRlcnMsXG4gICAgICAgIH0sXG4gICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgIGJvZHlNYXBwZXI6IE1hcHBlcnMuU3RvcmFnZUVycm9yLFxuICAgICAgICAgICAgaGVhZGVyc01hcHBlcjogTWFwcGVycy5Db250YWluZXJDcmVhdGVFeGNlcHRpb25IZWFkZXJzLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgcXVlcnlQYXJhbWV0ZXJzOiBbUGFyYW1ldGVycy50aW1lb3V0SW5TZWNvbmRzLCBQYXJhbWV0ZXJzLnJlc3R5cGUyXSxcbiAgICB1cmxQYXJhbWV0ZXJzOiBbUGFyYW1ldGVycy51cmxdLFxuICAgIGhlYWRlclBhcmFtZXRlcnM6IFtcbiAgICAgICAgUGFyYW1ldGVycy52ZXJzaW9uLFxuICAgICAgICBQYXJhbWV0ZXJzLnJlcXVlc3RJZCxcbiAgICAgICAgUGFyYW1ldGVycy5hY2NlcHQxLFxuICAgICAgICBQYXJhbWV0ZXJzLm1ldGFkYXRhLFxuICAgICAgICBQYXJhbWV0ZXJzLmFjY2VzcyxcbiAgICAgICAgUGFyYW1ldGVycy5kZWZhdWx0RW5jcnlwdGlvblNjb3BlLFxuICAgICAgICBQYXJhbWV0ZXJzLnByZXZlbnRFbmNyeXB0aW9uU2NvcGVPdmVycmlkZSxcbiAgICBdLFxuICAgIGlzWE1MOiB0cnVlLFxuICAgIHNlcmlhbGl6ZXI6IHhtbFNlcmlhbGl6ZXIsXG59O1xuY29uc3QgZ2V0UHJvcGVydGllc09wZXJhdGlvblNwZWMgPSB7XG4gICAgcGF0aDogXCIve2NvbnRhaW5lck5hbWV9XCIsXG4gICAgaHR0cE1ldGhvZDogXCJHRVRcIixcbiAgICByZXNwb25zZXM6IHtcbiAgICAgICAgMjAwOiB7XG4gICAgICAgICAgICBoZWFkZXJzTWFwcGVyOiBNYXBwZXJzLkNvbnRhaW5lckdldFByb3BlcnRpZXNIZWFkZXJzLFxuICAgICAgICB9LFxuICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICBib2R5TWFwcGVyOiBNYXBwZXJzLlN0b3JhZ2VFcnJvcixcbiAgICAgICAgICAgIGhlYWRlcnNNYXBwZXI6IE1hcHBlcnMuQ29udGFpbmVyR2V0UHJvcGVydGllc0V4Y2VwdGlvbkhlYWRlcnMsXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICBxdWVyeVBhcmFtZXRlcnM6IFtQYXJhbWV0ZXJzLnRpbWVvdXRJblNlY29uZHMsIFBhcmFtZXRlcnMucmVzdHlwZTJdLFxuICAgIHVybFBhcmFtZXRlcnM6IFtQYXJhbWV0ZXJzLnVybF0sXG4gICAgaGVhZGVyUGFyYW1ldGVyczogW1xuICAgICAgICBQYXJhbWV0ZXJzLnZlcnNpb24sXG4gICAgICAgIFBhcmFtZXRlcnMucmVxdWVzdElkLFxuICAgICAgICBQYXJhbWV0ZXJzLmFjY2VwdDEsXG4gICAgICAgIFBhcmFtZXRlcnMubGVhc2VJZCxcbiAgICBdLFxuICAgIGlzWE1MOiB0cnVlLFxuICAgIHNlcmlhbGl6ZXI6IHhtbFNlcmlhbGl6ZXIsXG59O1xuY29uc3QgZGVsZXRlT3BlcmF0aW9uU3BlYyA9IHtcbiAgICBwYXRoOiBcIi97Y29udGFpbmVyTmFtZX1cIixcbiAgICBodHRwTWV0aG9kOiBcIkRFTEVURVwiLFxuICAgIHJlc3BvbnNlczoge1xuICAgICAgICAyMDI6IHtcbiAgICAgICAgICAgIGhlYWRlcnNNYXBwZXI6IE1hcHBlcnMuQ29udGFpbmVyRGVsZXRlSGVhZGVycyxcbiAgICAgICAgfSxcbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgYm9keU1hcHBlcjogTWFwcGVycy5TdG9yYWdlRXJyb3IsXG4gICAgICAgICAgICBoZWFkZXJzTWFwcGVyOiBNYXBwZXJzLkNvbnRhaW5lckRlbGV0ZUV4Y2VwdGlvbkhlYWRlcnMsXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICBxdWVyeVBhcmFtZXRlcnM6IFtQYXJhbWV0ZXJzLnRpbWVvdXRJblNlY29uZHMsIFBhcmFtZXRlcnMucmVzdHlwZTJdLFxuICAgIHVybFBhcmFtZXRlcnM6IFtQYXJhbWV0ZXJzLnVybF0sXG4gICAgaGVhZGVyUGFyYW1ldGVyczogW1xuICAgICAgICBQYXJhbWV0ZXJzLnZlcnNpb24sXG4gICAgICAgIFBhcmFtZXRlcnMucmVxdWVzdElkLFxuICAgICAgICBQYXJhbWV0ZXJzLmFjY2VwdDEsXG4gICAgICAgIFBhcmFtZXRlcnMubGVhc2VJZCxcbiAgICAgICAgUGFyYW1ldGVycy5pZk1vZGlmaWVkU2luY2UsXG4gICAgICAgIFBhcmFtZXRlcnMuaWZVbm1vZGlmaWVkU2luY2UsXG4gICAgXSxcbiAgICBpc1hNTDogdHJ1ZSxcbiAgICBzZXJpYWxpemVyOiB4bWxTZXJpYWxpemVyLFxufTtcbmNvbnN0IHNldE1ldGFkYXRhT3BlcmF0aW9uU3BlYyA9IHtcbiAgICBwYXRoOiBcIi97Y29udGFpbmVyTmFtZX1cIixcbiAgICBodHRwTWV0aG9kOiBcIlBVVFwiLFxuICAgIHJlc3BvbnNlczoge1xuICAgICAgICAyMDA6IHtcbiAgICAgICAgICAgIGhlYWRlcnNNYXBwZXI6IE1hcHBlcnMuQ29udGFpbmVyU2V0TWV0YWRhdGFIZWFkZXJzLFxuICAgICAgICB9LFxuICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICBib2R5TWFwcGVyOiBNYXBwZXJzLlN0b3JhZ2VFcnJvcixcbiAgICAgICAgICAgIGhlYWRlcnNNYXBwZXI6IE1hcHBlcnMuQ29udGFpbmVyU2V0TWV0YWRhdGFFeGNlcHRpb25IZWFkZXJzLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgcXVlcnlQYXJhbWV0ZXJzOiBbXG4gICAgICAgIFBhcmFtZXRlcnMudGltZW91dEluU2Vjb25kcyxcbiAgICAgICAgUGFyYW1ldGVycy5yZXN0eXBlMixcbiAgICAgICAgUGFyYW1ldGVycy5jb21wNixcbiAgICBdLFxuICAgIHVybFBhcmFtZXRlcnM6IFtQYXJhbWV0ZXJzLnVybF0sXG4gICAgaGVhZGVyUGFyYW1ldGVyczogW1xuICAgICAgICBQYXJhbWV0ZXJzLnZlcnNpb24sXG4gICAgICAgIFBhcmFtZXRlcnMucmVxdWVzdElkLFxuICAgICAgICBQYXJhbWV0ZXJzLmFjY2VwdDEsXG4gICAgICAgIFBhcmFtZXRlcnMubWV0YWRhdGEsXG4gICAgICAgIFBhcmFtZXRlcnMubGVhc2VJZCxcbiAgICAgICAgUGFyYW1ldGVycy5pZk1vZGlmaWVkU2luY2UsXG4gICAgXSxcbiAgICBpc1hNTDogdHJ1ZSxcbiAgICBzZXJpYWxpemVyOiB4bWxTZXJpYWxpemVyLFxufTtcbmNvbnN0IGdldEFjY2Vzc1BvbGljeU9wZXJhdGlvblNwZWMgPSB7XG4gICAgcGF0aDogXCIve2NvbnRhaW5lck5hbWV9XCIsXG4gICAgaHR0cE1ldGhvZDogXCJHRVRcIixcbiAgICByZXNwb25zZXM6IHtcbiAgICAgICAgMjAwOiB7XG4gICAgICAgICAgICBib2R5TWFwcGVyOiB7XG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlNlcXVlbmNlXCIsXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHsgbmFtZTogXCJDb21wb3NpdGVcIiwgY2xhc3NOYW1lOiBcIlNpZ25lZElkZW50aWZpZXJcIiB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2VyaWFsaXplZE5hbWU6IFwiU2lnbmVkSWRlbnRpZmllcnNcIixcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiBcIlNpZ25lZElkZW50aWZpZXJzXCIsXG4gICAgICAgICAgICAgICAgeG1sSXNXcmFwcGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIHhtbEVsZW1lbnROYW1lOiBcIlNpZ25lZElkZW50aWZpZXJcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBoZWFkZXJzTWFwcGVyOiBNYXBwZXJzLkNvbnRhaW5lckdldEFjY2Vzc1BvbGljeUhlYWRlcnMsXG4gICAgICAgIH0sXG4gICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgIGJvZHlNYXBwZXI6IE1hcHBlcnMuU3RvcmFnZUVycm9yLFxuICAgICAgICAgICAgaGVhZGVyc01hcHBlcjogTWFwcGVycy5Db250YWluZXJHZXRBY2Nlc3NQb2xpY3lFeGNlcHRpb25IZWFkZXJzLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgcXVlcnlQYXJhbWV0ZXJzOiBbXG4gICAgICAgIFBhcmFtZXRlcnMudGltZW91dEluU2Vjb25kcyxcbiAgICAgICAgUGFyYW1ldGVycy5yZXN0eXBlMixcbiAgICAgICAgUGFyYW1ldGVycy5jb21wNyxcbiAgICBdLFxuICAgIHVybFBhcmFtZXRlcnM6IFtQYXJhbWV0ZXJzLnVybF0sXG4gICAgaGVhZGVyUGFyYW1ldGVyczogW1xuICAgICAgICBQYXJhbWV0ZXJzLnZlcnNpb24sXG4gICAgICAgIFBhcmFtZXRlcnMucmVxdWVzdElkLFxuICAgICAgICBQYXJhbWV0ZXJzLmFjY2VwdDEsXG4gICAgICAgIFBhcmFtZXRlcnMubGVhc2VJZCxcbiAgICBdLFxuICAgIGlzWE1MOiB0cnVlLFxuICAgIHNlcmlhbGl6ZXI6IHhtbFNlcmlhbGl6ZXIsXG59O1xuY29uc3Qgc2V0QWNjZXNzUG9saWN5T3BlcmF0aW9uU3BlYyA9IHtcbiAgICBwYXRoOiBcIi97Y29udGFpbmVyTmFtZX1cIixcbiAgICBodHRwTWV0aG9kOiBcIlBVVFwiLFxuICAgIHJlc3BvbnNlczoge1xuICAgICAgICAyMDA6IHtcbiAgICAgICAgICAgIGhlYWRlcnNNYXBwZXI6IE1hcHBlcnMuQ29udGFpbmVyU2V0QWNjZXNzUG9saWN5SGVhZGVycyxcbiAgICAgICAgfSxcbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgYm9keU1hcHBlcjogTWFwcGVycy5TdG9yYWdlRXJyb3IsXG4gICAgICAgICAgICBoZWFkZXJzTWFwcGVyOiBNYXBwZXJzLkNvbnRhaW5lclNldEFjY2Vzc1BvbGljeUV4Y2VwdGlvbkhlYWRlcnMsXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICByZXF1ZXN0Qm9keTogUGFyYW1ldGVycy5jb250YWluZXJBY2wsXG4gICAgcXVlcnlQYXJhbWV0ZXJzOiBbXG4gICAgICAgIFBhcmFtZXRlcnMudGltZW91dEluU2Vjb25kcyxcbiAgICAgICAgUGFyYW1ldGVycy5yZXN0eXBlMixcbiAgICAgICAgUGFyYW1ldGVycy5jb21wNyxcbiAgICBdLFxuICAgIHVybFBhcmFtZXRlcnM6IFtQYXJhbWV0ZXJzLnVybF0sXG4gICAgaGVhZGVyUGFyYW1ldGVyczogW1xuICAgICAgICBQYXJhbWV0ZXJzLmNvbnRlbnRUeXBlLFxuICAgICAgICBQYXJhbWV0ZXJzLmFjY2VwdCxcbiAgICAgICAgUGFyYW1ldGVycy52ZXJzaW9uLFxuICAgICAgICBQYXJhbWV0ZXJzLnJlcXVlc3RJZCxcbiAgICAgICAgUGFyYW1ldGVycy5hY2Nlc3MsXG4gICAgICAgIFBhcmFtZXRlcnMubGVhc2VJZCxcbiAgICAgICAgUGFyYW1ldGVycy5pZk1vZGlmaWVkU2luY2UsXG4gICAgICAgIFBhcmFtZXRlcnMuaWZVbm1vZGlmaWVkU2luY2UsXG4gICAgXSxcbiAgICBpc1hNTDogdHJ1ZSxcbiAgICBjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi94bWw7IGNoYXJzZXQ9dXRmLThcIixcbiAgICBtZWRpYVR5cGU6IFwieG1sXCIsXG4gICAgc2VyaWFsaXplcjogeG1sU2VyaWFsaXplcixcbn07XG5jb25zdCByZXN0b3JlT3BlcmF0aW9uU3BlYyA9IHtcbiAgICBwYXRoOiBcIi97Y29udGFpbmVyTmFtZX1cIixcbiAgICBodHRwTWV0aG9kOiBcIlBVVFwiLFxuICAgIHJlc3BvbnNlczoge1xuICAgICAgICAyMDE6IHtcbiAgICAgICAgICAgIGhlYWRlcnNNYXBwZXI6IE1hcHBlcnMuQ29udGFpbmVyUmVzdG9yZUhlYWRlcnMsXG4gICAgICAgIH0sXG4gICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgIGJvZHlNYXBwZXI6IE1hcHBlcnMuU3RvcmFnZUVycm9yLFxuICAgICAgICAgICAgaGVhZGVyc01hcHBlcjogTWFwcGVycy5Db250YWluZXJSZXN0b3JlRXhjZXB0aW9uSGVhZGVycyxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIHF1ZXJ5UGFyYW1ldGVyczogW1xuICAgICAgICBQYXJhbWV0ZXJzLnRpbWVvdXRJblNlY29uZHMsXG4gICAgICAgIFBhcmFtZXRlcnMucmVzdHlwZTIsXG4gICAgICAgIFBhcmFtZXRlcnMuY29tcDgsXG4gICAgXSxcbiAgICB1cmxQYXJhbWV0ZXJzOiBbUGFyYW1ldGVycy51cmxdLFxuICAgIGhlYWRlclBhcmFtZXRlcnM6IFtcbiAgICAgICAgUGFyYW1ldGVycy52ZXJzaW9uLFxuICAgICAgICBQYXJhbWV0ZXJzLnJlcXVlc3RJZCxcbiAgICAgICAgUGFyYW1ldGVycy5hY2NlcHQxLFxuICAgICAgICBQYXJhbWV0ZXJzLmRlbGV0ZWRDb250YWluZXJOYW1lLFxuICAgICAgICBQYXJhbWV0ZXJzLmRlbGV0ZWRDb250YWluZXJWZXJzaW9uLFxuICAgIF0sXG4gICAgaXNYTUw6IHRydWUsXG4gICAgc2VyaWFsaXplcjogeG1sU2VyaWFsaXplcixcbn07XG5jb25zdCByZW5hbWVPcGVyYXRpb25TcGVjID0ge1xuICAgIHBhdGg6IFwiL3tjb250YWluZXJOYW1lfVwiLFxuICAgIGh0dHBNZXRob2Q6IFwiUFVUXCIsXG4gICAgcmVzcG9uc2VzOiB7XG4gICAgICAgIDIwMDoge1xuICAgICAgICAgICAgaGVhZGVyc01hcHBlcjogTWFwcGVycy5Db250YWluZXJSZW5hbWVIZWFkZXJzLFxuICAgICAgICB9LFxuICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICBib2R5TWFwcGVyOiBNYXBwZXJzLlN0b3JhZ2VFcnJvcixcbiAgICAgICAgICAgIGhlYWRlcnNNYXBwZXI6IE1hcHBlcnMuQ29udGFpbmVyUmVuYW1lRXhjZXB0aW9uSGVhZGVycyxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIHF1ZXJ5UGFyYW1ldGVyczogW1xuICAgICAgICBQYXJhbWV0ZXJzLnRpbWVvdXRJblNlY29uZHMsXG4gICAgICAgIFBhcmFtZXRlcnMucmVzdHlwZTIsXG4gICAgICAgIFBhcmFtZXRlcnMuY29tcDksXG4gICAgXSxcbiAgICB1cmxQYXJhbWV0ZXJzOiBbUGFyYW1ldGVycy51cmxdLFxuICAgIGhlYWRlclBhcmFtZXRlcnM6IFtcbiAgICAgICAgUGFyYW1ldGVycy52ZXJzaW9uLFxuICAgICAgICBQYXJhbWV0ZXJzLnJlcXVlc3RJZCxcbiAgICAgICAgUGFyYW1ldGVycy5hY2NlcHQxLFxuICAgICAgICBQYXJhbWV0ZXJzLnNvdXJjZUNvbnRhaW5lck5hbWUsXG4gICAgICAgIFBhcmFtZXRlcnMuc291cmNlTGVhc2VJZCxcbiAgICBdLFxuICAgIGlzWE1MOiB0cnVlLFxuICAgIHNlcmlhbGl6ZXI6IHhtbFNlcmlhbGl6ZXIsXG59O1xuY29uc3Qgc3VibWl0QmF0Y2hPcGVyYXRpb25TcGVjID0ge1xuICAgIHBhdGg6IFwiL3tjb250YWluZXJOYW1lfVwiLFxuICAgIGh0dHBNZXRob2Q6IFwiUE9TVFwiLFxuICAgIHJlc3BvbnNlczoge1xuICAgICAgICAyMDI6IHtcbiAgICAgICAgICAgIGJvZHlNYXBwZXI6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiB7IG5hbWU6IFwiU3RyZWFtXCIgfSxcbiAgICAgICAgICAgICAgICBzZXJpYWxpemVkTmFtZTogXCJwYXJzZWRSZXNwb25zZVwiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGhlYWRlcnNNYXBwZXI6IE1hcHBlcnMuQ29udGFpbmVyU3VibWl0QmF0Y2hIZWFkZXJzLFxuICAgICAgICB9LFxuICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICBib2R5TWFwcGVyOiBNYXBwZXJzLlN0b3JhZ2VFcnJvcixcbiAgICAgICAgICAgIGhlYWRlcnNNYXBwZXI6IE1hcHBlcnMuQ29udGFpbmVyU3VibWl0QmF0Y2hFeGNlcHRpb25IZWFkZXJzLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgcmVxdWVzdEJvZHk6IFBhcmFtZXRlcnMuYm9keSxcbiAgICBxdWVyeVBhcmFtZXRlcnM6IFtcbiAgICAgICAgUGFyYW1ldGVycy50aW1lb3V0SW5TZWNvbmRzLFxuICAgICAgICBQYXJhbWV0ZXJzLmNvbXA0LFxuICAgICAgICBQYXJhbWV0ZXJzLnJlc3R5cGUyLFxuICAgIF0sXG4gICAgdXJsUGFyYW1ldGVyczogW1BhcmFtZXRlcnMudXJsXSxcbiAgICBoZWFkZXJQYXJhbWV0ZXJzOiBbXG4gICAgICAgIFBhcmFtZXRlcnMuYWNjZXB0LFxuICAgICAgICBQYXJhbWV0ZXJzLnZlcnNpb24sXG4gICAgICAgIFBhcmFtZXRlcnMucmVxdWVzdElkLFxuICAgICAgICBQYXJhbWV0ZXJzLmNvbnRlbnRMZW5ndGgsXG4gICAgICAgIFBhcmFtZXRlcnMubXVsdGlwYXJ0Q29udGVudFR5cGUsXG4gICAgXSxcbiAgICBpc1hNTDogdHJ1ZSxcbiAgICBjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi94bWw7IGNoYXJzZXQ9dXRmLThcIixcbiAgICBtZWRpYVR5cGU6IFwieG1sXCIsXG4gICAgc2VyaWFsaXplcjogeG1sU2VyaWFsaXplcixcbn07XG5jb25zdCBmaWx0ZXJCbG9ic09wZXJhdGlvblNwZWMgPSB7XG4gICAgcGF0aDogXCIve2NvbnRhaW5lck5hbWV9XCIsXG4gICAgaHR0cE1ldGhvZDogXCJHRVRcIixcbiAgICByZXNwb25zZXM6IHtcbiAgICAgICAgMjAwOiB7XG4gICAgICAgICAgICBib2R5TWFwcGVyOiBNYXBwZXJzLkZpbHRlckJsb2JTZWdtZW50LFxuICAgICAgICAgICAgaGVhZGVyc01hcHBlcjogTWFwcGVycy5Db250YWluZXJGaWx0ZXJCbG9ic0hlYWRlcnMsXG4gICAgICAgIH0sXG4gICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgIGJvZHlNYXBwZXI6IE1hcHBlcnMuU3RvcmFnZUVycm9yLFxuICAgICAgICAgICAgaGVhZGVyc01hcHBlcjogTWFwcGVycy5Db250YWluZXJGaWx0ZXJCbG9ic0V4Y2VwdGlvbkhlYWRlcnMsXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICBxdWVyeVBhcmFtZXRlcnM6IFtcbiAgICAgICAgUGFyYW1ldGVycy50aW1lb3V0SW5TZWNvbmRzLFxuICAgICAgICBQYXJhbWV0ZXJzLm1hcmtlcixcbiAgICAgICAgUGFyYW1ldGVycy5tYXhQYWdlU2l6ZSxcbiAgICAgICAgUGFyYW1ldGVycy5jb21wNSxcbiAgICAgICAgUGFyYW1ldGVycy53aGVyZSxcbiAgICAgICAgUGFyYW1ldGVycy5yZXN0eXBlMixcbiAgICBdLFxuICAgIHVybFBhcmFtZXRlcnM6IFtQYXJhbWV0ZXJzLnVybF0sXG4gICAgaGVhZGVyUGFyYW1ldGVyczogW1xuICAgICAgICBQYXJhbWV0ZXJzLnZlcnNpb24sXG4gICAgICAgIFBhcmFtZXRlcnMucmVxdWVzdElkLFxuICAgICAgICBQYXJhbWV0ZXJzLmFjY2VwdDEsXG4gICAgXSxcbiAgICBpc1hNTDogdHJ1ZSxcbiAgICBzZXJpYWxpemVyOiB4bWxTZXJpYWxpemVyLFxufTtcbmNvbnN0IGFjcXVpcmVMZWFzZU9wZXJhdGlvblNwZWMgPSB7XG4gICAgcGF0aDogXCIve2NvbnRhaW5lck5hbWV9XCIsXG4gICAgaHR0cE1ldGhvZDogXCJQVVRcIixcbiAgICByZXNwb25zZXM6IHtcbiAgICAgICAgMjAxOiB7XG4gICAgICAgICAgICBoZWFkZXJzTWFwcGVyOiBNYXBwZXJzLkNvbnRhaW5lckFjcXVpcmVMZWFzZUhlYWRlcnMsXG4gICAgICAgIH0sXG4gICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgIGJvZHlNYXBwZXI6IE1hcHBlcnMuU3RvcmFnZUVycm9yLFxuICAgICAgICAgICAgaGVhZGVyc01hcHBlcjogTWFwcGVycy5Db250YWluZXJBY3F1aXJlTGVhc2VFeGNlcHRpb25IZWFkZXJzLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgcXVlcnlQYXJhbWV0ZXJzOiBbXG4gICAgICAgIFBhcmFtZXRlcnMudGltZW91dEluU2Vjb25kcyxcbiAgICAgICAgUGFyYW1ldGVycy5yZXN0eXBlMixcbiAgICAgICAgUGFyYW1ldGVycy5jb21wMTAsXG4gICAgXSxcbiAgICB1cmxQYXJhbWV0ZXJzOiBbUGFyYW1ldGVycy51cmxdLFxuICAgIGhlYWRlclBhcmFtZXRlcnM6IFtcbiAgICAgICAgUGFyYW1ldGVycy52ZXJzaW9uLFxuICAgICAgICBQYXJhbWV0ZXJzLnJlcXVlc3RJZCxcbiAgICAgICAgUGFyYW1ldGVycy5hY2NlcHQxLFxuICAgICAgICBQYXJhbWV0ZXJzLmlmTW9kaWZpZWRTaW5jZSxcbiAgICAgICAgUGFyYW1ldGVycy5pZlVubW9kaWZpZWRTaW5jZSxcbiAgICAgICAgUGFyYW1ldGVycy5hY3Rpb24sXG4gICAgICAgIFBhcmFtZXRlcnMuZHVyYXRpb24sXG4gICAgICAgIFBhcmFtZXRlcnMucHJvcG9zZWRMZWFzZUlkLFxuICAgIF0sXG4gICAgaXNYTUw6IHRydWUsXG4gICAgc2VyaWFsaXplcjogeG1sU2VyaWFsaXplcixcbn07XG5jb25zdCByZWxlYXNlTGVhc2VPcGVyYXRpb25TcGVjID0ge1xuICAgIHBhdGg6IFwiL3tjb250YWluZXJOYW1lfVwiLFxuICAgIGh0dHBNZXRob2Q6IFwiUFVUXCIsXG4gICAgcmVzcG9uc2VzOiB7XG4gICAgICAgIDIwMDoge1xuICAgICAgICAgICAgaGVhZGVyc01hcHBlcjogTWFwcGVycy5Db250YWluZXJSZWxlYXNlTGVhc2VIZWFkZXJzLFxuICAgICAgICB9LFxuICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICBib2R5TWFwcGVyOiBNYXBwZXJzLlN0b3JhZ2VFcnJvcixcbiAgICAgICAgICAgIGhlYWRlcnNNYXBwZXI6IE1hcHBlcnMuQ29udGFpbmVyUmVsZWFzZUxlYXNlRXhjZXB0aW9uSGVhZGVycyxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIHF1ZXJ5UGFyYW1ldGVyczogW1xuICAgICAgICBQYXJhbWV0ZXJzLnRpbWVvdXRJblNlY29uZHMsXG4gICAgICAgIFBhcmFtZXRlcnMucmVzdHlwZTIsXG4gICAgICAgIFBhcmFtZXRlcnMuY29tcDEwLFxuICAgIF0sXG4gICAgdXJsUGFyYW1ldGVyczogW1BhcmFtZXRlcnMudXJsXSxcbiAgICBoZWFkZXJQYXJhbWV0ZXJzOiBbXG4gICAgICAgIFBhcmFtZXRlcnMudmVyc2lvbixcbiAgICAgICAgUGFyYW1ldGVycy5yZXF1ZXN0SWQsXG4gICAgICAgIFBhcmFtZXRlcnMuYWNjZXB0MSxcbiAgICAgICAgUGFyYW1ldGVycy5pZk1vZGlmaWVkU2luY2UsXG4gICAgICAgIFBhcmFtZXRlcnMuaWZVbm1vZGlmaWVkU2luY2UsXG4gICAgICAgIFBhcmFtZXRlcnMuYWN0aW9uMSxcbiAgICAgICAgUGFyYW1ldGVycy5sZWFzZUlkMSxcbiAgICBdLFxuICAgIGlzWE1MOiB0cnVlLFxuICAgIHNlcmlhbGl6ZXI6IHhtbFNlcmlhbGl6ZXIsXG59O1xuY29uc3QgcmVuZXdMZWFzZU9wZXJhdGlvblNwZWMgPSB7XG4gICAgcGF0aDogXCIve2NvbnRhaW5lck5hbWV9XCIsXG4gICAgaHR0cE1ldGhvZDogXCJQVVRcIixcbiAgICByZXNwb25zZXM6IHtcbiAgICAgICAgMjAwOiB7XG4gICAgICAgICAgICBoZWFkZXJzTWFwcGVyOiBNYXBwZXJzLkNvbnRhaW5lclJlbmV3TGVhc2VIZWFkZXJzLFxuICAgICAgICB9LFxuICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICBib2R5TWFwcGVyOiBNYXBwZXJzLlN0b3JhZ2VFcnJvcixcbiAgICAgICAgICAgIGhlYWRlcnNNYXBwZXI6IE1hcHBlcnMuQ29udGFpbmVyUmVuZXdMZWFzZUV4Y2VwdGlvbkhlYWRlcnMsXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICBxdWVyeVBhcmFtZXRlcnM6IFtcbiAgICAgICAgUGFyYW1ldGVycy50aW1lb3V0SW5TZWNvbmRzLFxuICAgICAgICBQYXJhbWV0ZXJzLnJlc3R5cGUyLFxuICAgICAgICBQYXJhbWV0ZXJzLmNvbXAxMCxcbiAgICBdLFxuICAgIHVybFBhcmFtZXRlcnM6IFtQYXJhbWV0ZXJzLnVybF0sXG4gICAgaGVhZGVyUGFyYW1ldGVyczogW1xuICAgICAgICBQYXJhbWV0ZXJzLnZlcnNpb24sXG4gICAgICAgIFBhcmFtZXRlcnMucmVxdWVzdElkLFxuICAgICAgICBQYXJhbWV0ZXJzLmFjY2VwdDEsXG4gICAgICAgIFBhcmFtZXRlcnMuaWZNb2RpZmllZFNpbmNlLFxuICAgICAgICBQYXJhbWV0ZXJzLmlmVW5tb2RpZmllZFNpbmNlLFxuICAgICAgICBQYXJhbWV0ZXJzLmxlYXNlSWQxLFxuICAgICAgICBQYXJhbWV0ZXJzLmFjdGlvbjIsXG4gICAgXSxcbiAgICBpc1hNTDogdHJ1ZSxcbiAgICBzZXJpYWxpemVyOiB4bWxTZXJpYWxpemVyLFxufTtcbmNvbnN0IGJyZWFrTGVhc2VPcGVyYXRpb25TcGVjID0ge1xuICAgIHBhdGg6IFwiL3tjb250YWluZXJOYW1lfVwiLFxuICAgIGh0dHBNZXRob2Q6IFwiUFVUXCIsXG4gICAgcmVzcG9uc2VzOiB7XG4gICAgICAgIDIwMjoge1xuICAgICAgICAgICAgaGVhZGVyc01hcHBlcjogTWFwcGVycy5Db250YWluZXJCcmVha0xlYXNlSGVhZGVycyxcbiAgICAgICAgfSxcbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgYm9keU1hcHBlcjogTWFwcGVycy5TdG9yYWdlRXJyb3IsXG4gICAgICAgICAgICBoZWFkZXJzTWFwcGVyOiBNYXBwZXJzLkNvbnRhaW5lckJyZWFrTGVhc2VFeGNlcHRpb25IZWFkZXJzLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgcXVlcnlQYXJhbWV0ZXJzOiBbXG4gICAgICAgIFBhcmFtZXRlcnMudGltZW91dEluU2Vjb25kcyxcbiAgICAgICAgUGFyYW1ldGVycy5yZXN0eXBlMixcbiAgICAgICAgUGFyYW1ldGVycy5jb21wMTAsXG4gICAgXSxcbiAgICB1cmxQYXJhbWV0ZXJzOiBbUGFyYW1ldGVycy51cmxdLFxuICAgIGhlYWRlclBhcmFtZXRlcnM6IFtcbiAgICAgICAgUGFyYW1ldGVycy52ZXJzaW9uLFxuICAgICAgICBQYXJhbWV0ZXJzLnJlcXVlc3RJZCxcbiAgICAgICAgUGFyYW1ldGVycy5hY2NlcHQxLFxuICAgICAgICBQYXJhbWV0ZXJzLmlmTW9kaWZpZWRTaW5jZSxcbiAgICAgICAgUGFyYW1ldGVycy5pZlVubW9kaWZpZWRTaW5jZSxcbiAgICAgICAgUGFyYW1ldGVycy5hY3Rpb24zLFxuICAgICAgICBQYXJhbWV0ZXJzLmJyZWFrUGVyaW9kLFxuICAgIF0sXG4gICAgaXNYTUw6IHRydWUsXG4gICAgc2VyaWFsaXplcjogeG1sU2VyaWFsaXplcixcbn07XG5jb25zdCBjaGFuZ2VMZWFzZU9wZXJhdGlvblNwZWMgPSB7XG4gICAgcGF0aDogXCIve2NvbnRhaW5lck5hbWV9XCIsXG4gICAgaHR0cE1ldGhvZDogXCJQVVRcIixcbiAgICByZXNwb25zZXM6IHtcbiAgICAgICAgMjAwOiB7XG4gICAgICAgICAgICBoZWFkZXJzTWFwcGVyOiBNYXBwZXJzLkNvbnRhaW5lckNoYW5nZUxlYXNlSGVhZGVycyxcbiAgICAgICAgfSxcbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgYm9keU1hcHBlcjogTWFwcGVycy5TdG9yYWdlRXJyb3IsXG4gICAgICAgICAgICBoZWFkZXJzTWFwcGVyOiBNYXBwZXJzLkNvbnRhaW5lckNoYW5nZUxlYXNlRXhjZXB0aW9uSGVhZGVycyxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIHF1ZXJ5UGFyYW1ldGVyczogW1xuICAgICAgICBQYXJhbWV0ZXJzLnRpbWVvdXRJblNlY29uZHMsXG4gICAgICAgIFBhcmFtZXRlcnMucmVzdHlwZTIsXG4gICAgICAgIFBhcmFtZXRlcnMuY29tcDEwLFxuICAgIF0sXG4gICAgdXJsUGFyYW1ldGVyczogW1BhcmFtZXRlcnMudXJsXSxcbiAgICBoZWFkZXJQYXJhbWV0ZXJzOiBbXG4gICAgICAgIFBhcmFtZXRlcnMudmVyc2lvbixcbiAgICAgICAgUGFyYW1ldGVycy5yZXF1ZXN0SWQsXG4gICAgICAgIFBhcmFtZXRlcnMuYWNjZXB0MSxcbiAgICAgICAgUGFyYW1ldGVycy5pZk1vZGlmaWVkU2luY2UsXG4gICAgICAgIFBhcmFtZXRlcnMuaWZVbm1vZGlmaWVkU2luY2UsXG4gICAgICAgIFBhcmFtZXRlcnMubGVhc2VJZDEsXG4gICAgICAgIFBhcmFtZXRlcnMuYWN0aW9uNCxcbiAgICAgICAgUGFyYW1ldGVycy5wcm9wb3NlZExlYXNlSWQxLFxuICAgIF0sXG4gICAgaXNYTUw6IHRydWUsXG4gICAgc2VyaWFsaXplcjogeG1sU2VyaWFsaXplcixcbn07XG5jb25zdCBsaXN0QmxvYkZsYXRTZWdtZW50T3BlcmF0aW9uU3BlYyA9IHtcbiAgICBwYXRoOiBcIi97Y29udGFpbmVyTmFtZX1cIixcbiAgICBodHRwTWV0aG9kOiBcIkdFVFwiLFxuICAgIHJlc3BvbnNlczoge1xuICAgICAgICAyMDA6IHtcbiAgICAgICAgICAgIGJvZHlNYXBwZXI6IE1hcHBlcnMuTGlzdEJsb2JzRmxhdFNlZ21lbnRSZXNwb25zZSxcbiAgICAgICAgICAgIGhlYWRlcnNNYXBwZXI6IE1hcHBlcnMuQ29udGFpbmVyTGlzdEJsb2JGbGF0U2VnbWVudEhlYWRlcnMsXG4gICAgICAgIH0sXG4gICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgIGJvZHlNYXBwZXI6IE1hcHBlcnMuU3RvcmFnZUVycm9yLFxuICAgICAgICAgICAgaGVhZGVyc01hcHBlcjogTWFwcGVycy5Db250YWluZXJMaXN0QmxvYkZsYXRTZWdtZW50RXhjZXB0aW9uSGVhZGVycyxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIHF1ZXJ5UGFyYW1ldGVyczogW1xuICAgICAgICBQYXJhbWV0ZXJzLnRpbWVvdXRJblNlY29uZHMsXG4gICAgICAgIFBhcmFtZXRlcnMuY29tcDIsXG4gICAgICAgIFBhcmFtZXRlcnMucHJlZml4LFxuICAgICAgICBQYXJhbWV0ZXJzLm1hcmtlcixcbiAgICAgICAgUGFyYW1ldGVycy5tYXhQYWdlU2l6ZSxcbiAgICAgICAgUGFyYW1ldGVycy5yZXN0eXBlMixcbiAgICAgICAgUGFyYW1ldGVycy5pbmNsdWRlMSxcbiAgICBdLFxuICAgIHVybFBhcmFtZXRlcnM6IFtQYXJhbWV0ZXJzLnVybF0sXG4gICAgaGVhZGVyUGFyYW1ldGVyczogW1xuICAgICAgICBQYXJhbWV0ZXJzLnZlcnNpb24sXG4gICAgICAgIFBhcmFtZXRlcnMucmVxdWVzdElkLFxuICAgICAgICBQYXJhbWV0ZXJzLmFjY2VwdDEsXG4gICAgXSxcbiAgICBpc1hNTDogdHJ1ZSxcbiAgICBzZXJpYWxpemVyOiB4bWxTZXJpYWxpemVyLFxufTtcbmNvbnN0IGxpc3RCbG9iSGllcmFyY2h5U2VnbWVudE9wZXJhdGlvblNwZWMgPSB7XG4gICAgcGF0aDogXCIve2NvbnRhaW5lck5hbWV9XCIsXG4gICAgaHR0cE1ldGhvZDogXCJHRVRcIixcbiAgICByZXNwb25zZXM6IHtcbiAgICAgICAgMjAwOiB7XG4gICAgICAgICAgICBib2R5TWFwcGVyOiBNYXBwZXJzLkxpc3RCbG9ic0hpZXJhcmNoeVNlZ21lbnRSZXNwb25zZSxcbiAgICAgICAgICAgIGhlYWRlcnNNYXBwZXI6IE1hcHBlcnMuQ29udGFpbmVyTGlzdEJsb2JIaWVyYXJjaHlTZWdtZW50SGVhZGVycyxcbiAgICAgICAgfSxcbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgYm9keU1hcHBlcjogTWFwcGVycy5TdG9yYWdlRXJyb3IsXG4gICAgICAgICAgICBoZWFkZXJzTWFwcGVyOiBNYXBwZXJzLkNvbnRhaW5lckxpc3RCbG9iSGllcmFyY2h5U2VnbWVudEV4Y2VwdGlvbkhlYWRlcnMsXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICBxdWVyeVBhcmFtZXRlcnM6IFtcbiAgICAgICAgUGFyYW1ldGVycy50aW1lb3V0SW5TZWNvbmRzLFxuICAgICAgICBQYXJhbWV0ZXJzLmNvbXAyLFxuICAgICAgICBQYXJhbWV0ZXJzLnByZWZpeCxcbiAgICAgICAgUGFyYW1ldGVycy5tYXJrZXIsXG4gICAgICAgIFBhcmFtZXRlcnMubWF4UGFnZVNpemUsXG4gICAgICAgIFBhcmFtZXRlcnMucmVzdHlwZTIsXG4gICAgICAgIFBhcmFtZXRlcnMuaW5jbHVkZTEsXG4gICAgICAgIFBhcmFtZXRlcnMuZGVsaW1pdGVyLFxuICAgIF0sXG4gICAgdXJsUGFyYW1ldGVyczogW1BhcmFtZXRlcnMudXJsXSxcbiAgICBoZWFkZXJQYXJhbWV0ZXJzOiBbXG4gICAgICAgIFBhcmFtZXRlcnMudmVyc2lvbixcbiAgICAgICAgUGFyYW1ldGVycy5yZXF1ZXN0SWQsXG4gICAgICAgIFBhcmFtZXRlcnMuYWNjZXB0MSxcbiAgICBdLFxuICAgIGlzWE1MOiB0cnVlLFxuICAgIHNlcmlhbGl6ZXI6IHhtbFNlcmlhbGl6ZXIsXG59O1xuY29uc3QgZ2V0QWNjb3VudEluZm9PcGVyYXRpb25TcGVjID0ge1xuICAgIHBhdGg6IFwiL3tjb250YWluZXJOYW1lfVwiLFxuICAgIGh0dHBNZXRob2Q6IFwiR0VUXCIsXG4gICAgcmVzcG9uc2VzOiB7XG4gICAgICAgIDIwMDoge1xuICAgICAgICAgICAgaGVhZGVyc01hcHBlcjogTWFwcGVycy5Db250YWluZXJHZXRBY2NvdW50SW5mb0hlYWRlcnMsXG4gICAgICAgIH0sXG4gICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgIGJvZHlNYXBwZXI6IE1hcHBlcnMuU3RvcmFnZUVycm9yLFxuICAgICAgICAgICAgaGVhZGVyc01hcHBlcjogTWFwcGVycy5Db250YWluZXJHZXRBY2NvdW50SW5mb0V4Y2VwdGlvbkhlYWRlcnMsXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICBxdWVyeVBhcmFtZXRlcnM6IFtcbiAgICAgICAgUGFyYW1ldGVycy5jb21wLFxuICAgICAgICBQYXJhbWV0ZXJzLnRpbWVvdXRJblNlY29uZHMsXG4gICAgICAgIFBhcmFtZXRlcnMucmVzdHlwZTEsXG4gICAgXSxcbiAgICB1cmxQYXJhbWV0ZXJzOiBbUGFyYW1ldGVycy51cmxdLFxuICAgIGhlYWRlclBhcmFtZXRlcnM6IFtcbiAgICAgICAgUGFyYW1ldGVycy52ZXJzaW9uLFxuICAgICAgICBQYXJhbWV0ZXJzLnJlcXVlc3RJZCxcbiAgICAgICAgUGFyYW1ldGVycy5hY2NlcHQxLFxuICAgIF0sXG4gICAgaXNYTUw6IHRydWUsXG4gICAgc2VyaWFsaXplcjogeG1sU2VyaWFsaXplcixcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb250YWluZXIuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/container.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/pageBlob.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/pageBlob.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PageBlobImpl: () => (/* binding */ PageBlobImpl)\n/* harmony export */ });\n/* harmony import */ var _azure_core_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-client */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/index.js\");\n/* harmony import */ var _models_mappers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/mappers */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/mappers.js\");\n/* harmony import */ var _models_parameters__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/parameters */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/parameters.js\");\n/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\n\n\n/** Class containing PageBlob operations. */\nclass PageBlobImpl {\n    /**\n     * Initialize a new instance of the class PageBlob class.\n     * @param client Reference to the service client\n     */\n    constructor(client) {\n        this.client = client;\n    }\n    /**\n     * The Create operation creates a new page blob.\n     * @param contentLength The length of the request.\n     * @param blobContentLength This header specifies the maximum size for the page blob, up to 1 TB. The\n     *                          page blob size must be aligned to a 512-byte boundary.\n     * @param options The options parameters.\n     */\n    create(contentLength, blobContentLength, options) {\n        return this.client.sendOperationRequest({ contentLength, blobContentLength, options }, createOperationSpec);\n    }\n    /**\n     * The Upload Pages operation writes a range of pages to a page blob\n     * @param contentLength The length of the request.\n     * @param body Initial data\n     * @param options The options parameters.\n     */\n    uploadPages(contentLength, body, options) {\n        return this.client.sendOperationRequest({ contentLength, body, options }, uploadPagesOperationSpec);\n    }\n    /**\n     * The Clear Pages operation clears a set of pages from a page blob\n     * @param contentLength The length of the request.\n     * @param options The options parameters.\n     */\n    clearPages(contentLength, options) {\n        return this.client.sendOperationRequest({ contentLength, options }, clearPagesOperationSpec);\n    }\n    /**\n     * The Upload Pages operation writes a range of pages to a page blob where the contents are read from a\n     * URL\n     * @param sourceUrl Specify a URL to the copy source.\n     * @param sourceRange Bytes of source data in the specified range. The length of this range should\n     *                    match the ContentLength header and x-ms-range/Range destination range header.\n     * @param contentLength The length of the request.\n     * @param range The range of bytes to which the source range would be written. The range should be 512\n     *              aligned and range-end is required.\n     * @param options The options parameters.\n     */\n    uploadPagesFromURL(sourceUrl, sourceRange, contentLength, range, options) {\n        return this.client.sendOperationRequest({ sourceUrl, sourceRange, contentLength, range, options }, uploadPagesFromURLOperationSpec);\n    }\n    /**\n     * The Get Page Ranges operation returns the list of valid page ranges for a page blob or snapshot of a\n     * page blob\n     * @param options The options parameters.\n     */\n    getPageRanges(options) {\n        return this.client.sendOperationRequest({ options }, getPageRangesOperationSpec);\n    }\n    /**\n     * The Get Page Ranges Diff operation returns the list of valid page ranges for a page blob that were\n     * changed between target blob and previous snapshot.\n     * @param options The options parameters.\n     */\n    getPageRangesDiff(options) {\n        return this.client.sendOperationRequest({ options }, getPageRangesDiffOperationSpec);\n    }\n    /**\n     * Resize the Blob\n     * @param blobContentLength This header specifies the maximum size for the page blob, up to 1 TB. The\n     *                          page blob size must be aligned to a 512-byte boundary.\n     * @param options The options parameters.\n     */\n    resize(blobContentLength, options) {\n        return this.client.sendOperationRequest({ blobContentLength, options }, resizeOperationSpec);\n    }\n    /**\n     * Update the sequence number of the blob\n     * @param sequenceNumberAction Required if the x-ms-blob-sequence-number header is set for the request.\n     *                             This property applies to page blobs only. This property indicates how the service should modify the\n     *                             blob's sequence number\n     * @param options The options parameters.\n     */\n    updateSequenceNumber(sequenceNumberAction, options) {\n        return this.client.sendOperationRequest({ sequenceNumberAction, options }, updateSequenceNumberOperationSpec);\n    }\n    /**\n     * The Copy Incremental operation copies a snapshot of the source page blob to a destination page blob.\n     * The snapshot is copied such that only the differential changes between the previously copied\n     * snapshot are transferred to the destination. The copied snapshots are complete copies of the\n     * original snapshot and can be read or copied from as usual. This API is supported since REST version\n     * 2016-05-31.\n     * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to\n     *                   2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would\n     *                   appear in a request URI. The source blob must either be public or must be authenticated via a shared\n     *                   access signature.\n     * @param options The options parameters.\n     */\n    copyIncremental(copySource, options) {\n        return this.client.sendOperationRequest({ copySource, options }, copyIncrementalOperationSpec);\n    }\n}\n// Operation Specifications\nconst xmlSerializer = _azure_core_client__WEBPACK_IMPORTED_MODULE_0__.createSerializer(_models_mappers__WEBPACK_IMPORTED_MODULE_1__, /* isXml */ true);\nconst createOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.PageBlobCreateHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.PageBlobCreateExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.contentLength,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.metadata,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKey,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKeySha256,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionAlgorithm,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobCacheControl,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentType,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentMD5,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentEncoding,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentLanguage,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentDisposition,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.immutabilityPolicyExpiry,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.immutabilityPolicyMode,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionScope,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.tier,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobTagsString,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.legalHold1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobType,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentLength,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobSequenceNumber,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst uploadPagesOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.PageBlobUploadPagesHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.PageBlobUploadPagesExceptionHeaders,\n        },\n    },\n    requestBody: _models_parameters__WEBPACK_IMPORTED_MODULE_2__.body1,\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp19],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.contentLength,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.range,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKey,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKeySha256,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionAlgorithm,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionScope,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.transactionalContentMD5,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.transactionalContentCrc64,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.contentType1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept2,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.pageWrite,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifSequenceNumberLessThanOrEqualTo,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifSequenceNumberLessThan,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifSequenceNumberEqualTo,\n    ],\n    isXML: true,\n    contentType: \"application/xml; charset=utf-8\",\n    mediaType: \"binary\",\n    serializer: xmlSerializer,\n};\nconst clearPagesOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.PageBlobClearPagesHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.PageBlobClearPagesExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp19],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.contentLength,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.range,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKey,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKeySha256,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionAlgorithm,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionScope,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifSequenceNumberLessThanOrEqualTo,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifSequenceNumberLessThan,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifSequenceNumberEqualTo,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.pageWrite1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst uploadPagesFromURLOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.PageBlobUploadPagesFromURLHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.PageBlobUploadPagesFromURLExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp19],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.contentLength,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKey,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKeySha256,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionAlgorithm,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionScope,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceContentMD5,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.copySourceAuthorization,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.pageWrite,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifSequenceNumberLessThanOrEqualTo,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifSequenceNumberLessThan,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifSequenceNumberEqualTo,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceUrl,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceRange,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceContentCrc64,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.range1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst getPageRangesOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.PageList,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.PageBlobGetPageRangesHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.PageBlobGetPageRangesExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.marker,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.maxPageSize,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.snapshot,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp20,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.range,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst getPageRangesDiffOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.PageList,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.PageBlobGetPageRangesDiffHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.PageBlobGetPageRangesDiffExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.marker,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.maxPageSize,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.snapshot,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp20,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.prevsnapshot,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.range,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.prevSnapshotUrl,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst resizeOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.PageBlobResizeHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.PageBlobResizeExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKey,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKeySha256,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionAlgorithm,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionScope,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentLength,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst updateSequenceNumberOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.PageBlobUpdateSequenceNumberHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.PageBlobUpdateSequenceNumberExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobSequenceNumber,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sequenceNumberAction,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst copyIncrementalOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        202: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.PageBlobCopyIncrementalHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.PageBlobCopyIncrementalExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp21],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.copySource,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\n//# sourceMappingURL=pageBlob.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/pageBlob.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/service.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/service.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ServiceImpl: () => (/* binding */ ServiceImpl)\n/* harmony export */ });\n/* harmony import */ var _azure_core_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-client */ \"(rsc)/./node_modules/@azure/core-client/dist/esm/index.js\");\n/* harmony import */ var _models_mappers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/mappers */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/mappers.js\");\n/* harmony import */ var _models_parameters__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/parameters */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/parameters.js\");\n/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\n\n\n/** Class containing Service operations. */\nclass ServiceImpl {\n    /**\n     * Initialize a new instance of the class Service class.\n     * @param client Reference to the service client\n     */\n    constructor(client) {\n        this.client = client;\n    }\n    /**\n     * Sets properties for a storage account's Blob service endpoint, including properties for Storage\n     * Analytics and CORS (Cross-Origin Resource Sharing) rules\n     * @param blobServiceProperties The StorageService properties.\n     * @param options The options parameters.\n     */\n    setProperties(blobServiceProperties, options) {\n        return this.client.sendOperationRequest({ blobServiceProperties, options }, setPropertiesOperationSpec);\n    }\n    /**\n     * gets the properties of a storage account's Blob service, including properties for Storage Analytics\n     * and CORS (Cross-Origin Resource Sharing) rules.\n     * @param options The options parameters.\n     */\n    getProperties(options) {\n        return this.client.sendOperationRequest({ options }, getPropertiesOperationSpec);\n    }\n    /**\n     * Retrieves statistics related to replication for the Blob service. It is only available on the\n     * secondary location endpoint when read-access geo-redundant replication is enabled for the storage\n     * account.\n     * @param options The options parameters.\n     */\n    getStatistics(options) {\n        return this.client.sendOperationRequest({ options }, getStatisticsOperationSpec);\n    }\n    /**\n     * The List Containers Segment operation returns a list of the containers under the specified account\n     * @param options The options parameters.\n     */\n    listContainersSegment(options) {\n        return this.client.sendOperationRequest({ options }, listContainersSegmentOperationSpec);\n    }\n    /**\n     * Retrieves a user delegation key for the Blob service. This is only a valid operation when using\n     * bearer token authentication.\n     * @param keyInfo Key information\n     * @param options The options parameters.\n     */\n    getUserDelegationKey(keyInfo, options) {\n        return this.client.sendOperationRequest({ keyInfo, options }, getUserDelegationKeyOperationSpec);\n    }\n    /**\n     * Returns the sku name and account kind\n     * @param options The options parameters.\n     */\n    getAccountInfo(options) {\n        return this.client.sendOperationRequest({ options }, getAccountInfoOperationSpec);\n    }\n    /**\n     * The Batch operation allows multiple API calls to be embedded into a single HTTP request.\n     * @param contentLength The length of the request.\n     * @param multipartContentType Required. The value of this header must be multipart/mixed with a batch\n     *                             boundary. Example header value: multipart/mixed; boundary=batch_<GUID>\n     * @param body Initial data\n     * @param options The options parameters.\n     */\n    submitBatch(contentLength, multipartContentType, body, options) {\n        return this.client.sendOperationRequest({ contentLength, multipartContentType, body, options }, submitBatchOperationSpec);\n    }\n    /**\n     * The Filter Blobs operation enables callers to list blobs across all containers whose tags match a\n     * given search expression.  Filter blobs searches across all containers within a storage account but\n     * can be scoped within the expression to a single container.\n     * @param options The options parameters.\n     */\n    filterBlobs(options) {\n        return this.client.sendOperationRequest({ options }, filterBlobsOperationSpec);\n    }\n}\n// Operation Specifications\nconst xmlSerializer = _azure_core_client__WEBPACK_IMPORTED_MODULE_0__.createSerializer(_models_mappers__WEBPACK_IMPORTED_MODULE_1__, /* isXml */ true);\nconst setPropertiesOperationSpec = {\n    path: \"/\",\n    httpMethod: \"PUT\",\n    responses: {\n        202: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ServiceSetPropertiesHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ServiceSetPropertiesExceptionHeaders,\n        },\n    },\n    requestBody: _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobServiceProperties,\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.restype,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.contentType,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n    ],\n    isXML: true,\n    contentType: \"application/xml; charset=utf-8\",\n    mediaType: \"xml\",\n    serializer: xmlSerializer,\n};\nconst getPropertiesOperationSpec = {\n    path: \"/\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobServiceProperties,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ServiceGetPropertiesHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ServiceGetPropertiesExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.restype,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst getStatisticsOperationSpec = {\n    path: \"/\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobServiceStatistics,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ServiceGetStatisticsHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ServiceGetStatisticsExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.restype,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp1,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst listContainersSegmentOperationSpec = {\n    path: \"/\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ListContainersSegmentResponse,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ServiceListContainersSegmentHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ServiceListContainersSegmentExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp2,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.prefix,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.marker,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.maxPageSize,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.include,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst getUserDelegationKeyOperationSpec = {\n    path: \"/\",\n    httpMethod: \"POST\",\n    responses: {\n        200: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.UserDelegationKey,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ServiceGetUserDelegationKeyHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ServiceGetUserDelegationKeyExceptionHeaders,\n        },\n    },\n    requestBody: _models_parameters__WEBPACK_IMPORTED_MODULE_2__.keyInfo,\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.restype,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp3,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.contentType,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n    ],\n    isXML: true,\n    contentType: \"application/xml; charset=utf-8\",\n    mediaType: \"xml\",\n    serializer: xmlSerializer,\n};\nconst getAccountInfoOperationSpec = {\n    path: \"/\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ServiceGetAccountInfoHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ServiceGetAccountInfoExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.restype1,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst submitBatchOperationSpec = {\n    path: \"/\",\n    httpMethod: \"POST\",\n    responses: {\n        202: {\n            bodyMapper: {\n                type: { name: \"Stream\" },\n                serializedName: \"parsedResponse\",\n            },\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ServiceSubmitBatchHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ServiceSubmitBatchExceptionHeaders,\n        },\n    },\n    requestBody: _models_parameters__WEBPACK_IMPORTED_MODULE_2__.body,\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp4],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.contentLength,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.multipartContentType,\n    ],\n    isXML: true,\n    contentType: \"application/xml; charset=utf-8\",\n    mediaType: \"xml\",\n    serializer: xmlSerializer,\n};\nconst filterBlobsOperationSpec = {\n    path: \"/\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.FilterBlobSegment,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ServiceFilterBlobsHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ServiceFilterBlobsExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.marker,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.maxPageSize,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp5,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.where,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\n//# sourceMappingURL=service.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/service.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/storageClient.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/storageClient.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StorageClient: () => (/* binding */ StorageClient)\n/* harmony export */ });\n/* harmony import */ var _azure_core_http_compat__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-http-compat */ \"(rsc)/./node_modules/@azure/core-http-compat/dist/esm/index.js\");\n/* harmony import */ var _operations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./operations */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/service.js\");\n/* harmony import */ var _operations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./operations */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/container.js\");\n/* harmony import */ var _operations__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operations */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/blob.js\");\n/* harmony import */ var _operations__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operations */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/pageBlob.js\");\n/* harmony import */ var _operations__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./operations */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/appendBlob.js\");\n/* harmony import */ var _operations__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./operations */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/blockBlob.js\");\n/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\n\nclass StorageClient extends _azure_core_http_compat__WEBPACK_IMPORTED_MODULE_0__.ExtendedServiceClient {\n    /**\n     * Initializes a new instance of the StorageClient class.\n     * @param url The URL of the service account, container, or blob that is the target of the desired\n     *            operation.\n     * @param options The parameter options\n     */\n    constructor(url, options) {\n        var _a, _b;\n        if (url === undefined) {\n            throw new Error(\"'url' cannot be null\");\n        }\n        // Initializing default values for options\n        if (!options) {\n            options = {};\n        }\n        const defaults = {\n            requestContentType: \"application/json; charset=utf-8\",\n        };\n        const packageDetails = `azsdk-js-azure-storage-blob/12.26.0`;\n        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`\n            : `${packageDetails}`;\n        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {\n                userAgentPrefix,\n            }, endpoint: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : \"{url}\" });\n        super(optionsWithDefaults);\n        // Parameter assignments\n        this.url = url;\n        // Assigning values to Constant parameters\n        this.version = options.version || \"2025-01-05\";\n        this.service = new _operations__WEBPACK_IMPORTED_MODULE_1__.ServiceImpl(this);\n        this.container = new _operations__WEBPACK_IMPORTED_MODULE_2__.ContainerImpl(this);\n        this.blob = new _operations__WEBPACK_IMPORTED_MODULE_3__.BlobImpl(this);\n        this.pageBlob = new _operations__WEBPACK_IMPORTED_MODULE_4__.PageBlobImpl(this);\n        this.appendBlob = new _operations__WEBPACK_IMPORTED_MODULE_5__.AppendBlobImpl(this);\n        this.blockBlob = new _operations__WEBPACK_IMPORTED_MODULE_6__.BlockBlobImpl(this);\n    }\n}\n//# sourceMappingURL=storageClient.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL2dlbmVyYXRlZC9zcmMvc3RvcmFnZUNsaWVudC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQzBEO0FBQ3dEO0FBQzNHLDRCQUE0QiwwRUFBb0M7QUFDdkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtREFBbUQ7QUFDbkQ7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLDBDQUEwQyxFQUFFLGVBQWU7QUFDNUUsaUJBQWlCLGVBQWU7QUFDaEMsZ0ZBQWdGLHlCQUF5QjtBQUN6RztBQUNBLGFBQWEsK0hBQStILElBQUksR0FBRztBQUNuSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLG9EQUFXO0FBQ3RDLDZCQUE2QixzREFBYTtBQUMxQyx3QkFBd0IsaURBQVE7QUFDaEMsNEJBQTRCLHFEQUFZO0FBQ3hDLDhCQUE4Qix1REFBYztBQUM1Qyw2QkFBNkIsc0RBQWE7QUFDMUM7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvdmljdG9yd2lsc29uL0Rlc2t0b3AvcHJvamVjdHMvRVpWaXovbm9kZV9tb2R1bGVzL0BhenVyZS9zdG9yYWdlLWJsb2IvZGlzdC1lc20vc3RvcmFnZS1ibG9iL3NyYy9nZW5lcmF0ZWQvc3JjL3N0b3JhZ2VDbGllbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuICpcbiAqIENvZGUgZ2VuZXJhdGVkIGJ5IE1pY3Jvc29mdCAoUikgQXV0b1Jlc3QgQ29kZSBHZW5lcmF0b3IuXG4gKiBDaGFuZ2VzIG1heSBjYXVzZSBpbmNvcnJlY3QgYmVoYXZpb3IgYW5kIHdpbGwgYmUgbG9zdCBpZiB0aGUgY29kZSBpcyByZWdlbmVyYXRlZC5cbiAqL1xuaW1wb3J0ICogYXMgY29yZUh0dHBDb21wYXQgZnJvbSBcIkBhenVyZS9jb3JlLWh0dHAtY29tcGF0XCI7XG5pbXBvcnQgeyBTZXJ2aWNlSW1wbCwgQ29udGFpbmVySW1wbCwgQmxvYkltcGwsIFBhZ2VCbG9iSW1wbCwgQXBwZW5kQmxvYkltcGwsIEJsb2NrQmxvYkltcGwsIH0gZnJvbSBcIi4vb3BlcmF0aW9uc1wiO1xuZXhwb3J0IGNsYXNzIFN0b3JhZ2VDbGllbnQgZXh0ZW5kcyBjb3JlSHR0cENvbXBhdC5FeHRlbmRlZFNlcnZpY2VDbGllbnQge1xuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIGEgbmV3IGluc3RhbmNlIG9mIHRoZSBTdG9yYWdlQ2xpZW50IGNsYXNzLlxuICAgICAqIEBwYXJhbSB1cmwgVGhlIFVSTCBvZiB0aGUgc2VydmljZSBhY2NvdW50LCBjb250YWluZXIsIG9yIGJsb2IgdGhhdCBpcyB0aGUgdGFyZ2V0IG9mIHRoZSBkZXNpcmVkXG4gICAgICogICAgICAgICAgICBvcGVyYXRpb24uXG4gICAgICogQHBhcmFtIG9wdGlvbnMgVGhlIHBhcmFtZXRlciBvcHRpb25zXG4gICAgICovXG4gICAgY29uc3RydWN0b3IodXJsLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIGlmICh1cmwgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiJ3VybCcgY2Fubm90IGJlIG51bGxcIik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSW5pdGlhbGl6aW5nIGRlZmF1bHQgdmFsdWVzIGZvciBvcHRpb25zXG4gICAgICAgIGlmICghb3B0aW9ucykge1xuICAgICAgICAgICAgb3B0aW9ucyA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRlZmF1bHRzID0ge1xuICAgICAgICAgICAgcmVxdWVzdENvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9dXRmLThcIixcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgcGFja2FnZURldGFpbHMgPSBgYXpzZGstanMtYXp1cmUtc3RvcmFnZS1ibG9iLzEyLjI2LjBgO1xuICAgICAgICBjb25zdCB1c2VyQWdlbnRQcmVmaXggPSBvcHRpb25zLnVzZXJBZ2VudE9wdGlvbnMgJiYgb3B0aW9ucy51c2VyQWdlbnRPcHRpb25zLnVzZXJBZ2VudFByZWZpeFxuICAgICAgICAgICAgPyBgJHtvcHRpb25zLnVzZXJBZ2VudE9wdGlvbnMudXNlckFnZW50UHJlZml4fSAke3BhY2thZ2VEZXRhaWxzfWBcbiAgICAgICAgICAgIDogYCR7cGFja2FnZURldGFpbHN9YDtcbiAgICAgICAgY29uc3Qgb3B0aW9uc1dpdGhEZWZhdWx0cyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0cyksIG9wdGlvbnMpLCB7IHVzZXJBZ2VudE9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICB1c2VyQWdlbnRQcmVmaXgsXG4gICAgICAgICAgICB9LCBlbmRwb2ludDogKF9iID0gKF9hID0gb3B0aW9ucy5lbmRwb2ludCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogb3B0aW9ucy5iYXNlVXJpKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBcInt1cmx9XCIgfSk7XG4gICAgICAgIHN1cGVyKG9wdGlvbnNXaXRoRGVmYXVsdHMpO1xuICAgICAgICAvLyBQYXJhbWV0ZXIgYXNzaWdubWVudHNcbiAgICAgICAgdGhpcy51cmwgPSB1cmw7XG4gICAgICAgIC8vIEFzc2lnbmluZyB2YWx1ZXMgdG8gQ29uc3RhbnQgcGFyYW1ldGVyc1xuICAgICAgICB0aGlzLnZlcnNpb24gPSBvcHRpb25zLnZlcnNpb24gfHwgXCIyMDI1LTAxLTA1XCI7XG4gICAgICAgIHRoaXMuc2VydmljZSA9IG5ldyBTZXJ2aWNlSW1wbCh0aGlzKTtcbiAgICAgICAgdGhpcy5jb250YWluZXIgPSBuZXcgQ29udGFpbmVySW1wbCh0aGlzKTtcbiAgICAgICAgdGhpcy5ibG9iID0gbmV3IEJsb2JJbXBsKHRoaXMpO1xuICAgICAgICB0aGlzLnBhZ2VCbG9iID0gbmV3IFBhZ2VCbG9iSW1wbCh0aGlzKTtcbiAgICAgICAgdGhpcy5hcHBlbmRCbG9iID0gbmV3IEFwcGVuZEJsb2JJbXBsKHRoaXMpO1xuICAgICAgICB0aGlzLmJsb2NrQmxvYiA9IG5ldyBCbG9ja0Jsb2JJbXBsKHRoaXMpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0b3JhZ2VDbGllbnQuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/storageClient.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generatedModels.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generatedModels.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   KnownEncryptionAlgorithmType: () => (/* binding */ KnownEncryptionAlgorithmType)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/** Known values of {@link EncryptionAlgorithmType} that the service accepts. */\nvar KnownEncryptionAlgorithmType;\n(function (KnownEncryptionAlgorithmType) {\n    KnownEncryptionAlgorithmType[\"AES256\"] = \"AES256\";\n})(KnownEncryptionAlgorithmType || (KnownEncryptionAlgorithmType = {}));\n//# sourceMappingURL=generatedModels.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL2dlbmVyYXRlZE1vZGVscy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBLHFCQUFxQiwrQkFBK0I7QUFDN0M7QUFDUDtBQUNBO0FBQ0EsQ0FBQyxvRUFBb0U7QUFDckUiLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWN0b3J3aWxzb24vRGVza3RvcC9wcm9qZWN0cy9FWlZpei9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL2dlbmVyYXRlZE1vZGVscy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbi8qKiBLbm93biB2YWx1ZXMgb2Yge0BsaW5rIEVuY3J5cHRpb25BbGdvcml0aG1UeXBlfSB0aGF0IHRoZSBzZXJ2aWNlIGFjY2VwdHMuICovXG5leHBvcnQgdmFyIEtub3duRW5jcnlwdGlvbkFsZ29yaXRobVR5cGU7XG4oZnVuY3Rpb24gKEtub3duRW5jcnlwdGlvbkFsZ29yaXRobVR5cGUpIHtcbiAgICBLbm93bkVuY3J5cHRpb25BbGdvcml0aG1UeXBlW1wiQUVTMjU2XCJdID0gXCJBRVMyNTZcIjtcbn0pKEtub3duRW5jcnlwdGlvbkFsZ29yaXRobVR5cGUgfHwgKEtub3duRW5jcnlwdGlvbkFsZ29yaXRobVR5cGUgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2VuZXJhdGVkTW9kZWxzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generatedModels.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/index.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/index.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AccountSASPermissions: () => (/* reexport safe */ _sas_AccountSASPermissions__WEBPACK_IMPORTED_MODULE_5__.AccountSASPermissions),\n/* harmony export */   AccountSASResourceTypes: () => (/* reexport safe */ _sas_AccountSASResourceTypes__WEBPACK_IMPORTED_MODULE_6__.AccountSASResourceTypes),\n/* harmony export */   AccountSASServices: () => (/* reexport safe */ _sas_AccountSASServices__WEBPACK_IMPORTED_MODULE_7__.AccountSASServices),\n/* harmony export */   AnonymousCredential: () => (/* reexport safe */ _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_15__.AnonymousCredential),\n/* harmony export */   AnonymousCredentialPolicy: () => (/* reexport safe */ _policies_AnonymousCredentialPolicy__WEBPACK_IMPORTED_MODULE_22__.AnonymousCredentialPolicy),\n/* harmony export */   AppendBlobClient: () => (/* reexport safe */ _Clients__WEBPACK_IMPORTED_MODULE_2__.AppendBlobClient),\n/* harmony export */   BaseRequestPolicy: () => (/* reexport safe */ _policies_RequestPolicy__WEBPACK_IMPORTED_MODULE_21__.BaseRequestPolicy),\n/* harmony export */   BlobBatch: () => (/* reexport safe */ _BlobBatch__WEBPACK_IMPORTED_MODULE_9__.BlobBatch),\n/* harmony export */   BlobBatchClient: () => (/* reexport safe */ _BlobBatchClient__WEBPACK_IMPORTED_MODULE_10__.BlobBatchClient),\n/* harmony export */   BlobClient: () => (/* reexport safe */ _Clients__WEBPACK_IMPORTED_MODULE_2__.BlobClient),\n/* harmony export */   BlobLeaseClient: () => (/* reexport safe */ _BlobLeaseClient__WEBPACK_IMPORTED_MODULE_4__.BlobLeaseClient),\n/* harmony export */   BlobSASPermissions: () => (/* reexport safe */ _sas_BlobSASPermissions__WEBPACK_IMPORTED_MODULE_11__.BlobSASPermissions),\n/* harmony export */   BlobServiceClient: () => (/* reexport safe */ _BlobServiceClient__WEBPACK_IMPORTED_MODULE_1__.BlobServiceClient),\n/* harmony export */   BlockBlobClient: () => (/* reexport safe */ _Clients__WEBPACK_IMPORTED_MODULE_2__.BlockBlobClient),\n/* harmony export */   BlockBlobTier: () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_18__.BlockBlobTier),\n/* harmony export */   ContainerClient: () => (/* reexport safe */ _ContainerClient__WEBPACK_IMPORTED_MODULE_3__.ContainerClient),\n/* harmony export */   ContainerSASPermissions: () => (/* reexport safe */ _sas_ContainerSASPermissions__WEBPACK_IMPORTED_MODULE_14__.ContainerSASPermissions),\n/* harmony export */   Credential: () => (/* reexport safe */ _credentials_Credential__WEBPACK_IMPORTED_MODULE_16__.Credential),\n/* harmony export */   CredentialPolicy: () => (/* reexport safe */ _policies_CredentialPolicy__WEBPACK_IMPORTED_MODULE_23__.CredentialPolicy),\n/* harmony export */   KnownEncryptionAlgorithmType: () => (/* reexport safe */ _generatedModels__WEBPACK_IMPORTED_MODULE_27__.KnownEncryptionAlgorithmType),\n/* harmony export */   PageBlobClient: () => (/* reexport safe */ _Clients__WEBPACK_IMPORTED_MODULE_2__.PageBlobClient),\n/* harmony export */   Pipeline: () => (/* reexport safe */ _Pipeline__WEBPACK_IMPORTED_MODULE_19__.Pipeline),\n/* harmony export */   PremiumPageBlobTier: () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_18__.PremiumPageBlobTier),\n/* harmony export */   RestError: () => (/* reexport safe */ _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__.RestError),\n/* harmony export */   SASProtocol: () => (/* reexport safe */ _sas_SASQueryParameters__WEBPACK_IMPORTED_MODULE_26__.SASProtocol),\n/* harmony export */   SASQueryParameters: () => (/* reexport safe */ _sas_SASQueryParameters__WEBPACK_IMPORTED_MODULE_26__.SASQueryParameters),\n/* harmony export */   StorageBlobAudience: () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_18__.StorageBlobAudience),\n/* harmony export */   StorageBrowserPolicy: () => (/* reexport safe */ _StorageBrowserPolicyFactory__WEBPACK_IMPORTED_MODULE_13__.StorageBrowserPolicy),\n/* harmony export */   StorageBrowserPolicyFactory: () => (/* reexport safe */ _StorageBrowserPolicyFactory__WEBPACK_IMPORTED_MODULE_13__.StorageBrowserPolicyFactory),\n/* harmony export */   StorageOAuthScopes: () => (/* reexport safe */ _Pipeline__WEBPACK_IMPORTED_MODULE_20__.StorageOAuthScopes),\n/* harmony export */   StorageRetryPolicy: () => (/* reexport safe */ _StorageRetryPolicyFactory__WEBPACK_IMPORTED_MODULE_24__.StorageRetryPolicy),\n/* harmony export */   StorageRetryPolicyFactory: () => (/* reexport safe */ _StorageRetryPolicyFactory__WEBPACK_IMPORTED_MODULE_24__.StorageRetryPolicyFactory),\n/* harmony export */   StorageRetryPolicyType: () => (/* reexport safe */ _StorageRetryPolicyFactory__WEBPACK_IMPORTED_MODULE_24__.StorageRetryPolicyType),\n/* harmony export */   StorageSharedKeyCredential: () => (/* reexport safe */ _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_17__.StorageSharedKeyCredential),\n/* harmony export */   StorageSharedKeyCredentialPolicy: () => (/* reexport safe */ _policies_StorageSharedKeyCredentialPolicy__WEBPACK_IMPORTED_MODULE_25__.StorageSharedKeyCredentialPolicy),\n/* harmony export */   generateAccountSASQueryParameters: () => (/* reexport safe */ _sas_AccountSASSignatureValues__WEBPACK_IMPORTED_MODULE_8__.generateAccountSASQueryParameters),\n/* harmony export */   generateBlobSASQueryParameters: () => (/* reexport safe */ _sas_BlobSASSignatureValues__WEBPACK_IMPORTED_MODULE_12__.generateBlobSASQueryParameters),\n/* harmony export */   getBlobServiceAccountAudience: () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_18__.getBlobServiceAccountAudience),\n/* harmony export */   isPipelineLike: () => (/* reexport safe */ _Pipeline__WEBPACK_IMPORTED_MODULE_19__.isPipelineLike),\n/* harmony export */   logger: () => (/* reexport safe */ _log__WEBPACK_IMPORTED_MODULE_28__.logger),\n/* harmony export */   newPipeline: () => (/* reexport safe */ _Pipeline__WEBPACK_IMPORTED_MODULE_19__.newPipeline)\n/* harmony export */ });\n/* harmony import */ var _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-rest-pipeline */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/index.js\");\n/* harmony import */ var _BlobServiceClient__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./BlobServiceClient */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobServiceClient.js\");\n/* harmony import */ var _Clients__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Clients */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Clients.js\");\n/* harmony import */ var _ContainerClient__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ContainerClient */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/ContainerClient.js\");\n/* harmony import */ var _BlobLeaseClient__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./BlobLeaseClient */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobLeaseClient.js\");\n/* harmony import */ var _sas_AccountSASPermissions__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./sas/AccountSASPermissions */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASPermissions.js\");\n/* harmony import */ var _sas_AccountSASResourceTypes__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./sas/AccountSASResourceTypes */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASResourceTypes.js\");\n/* harmony import */ var _sas_AccountSASServices__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./sas/AccountSASServices */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASServices.js\");\n/* harmony import */ var _sas_AccountSASSignatureValues__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./sas/AccountSASSignatureValues */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASSignatureValues.js\");\n/* harmony import */ var _BlobBatch__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./BlobBatch */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobBatch.js\");\n/* harmony import */ var _BlobBatchClient__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./BlobBatchClient */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobBatchClient.js\");\n/* harmony import */ var _sas_BlobSASPermissions__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./sas/BlobSASPermissions */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/BlobSASPermissions.js\");\n/* harmony import */ var _sas_BlobSASSignatureValues__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./sas/BlobSASSignatureValues */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/BlobSASSignatureValues.js\");\n/* harmony import */ var _StorageBrowserPolicyFactory__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./StorageBrowserPolicyFactory */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageBrowserPolicyFactory.js\");\n/* harmony import */ var _sas_ContainerSASPermissions__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./sas/ContainerSASPermissions */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/ContainerSASPermissions.js\");\n/* harmony import */ var _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./credentials/AnonymousCredential */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/AnonymousCredential.js\");\n/* harmony import */ var _credentials_Credential__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./credentials/Credential */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/Credential.js\");\n/* harmony import */ var _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./credentials/StorageSharedKeyCredential */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/StorageSharedKeyCredential.js\");\n/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./models */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/models.js\");\n/* harmony import */ var _Pipeline__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./Pipeline */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Pipeline.js\");\n/* harmony import */ var _Pipeline__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./Pipeline */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js\");\n/* harmony import */ var _policies_RequestPolicy__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./policies/RequestPolicy */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/RequestPolicy.js\");\n/* harmony import */ var _policies_AnonymousCredentialPolicy__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./policies/AnonymousCredentialPolicy */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/AnonymousCredentialPolicy.js\");\n/* harmony import */ var _policies_CredentialPolicy__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./policies/CredentialPolicy */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/CredentialPolicy.js\");\n/* harmony import */ var _StorageRetryPolicyFactory__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./StorageRetryPolicyFactory */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageRetryPolicyFactory.js\");\n/* harmony import */ var _policies_StorageSharedKeyCredentialPolicy__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./policies/StorageSharedKeyCredentialPolicy */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageSharedKeyCredentialPolicy.js\");\n/* harmony import */ var _sas_SASQueryParameters__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./sas/SASQueryParameters */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/SASQueryParameters.js\");\n/* harmony import */ var _generatedModels__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./generatedModels */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generatedModels.js\");\n/* harmony import */ var _log__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./log */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/log.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ3NEO0FBQ2xCO0FBQ1Y7QUFDUTtBQUNBO0FBQ1U7QUFDRTtBQUNMO0FBQzRDO0FBQ3pEO0FBQ007QUFDRjtBQUNTO0FBQ3NDO0FBQ2pDO0FBQ0E7QUFDSTtBQUNUO0FBQ2dCO0FBQzBEO0FBQzNCO0FBQzNCO0FBQ1I7QUFDVDtBQUNBO0FBQ2dCO0FBQ25CO0FBQ1A7QUFDYjtBQUNVO0FBQy9CIiwic291cmNlcyI6WyIvVXNlcnMvdmljdG9yd2lsc29uL0Rlc2t0b3AvcHJvamVjdHMvRVpWaXovbm9kZV9tb2R1bGVzL0BhenVyZS9zdG9yYWdlLWJsb2IvZGlzdC1lc20vc3RvcmFnZS1ibG9iL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbmltcG9ydCB7IFJlc3RFcnJvciB9IGZyb20gXCJAYXp1cmUvY29yZS1yZXN0LXBpcGVsaW5lXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9CbG9iU2VydmljZUNsaWVudFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vQ2xpZW50c1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vQ29udGFpbmVyQ2xpZW50XCI7XG5leHBvcnQgKiBmcm9tIFwiLi9CbG9iTGVhc2VDbGllbnRcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3Nhcy9BY2NvdW50U0FTUGVybWlzc2lvbnNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3Nhcy9BY2NvdW50U0FTUmVzb3VyY2VUeXBlc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vc2FzL0FjY291bnRTQVNTZXJ2aWNlc1wiO1xuZXhwb3J0IHsgZ2VuZXJhdGVBY2NvdW50U0FTUXVlcnlQYXJhbWV0ZXJzLCB9IGZyb20gXCIuL3Nhcy9BY2NvdW50U0FTU2lnbmF0dXJlVmFsdWVzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9CbG9iQmF0Y2hcIjtcbmV4cG9ydCAqIGZyb20gXCIuL0Jsb2JCYXRjaENsaWVudFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vQmF0Y2hSZXNwb25zZVwiO1xuZXhwb3J0ICogZnJvbSBcIi4vc2FzL0Jsb2JTQVNQZXJtaXNzaW9uc1wiO1xuZXhwb3J0IHsgZ2VuZXJhdGVCbG9iU0FTUXVlcnlQYXJhbWV0ZXJzLCB9IGZyb20gXCIuL3Nhcy9CbG9iU0FTU2lnbmF0dXJlVmFsdWVzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9TdG9yYWdlQnJvd3NlclBvbGljeUZhY3RvcnlcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3Nhcy9Db250YWluZXJTQVNQZXJtaXNzaW9uc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vY3JlZGVudGlhbHMvQW5vbnltb3VzQ3JlZGVudGlhbFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vY3JlZGVudGlhbHMvQ3JlZGVudGlhbFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vY3JlZGVudGlhbHMvU3RvcmFnZVNoYXJlZEtleUNyZWRlbnRpYWxcIjtcbmV4cG9ydCB7IEJsb2NrQmxvYlRpZXIsIFByZW1pdW1QYWdlQmxvYlRpZXIsIFN0b3JhZ2VCbG9iQXVkaWVuY2UsIGdldEJsb2JTZXJ2aWNlQWNjb3VudEF1ZGllbmNlLCB9IGZyb20gXCIuL21vZGVsc1wiO1xuZXhwb3J0IHsgUGlwZWxpbmUsIGlzUGlwZWxpbmVMaWtlLCBuZXdQaXBlbGluZSwgU3RvcmFnZU9BdXRoU2NvcGVzLCB9IGZyb20gXCIuL1BpcGVsaW5lXCI7XG5leHBvcnQgeyBCYXNlUmVxdWVzdFBvbGljeSB9IGZyb20gXCIuL3BvbGljaWVzL1JlcXVlc3RQb2xpY3lcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3BvbGljaWVzL0Fub255bW91c0NyZWRlbnRpYWxQb2xpY3lcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3BvbGljaWVzL0NyZWRlbnRpYWxQb2xpY3lcIjtcbmV4cG9ydCAqIGZyb20gXCIuL1N0b3JhZ2VSZXRyeVBvbGljeUZhY3RvcnlcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3BvbGljaWVzL1N0b3JhZ2VTaGFyZWRLZXlDcmVkZW50aWFsUG9saWN5XCI7XG5leHBvcnQgKiBmcm9tIFwiLi9zYXMvU0FTUXVlcnlQYXJhbWV0ZXJzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9nZW5lcmF0ZWRNb2RlbHNcIjtcbmV4cG9ydCB7IFJlc3RFcnJvciB9O1xuZXhwb3J0IHsgbG9nZ2VyIH0gZnJvbSBcIi4vbG9nXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/log.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/log.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   logger: () => (/* binding */ logger)\n/* harmony export */ });\n/* harmony import */ var _azure_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/logger */ \"(rsc)/./node_modules/@azure/logger/dist/esm/index.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * The `@azure/logger` configuration for this package.\n */\nconst logger = (0,_azure_logger__WEBPACK_IMPORTED_MODULE_0__.createClientLogger)(\"storage-blob\");\n//# sourceMappingURL=log.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL2xvZy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDbUQ7QUFDbkQ7QUFDQTtBQUNBO0FBQ08sZUFBZSxpRUFBa0I7QUFDeEMiLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWN0b3J3aWxzb24vRGVza3RvcC9wcm9qZWN0cy9FWlZpei9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL2xvZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbmltcG9ydCB7IGNyZWF0ZUNsaWVudExvZ2dlciB9IGZyb20gXCJAYXp1cmUvbG9nZ2VyXCI7XG4vKipcbiAqIFRoZSBgQGF6dXJlL2xvZ2dlcmAgY29uZmlndXJhdGlvbiBmb3IgdGhpcyBwYWNrYWdlLlxuICovXG5leHBvcnQgY29uc3QgbG9nZ2VyID0gY3JlYXRlQ2xpZW50TG9nZ2VyKFwic3RvcmFnZS1ibG9iXCIpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9nLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/log.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/models.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/models.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BlockBlobTier: () => (/* binding */ BlockBlobTier),\n/* harmony export */   PremiumPageBlobTier: () => (/* binding */ PremiumPageBlobTier),\n/* harmony export */   StorageBlobAudience: () => (/* binding */ StorageBlobAudience),\n/* harmony export */   ensureCpkIfSpecified: () => (/* binding */ ensureCpkIfSpecified),\n/* harmony export */   getBlobServiceAccountAudience: () => (/* binding */ getBlobServiceAccountAudience),\n/* harmony export */   toAccessTier: () => (/* binding */ toAccessTier)\n/* harmony export */ });\n/* harmony import */ var _utils_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/constants */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * Represents the access tier on a blob.\n * For detailed information about block blob level tiering see {@link https://docs.microsoft.com/azure/storage/blobs/storage-blob-storage-tiers|Hot, cool and archive storage tiers.}\n */\nvar BlockBlobTier;\n(function (BlockBlobTier) {\n    /**\n     * Optimized for storing data that is accessed frequently.\n     */\n    BlockBlobTier[\"Hot\"] = \"Hot\";\n    /**\n     * Optimized for storing data that is infrequently accessed and stored for at least 30 days.\n     */\n    BlockBlobTier[\"Cool\"] = \"Cool\";\n    /**\n     * Optimized for storing data that is rarely accessed.\n     */\n    BlockBlobTier[\"Cold\"] = \"Cold\";\n    /**\n     * Optimized for storing data that is rarely accessed and stored for at least 180 days\n     * with flexible latency requirements (on the order of hours).\n     */\n    BlockBlobTier[\"Archive\"] = \"Archive\";\n})(BlockBlobTier || (BlockBlobTier = {}));\n/**\n * Specifies the page blob tier to set the blob to. This is only applicable to page blobs on premium storage accounts.\n * Please see {@link https://docs.microsoft.com/azure/storage/storage-premium-storage#scalability-and-performance-targets|here}\n * for detailed information on the corresponding IOPS and throughput per PageBlobTier.\n */\nvar PremiumPageBlobTier;\n(function (PremiumPageBlobTier) {\n    /**\n     * P4 Tier.\n     */\n    PremiumPageBlobTier[\"P4\"] = \"P4\";\n    /**\n     * P6 Tier.\n     */\n    PremiumPageBlobTier[\"P6\"] = \"P6\";\n    /**\n     * P10 Tier.\n     */\n    PremiumPageBlobTier[\"P10\"] = \"P10\";\n    /**\n     * P15 Tier.\n     */\n    PremiumPageBlobTier[\"P15\"] = \"P15\";\n    /**\n     * P20 Tier.\n     */\n    PremiumPageBlobTier[\"P20\"] = \"P20\";\n    /**\n     * P30 Tier.\n     */\n    PremiumPageBlobTier[\"P30\"] = \"P30\";\n    /**\n     * P40 Tier.\n     */\n    PremiumPageBlobTier[\"P40\"] = \"P40\";\n    /**\n     * P50 Tier.\n     */\n    PremiumPageBlobTier[\"P50\"] = \"P50\";\n    /**\n     * P60 Tier.\n     */\n    PremiumPageBlobTier[\"P60\"] = \"P60\";\n    /**\n     * P70 Tier.\n     */\n    PremiumPageBlobTier[\"P70\"] = \"P70\";\n    /**\n     * P80 Tier.\n     */\n    PremiumPageBlobTier[\"P80\"] = \"P80\";\n})(PremiumPageBlobTier || (PremiumPageBlobTier = {}));\nfunction toAccessTier(tier) {\n    if (tier === undefined) {\n        return undefined;\n    }\n    return tier; // No more check if string is a valid AccessTier, and left this to underlay logic to decide(service).\n}\nfunction ensureCpkIfSpecified(cpk, isHttps) {\n    if (cpk && !isHttps) {\n        throw new RangeError(\"Customer-provided encryption key must be used over HTTPS.\");\n    }\n    if (cpk && !cpk.encryptionAlgorithm) {\n        cpk.encryptionAlgorithm = _utils_constants__WEBPACK_IMPORTED_MODULE_0__.EncryptionAlgorithmAES25;\n    }\n}\n/**\n * Defines the known cloud audiences for Storage.\n */\nvar StorageBlobAudience;\n(function (StorageBlobAudience) {\n    /**\n     * The OAuth scope to use to retrieve an AAD token for Azure Storage.\n     */\n    StorageBlobAudience[\"StorageOAuthScopes\"] = \"https://storage.azure.com/.default\";\n    /**\n     * The OAuth scope to use to retrieve an AAD token for Azure Disk.\n     */\n    StorageBlobAudience[\"DiskComputeOAuthScopes\"] = \"https://disk.compute.azure.com/.default\";\n})(StorageBlobAudience || (StorageBlobAudience = {}));\n/**\n *\n * To get OAuth audience for a storage account for blob service.\n */\nfunction getBlobServiceAccountAudience(storageAccountName) {\n    return `https://${storageAccountName}.blob.core.windows.net/.default`;\n}\n//# sourceMappingURL=models.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL21vZGVscy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUM2RDtBQUM3RDtBQUNBO0FBQ0EsZ0VBQWdFO0FBQ2hFO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLHNDQUFzQztBQUN2QztBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsa0RBQWtEO0FBQzVDO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyxzRUFBd0I7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxrREFBa0Q7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLHNCQUFzQixtQkFBbUI7QUFDekM7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcndpbHNvbi9EZXNrdG9wL3Byb2plY3RzL0VaVml6L25vZGVfbW9kdWxlcy9AYXp1cmUvc3RvcmFnZS1ibG9iL2Rpc3QtZXNtL3N0b3JhZ2UtYmxvYi9zcmMvbW9kZWxzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuaW1wb3J0IHsgRW5jcnlwdGlvbkFsZ29yaXRobUFFUzI1IH0gZnJvbSBcIi4vdXRpbHMvY29uc3RhbnRzXCI7XG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIGFjY2VzcyB0aWVyIG9uIGEgYmxvYi5cbiAqIEZvciBkZXRhaWxlZCBpbmZvcm1hdGlvbiBhYm91dCBibG9jayBibG9iIGxldmVsIHRpZXJpbmcgc2VlIHtAbGluayBodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9henVyZS9zdG9yYWdlL2Jsb2JzL3N0b3JhZ2UtYmxvYi1zdG9yYWdlLXRpZXJzfEhvdCwgY29vbCBhbmQgYXJjaGl2ZSBzdG9yYWdlIHRpZXJzLn1cbiAqL1xuZXhwb3J0IHZhciBCbG9ja0Jsb2JUaWVyO1xuKGZ1bmN0aW9uIChCbG9ja0Jsb2JUaWVyKSB7XG4gICAgLyoqXG4gICAgICogT3B0aW1pemVkIGZvciBzdG9yaW5nIGRhdGEgdGhhdCBpcyBhY2Nlc3NlZCBmcmVxdWVudGx5LlxuICAgICAqL1xuICAgIEJsb2NrQmxvYlRpZXJbXCJIb3RcIl0gPSBcIkhvdFwiO1xuICAgIC8qKlxuICAgICAqIE9wdGltaXplZCBmb3Igc3RvcmluZyBkYXRhIHRoYXQgaXMgaW5mcmVxdWVudGx5IGFjY2Vzc2VkIGFuZCBzdG9yZWQgZm9yIGF0IGxlYXN0IDMwIGRheXMuXG4gICAgICovXG4gICAgQmxvY2tCbG9iVGllcltcIkNvb2xcIl0gPSBcIkNvb2xcIjtcbiAgICAvKipcbiAgICAgKiBPcHRpbWl6ZWQgZm9yIHN0b3JpbmcgZGF0YSB0aGF0IGlzIHJhcmVseSBhY2Nlc3NlZC5cbiAgICAgKi9cbiAgICBCbG9ja0Jsb2JUaWVyW1wiQ29sZFwiXSA9IFwiQ29sZFwiO1xuICAgIC8qKlxuICAgICAqIE9wdGltaXplZCBmb3Igc3RvcmluZyBkYXRhIHRoYXQgaXMgcmFyZWx5IGFjY2Vzc2VkIGFuZCBzdG9yZWQgZm9yIGF0IGxlYXN0IDE4MCBkYXlzXG4gICAgICogd2l0aCBmbGV4aWJsZSBsYXRlbmN5IHJlcXVpcmVtZW50cyAob24gdGhlIG9yZGVyIG9mIGhvdXJzKS5cbiAgICAgKi9cbiAgICBCbG9ja0Jsb2JUaWVyW1wiQXJjaGl2ZVwiXSA9IFwiQXJjaGl2ZVwiO1xufSkoQmxvY2tCbG9iVGllciB8fCAoQmxvY2tCbG9iVGllciA9IHt9KSk7XG4vKipcbiAqIFNwZWNpZmllcyB0aGUgcGFnZSBibG9iIHRpZXIgdG8gc2V0IHRoZSBibG9iIHRvLiBUaGlzIGlzIG9ubHkgYXBwbGljYWJsZSB0byBwYWdlIGJsb2JzIG9uIHByZW1pdW0gc3RvcmFnZSBhY2NvdW50cy5cbiAqIFBsZWFzZSBzZWUge0BsaW5rIGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2F6dXJlL3N0b3JhZ2Uvc3RvcmFnZS1wcmVtaXVtLXN0b3JhZ2Ujc2NhbGFiaWxpdHktYW5kLXBlcmZvcm1hbmNlLXRhcmdldHN8aGVyZX1cbiAqIGZvciBkZXRhaWxlZCBpbmZvcm1hdGlvbiBvbiB0aGUgY29ycmVzcG9uZGluZyBJT1BTIGFuZCB0aHJvdWdocHV0IHBlciBQYWdlQmxvYlRpZXIuXG4gKi9cbmV4cG9ydCB2YXIgUHJlbWl1bVBhZ2VCbG9iVGllcjtcbihmdW5jdGlvbiAoUHJlbWl1bVBhZ2VCbG9iVGllcikge1xuICAgIC8qKlxuICAgICAqIFA0IFRpZXIuXG4gICAgICovXG4gICAgUHJlbWl1bVBhZ2VCbG9iVGllcltcIlA0XCJdID0gXCJQNFwiO1xuICAgIC8qKlxuICAgICAqIFA2IFRpZXIuXG4gICAgICovXG4gICAgUHJlbWl1bVBhZ2VCbG9iVGllcltcIlA2XCJdID0gXCJQNlwiO1xuICAgIC8qKlxuICAgICAqIFAxMCBUaWVyLlxuICAgICAqL1xuICAgIFByZW1pdW1QYWdlQmxvYlRpZXJbXCJQMTBcIl0gPSBcIlAxMFwiO1xuICAgIC8qKlxuICAgICAqIFAxNSBUaWVyLlxuICAgICAqL1xuICAgIFByZW1pdW1QYWdlQmxvYlRpZXJbXCJQMTVcIl0gPSBcIlAxNVwiO1xuICAgIC8qKlxuICAgICAqIFAyMCBUaWVyLlxuICAgICAqL1xuICAgIFByZW1pdW1QYWdlQmxvYlRpZXJbXCJQMjBcIl0gPSBcIlAyMFwiO1xuICAgIC8qKlxuICAgICAqIFAzMCBUaWVyLlxuICAgICAqL1xuICAgIFByZW1pdW1QYWdlQmxvYlRpZXJbXCJQMzBcIl0gPSBcIlAzMFwiO1xuICAgIC8qKlxuICAgICAqIFA0MCBUaWVyLlxuICAgICAqL1xuICAgIFByZW1pdW1QYWdlQmxvYlRpZXJbXCJQNDBcIl0gPSBcIlA0MFwiO1xuICAgIC8qKlxuICAgICAqIFA1MCBUaWVyLlxuICAgICAqL1xuICAgIFByZW1pdW1QYWdlQmxvYlRpZXJbXCJQNTBcIl0gPSBcIlA1MFwiO1xuICAgIC8qKlxuICAgICAqIFA2MCBUaWVyLlxuICAgICAqL1xuICAgIFByZW1pdW1QYWdlQmxvYlRpZXJbXCJQNjBcIl0gPSBcIlA2MFwiO1xuICAgIC8qKlxuICAgICAqIFA3MCBUaWVyLlxuICAgICAqL1xuICAgIFByZW1pdW1QYWdlQmxvYlRpZXJbXCJQNzBcIl0gPSBcIlA3MFwiO1xuICAgIC8qKlxuICAgICAqIFA4MCBUaWVyLlxuICAgICAqL1xuICAgIFByZW1pdW1QYWdlQmxvYlRpZXJbXCJQODBcIl0gPSBcIlA4MFwiO1xufSkoUHJlbWl1bVBhZ2VCbG9iVGllciB8fCAoUHJlbWl1bVBhZ2VCbG9iVGllciA9IHt9KSk7XG5leHBvcnQgZnVuY3Rpb24gdG9BY2Nlc3NUaWVyKHRpZXIpIHtcbiAgICBpZiAodGllciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJldHVybiB0aWVyOyAvLyBObyBtb3JlIGNoZWNrIGlmIHN0cmluZyBpcyBhIHZhbGlkIEFjY2Vzc1RpZXIsIGFuZCBsZWZ0IHRoaXMgdG8gdW5kZXJsYXkgbG9naWMgdG8gZGVjaWRlKHNlcnZpY2UpLlxufVxuZXhwb3J0IGZ1bmN0aW9uIGVuc3VyZUNwa0lmU3BlY2lmaWVkKGNwaywgaXNIdHRwcykge1xuICAgIGlmIChjcGsgJiYgIWlzSHR0cHMpIHtcbiAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJDdXN0b21lci1wcm92aWRlZCBlbmNyeXB0aW9uIGtleSBtdXN0IGJlIHVzZWQgb3ZlciBIVFRQUy5cIik7XG4gICAgfVxuICAgIGlmIChjcGsgJiYgIWNway5lbmNyeXB0aW9uQWxnb3JpdGhtKSB7XG4gICAgICAgIGNway5lbmNyeXB0aW9uQWxnb3JpdGhtID0gRW5jcnlwdGlvbkFsZ29yaXRobUFFUzI1O1xuICAgIH1cbn1cbi8qKlxuICogRGVmaW5lcyB0aGUga25vd24gY2xvdWQgYXVkaWVuY2VzIGZvciBTdG9yYWdlLlxuICovXG5leHBvcnQgdmFyIFN0b3JhZ2VCbG9iQXVkaWVuY2U7XG4oZnVuY3Rpb24gKFN0b3JhZ2VCbG9iQXVkaWVuY2UpIHtcbiAgICAvKipcbiAgICAgKiBUaGUgT0F1dGggc2NvcGUgdG8gdXNlIHRvIHJldHJpZXZlIGFuIEFBRCB0b2tlbiBmb3IgQXp1cmUgU3RvcmFnZS5cbiAgICAgKi9cbiAgICBTdG9yYWdlQmxvYkF1ZGllbmNlW1wiU3RvcmFnZU9BdXRoU2NvcGVzXCJdID0gXCJodHRwczovL3N0b3JhZ2UuYXp1cmUuY29tLy5kZWZhdWx0XCI7XG4gICAgLyoqXG4gICAgICogVGhlIE9BdXRoIHNjb3BlIHRvIHVzZSB0byByZXRyaWV2ZSBhbiBBQUQgdG9rZW4gZm9yIEF6dXJlIERpc2suXG4gICAgICovXG4gICAgU3RvcmFnZUJsb2JBdWRpZW5jZVtcIkRpc2tDb21wdXRlT0F1dGhTY29wZXNcIl0gPSBcImh0dHBzOi8vZGlzay5jb21wdXRlLmF6dXJlLmNvbS8uZGVmYXVsdFwiO1xufSkoU3RvcmFnZUJsb2JBdWRpZW5jZSB8fCAoU3RvcmFnZUJsb2JBdWRpZW5jZSA9IHt9KSk7XG4vKipcbiAqXG4gKiBUbyBnZXQgT0F1dGggYXVkaWVuY2UgZm9yIGEgc3RvcmFnZSBhY2NvdW50IGZvciBibG9iIHNlcnZpY2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRCbG9iU2VydmljZUFjY291bnRBdWRpZW5jZShzdG9yYWdlQWNjb3VudE5hbWUpIHtcbiAgICByZXR1cm4gYGh0dHBzOi8vJHtzdG9yYWdlQWNjb3VudE5hbWV9LmJsb2IuY29yZS53aW5kb3dzLm5ldC8uZGVmYXVsdGA7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tb2RlbHMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/models.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/AnonymousCredentialPolicy.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/AnonymousCredentialPolicy.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AnonymousCredentialPolicy: () => (/* binding */ AnonymousCredentialPolicy)\n/* harmony export */ });\n/* harmony import */ var _CredentialPolicy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CredentialPolicy */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/CredentialPolicy.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * AnonymousCredentialPolicy is used with HTTP(S) requests that read public resources\n * or for use with Shared Access Signatures (SAS).\n */\nclass AnonymousCredentialPolicy extends _CredentialPolicy__WEBPACK_IMPORTED_MODULE_0__.CredentialPolicy {\n    /**\n     * Creates an instance of AnonymousCredentialPolicy.\n     * @param nextPolicy -\n     * @param options -\n     */\n    // The base class has a protected constructor. Adding a public one to enable constructing of this class.\n    /* eslint-disable-next-line @typescript-eslint/no-useless-constructor*/\n    constructor(nextPolicy, options) {\n        super(nextPolicy, options);\n    }\n}\n//# sourceMappingURL=AnonymousCredentialPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL3BvbGljaWVzL0Fub255bW91c0NyZWRlbnRpYWxQb2xpY3kuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ3NEO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ08sd0NBQXdDLCtEQUFnQjtBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWN0b3J3aWxzb24vRGVza3RvcC9wcm9qZWN0cy9FWlZpei9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL3BvbGljaWVzL0Fub255bW91c0NyZWRlbnRpYWxQb2xpY3kuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5pbXBvcnQgeyBDcmVkZW50aWFsUG9saWN5IH0gZnJvbSBcIi4vQ3JlZGVudGlhbFBvbGljeVwiO1xuLyoqXG4gKiBBbm9ueW1vdXNDcmVkZW50aWFsUG9saWN5IGlzIHVzZWQgd2l0aCBIVFRQKFMpIHJlcXVlc3RzIHRoYXQgcmVhZCBwdWJsaWMgcmVzb3VyY2VzXG4gKiBvciBmb3IgdXNlIHdpdGggU2hhcmVkIEFjY2VzcyBTaWduYXR1cmVzIChTQVMpLlxuICovXG5leHBvcnQgY2xhc3MgQW5vbnltb3VzQ3JlZGVudGlhbFBvbGljeSBleHRlbmRzIENyZWRlbnRpYWxQb2xpY3kge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgQW5vbnltb3VzQ3JlZGVudGlhbFBvbGljeS5cbiAgICAgKiBAcGFyYW0gbmV4dFBvbGljeSAtXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLVxuICAgICAqL1xuICAgIC8vIFRoZSBiYXNlIGNsYXNzIGhhcyBhIHByb3RlY3RlZCBjb25zdHJ1Y3Rvci4gQWRkaW5nIGEgcHVibGljIG9uZSB0byBlbmFibGUgY29uc3RydWN0aW5nIG9mIHRoaXMgY2xhc3MuXG4gICAgLyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11c2VsZXNzLWNvbnN0cnVjdG9yKi9cbiAgICBjb25zdHJ1Y3RvcihuZXh0UG9saWN5LCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKG5leHRQb2xpY3ksIG9wdGlvbnMpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFub255bW91c0NyZWRlbnRpYWxQb2xpY3kuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/AnonymousCredentialPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/CredentialPolicy.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/CredentialPolicy.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CredentialPolicy: () => (/* binding */ CredentialPolicy)\n/* harmony export */ });\n/* harmony import */ var _RequestPolicy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./RequestPolicy */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/RequestPolicy.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * Credential policy used to sign HTTP(S) requests before sending. This is an\n * abstract class.\n */\nclass CredentialPolicy extends _RequestPolicy__WEBPACK_IMPORTED_MODULE_0__.BaseRequestPolicy {\n    /**\n     * Sends out request.\n     *\n     * @param request -\n     */\n    sendRequest(request) {\n        return this._nextPolicy.sendRequest(this.signRequest(request));\n    }\n    /**\n     * Child classes must implement this method with request signing. This method\n     * will be executed in {@link sendRequest}.\n     *\n     * @param request -\n     */\n    signRequest(request) {\n        // Child classes must override this method with request signing. This method\n        // will be executed in sendRequest().\n        return request;\n    }\n}\n//# sourceMappingURL=CredentialPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL3BvbGljaWVzL0NyZWRlbnRpYWxQb2xpY3kuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ29EO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ08sK0JBQStCLDZEQUFpQjtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixrQkFBa0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWN0b3J3aWxzb24vRGVza3RvcC9wcm9qZWN0cy9FWlZpei9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL3BvbGljaWVzL0NyZWRlbnRpYWxQb2xpY3kuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5pbXBvcnQgeyBCYXNlUmVxdWVzdFBvbGljeSB9IGZyb20gXCIuL1JlcXVlc3RQb2xpY3lcIjtcbi8qKlxuICogQ3JlZGVudGlhbCBwb2xpY3kgdXNlZCB0byBzaWduIEhUVFAoUykgcmVxdWVzdHMgYmVmb3JlIHNlbmRpbmcuIFRoaXMgaXMgYW5cbiAqIGFic3RyYWN0IGNsYXNzLlxuICovXG5leHBvcnQgY2xhc3MgQ3JlZGVudGlhbFBvbGljeSBleHRlbmRzIEJhc2VSZXF1ZXN0UG9saWN5IHtcbiAgICAvKipcbiAgICAgKiBTZW5kcyBvdXQgcmVxdWVzdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSByZXF1ZXN0IC1cbiAgICAgKi9cbiAgICBzZW5kUmVxdWVzdChyZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9uZXh0UG9saWN5LnNlbmRSZXF1ZXN0KHRoaXMuc2lnblJlcXVlc3QocmVxdWVzdCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDaGlsZCBjbGFzc2VzIG11c3QgaW1wbGVtZW50IHRoaXMgbWV0aG9kIHdpdGggcmVxdWVzdCBzaWduaW5nLiBUaGlzIG1ldGhvZFxuICAgICAqIHdpbGwgYmUgZXhlY3V0ZWQgaW4ge0BsaW5rIHNlbmRSZXF1ZXN0fS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSByZXF1ZXN0IC1cbiAgICAgKi9cbiAgICBzaWduUmVxdWVzdChyZXF1ZXN0KSB7XG4gICAgICAgIC8vIENoaWxkIGNsYXNzZXMgbXVzdCBvdmVycmlkZSB0aGlzIG1ldGhvZCB3aXRoIHJlcXVlc3Qgc2lnbmluZy4gVGhpcyBtZXRob2RcbiAgICAgICAgLy8gd2lsbCBiZSBleGVjdXRlZCBpbiBzZW5kUmVxdWVzdCgpLlxuICAgICAgICByZXR1cm4gcmVxdWVzdDtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1DcmVkZW50aWFsUG9saWN5LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/CredentialPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/RequestPolicy.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/RequestPolicy.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseRequestPolicy: () => (/* binding */ BaseRequestPolicy)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * The base class from which all request policies derive.\n */\nclass BaseRequestPolicy {\n    /**\n     * The main method to implement that manipulates a request/response.\n     */\n    constructor(\n    /**\n     * The next policy in the pipeline. Each policy is responsible for executing the next one if the request is to continue through the pipeline.\n     */\n    _nextPolicy, \n    /**\n     * The options that can be passed to a given request policy.\n     */\n    _options) {\n        this._nextPolicy = _nextPolicy;\n        this._options = _options;\n    }\n    /**\n     * Get whether or not a log with the provided log level should be logged.\n     * @param logLevel - The log level of the log that will be logged.\n     * @returns Whether or not a log with the provided log level should be logged.\n     */\n    shouldLog(logLevel) {\n        return this._options.shouldLog(logLevel);\n    }\n    /**\n     * Attempt to log the provided message to the provided logger. If no logger was provided or if\n     * the log level does not meat the logger's threshold, then nothing will be logged.\n     * @param logLevel - The log level of this log.\n     * @param message - The message of this log.\n     */\n    log(logLevel, message) {\n        this._options.log(logLevel, message);\n    }\n}\n//# sourceMappingURL=RequestPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL3BvbGljaWVzL1JlcXVlc3RQb2xpY3kuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvdmljdG9yd2lsc29uL0Rlc2t0b3AvcHJvamVjdHMvRVpWaXovbm9kZV9tb2R1bGVzL0BhenVyZS9zdG9yYWdlLWJsb2IvZGlzdC1lc20vc3RvcmFnZS1ibG9iL3NyYy9wb2xpY2llcy9SZXF1ZXN0UG9saWN5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuLyoqXG4gKiBUaGUgYmFzZSBjbGFzcyBmcm9tIHdoaWNoIGFsbCByZXF1ZXN0IHBvbGljaWVzIGRlcml2ZS5cbiAqL1xuZXhwb3J0IGNsYXNzIEJhc2VSZXF1ZXN0UG9saWN5IHtcbiAgICAvKipcbiAgICAgKiBUaGUgbWFpbiBtZXRob2QgdG8gaW1wbGVtZW50IHRoYXQgbWFuaXB1bGF0ZXMgYSByZXF1ZXN0L3Jlc3BvbnNlLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8qKlxuICAgICAqIFRoZSBuZXh0IHBvbGljeSBpbiB0aGUgcGlwZWxpbmUuIEVhY2ggcG9saWN5IGlzIHJlc3BvbnNpYmxlIGZvciBleGVjdXRpbmcgdGhlIG5leHQgb25lIGlmIHRoZSByZXF1ZXN0IGlzIHRvIGNvbnRpbnVlIHRocm91Z2ggdGhlIHBpcGVsaW5lLlxuICAgICAqL1xuICAgIF9uZXh0UG9saWN5LCBcbiAgICAvKipcbiAgICAgKiBUaGUgb3B0aW9ucyB0aGF0IGNhbiBiZSBwYXNzZWQgdG8gYSBnaXZlbiByZXF1ZXN0IHBvbGljeS5cbiAgICAgKi9cbiAgICBfb3B0aW9ucykge1xuICAgICAgICB0aGlzLl9uZXh0UG9saWN5ID0gX25leHRQb2xpY3k7XG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSBfb3B0aW9ucztcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHdoZXRoZXIgb3Igbm90IGEgbG9nIHdpdGggdGhlIHByb3ZpZGVkIGxvZyBsZXZlbCBzaG91bGQgYmUgbG9nZ2VkLlxuICAgICAqIEBwYXJhbSBsb2dMZXZlbCAtIFRoZSBsb2cgbGV2ZWwgb2YgdGhlIGxvZyB0aGF0IHdpbGwgYmUgbG9nZ2VkLlxuICAgICAqIEByZXR1cm5zIFdoZXRoZXIgb3Igbm90IGEgbG9nIHdpdGggdGhlIHByb3ZpZGVkIGxvZyBsZXZlbCBzaG91bGQgYmUgbG9nZ2VkLlxuICAgICAqL1xuICAgIHNob3VsZExvZyhsb2dMZXZlbCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fb3B0aW9ucy5zaG91bGRMb2cobG9nTGV2ZWwpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBdHRlbXB0IHRvIGxvZyB0aGUgcHJvdmlkZWQgbWVzc2FnZSB0byB0aGUgcHJvdmlkZWQgbG9nZ2VyLiBJZiBubyBsb2dnZXIgd2FzIHByb3ZpZGVkIG9yIGlmXG4gICAgICogdGhlIGxvZyBsZXZlbCBkb2VzIG5vdCBtZWF0IHRoZSBsb2dnZXIncyB0aHJlc2hvbGQsIHRoZW4gbm90aGluZyB3aWxsIGJlIGxvZ2dlZC5cbiAgICAgKiBAcGFyYW0gbG9nTGV2ZWwgLSBUaGUgbG9nIGxldmVsIG9mIHRoaXMgbG9nLlxuICAgICAqIEBwYXJhbSBtZXNzYWdlIC0gVGhlIG1lc3NhZ2Ugb2YgdGhpcyBsb2cuXG4gICAgICovXG4gICAgbG9nKGxvZ0xldmVsLCBtZXNzYWdlKSB7XG4gICAgICAgIHRoaXMuX29wdGlvbnMubG9nKGxvZ0xldmVsLCBtZXNzYWdlKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1SZXF1ZXN0UG9saWN5LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/RequestPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageBrowserPolicy.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageBrowserPolicy.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StorageBrowserPolicy: () => (/* binding */ StorageBrowserPolicy)\n/* harmony export */ });\n/* harmony import */ var _RequestPolicy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./RequestPolicy */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/RequestPolicy.js\");\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-util */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/index.js\");\n/* harmony import */ var _utils_constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/constants */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js\");\n/* harmony import */ var _utils_utils_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/utils.common */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n\n/**\n * StorageBrowserPolicy will handle differences between Node.js and browser runtime, including:\n *\n * 1. Browsers cache GET/HEAD requests by adding conditional headers such as 'IF_MODIFIED_SINCE'.\n * StorageBrowserPolicy is a policy used to add a timestamp query to GET/HEAD request URL\n * thus avoid the browser cache.\n *\n * 2. Remove cookie header for security\n *\n * 3. Remove content-length header to avoid browsers warning\n */\nclass StorageBrowserPolicy extends _RequestPolicy__WEBPACK_IMPORTED_MODULE_1__.BaseRequestPolicy {\n    /**\n     * Creates an instance of StorageBrowserPolicy.\n     * @param nextPolicy -\n     * @param options -\n     */\n    // The base class has a protected constructor. Adding a public one to enable constructing of this class.\n    /* eslint-disable-next-line @typescript-eslint/no-useless-constructor*/\n    constructor(nextPolicy, options) {\n        super(nextPolicy, options);\n    }\n    /**\n     * Sends out request.\n     *\n     * @param request -\n     */\n    async sendRequest(request) {\n        if (_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.isNode) {\n            return this._nextPolicy.sendRequest(request);\n        }\n        if (request.method.toUpperCase() === \"GET\" || request.method.toUpperCase() === \"HEAD\") {\n            request.url = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_2__.setURLParameter)(request.url, _utils_constants__WEBPACK_IMPORTED_MODULE_3__.URLConstants.Parameters.FORCE_BROWSER_NO_CACHE, new Date().getTime().toString());\n        }\n        request.headers.remove(_utils_constants__WEBPACK_IMPORTED_MODULE_3__.HeaderConstants.COOKIE);\n        // According to XHR standards, content-length should be fully controlled by browsers\n        request.headers.remove(_utils_constants__WEBPACK_IMPORTED_MODULE_3__.HeaderConstants.CONTENT_LENGTH);\n        return this._nextPolicy.sendRequest(request);\n    }\n}\n//# sourceMappingURL=StorageBrowserPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL3BvbGljaWVzL1N0b3JhZ2VCcm93c2VyUG9saWN5LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNvRDtBQUNWO0FBQ3lCO0FBQ1g7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLG1DQUFtQyw2REFBaUI7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLG9EQUFNO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixvRUFBZSxjQUFjLDBEQUFZO0FBQ25FO0FBQ0EsK0JBQStCLDZEQUFlO0FBQzlDO0FBQ0EsK0JBQStCLDZEQUFlO0FBQzlDO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvdmljdG9yd2lsc29uL0Rlc2t0b3AvcHJvamVjdHMvRVpWaXovbm9kZV9tb2R1bGVzL0BhenVyZS9zdG9yYWdlLWJsb2IvZGlzdC1lc20vc3RvcmFnZS1ibG9iL3NyYy9wb2xpY2llcy9TdG9yYWdlQnJvd3NlclBvbGljeS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbmltcG9ydCB7IEJhc2VSZXF1ZXN0UG9saWN5IH0gZnJvbSBcIi4vUmVxdWVzdFBvbGljeVwiO1xuaW1wb3J0IHsgaXNOb2RlIH0gZnJvbSBcIkBhenVyZS9jb3JlLXV0aWxcIjtcbmltcG9ydCB7IEhlYWRlckNvbnN0YW50cywgVVJMQ29uc3RhbnRzIH0gZnJvbSBcIi4uL3V0aWxzL2NvbnN0YW50c1wiO1xuaW1wb3J0IHsgc2V0VVJMUGFyYW1ldGVyIH0gZnJvbSBcIi4uL3V0aWxzL3V0aWxzLmNvbW1vblwiO1xuLyoqXG4gKiBTdG9yYWdlQnJvd3NlclBvbGljeSB3aWxsIGhhbmRsZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIE5vZGUuanMgYW5kIGJyb3dzZXIgcnVudGltZSwgaW5jbHVkaW5nOlxuICpcbiAqIDEuIEJyb3dzZXJzIGNhY2hlIEdFVC9IRUFEIHJlcXVlc3RzIGJ5IGFkZGluZyBjb25kaXRpb25hbCBoZWFkZXJzIHN1Y2ggYXMgJ0lGX01PRElGSUVEX1NJTkNFJy5cbiAqIFN0b3JhZ2VCcm93c2VyUG9saWN5IGlzIGEgcG9saWN5IHVzZWQgdG8gYWRkIGEgdGltZXN0YW1wIHF1ZXJ5IHRvIEdFVC9IRUFEIHJlcXVlc3QgVVJMXG4gKiB0aHVzIGF2b2lkIHRoZSBicm93c2VyIGNhY2hlLlxuICpcbiAqIDIuIFJlbW92ZSBjb29raWUgaGVhZGVyIGZvciBzZWN1cml0eVxuICpcbiAqIDMuIFJlbW92ZSBjb250ZW50LWxlbmd0aCBoZWFkZXIgdG8gYXZvaWQgYnJvd3NlcnMgd2FybmluZ1xuICovXG5leHBvcnQgY2xhc3MgU3RvcmFnZUJyb3dzZXJQb2xpY3kgZXh0ZW5kcyBCYXNlUmVxdWVzdFBvbGljeSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBTdG9yYWdlQnJvd3NlclBvbGljeS5cbiAgICAgKiBAcGFyYW0gbmV4dFBvbGljeSAtXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLVxuICAgICAqL1xuICAgIC8vIFRoZSBiYXNlIGNsYXNzIGhhcyBhIHByb3RlY3RlZCBjb25zdHJ1Y3Rvci4gQWRkaW5nIGEgcHVibGljIG9uZSB0byBlbmFibGUgY29uc3RydWN0aW5nIG9mIHRoaXMgY2xhc3MuXG4gICAgLyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11c2VsZXNzLWNvbnN0cnVjdG9yKi9cbiAgICBjb25zdHJ1Y3RvcihuZXh0UG9saWN5LCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKG5leHRQb2xpY3ksIG9wdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZW5kcyBvdXQgcmVxdWVzdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSByZXF1ZXN0IC1cbiAgICAgKi9cbiAgICBhc3luYyBzZW5kUmVxdWVzdChyZXF1ZXN0KSB7XG4gICAgICAgIGlmIChpc05vZGUpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9uZXh0UG9saWN5LnNlbmRSZXF1ZXN0KHJlcXVlc3QpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXF1ZXN0Lm1ldGhvZC50b1VwcGVyQ2FzZSgpID09PSBcIkdFVFwiIHx8IHJlcXVlc3QubWV0aG9kLnRvVXBwZXJDYXNlKCkgPT09IFwiSEVBRFwiKSB7XG4gICAgICAgICAgICByZXF1ZXN0LnVybCA9IHNldFVSTFBhcmFtZXRlcihyZXF1ZXN0LnVybCwgVVJMQ29uc3RhbnRzLlBhcmFtZXRlcnMuRk9SQ0VfQlJPV1NFUl9OT19DQUNIRSwgbmV3IERhdGUoKS5nZXRUaW1lKCkudG9TdHJpbmcoKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmVxdWVzdC5oZWFkZXJzLnJlbW92ZShIZWFkZXJDb25zdGFudHMuQ09PS0lFKTtcbiAgICAgICAgLy8gQWNjb3JkaW5nIHRvIFhIUiBzdGFuZGFyZHMsIGNvbnRlbnQtbGVuZ3RoIHNob3VsZCBiZSBmdWxseSBjb250cm9sbGVkIGJ5IGJyb3dzZXJzXG4gICAgICAgIHJlcXVlc3QuaGVhZGVycy5yZW1vdmUoSGVhZGVyQ29uc3RhbnRzLkNPTlRFTlRfTEVOR1RIKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX25leHRQb2xpY3kuc2VuZFJlcXVlc3QocmVxdWVzdCk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3RvcmFnZUJyb3dzZXJQb2xpY3kuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageBrowserPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageBrowserPolicyV2.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageBrowserPolicyV2.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   storageBrowserPolicy: () => (/* binding */ storageBrowserPolicy),\n/* harmony export */   storageBrowserPolicyName: () => (/* binding */ storageBrowserPolicyName)\n/* harmony export */ });\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-util */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/index.js\");\n/* harmony import */ var _utils_constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/constants */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js\");\n/* harmony import */ var _utils_utils_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/utils.common */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n/**\n * The programmatic identifier of the StorageBrowserPolicy.\n */\nconst storageBrowserPolicyName = \"storageBrowserPolicy\";\n/**\n * storageBrowserPolicy is a policy used to prevent browsers from caching requests\n * and to remove cookies and explicit content-length headers.\n */\nfunction storageBrowserPolicy() {\n    return {\n        name: storageBrowserPolicyName,\n        async sendRequest(request, next) {\n            if (_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.isNode) {\n                return next(request);\n            }\n            if (request.method === \"GET\" || request.method === \"HEAD\") {\n                request.url = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_1__.setURLParameter)(request.url, _utils_constants__WEBPACK_IMPORTED_MODULE_2__.URLConstants.Parameters.FORCE_BROWSER_NO_CACHE, new Date().getTime().toString());\n            }\n            request.headers.delete(_utils_constants__WEBPACK_IMPORTED_MODULE_2__.HeaderConstants.COOKIE);\n            // According to XHR standards, content-length should be fully controlled by browsers\n            request.headers.delete(_utils_constants__WEBPACK_IMPORTED_MODULE_2__.HeaderConstants.CONTENT_LENGTH);\n            return next(request);\n        },\n    };\n}\n//# sourceMappingURL=StorageBrowserPolicyV2.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL3BvbGljaWVzL1N0b3JhZ2VCcm93c2VyUG9saWN5VjIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBO0FBQzBDO0FBQ3lCO0FBQ1g7QUFDeEQ7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLG9EQUFNO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixvRUFBZSxjQUFjLDBEQUFZO0FBQ3ZFO0FBQ0EsbUNBQW1DLDZEQUFlO0FBQ2xEO0FBQ0EsbUNBQW1DLDZEQUFlO0FBQ2xEO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcndpbHNvbi9EZXNrdG9wL3Byb2plY3RzL0VaVml6L25vZGVfbW9kdWxlcy9AYXp1cmUvc3RvcmFnZS1ibG9iL2Rpc3QtZXNtL3N0b3JhZ2UtYmxvYi9zcmMvcG9saWNpZXMvU3RvcmFnZUJyb3dzZXJQb2xpY3lWMi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbmltcG9ydCB7IGlzTm9kZSB9IGZyb20gXCJAYXp1cmUvY29yZS11dGlsXCI7XG5pbXBvcnQgeyBIZWFkZXJDb25zdGFudHMsIFVSTENvbnN0YW50cyB9IGZyb20gXCIuLi91dGlscy9jb25zdGFudHNcIjtcbmltcG9ydCB7IHNldFVSTFBhcmFtZXRlciB9IGZyb20gXCIuLi91dGlscy91dGlscy5jb21tb25cIjtcbi8qKlxuICogVGhlIHByb2dyYW1tYXRpYyBpZGVudGlmaWVyIG9mIHRoZSBTdG9yYWdlQnJvd3NlclBvbGljeS5cbiAqL1xuZXhwb3J0IGNvbnN0IHN0b3JhZ2VCcm93c2VyUG9saWN5TmFtZSA9IFwic3RvcmFnZUJyb3dzZXJQb2xpY3lcIjtcbi8qKlxuICogc3RvcmFnZUJyb3dzZXJQb2xpY3kgaXMgYSBwb2xpY3kgdXNlZCB0byBwcmV2ZW50IGJyb3dzZXJzIGZyb20gY2FjaGluZyByZXF1ZXN0c1xuICogYW5kIHRvIHJlbW92ZSBjb29raWVzIGFuZCBleHBsaWNpdCBjb250ZW50LWxlbmd0aCBoZWFkZXJzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RvcmFnZUJyb3dzZXJQb2xpY3koKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbmFtZTogc3RvcmFnZUJyb3dzZXJQb2xpY3lOYW1lLFxuICAgICAgICBhc3luYyBzZW5kUmVxdWVzdChyZXF1ZXN0LCBuZXh0KSB7XG4gICAgICAgICAgICBpZiAoaXNOb2RlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5leHQocmVxdWVzdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocmVxdWVzdC5tZXRob2QgPT09IFwiR0VUXCIgfHwgcmVxdWVzdC5tZXRob2QgPT09IFwiSEVBRFwiKSB7XG4gICAgICAgICAgICAgICAgcmVxdWVzdC51cmwgPSBzZXRVUkxQYXJhbWV0ZXIocmVxdWVzdC51cmwsIFVSTENvbnN0YW50cy5QYXJhbWV0ZXJzLkZPUkNFX0JST1dTRVJfTk9fQ0FDSEUsIG5ldyBEYXRlKCkuZ2V0VGltZSgpLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVxdWVzdC5oZWFkZXJzLmRlbGV0ZShIZWFkZXJDb25zdGFudHMuQ09PS0lFKTtcbiAgICAgICAgICAgIC8vIEFjY29yZGluZyB0byBYSFIgc3RhbmRhcmRzLCBjb250ZW50LWxlbmd0aCBzaG91bGQgYmUgZnVsbHkgY29udHJvbGxlZCBieSBicm93c2Vyc1xuICAgICAgICAgICAgcmVxdWVzdC5oZWFkZXJzLmRlbGV0ZShIZWFkZXJDb25zdGFudHMuQ09OVEVOVF9MRU5HVEgpO1xuICAgICAgICAgICAgcmV0dXJuIG5leHQocmVxdWVzdCk7XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN0b3JhZ2VCcm93c2VyUG9saWN5VjIuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageBrowserPolicyV2.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageCorrectContentLengthPolicy.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageCorrectContentLengthPolicy.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   storageCorrectContentLengthPolicy: () => (/* binding */ storageCorrectContentLengthPolicy),\n/* harmony export */   storageCorrectContentLengthPolicyName: () => (/* binding */ storageCorrectContentLengthPolicyName)\n/* harmony export */ });\n/* harmony import */ var _utils_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/constants */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * The programmatic identifier of the storageCorrectContentLengthPolicy.\n */\nconst storageCorrectContentLengthPolicyName = \"StorageCorrectContentLengthPolicy\";\n/**\n * storageCorrectContentLengthPolicy to correctly set Content-Length header with request body length.\n */\nfunction storageCorrectContentLengthPolicy() {\n    function correctContentLength(request) {\n        if (request.body &&\n            (typeof request.body === \"string\" || Buffer.isBuffer(request.body)) &&\n            request.body.length > 0) {\n            request.headers.set(_utils_constants__WEBPACK_IMPORTED_MODULE_0__.HeaderConstants.CONTENT_LENGTH, Buffer.byteLength(request.body));\n        }\n    }\n    return {\n        name: storageCorrectContentLengthPolicyName,\n        async sendRequest(request, next) {\n            correctContentLength(request);\n            return next(request);\n        },\n    };\n}\n//# sourceMappingURL=StorageCorrectContentLengthPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL3BvbGljaWVzL1N0b3JhZ2VDb3JyZWN0Q29udGVudExlbmd0aFBvbGljeS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ3FEO0FBQ3JEO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyw2REFBZTtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWN0b3J3aWxzb24vRGVza3RvcC9wcm9qZWN0cy9FWlZpei9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL3BvbGljaWVzL1N0b3JhZ2VDb3JyZWN0Q29udGVudExlbmd0aFBvbGljeS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbmltcG9ydCB7IEhlYWRlckNvbnN0YW50cyB9IGZyb20gXCIuLi91dGlscy9jb25zdGFudHNcIjtcbi8qKlxuICogVGhlIHByb2dyYW1tYXRpYyBpZGVudGlmaWVyIG9mIHRoZSBzdG9yYWdlQ29ycmVjdENvbnRlbnRMZW5ndGhQb2xpY3kuXG4gKi9cbmV4cG9ydCBjb25zdCBzdG9yYWdlQ29ycmVjdENvbnRlbnRMZW5ndGhQb2xpY3lOYW1lID0gXCJTdG9yYWdlQ29ycmVjdENvbnRlbnRMZW5ndGhQb2xpY3lcIjtcbi8qKlxuICogc3RvcmFnZUNvcnJlY3RDb250ZW50TGVuZ3RoUG9saWN5IHRvIGNvcnJlY3RseSBzZXQgQ29udGVudC1MZW5ndGggaGVhZGVyIHdpdGggcmVxdWVzdCBib2R5IGxlbmd0aC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0b3JhZ2VDb3JyZWN0Q29udGVudExlbmd0aFBvbGljeSgpIHtcbiAgICBmdW5jdGlvbiBjb3JyZWN0Q29udGVudExlbmd0aChyZXF1ZXN0KSB7XG4gICAgICAgIGlmIChyZXF1ZXN0LmJvZHkgJiZcbiAgICAgICAgICAgICh0eXBlb2YgcmVxdWVzdC5ib2R5ID09PSBcInN0cmluZ1wiIHx8IEJ1ZmZlci5pc0J1ZmZlcihyZXF1ZXN0LmJvZHkpKSAmJlxuICAgICAgICAgICAgcmVxdWVzdC5ib2R5Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHJlcXVlc3QuaGVhZGVycy5zZXQoSGVhZGVyQ29uc3RhbnRzLkNPTlRFTlRfTEVOR1RILCBCdWZmZXIuYnl0ZUxlbmd0aChyZXF1ZXN0LmJvZHkpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBuYW1lOiBzdG9yYWdlQ29ycmVjdENvbnRlbnRMZW5ndGhQb2xpY3lOYW1lLFxuICAgICAgICBhc3luYyBzZW5kUmVxdWVzdChyZXF1ZXN0LCBuZXh0KSB7XG4gICAgICAgICAgICBjb3JyZWN0Q29udGVudExlbmd0aChyZXF1ZXN0KTtcbiAgICAgICAgICAgIHJldHVybiBuZXh0KHJlcXVlc3QpO1xuICAgICAgICB9LFxuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TdG9yYWdlQ29ycmVjdENvbnRlbnRMZW5ndGhQb2xpY3kuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageCorrectContentLengthPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageRetryPolicy.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageRetryPolicy.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NewRetryPolicyFactory: () => (/* binding */ NewRetryPolicyFactory),\n/* harmony export */   StorageRetryPolicy: () => (/* binding */ StorageRetryPolicy),\n/* harmony export */   StorageRetryPolicyType: () => (/* binding */ StorageRetryPolicyType)\n/* harmony export */ });\n/* harmony import */ var _azure_abort_controller__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/abort-controller */ \"(rsc)/./node_modules/@azure/abort-controller/dist/esm/index.js\");\n/* harmony import */ var _RequestPolicy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./RequestPolicy */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/RequestPolicy.js\");\n/* harmony import */ var _utils_constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/constants */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js\");\n/* harmony import */ var _utils_utils_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/utils.common */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js\");\n/* harmony import */ var _log__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../log */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/log.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n\n\n/**\n * A factory method used to generated a RetryPolicy factory.\n *\n * @param retryOptions -\n */\nfunction NewRetryPolicyFactory(retryOptions) {\n    return {\n        create: (nextPolicy, options) => {\n            return new StorageRetryPolicy(nextPolicy, options, retryOptions);\n        },\n    };\n}\n/**\n * RetryPolicy types.\n */\nvar StorageRetryPolicyType;\n(function (StorageRetryPolicyType) {\n    /**\n     * Exponential retry. Retry time delay grows exponentially.\n     */\n    StorageRetryPolicyType[StorageRetryPolicyType[\"EXPONENTIAL\"] = 0] = \"EXPONENTIAL\";\n    /**\n     * Linear retry. Retry time delay grows linearly.\n     */\n    StorageRetryPolicyType[StorageRetryPolicyType[\"FIXED\"] = 1] = \"FIXED\";\n})(StorageRetryPolicyType || (StorageRetryPolicyType = {}));\n// Default values of StorageRetryOptions\nconst DEFAULT_RETRY_OPTIONS = {\n    maxRetryDelayInMs: 120 * 1000,\n    maxTries: 4,\n    retryDelayInMs: 4 * 1000,\n    retryPolicyType: StorageRetryPolicyType.EXPONENTIAL,\n    secondaryHost: \"\",\n    tryTimeoutInMs: undefined, // Use server side default timeout strategy\n};\nconst RETRY_ABORT_ERROR = new _azure_abort_controller__WEBPACK_IMPORTED_MODULE_0__.AbortError(\"The operation was aborted.\");\n/**\n * Retry policy with exponential retry and linear retry implemented.\n */\nclass StorageRetryPolicy extends _RequestPolicy__WEBPACK_IMPORTED_MODULE_1__.BaseRequestPolicy {\n    /**\n     * Creates an instance of RetryPolicy.\n     *\n     * @param nextPolicy -\n     * @param options -\n     * @param retryOptions -\n     */\n    constructor(nextPolicy, options, retryOptions = DEFAULT_RETRY_OPTIONS) {\n        super(nextPolicy, options);\n        // Initialize retry options\n        this.retryOptions = {\n            retryPolicyType: retryOptions.retryPolicyType\n                ? retryOptions.retryPolicyType\n                : DEFAULT_RETRY_OPTIONS.retryPolicyType,\n            maxTries: retryOptions.maxTries && retryOptions.maxTries >= 1\n                ? Math.floor(retryOptions.maxTries)\n                : DEFAULT_RETRY_OPTIONS.maxTries,\n            tryTimeoutInMs: retryOptions.tryTimeoutInMs && retryOptions.tryTimeoutInMs >= 0\n                ? retryOptions.tryTimeoutInMs\n                : DEFAULT_RETRY_OPTIONS.tryTimeoutInMs,\n            retryDelayInMs: retryOptions.retryDelayInMs && retryOptions.retryDelayInMs >= 0\n                ? Math.min(retryOptions.retryDelayInMs, retryOptions.maxRetryDelayInMs\n                    ? retryOptions.maxRetryDelayInMs\n                    : DEFAULT_RETRY_OPTIONS.maxRetryDelayInMs)\n                : DEFAULT_RETRY_OPTIONS.retryDelayInMs,\n            maxRetryDelayInMs: retryOptions.maxRetryDelayInMs && retryOptions.maxRetryDelayInMs >= 0\n                ? retryOptions.maxRetryDelayInMs\n                : DEFAULT_RETRY_OPTIONS.maxRetryDelayInMs,\n            secondaryHost: retryOptions.secondaryHost\n                ? retryOptions.secondaryHost\n                : DEFAULT_RETRY_OPTIONS.secondaryHost,\n        };\n    }\n    /**\n     * Sends request.\n     *\n     * @param request -\n     */\n    async sendRequest(request) {\n        return this.attemptSendRequest(request, false, 1);\n    }\n    /**\n     * Decide and perform next retry. Won't mutate request parameter.\n     *\n     * @param request -\n     * @param secondaryHas404 -  If attempt was against the secondary & it returned a StatusNotFound (404), then\n     *                                   the resource was not found. This may be due to replication delay. So, in this\n     *                                   case, we'll never try the secondary again for this operation.\n     * @param attempt -           How many retries has been attempted to performed, starting from 1, which includes\n     *                                   the attempt will be performed by this method call.\n     */\n    async attemptSendRequest(request, secondaryHas404, attempt) {\n        const newRequest = request.clone();\n        const isPrimaryRetry = secondaryHas404 ||\n            !this.retryOptions.secondaryHost ||\n            !(request.method === \"GET\" || request.method === \"HEAD\" || request.method === \"OPTIONS\") ||\n            attempt % 2 === 1;\n        if (!isPrimaryRetry) {\n            newRequest.url = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_2__.setURLHost)(newRequest.url, this.retryOptions.secondaryHost);\n        }\n        // Set the server-side timeout query parameter \"timeout=[seconds]\"\n        if (this.retryOptions.tryTimeoutInMs) {\n            newRequest.url = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_2__.setURLParameter)(newRequest.url, _utils_constants__WEBPACK_IMPORTED_MODULE_3__.URLConstants.Parameters.TIMEOUT, Math.floor(this.retryOptions.tryTimeoutInMs / 1000).toString());\n        }\n        let response;\n        try {\n            _log__WEBPACK_IMPORTED_MODULE_4__.logger.info(`RetryPolicy: =====> Try=${attempt} ${isPrimaryRetry ? \"Primary\" : \"Secondary\"}`);\n            response = await this._nextPolicy.sendRequest(newRequest);\n            if (!this.shouldRetry(isPrimaryRetry, attempt, response)) {\n                return response;\n            }\n            secondaryHas404 = secondaryHas404 || (!isPrimaryRetry && response.status === 404);\n        }\n        catch (err) {\n            _log__WEBPACK_IMPORTED_MODULE_4__.logger.error(`RetryPolicy: Caught error, message: ${err.message}, code: ${err.code}`);\n            if (!this.shouldRetry(isPrimaryRetry, attempt, response, err)) {\n                throw err;\n            }\n        }\n        await this.delay(isPrimaryRetry, attempt, request.abortSignal);\n        return this.attemptSendRequest(request, secondaryHas404, ++attempt);\n    }\n    /**\n     * Decide whether to retry according to last HTTP response and retry counters.\n     *\n     * @param isPrimaryRetry -\n     * @param attempt -\n     * @param response -\n     * @param err -\n     */\n    shouldRetry(isPrimaryRetry, attempt, response, err) {\n        if (attempt >= this.retryOptions.maxTries) {\n            _log__WEBPACK_IMPORTED_MODULE_4__.logger.info(`RetryPolicy: Attempt(s) ${attempt} >= maxTries ${this.retryOptions\n                .maxTries}, no further try.`);\n            return false;\n        }\n        // Handle network failures, you may need to customize the list when you implement\n        // your own http client\n        const retriableErrors = [\n            \"ETIMEDOUT\",\n            \"ESOCKETTIMEDOUT\",\n            \"ECONNREFUSED\",\n            \"ECONNRESET\",\n            \"ENOENT\",\n            \"ENOTFOUND\",\n            \"TIMEOUT\",\n            \"EPIPE\",\n            \"REQUEST_SEND_ERROR\", // For default xhr based http client provided in ms-rest-js\n        ];\n        if (err) {\n            for (const retriableError of retriableErrors) {\n                if (err.name.toUpperCase().includes(retriableError) ||\n                    err.message.toUpperCase().includes(retriableError) ||\n                    (err.code && err.code.toString().toUpperCase() === retriableError)) {\n                    _log__WEBPACK_IMPORTED_MODULE_4__.logger.info(`RetryPolicy: Network error ${retriableError} found, will retry.`);\n                    return true;\n                }\n            }\n        }\n        // If attempt was against the secondary & it returned a StatusNotFound (404), then\n        // the resource was not found. This may be due to replication delay. So, in this\n        // case, we'll never try the secondary again for this operation.\n        if (response || err) {\n            const statusCode = response ? response.status : err ? err.statusCode : 0;\n            if (!isPrimaryRetry && statusCode === 404) {\n                _log__WEBPACK_IMPORTED_MODULE_4__.logger.info(`RetryPolicy: Secondary access with 404, will retry.`);\n                return true;\n            }\n            // Server internal error or server timeout\n            if (statusCode === 503 || statusCode === 500) {\n                _log__WEBPACK_IMPORTED_MODULE_4__.logger.info(`RetryPolicy: Will retry for status code ${statusCode}.`);\n                return true;\n            }\n        }\n        // [Copy source error code] Feature is pending on service side, skip retry on copy source error for now.\n        // if (response) {\n        //   // Retry select Copy Source Error Codes.\n        //   if (response?.status >= 400) {\n        //     const copySourceError = response.headers.get(HeaderConstants.X_MS_CopySourceErrorCode);\n        //     if (copySourceError !== undefined) {\n        //       switch (copySourceError) {\n        //         case \"InternalError\":\n        //         case \"OperationTimedOut\":\n        //         case \"ServerBusy\":\n        //           return true;\n        //       }\n        //     }\n        //   }\n        // }\n        if ((err === null || err === void 0 ? void 0 : err.code) === \"PARSE_ERROR\" && (err === null || err === void 0 ? void 0 : err.message.startsWith(`Error \"Error: Unclosed root tag`))) {\n            _log__WEBPACK_IMPORTED_MODULE_4__.logger.info(\"RetryPolicy: Incomplete XML response likely due to service timeout, will retry.\");\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Delay a calculated time between retries.\n     *\n     * @param isPrimaryRetry -\n     * @param attempt -\n     * @param abortSignal -\n     */\n    async delay(isPrimaryRetry, attempt, abortSignal) {\n        let delayTimeInMs = 0;\n        if (isPrimaryRetry) {\n            switch (this.retryOptions.retryPolicyType) {\n                case StorageRetryPolicyType.EXPONENTIAL:\n                    delayTimeInMs = Math.min((Math.pow(2, attempt - 1) - 1) * this.retryOptions.retryDelayInMs, this.retryOptions.maxRetryDelayInMs);\n                    break;\n                case StorageRetryPolicyType.FIXED:\n                    delayTimeInMs = this.retryOptions.retryDelayInMs;\n                    break;\n            }\n        }\n        else {\n            delayTimeInMs = Math.random() * 1000;\n        }\n        _log__WEBPACK_IMPORTED_MODULE_4__.logger.info(`RetryPolicy: Delay for ${delayTimeInMs}ms`);\n        return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_2__.delay)(delayTimeInMs, abortSignal, RETRY_ABORT_ERROR);\n    }\n}\n//# sourceMappingURL=StorageRetryPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageRetryPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageRetryPolicyV2.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageRetryPolicyV2.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StorageRetryPolicyType: () => (/* binding */ StorageRetryPolicyType),\n/* harmony export */   storageRetryPolicy: () => (/* binding */ storageRetryPolicy),\n/* harmony export */   storageRetryPolicyName: () => (/* binding */ storageRetryPolicyName)\n/* harmony export */ });\n/* harmony import */ var _azure_abort_controller__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/abort-controller */ \"(rsc)/./node_modules/@azure/abort-controller/dist/esm/index.js\");\n/* harmony import */ var _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/core-rest-pipeline */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/index.js\");\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @azure/core-util */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/index.js\");\n/* harmony import */ var _utils_constants__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/constants */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js\");\n/* harmony import */ var _utils_utils_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/utils.common */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js\");\n/* harmony import */ var _log__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../log */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/log.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n\n\n\n/**\n * Name of the {@link storageRetryPolicy}\n */\nconst storageRetryPolicyName = \"storageRetryPolicy\";\n/**\n * RetryPolicy types.\n */\nvar StorageRetryPolicyType;\n(function (StorageRetryPolicyType) {\n    /**\n     * Exponential retry. Retry time delay grows exponentially.\n     */\n    StorageRetryPolicyType[StorageRetryPolicyType[\"EXPONENTIAL\"] = 0] = \"EXPONENTIAL\";\n    /**\n     * Linear retry. Retry time delay grows linearly.\n     */\n    StorageRetryPolicyType[StorageRetryPolicyType[\"FIXED\"] = 1] = \"FIXED\";\n})(StorageRetryPolicyType || (StorageRetryPolicyType = {}));\n// Default values of StorageRetryOptions\nconst DEFAULT_RETRY_OPTIONS = {\n    maxRetryDelayInMs: 120 * 1000,\n    maxTries: 4,\n    retryDelayInMs: 4 * 1000,\n    retryPolicyType: StorageRetryPolicyType.EXPONENTIAL,\n    secondaryHost: \"\",\n    tryTimeoutInMs: undefined, // Use server side default timeout strategy\n};\nconst retriableErrors = [\n    \"ETIMEDOUT\",\n    \"ESOCKETTIMEDOUT\",\n    \"ECONNREFUSED\",\n    \"ECONNRESET\",\n    \"ENOENT\",\n    \"ENOTFOUND\",\n    \"TIMEOUT\",\n    \"EPIPE\",\n    \"REQUEST_SEND_ERROR\",\n];\nconst RETRY_ABORT_ERROR = new _azure_abort_controller__WEBPACK_IMPORTED_MODULE_0__.AbortError(\"The operation was aborted.\");\n/**\n * Retry policy with exponential retry and linear retry implemented.\n */\nfunction storageRetryPolicy(options = {}) {\n    var _a, _b, _c, _d, _e, _f;\n    const retryPolicyType = (_a = options.retryPolicyType) !== null && _a !== void 0 ? _a : DEFAULT_RETRY_OPTIONS.retryPolicyType;\n    const maxTries = (_b = options.maxTries) !== null && _b !== void 0 ? _b : DEFAULT_RETRY_OPTIONS.maxTries;\n    const retryDelayInMs = (_c = options.retryDelayInMs) !== null && _c !== void 0 ? _c : DEFAULT_RETRY_OPTIONS.retryDelayInMs;\n    const maxRetryDelayInMs = (_d = options.maxRetryDelayInMs) !== null && _d !== void 0 ? _d : DEFAULT_RETRY_OPTIONS.maxRetryDelayInMs;\n    const secondaryHost = (_e = options.secondaryHost) !== null && _e !== void 0 ? _e : DEFAULT_RETRY_OPTIONS.secondaryHost;\n    const tryTimeoutInMs = (_f = options.tryTimeoutInMs) !== null && _f !== void 0 ? _f : DEFAULT_RETRY_OPTIONS.tryTimeoutInMs;\n    function shouldRetry({ isPrimaryRetry, attempt, response, error, }) {\n        var _a, _b;\n        if (attempt >= maxTries) {\n            _log__WEBPACK_IMPORTED_MODULE_3__.logger.info(`RetryPolicy: Attempt(s) ${attempt} >= maxTries ${maxTries}, no further try.`);\n            return false;\n        }\n        if (error) {\n            for (const retriableError of retriableErrors) {\n                if (error.name.toUpperCase().includes(retriableError) ||\n                    error.message.toUpperCase().includes(retriableError) ||\n                    (error.code && error.code.toString().toUpperCase() === retriableError)) {\n                    _log__WEBPACK_IMPORTED_MODULE_3__.logger.info(`RetryPolicy: Network error ${retriableError} found, will retry.`);\n                    return true;\n                }\n            }\n            if ((error === null || error === void 0 ? void 0 : error.code) === \"PARSE_ERROR\" &&\n                (error === null || error === void 0 ? void 0 : error.message.startsWith(`Error \"Error: Unclosed root tag`))) {\n                _log__WEBPACK_IMPORTED_MODULE_3__.logger.info(\"RetryPolicy: Incomplete XML response likely due to service timeout, will retry.\");\n                return true;\n            }\n        }\n        // If attempt was against the secondary & it returned a StatusNotFound (404), then\n        // the resource was not found. This may be due to replication delay. So, in this\n        // case, we'll never try the secondary again for this operation.\n        if (response || error) {\n            const statusCode = (_b = (_a = response === null || response === void 0 ? void 0 : response.status) !== null && _a !== void 0 ? _a : error === null || error === void 0 ? void 0 : error.statusCode) !== null && _b !== void 0 ? _b : 0;\n            if (!isPrimaryRetry && statusCode === 404) {\n                _log__WEBPACK_IMPORTED_MODULE_3__.logger.info(`RetryPolicy: Secondary access with 404, will retry.`);\n                return true;\n            }\n            // Server internal error or server timeout\n            if (statusCode === 503 || statusCode === 500) {\n                _log__WEBPACK_IMPORTED_MODULE_3__.logger.info(`RetryPolicy: Will retry for status code ${statusCode}.`);\n                return true;\n            }\n        }\n        // [Copy source error code] Feature is pending on service side, skip retry on copy source error for now.\n        // if (response) {\n        //   // Retry select Copy Source Error Codes.\n        //   if (response?.status >= 400) {\n        //     const copySourceError = response.headers.get(HeaderConstants.X_MS_CopySourceErrorCode);\n        //     if (copySourceError !== undefined) {\n        //       switch (copySourceError) {\n        //         case \"InternalError\":\n        //         case \"OperationTimedOut\":\n        //         case \"ServerBusy\":\n        //           return true;\n        //       }\n        //     }\n        //   }\n        // }\n        return false;\n    }\n    function calculateDelay(isPrimaryRetry, attempt) {\n        let delayTimeInMs = 0;\n        if (isPrimaryRetry) {\n            switch (retryPolicyType) {\n                case StorageRetryPolicyType.EXPONENTIAL:\n                    delayTimeInMs = Math.min((Math.pow(2, attempt - 1) - 1) * retryDelayInMs, maxRetryDelayInMs);\n                    break;\n                case StorageRetryPolicyType.FIXED:\n                    delayTimeInMs = retryDelayInMs;\n                    break;\n            }\n        }\n        else {\n            delayTimeInMs = Math.random() * 1000;\n        }\n        _log__WEBPACK_IMPORTED_MODULE_3__.logger.info(`RetryPolicy: Delay for ${delayTimeInMs}ms`);\n        return delayTimeInMs;\n    }\n    return {\n        name: storageRetryPolicyName,\n        async sendRequest(request, next) {\n            // Set the server-side timeout query parameter \"timeout=[seconds]\"\n            if (tryTimeoutInMs) {\n                request.url = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_4__.setURLParameter)(request.url, _utils_constants__WEBPACK_IMPORTED_MODULE_5__.URLConstants.Parameters.TIMEOUT, String(Math.floor(tryTimeoutInMs / 1000)));\n            }\n            const primaryUrl = request.url;\n            const secondaryUrl = secondaryHost ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_4__.setURLHost)(request.url, secondaryHost) : undefined;\n            let secondaryHas404 = false;\n            let attempt = 1;\n            let retryAgain = true;\n            let response;\n            let error;\n            while (retryAgain) {\n                const isPrimaryRetry = secondaryHas404 ||\n                    !secondaryUrl ||\n                    ![\"GET\", \"HEAD\", \"OPTIONS\"].includes(request.method) ||\n                    attempt % 2 === 1;\n                request.url = isPrimaryRetry ? primaryUrl : secondaryUrl;\n                response = undefined;\n                error = undefined;\n                try {\n                    _log__WEBPACK_IMPORTED_MODULE_3__.logger.info(`RetryPolicy: =====> Try=${attempt} ${isPrimaryRetry ? \"Primary\" : \"Secondary\"}`);\n                    response = await next(request);\n                    secondaryHas404 = secondaryHas404 || (!isPrimaryRetry && response.status === 404);\n                }\n                catch (e) {\n                    if ((0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_1__.isRestError)(e)) {\n                        _log__WEBPACK_IMPORTED_MODULE_3__.logger.error(`RetryPolicy: Caught error, message: ${e.message}, code: ${e.code}`);\n                        error = e;\n                    }\n                    else {\n                        _log__WEBPACK_IMPORTED_MODULE_3__.logger.error(`RetryPolicy: Caught error, message: ${(0,_azure_core_util__WEBPACK_IMPORTED_MODULE_2__.getErrorMessage)(e)}`);\n                        throw e;\n                    }\n                }\n                retryAgain = shouldRetry({ isPrimaryRetry, attempt, response, error });\n                if (retryAgain) {\n                    await (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_4__.delay)(calculateDelay(isPrimaryRetry, attempt), request.abortSignal, RETRY_ABORT_ERROR);\n                }\n                attempt++;\n            }\n            if (response) {\n                return response;\n            }\n            throw error !== null && error !== void 0 ? error : new _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_1__.RestError(\"RetryPolicy failed without known error.\");\n        },\n    };\n}\n//# sourceMappingURL=StorageRetryPolicyV2.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageRetryPolicyV2.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageSharedKeyCredentialPolicy.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageSharedKeyCredentialPolicy.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StorageSharedKeyCredentialPolicy: () => (/* binding */ StorageSharedKeyCredentialPolicy)\n/* harmony export */ });\n/* harmony import */ var _utils_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/constants */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js\");\n/* harmony import */ var _utils_utils_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/utils.common */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js\");\n/* harmony import */ var _CredentialPolicy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CredentialPolicy */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/CredentialPolicy.js\");\n/* harmony import */ var _utils_SharedKeyComparator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/SharedKeyComparator */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/SharedKeyComparator.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n\n/**\n * StorageSharedKeyCredentialPolicy is a policy used to sign HTTP request with a shared key.\n */\nclass StorageSharedKeyCredentialPolicy extends _CredentialPolicy__WEBPACK_IMPORTED_MODULE_0__.CredentialPolicy {\n    /**\n     * Creates an instance of StorageSharedKeyCredentialPolicy.\n     * @param nextPolicy -\n     * @param options -\n     * @param factory -\n     */\n    constructor(nextPolicy, options, factory) {\n        super(nextPolicy, options);\n        this.factory = factory;\n    }\n    /**\n     * Signs request.\n     *\n     * @param request -\n     */\n    signRequest(request) {\n        request.headers.set(_utils_constants__WEBPACK_IMPORTED_MODULE_1__.HeaderConstants.X_MS_DATE, new Date().toUTCString());\n        if (request.body &&\n            (typeof request.body === \"string\" || request.body !== undefined) &&\n            request.body.length > 0) {\n            request.headers.set(_utils_constants__WEBPACK_IMPORTED_MODULE_1__.HeaderConstants.CONTENT_LENGTH, Buffer.byteLength(request.body));\n        }\n        const stringToSign = [\n            request.method.toUpperCase(),\n            this.getHeaderValueToSign(request, _utils_constants__WEBPACK_IMPORTED_MODULE_1__.HeaderConstants.CONTENT_LANGUAGE),\n            this.getHeaderValueToSign(request, _utils_constants__WEBPACK_IMPORTED_MODULE_1__.HeaderConstants.CONTENT_ENCODING),\n            this.getHeaderValueToSign(request, _utils_constants__WEBPACK_IMPORTED_MODULE_1__.HeaderConstants.CONTENT_LENGTH),\n            this.getHeaderValueToSign(request, _utils_constants__WEBPACK_IMPORTED_MODULE_1__.HeaderConstants.CONTENT_MD5),\n            this.getHeaderValueToSign(request, _utils_constants__WEBPACK_IMPORTED_MODULE_1__.HeaderConstants.CONTENT_TYPE),\n            this.getHeaderValueToSign(request, _utils_constants__WEBPACK_IMPORTED_MODULE_1__.HeaderConstants.DATE),\n            this.getHeaderValueToSign(request, _utils_constants__WEBPACK_IMPORTED_MODULE_1__.HeaderConstants.IF_MODIFIED_SINCE),\n            this.getHeaderValueToSign(request, _utils_constants__WEBPACK_IMPORTED_MODULE_1__.HeaderConstants.IF_MATCH),\n            this.getHeaderValueToSign(request, _utils_constants__WEBPACK_IMPORTED_MODULE_1__.HeaderConstants.IF_NONE_MATCH),\n            this.getHeaderValueToSign(request, _utils_constants__WEBPACK_IMPORTED_MODULE_1__.HeaderConstants.IF_UNMODIFIED_SINCE),\n            this.getHeaderValueToSign(request, _utils_constants__WEBPACK_IMPORTED_MODULE_1__.HeaderConstants.RANGE),\n        ].join(\"\\n\") +\n            \"\\n\" +\n            this.getCanonicalizedHeadersString(request) +\n            this.getCanonicalizedResourceString(request);\n        const signature = this.factory.computeHMACSHA256(stringToSign);\n        request.headers.set(_utils_constants__WEBPACK_IMPORTED_MODULE_1__.HeaderConstants.AUTHORIZATION, `SharedKey ${this.factory.accountName}:${signature}`);\n        // console.log(`[URL]:${request.url}`);\n        // console.log(`[HEADERS]:${request.headers.toString()}`);\n        // console.log(`[STRING TO SIGN]:${JSON.stringify(stringToSign)}`);\n        // console.log(`[KEY]: ${request.headers.get(HeaderConstants.AUTHORIZATION)}`);\n        return request;\n    }\n    /**\n     * Retrieve header value according to shared key sign rules.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/authenticate-with-shared-key\n     *\n     * @param request -\n     * @param headerName -\n     */\n    getHeaderValueToSign(request, headerName) {\n        const value = request.headers.get(headerName);\n        if (!value) {\n            return \"\";\n        }\n        // When using version 2015-02-21 or later, if Content-Length is zero, then\n        // set the Content-Length part of the StringToSign to an empty string.\n        // https://docs.microsoft.com/en-us/rest/api/storageservices/authenticate-with-shared-key\n        if (headerName === _utils_constants__WEBPACK_IMPORTED_MODULE_1__.HeaderConstants.CONTENT_LENGTH && value === \"0\") {\n            return \"\";\n        }\n        return value;\n    }\n    /**\n     * To construct the CanonicalizedHeaders portion of the signature string, follow these steps:\n     * 1. Retrieve all headers for the resource that begin with x-ms-, including the x-ms-date header.\n     * 2. Convert each HTTP header name to lowercase.\n     * 3. Sort the headers lexicographically by header name, in ascending order.\n     *    Each header may appear only once in the string.\n     * 4. Replace any linear whitespace in the header value with a single space.\n     * 5. Trim any whitespace around the colon in the header.\n     * 6. Finally, append a new-line character to each canonicalized header in the resulting list.\n     *    Construct the CanonicalizedHeaders string by concatenating all headers in this list into a single string.\n     *\n     * @param request -\n     */\n    getCanonicalizedHeadersString(request) {\n        let headersArray = request.headers.headersArray().filter((value) => {\n            return value.name.toLowerCase().startsWith(_utils_constants__WEBPACK_IMPORTED_MODULE_1__.HeaderConstants.PREFIX_FOR_STORAGE);\n        });\n        headersArray.sort((a, b) => {\n            return (0,_utils_SharedKeyComparator__WEBPACK_IMPORTED_MODULE_2__.compareHeader)(a.name.toLowerCase(), b.name.toLowerCase());\n        });\n        // Remove duplicate headers\n        headersArray = headersArray.filter((value, index, array) => {\n            if (index > 0 && value.name.toLowerCase() === array[index - 1].name.toLowerCase()) {\n                return false;\n            }\n            return true;\n        });\n        let canonicalizedHeadersStringToSign = \"\";\n        headersArray.forEach((header) => {\n            canonicalizedHeadersStringToSign += `${header.name\n                .toLowerCase()\n                .trimRight()}:${header.value.trimLeft()}\\n`;\n        });\n        return canonicalizedHeadersStringToSign;\n    }\n    /**\n     * Retrieves the webResource canonicalized resource string.\n     *\n     * @param request -\n     */\n    getCanonicalizedResourceString(request) {\n        const path = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_3__.getURLPath)(request.url) || \"/\";\n        let canonicalizedResourceString = \"\";\n        canonicalizedResourceString += `/${this.factory.accountName}${path}`;\n        const queries = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_3__.getURLQueries)(request.url);\n        const lowercaseQueries = {};\n        if (queries) {\n            const queryKeys = [];\n            for (const key in queries) {\n                if (Object.prototype.hasOwnProperty.call(queries, key)) {\n                    const lowercaseKey = key.toLowerCase();\n                    lowercaseQueries[lowercaseKey] = queries[key];\n                    queryKeys.push(lowercaseKey);\n                }\n            }\n            queryKeys.sort();\n            for (const key of queryKeys) {\n                canonicalizedResourceString += `\\n${key}:${decodeURIComponent(lowercaseQueries[key])}`;\n            }\n        }\n        return canonicalizedResourceString;\n    }\n}\n//# sourceMappingURL=StorageSharedKeyCredentialPolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL3BvbGljaWVzL1N0b3JhZ2VTaGFyZWRLZXlDcmVkZW50aWFsUG9saWN5LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNxRDtBQUNhO0FBQ1o7QUFDTztBQUM3RDtBQUNBO0FBQ0E7QUFDTywrQ0FBK0MsK0RBQWdCO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLDZEQUFlO0FBQzNDO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyw2REFBZTtBQUMvQztBQUNBO0FBQ0E7QUFDQSwrQ0FBK0MsNkRBQWU7QUFDOUQsK0NBQStDLDZEQUFlO0FBQzlELCtDQUErQyw2REFBZTtBQUM5RCwrQ0FBK0MsNkRBQWU7QUFDOUQsK0NBQStDLDZEQUFlO0FBQzlELCtDQUErQyw2REFBZTtBQUM5RCwrQ0FBK0MsNkRBQWU7QUFDOUQsK0NBQStDLDZEQUFlO0FBQzlELCtDQUErQyw2REFBZTtBQUM5RCwrQ0FBK0MsNkRBQWU7QUFDOUQsK0NBQStDLDZEQUFlO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsNkRBQWUsNkJBQTZCLHlCQUF5QixHQUFHLFVBQVU7QUFDOUcsZ0NBQWdDLFlBQVk7QUFDNUMsb0NBQW9DLDJCQUEyQjtBQUMvRCwyQ0FBMkMsNkJBQTZCO0FBQ3hFLGlDQUFpQyxtREFBbUQ7QUFDcEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQiw2REFBZTtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVEQUF1RCw2REFBZTtBQUN0RSxTQUFTO0FBQ1Q7QUFDQSxtQkFBbUIseUVBQWE7QUFDaEMsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsbURBQW1EO0FBQ25EO0FBQ0EsNkJBQTZCLEdBQUcsd0JBQXdCO0FBQ3hELFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLCtEQUFVO0FBQy9CO0FBQ0EsMkNBQTJDLHlCQUF5QixFQUFFLEtBQUs7QUFDM0Usd0JBQXdCLGtFQUFhO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxJQUFJLEdBQUcsMENBQTBDO0FBQ3JHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcndpbHNvbi9EZXNrdG9wL3Byb2plY3RzL0VaVml6L25vZGVfbW9kdWxlcy9AYXp1cmUvc3RvcmFnZS1ibG9iL2Rpc3QtZXNtL3N0b3JhZ2UtYmxvYi9zcmMvcG9saWNpZXMvU3RvcmFnZVNoYXJlZEtleUNyZWRlbnRpYWxQb2xpY3kuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5pbXBvcnQgeyBIZWFkZXJDb25zdGFudHMgfSBmcm9tIFwiLi4vdXRpbHMvY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBnZXRVUkxQYXRoLCBnZXRVUkxRdWVyaWVzIH0gZnJvbSBcIi4uL3V0aWxzL3V0aWxzLmNvbW1vblwiO1xuaW1wb3J0IHsgQ3JlZGVudGlhbFBvbGljeSB9IGZyb20gXCIuL0NyZWRlbnRpYWxQb2xpY3lcIjtcbmltcG9ydCB7IGNvbXBhcmVIZWFkZXIgfSBmcm9tIFwiLi4vdXRpbHMvU2hhcmVkS2V5Q29tcGFyYXRvclwiO1xuLyoqXG4gKiBTdG9yYWdlU2hhcmVkS2V5Q3JlZGVudGlhbFBvbGljeSBpcyBhIHBvbGljeSB1c2VkIHRvIHNpZ24gSFRUUCByZXF1ZXN0IHdpdGggYSBzaGFyZWQga2V5LlxuICovXG5leHBvcnQgY2xhc3MgU3RvcmFnZVNoYXJlZEtleUNyZWRlbnRpYWxQb2xpY3kgZXh0ZW5kcyBDcmVkZW50aWFsUG9saWN5IHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIFN0b3JhZ2VTaGFyZWRLZXlDcmVkZW50aWFsUG9saWN5LlxuICAgICAqIEBwYXJhbSBuZXh0UG9saWN5IC1cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtXG4gICAgICogQHBhcmFtIGZhY3RvcnkgLVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG5leHRQb2xpY3ksIG9wdGlvbnMsIGZhY3RvcnkpIHtcbiAgICAgICAgc3VwZXIobmV4dFBvbGljeSwgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMuZmFjdG9yeSA9IGZhY3Rvcnk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNpZ25zIHJlcXVlc3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcmVxdWVzdCAtXG4gICAgICovXG4gICAgc2lnblJlcXVlc3QocmVxdWVzdCkge1xuICAgICAgICByZXF1ZXN0LmhlYWRlcnMuc2V0KEhlYWRlckNvbnN0YW50cy5YX01TX0RBVEUsIG5ldyBEYXRlKCkudG9VVENTdHJpbmcoKSk7XG4gICAgICAgIGlmIChyZXF1ZXN0LmJvZHkgJiZcbiAgICAgICAgICAgICh0eXBlb2YgcmVxdWVzdC5ib2R5ID09PSBcInN0cmluZ1wiIHx8IHJlcXVlc3QuYm9keSAhPT0gdW5kZWZpbmVkKSAmJlxuICAgICAgICAgICAgcmVxdWVzdC5ib2R5Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHJlcXVlc3QuaGVhZGVycy5zZXQoSGVhZGVyQ29uc3RhbnRzLkNPTlRFTlRfTEVOR1RILCBCdWZmZXIuYnl0ZUxlbmd0aChyZXF1ZXN0LmJvZHkpKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzdHJpbmdUb1NpZ24gPSBbXG4gICAgICAgICAgICByZXF1ZXN0Lm1ldGhvZC50b1VwcGVyQ2FzZSgpLFxuICAgICAgICAgICAgdGhpcy5nZXRIZWFkZXJWYWx1ZVRvU2lnbihyZXF1ZXN0LCBIZWFkZXJDb25zdGFudHMuQ09OVEVOVF9MQU5HVUFHRSksXG4gICAgICAgICAgICB0aGlzLmdldEhlYWRlclZhbHVlVG9TaWduKHJlcXVlc3QsIEhlYWRlckNvbnN0YW50cy5DT05URU5UX0VOQ09ESU5HKSxcbiAgICAgICAgICAgIHRoaXMuZ2V0SGVhZGVyVmFsdWVUb1NpZ24ocmVxdWVzdCwgSGVhZGVyQ29uc3RhbnRzLkNPTlRFTlRfTEVOR1RIKSxcbiAgICAgICAgICAgIHRoaXMuZ2V0SGVhZGVyVmFsdWVUb1NpZ24ocmVxdWVzdCwgSGVhZGVyQ29uc3RhbnRzLkNPTlRFTlRfTUQ1KSxcbiAgICAgICAgICAgIHRoaXMuZ2V0SGVhZGVyVmFsdWVUb1NpZ24ocmVxdWVzdCwgSGVhZGVyQ29uc3RhbnRzLkNPTlRFTlRfVFlQRSksXG4gICAgICAgICAgICB0aGlzLmdldEhlYWRlclZhbHVlVG9TaWduKHJlcXVlc3QsIEhlYWRlckNvbnN0YW50cy5EQVRFKSxcbiAgICAgICAgICAgIHRoaXMuZ2V0SGVhZGVyVmFsdWVUb1NpZ24ocmVxdWVzdCwgSGVhZGVyQ29uc3RhbnRzLklGX01PRElGSUVEX1NJTkNFKSxcbiAgICAgICAgICAgIHRoaXMuZ2V0SGVhZGVyVmFsdWVUb1NpZ24ocmVxdWVzdCwgSGVhZGVyQ29uc3RhbnRzLklGX01BVENIKSxcbiAgICAgICAgICAgIHRoaXMuZ2V0SGVhZGVyVmFsdWVUb1NpZ24ocmVxdWVzdCwgSGVhZGVyQ29uc3RhbnRzLklGX05PTkVfTUFUQ0gpLFxuICAgICAgICAgICAgdGhpcy5nZXRIZWFkZXJWYWx1ZVRvU2lnbihyZXF1ZXN0LCBIZWFkZXJDb25zdGFudHMuSUZfVU5NT0RJRklFRF9TSU5DRSksXG4gICAgICAgICAgICB0aGlzLmdldEhlYWRlclZhbHVlVG9TaWduKHJlcXVlc3QsIEhlYWRlckNvbnN0YW50cy5SQU5HRSksXG4gICAgICAgIF0uam9pbihcIlxcblwiKSArXG4gICAgICAgICAgICBcIlxcblwiICtcbiAgICAgICAgICAgIHRoaXMuZ2V0Q2Fub25pY2FsaXplZEhlYWRlcnNTdHJpbmcocmVxdWVzdCkgK1xuICAgICAgICAgICAgdGhpcy5nZXRDYW5vbmljYWxpemVkUmVzb3VyY2VTdHJpbmcocmVxdWVzdCk7XG4gICAgICAgIGNvbnN0IHNpZ25hdHVyZSA9IHRoaXMuZmFjdG9yeS5jb21wdXRlSE1BQ1NIQTI1NihzdHJpbmdUb1NpZ24pO1xuICAgICAgICByZXF1ZXN0LmhlYWRlcnMuc2V0KEhlYWRlckNvbnN0YW50cy5BVVRIT1JJWkFUSU9OLCBgU2hhcmVkS2V5ICR7dGhpcy5mYWN0b3J5LmFjY291bnROYW1lfToke3NpZ25hdHVyZX1gKTtcbiAgICAgICAgLy8gY29uc29sZS5sb2coYFtVUkxdOiR7cmVxdWVzdC51cmx9YCk7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGBbSEVBREVSU106JHtyZXF1ZXN0LmhlYWRlcnMudG9TdHJpbmcoKX1gKTtcbiAgICAgICAgLy8gY29uc29sZS5sb2coYFtTVFJJTkcgVE8gU0lHTl06JHtKU09OLnN0cmluZ2lmeShzdHJpbmdUb1NpZ24pfWApO1xuICAgICAgICAvLyBjb25zb2xlLmxvZyhgW0tFWV06ICR7cmVxdWVzdC5oZWFkZXJzLmdldChIZWFkZXJDb25zdGFudHMuQVVUSE9SSVpBVElPTil9YCk7XG4gICAgICAgIHJldHVybiByZXF1ZXN0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZSBoZWFkZXIgdmFsdWUgYWNjb3JkaW5nIHRvIHNoYXJlZCBrZXkgc2lnbiBydWxlcy5cbiAgICAgKiBAc2VlIGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2VuLXVzL3Jlc3QvYXBpL3N0b3JhZ2VzZXJ2aWNlcy9hdXRoZW50aWNhdGUtd2l0aC1zaGFyZWQta2V5XG4gICAgICpcbiAgICAgKiBAcGFyYW0gcmVxdWVzdCAtXG4gICAgICogQHBhcmFtIGhlYWRlck5hbWUgLVxuICAgICAqL1xuICAgIGdldEhlYWRlclZhbHVlVG9TaWduKHJlcXVlc3QsIGhlYWRlck5hbWUpIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSByZXF1ZXN0LmhlYWRlcnMuZ2V0KGhlYWRlck5hbWUpO1xuICAgICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJcIjtcbiAgICAgICAgfVxuICAgICAgICAvLyBXaGVuIHVzaW5nIHZlcnNpb24gMjAxNS0wMi0yMSBvciBsYXRlciwgaWYgQ29udGVudC1MZW5ndGggaXMgemVybywgdGhlblxuICAgICAgICAvLyBzZXQgdGhlIENvbnRlbnQtTGVuZ3RoIHBhcnQgb2YgdGhlIFN0cmluZ1RvU2lnbiB0byBhbiBlbXB0eSBzdHJpbmcuXG4gICAgICAgIC8vIGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2VuLXVzL3Jlc3QvYXBpL3N0b3JhZ2VzZXJ2aWNlcy9hdXRoZW50aWNhdGUtd2l0aC1zaGFyZWQta2V5XG4gICAgICAgIGlmIChoZWFkZXJOYW1lID09PSBIZWFkZXJDb25zdGFudHMuQ09OVEVOVF9MRU5HVEggJiYgdmFsdWUgPT09IFwiMFwiKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJcIjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRvIGNvbnN0cnVjdCB0aGUgQ2Fub25pY2FsaXplZEhlYWRlcnMgcG9ydGlvbiBvZiB0aGUgc2lnbmF0dXJlIHN0cmluZywgZm9sbG93IHRoZXNlIHN0ZXBzOlxuICAgICAqIDEuIFJldHJpZXZlIGFsbCBoZWFkZXJzIGZvciB0aGUgcmVzb3VyY2UgdGhhdCBiZWdpbiB3aXRoIHgtbXMtLCBpbmNsdWRpbmcgdGhlIHgtbXMtZGF0ZSBoZWFkZXIuXG4gICAgICogMi4gQ29udmVydCBlYWNoIEhUVFAgaGVhZGVyIG5hbWUgdG8gbG93ZXJjYXNlLlxuICAgICAqIDMuIFNvcnQgdGhlIGhlYWRlcnMgbGV4aWNvZ3JhcGhpY2FsbHkgYnkgaGVhZGVyIG5hbWUsIGluIGFzY2VuZGluZyBvcmRlci5cbiAgICAgKiAgICBFYWNoIGhlYWRlciBtYXkgYXBwZWFyIG9ubHkgb25jZSBpbiB0aGUgc3RyaW5nLlxuICAgICAqIDQuIFJlcGxhY2UgYW55IGxpbmVhciB3aGl0ZXNwYWNlIGluIHRoZSBoZWFkZXIgdmFsdWUgd2l0aCBhIHNpbmdsZSBzcGFjZS5cbiAgICAgKiA1LiBUcmltIGFueSB3aGl0ZXNwYWNlIGFyb3VuZCB0aGUgY29sb24gaW4gdGhlIGhlYWRlci5cbiAgICAgKiA2LiBGaW5hbGx5LCBhcHBlbmQgYSBuZXctbGluZSBjaGFyYWN0ZXIgdG8gZWFjaCBjYW5vbmljYWxpemVkIGhlYWRlciBpbiB0aGUgcmVzdWx0aW5nIGxpc3QuXG4gICAgICogICAgQ29uc3RydWN0IHRoZSBDYW5vbmljYWxpemVkSGVhZGVycyBzdHJpbmcgYnkgY29uY2F0ZW5hdGluZyBhbGwgaGVhZGVycyBpbiB0aGlzIGxpc3QgaW50byBhIHNpbmdsZSBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcmVxdWVzdCAtXG4gICAgICovXG4gICAgZ2V0Q2Fub25pY2FsaXplZEhlYWRlcnNTdHJpbmcocmVxdWVzdCkge1xuICAgICAgICBsZXQgaGVhZGVyc0FycmF5ID0gcmVxdWVzdC5oZWFkZXJzLmhlYWRlcnNBcnJheSgpLmZpbHRlcigodmFsdWUpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS5uYW1lLnRvTG93ZXJDYXNlKCkuc3RhcnRzV2l0aChIZWFkZXJDb25zdGFudHMuUFJFRklYX0ZPUl9TVE9SQUdFKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGhlYWRlcnNBcnJheS5zb3J0KChhLCBiKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gY29tcGFyZUhlYWRlcihhLm5hbWUudG9Mb3dlckNhc2UoKSwgYi5uYW1lLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gUmVtb3ZlIGR1cGxpY2F0ZSBoZWFkZXJzXG4gICAgICAgIGhlYWRlcnNBcnJheSA9IGhlYWRlcnNBcnJheS5maWx0ZXIoKHZhbHVlLCBpbmRleCwgYXJyYXkpID0+IHtcbiAgICAgICAgICAgIGlmIChpbmRleCA+IDAgJiYgdmFsdWUubmFtZS50b0xvd2VyQ2FzZSgpID09PSBhcnJheVtpbmRleCAtIDFdLm5hbWUudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9KTtcbiAgICAgICAgbGV0IGNhbm9uaWNhbGl6ZWRIZWFkZXJzU3RyaW5nVG9TaWduID0gXCJcIjtcbiAgICAgICAgaGVhZGVyc0FycmF5LmZvckVhY2goKGhlYWRlcikgPT4ge1xuICAgICAgICAgICAgY2Fub25pY2FsaXplZEhlYWRlcnNTdHJpbmdUb1NpZ24gKz0gYCR7aGVhZGVyLm5hbWVcbiAgICAgICAgICAgICAgICAudG9Mb3dlckNhc2UoKVxuICAgICAgICAgICAgICAgIC50cmltUmlnaHQoKX06JHtoZWFkZXIudmFsdWUudHJpbUxlZnQoKX1cXG5gO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGNhbm9uaWNhbGl6ZWRIZWFkZXJzU3RyaW5nVG9TaWduO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgdGhlIHdlYlJlc291cmNlIGNhbm9uaWNhbGl6ZWQgcmVzb3VyY2Ugc3RyaW5nLlxuICAgICAqXG4gICAgICogQHBhcmFtIHJlcXVlc3QgLVxuICAgICAqL1xuICAgIGdldENhbm9uaWNhbGl6ZWRSZXNvdXJjZVN0cmluZyhyZXF1ZXN0KSB7XG4gICAgICAgIGNvbnN0IHBhdGggPSBnZXRVUkxQYXRoKHJlcXVlc3QudXJsKSB8fCBcIi9cIjtcbiAgICAgICAgbGV0IGNhbm9uaWNhbGl6ZWRSZXNvdXJjZVN0cmluZyA9IFwiXCI7XG4gICAgICAgIGNhbm9uaWNhbGl6ZWRSZXNvdXJjZVN0cmluZyArPSBgLyR7dGhpcy5mYWN0b3J5LmFjY291bnROYW1lfSR7cGF0aH1gO1xuICAgICAgICBjb25zdCBxdWVyaWVzID0gZ2V0VVJMUXVlcmllcyhyZXF1ZXN0LnVybCk7XG4gICAgICAgIGNvbnN0IGxvd2VyY2FzZVF1ZXJpZXMgPSB7fTtcbiAgICAgICAgaWYgKHF1ZXJpZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IHF1ZXJ5S2V5cyA9IFtdO1xuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gcXVlcmllcykge1xuICAgICAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocXVlcmllcywga2V5KSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBsb3dlcmNhc2VLZXkgPSBrZXkudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgbG93ZXJjYXNlUXVlcmllc1tsb3dlcmNhc2VLZXldID0gcXVlcmllc1trZXldO1xuICAgICAgICAgICAgICAgICAgICBxdWVyeUtleXMucHVzaChsb3dlcmNhc2VLZXkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHF1ZXJ5S2V5cy5zb3J0KCk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBxdWVyeUtleXMpIHtcbiAgICAgICAgICAgICAgICBjYW5vbmljYWxpemVkUmVzb3VyY2VTdHJpbmcgKz0gYFxcbiR7a2V5fToke2RlY29kZVVSSUNvbXBvbmVudChsb3dlcmNhc2VRdWVyaWVzW2tleV0pfWA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNhbm9uaWNhbGl6ZWRSZXNvdXJjZVN0cmluZztcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TdG9yYWdlU2hhcmVkS2V5Q3JlZGVudGlhbFBvbGljeS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageSharedKeyCredentialPolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageSharedKeyCredentialPolicyV2.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageSharedKeyCredentialPolicyV2.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   storageSharedKeyCredentialPolicy: () => (/* binding */ storageSharedKeyCredentialPolicy),\n/* harmony export */   storageSharedKeyCredentialPolicyName: () => (/* binding */ storageSharedKeyCredentialPolicyName)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _utils_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/constants */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js\");\n/* harmony import */ var _utils_utils_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/utils.common */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js\");\n/* harmony import */ var _utils_SharedKeyComparator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/SharedKeyComparator */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/SharedKeyComparator.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n\n/**\n * The programmatic identifier of the storageSharedKeyCredentialPolicy.\n */\nconst storageSharedKeyCredentialPolicyName = \"storageSharedKeyCredentialPolicy\";\n/**\n * storageSharedKeyCredentialPolicy handles signing requests using storage account keys.\n */\nfunction storageSharedKeyCredentialPolicy(options) {\n    function signRequest(request) {\n        request.headers.set(_utils_constants__WEBPACK_IMPORTED_MODULE_1__.HeaderConstants.X_MS_DATE, new Date().toUTCString());\n        if (request.body &&\n            (typeof request.body === \"string\" || Buffer.isBuffer(request.body)) &&\n            request.body.length > 0) {\n            request.headers.set(_utils_constants__WEBPACK_IMPORTED_MODULE_1__.HeaderConstants.CONTENT_LENGTH, Buffer.byteLength(request.body));\n        }\n        const stringToSign = [\n            request.method.toUpperCase(),\n            getHeaderValueToSign(request, _utils_constants__WEBPACK_IMPORTED_MODULE_1__.HeaderConstants.CONTENT_LANGUAGE),\n            getHeaderValueToSign(request, _utils_constants__WEBPACK_IMPORTED_MODULE_1__.HeaderConstants.CONTENT_ENCODING),\n            getHeaderValueToSign(request, _utils_constants__WEBPACK_IMPORTED_MODULE_1__.HeaderConstants.CONTENT_LENGTH),\n            getHeaderValueToSign(request, _utils_constants__WEBPACK_IMPORTED_MODULE_1__.HeaderConstants.CONTENT_MD5),\n            getHeaderValueToSign(request, _utils_constants__WEBPACK_IMPORTED_MODULE_1__.HeaderConstants.CONTENT_TYPE),\n            getHeaderValueToSign(request, _utils_constants__WEBPACK_IMPORTED_MODULE_1__.HeaderConstants.DATE),\n            getHeaderValueToSign(request, _utils_constants__WEBPACK_IMPORTED_MODULE_1__.HeaderConstants.IF_MODIFIED_SINCE),\n            getHeaderValueToSign(request, _utils_constants__WEBPACK_IMPORTED_MODULE_1__.HeaderConstants.IF_MATCH),\n            getHeaderValueToSign(request, _utils_constants__WEBPACK_IMPORTED_MODULE_1__.HeaderConstants.IF_NONE_MATCH),\n            getHeaderValueToSign(request, _utils_constants__WEBPACK_IMPORTED_MODULE_1__.HeaderConstants.IF_UNMODIFIED_SINCE),\n            getHeaderValueToSign(request, _utils_constants__WEBPACK_IMPORTED_MODULE_1__.HeaderConstants.RANGE),\n        ].join(\"\\n\") +\n            \"\\n\" +\n            getCanonicalizedHeadersString(request) +\n            getCanonicalizedResourceString(request);\n        const signature = (0,crypto__WEBPACK_IMPORTED_MODULE_0__.createHmac)(\"sha256\", options.accountKey)\n            .update(stringToSign, \"utf8\")\n            .digest(\"base64\");\n        request.headers.set(_utils_constants__WEBPACK_IMPORTED_MODULE_1__.HeaderConstants.AUTHORIZATION, `SharedKey ${options.accountName}:${signature}`);\n        // console.log(`[URL]:${request.url}`);\n        // console.log(`[HEADERS]:${request.headers.toString()}`);\n        // console.log(`[STRING TO SIGN]:${JSON.stringify(stringToSign)}`);\n        // console.log(`[KEY]: ${request.headers.get(HeaderConstants.AUTHORIZATION)}`);\n    }\n    /**\n     * Retrieve header value according to shared key sign rules.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/authenticate-with-shared-key\n     */\n    function getHeaderValueToSign(request, headerName) {\n        const value = request.headers.get(headerName);\n        if (!value) {\n            return \"\";\n        }\n        // When using version 2015-02-21 or later, if Content-Length is zero, then\n        // set the Content-Length part of the StringToSign to an empty string.\n        // https://docs.microsoft.com/en-us/rest/api/storageservices/authenticate-with-shared-key\n        if (headerName === _utils_constants__WEBPACK_IMPORTED_MODULE_1__.HeaderConstants.CONTENT_LENGTH && value === \"0\") {\n            return \"\";\n        }\n        return value;\n    }\n    /**\n     * To construct the CanonicalizedHeaders portion of the signature string, follow these steps:\n     * 1. Retrieve all headers for the resource that begin with x-ms-, including the x-ms-date header.\n     * 2. Convert each HTTP header name to lowercase.\n     * 3. Sort the headers lexicographically by header name, in ascending order.\n     *    Each header may appear only once in the string.\n     * 4. Replace any linear whitespace in the header value with a single space.\n     * 5. Trim any whitespace around the colon in the header.\n     * 6. Finally, append a new-line character to each canonicalized header in the resulting list.\n     *    Construct the CanonicalizedHeaders string by concatenating all headers in this list into a single string.\n     *\n     */\n    function getCanonicalizedHeadersString(request) {\n        let headersArray = [];\n        for (const [name, value] of request.headers) {\n            if (name.toLowerCase().startsWith(_utils_constants__WEBPACK_IMPORTED_MODULE_1__.HeaderConstants.PREFIX_FOR_STORAGE)) {\n                headersArray.push({ name, value });\n            }\n        }\n        headersArray.sort((a, b) => {\n            return (0,_utils_SharedKeyComparator__WEBPACK_IMPORTED_MODULE_2__.compareHeader)(a.name.toLowerCase(), b.name.toLowerCase());\n        });\n        // Remove duplicate headers\n        headersArray = headersArray.filter((value, index, array) => {\n            if (index > 0 && value.name.toLowerCase() === array[index - 1].name.toLowerCase()) {\n                return false;\n            }\n            return true;\n        });\n        let canonicalizedHeadersStringToSign = \"\";\n        headersArray.forEach((header) => {\n            canonicalizedHeadersStringToSign += `${header.name\n                .toLowerCase()\n                .trimRight()}:${header.value.trimLeft()}\\n`;\n        });\n        return canonicalizedHeadersStringToSign;\n    }\n    function getCanonicalizedResourceString(request) {\n        const path = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_3__.getURLPath)(request.url) || \"/\";\n        let canonicalizedResourceString = \"\";\n        canonicalizedResourceString += `/${options.accountName}${path}`;\n        const queries = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_3__.getURLQueries)(request.url);\n        const lowercaseQueries = {};\n        if (queries) {\n            const queryKeys = [];\n            for (const key in queries) {\n                if (Object.prototype.hasOwnProperty.call(queries, key)) {\n                    const lowercaseKey = key.toLowerCase();\n                    lowercaseQueries[lowercaseKey] = queries[key];\n                    queryKeys.push(lowercaseKey);\n                }\n            }\n            queryKeys.sort();\n            for (const key of queryKeys) {\n                canonicalizedResourceString += `\\n${key}:${decodeURIComponent(lowercaseQueries[key])}`;\n            }\n        }\n        return canonicalizedResourceString;\n    }\n    return {\n        name: storageSharedKeyCredentialPolicyName,\n        async sendRequest(request, next) {\n            signRequest(request);\n            return next(request);\n        },\n    };\n}\n//# sourceMappingURL=StorageSharedKeyCredentialPolicyV2.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageSharedKeyCredentialPolicyV2.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/pollers/BlobStartCopyFromUrlPoller.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/pollers/BlobStartCopyFromUrlPoller.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BlobBeginCopyFromUrlPoller: () => (/* binding */ BlobBeginCopyFromUrlPoller)\n/* harmony export */ });\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-util */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/index.js\");\n/* harmony import */ var _azure_core_lro__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/core-lro */ \"(rsc)/./node_modules/@azure/core-lro/dist/esm/index.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n/**\n * This is the poller returned by {@link BlobClient.beginCopyFromURL}.\n * This can not be instantiated directly outside of this package.\n *\n * @hidden\n */\nclass BlobBeginCopyFromUrlPoller extends _azure_core_lro__WEBPACK_IMPORTED_MODULE_1__.Poller {\n    constructor(options) {\n        const { blobClient, copySource, intervalInMs = 15000, onProgress, resumeFrom, startCopyFromURLOptions, } = options;\n        let state;\n        if (resumeFrom) {\n            state = JSON.parse(resumeFrom).state;\n        }\n        const operation = makeBlobBeginCopyFromURLPollOperation(Object.assign(Object.assign({}, state), { blobClient,\n            copySource,\n            startCopyFromURLOptions }));\n        super(operation);\n        if (typeof onProgress === \"function\") {\n            this.onProgress(onProgress);\n        }\n        this.intervalInMs = intervalInMs;\n    }\n    delay() {\n        return (0,_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.delay)(this.intervalInMs);\n    }\n}\n/**\n * Note: Intentionally using function expression over arrow function expression\n * so that the function can be invoked with a different context.\n * This affects what `this` refers to.\n * @hidden\n */\nconst cancel = async function cancel(options = {}) {\n    const state = this.state;\n    const { copyId } = state;\n    if (state.isCompleted) {\n        return makeBlobBeginCopyFromURLPollOperation(state);\n    }\n    if (!copyId) {\n        state.isCancelled = true;\n        return makeBlobBeginCopyFromURLPollOperation(state);\n    }\n    // if abortCopyFromURL throws, it will bubble up to user's poller.cancelOperation call\n    await state.blobClient.abortCopyFromURL(copyId, {\n        abortSignal: options.abortSignal,\n    });\n    state.isCancelled = true;\n    return makeBlobBeginCopyFromURLPollOperation(state);\n};\n/**\n * Note: Intentionally using function expression over arrow function expression\n * so that the function can be invoked with a different context.\n * This affects what `this` refers to.\n * @hidden\n */\nconst update = async function update(options = {}) {\n    const state = this.state;\n    const { blobClient, copySource, startCopyFromURLOptions } = state;\n    if (!state.isStarted) {\n        state.isStarted = true;\n        const result = await blobClient.startCopyFromURL(copySource, startCopyFromURLOptions);\n        // copyId is needed to abort\n        state.copyId = result.copyId;\n        if (result.copyStatus === \"success\") {\n            state.result = result;\n            state.isCompleted = true;\n        }\n    }\n    else if (!state.isCompleted) {\n        try {\n            const result = await state.blobClient.getProperties({ abortSignal: options.abortSignal });\n            const { copyStatus, copyProgress } = result;\n            const prevCopyProgress = state.copyProgress;\n            if (copyProgress) {\n                state.copyProgress = copyProgress;\n            }\n            if (copyStatus === \"pending\" &&\n                copyProgress !== prevCopyProgress &&\n                typeof options.fireProgress === \"function\") {\n                // trigger in setTimeout, or swallow error?\n                options.fireProgress(state);\n            }\n            else if (copyStatus === \"success\") {\n                state.result = result;\n                state.isCompleted = true;\n            }\n            else if (copyStatus === \"failed\") {\n                state.error = new Error(`Blob copy failed with reason: \"${result.copyStatusDescription || \"unknown\"}\"`);\n                state.isCompleted = true;\n            }\n        }\n        catch (err) {\n            state.error = err;\n            state.isCompleted = true;\n        }\n    }\n    return makeBlobBeginCopyFromURLPollOperation(state);\n};\n/**\n * Note: Intentionally using function expression over arrow function expression\n * so that the function can be invoked with a different context.\n * This affects what `this` refers to.\n * @hidden\n */\nconst toString = function toString() {\n    return JSON.stringify({ state: this.state }, (key, value) => {\n        // remove blobClient from serialized state since a client can't be hydrated from this info.\n        if (key === \"blobClient\") {\n            return undefined;\n        }\n        return value;\n    });\n};\n/**\n * Creates a poll operation given the provided state.\n * @hidden\n */\nfunction makeBlobBeginCopyFromURLPollOperation(state) {\n    return {\n        state: Object.assign({}, state),\n        cancel,\n        toString,\n        update,\n    };\n}\n//# sourceMappingURL=BlobStartCopyFromUrlPoller.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL3BvbGxlcnMvQmxvYlN0YXJ0Q29weUZyb21VcmxQb2xsZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUN5QztBQUNBO0FBQ3pDO0FBQ0EsbUNBQW1DLGtDQUFrQztBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNPLHlDQUF5QyxtREFBTTtBQUN0RDtBQUNBLGdCQUFnQixpR0FBaUc7QUFDakg7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4RkFBOEYsWUFBWTtBQUMxRztBQUNBLHFDQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsdURBQUs7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRDtBQUNqRDtBQUNBLFlBQVksU0FBUztBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQ7QUFDakQ7QUFDQSxZQUFZLGtEQUFrRDtBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrRUFBa0Usa0NBQWtDO0FBQ3BHLG9CQUFvQiwyQkFBMkI7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEVBQTBFLDBDQUEwQztBQUNwSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLG1CQUFtQjtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcndpbHNvbi9EZXNrdG9wL3Byb2plY3RzL0VaVml6L25vZGVfbW9kdWxlcy9AYXp1cmUvc3RvcmFnZS1ibG9iL2Rpc3QtZXNtL3N0b3JhZ2UtYmxvYi9zcmMvcG9sbGVycy9CbG9iU3RhcnRDb3B5RnJvbVVybFBvbGxlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbmltcG9ydCB7IGRlbGF5IH0gZnJvbSBcIkBhenVyZS9jb3JlLXV0aWxcIjtcbmltcG9ydCB7IFBvbGxlciB9IGZyb20gXCJAYXp1cmUvY29yZS1scm9cIjtcbi8qKlxuICogVGhpcyBpcyB0aGUgcG9sbGVyIHJldHVybmVkIGJ5IHtAbGluayBCbG9iQ2xpZW50LmJlZ2luQ29weUZyb21VUkx9LlxuICogVGhpcyBjYW4gbm90IGJlIGluc3RhbnRpYXRlZCBkaXJlY3RseSBvdXRzaWRlIG9mIHRoaXMgcGFja2FnZS5cbiAqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBjbGFzcyBCbG9iQmVnaW5Db3B5RnJvbVVybFBvbGxlciBleHRlbmRzIFBvbGxlciB7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICBjb25zdCB7IGJsb2JDbGllbnQsIGNvcHlTb3VyY2UsIGludGVydmFsSW5NcyA9IDE1MDAwLCBvblByb2dyZXNzLCByZXN1bWVGcm9tLCBzdGFydENvcHlGcm9tVVJMT3B0aW9ucywgfSA9IG9wdGlvbnM7XG4gICAgICAgIGxldCBzdGF0ZTtcbiAgICAgICAgaWYgKHJlc3VtZUZyb20pIHtcbiAgICAgICAgICAgIHN0YXRlID0gSlNPTi5wYXJzZShyZXN1bWVGcm9tKS5zdGF0ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBvcGVyYXRpb24gPSBtYWtlQmxvYkJlZ2luQ29weUZyb21VUkxQb2xsT3BlcmF0aW9uKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUpLCB7IGJsb2JDbGllbnQsXG4gICAgICAgICAgICBjb3B5U291cmNlLFxuICAgICAgICAgICAgc3RhcnRDb3B5RnJvbVVSTE9wdGlvbnMgfSkpO1xuICAgICAgICBzdXBlcihvcGVyYXRpb24pO1xuICAgICAgICBpZiAodHlwZW9mIG9uUHJvZ3Jlc3MgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgdGhpcy5vblByb2dyZXNzKG9uUHJvZ3Jlc3MpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaW50ZXJ2YWxJbk1zID0gaW50ZXJ2YWxJbk1zO1xuICAgIH1cbiAgICBkZWxheSgpIHtcbiAgICAgICAgcmV0dXJuIGRlbGF5KHRoaXMuaW50ZXJ2YWxJbk1zKTtcbiAgICB9XG59XG4vKipcbiAqIE5vdGU6IEludGVudGlvbmFsbHkgdXNpbmcgZnVuY3Rpb24gZXhwcmVzc2lvbiBvdmVyIGFycm93IGZ1bmN0aW9uIGV4cHJlc3Npb25cbiAqIHNvIHRoYXQgdGhlIGZ1bmN0aW9uIGNhbiBiZSBpbnZva2VkIHdpdGggYSBkaWZmZXJlbnQgY29udGV4dC5cbiAqIFRoaXMgYWZmZWN0cyB3aGF0IGB0aGlzYCByZWZlcnMgdG8uXG4gKiBAaGlkZGVuXG4gKi9cbmNvbnN0IGNhbmNlbCA9IGFzeW5jIGZ1bmN0aW9uIGNhbmNlbChvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCBzdGF0ZSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3QgeyBjb3B5SWQgfSA9IHN0YXRlO1xuICAgIGlmIChzdGF0ZS5pc0NvbXBsZXRlZCkge1xuICAgICAgICByZXR1cm4gbWFrZUJsb2JCZWdpbkNvcHlGcm9tVVJMUG9sbE9wZXJhdGlvbihzdGF0ZSk7XG4gICAgfVxuICAgIGlmICghY29weUlkKSB7XG4gICAgICAgIHN0YXRlLmlzQ2FuY2VsbGVkID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIG1ha2VCbG9iQmVnaW5Db3B5RnJvbVVSTFBvbGxPcGVyYXRpb24oc3RhdGUpO1xuICAgIH1cbiAgICAvLyBpZiBhYm9ydENvcHlGcm9tVVJMIHRocm93cywgaXQgd2lsbCBidWJibGUgdXAgdG8gdXNlcidzIHBvbGxlci5jYW5jZWxPcGVyYXRpb24gY2FsbFxuICAgIGF3YWl0IHN0YXRlLmJsb2JDbGllbnQuYWJvcnRDb3B5RnJvbVVSTChjb3B5SWQsIHtcbiAgICAgICAgYWJvcnRTaWduYWw6IG9wdGlvbnMuYWJvcnRTaWduYWwsXG4gICAgfSk7XG4gICAgc3RhdGUuaXNDYW5jZWxsZWQgPSB0cnVlO1xuICAgIHJldHVybiBtYWtlQmxvYkJlZ2luQ29weUZyb21VUkxQb2xsT3BlcmF0aW9uKHN0YXRlKTtcbn07XG4vKipcbiAqIE5vdGU6IEludGVudGlvbmFsbHkgdXNpbmcgZnVuY3Rpb24gZXhwcmVzc2lvbiBvdmVyIGFycm93IGZ1bmN0aW9uIGV4cHJlc3Npb25cbiAqIHNvIHRoYXQgdGhlIGZ1bmN0aW9uIGNhbiBiZSBpbnZva2VkIHdpdGggYSBkaWZmZXJlbnQgY29udGV4dC5cbiAqIFRoaXMgYWZmZWN0cyB3aGF0IGB0aGlzYCByZWZlcnMgdG8uXG4gKiBAaGlkZGVuXG4gKi9cbmNvbnN0IHVwZGF0ZSA9IGFzeW5jIGZ1bmN0aW9uIHVwZGF0ZShvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCBzdGF0ZSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3QgeyBibG9iQ2xpZW50LCBjb3B5U291cmNlLCBzdGFydENvcHlGcm9tVVJMT3B0aW9ucyB9ID0gc3RhdGU7XG4gICAgaWYgKCFzdGF0ZS5pc1N0YXJ0ZWQpIHtcbiAgICAgICAgc3RhdGUuaXNTdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgYmxvYkNsaWVudC5zdGFydENvcHlGcm9tVVJMKGNvcHlTb3VyY2UsIHN0YXJ0Q29weUZyb21VUkxPcHRpb25zKTtcbiAgICAgICAgLy8gY29weUlkIGlzIG5lZWRlZCB0byBhYm9ydFxuICAgICAgICBzdGF0ZS5jb3B5SWQgPSByZXN1bHQuY29weUlkO1xuICAgICAgICBpZiAocmVzdWx0LmNvcHlTdGF0dXMgPT09IFwic3VjY2Vzc1wiKSB7XG4gICAgICAgICAgICBzdGF0ZS5yZXN1bHQgPSByZXN1bHQ7XG4gICAgICAgICAgICBzdGF0ZS5pc0NvbXBsZXRlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoIXN0YXRlLmlzQ29tcGxldGVkKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBzdGF0ZS5ibG9iQ2xpZW50LmdldFByb3BlcnRpZXMoeyBhYm9ydFNpZ25hbDogb3B0aW9ucy5hYm9ydFNpZ25hbCB9KTtcbiAgICAgICAgICAgIGNvbnN0IHsgY29weVN0YXR1cywgY29weVByb2dyZXNzIH0gPSByZXN1bHQ7XG4gICAgICAgICAgICBjb25zdCBwcmV2Q29weVByb2dyZXNzID0gc3RhdGUuY29weVByb2dyZXNzO1xuICAgICAgICAgICAgaWYgKGNvcHlQcm9ncmVzcykge1xuICAgICAgICAgICAgICAgIHN0YXRlLmNvcHlQcm9ncmVzcyA9IGNvcHlQcm9ncmVzcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjb3B5U3RhdHVzID09PSBcInBlbmRpbmdcIiAmJlxuICAgICAgICAgICAgICAgIGNvcHlQcm9ncmVzcyAhPT0gcHJldkNvcHlQcm9ncmVzcyAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiBvcHRpb25zLmZpcmVQcm9ncmVzcyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgLy8gdHJpZ2dlciBpbiBzZXRUaW1lb3V0LCBvciBzd2FsbG93IGVycm9yP1xuICAgICAgICAgICAgICAgIG9wdGlvbnMuZmlyZVByb2dyZXNzKHN0YXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNvcHlTdGF0dXMgPT09IFwic3VjY2Vzc1wiKSB7XG4gICAgICAgICAgICAgICAgc3RhdGUucmVzdWx0ID0gcmVzdWx0O1xuICAgICAgICAgICAgICAgIHN0YXRlLmlzQ29tcGxldGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNvcHlTdGF0dXMgPT09IFwiZmFpbGVkXCIpIHtcbiAgICAgICAgICAgICAgICBzdGF0ZS5lcnJvciA9IG5ldyBFcnJvcihgQmxvYiBjb3B5IGZhaWxlZCB3aXRoIHJlYXNvbjogXCIke3Jlc3VsdC5jb3B5U3RhdHVzRGVzY3JpcHRpb24gfHwgXCJ1bmtub3duXCJ9XCJgKTtcbiAgICAgICAgICAgICAgICBzdGF0ZS5pc0NvbXBsZXRlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgc3RhdGUuZXJyb3IgPSBlcnI7XG4gICAgICAgICAgICBzdGF0ZS5pc0NvbXBsZXRlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1ha2VCbG9iQmVnaW5Db3B5RnJvbVVSTFBvbGxPcGVyYXRpb24oc3RhdGUpO1xufTtcbi8qKlxuICogTm90ZTogSW50ZW50aW9uYWxseSB1c2luZyBmdW5jdGlvbiBleHByZXNzaW9uIG92ZXIgYXJyb3cgZnVuY3Rpb24gZXhwcmVzc2lvblxuICogc28gdGhhdCB0aGUgZnVuY3Rpb24gY2FuIGJlIGludm9rZWQgd2l0aCBhIGRpZmZlcmVudCBjb250ZXh0LlxuICogVGhpcyBhZmZlY3RzIHdoYXQgYHRoaXNgIHJlZmVycyB0by5cbiAqIEBoaWRkZW5cbiAqL1xuY29uc3QgdG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoeyBzdGF0ZTogdGhpcy5zdGF0ZSB9LCAoa2V5LCB2YWx1ZSkgPT4ge1xuICAgICAgICAvLyByZW1vdmUgYmxvYkNsaWVudCBmcm9tIHNlcmlhbGl6ZWQgc3RhdGUgc2luY2UgYSBjbGllbnQgY2FuJ3QgYmUgaHlkcmF0ZWQgZnJvbSB0aGlzIGluZm8uXG4gICAgICAgIGlmIChrZXkgPT09IFwiYmxvYkNsaWVudFwiKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9KTtcbn07XG4vKipcbiAqIENyZWF0ZXMgYSBwb2xsIG9wZXJhdGlvbiBnaXZlbiB0aGUgcHJvdmlkZWQgc3RhdGUuXG4gKiBAaGlkZGVuXG4gKi9cbmZ1bmN0aW9uIG1ha2VCbG9iQmVnaW5Db3B5RnJvbVVSTFBvbGxPcGVyYXRpb24oc3RhdGUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBzdGF0ZTogT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUpLFxuICAgICAgICBjYW5jZWwsXG4gICAgICAgIHRvU3RyaW5nLFxuICAgICAgICB1cGRhdGUsXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUJsb2JTdGFydENvcHlGcm9tVXJsUG9sbGVyLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/pollers/BlobStartCopyFromUrlPoller.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASPermissions.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASPermissions.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AccountSASPermissions: () => (/* binding */ AccountSASPermissions)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * This is a helper class to construct a string representing the permissions granted by an AccountSAS. Setting a value\n * to true means that any SAS which uses these permissions will grant permissions for that operation. Once all the\n * values are set, this should be serialized with toString and set as the permissions field on an\n * {@link AccountSASSignatureValues} object. It is possible to construct the permissions string without this class, but\n * the order of the permissions is particular and this class guarantees correctness.\n */\nclass AccountSASPermissions {\n    constructor() {\n        /**\n         * Permission to read resources and list queues and tables granted.\n         */\n        this.read = false;\n        /**\n         * Permission to write resources granted.\n         */\n        this.write = false;\n        /**\n         * Permission to delete blobs and files granted.\n         */\n        this.delete = false;\n        /**\n         * Permission to delete versions granted.\n         */\n        this.deleteVersion = false;\n        /**\n         * Permission to list blob containers, blobs, shares, directories, and files granted.\n         */\n        this.list = false;\n        /**\n         * Permission to add messages, table entities, and append to blobs granted.\n         */\n        this.add = false;\n        /**\n         * Permission to create blobs and files granted.\n         */\n        this.create = false;\n        /**\n         * Permissions to update messages and table entities granted.\n         */\n        this.update = false;\n        /**\n         * Permission to get and delete messages granted.\n         */\n        this.process = false;\n        /**\n         * Specfies Tag access granted.\n         */\n        this.tag = false;\n        /**\n         * Permission to filter blobs.\n         */\n        this.filter = false;\n        /**\n         * Permission to set immutability policy.\n         */\n        this.setImmutabilityPolicy = false;\n        /**\n         * Specifies that Permanent Delete is permitted.\n         */\n        this.permanentDelete = false;\n    }\n    /**\n     * Parse initializes the AccountSASPermissions fields from a string.\n     *\n     * @param permissions -\n     */\n    static parse(permissions) {\n        const accountSASPermissions = new AccountSASPermissions();\n        for (const c of permissions) {\n            switch (c) {\n                case \"r\":\n                    accountSASPermissions.read = true;\n                    break;\n                case \"w\":\n                    accountSASPermissions.write = true;\n                    break;\n                case \"d\":\n                    accountSASPermissions.delete = true;\n                    break;\n                case \"x\":\n                    accountSASPermissions.deleteVersion = true;\n                    break;\n                case \"l\":\n                    accountSASPermissions.list = true;\n                    break;\n                case \"a\":\n                    accountSASPermissions.add = true;\n                    break;\n                case \"c\":\n                    accountSASPermissions.create = true;\n                    break;\n                case \"u\":\n                    accountSASPermissions.update = true;\n                    break;\n                case \"p\":\n                    accountSASPermissions.process = true;\n                    break;\n                case \"t\":\n                    accountSASPermissions.tag = true;\n                    break;\n                case \"f\":\n                    accountSASPermissions.filter = true;\n                    break;\n                case \"i\":\n                    accountSASPermissions.setImmutabilityPolicy = true;\n                    break;\n                case \"y\":\n                    accountSASPermissions.permanentDelete = true;\n                    break;\n                default:\n                    throw new RangeError(`Invalid permission character: ${c}`);\n            }\n        }\n        return accountSASPermissions;\n    }\n    /**\n     * Creates a {@link AccountSASPermissions} from a raw object which contains same keys as it\n     * and boolean values for them.\n     *\n     * @param permissionLike -\n     */\n    static from(permissionLike) {\n        const accountSASPermissions = new AccountSASPermissions();\n        if (permissionLike.read) {\n            accountSASPermissions.read = true;\n        }\n        if (permissionLike.write) {\n            accountSASPermissions.write = true;\n        }\n        if (permissionLike.delete) {\n            accountSASPermissions.delete = true;\n        }\n        if (permissionLike.deleteVersion) {\n            accountSASPermissions.deleteVersion = true;\n        }\n        if (permissionLike.filter) {\n            accountSASPermissions.filter = true;\n        }\n        if (permissionLike.tag) {\n            accountSASPermissions.tag = true;\n        }\n        if (permissionLike.list) {\n            accountSASPermissions.list = true;\n        }\n        if (permissionLike.add) {\n            accountSASPermissions.add = true;\n        }\n        if (permissionLike.create) {\n            accountSASPermissions.create = true;\n        }\n        if (permissionLike.update) {\n            accountSASPermissions.update = true;\n        }\n        if (permissionLike.process) {\n            accountSASPermissions.process = true;\n        }\n        if (permissionLike.setImmutabilityPolicy) {\n            accountSASPermissions.setImmutabilityPolicy = true;\n        }\n        if (permissionLike.permanentDelete) {\n            accountSASPermissions.permanentDelete = true;\n        }\n        return accountSASPermissions;\n    }\n    /**\n     * Produces the SAS permissions string for an Azure Storage account.\n     * Call this method to set AccountSASSignatureValues Permissions field.\n     *\n     * Using this method will guarantee the resource types are in\n     * an order accepted by the service.\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas\n     *\n     */\n    toString() {\n        // The order of the characters should be as specified here to ensure correctness:\n        // https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas\n        // Use a string array instead of string concatenating += operator for performance\n        const permissions = [];\n        if (this.read) {\n            permissions.push(\"r\");\n        }\n        if (this.write) {\n            permissions.push(\"w\");\n        }\n        if (this.delete) {\n            permissions.push(\"d\");\n        }\n        if (this.deleteVersion) {\n            permissions.push(\"x\");\n        }\n        if (this.filter) {\n            permissions.push(\"f\");\n        }\n        if (this.tag) {\n            permissions.push(\"t\");\n        }\n        if (this.list) {\n            permissions.push(\"l\");\n        }\n        if (this.add) {\n            permissions.push(\"a\");\n        }\n        if (this.create) {\n            permissions.push(\"c\");\n        }\n        if (this.update) {\n            permissions.push(\"u\");\n        }\n        if (this.process) {\n            permissions.push(\"p\");\n        }\n        if (this.setImmutabilityPolicy) {\n            permissions.push(\"i\");\n        }\n        if (this.permanentDelete) {\n            permissions.push(\"y\");\n        }\n        return permissions.join(\"\");\n    }\n}\n//# sourceMappingURL=AccountSASPermissions.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASPermissions.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASResourceTypes.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASResourceTypes.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AccountSASResourceTypes: () => (/* binding */ AccountSASResourceTypes)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * This is a helper class to construct a string representing the resources accessible by an AccountSAS. Setting a value\n * to true means that any SAS which uses these permissions will grant access to that resource type. Once all the\n * values are set, this should be serialized with toString and set as the resources field on an\n * {@link AccountSASSignatureValues} object. It is possible to construct the resources string without this class, but\n * the order of the resources is particular and this class guarantees correctness.\n */\nclass AccountSASResourceTypes {\n    constructor() {\n        /**\n         * Permission to access service level APIs granted.\n         */\n        this.service = false;\n        /**\n         * Permission to access container level APIs (Blob Containers, Tables, Queues, File Shares) granted.\n         */\n        this.container = false;\n        /**\n         * Permission to access object level APIs (Blobs, Table Entities, Queue Messages, Files) granted.\n         */\n        this.object = false;\n    }\n    /**\n     * Creates an {@link AccountSASResourceTypes} from the specified resource types string. This method will throw an\n     * Error if it encounters a character that does not correspond to a valid resource type.\n     *\n     * @param resourceTypes -\n     */\n    static parse(resourceTypes) {\n        const accountSASResourceTypes = new AccountSASResourceTypes();\n        for (const c of resourceTypes) {\n            switch (c) {\n                case \"s\":\n                    accountSASResourceTypes.service = true;\n                    break;\n                case \"c\":\n                    accountSASResourceTypes.container = true;\n                    break;\n                case \"o\":\n                    accountSASResourceTypes.object = true;\n                    break;\n                default:\n                    throw new RangeError(`Invalid resource type: ${c}`);\n            }\n        }\n        return accountSASResourceTypes;\n    }\n    /**\n     * Converts the given resource types to a string.\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas\n     *\n     */\n    toString() {\n        const resourceTypes = [];\n        if (this.service) {\n            resourceTypes.push(\"s\");\n        }\n        if (this.container) {\n            resourceTypes.push(\"c\");\n        }\n        if (this.object) {\n            resourceTypes.push(\"o\");\n        }\n        return resourceTypes.join(\"\");\n    }\n}\n//# sourceMappingURL=AccountSASResourceTypes.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL3Nhcy9BY2NvdW50U0FTUmVzb3VyY2VUeXBlcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksaUNBQWlDO0FBQ3JDO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQiwrQkFBK0I7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUVBQW1FLEVBQUU7QUFDckU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWN0b3J3aWxzb24vRGVza3RvcC9wcm9qZWN0cy9FWlZpei9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL3Nhcy9BY2NvdW50U0FTUmVzb3VyY2VUeXBlcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbi8qKlxuICogT05MWSBBVkFJTEFCTEUgSU4gTk9ERS5KUyBSVU5USU1FLlxuICpcbiAqIFRoaXMgaXMgYSBoZWxwZXIgY2xhc3MgdG8gY29uc3RydWN0IGEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgcmVzb3VyY2VzIGFjY2Vzc2libGUgYnkgYW4gQWNjb3VudFNBUy4gU2V0dGluZyBhIHZhbHVlXG4gKiB0byB0cnVlIG1lYW5zIHRoYXQgYW55IFNBUyB3aGljaCB1c2VzIHRoZXNlIHBlcm1pc3Npb25zIHdpbGwgZ3JhbnQgYWNjZXNzIHRvIHRoYXQgcmVzb3VyY2UgdHlwZS4gT25jZSBhbGwgdGhlXG4gKiB2YWx1ZXMgYXJlIHNldCwgdGhpcyBzaG91bGQgYmUgc2VyaWFsaXplZCB3aXRoIHRvU3RyaW5nIGFuZCBzZXQgYXMgdGhlIHJlc291cmNlcyBmaWVsZCBvbiBhblxuICoge0BsaW5rIEFjY291bnRTQVNTaWduYXR1cmVWYWx1ZXN9IG9iamVjdC4gSXQgaXMgcG9zc2libGUgdG8gY29uc3RydWN0IHRoZSByZXNvdXJjZXMgc3RyaW5nIHdpdGhvdXQgdGhpcyBjbGFzcywgYnV0XG4gKiB0aGUgb3JkZXIgb2YgdGhlIHJlc291cmNlcyBpcyBwYXJ0aWN1bGFyIGFuZCB0aGlzIGNsYXNzIGd1YXJhbnRlZXMgY29ycmVjdG5lc3MuXG4gKi9cbmV4cG9ydCBjbGFzcyBBY2NvdW50U0FTUmVzb3VyY2VUeXBlcyB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQZXJtaXNzaW9uIHRvIGFjY2VzcyBzZXJ2aWNlIGxldmVsIEFQSXMgZ3JhbnRlZC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc2VydmljZSA9IGZhbHNlO1xuICAgICAgICAvKipcbiAgICAgICAgICogUGVybWlzc2lvbiB0byBhY2Nlc3MgY29udGFpbmVyIGxldmVsIEFQSXMgKEJsb2IgQ29udGFpbmVycywgVGFibGVzLCBRdWV1ZXMsIEZpbGUgU2hhcmVzKSBncmFudGVkLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jb250YWluZXIgPSBmYWxzZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFBlcm1pc3Npb24gdG8gYWNjZXNzIG9iamVjdCBsZXZlbCBBUElzIChCbG9icywgVGFibGUgRW50aXRpZXMsIFF1ZXVlIE1lc3NhZ2VzLCBGaWxlcykgZ3JhbnRlZC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMub2JqZWN0ID0gZmFsc2U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4ge0BsaW5rIEFjY291bnRTQVNSZXNvdXJjZVR5cGVzfSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVzb3VyY2UgdHlwZXMgc3RyaW5nLiBUaGlzIG1ldGhvZCB3aWxsIHRocm93IGFuXG4gICAgICogRXJyb3IgaWYgaXQgZW5jb3VudGVycyBhIGNoYXJhY3RlciB0aGF0IGRvZXMgbm90IGNvcnJlc3BvbmQgdG8gYSB2YWxpZCByZXNvdXJjZSB0eXBlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHJlc291cmNlVHlwZXMgLVxuICAgICAqL1xuICAgIHN0YXRpYyBwYXJzZShyZXNvdXJjZVR5cGVzKSB7XG4gICAgICAgIGNvbnN0IGFjY291bnRTQVNSZXNvdXJjZVR5cGVzID0gbmV3IEFjY291bnRTQVNSZXNvdXJjZVR5cGVzKCk7XG4gICAgICAgIGZvciAoY29uc3QgYyBvZiByZXNvdXJjZVR5cGVzKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKGMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIFwic1wiOlxuICAgICAgICAgICAgICAgICAgICBhY2NvdW50U0FTUmVzb3VyY2VUeXBlcy5zZXJ2aWNlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcImNcIjpcbiAgICAgICAgICAgICAgICAgICAgYWNjb3VudFNBU1Jlc291cmNlVHlwZXMuY29udGFpbmVyID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcIm9cIjpcbiAgICAgICAgICAgICAgICAgICAgYWNjb3VudFNBU1Jlc291cmNlVHlwZXMub2JqZWN0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoYEludmFsaWQgcmVzb3VyY2UgdHlwZTogJHtjfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhY2NvdW50U0FTUmVzb3VyY2VUeXBlcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhlIGdpdmVuIHJlc291cmNlIHR5cGVzIHRvIGEgc3RyaW5nLlxuICAgICAqXG4gICAgICogQHNlZSBodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9lbi11cy9yZXN0L2FwaS9zdG9yYWdlc2VydmljZXMvY29uc3RydWN0aW5nLWFuLWFjY291bnQtc2FzXG4gICAgICpcbiAgICAgKi9cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgY29uc3QgcmVzb3VyY2VUeXBlcyA9IFtdO1xuICAgICAgICBpZiAodGhpcy5zZXJ2aWNlKSB7XG4gICAgICAgICAgICByZXNvdXJjZVR5cGVzLnB1c2goXCJzXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmNvbnRhaW5lcikge1xuICAgICAgICAgICAgcmVzb3VyY2VUeXBlcy5wdXNoKFwiY1wiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5vYmplY3QpIHtcbiAgICAgICAgICAgIHJlc291cmNlVHlwZXMucHVzaChcIm9cIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc291cmNlVHlwZXMuam9pbihcIlwiKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1BY2NvdW50U0FTUmVzb3VyY2VUeXBlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASResourceTypes.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASServices.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASServices.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AccountSASServices: () => (/* binding */ AccountSASServices)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * This is a helper class to construct a string representing the services accessible by an AccountSAS. Setting a value\n * to true means that any SAS which uses these permissions will grant access to that service. Once all the\n * values are set, this should be serialized with toString and set as the services field on an\n * {@link AccountSASSignatureValues} object. It is possible to construct the services string without this class, but\n * the order of the services is particular and this class guarantees correctness.\n */\nclass AccountSASServices {\n    constructor() {\n        /**\n         * Permission to access blob resources granted.\n         */\n        this.blob = false;\n        /**\n         * Permission to access file resources granted.\n         */\n        this.file = false;\n        /**\n         * Permission to access queue resources granted.\n         */\n        this.queue = false;\n        /**\n         * Permission to access table resources granted.\n         */\n        this.table = false;\n    }\n    /**\n     * Creates an {@link AccountSASServices} from the specified services string. This method will throw an\n     * Error if it encounters a character that does not correspond to a valid service.\n     *\n     * @param services -\n     */\n    static parse(services) {\n        const accountSASServices = new AccountSASServices();\n        for (const c of services) {\n            switch (c) {\n                case \"b\":\n                    accountSASServices.blob = true;\n                    break;\n                case \"f\":\n                    accountSASServices.file = true;\n                    break;\n                case \"q\":\n                    accountSASServices.queue = true;\n                    break;\n                case \"t\":\n                    accountSASServices.table = true;\n                    break;\n                default:\n                    throw new RangeError(`Invalid service character: ${c}`);\n            }\n        }\n        return accountSASServices;\n    }\n    /**\n     * Converts the given services to a string.\n     *\n     */\n    toString() {\n        const services = [];\n        if (this.blob) {\n            services.push(\"b\");\n        }\n        if (this.table) {\n            services.push(\"t\");\n        }\n        if (this.queue) {\n            services.push(\"q\");\n        }\n        if (this.file) {\n            services.push(\"f\");\n        }\n        return services.join(\"\");\n    }\n}\n//# sourceMappingURL=AccountSASServices.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL3Nhcy9BY2NvdW50U0FTU2VydmljZXMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLGlDQUFpQztBQUNyQztBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQiwwQkFBMEI7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUVBQXVFLEVBQUU7QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcndpbHNvbi9EZXNrdG9wL3Byb2plY3RzL0VaVml6L25vZGVfbW9kdWxlcy9AYXp1cmUvc3RvcmFnZS1ibG9iL2Rpc3QtZXNtL3N0b3JhZ2UtYmxvYi9zcmMvc2FzL0FjY291bnRTQVNTZXJ2aWNlcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbi8qKlxuICogT05MWSBBVkFJTEFCTEUgSU4gTk9ERS5KUyBSVU5USU1FLlxuICpcbiAqIFRoaXMgaXMgYSBoZWxwZXIgY2xhc3MgdG8gY29uc3RydWN0IGEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgc2VydmljZXMgYWNjZXNzaWJsZSBieSBhbiBBY2NvdW50U0FTLiBTZXR0aW5nIGEgdmFsdWVcbiAqIHRvIHRydWUgbWVhbnMgdGhhdCBhbnkgU0FTIHdoaWNoIHVzZXMgdGhlc2UgcGVybWlzc2lvbnMgd2lsbCBncmFudCBhY2Nlc3MgdG8gdGhhdCBzZXJ2aWNlLiBPbmNlIGFsbCB0aGVcbiAqIHZhbHVlcyBhcmUgc2V0LCB0aGlzIHNob3VsZCBiZSBzZXJpYWxpemVkIHdpdGggdG9TdHJpbmcgYW5kIHNldCBhcyB0aGUgc2VydmljZXMgZmllbGQgb24gYW5cbiAqIHtAbGluayBBY2NvdW50U0FTU2lnbmF0dXJlVmFsdWVzfSBvYmplY3QuIEl0IGlzIHBvc3NpYmxlIHRvIGNvbnN0cnVjdCB0aGUgc2VydmljZXMgc3RyaW5nIHdpdGhvdXQgdGhpcyBjbGFzcywgYnV0XG4gKiB0aGUgb3JkZXIgb2YgdGhlIHNlcnZpY2VzIGlzIHBhcnRpY3VsYXIgYW5kIHRoaXMgY2xhc3MgZ3VhcmFudGVlcyBjb3JyZWN0bmVzcy5cbiAqL1xuZXhwb3J0IGNsYXNzIEFjY291bnRTQVNTZXJ2aWNlcyB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQZXJtaXNzaW9uIHRvIGFjY2VzcyBibG9iIHJlc291cmNlcyBncmFudGVkLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5ibG9iID0gZmFsc2U7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQZXJtaXNzaW9uIHRvIGFjY2VzcyBmaWxlIHJlc291cmNlcyBncmFudGVkLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5maWxlID0gZmFsc2U7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQZXJtaXNzaW9uIHRvIGFjY2VzcyBxdWV1ZSByZXNvdXJjZXMgZ3JhbnRlZC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucXVldWUgPSBmYWxzZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFBlcm1pc3Npb24gdG8gYWNjZXNzIHRhYmxlIHJlc291cmNlcyBncmFudGVkLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy50YWJsZSA9IGZhbHNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIHtAbGluayBBY2NvdW50U0FTU2VydmljZXN9IGZyb20gdGhlIHNwZWNpZmllZCBzZXJ2aWNlcyBzdHJpbmcuIFRoaXMgbWV0aG9kIHdpbGwgdGhyb3cgYW5cbiAgICAgKiBFcnJvciBpZiBpdCBlbmNvdW50ZXJzIGEgY2hhcmFjdGVyIHRoYXQgZG9lcyBub3QgY29ycmVzcG9uZCB0byBhIHZhbGlkIHNlcnZpY2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc2VydmljZXMgLVxuICAgICAqL1xuICAgIHN0YXRpYyBwYXJzZShzZXJ2aWNlcykge1xuICAgICAgICBjb25zdCBhY2NvdW50U0FTU2VydmljZXMgPSBuZXcgQWNjb3VudFNBU1NlcnZpY2VzKCk7XG4gICAgICAgIGZvciAoY29uc3QgYyBvZiBzZXJ2aWNlcykge1xuICAgICAgICAgICAgc3dpdGNoIChjKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBcImJcIjpcbiAgICAgICAgICAgICAgICAgICAgYWNjb3VudFNBU1NlcnZpY2VzLmJsb2IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiZlwiOlxuICAgICAgICAgICAgICAgICAgICBhY2NvdW50U0FTU2VydmljZXMuZmlsZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJxXCI6XG4gICAgICAgICAgICAgICAgICAgIGFjY291bnRTQVNTZXJ2aWNlcy5xdWV1ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJ0XCI6XG4gICAgICAgICAgICAgICAgICAgIGFjY291bnRTQVNTZXJ2aWNlcy50YWJsZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKGBJbnZhbGlkIHNlcnZpY2UgY2hhcmFjdGVyOiAke2N9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFjY291bnRTQVNTZXJ2aWNlcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhlIGdpdmVuIHNlcnZpY2VzIHRvIGEgc3RyaW5nLlxuICAgICAqXG4gICAgICovXG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIGNvbnN0IHNlcnZpY2VzID0gW107XG4gICAgICAgIGlmICh0aGlzLmJsb2IpIHtcbiAgICAgICAgICAgIHNlcnZpY2VzLnB1c2goXCJiXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnRhYmxlKSB7XG4gICAgICAgICAgICBzZXJ2aWNlcy5wdXNoKFwidFwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5xdWV1ZSkge1xuICAgICAgICAgICAgc2VydmljZXMucHVzaChcInFcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuZmlsZSkge1xuICAgICAgICAgICAgc2VydmljZXMucHVzaChcImZcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNlcnZpY2VzLmpvaW4oXCJcIik7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QWNjb3VudFNBU1NlcnZpY2VzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASServices.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASSignatureValues.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASSignatureValues.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generateAccountSASQueryParameters: () => (/* binding */ generateAccountSASQueryParameters),\n/* harmony export */   generateAccountSASQueryParametersInternal: () => (/* binding */ generateAccountSASQueryParametersInternal)\n/* harmony export */ });\n/* harmony import */ var _AccountSASPermissions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AccountSASPermissions */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASPermissions.js\");\n/* harmony import */ var _AccountSASResourceTypes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./AccountSASResourceTypes */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASResourceTypes.js\");\n/* harmony import */ var _AccountSASServices__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./AccountSASServices */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASServices.js\");\n/* harmony import */ var _SasIPRange__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./SasIPRange */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/SasIPRange.js\");\n/* harmony import */ var _SASQueryParameters__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./SASQueryParameters */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/SASQueryParameters.js\");\n/* harmony import */ var _utils_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/constants */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js\");\n/* harmony import */ var _utils_utils_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/utils.common */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n\n\n\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * Generates a {@link SASQueryParameters} object which contains all SAS query parameters needed to make an actual\n * REST request.\n *\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas\n *\n * @param accountSASSignatureValues -\n * @param sharedKeyCredential -\n */\nfunction generateAccountSASQueryParameters(accountSASSignatureValues, sharedKeyCredential) {\n    return generateAccountSASQueryParametersInternal(accountSASSignatureValues, sharedKeyCredential)\n        .sasQueryParameters;\n}\nfunction generateAccountSASQueryParametersInternal(accountSASSignatureValues, sharedKeyCredential) {\n    const version = accountSASSignatureValues.version\n        ? accountSASSignatureValues.version\n        : _utils_constants__WEBPACK_IMPORTED_MODULE_0__.SERVICE_VERSION;\n    if (accountSASSignatureValues.permissions &&\n        accountSASSignatureValues.permissions.setImmutabilityPolicy &&\n        version < \"2020-08-04\") {\n        throw RangeError(\"'version' must be >= '2020-08-04' when provided 'i' permission.\");\n    }\n    if (accountSASSignatureValues.permissions &&\n        accountSASSignatureValues.permissions.deleteVersion &&\n        version < \"2019-10-10\") {\n        throw RangeError(\"'version' must be >= '2019-10-10' when provided 'x' permission.\");\n    }\n    if (accountSASSignatureValues.permissions &&\n        accountSASSignatureValues.permissions.permanentDelete &&\n        version < \"2019-10-10\") {\n        throw RangeError(\"'version' must be >= '2019-10-10' when provided 'y' permission.\");\n    }\n    if (accountSASSignatureValues.permissions &&\n        accountSASSignatureValues.permissions.tag &&\n        version < \"2019-12-12\") {\n        throw RangeError(\"'version' must be >= '2019-12-12' when provided 't' permission.\");\n    }\n    if (accountSASSignatureValues.permissions &&\n        accountSASSignatureValues.permissions.filter &&\n        version < \"2019-12-12\") {\n        throw RangeError(\"'version' must be >= '2019-12-12' when provided 'f' permission.\");\n    }\n    if (accountSASSignatureValues.encryptionScope && version < \"2020-12-06\") {\n        throw RangeError(\"'version' must be >= '2020-12-06' when provided 'encryptionScope' in SAS.\");\n    }\n    const parsedPermissions = _AccountSASPermissions__WEBPACK_IMPORTED_MODULE_1__.AccountSASPermissions.parse(accountSASSignatureValues.permissions.toString());\n    const parsedServices = _AccountSASServices__WEBPACK_IMPORTED_MODULE_2__.AccountSASServices.parse(accountSASSignatureValues.services).toString();\n    const parsedResourceTypes = _AccountSASResourceTypes__WEBPACK_IMPORTED_MODULE_3__.AccountSASResourceTypes.parse(accountSASSignatureValues.resourceTypes).toString();\n    let stringToSign;\n    if (version >= \"2020-12-06\") {\n        stringToSign = [\n            sharedKeyCredential.accountName,\n            parsedPermissions,\n            parsedServices,\n            parsedResourceTypes,\n            accountSASSignatureValues.startsOn\n                ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_4__.truncatedISO8061Date)(accountSASSignatureValues.startsOn, false)\n                : \"\",\n            (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_4__.truncatedISO8061Date)(accountSASSignatureValues.expiresOn, false),\n            accountSASSignatureValues.ipRange ? (0,_SasIPRange__WEBPACK_IMPORTED_MODULE_5__.ipRangeToString)(accountSASSignatureValues.ipRange) : \"\",\n            accountSASSignatureValues.protocol ? accountSASSignatureValues.protocol : \"\",\n            version,\n            accountSASSignatureValues.encryptionScope ? accountSASSignatureValues.encryptionScope : \"\",\n            \"\", // Account SAS requires an additional newline character\n        ].join(\"\\n\");\n    }\n    else {\n        stringToSign = [\n            sharedKeyCredential.accountName,\n            parsedPermissions,\n            parsedServices,\n            parsedResourceTypes,\n            accountSASSignatureValues.startsOn\n                ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_4__.truncatedISO8061Date)(accountSASSignatureValues.startsOn, false)\n                : \"\",\n            (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_4__.truncatedISO8061Date)(accountSASSignatureValues.expiresOn, false),\n            accountSASSignatureValues.ipRange ? (0,_SasIPRange__WEBPACK_IMPORTED_MODULE_5__.ipRangeToString)(accountSASSignatureValues.ipRange) : \"\",\n            accountSASSignatureValues.protocol ? accountSASSignatureValues.protocol : \"\",\n            version,\n            \"\", // Account SAS requires an additional newline character\n        ].join(\"\\n\");\n    }\n    const signature = sharedKeyCredential.computeHMACSHA256(stringToSign);\n    return {\n        sasQueryParameters: new _SASQueryParameters__WEBPACK_IMPORTED_MODULE_6__.SASQueryParameters(version, signature, parsedPermissions.toString(), parsedServices, parsedResourceTypes, accountSASSignatureValues.protocol, accountSASSignatureValues.startsOn, accountSASSignatureValues.expiresOn, accountSASSignatureValues.ipRange, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, accountSASSignatureValues.encryptionScope),\n        stringToSign: stringToSign,\n    };\n}\n//# sourceMappingURL=AccountSASSignatureValues.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASSignatureValues.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/BlobSASPermissions.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/BlobSASPermissions.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BlobSASPermissions: () => (/* binding */ BlobSASPermissions)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * This is a helper class to construct a string representing the permissions granted by a ServiceSAS to a blob. Setting\n * a value to true means that any SAS which uses these permissions will grant permissions for that operation. Once all\n * the values are set, this should be serialized with toString and set as the permissions field on a\n * {@link BlobSASSignatureValues} object. It is possible to construct the permissions string without this class, but\n * the order of the permissions is particular and this class guarantees correctness.\n */\nclass BlobSASPermissions {\n    constructor() {\n        /**\n         * Specifies Read access granted.\n         */\n        this.read = false;\n        /**\n         * Specifies Add access granted.\n         */\n        this.add = false;\n        /**\n         * Specifies Create access granted.\n         */\n        this.create = false;\n        /**\n         * Specifies Write access granted.\n         */\n        this.write = false;\n        /**\n         * Specifies Delete access granted.\n         */\n        this.delete = false;\n        /**\n         * Specifies Delete version access granted.\n         */\n        this.deleteVersion = false;\n        /**\n         * Specfies Tag access granted.\n         */\n        this.tag = false;\n        /**\n         * Specifies Move access granted.\n         */\n        this.move = false;\n        /**\n         * Specifies Execute access granted.\n         */\n        this.execute = false;\n        /**\n         * Specifies SetImmutabilityPolicy access granted.\n         */\n        this.setImmutabilityPolicy = false;\n        /**\n         * Specifies that Permanent Delete is permitted.\n         */\n        this.permanentDelete = false;\n    }\n    /**\n     * Creates a {@link BlobSASPermissions} from the specified permissions string. This method will throw an\n     * Error if it encounters a character that does not correspond to a valid permission.\n     *\n     * @param permissions -\n     */\n    static parse(permissions) {\n        const blobSASPermissions = new BlobSASPermissions();\n        for (const char of permissions) {\n            switch (char) {\n                case \"r\":\n                    blobSASPermissions.read = true;\n                    break;\n                case \"a\":\n                    blobSASPermissions.add = true;\n                    break;\n                case \"c\":\n                    blobSASPermissions.create = true;\n                    break;\n                case \"w\":\n                    blobSASPermissions.write = true;\n                    break;\n                case \"d\":\n                    blobSASPermissions.delete = true;\n                    break;\n                case \"x\":\n                    blobSASPermissions.deleteVersion = true;\n                    break;\n                case \"t\":\n                    blobSASPermissions.tag = true;\n                    break;\n                case \"m\":\n                    blobSASPermissions.move = true;\n                    break;\n                case \"e\":\n                    blobSASPermissions.execute = true;\n                    break;\n                case \"i\":\n                    blobSASPermissions.setImmutabilityPolicy = true;\n                    break;\n                case \"y\":\n                    blobSASPermissions.permanentDelete = true;\n                    break;\n                default:\n                    throw new RangeError(`Invalid permission: ${char}`);\n            }\n        }\n        return blobSASPermissions;\n    }\n    /**\n     * Creates a {@link BlobSASPermissions} from a raw object which contains same keys as it\n     * and boolean values for them.\n     *\n     * @param permissionLike -\n     */\n    static from(permissionLike) {\n        const blobSASPermissions = new BlobSASPermissions();\n        if (permissionLike.read) {\n            blobSASPermissions.read = true;\n        }\n        if (permissionLike.add) {\n            blobSASPermissions.add = true;\n        }\n        if (permissionLike.create) {\n            blobSASPermissions.create = true;\n        }\n        if (permissionLike.write) {\n            blobSASPermissions.write = true;\n        }\n        if (permissionLike.delete) {\n            blobSASPermissions.delete = true;\n        }\n        if (permissionLike.deleteVersion) {\n            blobSASPermissions.deleteVersion = true;\n        }\n        if (permissionLike.tag) {\n            blobSASPermissions.tag = true;\n        }\n        if (permissionLike.move) {\n            blobSASPermissions.move = true;\n        }\n        if (permissionLike.execute) {\n            blobSASPermissions.execute = true;\n        }\n        if (permissionLike.setImmutabilityPolicy) {\n            blobSASPermissions.setImmutabilityPolicy = true;\n        }\n        if (permissionLike.permanentDelete) {\n            blobSASPermissions.permanentDelete = true;\n        }\n        return blobSASPermissions;\n    }\n    /**\n     * Converts the given permissions to a string. Using this method will guarantee the permissions are in an\n     * order accepted by the service.\n     *\n     * @returns A string which represents the BlobSASPermissions\n     */\n    toString() {\n        const permissions = [];\n        if (this.read) {\n            permissions.push(\"r\");\n        }\n        if (this.add) {\n            permissions.push(\"a\");\n        }\n        if (this.create) {\n            permissions.push(\"c\");\n        }\n        if (this.write) {\n            permissions.push(\"w\");\n        }\n        if (this.delete) {\n            permissions.push(\"d\");\n        }\n        if (this.deleteVersion) {\n            permissions.push(\"x\");\n        }\n        if (this.tag) {\n            permissions.push(\"t\");\n        }\n        if (this.move) {\n            permissions.push(\"m\");\n        }\n        if (this.execute) {\n            permissions.push(\"e\");\n        }\n        if (this.setImmutabilityPolicy) {\n            permissions.push(\"i\");\n        }\n        if (this.permanentDelete) {\n            permissions.push(\"y\");\n        }\n        return permissions.join(\"\");\n    }\n}\n//# sourceMappingURL=BlobSASPermissions.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/BlobSASPermissions.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/BlobSASSignatureValues.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/BlobSASSignatureValues.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generateBlobSASQueryParameters: () => (/* binding */ generateBlobSASQueryParameters),\n/* harmony export */   generateBlobSASQueryParametersInternal: () => (/* binding */ generateBlobSASQueryParametersInternal)\n/* harmony export */ });\n/* harmony import */ var _BlobSASPermissions__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./BlobSASPermissions */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/BlobSASPermissions.js\");\n/* harmony import */ var _ContainerSASPermissions__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ContainerSASPermissions */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/ContainerSASPermissions.js\");\n/* harmony import */ var _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../credentials/StorageSharedKeyCredential */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/StorageSharedKeyCredential.js\");\n/* harmony import */ var _credentials_UserDelegationKeyCredential__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../credentials/UserDelegationKeyCredential */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/UserDelegationKeyCredential.js\");\n/* harmony import */ var _SasIPRange__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./SasIPRange */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/SasIPRange.js\");\n/* harmony import */ var _SASQueryParameters__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./SASQueryParameters */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/SASQueryParameters.js\");\n/* harmony import */ var _utils_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/constants */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js\");\n/* harmony import */ var _utils_utils_common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/utils.common */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n\n\n\n\n\nfunction generateBlobSASQueryParameters(blobSASSignatureValues, sharedKeyCredentialOrUserDelegationKey, accountName) {\n    return generateBlobSASQueryParametersInternal(blobSASSignatureValues, sharedKeyCredentialOrUserDelegationKey, accountName).sasQueryParameters;\n}\nfunction generateBlobSASQueryParametersInternal(blobSASSignatureValues, sharedKeyCredentialOrUserDelegationKey, accountName) {\n    const version = blobSASSignatureValues.version ? blobSASSignatureValues.version : _utils_constants__WEBPACK_IMPORTED_MODULE_0__.SERVICE_VERSION;\n    const sharedKeyCredential = sharedKeyCredentialOrUserDelegationKey instanceof _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_1__.StorageSharedKeyCredential\n        ? sharedKeyCredentialOrUserDelegationKey\n        : undefined;\n    let userDelegationKeyCredential;\n    if (sharedKeyCredential === undefined && accountName !== undefined) {\n        userDelegationKeyCredential = new _credentials_UserDelegationKeyCredential__WEBPACK_IMPORTED_MODULE_2__.UserDelegationKeyCredential(accountName, sharedKeyCredentialOrUserDelegationKey);\n    }\n    if (sharedKeyCredential === undefined && userDelegationKeyCredential === undefined) {\n        throw TypeError(\"Invalid sharedKeyCredential, userDelegationKey or accountName.\");\n    }\n    // Version 2020-12-06 adds support for encryptionscope in SAS.\n    if (version >= \"2020-12-06\") {\n        if (sharedKeyCredential !== undefined) {\n            return generateBlobSASQueryParameters20201206(blobSASSignatureValues, sharedKeyCredential);\n        }\n        else {\n            return generateBlobSASQueryParametersUDK20201206(blobSASSignatureValues, userDelegationKeyCredential);\n        }\n    }\n    // Version 2019-12-12 adds support for the blob tags permission.\n    // Version 2018-11-09 adds support for the signed resource and signed blob snapshot time fields.\n    // https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas#constructing-the-signature-string\n    if (version >= \"2018-11-09\") {\n        if (sharedKeyCredential !== undefined) {\n            return generateBlobSASQueryParameters20181109(blobSASSignatureValues, sharedKeyCredential);\n        }\n        else {\n            // Version 2020-02-10 delegation SAS signature construction includes preauthorizedAgentObjectId, agentObjectId, correlationId.\n            if (version >= \"2020-02-10\") {\n                return generateBlobSASQueryParametersUDK20200210(blobSASSignatureValues, userDelegationKeyCredential);\n            }\n            else {\n                return generateBlobSASQueryParametersUDK20181109(blobSASSignatureValues, userDelegationKeyCredential);\n            }\n        }\n    }\n    if (version >= \"2015-04-05\") {\n        if (sharedKeyCredential !== undefined) {\n            return generateBlobSASQueryParameters20150405(blobSASSignatureValues, sharedKeyCredential);\n        }\n        else {\n            throw new RangeError(\"'version' must be >= '2018-11-09' when generating user delegation SAS using user delegation key.\");\n        }\n    }\n    throw new RangeError(\"'version' must be >= '2015-04-05'.\");\n}\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n * IMPLEMENTATION FOR API VERSION FROM 2015-04-05 AND BEFORE 2018-11-09.\n *\n * Creates an instance of SASQueryParameters.\n *\n * Only accepts required settings needed to create a SAS. For optional settings please\n * set corresponding properties directly, such as permissions, startsOn and identifier.\n *\n * WARNING: When identifier is not provided, permissions and expiresOn are required.\n * You MUST assign value to identifier or expiresOn & permissions manually if you initial with\n * this constructor.\n *\n * @param blobSASSignatureValues -\n * @param sharedKeyCredential -\n */\nfunction generateBlobSASQueryParameters20150405(blobSASSignatureValues, sharedKeyCredential) {\n    blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);\n    if (!blobSASSignatureValues.identifier &&\n        !(blobSASSignatureValues.permissions && blobSASSignatureValues.expiresOn)) {\n        throw new RangeError(\"Must provide 'permissions' and 'expiresOn' for Blob SAS generation when 'identifier' is not provided.\");\n    }\n    let resource = \"c\";\n    if (blobSASSignatureValues.blobName) {\n        resource = \"b\";\n    }\n    // Calling parse and toString guarantees the proper ordering and throws on invalid characters.\n    let verifiedPermissions;\n    if (blobSASSignatureValues.permissions) {\n        if (blobSASSignatureValues.blobName) {\n            verifiedPermissions = _BlobSASPermissions__WEBPACK_IMPORTED_MODULE_3__.BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();\n        }\n        else {\n            verifiedPermissions = _ContainerSASPermissions__WEBPACK_IMPORTED_MODULE_4__.ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();\n        }\n    }\n    // Signature is generated on the un-url-encoded values.\n    const stringToSign = [\n        verifiedPermissions ? verifiedPermissions : \"\",\n        blobSASSignatureValues.startsOn\n            ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_5__.truncatedISO8061Date)(blobSASSignatureValues.startsOn, false)\n            : \"\",\n        blobSASSignatureValues.expiresOn\n            ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_5__.truncatedISO8061Date)(blobSASSignatureValues.expiresOn, false)\n            : \"\",\n        getCanonicalName(sharedKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName),\n        blobSASSignatureValues.identifier,\n        blobSASSignatureValues.ipRange ? (0,_SasIPRange__WEBPACK_IMPORTED_MODULE_6__.ipRangeToString)(blobSASSignatureValues.ipRange) : \"\",\n        blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : \"\",\n        blobSASSignatureValues.version,\n        blobSASSignatureValues.cacheControl ? blobSASSignatureValues.cacheControl : \"\",\n        blobSASSignatureValues.contentDisposition ? blobSASSignatureValues.contentDisposition : \"\",\n        blobSASSignatureValues.contentEncoding ? blobSASSignatureValues.contentEncoding : \"\",\n        blobSASSignatureValues.contentLanguage ? blobSASSignatureValues.contentLanguage : \"\",\n        blobSASSignatureValues.contentType ? blobSASSignatureValues.contentType : \"\",\n    ].join(\"\\n\");\n    const signature = sharedKeyCredential.computeHMACSHA256(stringToSign);\n    return {\n        sasQueryParameters: new _SASQueryParameters__WEBPACK_IMPORTED_MODULE_7__.SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, undefined, undefined, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType),\n        stringToSign: stringToSign,\n    };\n}\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n * IMPLEMENTATION FOR API VERSION FROM 2018-11-09.\n *\n * Creates an instance of SASQueryParameters.\n *\n * Only accepts required settings needed to create a SAS. For optional settings please\n * set corresponding properties directly, such as permissions, startsOn and identifier.\n *\n * WARNING: When identifier is not provided, permissions and expiresOn are required.\n * You MUST assign value to identifier or expiresOn & permissions manually if you initial with\n * this constructor.\n *\n * @param blobSASSignatureValues -\n * @param sharedKeyCredential -\n */\nfunction generateBlobSASQueryParameters20181109(blobSASSignatureValues, sharedKeyCredential) {\n    blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);\n    if (!blobSASSignatureValues.identifier &&\n        !(blobSASSignatureValues.permissions && blobSASSignatureValues.expiresOn)) {\n        throw new RangeError(\"Must provide 'permissions' and 'expiresOn' for Blob SAS generation when 'identifier' is not provided.\");\n    }\n    let resource = \"c\";\n    let timestamp = blobSASSignatureValues.snapshotTime;\n    if (blobSASSignatureValues.blobName) {\n        resource = \"b\";\n        if (blobSASSignatureValues.snapshotTime) {\n            resource = \"bs\";\n        }\n        else if (blobSASSignatureValues.versionId) {\n            resource = \"bv\";\n            timestamp = blobSASSignatureValues.versionId;\n        }\n    }\n    // Calling parse and toString guarantees the proper ordering and throws on invalid characters.\n    let verifiedPermissions;\n    if (blobSASSignatureValues.permissions) {\n        if (blobSASSignatureValues.blobName) {\n            verifiedPermissions = _BlobSASPermissions__WEBPACK_IMPORTED_MODULE_3__.BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();\n        }\n        else {\n            verifiedPermissions = _ContainerSASPermissions__WEBPACK_IMPORTED_MODULE_4__.ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();\n        }\n    }\n    // Signature is generated on the un-url-encoded values.\n    const stringToSign = [\n        verifiedPermissions ? verifiedPermissions : \"\",\n        blobSASSignatureValues.startsOn\n            ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_5__.truncatedISO8061Date)(blobSASSignatureValues.startsOn, false)\n            : \"\",\n        blobSASSignatureValues.expiresOn\n            ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_5__.truncatedISO8061Date)(blobSASSignatureValues.expiresOn, false)\n            : \"\",\n        getCanonicalName(sharedKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName),\n        blobSASSignatureValues.identifier,\n        blobSASSignatureValues.ipRange ? (0,_SasIPRange__WEBPACK_IMPORTED_MODULE_6__.ipRangeToString)(blobSASSignatureValues.ipRange) : \"\",\n        blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : \"\",\n        blobSASSignatureValues.version,\n        resource,\n        timestamp,\n        blobSASSignatureValues.cacheControl ? blobSASSignatureValues.cacheControl : \"\",\n        blobSASSignatureValues.contentDisposition ? blobSASSignatureValues.contentDisposition : \"\",\n        blobSASSignatureValues.contentEncoding ? blobSASSignatureValues.contentEncoding : \"\",\n        blobSASSignatureValues.contentLanguage ? blobSASSignatureValues.contentLanguage : \"\",\n        blobSASSignatureValues.contentType ? blobSASSignatureValues.contentType : \"\",\n    ].join(\"\\n\");\n    const signature = sharedKeyCredential.computeHMACSHA256(stringToSign);\n    return {\n        sasQueryParameters: new _SASQueryParameters__WEBPACK_IMPORTED_MODULE_7__.SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, undefined, undefined, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType),\n        stringToSign: stringToSign,\n    };\n}\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n * IMPLEMENTATION FOR API VERSION FROM 2020-12-06.\n *\n * Creates an instance of SASQueryParameters.\n *\n * Only accepts required settings needed to create a SAS. For optional settings please\n * set corresponding properties directly, such as permissions, startsOn and identifier.\n *\n * WARNING: When identifier is not provided, permissions and expiresOn are required.\n * You MUST assign value to identifier or expiresOn & permissions manually if you initial with\n * this constructor.\n *\n * @param blobSASSignatureValues -\n * @param sharedKeyCredential -\n */\nfunction generateBlobSASQueryParameters20201206(blobSASSignatureValues, sharedKeyCredential) {\n    blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);\n    if (!blobSASSignatureValues.identifier &&\n        !(blobSASSignatureValues.permissions && blobSASSignatureValues.expiresOn)) {\n        throw new RangeError(\"Must provide 'permissions' and 'expiresOn' for Blob SAS generation when 'identifier' is not provided.\");\n    }\n    let resource = \"c\";\n    let timestamp = blobSASSignatureValues.snapshotTime;\n    if (blobSASSignatureValues.blobName) {\n        resource = \"b\";\n        if (blobSASSignatureValues.snapshotTime) {\n            resource = \"bs\";\n        }\n        else if (blobSASSignatureValues.versionId) {\n            resource = \"bv\";\n            timestamp = blobSASSignatureValues.versionId;\n        }\n    }\n    // Calling parse and toString guarantees the proper ordering and throws on invalid characters.\n    let verifiedPermissions;\n    if (blobSASSignatureValues.permissions) {\n        if (blobSASSignatureValues.blobName) {\n            verifiedPermissions = _BlobSASPermissions__WEBPACK_IMPORTED_MODULE_3__.BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();\n        }\n        else {\n            verifiedPermissions = _ContainerSASPermissions__WEBPACK_IMPORTED_MODULE_4__.ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();\n        }\n    }\n    // Signature is generated on the un-url-encoded values.\n    const stringToSign = [\n        verifiedPermissions ? verifiedPermissions : \"\",\n        blobSASSignatureValues.startsOn\n            ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_5__.truncatedISO8061Date)(blobSASSignatureValues.startsOn, false)\n            : \"\",\n        blobSASSignatureValues.expiresOn\n            ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_5__.truncatedISO8061Date)(blobSASSignatureValues.expiresOn, false)\n            : \"\",\n        getCanonicalName(sharedKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName),\n        blobSASSignatureValues.identifier,\n        blobSASSignatureValues.ipRange ? (0,_SasIPRange__WEBPACK_IMPORTED_MODULE_6__.ipRangeToString)(blobSASSignatureValues.ipRange) : \"\",\n        blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : \"\",\n        blobSASSignatureValues.version,\n        resource,\n        timestamp,\n        blobSASSignatureValues.encryptionScope,\n        blobSASSignatureValues.cacheControl ? blobSASSignatureValues.cacheControl : \"\",\n        blobSASSignatureValues.contentDisposition ? blobSASSignatureValues.contentDisposition : \"\",\n        blobSASSignatureValues.contentEncoding ? blobSASSignatureValues.contentEncoding : \"\",\n        blobSASSignatureValues.contentLanguage ? blobSASSignatureValues.contentLanguage : \"\",\n        blobSASSignatureValues.contentType ? blobSASSignatureValues.contentType : \"\",\n    ].join(\"\\n\");\n    const signature = sharedKeyCredential.computeHMACSHA256(stringToSign);\n    return {\n        sasQueryParameters: new _SASQueryParameters__WEBPACK_IMPORTED_MODULE_7__.SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, undefined, undefined, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType, undefined, undefined, undefined, blobSASSignatureValues.encryptionScope),\n        stringToSign: stringToSign,\n    };\n}\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n * IMPLEMENTATION FOR API VERSION FROM 2018-11-09.\n *\n * Creates an instance of SASQueryParameters.\n *\n * Only accepts required settings needed to create a SAS. For optional settings please\n * set corresponding properties directly, such as permissions, startsOn.\n *\n * WARNING: identifier will be ignored, permissions and expiresOn are required.\n *\n * @param blobSASSignatureValues -\n * @param userDelegationKeyCredential -\n */\nfunction generateBlobSASQueryParametersUDK20181109(blobSASSignatureValues, userDelegationKeyCredential) {\n    blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);\n    // Stored access policies are not supported for a user delegation SAS.\n    if (!blobSASSignatureValues.permissions || !blobSASSignatureValues.expiresOn) {\n        throw new RangeError(\"Must provide 'permissions' and 'expiresOn' for Blob SAS generation when generating user delegation SAS.\");\n    }\n    let resource = \"c\";\n    let timestamp = blobSASSignatureValues.snapshotTime;\n    if (blobSASSignatureValues.blobName) {\n        resource = \"b\";\n        if (blobSASSignatureValues.snapshotTime) {\n            resource = \"bs\";\n        }\n        else if (blobSASSignatureValues.versionId) {\n            resource = \"bv\";\n            timestamp = blobSASSignatureValues.versionId;\n        }\n    }\n    // Calling parse and toString guarantees the proper ordering and throws on invalid characters.\n    let verifiedPermissions;\n    if (blobSASSignatureValues.permissions) {\n        if (blobSASSignatureValues.blobName) {\n            verifiedPermissions = _BlobSASPermissions__WEBPACK_IMPORTED_MODULE_3__.BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();\n        }\n        else {\n            verifiedPermissions = _ContainerSASPermissions__WEBPACK_IMPORTED_MODULE_4__.ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();\n        }\n    }\n    // Signature is generated on the un-url-encoded values.\n    const stringToSign = [\n        verifiedPermissions ? verifiedPermissions : \"\",\n        blobSASSignatureValues.startsOn\n            ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_5__.truncatedISO8061Date)(blobSASSignatureValues.startsOn, false)\n            : \"\",\n        blobSASSignatureValues.expiresOn\n            ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_5__.truncatedISO8061Date)(blobSASSignatureValues.expiresOn, false)\n            : \"\",\n        getCanonicalName(userDelegationKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName),\n        userDelegationKeyCredential.userDelegationKey.signedObjectId,\n        userDelegationKeyCredential.userDelegationKey.signedTenantId,\n        userDelegationKeyCredential.userDelegationKey.signedStartsOn\n            ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_5__.truncatedISO8061Date)(userDelegationKeyCredential.userDelegationKey.signedStartsOn, false)\n            : \"\",\n        userDelegationKeyCredential.userDelegationKey.signedExpiresOn\n            ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_5__.truncatedISO8061Date)(userDelegationKeyCredential.userDelegationKey.signedExpiresOn, false)\n            : \"\",\n        userDelegationKeyCredential.userDelegationKey.signedService,\n        userDelegationKeyCredential.userDelegationKey.signedVersion,\n        blobSASSignatureValues.ipRange ? (0,_SasIPRange__WEBPACK_IMPORTED_MODULE_6__.ipRangeToString)(blobSASSignatureValues.ipRange) : \"\",\n        blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : \"\",\n        blobSASSignatureValues.version,\n        resource,\n        timestamp,\n        blobSASSignatureValues.cacheControl,\n        blobSASSignatureValues.contentDisposition,\n        blobSASSignatureValues.contentEncoding,\n        blobSASSignatureValues.contentLanguage,\n        blobSASSignatureValues.contentType,\n    ].join(\"\\n\");\n    const signature = userDelegationKeyCredential.computeHMACSHA256(stringToSign);\n    return {\n        sasQueryParameters: new _SASQueryParameters__WEBPACK_IMPORTED_MODULE_7__.SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, undefined, undefined, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType, userDelegationKeyCredential.userDelegationKey),\n        stringToSign: stringToSign,\n    };\n}\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n * IMPLEMENTATION FOR API VERSION FROM 2020-02-10.\n *\n * Creates an instance of SASQueryParameters.\n *\n * Only accepts required settings needed to create a SAS. For optional settings please\n * set corresponding properties directly, such as permissions, startsOn.\n *\n * WARNING: identifier will be ignored, permissions and expiresOn are required.\n *\n * @param blobSASSignatureValues -\n * @param userDelegationKeyCredential -\n */\nfunction generateBlobSASQueryParametersUDK20200210(blobSASSignatureValues, userDelegationKeyCredential) {\n    blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);\n    // Stored access policies are not supported for a user delegation SAS.\n    if (!blobSASSignatureValues.permissions || !blobSASSignatureValues.expiresOn) {\n        throw new RangeError(\"Must provide 'permissions' and 'expiresOn' for Blob SAS generation when generating user delegation SAS.\");\n    }\n    let resource = \"c\";\n    let timestamp = blobSASSignatureValues.snapshotTime;\n    if (blobSASSignatureValues.blobName) {\n        resource = \"b\";\n        if (blobSASSignatureValues.snapshotTime) {\n            resource = \"bs\";\n        }\n        else if (blobSASSignatureValues.versionId) {\n            resource = \"bv\";\n            timestamp = blobSASSignatureValues.versionId;\n        }\n    }\n    // Calling parse and toString guarantees the proper ordering and throws on invalid characters.\n    let verifiedPermissions;\n    if (blobSASSignatureValues.permissions) {\n        if (blobSASSignatureValues.blobName) {\n            verifiedPermissions = _BlobSASPermissions__WEBPACK_IMPORTED_MODULE_3__.BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();\n        }\n        else {\n            verifiedPermissions = _ContainerSASPermissions__WEBPACK_IMPORTED_MODULE_4__.ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();\n        }\n    }\n    // Signature is generated on the un-url-encoded values.\n    const stringToSign = [\n        verifiedPermissions ? verifiedPermissions : \"\",\n        blobSASSignatureValues.startsOn\n            ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_5__.truncatedISO8061Date)(blobSASSignatureValues.startsOn, false)\n            : \"\",\n        blobSASSignatureValues.expiresOn\n            ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_5__.truncatedISO8061Date)(blobSASSignatureValues.expiresOn, false)\n            : \"\",\n        getCanonicalName(userDelegationKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName),\n        userDelegationKeyCredential.userDelegationKey.signedObjectId,\n        userDelegationKeyCredential.userDelegationKey.signedTenantId,\n        userDelegationKeyCredential.userDelegationKey.signedStartsOn\n            ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_5__.truncatedISO8061Date)(userDelegationKeyCredential.userDelegationKey.signedStartsOn, false)\n            : \"\",\n        userDelegationKeyCredential.userDelegationKey.signedExpiresOn\n            ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_5__.truncatedISO8061Date)(userDelegationKeyCredential.userDelegationKey.signedExpiresOn, false)\n            : \"\",\n        userDelegationKeyCredential.userDelegationKey.signedService,\n        userDelegationKeyCredential.userDelegationKey.signedVersion,\n        blobSASSignatureValues.preauthorizedAgentObjectId,\n        undefined, // agentObjectId\n        blobSASSignatureValues.correlationId,\n        blobSASSignatureValues.ipRange ? (0,_SasIPRange__WEBPACK_IMPORTED_MODULE_6__.ipRangeToString)(blobSASSignatureValues.ipRange) : \"\",\n        blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : \"\",\n        blobSASSignatureValues.version,\n        resource,\n        timestamp,\n        blobSASSignatureValues.cacheControl,\n        blobSASSignatureValues.contentDisposition,\n        blobSASSignatureValues.contentEncoding,\n        blobSASSignatureValues.contentLanguage,\n        blobSASSignatureValues.contentType,\n    ].join(\"\\n\");\n    const signature = userDelegationKeyCredential.computeHMACSHA256(stringToSign);\n    return {\n        sasQueryParameters: new _SASQueryParameters__WEBPACK_IMPORTED_MODULE_7__.SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, undefined, undefined, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType, userDelegationKeyCredential.userDelegationKey, blobSASSignatureValues.preauthorizedAgentObjectId, blobSASSignatureValues.correlationId),\n        stringToSign: stringToSign,\n    };\n}\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n * IMPLEMENTATION FOR API VERSION FROM 2020-12-06.\n *\n * Creates an instance of SASQueryParameters.\n *\n * Only accepts required settings needed to create a SAS. For optional settings please\n * set corresponding properties directly, such as permissions, startsOn.\n *\n * WARNING: identifier will be ignored, permissions and expiresOn are required.\n *\n * @param blobSASSignatureValues -\n * @param userDelegationKeyCredential -\n */\nfunction generateBlobSASQueryParametersUDK20201206(blobSASSignatureValues, userDelegationKeyCredential) {\n    blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);\n    // Stored access policies are not supported for a user delegation SAS.\n    if (!blobSASSignatureValues.permissions || !blobSASSignatureValues.expiresOn) {\n        throw new RangeError(\"Must provide 'permissions' and 'expiresOn' for Blob SAS generation when generating user delegation SAS.\");\n    }\n    let resource = \"c\";\n    let timestamp = blobSASSignatureValues.snapshotTime;\n    if (blobSASSignatureValues.blobName) {\n        resource = \"b\";\n        if (blobSASSignatureValues.snapshotTime) {\n            resource = \"bs\";\n        }\n        else if (blobSASSignatureValues.versionId) {\n            resource = \"bv\";\n            timestamp = blobSASSignatureValues.versionId;\n        }\n    }\n    // Calling parse and toString guarantees the proper ordering and throws on invalid characters.\n    let verifiedPermissions;\n    if (blobSASSignatureValues.permissions) {\n        if (blobSASSignatureValues.blobName) {\n            verifiedPermissions = _BlobSASPermissions__WEBPACK_IMPORTED_MODULE_3__.BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();\n        }\n        else {\n            verifiedPermissions = _ContainerSASPermissions__WEBPACK_IMPORTED_MODULE_4__.ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();\n        }\n    }\n    // Signature is generated on the un-url-encoded values.\n    const stringToSign = [\n        verifiedPermissions ? verifiedPermissions : \"\",\n        blobSASSignatureValues.startsOn\n            ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_5__.truncatedISO8061Date)(blobSASSignatureValues.startsOn, false)\n            : \"\",\n        blobSASSignatureValues.expiresOn\n            ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_5__.truncatedISO8061Date)(blobSASSignatureValues.expiresOn, false)\n            : \"\",\n        getCanonicalName(userDelegationKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName),\n        userDelegationKeyCredential.userDelegationKey.signedObjectId,\n        userDelegationKeyCredential.userDelegationKey.signedTenantId,\n        userDelegationKeyCredential.userDelegationKey.signedStartsOn\n            ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_5__.truncatedISO8061Date)(userDelegationKeyCredential.userDelegationKey.signedStartsOn, false)\n            : \"\",\n        userDelegationKeyCredential.userDelegationKey.signedExpiresOn\n            ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_5__.truncatedISO8061Date)(userDelegationKeyCredential.userDelegationKey.signedExpiresOn, false)\n            : \"\",\n        userDelegationKeyCredential.userDelegationKey.signedService,\n        userDelegationKeyCredential.userDelegationKey.signedVersion,\n        blobSASSignatureValues.preauthorizedAgentObjectId,\n        undefined, // agentObjectId\n        blobSASSignatureValues.correlationId,\n        blobSASSignatureValues.ipRange ? (0,_SasIPRange__WEBPACK_IMPORTED_MODULE_6__.ipRangeToString)(blobSASSignatureValues.ipRange) : \"\",\n        blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : \"\",\n        blobSASSignatureValues.version,\n        resource,\n        timestamp,\n        blobSASSignatureValues.encryptionScope,\n        blobSASSignatureValues.cacheControl,\n        blobSASSignatureValues.contentDisposition,\n        blobSASSignatureValues.contentEncoding,\n        blobSASSignatureValues.contentLanguage,\n        blobSASSignatureValues.contentType,\n    ].join(\"\\n\");\n    const signature = userDelegationKeyCredential.computeHMACSHA256(stringToSign);\n    return {\n        sasQueryParameters: new _SASQueryParameters__WEBPACK_IMPORTED_MODULE_7__.SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, undefined, undefined, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType, userDelegationKeyCredential.userDelegationKey, blobSASSignatureValues.preauthorizedAgentObjectId, blobSASSignatureValues.correlationId, blobSASSignatureValues.encryptionScope),\n        stringToSign: stringToSign,\n    };\n}\nfunction getCanonicalName(accountName, containerName, blobName) {\n    // Container: \"/blob/account/containerName\"\n    // Blob:      \"/blob/account/containerName/blobName\"\n    const elements = [`/blob/${accountName}/${containerName}`];\n    if (blobName) {\n        elements.push(`/${blobName}`);\n    }\n    return elements.join(\"\");\n}\nfunction SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues) {\n    const version = blobSASSignatureValues.version ? blobSASSignatureValues.version : _utils_constants__WEBPACK_IMPORTED_MODULE_0__.SERVICE_VERSION;\n    if (blobSASSignatureValues.snapshotTime && version < \"2018-11-09\") {\n        throw RangeError(\"'version' must be >= '2018-11-09' when providing 'snapshotTime'.\");\n    }\n    if (blobSASSignatureValues.blobName === undefined && blobSASSignatureValues.snapshotTime) {\n        throw RangeError(\"Must provide 'blobName' when providing 'snapshotTime'.\");\n    }\n    if (blobSASSignatureValues.versionId && version < \"2019-10-10\") {\n        throw RangeError(\"'version' must be >= '2019-10-10' when providing 'versionId'.\");\n    }\n    if (blobSASSignatureValues.blobName === undefined && blobSASSignatureValues.versionId) {\n        throw RangeError(\"Must provide 'blobName' when providing 'versionId'.\");\n    }\n    if (blobSASSignatureValues.permissions &&\n        blobSASSignatureValues.permissions.setImmutabilityPolicy &&\n        version < \"2020-08-04\") {\n        throw RangeError(\"'version' must be >= '2020-08-04' when provided 'i' permission.\");\n    }\n    if (blobSASSignatureValues.permissions &&\n        blobSASSignatureValues.permissions.deleteVersion &&\n        version < \"2019-10-10\") {\n        throw RangeError(\"'version' must be >= '2019-10-10' when providing 'x' permission.\");\n    }\n    if (blobSASSignatureValues.permissions &&\n        blobSASSignatureValues.permissions.permanentDelete &&\n        version < \"2019-10-10\") {\n        throw RangeError(\"'version' must be >= '2019-10-10' when providing 'y' permission.\");\n    }\n    if (blobSASSignatureValues.permissions &&\n        blobSASSignatureValues.permissions.tag &&\n        version < \"2019-12-12\") {\n        throw RangeError(\"'version' must be >= '2019-12-12' when providing 't' permission.\");\n    }\n    if (version < \"2020-02-10\" &&\n        blobSASSignatureValues.permissions &&\n        (blobSASSignatureValues.permissions.move || blobSASSignatureValues.permissions.execute)) {\n        throw RangeError(\"'version' must be >= '2020-02-10' when providing the 'm' or 'e' permission.\");\n    }\n    if (version < \"2021-04-10\" &&\n        blobSASSignatureValues.permissions &&\n        blobSASSignatureValues.permissions.filterByTags) {\n        throw RangeError(\"'version' must be >= '2021-04-10' when providing the 'f' permission.\");\n    }\n    if (version < \"2020-02-10\" &&\n        (blobSASSignatureValues.preauthorizedAgentObjectId || blobSASSignatureValues.correlationId)) {\n        throw RangeError(\"'version' must be >= '2020-02-10' when providing 'preauthorizedAgentObjectId' or 'correlationId'.\");\n    }\n    if (blobSASSignatureValues.encryptionScope && version < \"2020-12-06\") {\n        throw RangeError(\"'version' must be >= '2020-12-06' when provided 'encryptionScope' in SAS.\");\n    }\n    blobSASSignatureValues.version = version;\n    return blobSASSignatureValues;\n}\n//# sourceMappingURL=BlobSASSignatureValues.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/BlobSASSignatureValues.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/ContainerSASPermissions.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/ContainerSASPermissions.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ContainerSASPermissions: () => (/* binding */ ContainerSASPermissions)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * This is a helper class to construct a string representing the permissions granted by a ServiceSAS to a container.\n * Setting a value to true means that any SAS which uses these permissions will grant permissions for that operation.\n * Once all the values are set, this should be serialized with toString and set as the permissions field on a\n * {@link BlobSASSignatureValues} object. It is possible to construct the permissions string without this class, but\n * the order of the permissions is particular and this class guarantees correctness.\n */\nclass ContainerSASPermissions {\n    constructor() {\n        /**\n         * Specifies Read access granted.\n         */\n        this.read = false;\n        /**\n         * Specifies Add access granted.\n         */\n        this.add = false;\n        /**\n         * Specifies Create access granted.\n         */\n        this.create = false;\n        /**\n         * Specifies Write access granted.\n         */\n        this.write = false;\n        /**\n         * Specifies Delete access granted.\n         */\n        this.delete = false;\n        /**\n         * Specifies Delete version access granted.\n         */\n        this.deleteVersion = false;\n        /**\n         * Specifies List access granted.\n         */\n        this.list = false;\n        /**\n         * Specfies Tag access granted.\n         */\n        this.tag = false;\n        /**\n         * Specifies Move access granted.\n         */\n        this.move = false;\n        /**\n         * Specifies Execute access granted.\n         */\n        this.execute = false;\n        /**\n         * Specifies SetImmutabilityPolicy access granted.\n         */\n        this.setImmutabilityPolicy = false;\n        /**\n         * Specifies that Permanent Delete is permitted.\n         */\n        this.permanentDelete = false;\n        /**\n         * Specifies that Filter Blobs by Tags is permitted.\n         */\n        this.filterByTags = false;\n    }\n    /**\n     * Creates an {@link ContainerSASPermissions} from the specified permissions string. This method will throw an\n     * Error if it encounters a character that does not correspond to a valid permission.\n     *\n     * @param permissions -\n     */\n    static parse(permissions) {\n        const containerSASPermissions = new ContainerSASPermissions();\n        for (const char of permissions) {\n            switch (char) {\n                case \"r\":\n                    containerSASPermissions.read = true;\n                    break;\n                case \"a\":\n                    containerSASPermissions.add = true;\n                    break;\n                case \"c\":\n                    containerSASPermissions.create = true;\n                    break;\n                case \"w\":\n                    containerSASPermissions.write = true;\n                    break;\n                case \"d\":\n                    containerSASPermissions.delete = true;\n                    break;\n                case \"l\":\n                    containerSASPermissions.list = true;\n                    break;\n                case \"t\":\n                    containerSASPermissions.tag = true;\n                    break;\n                case \"x\":\n                    containerSASPermissions.deleteVersion = true;\n                    break;\n                case \"m\":\n                    containerSASPermissions.move = true;\n                    break;\n                case \"e\":\n                    containerSASPermissions.execute = true;\n                    break;\n                case \"i\":\n                    containerSASPermissions.setImmutabilityPolicy = true;\n                    break;\n                case \"y\":\n                    containerSASPermissions.permanentDelete = true;\n                    break;\n                case \"f\":\n                    containerSASPermissions.filterByTags = true;\n                    break;\n                default:\n                    throw new RangeError(`Invalid permission ${char}`);\n            }\n        }\n        return containerSASPermissions;\n    }\n    /**\n     * Creates a {@link ContainerSASPermissions} from a raw object which contains same keys as it\n     * and boolean values for them.\n     *\n     * @param permissionLike -\n     */\n    static from(permissionLike) {\n        const containerSASPermissions = new ContainerSASPermissions();\n        if (permissionLike.read) {\n            containerSASPermissions.read = true;\n        }\n        if (permissionLike.add) {\n            containerSASPermissions.add = true;\n        }\n        if (permissionLike.create) {\n            containerSASPermissions.create = true;\n        }\n        if (permissionLike.write) {\n            containerSASPermissions.write = true;\n        }\n        if (permissionLike.delete) {\n            containerSASPermissions.delete = true;\n        }\n        if (permissionLike.list) {\n            containerSASPermissions.list = true;\n        }\n        if (permissionLike.deleteVersion) {\n            containerSASPermissions.deleteVersion = true;\n        }\n        if (permissionLike.tag) {\n            containerSASPermissions.tag = true;\n        }\n        if (permissionLike.move) {\n            containerSASPermissions.move = true;\n        }\n        if (permissionLike.execute) {\n            containerSASPermissions.execute = true;\n        }\n        if (permissionLike.setImmutabilityPolicy) {\n            containerSASPermissions.setImmutabilityPolicy = true;\n        }\n        if (permissionLike.permanentDelete) {\n            containerSASPermissions.permanentDelete = true;\n        }\n        if (permissionLike.filterByTags) {\n            containerSASPermissions.filterByTags = true;\n        }\n        return containerSASPermissions;\n    }\n    /**\n     * Converts the given permissions to a string. Using this method will guarantee the permissions are in an\n     * order accepted by the service.\n     *\n     * The order of the characters should be as specified here to ensure correctness.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas\n     *\n     */\n    toString() {\n        const permissions = [];\n        if (this.read) {\n            permissions.push(\"r\");\n        }\n        if (this.add) {\n            permissions.push(\"a\");\n        }\n        if (this.create) {\n            permissions.push(\"c\");\n        }\n        if (this.write) {\n            permissions.push(\"w\");\n        }\n        if (this.delete) {\n            permissions.push(\"d\");\n        }\n        if (this.deleteVersion) {\n            permissions.push(\"x\");\n        }\n        if (this.list) {\n            permissions.push(\"l\");\n        }\n        if (this.tag) {\n            permissions.push(\"t\");\n        }\n        if (this.move) {\n            permissions.push(\"m\");\n        }\n        if (this.execute) {\n            permissions.push(\"e\");\n        }\n        if (this.setImmutabilityPolicy) {\n            permissions.push(\"i\");\n        }\n        if (this.permanentDelete) {\n            permissions.push(\"y\");\n        }\n        if (this.filterByTags) {\n            permissions.push(\"f\");\n        }\n        return permissions.join(\"\");\n    }\n}\n//# sourceMappingURL=ContainerSASPermissions.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/ContainerSASPermissions.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/SASQueryParameters.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/SASQueryParameters.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SASProtocol: () => (/* binding */ SASProtocol),\n/* harmony export */   SASQueryParameters: () => (/* binding */ SASQueryParameters)\n/* harmony export */ });\n/* harmony import */ var _SasIPRange__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SasIPRange */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/SasIPRange.js\");\n/* harmony import */ var _utils_utils_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/utils.common */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n/**\n * Protocols for generated SAS.\n */\nvar SASProtocol;\n(function (SASProtocol) {\n    /**\n     * Protocol that allows HTTPS only\n     */\n    SASProtocol[\"Https\"] = \"https\";\n    /**\n     * Protocol that allows both HTTPS and HTTP\n     */\n    SASProtocol[\"HttpsAndHttp\"] = \"https,http\";\n})(SASProtocol || (SASProtocol = {}));\n/**\n * Represents the components that make up an Azure Storage SAS' query parameters. This type is not constructed directly\n * by the user; it is only generated by the {@link AccountSASSignatureValues} and {@link BlobSASSignatureValues}\n * types. Once generated, it can be encoded into a {@link String} and appended to a URL directly (though caution should\n * be taken here in case there are existing query parameters, which might affect the appropriate means of appending\n * these query parameters).\n *\n * NOTE: Instances of this class are immutable.\n */\nclass SASQueryParameters {\n    /**\n     * Optional. IP range allowed for this SAS.\n     *\n     * @readonly\n     */\n    get ipRange() {\n        if (this.ipRangeInner) {\n            return {\n                end: this.ipRangeInner.end,\n                start: this.ipRangeInner.start,\n            };\n        }\n        return undefined;\n    }\n    constructor(version, signature, permissionsOrOptions, services, resourceTypes, protocol, startsOn, expiresOn, ipRange, identifier, resource, cacheControl, contentDisposition, contentEncoding, contentLanguage, contentType, userDelegationKey, preauthorizedAgentObjectId, correlationId, encryptionScope) {\n        this.version = version;\n        this.signature = signature;\n        if (permissionsOrOptions !== undefined && typeof permissionsOrOptions !== \"string\") {\n            // SASQueryParametersOptions\n            this.permissions = permissionsOrOptions.permissions;\n            this.services = permissionsOrOptions.services;\n            this.resourceTypes = permissionsOrOptions.resourceTypes;\n            this.protocol = permissionsOrOptions.protocol;\n            this.startsOn = permissionsOrOptions.startsOn;\n            this.expiresOn = permissionsOrOptions.expiresOn;\n            this.ipRangeInner = permissionsOrOptions.ipRange;\n            this.identifier = permissionsOrOptions.identifier;\n            this.encryptionScope = permissionsOrOptions.encryptionScope;\n            this.resource = permissionsOrOptions.resource;\n            this.cacheControl = permissionsOrOptions.cacheControl;\n            this.contentDisposition = permissionsOrOptions.contentDisposition;\n            this.contentEncoding = permissionsOrOptions.contentEncoding;\n            this.contentLanguage = permissionsOrOptions.contentLanguage;\n            this.contentType = permissionsOrOptions.contentType;\n            if (permissionsOrOptions.userDelegationKey) {\n                this.signedOid = permissionsOrOptions.userDelegationKey.signedObjectId;\n                this.signedTenantId = permissionsOrOptions.userDelegationKey.signedTenantId;\n                this.signedStartsOn = permissionsOrOptions.userDelegationKey.signedStartsOn;\n                this.signedExpiresOn = permissionsOrOptions.userDelegationKey.signedExpiresOn;\n                this.signedService = permissionsOrOptions.userDelegationKey.signedService;\n                this.signedVersion = permissionsOrOptions.userDelegationKey.signedVersion;\n                this.preauthorizedAgentObjectId = permissionsOrOptions.preauthorizedAgentObjectId;\n                this.correlationId = permissionsOrOptions.correlationId;\n            }\n        }\n        else {\n            this.services = services;\n            this.resourceTypes = resourceTypes;\n            this.expiresOn = expiresOn;\n            this.permissions = permissionsOrOptions;\n            this.protocol = protocol;\n            this.startsOn = startsOn;\n            this.ipRangeInner = ipRange;\n            this.encryptionScope = encryptionScope;\n            this.identifier = identifier;\n            this.resource = resource;\n            this.cacheControl = cacheControl;\n            this.contentDisposition = contentDisposition;\n            this.contentEncoding = contentEncoding;\n            this.contentLanguage = contentLanguage;\n            this.contentType = contentType;\n            if (userDelegationKey) {\n                this.signedOid = userDelegationKey.signedObjectId;\n                this.signedTenantId = userDelegationKey.signedTenantId;\n                this.signedStartsOn = userDelegationKey.signedStartsOn;\n                this.signedExpiresOn = userDelegationKey.signedExpiresOn;\n                this.signedService = userDelegationKey.signedService;\n                this.signedVersion = userDelegationKey.signedVersion;\n                this.preauthorizedAgentObjectId = preauthorizedAgentObjectId;\n                this.correlationId = correlationId;\n            }\n        }\n    }\n    /**\n     * Encodes all SAS query parameters into a string that can be appended to a URL.\n     *\n     */\n    toString() {\n        const params = [\n            \"sv\",\n            \"ss\",\n            \"srt\",\n            \"spr\",\n            \"st\",\n            \"se\",\n            \"sip\",\n            \"si\",\n            \"ses\",\n            \"skoid\", // Signed object ID\n            \"sktid\", // Signed tenant ID\n            \"skt\", // Signed key start time\n            \"ske\", // Signed key expiry time\n            \"sks\", // Signed key service\n            \"skv\", // Signed key version\n            \"sr\",\n            \"sp\",\n            \"sig\",\n            \"rscc\",\n            \"rscd\",\n            \"rsce\",\n            \"rscl\",\n            \"rsct\",\n            \"saoid\",\n            \"scid\",\n        ];\n        const queries = [];\n        for (const param of params) {\n            switch (param) {\n                case \"sv\":\n                    this.tryAppendQueryParameter(queries, param, this.version);\n                    break;\n                case \"ss\":\n                    this.tryAppendQueryParameter(queries, param, this.services);\n                    break;\n                case \"srt\":\n                    this.tryAppendQueryParameter(queries, param, this.resourceTypes);\n                    break;\n                case \"spr\":\n                    this.tryAppendQueryParameter(queries, param, this.protocol);\n                    break;\n                case \"st\":\n                    this.tryAppendQueryParameter(queries, param, this.startsOn ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_0__.truncatedISO8061Date)(this.startsOn, false) : undefined);\n                    break;\n                case \"se\":\n                    this.tryAppendQueryParameter(queries, param, this.expiresOn ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_0__.truncatedISO8061Date)(this.expiresOn, false) : undefined);\n                    break;\n                case \"sip\":\n                    this.tryAppendQueryParameter(queries, param, this.ipRange ? (0,_SasIPRange__WEBPACK_IMPORTED_MODULE_1__.ipRangeToString)(this.ipRange) : undefined);\n                    break;\n                case \"si\":\n                    this.tryAppendQueryParameter(queries, param, this.identifier);\n                    break;\n                case \"ses\":\n                    this.tryAppendQueryParameter(queries, param, this.encryptionScope);\n                    break;\n                case \"skoid\": // Signed object ID\n                    this.tryAppendQueryParameter(queries, param, this.signedOid);\n                    break;\n                case \"sktid\": // Signed tenant ID\n                    this.tryAppendQueryParameter(queries, param, this.signedTenantId);\n                    break;\n                case \"skt\": // Signed key start time\n                    this.tryAppendQueryParameter(queries, param, this.signedStartsOn ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_0__.truncatedISO8061Date)(this.signedStartsOn, false) : undefined);\n                    break;\n                case \"ske\": // Signed key expiry time\n                    this.tryAppendQueryParameter(queries, param, this.signedExpiresOn ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_0__.truncatedISO8061Date)(this.signedExpiresOn, false) : undefined);\n                    break;\n                case \"sks\": // Signed key service\n                    this.tryAppendQueryParameter(queries, param, this.signedService);\n                    break;\n                case \"skv\": // Signed key version\n                    this.tryAppendQueryParameter(queries, param, this.signedVersion);\n                    break;\n                case \"sr\":\n                    this.tryAppendQueryParameter(queries, param, this.resource);\n                    break;\n                case \"sp\":\n                    this.tryAppendQueryParameter(queries, param, this.permissions);\n                    break;\n                case \"sig\":\n                    this.tryAppendQueryParameter(queries, param, this.signature);\n                    break;\n                case \"rscc\":\n                    this.tryAppendQueryParameter(queries, param, this.cacheControl);\n                    break;\n                case \"rscd\":\n                    this.tryAppendQueryParameter(queries, param, this.contentDisposition);\n                    break;\n                case \"rsce\":\n                    this.tryAppendQueryParameter(queries, param, this.contentEncoding);\n                    break;\n                case \"rscl\":\n                    this.tryAppendQueryParameter(queries, param, this.contentLanguage);\n                    break;\n                case \"rsct\":\n                    this.tryAppendQueryParameter(queries, param, this.contentType);\n                    break;\n                case \"saoid\":\n                    this.tryAppendQueryParameter(queries, param, this.preauthorizedAgentObjectId);\n                    break;\n                case \"scid\":\n                    this.tryAppendQueryParameter(queries, param, this.correlationId);\n                    break;\n            }\n        }\n        return queries.join(\"&\");\n    }\n    /**\n     * A private helper method used to filter and append query key/value pairs into an array.\n     *\n     * @param queries -\n     * @param key -\n     * @param value -\n     */\n    tryAppendQueryParameter(queries, key, value) {\n        if (!value) {\n            return;\n        }\n        key = encodeURIComponent(key);\n        value = encodeURIComponent(value);\n        if (key.length > 0 && value.length > 0) {\n            queries.push(`${key}=${value}`);\n        }\n    }\n}\n//# sourceMappingURL=SASQueryParameters.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/SASQueryParameters.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/SasIPRange.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/SasIPRange.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ipRangeToString: () => (/* binding */ ipRangeToString)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * Generate SasIPRange format string. For example:\n *\n * \"8.8.8.8\" or \"1.1.1.1-255.255.255.255\"\n *\n * @param ipRange -\n */\nfunction ipRangeToString(ipRange) {\n    return ipRange.end ? `${ipRange.start}-${ipRange.end}` : ipRange.start;\n}\n//# sourceMappingURL=SasIPRange.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL3Nhcy9TYXNJUFJhbmdlLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLDRCQUE0QixjQUFjLEdBQUcsWUFBWTtBQUN6RDtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvdmljdG9yd2lsc29uL0Rlc2t0b3AvcHJvamVjdHMvRVpWaXovbm9kZV9tb2R1bGVzL0BhenVyZS9zdG9yYWdlLWJsb2IvZGlzdC1lc20vc3RvcmFnZS1ibG9iL3NyYy9zYXMvU2FzSVBSYW5nZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbi8qKlxuICogR2VuZXJhdGUgU2FzSVBSYW5nZSBmb3JtYXQgc3RyaW5nLiBGb3IgZXhhbXBsZTpcbiAqXG4gKiBcIjguOC44LjhcIiBvciBcIjEuMS4xLjEtMjU1LjI1NS4yNTUuMjU1XCJcbiAqXG4gKiBAcGFyYW0gaXBSYW5nZSAtXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpcFJhbmdlVG9TdHJpbmcoaXBSYW5nZSkge1xuICAgIHJldHVybiBpcFJhbmdlLmVuZCA/IGAke2lwUmFuZ2Uuc3RhcnR9LSR7aXBSYW5nZS5lbmR9YCA6IGlwUmFuZ2Uuc3RhcnQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TYXNJUFJhbmdlLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/SasIPRange.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/Batch.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/Batch.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Batch: () => (/* binding */ Batch)\n/* harmony export */ });\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n// In browser, during webpack or browserify bundling, this module will be replaced by 'events'\n// https://github.com/Gozala/events\n\n/**\n * States for Batch.\n */\nvar BatchStates;\n(function (BatchStates) {\n    BatchStates[BatchStates[\"Good\"] = 0] = \"Good\";\n    BatchStates[BatchStates[\"Error\"] = 1] = \"Error\";\n})(BatchStates || (BatchStates = {}));\n/**\n * Batch provides basic parallel execution with concurrency limits.\n * Will stop execute left operations when one of the executed operation throws an error.\n * But Batch cannot cancel ongoing operations, you need to cancel them by yourself.\n */\nclass Batch {\n    /**\n     * Creates an instance of Batch.\n     * @param concurrency -\n     */\n    constructor(concurrency = 5) {\n        /**\n         * Number of active operations under execution.\n         */\n        this.actives = 0;\n        /**\n         * Number of completed operations under execution.\n         */\n        this.completed = 0;\n        /**\n         * Offset of next operation to be executed.\n         */\n        this.offset = 0;\n        /**\n         * Operation array to be executed.\n         */\n        this.operations = [];\n        /**\n         * States of Batch. When an error happens, state will turn into error.\n         * Batch will stop execute left operations.\n         */\n        this.state = BatchStates.Good;\n        if (concurrency < 1) {\n            throw new RangeError(\"concurrency must be larger than 0\");\n        }\n        this.concurrency = concurrency;\n        this.emitter = new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();\n    }\n    /**\n     * Add a operation into queue.\n     *\n     * @param operation -\n     */\n    addOperation(operation) {\n        this.operations.push(async () => {\n            try {\n                this.actives++;\n                await operation();\n                this.actives--;\n                this.completed++;\n                this.parallelExecute();\n            }\n            catch (error) {\n                this.emitter.emit(\"error\", error);\n            }\n        });\n    }\n    /**\n     * Start execute operations in the queue.\n     *\n     */\n    async do() {\n        if (this.operations.length === 0) {\n            return Promise.resolve();\n        }\n        this.parallelExecute();\n        return new Promise((resolve, reject) => {\n            this.emitter.on(\"finish\", resolve);\n            this.emitter.on(\"error\", (error) => {\n                this.state = BatchStates.Error;\n                reject(error);\n            });\n        });\n    }\n    /**\n     * Get next operation to be executed. Return null when reaching ends.\n     *\n     */\n    nextOperation() {\n        if (this.offset < this.operations.length) {\n            return this.operations[this.offset++];\n        }\n        return null;\n    }\n    /**\n     * Start execute operations. One one the most important difference between\n     * this method with do() is that do() wraps as an sync method.\n     *\n     */\n    parallelExecute() {\n        if (this.state === BatchStates.Error) {\n            return;\n        }\n        if (this.completed >= this.operations.length) {\n            this.emitter.emit(\"finish\");\n            return;\n        }\n        while (this.actives < this.concurrency) {\n            const operation = this.nextOperation();\n            if (operation) {\n                operation();\n            }\n            else {\n                return;\n            }\n        }\n    }\n}\n//# sourceMappingURL=Batch.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL3V0aWxzL0JhdGNoLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ3NDO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxrQ0FBa0M7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLGdEQUFZO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcndpbHNvbi9EZXNrdG9wL3Byb2plY3RzL0VaVml6L25vZGVfbW9kdWxlcy9AYXp1cmUvc3RvcmFnZS1ibG9iL2Rpc3QtZXNtL3N0b3JhZ2UtYmxvYi9zcmMvdXRpbHMvQmF0Y2guanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4vLyBJbiBicm93c2VyLCBkdXJpbmcgd2VicGFjayBvciBicm93c2VyaWZ5IGJ1bmRsaW5nLCB0aGlzIG1vZHVsZSB3aWxsIGJlIHJlcGxhY2VkIGJ5ICdldmVudHMnXG4vLyBodHRwczovL2dpdGh1Yi5jb20vR296YWxhL2V2ZW50c1xuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSBcImV2ZW50c1wiO1xuLyoqXG4gKiBTdGF0ZXMgZm9yIEJhdGNoLlxuICovXG52YXIgQmF0Y2hTdGF0ZXM7XG4oZnVuY3Rpb24gKEJhdGNoU3RhdGVzKSB7XG4gICAgQmF0Y2hTdGF0ZXNbQmF0Y2hTdGF0ZXNbXCJHb29kXCJdID0gMF0gPSBcIkdvb2RcIjtcbiAgICBCYXRjaFN0YXRlc1tCYXRjaFN0YXRlc1tcIkVycm9yXCJdID0gMV0gPSBcIkVycm9yXCI7XG59KShCYXRjaFN0YXRlcyB8fCAoQmF0Y2hTdGF0ZXMgPSB7fSkpO1xuLyoqXG4gKiBCYXRjaCBwcm92aWRlcyBiYXNpYyBwYXJhbGxlbCBleGVjdXRpb24gd2l0aCBjb25jdXJyZW5jeSBsaW1pdHMuXG4gKiBXaWxsIHN0b3AgZXhlY3V0ZSBsZWZ0IG9wZXJhdGlvbnMgd2hlbiBvbmUgb2YgdGhlIGV4ZWN1dGVkIG9wZXJhdGlvbiB0aHJvd3MgYW4gZXJyb3IuXG4gKiBCdXQgQmF0Y2ggY2Fubm90IGNhbmNlbCBvbmdvaW5nIG9wZXJhdGlvbnMsIHlvdSBuZWVkIHRvIGNhbmNlbCB0aGVtIGJ5IHlvdXJzZWxmLlxuICovXG5leHBvcnQgY2xhc3MgQmF0Y2gge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgQmF0Y2guXG4gICAgICogQHBhcmFtIGNvbmN1cnJlbmN5IC1cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihjb25jdXJyZW5jeSA9IDUpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIE51bWJlciBvZiBhY3RpdmUgb3BlcmF0aW9ucyB1bmRlciBleGVjdXRpb24uXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmFjdGl2ZXMgPSAwO1xuICAgICAgICAvKipcbiAgICAgICAgICogTnVtYmVyIG9mIGNvbXBsZXRlZCBvcGVyYXRpb25zIHVuZGVyIGV4ZWN1dGlvbi5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuY29tcGxldGVkID0gMDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIE9mZnNldCBvZiBuZXh0IG9wZXJhdGlvbiB0byBiZSBleGVjdXRlZC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMub2Zmc2V0ID0gMDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIE9wZXJhdGlvbiBhcnJheSB0byBiZSBleGVjdXRlZC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMub3BlcmF0aW9ucyA9IFtdO1xuICAgICAgICAvKipcbiAgICAgICAgICogU3RhdGVzIG9mIEJhdGNoLiBXaGVuIGFuIGVycm9yIGhhcHBlbnMsIHN0YXRlIHdpbGwgdHVybiBpbnRvIGVycm9yLlxuICAgICAgICAgKiBCYXRjaCB3aWxsIHN0b3AgZXhlY3V0ZSBsZWZ0IG9wZXJhdGlvbnMuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnN0YXRlID0gQmF0Y2hTdGF0ZXMuR29vZDtcbiAgICAgICAgaWYgKGNvbmN1cnJlbmN5IDwgMSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJjb25jdXJyZW5jeSBtdXN0IGJlIGxhcmdlciB0aGFuIDBcIik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jb25jdXJyZW5jeSA9IGNvbmN1cnJlbmN5O1xuICAgICAgICB0aGlzLmVtaXR0ZXIgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZCBhIG9wZXJhdGlvbiBpbnRvIHF1ZXVlLlxuICAgICAqXG4gICAgICogQHBhcmFtIG9wZXJhdGlvbiAtXG4gICAgICovXG4gICAgYWRkT3BlcmF0aW9uKG9wZXJhdGlvbikge1xuICAgICAgICB0aGlzLm9wZXJhdGlvbnMucHVzaChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZlcysrO1xuICAgICAgICAgICAgICAgIGF3YWl0IG9wZXJhdGlvbigpO1xuICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZlcy0tO1xuICAgICAgICAgICAgICAgIHRoaXMuY29tcGxldGVkKys7XG4gICAgICAgICAgICAgICAgdGhpcy5wYXJhbGxlbEV4ZWN1dGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdHRlci5lbWl0KFwiZXJyb3JcIiwgZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3RhcnQgZXhlY3V0ZSBvcGVyYXRpb25zIGluIHRoZSBxdWV1ZS5cbiAgICAgKlxuICAgICAqL1xuICAgIGFzeW5jIGRvKCkge1xuICAgICAgICBpZiAodGhpcy5vcGVyYXRpb25zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucGFyYWxsZWxFeGVjdXRlKCk7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLmVtaXR0ZXIub24oXCJmaW5pc2hcIiwgcmVzb2x2ZSk7XG4gICAgICAgICAgICB0aGlzLmVtaXR0ZXIub24oXCJlcnJvclwiLCAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gQmF0Y2hTdGF0ZXMuRXJyb3I7XG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IG5leHQgb3BlcmF0aW9uIHRvIGJlIGV4ZWN1dGVkLiBSZXR1cm4gbnVsbCB3aGVuIHJlYWNoaW5nIGVuZHMuXG4gICAgICpcbiAgICAgKi9cbiAgICBuZXh0T3BlcmF0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5vZmZzZXQgPCB0aGlzLm9wZXJhdGlvbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5vcGVyYXRpb25zW3RoaXMub2Zmc2V0KytdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTdGFydCBleGVjdXRlIG9wZXJhdGlvbnMuIE9uZSBvbmUgdGhlIG1vc3QgaW1wb3J0YW50IGRpZmZlcmVuY2UgYmV0d2VlblxuICAgICAqIHRoaXMgbWV0aG9kIHdpdGggZG8oKSBpcyB0aGF0IGRvKCkgd3JhcHMgYXMgYW4gc3luYyBtZXRob2QuXG4gICAgICpcbiAgICAgKi9cbiAgICBwYXJhbGxlbEV4ZWN1dGUoKSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlID09PSBCYXRjaFN0YXRlcy5FcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmNvbXBsZXRlZCA+PSB0aGlzLm9wZXJhdGlvbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXR0ZXIuZW1pdChcImZpbmlzaFwiKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAodGhpcy5hY3RpdmVzIDwgdGhpcy5jb25jdXJyZW5jeSkge1xuICAgICAgICAgICAgY29uc3Qgb3BlcmF0aW9uID0gdGhpcy5uZXh0T3BlcmF0aW9uKCk7XG4gICAgICAgICAgICBpZiAob3BlcmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgb3BlcmF0aW9uKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1CYXRjaC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/Batch.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/BlobQuickQueryStream.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/BlobQuickQueryStream.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BlobQuickQueryStream: () => (/* binding */ BlobQuickQueryStream)\n/* harmony export */ });\n/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! stream */ \"stream\");\n/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(stream__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _storage_internal_avro_src__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../storage-internal-avro/src */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-internal-avro/src/AvroReader.js\");\n/* harmony import */ var _storage_internal_avro_src__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../storage-internal-avro/src */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-internal-avro/src/AvroReadableFromStream.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * A Node.js BlobQuickQueryStream will internally parse avro data stream for blob query.\n */\nclass BlobQuickQueryStream extends stream__WEBPACK_IMPORTED_MODULE_0__.Readable {\n    /**\n     * Creates an instance of BlobQuickQueryStream.\n     *\n     * @param source - The current ReadableStream returned from getter\n     * @param options -\n     */\n    constructor(source, options = {}) {\n        super();\n        this.avroPaused = true;\n        this.source = source;\n        this.onProgress = options.onProgress;\n        this.onError = options.onError;\n        this.avroReader = new _storage_internal_avro_src__WEBPACK_IMPORTED_MODULE_1__.AvroReader(new _storage_internal_avro_src__WEBPACK_IMPORTED_MODULE_2__.AvroReadableFromStream(this.source));\n        this.avroIter = this.avroReader.parseObjects({ abortSignal: options.abortSignal });\n    }\n    _read() {\n        if (this.avroPaused) {\n            this.readInternal().catch((err) => {\n                this.emit(\"error\", err);\n            });\n        }\n    }\n    async readInternal() {\n        this.avroPaused = false;\n        let avroNext;\n        do {\n            avroNext = await this.avroIter.next();\n            if (avroNext.done) {\n                break;\n            }\n            const obj = avroNext.value;\n            const schema = obj.$schema;\n            if (typeof schema !== \"string\") {\n                throw Error(\"Missing schema in avro record.\");\n            }\n            switch (schema) {\n                case \"com.microsoft.azure.storage.queryBlobContents.resultData\":\n                    {\n                        const data = obj.data;\n                        if (data instanceof Uint8Array === false) {\n                            throw Error(\"Invalid data in avro result record.\");\n                        }\n                        if (!this.push(Buffer.from(data))) {\n                            this.avroPaused = true;\n                        }\n                    }\n                    break;\n                case \"com.microsoft.azure.storage.queryBlobContents.progress\":\n                    {\n                        const bytesScanned = obj.bytesScanned;\n                        if (typeof bytesScanned !== \"number\") {\n                            throw Error(\"Invalid bytesScanned in avro progress record.\");\n                        }\n                        if (this.onProgress) {\n                            this.onProgress({ loadedBytes: bytesScanned });\n                        }\n                    }\n                    break;\n                case \"com.microsoft.azure.storage.queryBlobContents.end\":\n                    if (this.onProgress) {\n                        const totalBytes = obj.totalBytes;\n                        if (typeof totalBytes !== \"number\") {\n                            throw Error(\"Invalid totalBytes in avro end record.\");\n                        }\n                        this.onProgress({ loadedBytes: totalBytes });\n                    }\n                    this.push(null);\n                    break;\n                case \"com.microsoft.azure.storage.queryBlobContents.error\":\n                    if (this.onError) {\n                        const fatal = obj.fatal;\n                        if (typeof fatal !== \"boolean\") {\n                            throw Error(\"Invalid fatal in avro error record.\");\n                        }\n                        const name = obj.name;\n                        if (typeof name !== \"string\") {\n                            throw Error(\"Invalid name in avro error record.\");\n                        }\n                        const description = obj.description;\n                        if (typeof description !== \"string\") {\n                            throw Error(\"Invalid description in avro error record.\");\n                        }\n                        const position = obj.position;\n                        if (typeof position !== \"number\") {\n                            throw Error(\"Invalid position in avro error record.\");\n                        }\n                        this.onError({\n                            position,\n                            name,\n                            isFatal: fatal,\n                            description,\n                        });\n                    }\n                    break;\n                default:\n                    throw Error(`Unknown schema ${schema} in avro progress record.`);\n            }\n        } while (!avroNext.done && !this.avroPaused);\n    }\n}\n//# sourceMappingURL=BlobQuickQueryStream.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL3V0aWxzL0Jsb2JRdWlja1F1ZXJ5U3RyZWFtLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNrQztBQUNzRDtBQUN4RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sbUNBQW1DLDRDQUFRO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQztBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtFQUFVLEtBQUssOEVBQXNCO0FBQ25FLHVEQUF1RCxrQ0FBa0M7QUFDekY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QywyQkFBMkI7QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLHlCQUF5QjtBQUNuRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRCxRQUFRO0FBQzFEO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcndpbHNvbi9EZXNrdG9wL3Byb2plY3RzL0VaVml6L25vZGVfbW9kdWxlcy9AYXp1cmUvc3RvcmFnZS1ibG9iL2Rpc3QtZXNtL3N0b3JhZ2UtYmxvYi9zcmMvdXRpbHMvQmxvYlF1aWNrUXVlcnlTdHJlYW0uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5pbXBvcnQgeyBSZWFkYWJsZSB9IGZyb20gXCJzdHJlYW1cIjtcbmltcG9ydCB7IEF2cm9SZWFkYWJsZUZyb21TdHJlYW0sIEF2cm9SZWFkZXIgfSBmcm9tIFwiLi4vLi4vLi4vc3RvcmFnZS1pbnRlcm5hbC1hdnJvL3NyY1wiO1xuLyoqXG4gKiBPTkxZIEFWQUlMQUJMRSBJTiBOT0RFLkpTIFJVTlRJTUUuXG4gKlxuICogQSBOb2RlLmpzIEJsb2JRdWlja1F1ZXJ5U3RyZWFtIHdpbGwgaW50ZXJuYWxseSBwYXJzZSBhdnJvIGRhdGEgc3RyZWFtIGZvciBibG9iIHF1ZXJ5LlxuICovXG5leHBvcnQgY2xhc3MgQmxvYlF1aWNrUXVlcnlTdHJlYW0gZXh0ZW5kcyBSZWFkYWJsZSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBCbG9iUXVpY2tRdWVyeVN0cmVhbS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBzb3VyY2UgLSBUaGUgY3VycmVudCBSZWFkYWJsZVN0cmVhbSByZXR1cm5lZCBmcm9tIGdldHRlclxuICAgICAqIEBwYXJhbSBvcHRpb25zIC1cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihzb3VyY2UsIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmF2cm9QYXVzZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgICAgdGhpcy5vblByb2dyZXNzID0gb3B0aW9ucy5vblByb2dyZXNzO1xuICAgICAgICB0aGlzLm9uRXJyb3IgPSBvcHRpb25zLm9uRXJyb3I7XG4gICAgICAgIHRoaXMuYXZyb1JlYWRlciA9IG5ldyBBdnJvUmVhZGVyKG5ldyBBdnJvUmVhZGFibGVGcm9tU3RyZWFtKHRoaXMuc291cmNlKSk7XG4gICAgICAgIHRoaXMuYXZyb0l0ZXIgPSB0aGlzLmF2cm9SZWFkZXIucGFyc2VPYmplY3RzKHsgYWJvcnRTaWduYWw6IG9wdGlvbnMuYWJvcnRTaWduYWwgfSk7XG4gICAgfVxuICAgIF9yZWFkKCkge1xuICAgICAgICBpZiAodGhpcy5hdnJvUGF1c2VkKSB7XG4gICAgICAgICAgICB0aGlzLnJlYWRJbnRlcm5hbCgpLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoXCJlcnJvclwiLCBlcnIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgcmVhZEludGVybmFsKCkge1xuICAgICAgICB0aGlzLmF2cm9QYXVzZWQgPSBmYWxzZTtcbiAgICAgICAgbGV0IGF2cm9OZXh0O1xuICAgICAgICBkbyB7XG4gICAgICAgICAgICBhdnJvTmV4dCA9IGF3YWl0IHRoaXMuYXZyb0l0ZXIubmV4dCgpO1xuICAgICAgICAgICAgaWYgKGF2cm9OZXh0LmRvbmUpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IG9iaiA9IGF2cm9OZXh0LnZhbHVlO1xuICAgICAgICAgICAgY29uc3Qgc2NoZW1hID0gb2JqLiRzY2hlbWE7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHNjaGVtYSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKFwiTWlzc2luZyBzY2hlbWEgaW4gYXZybyByZWNvcmQuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3dpdGNoIChzY2hlbWEpIHtcbiAgICAgICAgICAgICAgICBjYXNlIFwiY29tLm1pY3Jvc29mdC5henVyZS5zdG9yYWdlLnF1ZXJ5QmxvYkNvbnRlbnRzLnJlc3VsdERhdGFcIjpcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IG9iai5kYXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEgaW5zdGFuY2VvZiBVaW50OEFycmF5ID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IEVycm9yKFwiSW52YWxpZCBkYXRhIGluIGF2cm8gcmVzdWx0IHJlY29yZC5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMucHVzaChCdWZmZXIuZnJvbShkYXRhKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmF2cm9QYXVzZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJjb20ubWljcm9zb2Z0LmF6dXJlLnN0b3JhZ2UucXVlcnlCbG9iQ29udGVudHMucHJvZ3Jlc3NcIjpcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYnl0ZXNTY2FubmVkID0gb2JqLmJ5dGVzU2Nhbm5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYnl0ZXNTY2FubmVkICE9PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJJbnZhbGlkIGJ5dGVzU2Nhbm5lZCBpbiBhdnJvIHByb2dyZXNzIHJlY29yZC5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vblByb2dyZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vblByb2dyZXNzKHsgbG9hZGVkQnl0ZXM6IGJ5dGVzU2Nhbm5lZCB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiY29tLm1pY3Jvc29mdC5henVyZS5zdG9yYWdlLnF1ZXJ5QmxvYkNvbnRlbnRzLmVuZFwiOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vblByb2dyZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0b3RhbEJ5dGVzID0gb2JqLnRvdGFsQnl0ZXM7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRvdGFsQnl0ZXMgIT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihcIkludmFsaWQgdG90YWxCeXRlcyBpbiBhdnJvIGVuZCByZWNvcmQuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vblByb2dyZXNzKHsgbG9hZGVkQnl0ZXM6IHRvdGFsQnl0ZXMgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wdXNoKG51bGwpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiY29tLm1pY3Jvc29mdC5henVyZS5zdG9yYWdlLnF1ZXJ5QmxvYkNvbnRlbnRzLmVycm9yXCI6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm9uRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZhdGFsID0gb2JqLmZhdGFsO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBmYXRhbCAhPT0gXCJib29sZWFuXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihcIkludmFsaWQgZmF0YWwgaW4gYXZybyBlcnJvciByZWNvcmQuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbmFtZSA9IG9iai5uYW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBuYW1lICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJJbnZhbGlkIG5hbWUgaW4gYXZybyBlcnJvciByZWNvcmQuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVzY3JpcHRpb24gPSBvYmouZGVzY3JpcHRpb247XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRlc2NyaXB0aW9uICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJJbnZhbGlkIGRlc2NyaXB0aW9uIGluIGF2cm8gZXJyb3IgcmVjb3JkLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uID0gb2JqLnBvc2l0aW9uO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBwb3NpdGlvbiAhPT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IEVycm9yKFwiSW52YWxpZCBwb3NpdGlvbiBpbiBhdnJvIGVycm9yIHJlY29yZC5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uRXJyb3Ioe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNGYXRhbDogZmF0YWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihgVW5rbm93biBzY2hlbWEgJHtzY2hlbWF9IGluIGF2cm8gcHJvZ3Jlc3MgcmVjb3JkLmApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IHdoaWxlICghYXZyb05leHQuZG9uZSAmJiAhdGhpcy5hdnJvUGF1c2VkKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1CbG9iUXVpY2tRdWVyeVN0cmVhbS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/BlobQuickQueryStream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/Mutex.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/Mutex.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Mutex: () => (/* binding */ Mutex)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nvar MutexLockStatus;\n(function (MutexLockStatus) {\n    MutexLockStatus[MutexLockStatus[\"LOCKED\"] = 0] = \"LOCKED\";\n    MutexLockStatus[MutexLockStatus[\"UNLOCKED\"] = 1] = \"UNLOCKED\";\n})(MutexLockStatus || (MutexLockStatus = {}));\n/**\n * An async mutex lock.\n */\nclass Mutex {\n    /**\n     * Lock for a specific key. If the lock has been acquired by another customer, then\n     * will wait until getting the lock.\n     *\n     * @param key - lock key\n     */\n    static async lock(key) {\n        return new Promise((resolve) => {\n            if (this.keys[key] === undefined || this.keys[key] === MutexLockStatus.UNLOCKED) {\n                this.keys[key] = MutexLockStatus.LOCKED;\n                resolve();\n            }\n            else {\n                this.onUnlockEvent(key, () => {\n                    this.keys[key] = MutexLockStatus.LOCKED;\n                    resolve();\n                });\n            }\n        });\n    }\n    /**\n     * Unlock a key.\n     *\n     * @param key -\n     */\n    static async unlock(key) {\n        return new Promise((resolve) => {\n            if (this.keys[key] === MutexLockStatus.LOCKED) {\n                this.emitUnlockEvent(key);\n            }\n            delete this.keys[key];\n            resolve();\n        });\n    }\n    static onUnlockEvent(key, handler) {\n        if (this.listeners[key] === undefined) {\n            this.listeners[key] = [handler];\n        }\n        else {\n            this.listeners[key].push(handler);\n        }\n    }\n    static emitUnlockEvent(key) {\n        if (this.listeners[key] !== undefined && this.listeners[key].length > 0) {\n            const handler = this.listeners[key].shift();\n            setImmediate(() => {\n                handler.call(this);\n            });\n        }\n    }\n}\nMutex.keys = {};\nMutex.listeners = {};\n//# sourceMappingURL=Mutex.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL3V0aWxzL011dGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLDBDQUEwQztBQUMzQztBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvdmljdG9yd2lsc29uL0Rlc2t0b3AvcHJvamVjdHMvRVpWaXovbm9kZV9tb2R1bGVzL0BhenVyZS9zdG9yYWdlLWJsb2IvZGlzdC1lc20vc3RvcmFnZS1ibG9iL3NyYy91dGlscy9NdXRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbnZhciBNdXRleExvY2tTdGF0dXM7XG4oZnVuY3Rpb24gKE11dGV4TG9ja1N0YXR1cykge1xuICAgIE11dGV4TG9ja1N0YXR1c1tNdXRleExvY2tTdGF0dXNbXCJMT0NLRURcIl0gPSAwXSA9IFwiTE9DS0VEXCI7XG4gICAgTXV0ZXhMb2NrU3RhdHVzW011dGV4TG9ja1N0YXR1c1tcIlVOTE9DS0VEXCJdID0gMV0gPSBcIlVOTE9DS0VEXCI7XG59KShNdXRleExvY2tTdGF0dXMgfHwgKE11dGV4TG9ja1N0YXR1cyA9IHt9KSk7XG4vKipcbiAqIEFuIGFzeW5jIG11dGV4IGxvY2suXG4gKi9cbmV4cG9ydCBjbGFzcyBNdXRleCB7XG4gICAgLyoqXG4gICAgICogTG9jayBmb3IgYSBzcGVjaWZpYyBrZXkuIElmIHRoZSBsb2NrIGhhcyBiZWVuIGFjcXVpcmVkIGJ5IGFub3RoZXIgY3VzdG9tZXIsIHRoZW5cbiAgICAgKiB3aWxsIHdhaXQgdW50aWwgZ2V0dGluZyB0aGUgbG9jay5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBrZXkgLSBsb2NrIGtleVxuICAgICAqL1xuICAgIHN0YXRpYyBhc3luYyBsb2NrKGtleSkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmtleXNba2V5XSA9PT0gdW5kZWZpbmVkIHx8IHRoaXMua2V5c1trZXldID09PSBNdXRleExvY2tTdGF0dXMuVU5MT0NLRUQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmtleXNba2V5XSA9IE11dGV4TG9ja1N0YXR1cy5MT0NLRUQ7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vblVubG9ja0V2ZW50KGtleSwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmtleXNba2V5XSA9IE11dGV4TG9ja1N0YXR1cy5MT0NLRUQ7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVubG9jayBhIGtleS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBrZXkgLVxuICAgICAqL1xuICAgIHN0YXRpYyBhc3luYyB1bmxvY2soa2V5KSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMua2V5c1trZXldID09PSBNdXRleExvY2tTdGF0dXMuTE9DS0VEKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0VW5sb2NrRXZlbnQoa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmtleXNba2V5XTtcbiAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHN0YXRpYyBvblVubG9ja0V2ZW50KGtleSwgaGFuZGxlcikge1xuICAgICAgICBpZiAodGhpcy5saXN0ZW5lcnNba2V5XSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmxpc3RlbmVyc1trZXldID0gW2hhbmRsZXJdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5saXN0ZW5lcnNba2V5XS5wdXNoKGhhbmRsZXIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHN0YXRpYyBlbWl0VW5sb2NrRXZlbnQoa2V5KSB7XG4gICAgICAgIGlmICh0aGlzLmxpc3RlbmVyc1trZXldICE9PSB1bmRlZmluZWQgJiYgdGhpcy5saXN0ZW5lcnNba2V5XS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBoYW5kbGVyID0gdGhpcy5saXN0ZW5lcnNba2V5XS5zaGlmdCgpO1xuICAgICAgICAgICAgc2V0SW1tZWRpYXRlKCgpID0+IHtcbiAgICAgICAgICAgICAgICBoYW5kbGVyLmNhbGwodGhpcyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbk11dGV4LmtleXMgPSB7fTtcbk11dGV4Lmxpc3RlbmVycyA9IHt9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TXV0ZXguanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/Mutex.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/RetriableReadableStream.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/RetriableReadableStream.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RetriableReadableStream: () => (/* binding */ RetriableReadableStream)\n/* harmony export */ });\n/* harmony import */ var _azure_abort_controller__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/abort-controller */ \"(rsc)/./node_modules/@azure/abort-controller/dist/esm/index.js\");\n/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! stream */ \"stream\");\n/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(stream__WEBPACK_IMPORTED_MODULE_1__);\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * A Node.js ReadableStream will internally retry when internal ReadableStream unexpected ends.\n */\nclass RetriableReadableStream extends stream__WEBPACK_IMPORTED_MODULE_1__.Readable {\n    /**\n     * Creates an instance of RetriableReadableStream.\n     *\n     * @param source - The current ReadableStream returned from getter\n     * @param getter - A method calling downloading request returning\n     *                                      a new ReadableStream from specified offset\n     * @param offset - Offset position in original data source to read\n     * @param count - How much data in original data source to read\n     * @param options -\n     */\n    constructor(source, getter, offset, count, options = {}) {\n        super({ highWaterMark: options.highWaterMark });\n        this.retries = 0;\n        this.sourceDataHandler = (data) => {\n            if (this.options.doInjectErrorOnce) {\n                this.options.doInjectErrorOnce = undefined;\n                this.source.pause();\n                this.sourceErrorOrEndHandler();\n                this.source.destroy();\n                return;\n            }\n            // console.log(\n            //   `Offset: ${this.offset}, Received ${data.length} from internal stream`\n            // );\n            this.offset += data.length;\n            if (this.onProgress) {\n                this.onProgress({ loadedBytes: this.offset - this.start });\n            }\n            if (!this.push(data)) {\n                this.source.pause();\n            }\n        };\n        this.sourceAbortedHandler = () => {\n            const abortError = new _azure_abort_controller__WEBPACK_IMPORTED_MODULE_0__.AbortError(\"The operation was aborted.\");\n            this.destroy(abortError);\n        };\n        this.sourceErrorOrEndHandler = (err) => {\n            if (err && err.name === \"AbortError\") {\n                this.destroy(err);\n                return;\n            }\n            // console.log(\n            //   `Source stream emits end or error, offset: ${\n            //     this.offset\n            //   }, dest end : ${this.end}`\n            // );\n            this.removeSourceEventHandlers();\n            if (this.offset - 1 === this.end) {\n                this.push(null);\n            }\n            else if (this.offset <= this.end) {\n                // console.log(\n                //   `retries: ${this.retries}, max retries: ${this.maxRetries}`\n                // );\n                if (this.retries < this.maxRetryRequests) {\n                    this.retries += 1;\n                    this.getter(this.offset)\n                        .then((newSource) => {\n                        this.source = newSource;\n                        this.setSourceEventHandlers();\n                        return;\n                    })\n                        .catch((error) => {\n                        this.destroy(error);\n                    });\n                }\n                else {\n                    this.destroy(new Error(`Data corruption failure: received less data than required and reached maxRetires limitation. Received data offset: ${this.offset - 1}, data needed offset: ${this.end}, retries: ${this.retries}, max retries: ${this.maxRetryRequests}`));\n                }\n            }\n            else {\n                this.destroy(new Error(`Data corruption failure: Received more data than original request, data needed offset is ${this.end}, received offset: ${this.offset - 1}`));\n            }\n        };\n        this.getter = getter;\n        this.source = source;\n        this.start = offset;\n        this.offset = offset;\n        this.end = offset + count - 1;\n        this.maxRetryRequests =\n            options.maxRetryRequests && options.maxRetryRequests >= 0 ? options.maxRetryRequests : 0;\n        this.onProgress = options.onProgress;\n        this.options = options;\n        this.setSourceEventHandlers();\n    }\n    _read() {\n        this.source.resume();\n    }\n    setSourceEventHandlers() {\n        this.source.on(\"data\", this.sourceDataHandler);\n        this.source.on(\"end\", this.sourceErrorOrEndHandler);\n        this.source.on(\"error\", this.sourceErrorOrEndHandler);\n        // needed for Node14\n        this.source.on(\"aborted\", this.sourceAbortedHandler);\n    }\n    removeSourceEventHandlers() {\n        this.source.removeListener(\"data\", this.sourceDataHandler);\n        this.source.removeListener(\"end\", this.sourceErrorOrEndHandler);\n        this.source.removeListener(\"error\", this.sourceErrorOrEndHandler);\n        this.source.removeListener(\"aborted\", this.sourceAbortedHandler);\n    }\n    _destroy(error, callback) {\n        // remove listener from source and release source\n        this.removeSourceEventHandlers();\n        this.source.destroy();\n        callback(error === null ? undefined : error);\n    }\n}\n//# sourceMappingURL=RetriableReadableStream.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/RetriableReadableStream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/SharedKeyComparator.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/SharedKeyComparator.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   compareHeader: () => (/* binding */ compareHeader)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/*\n * We need to imitate .Net culture-aware sorting, which is used in storage service.\n * Below tables contain sort-keys for en-US culture.\n */\nconst table_lv0 = new Uint32Array([\n    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x71c, 0x0, 0x71f, 0x721,\n    0x723, 0x725, 0x0, 0x0, 0x0, 0x72d, 0x803, 0x0, 0x0, 0x733, 0x0, 0xd03, 0xd1a, 0xd1c, 0xd1e,\n    0xd20, 0xd22, 0xd24, 0xd26, 0xd28, 0xd2a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe02, 0xe09, 0xe0a,\n    0xe1a, 0xe21, 0xe23, 0xe25, 0xe2c, 0xe32, 0xe35, 0xe36, 0xe48, 0xe51, 0xe70, 0xe7c, 0xe7e, 0xe89,\n    0xe8a, 0xe91, 0xe99, 0xe9f, 0xea2, 0xea4, 0xea6, 0xea7, 0xea9, 0x0, 0x0, 0x0, 0x743, 0x744, 0x748,\n    0xe02, 0xe09, 0xe0a, 0xe1a, 0xe21, 0xe23, 0xe25, 0xe2c, 0xe32, 0xe35, 0xe36, 0xe48, 0xe51, 0xe70,\n    0xe7c, 0xe7e, 0xe89, 0xe8a, 0xe91, 0xe99, 0xe9f, 0xea2, 0xea4, 0xea6, 0xea7, 0xea9, 0x0, 0x74c,\n    0x0, 0x750, 0x0,\n]);\nconst table_lv2 = new Uint32Array([\n    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12,\n    0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12,\n    0x12, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n]);\nconst table_lv4 = new Uint32Array([\n    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n    0x0, 0x8012, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8212, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,\n]);\nfunction compareHeader(lhs, rhs) {\n    if (isLessThan(lhs, rhs))\n        return -1;\n    return 1;\n}\nfunction isLessThan(lhs, rhs) {\n    const tables = [table_lv0, table_lv2, table_lv4];\n    let curr_level = 0;\n    let i = 0;\n    let j = 0;\n    while (curr_level < tables.length) {\n        if (curr_level === tables.length - 1 && i !== j) {\n            return i > j;\n        }\n        const weight1 = i < lhs.length ? tables[curr_level][lhs[i].charCodeAt(0)] : 0x1;\n        const weight2 = j < rhs.length ? tables[curr_level][rhs[j].charCodeAt(0)] : 0x1;\n        if (weight1 === 0x1 && weight2 === 0x1) {\n            i = 0;\n            j = 0;\n            ++curr_level;\n        }\n        else if (weight1 === weight2) {\n            ++i;\n            ++j;\n        }\n        else if (weight1 === 0) {\n            ++i;\n        }\n        else if (weight2 === 0) {\n            ++j;\n        }\n        else {\n            return weight1 < weight2;\n        }\n    }\n    return false;\n}\n//# sourceMappingURL=SharedKeyComparator.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL3V0aWxzL1NoYXJlZEtleUNvbXBhcmF0b3IuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvdmljdG9yd2lsc29uL0Rlc2t0b3AvcHJvamVjdHMvRVpWaXovbm9kZV9tb2R1bGVzL0BhenVyZS9zdG9yYWdlLWJsb2IvZGlzdC1lc20vc3RvcmFnZS1ibG9iL3NyYy91dGlscy9TaGFyZWRLZXlDb21wYXJhdG9yLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuLypcbiAqIFdlIG5lZWQgdG8gaW1pdGF0ZSAuTmV0IGN1bHR1cmUtYXdhcmUgc29ydGluZywgd2hpY2ggaXMgdXNlZCBpbiBzdG9yYWdlIHNlcnZpY2UuXG4gKiBCZWxvdyB0YWJsZXMgY29udGFpbiBzb3J0LWtleXMgZm9yIGVuLVVTIGN1bHR1cmUuXG4gKi9cbmNvbnN0IHRhYmxlX2x2MCA9IG5ldyBVaW50MzJBcnJheShbXG4gICAgMHgwLCAweDAsIDB4MCwgMHgwLCAweDAsIDB4MCwgMHgwLCAweDAsIDB4MCwgMHgwLCAweDAsIDB4MCwgMHgwLCAweDAsIDB4MCwgMHgwLCAweDAsIDB4MCwgMHgwLFxuICAgIDB4MCwgMHgwLCAweDAsIDB4MCwgMHgwLCAweDAsIDB4MCwgMHgwLCAweDAsIDB4MCwgMHgwLCAweDAsIDB4MCwgMHgwLCAweDcxYywgMHgwLCAweDcxZiwgMHg3MjEsXG4gICAgMHg3MjMsIDB4NzI1LCAweDAsIDB4MCwgMHgwLCAweDcyZCwgMHg4MDMsIDB4MCwgMHgwLCAweDczMywgMHgwLCAweGQwMywgMHhkMWEsIDB4ZDFjLCAweGQxZSxcbiAgICAweGQyMCwgMHhkMjIsIDB4ZDI0LCAweGQyNiwgMHhkMjgsIDB4ZDJhLCAweDAsIDB4MCwgMHgwLCAweDAsIDB4MCwgMHgwLCAweDAsIDB4ZTAyLCAweGUwOSwgMHhlMGEsXG4gICAgMHhlMWEsIDB4ZTIxLCAweGUyMywgMHhlMjUsIDB4ZTJjLCAweGUzMiwgMHhlMzUsIDB4ZTM2LCAweGU0OCwgMHhlNTEsIDB4ZTcwLCAweGU3YywgMHhlN2UsIDB4ZTg5LFxuICAgIDB4ZThhLCAweGU5MSwgMHhlOTksIDB4ZTlmLCAweGVhMiwgMHhlYTQsIDB4ZWE2LCAweGVhNywgMHhlYTksIDB4MCwgMHgwLCAweDAsIDB4NzQzLCAweDc0NCwgMHg3NDgsXG4gICAgMHhlMDIsIDB4ZTA5LCAweGUwYSwgMHhlMWEsIDB4ZTIxLCAweGUyMywgMHhlMjUsIDB4ZTJjLCAweGUzMiwgMHhlMzUsIDB4ZTM2LCAweGU0OCwgMHhlNTEsIDB4ZTcwLFxuICAgIDB4ZTdjLCAweGU3ZSwgMHhlODksIDB4ZThhLCAweGU5MSwgMHhlOTksIDB4ZTlmLCAweGVhMiwgMHhlYTQsIDB4ZWE2LCAweGVhNywgMHhlYTksIDB4MCwgMHg3NGMsXG4gICAgMHgwLCAweDc1MCwgMHgwLFxuXSk7XG5jb25zdCB0YWJsZV9sdjIgPSBuZXcgVWludDMyQXJyYXkoW1xuICAgIDB4MCwgMHgwLCAweDAsIDB4MCwgMHgwLCAweDAsIDB4MCwgMHgwLCAweDAsIDB4MCwgMHgwLCAweDAsIDB4MCwgMHgwLCAweDAsIDB4MCwgMHgwLCAweDAsIDB4MCxcbiAgICAweDAsIDB4MCwgMHgwLCAweDAsIDB4MCwgMHgwLCAweDAsIDB4MCwgMHgwLCAweDAsIDB4MCwgMHgwLCAweDAsIDB4MCwgMHgwLCAweDAsIDB4MCwgMHgwLCAweDAsXG4gICAgMHgwLCAweDAsIDB4MCwgMHgwLCAweDAsIDB4MCwgMHgwLCAweDAsIDB4MCwgMHgwLCAweDAsIDB4MCwgMHgwLCAweDAsIDB4MCwgMHgwLCAweDAsIDB4MCwgMHgwLFxuICAgIDB4MCwgMHgwLCAweDAsIDB4MCwgMHgwLCAweDAsIDB4MCwgMHgwLCAweDEyLCAweDEyLCAweDEyLCAweDEyLCAweDEyLCAweDEyLCAweDEyLCAweDEyLCAweDEyLFxuICAgIDB4MTIsIDB4MTIsIDB4MTIsIDB4MTIsIDB4MTIsIDB4MTIsIDB4MTIsIDB4MTIsIDB4MTIsIDB4MTIsIDB4MTIsIDB4MTIsIDB4MTIsIDB4MTIsIDB4MTIsIDB4MTIsXG4gICAgMHgxMiwgMHgwLCAweDAsIDB4MCwgMHgwLCAweDAsIDB4MCwgMHgwLCAweDAsIDB4MCwgMHgwLCAweDAsIDB4MCwgMHgwLCAweDAsIDB4MCwgMHgwLCAweDAsIDB4MCxcbiAgICAweDAsIDB4MCwgMHgwLCAweDAsIDB4MCwgMHgwLCAweDAsIDB4MCwgMHgwLCAweDAsIDB4MCwgMHgwLCAweDAsIDB4MCwgMHgwLCAweDAsIDB4MCwgMHgwLCAweDAsXG5dKTtcbmNvbnN0IHRhYmxlX2x2NCA9IG5ldyBVaW50MzJBcnJheShbXG4gICAgMHgwLCAweDAsIDB4MCwgMHgwLCAweDAsIDB4MCwgMHgwLCAweDAsIDB4MCwgMHgwLCAweDAsIDB4MCwgMHgwLCAweDAsIDB4MCwgMHgwLCAweDAsIDB4MCwgMHgwLFxuICAgIDB4MCwgMHgwLCAweDAsIDB4MCwgMHgwLCAweDAsIDB4MCwgMHgwLCAweDAsIDB4MCwgMHgwLCAweDAsIDB4MCwgMHgwLCAweDAsIDB4MCwgMHgwLCAweDAsIDB4MCxcbiAgICAweDAsIDB4ODAxMiwgMHgwLCAweDAsIDB4MCwgMHgwLCAweDAsIDB4ODIxMiwgMHgwLCAweDAsIDB4MCwgMHgwLCAweDAsIDB4MCwgMHgwLCAweDAsIDB4MCwgMHgwLFxuICAgIDB4MCwgMHgwLCAweDAsIDB4MCwgMHgwLCAweDAsIDB4MCwgMHgwLCAweDAsIDB4MCwgMHgwLCAweDAsIDB4MCwgMHgwLCAweDAsIDB4MCwgMHgwLCAweDAsIDB4MCxcbiAgICAweDAsIDB4MCwgMHgwLCAweDAsIDB4MCwgMHgwLCAweDAsIDB4MCwgMHgwLCAweDAsIDB4MCwgMHgwLCAweDAsIDB4MCwgMHgwLCAweDAsIDB4MCwgMHgwLCAweDAsXG4gICAgMHgwLCAweDAsIDB4MCwgMHgwLCAweDAsIDB4MCwgMHgwLCAweDAsIDB4MCwgMHgwLCAweDAsIDB4MCwgMHgwLCAweDAsIDB4MCwgMHgwLCAweDAsIDB4MCwgMHgwLFxuICAgIDB4MCwgMHgwLCAweDAsIDB4MCwgMHgwLCAweDAsIDB4MCwgMHgwLCAweDAsIDB4MCwgMHgwLCAweDAsIDB4MCwgMHgwLCAweDAsXG5dKTtcbmV4cG9ydCBmdW5jdGlvbiBjb21wYXJlSGVhZGVyKGxocywgcmhzKSB7XG4gICAgaWYgKGlzTGVzc1RoYW4obGhzLCByaHMpKVxuICAgICAgICByZXR1cm4gLTE7XG4gICAgcmV0dXJuIDE7XG59XG5mdW5jdGlvbiBpc0xlc3NUaGFuKGxocywgcmhzKSB7XG4gICAgY29uc3QgdGFibGVzID0gW3RhYmxlX2x2MCwgdGFibGVfbHYyLCB0YWJsZV9sdjRdO1xuICAgIGxldCBjdXJyX2xldmVsID0gMDtcbiAgICBsZXQgaSA9IDA7XG4gICAgbGV0IGogPSAwO1xuICAgIHdoaWxlIChjdXJyX2xldmVsIDwgdGFibGVzLmxlbmd0aCkge1xuICAgICAgICBpZiAoY3Vycl9sZXZlbCA9PT0gdGFibGVzLmxlbmd0aCAtIDEgJiYgaSAhPT0gaikge1xuICAgICAgICAgICAgcmV0dXJuIGkgPiBqO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHdlaWdodDEgPSBpIDwgbGhzLmxlbmd0aCA/IHRhYmxlc1tjdXJyX2xldmVsXVtsaHNbaV0uY2hhckNvZGVBdCgwKV0gOiAweDE7XG4gICAgICAgIGNvbnN0IHdlaWdodDIgPSBqIDwgcmhzLmxlbmd0aCA/IHRhYmxlc1tjdXJyX2xldmVsXVtyaHNbal0uY2hhckNvZGVBdCgwKV0gOiAweDE7XG4gICAgICAgIGlmICh3ZWlnaHQxID09PSAweDEgJiYgd2VpZ2h0MiA9PT0gMHgxKSB7XG4gICAgICAgICAgICBpID0gMDtcbiAgICAgICAgICAgIGogPSAwO1xuICAgICAgICAgICAgKytjdXJyX2xldmVsO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHdlaWdodDEgPT09IHdlaWdodDIpIHtcbiAgICAgICAgICAgICsraTtcbiAgICAgICAgICAgICsrajtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh3ZWlnaHQxID09PSAwKSB7XG4gICAgICAgICAgICArK2k7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAod2VpZ2h0MiA9PT0gMCkge1xuICAgICAgICAgICAgKytqO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHdlaWdodDEgPCB3ZWlnaHQyO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVNoYXJlZEtleUNvbXBhcmF0b3IuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/SharedKeyComparator.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/cache.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/cache.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getCachedDefaultHttpClient: () => (/* binding */ getCachedDefaultHttpClient)\n/* harmony export */ });\n/* harmony import */ var _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-rest-pipeline */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/index.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nlet _defaultHttpClient;\nfunction getCachedDefaultHttpClient() {\n    if (!_defaultHttpClient) {\n        _defaultHttpClient = (0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__.createDefaultHttpClient)();\n    }\n    return _defaultHttpClient;\n}\n//# sourceMappingURL=cache.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL3V0aWxzL2NhY2hlLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNvRTtBQUNwRTtBQUNPO0FBQ1A7QUFDQSw2QkFBNkIsa0ZBQXVCO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvdmljdG9yd2lsc29uL0Rlc2t0b3AvcHJvamVjdHMvRVpWaXovbm9kZV9tb2R1bGVzL0BhenVyZS9zdG9yYWdlLWJsb2IvZGlzdC1lc20vc3RvcmFnZS1ibG9iL3NyYy91dGlscy9jYWNoZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbmltcG9ydCB7IGNyZWF0ZURlZmF1bHRIdHRwQ2xpZW50IH0gZnJvbSBcIkBhenVyZS9jb3JlLXJlc3QtcGlwZWxpbmVcIjtcbmxldCBfZGVmYXVsdEh0dHBDbGllbnQ7XG5leHBvcnQgZnVuY3Rpb24gZ2V0Q2FjaGVkRGVmYXVsdEh0dHBDbGllbnQoKSB7XG4gICAgaWYgKCFfZGVmYXVsdEh0dHBDbGllbnQpIHtcbiAgICAgICAgX2RlZmF1bHRIdHRwQ2xpZW50ID0gY3JlYXRlRGVmYXVsdEh0dHBDbGllbnQoKTtcbiAgICB9XG4gICAgcmV0dXJuIF9kZWZhdWx0SHR0cENsaWVudDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNhY2hlLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/cache.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BATCH_MAX_PAYLOAD_IN_BYTES: () => (/* binding */ BATCH_MAX_PAYLOAD_IN_BYTES),\n/* harmony export */   BATCH_MAX_REQUEST: () => (/* binding */ BATCH_MAX_REQUEST),\n/* harmony export */   BLOCK_BLOB_MAX_BLOCKS: () => (/* binding */ BLOCK_BLOB_MAX_BLOCKS),\n/* harmony export */   BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES: () => (/* binding */ BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES),\n/* harmony export */   BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES: () => (/* binding */ BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES),\n/* harmony export */   BlobDoesNotUseCustomerSpecifiedEncryption: () => (/* binding */ BlobDoesNotUseCustomerSpecifiedEncryption),\n/* harmony export */   BlobUsesCustomerSpecifiedEncryptionMsg: () => (/* binding */ BlobUsesCustomerSpecifiedEncryptionMsg),\n/* harmony export */   DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES: () => (/* binding */ DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES),\n/* harmony export */   DEFAULT_BLOCK_BUFFER_SIZE_BYTES: () => (/* binding */ DEFAULT_BLOCK_BUFFER_SIZE_BYTES),\n/* harmony export */   DEFAULT_MAX_DOWNLOAD_RETRY_REQUESTS: () => (/* binding */ DEFAULT_MAX_DOWNLOAD_RETRY_REQUESTS),\n/* harmony export */   DevelopmentConnectionString: () => (/* binding */ DevelopmentConnectionString),\n/* harmony export */   ETagAny: () => (/* binding */ ETagAny),\n/* harmony export */   ETagNone: () => (/* binding */ ETagNone),\n/* harmony export */   EncryptionAlgorithmAES25: () => (/* binding */ EncryptionAlgorithmAES25),\n/* harmony export */   HTTPURLConnection: () => (/* binding */ HTTPURLConnection),\n/* harmony export */   HTTP_LINE_ENDING: () => (/* binding */ HTTP_LINE_ENDING),\n/* harmony export */   HTTP_VERSION_1_1: () => (/* binding */ HTTP_VERSION_1_1),\n/* harmony export */   HeaderConstants: () => (/* binding */ HeaderConstants),\n/* harmony export */   PathStylePorts: () => (/* binding */ PathStylePorts),\n/* harmony export */   REQUEST_TIMEOUT: () => (/* binding */ REQUEST_TIMEOUT),\n/* harmony export */   SDK_VERSION: () => (/* binding */ SDK_VERSION),\n/* harmony export */   SERVICE_VERSION: () => (/* binding */ SERVICE_VERSION),\n/* harmony export */   SIZE_1_MB: () => (/* binding */ SIZE_1_MB),\n/* harmony export */   StorageBlobLoggingAllowedHeaderNames: () => (/* binding */ StorageBlobLoggingAllowedHeaderNames),\n/* harmony export */   StorageBlobLoggingAllowedQueryParameters: () => (/* binding */ StorageBlobLoggingAllowedQueryParameters),\n/* harmony export */   StorageOAuthScopes: () => (/* binding */ StorageOAuthScopes),\n/* harmony export */   URLConstants: () => (/* binding */ URLConstants)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nconst SDK_VERSION = \"12.26.0\";\nconst SERVICE_VERSION = \"2025-01-05\";\nconst BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES = 256 * 1024 * 1024; // 256MB\nconst BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES = 4000 * 1024 * 1024; // 4000MB\nconst BLOCK_BLOB_MAX_BLOCKS = 50000;\nconst DEFAULT_BLOCK_BUFFER_SIZE_BYTES = 8 * 1024 * 1024; // 8MB\nconst DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES = 4 * 1024 * 1024; // 4MB\nconst DEFAULT_MAX_DOWNLOAD_RETRY_REQUESTS = 5;\nconst REQUEST_TIMEOUT = 100 * 1000; // In ms\n/**\n * The OAuth scope to use with Azure Storage.\n */\nconst StorageOAuthScopes = \"https://storage.azure.com/.default\";\nconst URLConstants = {\n    Parameters: {\n        FORCE_BROWSER_NO_CACHE: \"_\",\n        SIGNATURE: \"sig\",\n        SNAPSHOT: \"snapshot\",\n        VERSIONID: \"versionid\",\n        TIMEOUT: \"timeout\",\n    },\n};\nconst HTTPURLConnection = {\n    HTTP_ACCEPTED: 202,\n    HTTP_CONFLICT: 409,\n    HTTP_NOT_FOUND: 404,\n    HTTP_PRECON_FAILED: 412,\n    HTTP_RANGE_NOT_SATISFIABLE: 416,\n};\nconst HeaderConstants = {\n    AUTHORIZATION: \"Authorization\",\n    AUTHORIZATION_SCHEME: \"Bearer\",\n    CONTENT_ENCODING: \"Content-Encoding\",\n    CONTENT_ID: \"Content-ID\",\n    CONTENT_LANGUAGE: \"Content-Language\",\n    CONTENT_LENGTH: \"Content-Length\",\n    CONTENT_MD5: \"Content-Md5\",\n    CONTENT_TRANSFER_ENCODING: \"Content-Transfer-Encoding\",\n    CONTENT_TYPE: \"Content-Type\",\n    COOKIE: \"Cookie\",\n    DATE: \"date\",\n    IF_MATCH: \"if-match\",\n    IF_MODIFIED_SINCE: \"if-modified-since\",\n    IF_NONE_MATCH: \"if-none-match\",\n    IF_UNMODIFIED_SINCE: \"if-unmodified-since\",\n    PREFIX_FOR_STORAGE: \"x-ms-\",\n    RANGE: \"Range\",\n    USER_AGENT: \"User-Agent\",\n    X_MS_CLIENT_REQUEST_ID: \"x-ms-client-request-id\",\n    X_MS_COPY_SOURCE: \"x-ms-copy-source\",\n    X_MS_DATE: \"x-ms-date\",\n    X_MS_ERROR_CODE: \"x-ms-error-code\",\n    X_MS_VERSION: \"x-ms-version\",\n    X_MS_CopySourceErrorCode: \"x-ms-copy-source-error-code\",\n};\nconst ETagNone = \"\";\nconst ETagAny = \"*\";\nconst SIZE_1_MB = 1 * 1024 * 1024;\nconst BATCH_MAX_REQUEST = 256;\nconst BATCH_MAX_PAYLOAD_IN_BYTES = 4 * SIZE_1_MB;\nconst HTTP_LINE_ENDING = \"\\r\\n\";\nconst HTTP_VERSION_1_1 = \"HTTP/1.1\";\nconst EncryptionAlgorithmAES25 = \"AES256\";\nconst DevelopmentConnectionString = `DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://127.0.0.1:10000/devstoreaccount1;`;\nconst StorageBlobLoggingAllowedHeaderNames = [\n    \"Access-Control-Allow-Origin\",\n    \"Cache-Control\",\n    \"Content-Length\",\n    \"Content-Type\",\n    \"Date\",\n    \"Request-Id\",\n    \"traceparent\",\n    \"Transfer-Encoding\",\n    \"User-Agent\",\n    \"x-ms-client-request-id\",\n    \"x-ms-date\",\n    \"x-ms-error-code\",\n    \"x-ms-request-id\",\n    \"x-ms-return-client-request-id\",\n    \"x-ms-version\",\n    \"Accept-Ranges\",\n    \"Content-Disposition\",\n    \"Content-Encoding\",\n    \"Content-Language\",\n    \"Content-MD5\",\n    \"Content-Range\",\n    \"ETag\",\n    \"Last-Modified\",\n    \"Server\",\n    \"Vary\",\n    \"x-ms-content-crc64\",\n    \"x-ms-copy-action\",\n    \"x-ms-copy-completion-time\",\n    \"x-ms-copy-id\",\n    \"x-ms-copy-progress\",\n    \"x-ms-copy-status\",\n    \"x-ms-has-immutability-policy\",\n    \"x-ms-has-legal-hold\",\n    \"x-ms-lease-state\",\n    \"x-ms-lease-status\",\n    \"x-ms-range\",\n    \"x-ms-request-server-encrypted\",\n    \"x-ms-server-encrypted\",\n    \"x-ms-snapshot\",\n    \"x-ms-source-range\",\n    \"If-Match\",\n    \"If-Modified-Since\",\n    \"If-None-Match\",\n    \"If-Unmodified-Since\",\n    \"x-ms-access-tier\",\n    \"x-ms-access-tier-change-time\",\n    \"x-ms-access-tier-inferred\",\n    \"x-ms-account-kind\",\n    \"x-ms-archive-status\",\n    \"x-ms-blob-append-offset\",\n    \"x-ms-blob-cache-control\",\n    \"x-ms-blob-committed-block-count\",\n    \"x-ms-blob-condition-appendpos\",\n    \"x-ms-blob-condition-maxsize\",\n    \"x-ms-blob-content-disposition\",\n    \"x-ms-blob-content-encoding\",\n    \"x-ms-blob-content-language\",\n    \"x-ms-blob-content-length\",\n    \"x-ms-blob-content-md5\",\n    \"x-ms-blob-content-type\",\n    \"x-ms-blob-public-access\",\n    \"x-ms-blob-sequence-number\",\n    \"x-ms-blob-type\",\n    \"x-ms-copy-destination-snapshot\",\n    \"x-ms-creation-time\",\n    \"x-ms-default-encryption-scope\",\n    \"x-ms-delete-snapshots\",\n    \"x-ms-delete-type-permanent\",\n    \"x-ms-deny-encryption-scope-override\",\n    \"x-ms-encryption-algorithm\",\n    \"x-ms-if-sequence-number-eq\",\n    \"x-ms-if-sequence-number-le\",\n    \"x-ms-if-sequence-number-lt\",\n    \"x-ms-incremental-copy\",\n    \"x-ms-lease-action\",\n    \"x-ms-lease-break-period\",\n    \"x-ms-lease-duration\",\n    \"x-ms-lease-id\",\n    \"x-ms-lease-time\",\n    \"x-ms-page-write\",\n    \"x-ms-proposed-lease-id\",\n    \"x-ms-range-get-content-md5\",\n    \"x-ms-rehydrate-priority\",\n    \"x-ms-sequence-number-action\",\n    \"x-ms-sku-name\",\n    \"x-ms-source-content-md5\",\n    \"x-ms-source-if-match\",\n    \"x-ms-source-if-modified-since\",\n    \"x-ms-source-if-none-match\",\n    \"x-ms-source-if-unmodified-since\",\n    \"x-ms-tag-count\",\n    \"x-ms-encryption-key-sha256\",\n    \"x-ms-copy-source-error-code\",\n    \"x-ms-copy-source-status-code\",\n    \"x-ms-if-tags\",\n    \"x-ms-source-if-tags\",\n];\nconst StorageBlobLoggingAllowedQueryParameters = [\n    \"comp\",\n    \"maxresults\",\n    \"rscc\",\n    \"rscd\",\n    \"rsce\",\n    \"rscl\",\n    \"rsct\",\n    \"se\",\n    \"si\",\n    \"sip\",\n    \"sp\",\n    \"spr\",\n    \"sr\",\n    \"srt\",\n    \"ss\",\n    \"st\",\n    \"sv\",\n    \"include\",\n    \"marker\",\n    \"prefix\",\n    \"copyid\",\n    \"restype\",\n    \"blockid\",\n    \"blocklisttype\",\n    \"delimiter\",\n    \"prevsnapshot\",\n    \"ske\",\n    \"skoid\",\n    \"sks\",\n    \"skt\",\n    \"sktid\",\n    \"skv\",\n    \"snapshot\",\n];\nconst BlobUsesCustomerSpecifiedEncryptionMsg = \"BlobUsesCustomerSpecifiedEncryption\";\nconst BlobDoesNotUseCustomerSpecifiedEncryption = \"BlobDoesNotUseCustomerSpecifiedEncryption\";\n/// List of ports used for path style addressing.\n/// Path style addressing means that storage account is put in URI's Path segment in instead of in host.\nconst PathStylePorts = [\n    \"10000\",\n    \"10001\",\n    \"10002\",\n    \"10003\",\n    \"10004\",\n    \"10100\",\n    \"10101\",\n    \"10102\",\n    \"10103\",\n    \"10104\",\n    \"11000\",\n    \"11001\",\n    \"11002\",\n    \"11003\",\n    \"11004\",\n    \"11100\",\n    \"11101\",\n    \"11102\",\n    \"11103\",\n    \"11104\",\n];\n//# sourceMappingURL=constants.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/tracing.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/tracing.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   tracingClient: () => (/* binding */ tracingClient)\n/* harmony export */ });\n/* harmony import */ var _azure_core_tracing__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-tracing */ \"(rsc)/./node_modules/@azure/core-tracing/dist/esm/index.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n/**\n * Creates a span using the global tracer.\n * @internal\n */\nconst tracingClient = (0,_azure_core_tracing__WEBPACK_IMPORTED_MODULE_0__.createTracingClient)({\n    packageName: \"@azure/storage-blob\",\n    packageVersion: _constants__WEBPACK_IMPORTED_MODULE_1__.SDK_VERSION,\n    namespace: \"Microsoft.Storage\",\n});\n//# sourceMappingURL=tracing.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL3V0aWxzL3RyYWNpbmcuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUMwRDtBQUNoQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNPLHNCQUFzQix3RUFBbUI7QUFDaEQ7QUFDQSxvQkFBb0IsbURBQVc7QUFDL0I7QUFDQSxDQUFDO0FBQ0QiLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWN0b3J3aWxzb24vRGVza3RvcC9wcm9qZWN0cy9FWlZpei9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWJsb2Ivc3JjL3V0aWxzL3RyYWNpbmcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5pbXBvcnQgeyBjcmVhdGVUcmFjaW5nQ2xpZW50IH0gZnJvbSBcIkBhenVyZS9jb3JlLXRyYWNpbmdcIjtcbmltcG9ydCB7IFNES19WRVJTSU9OIH0gZnJvbSBcIi4vY29uc3RhbnRzXCI7XG4vKipcbiAqIENyZWF0ZXMgYSBzcGFuIHVzaW5nIHRoZSBnbG9iYWwgdHJhY2VyLlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBjb25zdCB0cmFjaW5nQ2xpZW50ID0gY3JlYXRlVHJhY2luZ0NsaWVudCh7XG4gICAgcGFja2FnZU5hbWU6IFwiQGF6dXJlL3N0b3JhZ2UtYmxvYlwiLFxuICAgIHBhY2thZ2VWZXJzaW9uOiBTREtfVkVSU0lPTixcbiAgICBuYW1lc3BhY2U6IFwiTWljcm9zb2Z0LlN0b3JhZ2VcIixcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHJhY2luZy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/tracing.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BlobNameToString: () => (/* binding */ BlobNameToString),\n/* harmony export */   ConvertInternalResponseOfListBlobFlat: () => (/* binding */ ConvertInternalResponseOfListBlobFlat),\n/* harmony export */   ConvertInternalResponseOfListBlobHierarchy: () => (/* binding */ ConvertInternalResponseOfListBlobHierarchy),\n/* harmony export */   EscapePath: () => (/* binding */ EscapePath),\n/* harmony export */   ExtractPageRangeInfoItems: () => (/* binding */ ExtractPageRangeInfoItems),\n/* harmony export */   appendToURLPath: () => (/* binding */ appendToURLPath),\n/* harmony export */   appendToURLQuery: () => (/* binding */ appendToURLQuery),\n/* harmony export */   assertResponse: () => (/* binding */ assertResponse),\n/* harmony export */   attachCredential: () => (/* binding */ attachCredential),\n/* harmony export */   base64decode: () => (/* binding */ base64decode),\n/* harmony export */   base64encode: () => (/* binding */ base64encode),\n/* harmony export */   delay: () => (/* binding */ delay),\n/* harmony export */   escapeURLPath: () => (/* binding */ escapeURLPath),\n/* harmony export */   extractConnectionStringParts: () => (/* binding */ extractConnectionStringParts),\n/* harmony export */   generateBlockID: () => (/* binding */ generateBlockID),\n/* harmony export */   getAccountNameFromUrl: () => (/* binding */ getAccountNameFromUrl),\n/* harmony export */   getURLParameter: () => (/* binding */ getURLParameter),\n/* harmony export */   getURLPath: () => (/* binding */ getURLPath),\n/* harmony export */   getURLPathAndQuery: () => (/* binding */ getURLPathAndQuery),\n/* harmony export */   getURLQueries: () => (/* binding */ getURLQueries),\n/* harmony export */   getURLScheme: () => (/* binding */ getURLScheme),\n/* harmony export */   getValueInConnString: () => (/* binding */ getValueInConnString),\n/* harmony export */   httpAuthorizationToString: () => (/* binding */ httpAuthorizationToString),\n/* harmony export */   iEqual: () => (/* binding */ iEqual),\n/* harmony export */   isIpEndpointStyle: () => (/* binding */ isIpEndpointStyle),\n/* harmony export */   padStart: () => (/* binding */ padStart),\n/* harmony export */   parseObjectReplicationRecord: () => (/* binding */ parseObjectReplicationRecord),\n/* harmony export */   sanitizeHeaders: () => (/* binding */ sanitizeHeaders),\n/* harmony export */   sanitizeURL: () => (/* binding */ sanitizeURL),\n/* harmony export */   setURLHost: () => (/* binding */ setURLHost),\n/* harmony export */   setURLParameter: () => (/* binding */ setURLParameter),\n/* harmony export */   toBlobTags: () => (/* binding */ toBlobTags),\n/* harmony export */   toBlobTagsString: () => (/* binding */ toBlobTagsString),\n/* harmony export */   toQuerySerialization: () => (/* binding */ toQuerySerialization),\n/* harmony export */   toTags: () => (/* binding */ toTags),\n/* harmony export */   truncatedISO8061Date: () => (/* binding */ truncatedISO8061Date)\n/* harmony export */ });\n/* harmony import */ var _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-rest-pipeline */ \"(rsc)/./node_modules/@azure/core-rest-pipeline/dist/esm/index.js\");\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/core-util */ \"(rsc)/./node_modules/@azure/core-util/dist/esm/index.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n/**\n * Reserved URL characters must be properly escaped for Storage services like Blob or File.\n *\n * ## URL encode and escape strategy for JS SDKs\n *\n * When customers pass a URL string into XxxClient classes constructor, the URL string may already be URL encoded or not.\n * But before sending to Azure Storage server, the URL must be encoded. However, it's hard for a SDK to guess whether the URL\n * string has been encoded or not. We have 2 potential strategies, and chose strategy two for the XxxClient constructors.\n *\n * ### Strategy One: Assume the customer URL string is not encoded, and always encode URL string in SDK.\n *\n * This is what legacy V2 SDK does, simple and works for most of the cases.\n * - When customer URL string is \"http://account.blob.core.windows.net/con/b:\",\n *   SDK will encode it to \"http://account.blob.core.windows.net/con/b%3A\" and send to server. A blob named \"b:\" will be created.\n * - When customer URL string is \"http://account.blob.core.windows.net/con/b%3A\",\n *   SDK will encode it to \"http://account.blob.core.windows.net/con/b%253A\" and send to server. A blob named \"b%3A\" will be created.\n *\n * But this strategy will make it not possible to create a blob with \"?\" in it's name. Because when customer URL string is\n * \"http://account.blob.core.windows.net/con/blob?name\", the \"?name\" will be treated as URL paramter instead of blob name.\n * If customer URL string is \"http://account.blob.core.windows.net/con/blob%3Fname\", a blob named \"blob%3Fname\" will be created.\n * V2 SDK doesn't have this issue because it doesn't allow customer pass in a full URL, it accepts a separate blob name and encodeURIComponent for it.\n * We cannot accept a SDK cannot create a blob name with \"?\". So we implement strategy two:\n *\n * ### Strategy Two: SDK doesn't assume the URL has been encoded or not. It will just escape the special characters.\n *\n * This is what V10 Blob Go SDK does. It accepts a URL type in Go, and call url.EscapedPath() to escape the special chars unescaped.\n * - When customer URL string is \"http://account.blob.core.windows.net/con/b:\",\n *   SDK will escape \":\" like \"http://account.blob.core.windows.net/con/b%3A\" and send to server. A blob named \"b:\" will be created.\n * - When customer URL string is \"http://account.blob.core.windows.net/con/b%3A\",\n *   There is no special characters, so send \"http://account.blob.core.windows.net/con/b%3A\" to server. A blob named \"b:\" will be created.\n * - When customer URL string is \"http://account.blob.core.windows.net/con/b%253A\",\n *   There is no special characters, so send \"http://account.blob.core.windows.net/con/b%253A\" to server. A blob named \"b%3A\" will be created.\n *\n * This strategy gives us flexibility to create with any special characters. But \"%\" will be treated as a special characters, if the URL string\n * is not encoded, there shouldn't a \"%\" in the URL string, otherwise the URL is not a valid URL.\n * If customer needs to create a blob with \"%\" in it's blob name, use \"%25\" instead of \"%\". Just like above 3rd sample.\n * And following URL strings are invalid:\n * - \"http://account.blob.core.windows.net/con/b%\"\n * - \"http://account.blob.core.windows.net/con/b%2\"\n * - \"http://account.blob.core.windows.net/con/b%G\"\n *\n * Another special character is \"?\", use \"%2F\" to represent a blob name with \"?\" in a URL string.\n *\n * ### Strategy for containerName, blobName or other specific XXXName parameters in methods such as `containerClient.getBlobClient(blobName)`\n *\n * We will apply strategy one, and call encodeURIComponent for these parameters like blobName. Because what customers passes in is a plain name instead of a URL.\n *\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/naming-and-referencing-containers--blobs--and-metadata\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/naming-and-referencing-shares--directories--files--and-metadata\n *\n * @param url -\n */\nfunction escapeURLPath(url) {\n    const urlParsed = new URL(url);\n    let path = urlParsed.pathname;\n    path = path || \"/\";\n    path = escape(path);\n    urlParsed.pathname = path;\n    return urlParsed.toString();\n}\nfunction getProxyUriFromDevConnString(connectionString) {\n    // Development Connection String\n    // https://docs.microsoft.com/en-us/azure/storage/common/storage-configure-connection-string#connect-to-the-emulator-account-using-the-well-known-account-name-and-key\n    let proxyUri = \"\";\n    if (connectionString.search(\"DevelopmentStorageProxyUri=\") !== -1) {\n        // CONNECTION_STRING=UseDevelopmentStorage=true;DevelopmentStorageProxyUri=http://myProxyUri\n        const matchCredentials = connectionString.split(\";\");\n        for (const element of matchCredentials) {\n            if (element.trim().startsWith(\"DevelopmentStorageProxyUri=\")) {\n                proxyUri = element.trim().match(\"DevelopmentStorageProxyUri=(.*)\")[1];\n            }\n        }\n    }\n    return proxyUri;\n}\nfunction getValueInConnString(connectionString, argument) {\n    const elements = connectionString.split(\";\");\n    for (const element of elements) {\n        if (element.trim().startsWith(argument)) {\n            return element.trim().match(argument + \"=(.*)\")[1];\n        }\n    }\n    return \"\";\n}\n/**\n * Extracts the parts of an Azure Storage account connection string.\n *\n * @param connectionString - Connection string.\n * @returns String key value pairs of the storage account's url and credentials.\n */\nfunction extractConnectionStringParts(connectionString) {\n    let proxyUri = \"\";\n    if (connectionString.startsWith(\"UseDevelopmentStorage=true\")) {\n        // Development connection string\n        proxyUri = getProxyUriFromDevConnString(connectionString);\n        connectionString = _constants__WEBPACK_IMPORTED_MODULE_2__.DevelopmentConnectionString;\n    }\n    // Matching BlobEndpoint in the Account connection string\n    let blobEndpoint = getValueInConnString(connectionString, \"BlobEndpoint\");\n    // Slicing off '/' at the end if exists\n    // (The methods that use `extractConnectionStringParts` expect the url to not have `/` at the end)\n    blobEndpoint = blobEndpoint.endsWith(\"/\") ? blobEndpoint.slice(0, -1) : blobEndpoint;\n    if (connectionString.search(\"DefaultEndpointsProtocol=\") !== -1 &&\n        connectionString.search(\"AccountKey=\") !== -1) {\n        // Account connection string\n        let defaultEndpointsProtocol = \"\";\n        let accountName = \"\";\n        let accountKey = Buffer.from(\"accountKey\", \"base64\");\n        let endpointSuffix = \"\";\n        // Get account name and key\n        accountName = getValueInConnString(connectionString, \"AccountName\");\n        accountKey = Buffer.from(getValueInConnString(connectionString, \"AccountKey\"), \"base64\");\n        if (!blobEndpoint) {\n            // BlobEndpoint is not present in the Account connection string\n            // Can be obtained from `${defaultEndpointsProtocol}://${accountName}.blob.${endpointSuffix}`\n            defaultEndpointsProtocol = getValueInConnString(connectionString, \"DefaultEndpointsProtocol\");\n            const protocol = defaultEndpointsProtocol.toLowerCase();\n            if (protocol !== \"https\" && protocol !== \"http\") {\n                throw new Error(\"Invalid DefaultEndpointsProtocol in the provided Connection String. Expecting 'https' or 'http'\");\n            }\n            endpointSuffix = getValueInConnString(connectionString, \"EndpointSuffix\");\n            if (!endpointSuffix) {\n                throw new Error(\"Invalid EndpointSuffix in the provided Connection String\");\n            }\n            blobEndpoint = `${defaultEndpointsProtocol}://${accountName}.blob.${endpointSuffix}`;\n        }\n        if (!accountName) {\n            throw new Error(\"Invalid AccountName in the provided Connection String\");\n        }\n        else if (accountKey.length === 0) {\n            throw new Error(\"Invalid AccountKey in the provided Connection String\");\n        }\n        return {\n            kind: \"AccountConnString\",\n            url: blobEndpoint,\n            accountName,\n            accountKey,\n            proxyUri,\n        };\n    }\n    else {\n        // SAS connection string\n        let accountSas = getValueInConnString(connectionString, \"SharedAccessSignature\");\n        let accountName = getValueInConnString(connectionString, \"AccountName\");\n        // if accountName is empty, try to read it from BlobEndpoint\n        if (!accountName) {\n            accountName = getAccountNameFromUrl(blobEndpoint);\n        }\n        if (!blobEndpoint) {\n            throw new Error(\"Invalid BlobEndpoint in the provided SAS Connection String\");\n        }\n        else if (!accountSas) {\n            throw new Error(\"Invalid SharedAccessSignature in the provided SAS Connection String\");\n        }\n        // client constructors assume accountSas does *not* start with ?\n        if (accountSas.startsWith(\"?\")) {\n            accountSas = accountSas.substring(1);\n        }\n        return { kind: \"SASConnString\", url: blobEndpoint, accountName, accountSas };\n    }\n}\n/**\n * Internal escape method implemented Strategy Two mentioned in escapeURL() description.\n *\n * @param text -\n */\nfunction escape(text) {\n    return encodeURIComponent(text)\n        .replace(/%2F/g, \"/\") // Don't escape for \"/\"\n        .replace(/'/g, \"%27\") // Escape for \"'\"\n        .replace(/\\+/g, \"%20\")\n        .replace(/%25/g, \"%\"); // Revert encoded \"%\"\n}\n/**\n * Append a string to URL path. Will remove duplicated \"/\" in front of the string\n * when URL path ends with a \"/\".\n *\n * @param url - Source URL string\n * @param name - String to be appended to URL\n * @returns An updated URL string\n */\nfunction appendToURLPath(url, name) {\n    const urlParsed = new URL(url);\n    let path = urlParsed.pathname;\n    path = path ? (path.endsWith(\"/\") ? `${path}${name}` : `${path}/${name}`) : name;\n    urlParsed.pathname = path;\n    return urlParsed.toString();\n}\n/**\n * Set URL parameter name and value. If name exists in URL parameters, old value\n * will be replaced by name key. If not provide value, the parameter will be deleted.\n *\n * @param url - Source URL string\n * @param name - Parameter name\n * @param value - Parameter value\n * @returns An updated URL string\n */\nfunction setURLParameter(url, name, value) {\n    const urlParsed = new URL(url);\n    const encodedName = encodeURIComponent(name);\n    const encodedValue = value ? encodeURIComponent(value) : undefined;\n    // mutating searchParams will change the encoding, so we have to do this ourselves\n    const searchString = urlParsed.search === \"\" ? \"?\" : urlParsed.search;\n    const searchPieces = [];\n    for (const pair of searchString.slice(1).split(\"&\")) {\n        if (pair) {\n            const [key] = pair.split(\"=\", 2);\n            if (key !== encodedName) {\n                searchPieces.push(pair);\n            }\n        }\n    }\n    if (encodedValue) {\n        searchPieces.push(`${encodedName}=${encodedValue}`);\n    }\n    urlParsed.search = searchPieces.length ? `?${searchPieces.join(\"&\")}` : \"\";\n    return urlParsed.toString();\n}\n/**\n * Get URL parameter by name.\n *\n * @param url -\n * @param name -\n */\nfunction getURLParameter(url, name) {\n    var _a;\n    const urlParsed = new URL(url);\n    return (_a = urlParsed.searchParams.get(name)) !== null && _a !== void 0 ? _a : undefined;\n}\n/**\n * Set URL host.\n *\n * @param url - Source URL string\n * @param host - New host string\n * @returns An updated URL string\n */\nfunction setURLHost(url, host) {\n    const urlParsed = new URL(url);\n    urlParsed.hostname = host;\n    return urlParsed.toString();\n}\n/**\n * Get URL path from an URL string.\n *\n * @param url - Source URL string\n */\nfunction getURLPath(url) {\n    try {\n        const urlParsed = new URL(url);\n        return urlParsed.pathname;\n    }\n    catch (e) {\n        return undefined;\n    }\n}\n/**\n * Get URL scheme from an URL string.\n *\n * @param url - Source URL string\n */\nfunction getURLScheme(url) {\n    try {\n        const urlParsed = new URL(url);\n        return urlParsed.protocol.endsWith(\":\") ? urlParsed.protocol.slice(0, -1) : urlParsed.protocol;\n    }\n    catch (e) {\n        return undefined;\n    }\n}\n/**\n * Get URL path and query from an URL string.\n *\n * @param url - Source URL string\n */\nfunction getURLPathAndQuery(url) {\n    const urlParsed = new URL(url);\n    const pathString = urlParsed.pathname;\n    if (!pathString) {\n        throw new RangeError(\"Invalid url without valid path.\");\n    }\n    let queryString = urlParsed.search || \"\";\n    queryString = queryString.trim();\n    if (queryString !== \"\") {\n        queryString = queryString.startsWith(\"?\") ? queryString : `?${queryString}`; // Ensure query string start with '?'\n    }\n    return `${pathString}${queryString}`;\n}\n/**\n * Get URL query key value pairs from an URL string.\n *\n * @param url -\n */\nfunction getURLQueries(url) {\n    let queryString = new URL(url).search;\n    if (!queryString) {\n        return {};\n    }\n    queryString = queryString.trim();\n    queryString = queryString.startsWith(\"?\") ? queryString.substring(1) : queryString;\n    let querySubStrings = queryString.split(\"&\");\n    querySubStrings = querySubStrings.filter((value) => {\n        const indexOfEqual = value.indexOf(\"=\");\n        const lastIndexOfEqual = value.lastIndexOf(\"=\");\n        return (indexOfEqual > 0 && indexOfEqual === lastIndexOfEqual && lastIndexOfEqual < value.length - 1);\n    });\n    const queries = {};\n    for (const querySubString of querySubStrings) {\n        const splitResults = querySubString.split(\"=\");\n        const key = splitResults[0];\n        const value = splitResults[1];\n        queries[key] = value;\n    }\n    return queries;\n}\n/**\n * Append a string to URL query.\n *\n * @param url - Source URL string.\n * @param queryParts - String to be appended to the URL query.\n * @returns An updated URL string.\n */\nfunction appendToURLQuery(url, queryParts) {\n    const urlParsed = new URL(url);\n    let query = urlParsed.search;\n    if (query) {\n        query += \"&\" + queryParts;\n    }\n    else {\n        query = queryParts;\n    }\n    urlParsed.search = query;\n    return urlParsed.toString();\n}\n/**\n * Rounds a date off to seconds.\n *\n * @param date -\n * @param withMilliseconds - If true, YYYY-MM-DDThh:mm:ss.fffffffZ will be returned;\n *                                          If false, YYYY-MM-DDThh:mm:ssZ will be returned.\n * @returns Date string in ISO8061 format, with or without 7 milliseconds component\n */\nfunction truncatedISO8061Date(date, withMilliseconds = true) {\n    // Date.toISOString() will return like \"2018-10-29T06:34:36.139Z\"\n    const dateString = date.toISOString();\n    return withMilliseconds\n        ? dateString.substring(0, dateString.length - 1) + \"0000\" + \"Z\"\n        : dateString.substring(0, dateString.length - 5) + \"Z\";\n}\n/**\n * Base64 encode.\n *\n * @param content -\n */\nfunction base64encode(content) {\n    return !_azure_core_util__WEBPACK_IMPORTED_MODULE_1__.isNode ? btoa(content) : Buffer.from(content).toString(\"base64\");\n}\n/**\n * Base64 decode.\n *\n * @param encodedString -\n */\nfunction base64decode(encodedString) {\n    return !_azure_core_util__WEBPACK_IMPORTED_MODULE_1__.isNode ? atob(encodedString) : Buffer.from(encodedString, \"base64\").toString();\n}\n/**\n * Generate a 64 bytes base64 block ID string.\n *\n * @param blockIndex -\n */\nfunction generateBlockID(blockIDPrefix, blockIndex) {\n    // To generate a 64 bytes base64 string, source string should be 48\n    const maxSourceStringLength = 48;\n    // A blob can have a maximum of 100,000 uncommitted blocks at any given time\n    const maxBlockIndexLength = 6;\n    const maxAllowedBlockIDPrefixLength = maxSourceStringLength - maxBlockIndexLength;\n    if (blockIDPrefix.length > maxAllowedBlockIDPrefixLength) {\n        blockIDPrefix = blockIDPrefix.slice(0, maxAllowedBlockIDPrefixLength);\n    }\n    const res = blockIDPrefix +\n        padStart(blockIndex.toString(), maxSourceStringLength - blockIDPrefix.length, \"0\");\n    return base64encode(res);\n}\n/**\n * Delay specified time interval.\n *\n * @param timeInMs -\n * @param aborter -\n * @param abortError -\n */\nasync function delay(timeInMs, aborter, abortError) {\n    return new Promise((resolve, reject) => {\n        /* eslint-disable-next-line prefer-const */\n        let timeout;\n        const abortHandler = () => {\n            if (timeout !== undefined) {\n                clearTimeout(timeout);\n            }\n            reject(abortError);\n        };\n        const resolveHandler = () => {\n            if (aborter !== undefined) {\n                aborter.removeEventListener(\"abort\", abortHandler);\n            }\n            resolve();\n        };\n        timeout = setTimeout(resolveHandler, timeInMs);\n        if (aborter !== undefined) {\n            aborter.addEventListener(\"abort\", abortHandler);\n        }\n    });\n}\n/**\n * String.prototype.padStart()\n *\n * @param currentString -\n * @param targetLength -\n * @param padString -\n */\nfunction padStart(currentString, targetLength, padString = \" \") {\n    // @ts-expect-error: TS doesn't know this code needs to run downlevel sometimes\n    if (String.prototype.padStart) {\n        return currentString.padStart(targetLength, padString);\n    }\n    padString = padString || \" \";\n    if (currentString.length > targetLength) {\n        return currentString;\n    }\n    else {\n        targetLength = targetLength - currentString.length;\n        if (targetLength > padString.length) {\n            padString += padString.repeat(targetLength / padString.length);\n        }\n        return padString.slice(0, targetLength) + currentString;\n    }\n}\nfunction sanitizeURL(url) {\n    let safeURL = url;\n    if (getURLParameter(safeURL, _constants__WEBPACK_IMPORTED_MODULE_2__.URLConstants.Parameters.SIGNATURE)) {\n        safeURL = setURLParameter(safeURL, _constants__WEBPACK_IMPORTED_MODULE_2__.URLConstants.Parameters.SIGNATURE, \"*****\");\n    }\n    return safeURL;\n}\nfunction sanitizeHeaders(originalHeader) {\n    const headers = (0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__.createHttpHeaders)();\n    for (const [name, value] of originalHeader) {\n        if (name.toLowerCase() === _constants__WEBPACK_IMPORTED_MODULE_2__.HeaderConstants.AUTHORIZATION.toLowerCase()) {\n            headers.set(name, \"*****\");\n        }\n        else if (name.toLowerCase() === _constants__WEBPACK_IMPORTED_MODULE_2__.HeaderConstants.X_MS_COPY_SOURCE) {\n            headers.set(name, sanitizeURL(value));\n        }\n        else {\n            headers.set(name, value);\n        }\n    }\n    return headers;\n}\n/**\n * If two strings are equal when compared case insensitive.\n *\n * @param str1 -\n * @param str2 -\n */\nfunction iEqual(str1, str2) {\n    return str1.toLocaleLowerCase() === str2.toLocaleLowerCase();\n}\n/**\n * Extracts account name from the url\n * @param url - url to extract the account name from\n * @returns with the account name\n */\nfunction getAccountNameFromUrl(url) {\n    const parsedUrl = new URL(url);\n    let accountName;\n    try {\n        if (parsedUrl.hostname.split(\".\")[1] === \"blob\") {\n            // `${defaultEndpointsProtocol}://${accountName}.blob.${endpointSuffix}`;\n            accountName = parsedUrl.hostname.split(\".\")[0];\n        }\n        else if (isIpEndpointStyle(parsedUrl)) {\n            // IPv4/IPv6 address hosts... Example - http://192.0.0.10:10001/devstoreaccount1/\n            // Single word domain without a [dot] in the endpoint... Example - http://localhost:10001/devstoreaccount1/\n            // .getPath() -> /devstoreaccount1/\n            accountName = parsedUrl.pathname.split(\"/\")[1];\n        }\n        else {\n            // Custom domain case: \"https://customdomain.com/containername/blob\".\n            accountName = \"\";\n        }\n        return accountName;\n    }\n    catch (error) {\n        throw new Error(\"Unable to extract accountName with provided information.\");\n    }\n}\nfunction isIpEndpointStyle(parsedUrl) {\n    const host = parsedUrl.host;\n    // Case 1: Ipv6, use a broad regex to find out candidates whose host contains two ':'.\n    // Case 2: localhost(:port) or host.docker.internal, use broad regex to match port part.\n    // Case 3: Ipv4, use broad regex which just check if host contains Ipv4.\n    // For valid host please refer to https://man7.org/linux/man-pages/man7/hostname.7.html.\n    return (/^.*:.*:.*$|^(localhost|host.docker.internal)(:[0-9]+)?$|^(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])(\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])){3}(:[0-9]+)?$/.test(host) ||\n        (Boolean(parsedUrl.port) && _constants__WEBPACK_IMPORTED_MODULE_2__.PathStylePorts.includes(parsedUrl.port)));\n}\n/**\n * Convert Tags to encoded string.\n *\n * @param tags -\n */\nfunction toBlobTagsString(tags) {\n    if (tags === undefined) {\n        return undefined;\n    }\n    const tagPairs = [];\n    for (const key in tags) {\n        if (Object.prototype.hasOwnProperty.call(tags, key)) {\n            const value = tags[key];\n            tagPairs.push(`${encodeURIComponent(key)}=${encodeURIComponent(value)}`);\n        }\n    }\n    return tagPairs.join(\"&\");\n}\n/**\n * Convert Tags type to BlobTags.\n *\n * @param tags -\n */\nfunction toBlobTags(tags) {\n    if (tags === undefined) {\n        return undefined;\n    }\n    const res = {\n        blobTagSet: [],\n    };\n    for (const key in tags) {\n        if (Object.prototype.hasOwnProperty.call(tags, key)) {\n            const value = tags[key];\n            res.blobTagSet.push({\n                key,\n                value,\n            });\n        }\n    }\n    return res;\n}\n/**\n * Covert BlobTags to Tags type.\n *\n * @param tags -\n */\nfunction toTags(tags) {\n    if (tags === undefined) {\n        return undefined;\n    }\n    const res = {};\n    for (const blobTag of tags.blobTagSet) {\n        res[blobTag.key] = blobTag.value;\n    }\n    return res;\n}\n/**\n * Convert BlobQueryTextConfiguration to QuerySerialization type.\n *\n * @param textConfiguration -\n */\nfunction toQuerySerialization(textConfiguration) {\n    if (textConfiguration === undefined) {\n        return undefined;\n    }\n    switch (textConfiguration.kind) {\n        case \"csv\":\n            return {\n                format: {\n                    type: \"delimited\",\n                    delimitedTextConfiguration: {\n                        columnSeparator: textConfiguration.columnSeparator || \",\",\n                        fieldQuote: textConfiguration.fieldQuote || \"\",\n                        recordSeparator: textConfiguration.recordSeparator,\n                        escapeChar: textConfiguration.escapeCharacter || \"\",\n                        headersPresent: textConfiguration.hasHeaders || false,\n                    },\n                },\n            };\n        case \"json\":\n            return {\n                format: {\n                    type: \"json\",\n                    jsonTextConfiguration: {\n                        recordSeparator: textConfiguration.recordSeparator,\n                    },\n                },\n            };\n        case \"arrow\":\n            return {\n                format: {\n                    type: \"arrow\",\n                    arrowConfiguration: {\n                        schema: textConfiguration.schema,\n                    },\n                },\n            };\n        case \"parquet\":\n            return {\n                format: {\n                    type: \"parquet\",\n                },\n            };\n        default:\n            throw Error(\"Invalid BlobQueryTextConfiguration.\");\n    }\n}\nfunction parseObjectReplicationRecord(objectReplicationRecord) {\n    if (!objectReplicationRecord) {\n        return undefined;\n    }\n    if (\"policy-id\" in objectReplicationRecord) {\n        // If the dictionary contains a key with policy id, we are not required to do any parsing since\n        // the policy id should already be stored in the ObjectReplicationDestinationPolicyId.\n        return undefined;\n    }\n    const orProperties = [];\n    for (const key in objectReplicationRecord) {\n        const ids = key.split(\"_\");\n        const policyPrefix = \"or-\";\n        if (ids[0].startsWith(policyPrefix)) {\n            ids[0] = ids[0].substring(policyPrefix.length);\n        }\n        const rule = {\n            ruleId: ids[1],\n            replicationStatus: objectReplicationRecord[key],\n        };\n        const policyIndex = orProperties.findIndex((policy) => policy.policyId === ids[0]);\n        if (policyIndex > -1) {\n            orProperties[policyIndex].rules.push(rule);\n        }\n        else {\n            orProperties.push({\n                policyId: ids[0],\n                rules: [rule],\n            });\n        }\n    }\n    return orProperties;\n}\n/**\n * Attach a TokenCredential to an object.\n *\n * @param thing -\n * @param credential -\n */\nfunction attachCredential(thing, credential) {\n    thing.credential = credential;\n    return thing;\n}\nfunction httpAuthorizationToString(httpAuthorization) {\n    return httpAuthorization ? httpAuthorization.scheme + \" \" + httpAuthorization.value : undefined;\n}\nfunction BlobNameToString(name) {\n    if (name.encoded) {\n        return decodeURIComponent(name.content);\n    }\n    else {\n        return name.content;\n    }\n}\nfunction ConvertInternalResponseOfListBlobFlat(internalResponse) {\n    return Object.assign(Object.assign({}, internalResponse), { segment: {\n            blobItems: internalResponse.segment.blobItems.map((blobItemInteral) => {\n                const blobItem = Object.assign(Object.assign({}, blobItemInteral), { name: BlobNameToString(blobItemInteral.name) });\n                return blobItem;\n            }),\n        } });\n}\nfunction ConvertInternalResponseOfListBlobHierarchy(internalResponse) {\n    var _a;\n    return Object.assign(Object.assign({}, internalResponse), { segment: {\n            blobPrefixes: (_a = internalResponse.segment.blobPrefixes) === null || _a === void 0 ? void 0 : _a.map((blobPrefixInternal) => {\n                const blobPrefix = Object.assign(Object.assign({}, blobPrefixInternal), { name: BlobNameToString(blobPrefixInternal.name) });\n                return blobPrefix;\n            }),\n            blobItems: internalResponse.segment.blobItems.map((blobItemInteral) => {\n                const blobItem = Object.assign(Object.assign({}, blobItemInteral), { name: BlobNameToString(blobItemInteral.name) });\n                return blobItem;\n            }),\n        } });\n}\nfunction* ExtractPageRangeInfoItems(getPageRangesSegment) {\n    let pageRange = [];\n    let clearRange = [];\n    if (getPageRangesSegment.pageRange)\n        pageRange = getPageRangesSegment.pageRange;\n    if (getPageRangesSegment.clearRange)\n        clearRange = getPageRangesSegment.clearRange;\n    let pageRangeIndex = 0;\n    let clearRangeIndex = 0;\n    while (pageRangeIndex < pageRange.length && clearRangeIndex < clearRange.length) {\n        if (pageRange[pageRangeIndex].start < clearRange[clearRangeIndex].start) {\n            yield {\n                start: pageRange[pageRangeIndex].start,\n                end: pageRange[pageRangeIndex].end,\n                isClear: false,\n            };\n            ++pageRangeIndex;\n        }\n        else {\n            yield {\n                start: clearRange[clearRangeIndex].start,\n                end: clearRange[clearRangeIndex].end,\n                isClear: true,\n            };\n            ++clearRangeIndex;\n        }\n    }\n    for (; pageRangeIndex < pageRange.length; ++pageRangeIndex) {\n        yield {\n            start: pageRange[pageRangeIndex].start,\n            end: pageRange[pageRangeIndex].end,\n            isClear: false,\n        };\n    }\n    for (; clearRangeIndex < clearRange.length; ++clearRangeIndex) {\n        yield {\n            start: clearRange[clearRangeIndex].start,\n            end: clearRange[clearRangeIndex].end,\n            isClear: true,\n        };\n    }\n}\n/**\n * Escape the blobName but keep path separator ('/').\n */\nfunction EscapePath(blobName) {\n    const split = blobName.split(\"/\");\n    for (let i = 0; i < split.length; i++) {\n        split[i] = encodeURIComponent(split[i]);\n    }\n    return split.join(\"/\");\n}\n/**\n * A typesafe helper for ensuring that a given response object has\n * the original _response attached.\n * @param response - A response object from calling a client operation\n * @returns The same object, but with known _response property\n */\nfunction assertResponse(response) {\n    if (`_response` in response) {\n        return response;\n    }\n    throw new TypeError(`Unexpected response object ${response}`);\n}\n//# sourceMappingURL=utils.common.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.node.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.node.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fsCreateReadStream: () => (/* binding */ fsCreateReadStream),\n/* harmony export */   fsStat: () => (/* binding */ fsStat),\n/* harmony export */   readStreamToLocalFile: () => (/* binding */ readStreamToLocalFile),\n/* harmony export */   streamToBuffer: () => (/* binding */ streamToBuffer),\n/* harmony export */   streamToBuffer2: () => (/* binding */ streamToBuffer2),\n/* harmony export */   streamToBuffer3: () => (/* binding */ streamToBuffer3)\n/* harmony export */ });\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! util */ \"util\");\n/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(util__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n/**\n * Reads a readable stream into buffer. Fill the buffer from offset to end.\n *\n * @param stream - A Node.js Readable stream\n * @param buffer - Buffer to be filled, length must greater than or equal to offset\n * @param offset - From which position in the buffer to be filled, inclusive\n * @param end - To which position in the buffer to be filled, exclusive\n * @param encoding - Encoding of the Readable stream\n */\nasync function streamToBuffer(stream, buffer, offset, end, encoding) {\n    let pos = 0; // Position in stream\n    const count = end - offset; // Total amount of data needed in stream\n    return new Promise((resolve, reject) => {\n        const timeout = setTimeout(() => reject(new Error(`The operation cannot be completed in timeout.`)), _constants__WEBPACK_IMPORTED_MODULE_2__.REQUEST_TIMEOUT);\n        stream.on(\"readable\", () => {\n            if (pos >= count) {\n                clearTimeout(timeout);\n                resolve();\n                return;\n            }\n            let chunk = stream.read();\n            if (!chunk) {\n                return;\n            }\n            if (typeof chunk === \"string\") {\n                chunk = Buffer.from(chunk, encoding);\n            }\n            // How much data needed in this chunk\n            const chunkLength = pos + chunk.length > count ? count - pos : chunk.length;\n            buffer.fill(chunk.slice(0, chunkLength), offset + pos, offset + pos + chunkLength);\n            pos += chunkLength;\n        });\n        stream.on(\"end\", () => {\n            clearTimeout(timeout);\n            if (pos < count) {\n                reject(new Error(`Stream drains before getting enough data needed. Data read: ${pos}, data need: ${count}`));\n            }\n            resolve();\n        });\n        stream.on(\"error\", (msg) => {\n            clearTimeout(timeout);\n            reject(msg);\n        });\n    });\n}\n/**\n * Reads a readable stream into buffer entirely.\n *\n * @param stream - A Node.js Readable stream\n * @param buffer - Buffer to be filled, length must greater than or equal to offset\n * @param encoding - Encoding of the Readable stream\n * @returns with the count of bytes read.\n * @throws `RangeError` If buffer size is not big enough.\n */\nasync function streamToBuffer2(stream, buffer, encoding) {\n    let pos = 0; // Position in stream\n    const bufferSize = buffer.length;\n    return new Promise((resolve, reject) => {\n        stream.on(\"readable\", () => {\n            let chunk = stream.read();\n            if (!chunk) {\n                return;\n            }\n            if (typeof chunk === \"string\") {\n                chunk = Buffer.from(chunk, encoding);\n            }\n            if (pos + chunk.length > bufferSize) {\n                reject(new Error(`Stream exceeds buffer size. Buffer size: ${bufferSize}`));\n                return;\n            }\n            buffer.fill(chunk, pos, pos + chunk.length);\n            pos += chunk.length;\n        });\n        stream.on(\"end\", () => {\n            resolve(pos);\n        });\n        stream.on(\"error\", reject);\n    });\n}\n/**\n * Reads a readable stream into a buffer.\n *\n * @param stream - A Node.js Readable stream\n * @param encoding - Encoding of the Readable stream\n * @returns with the count of bytes read.\n */\nasync function streamToBuffer3(readableStream, encoding) {\n    return new Promise((resolve, reject) => {\n        const chunks = [];\n        readableStream.on(\"data\", (data) => {\n            chunks.push(data instanceof Buffer ? data : Buffer.from(data, encoding));\n        });\n        readableStream.on(\"end\", () => {\n            resolve(Buffer.concat(chunks));\n        });\n        readableStream.on(\"error\", reject);\n    });\n}\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * Writes the content of a readstream to a local file. Returns a Promise which is completed after the file handle is closed.\n *\n * @param rs - The read stream.\n * @param file - Destination file path.\n */\nasync function readStreamToLocalFile(rs, file) {\n    return new Promise((resolve, reject) => {\n        const ws = fs__WEBPACK_IMPORTED_MODULE_0__.createWriteStream(file);\n        rs.on(\"error\", (err) => {\n            reject(err);\n        });\n        ws.on(\"error\", (err) => {\n            reject(err);\n        });\n        ws.on(\"close\", resolve);\n        rs.pipe(ws);\n    });\n}\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * Promisified version of fs.stat().\n */\nconst fsStat = util__WEBPACK_IMPORTED_MODULE_1__.promisify(fs__WEBPACK_IMPORTED_MODULE_0__.stat);\nconst fsCreateReadStream = fs__WEBPACK_IMPORTED_MODULE_0__.createReadStream;\n//# sourceMappingURL=utils.node.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.node.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-common/src/BufferScheduler.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-common/src/BufferScheduler.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BufferScheduler: () => (/* binding */ BufferScheduler)\n/* harmony export */ });\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _PooledBuffer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./PooledBuffer */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-common/src/PooledBuffer.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n/**\n * This class accepts a Node.js Readable stream as input, and keeps reading data\n * from the stream into the internal buffer structure, until it reaches maxBuffers.\n * Every available buffer will try to trigger outgoingHandler.\n *\n * The internal buffer structure includes an incoming buffer array, and a outgoing\n * buffer array. The incoming buffer array includes the \"empty\" buffers can be filled\n * with new incoming data. The outgoing array includes the filled buffers to be\n * handled by outgoingHandler. Every above buffer size is defined by parameter bufferSize.\n *\n * NUM_OF_ALL_BUFFERS = BUFFERS_IN_INCOMING + BUFFERS_IN_OUTGOING + BUFFERS_UNDER_HANDLING\n *\n * NUM_OF_ALL_BUFFERS lesser than or equal to maxBuffers\n *\n * PERFORMANCE IMPROVEMENT TIPS:\n * 1. Input stream highWaterMark is better to set a same value with bufferSize\n *    parameter, which will avoid Buffer.concat() operations.\n * 2. concurrency should set a smaller value than maxBuffers, which is helpful to\n *    reduce the possibility when a outgoing handler waits for the stream data.\n *    in this situation, outgoing handlers are blocked.\n *    Outgoing queue shouldn't be empty.\n */\nclass BufferScheduler {\n    /**\n     * Creates an instance of BufferScheduler.\n     *\n     * @param readable - A Node.js Readable stream\n     * @param bufferSize - Buffer size of every maintained buffer\n     * @param maxBuffers - How many buffers can be allocated\n     * @param outgoingHandler - An async function scheduled to be\n     *                                          triggered when a buffer fully filled\n     *                                          with stream data\n     * @param concurrency - Concurrency of executing outgoingHandlers (>0)\n     * @param encoding - [Optional] Encoding of Readable stream when it's a string stream\n     */\n    constructor(readable, bufferSize, maxBuffers, outgoingHandler, concurrency, encoding) {\n        /**\n         * An internal event emitter.\n         */\n        this.emitter = new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();\n        /**\n         * An internal offset marker to track data offset in bytes of next outgoingHandler.\n         */\n        this.offset = 0;\n        /**\n         * An internal marker to track whether stream is end.\n         */\n        this.isStreamEnd = false;\n        /**\n         * An internal marker to track whether stream or outgoingHandler returns error.\n         */\n        this.isError = false;\n        /**\n         * How many handlers are executing.\n         */\n        this.executingOutgoingHandlers = 0;\n        /**\n         * How many buffers have been allocated.\n         */\n        this.numBuffers = 0;\n        /**\n         * Because this class doesn't know how much data every time stream pops, which\n         * is defined by highWaterMarker of the stream. So BufferScheduler will cache\n         * data received from the stream, when data in unresolvedDataArray exceeds the\n         * blockSize defined, it will try to concat a blockSize of buffer, fill into available\n         * buffers from incoming and push to outgoing array.\n         */\n        this.unresolvedDataArray = [];\n        /**\n         * How much data consisted in unresolvedDataArray.\n         */\n        this.unresolvedLength = 0;\n        /**\n         * The array includes all the available buffers can be used to fill data from stream.\n         */\n        this.incoming = [];\n        /**\n         * The array (queue) includes all the buffers filled from stream data.\n         */\n        this.outgoing = [];\n        if (bufferSize <= 0) {\n            throw new RangeError(`bufferSize must be larger than 0, current is ${bufferSize}`);\n        }\n        if (maxBuffers <= 0) {\n            throw new RangeError(`maxBuffers must be larger than 0, current is ${maxBuffers}`);\n        }\n        if (concurrency <= 0) {\n            throw new RangeError(`concurrency must be larger than 0, current is ${concurrency}`);\n        }\n        this.bufferSize = bufferSize;\n        this.maxBuffers = maxBuffers;\n        this.readable = readable;\n        this.outgoingHandler = outgoingHandler;\n        this.concurrency = concurrency;\n        this.encoding = encoding;\n    }\n    /**\n     * Start the scheduler, will return error when stream of any of the outgoingHandlers\n     * returns error.\n     *\n     */\n    async do() {\n        return new Promise((resolve, reject) => {\n            this.readable.on(\"data\", (data) => {\n                data = typeof data === \"string\" ? Buffer.from(data, this.encoding) : data;\n                this.appendUnresolvedData(data);\n                if (!this.resolveData()) {\n                    this.readable.pause();\n                }\n            });\n            this.readable.on(\"error\", (err) => {\n                this.emitter.emit(\"error\", err);\n            });\n            this.readable.on(\"end\", () => {\n                this.isStreamEnd = true;\n                this.emitter.emit(\"checkEnd\");\n            });\n            this.emitter.on(\"error\", (err) => {\n                this.isError = true;\n                this.readable.pause();\n                reject(err);\n            });\n            this.emitter.on(\"checkEnd\", () => {\n                if (this.outgoing.length > 0) {\n                    this.triggerOutgoingHandlers();\n                    return;\n                }\n                if (this.isStreamEnd && this.executingOutgoingHandlers === 0) {\n                    if (this.unresolvedLength > 0 && this.unresolvedLength < this.bufferSize) {\n                        const buffer = this.shiftBufferFromUnresolvedDataArray();\n                        this.outgoingHandler(() => buffer.getReadableStream(), buffer.size, this.offset)\n                            .then(resolve)\n                            .catch(reject);\n                    }\n                    else if (this.unresolvedLength >= this.bufferSize) {\n                        return;\n                    }\n                    else {\n                        resolve();\n                    }\n                }\n            });\n        });\n    }\n    /**\n     * Insert a new data into unresolved array.\n     *\n     * @param data -\n     */\n    appendUnresolvedData(data) {\n        this.unresolvedDataArray.push(data);\n        this.unresolvedLength += data.length;\n    }\n    /**\n     * Try to shift a buffer with size in blockSize. The buffer returned may be less\n     * than blockSize when data in unresolvedDataArray is less than bufferSize.\n     *\n     */\n    shiftBufferFromUnresolvedDataArray(buffer) {\n        if (!buffer) {\n            buffer = new _PooledBuffer__WEBPACK_IMPORTED_MODULE_1__.PooledBuffer(this.bufferSize, this.unresolvedDataArray, this.unresolvedLength);\n        }\n        else {\n            buffer.fill(this.unresolvedDataArray, this.unresolvedLength);\n        }\n        this.unresolvedLength -= buffer.size;\n        return buffer;\n    }\n    /**\n     * Resolve data in unresolvedDataArray. For every buffer with size in blockSize\n     * shifted, it will try to get (or allocate a buffer) from incoming, and fill it,\n     * then push it into outgoing to be handled by outgoing handler.\n     *\n     * Return false when available buffers in incoming are not enough, else true.\n     *\n     * @returns Return false when buffers in incoming are not enough, else true.\n     */\n    resolveData() {\n        while (this.unresolvedLength >= this.bufferSize) {\n            let buffer;\n            if (this.incoming.length > 0) {\n                buffer = this.incoming.shift();\n                this.shiftBufferFromUnresolvedDataArray(buffer);\n            }\n            else {\n                if (this.numBuffers < this.maxBuffers) {\n                    buffer = this.shiftBufferFromUnresolvedDataArray();\n                    this.numBuffers++;\n                }\n                else {\n                    // No available buffer, wait for buffer returned\n                    return false;\n                }\n            }\n            this.outgoing.push(buffer);\n            this.triggerOutgoingHandlers();\n        }\n        return true;\n    }\n    /**\n     * Try to trigger a outgoing handler for every buffer in outgoing. Stop when\n     * concurrency reaches.\n     */\n    async triggerOutgoingHandlers() {\n        let buffer;\n        do {\n            if (this.executingOutgoingHandlers >= this.concurrency) {\n                return;\n            }\n            buffer = this.outgoing.shift();\n            if (buffer) {\n                this.triggerOutgoingHandler(buffer);\n            }\n        } while (buffer);\n    }\n    /**\n     * Trigger a outgoing handler for a buffer shifted from outgoing.\n     *\n     * @param buffer -\n     */\n    async triggerOutgoingHandler(buffer) {\n        const bufferLength = buffer.size;\n        this.executingOutgoingHandlers++;\n        this.offset += bufferLength;\n        try {\n            await this.outgoingHandler(() => buffer.getReadableStream(), bufferLength, this.offset - bufferLength);\n        }\n        catch (err) {\n            this.emitter.emit(\"error\", err);\n            return;\n        }\n        this.executingOutgoingHandlers--;\n        this.reuseBuffer(buffer);\n        this.emitter.emit(\"checkEnd\");\n    }\n    /**\n     * Return buffer used by outgoing handler into incoming.\n     *\n     * @param buffer -\n     */\n    reuseBuffer(buffer) {\n        this.incoming.push(buffer);\n        if (!this.isError && this.resolveData() && !this.isStreamEnd) {\n            this.readable.resume();\n        }\n    }\n}\n//# sourceMappingURL=BufferScheduler.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-common/src/BufferScheduler.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-common/src/BuffersStream.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-common/src/BuffersStream.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BuffersStream: () => (/* binding */ BuffersStream)\n/* harmony export */ });\n/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! stream */ \"stream\");\n/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(stream__WEBPACK_IMPORTED_MODULE_0__);\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * This class generates a readable stream from the data in an array of buffers.\n */\nclass BuffersStream extends stream__WEBPACK_IMPORTED_MODULE_0__.Readable {\n    /**\n     * Creates an instance of BuffersStream that will emit the data\n     * contained in the array of buffers.\n     *\n     * @param buffers - Array of buffers containing the data\n     * @param byteLength - The total length of data contained in the buffers\n     */\n    constructor(buffers, byteLength, options) {\n        super(options);\n        this.buffers = buffers;\n        this.byteLength = byteLength;\n        this.byteOffsetInCurrentBuffer = 0;\n        this.bufferIndex = 0;\n        this.pushedBytesLength = 0;\n        // check byteLength is no larger than buffers[] total length\n        let buffersLength = 0;\n        for (const buf of this.buffers) {\n            buffersLength += buf.byteLength;\n        }\n        if (buffersLength < this.byteLength) {\n            throw new Error(\"Data size shouldn't be larger than the total length of buffers.\");\n        }\n    }\n    /**\n     * Internal _read() that will be called when the stream wants to pull more data in.\n     *\n     * @param size - Optional. The size of data to be read\n     */\n    _read(size) {\n        if (this.pushedBytesLength >= this.byteLength) {\n            this.push(null);\n        }\n        if (!size) {\n            size = this.readableHighWaterMark;\n        }\n        const outBuffers = [];\n        let i = 0;\n        while (i < size && this.pushedBytesLength < this.byteLength) {\n            // The last buffer may be longer than the data it contains.\n            const remainingDataInAllBuffers = this.byteLength - this.pushedBytesLength;\n            const remainingCapacityInThisBuffer = this.buffers[this.bufferIndex].byteLength - this.byteOffsetInCurrentBuffer;\n            const remaining = Math.min(remainingCapacityInThisBuffer, remainingDataInAllBuffers);\n            if (remaining > size - i) {\n                // chunkSize = size - i\n                const end = this.byteOffsetInCurrentBuffer + size - i;\n                outBuffers.push(this.buffers[this.bufferIndex].slice(this.byteOffsetInCurrentBuffer, end));\n                this.pushedBytesLength += size - i;\n                this.byteOffsetInCurrentBuffer = end;\n                i = size;\n                break;\n            }\n            else {\n                // chunkSize = remaining\n                const end = this.byteOffsetInCurrentBuffer + remaining;\n                outBuffers.push(this.buffers[this.bufferIndex].slice(this.byteOffsetInCurrentBuffer, end));\n                if (remaining === remainingCapacityInThisBuffer) {\n                    // this.buffers[this.bufferIndex] used up, shift to next one\n                    this.byteOffsetInCurrentBuffer = 0;\n                    this.bufferIndex++;\n                }\n                else {\n                    this.byteOffsetInCurrentBuffer = end;\n                }\n                this.pushedBytesLength += remaining;\n                i += remaining;\n            }\n        }\n        if (outBuffers.length > 1) {\n            this.push(Buffer.concat(outBuffers));\n        }\n        else if (outBuffers.length === 1) {\n            this.push(outBuffers[0]);\n        }\n    }\n}\n//# sourceMappingURL=BuffersStream.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWNvbW1vbi9zcmMvQnVmZmVyc1N0cmVhbS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ2tDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNPLDRCQUE0Qiw0Q0FBUTtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcndpbHNvbi9EZXNrdG9wL3Byb2plY3RzL0VaVml6L25vZGVfbW9kdWxlcy9AYXp1cmUvc3RvcmFnZS1ibG9iL2Rpc3QtZXNtL3N0b3JhZ2UtY29tbW9uL3NyYy9CdWZmZXJzU3RyZWFtLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuaW1wb3J0IHsgUmVhZGFibGUgfSBmcm9tIFwic3RyZWFtXCI7XG4vKipcbiAqIFRoaXMgY2xhc3MgZ2VuZXJhdGVzIGEgcmVhZGFibGUgc3RyZWFtIGZyb20gdGhlIGRhdGEgaW4gYW4gYXJyYXkgb2YgYnVmZmVycy5cbiAqL1xuZXhwb3J0IGNsYXNzIEJ1ZmZlcnNTdHJlYW0gZXh0ZW5kcyBSZWFkYWJsZSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBCdWZmZXJzU3RyZWFtIHRoYXQgd2lsbCBlbWl0IHRoZSBkYXRhXG4gICAgICogY29udGFpbmVkIGluIHRoZSBhcnJheSBvZiBidWZmZXJzLlxuICAgICAqXG4gICAgICogQHBhcmFtIGJ1ZmZlcnMgLSBBcnJheSBvZiBidWZmZXJzIGNvbnRhaW5pbmcgdGhlIGRhdGFcbiAgICAgKiBAcGFyYW0gYnl0ZUxlbmd0aCAtIFRoZSB0b3RhbCBsZW5ndGggb2YgZGF0YSBjb250YWluZWQgaW4gdGhlIGJ1ZmZlcnNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihidWZmZXJzLCBieXRlTGVuZ3RoLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgICAgICB0aGlzLmJ1ZmZlcnMgPSBidWZmZXJzO1xuICAgICAgICB0aGlzLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoO1xuICAgICAgICB0aGlzLmJ5dGVPZmZzZXRJbkN1cnJlbnRCdWZmZXIgPSAwO1xuICAgICAgICB0aGlzLmJ1ZmZlckluZGV4ID0gMDtcbiAgICAgICAgdGhpcy5wdXNoZWRCeXRlc0xlbmd0aCA9IDA7XG4gICAgICAgIC8vIGNoZWNrIGJ5dGVMZW5ndGggaXMgbm8gbGFyZ2VyIHRoYW4gYnVmZmVyc1tdIHRvdGFsIGxlbmd0aFxuICAgICAgICBsZXQgYnVmZmVyc0xlbmd0aCA9IDA7XG4gICAgICAgIGZvciAoY29uc3QgYnVmIG9mIHRoaXMuYnVmZmVycykge1xuICAgICAgICAgICAgYnVmZmVyc0xlbmd0aCArPSBidWYuYnl0ZUxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYnVmZmVyc0xlbmd0aCA8IHRoaXMuYnl0ZUxlbmd0aCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRGF0YSBzaXplIHNob3VsZG4ndCBiZSBsYXJnZXIgdGhhbiB0aGUgdG90YWwgbGVuZ3RoIG9mIGJ1ZmZlcnMuXCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEludGVybmFsIF9yZWFkKCkgdGhhdCB3aWxsIGJlIGNhbGxlZCB3aGVuIHRoZSBzdHJlYW0gd2FudHMgdG8gcHVsbCBtb3JlIGRhdGEgaW4uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc2l6ZSAtIE9wdGlvbmFsLiBUaGUgc2l6ZSBvZiBkYXRhIHRvIGJlIHJlYWRcbiAgICAgKi9cbiAgICBfcmVhZChzaXplKSB7XG4gICAgICAgIGlmICh0aGlzLnB1c2hlZEJ5dGVzTGVuZ3RoID49IHRoaXMuYnl0ZUxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5wdXNoKG51bGwpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghc2l6ZSkge1xuICAgICAgICAgICAgc2l6ZSA9IHRoaXMucmVhZGFibGVIaWdoV2F0ZXJNYXJrO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG91dEJ1ZmZlcnMgPSBbXTtcbiAgICAgICAgbGV0IGkgPSAwO1xuICAgICAgICB3aGlsZSAoaSA8IHNpemUgJiYgdGhpcy5wdXNoZWRCeXRlc0xlbmd0aCA8IHRoaXMuYnl0ZUxlbmd0aCkge1xuICAgICAgICAgICAgLy8gVGhlIGxhc3QgYnVmZmVyIG1heSBiZSBsb25nZXIgdGhhbiB0aGUgZGF0YSBpdCBjb250YWlucy5cbiAgICAgICAgICAgIGNvbnN0IHJlbWFpbmluZ0RhdGFJbkFsbEJ1ZmZlcnMgPSB0aGlzLmJ5dGVMZW5ndGggLSB0aGlzLnB1c2hlZEJ5dGVzTGVuZ3RoO1xuICAgICAgICAgICAgY29uc3QgcmVtYWluaW5nQ2FwYWNpdHlJblRoaXNCdWZmZXIgPSB0aGlzLmJ1ZmZlcnNbdGhpcy5idWZmZXJJbmRleF0uYnl0ZUxlbmd0aCAtIHRoaXMuYnl0ZU9mZnNldEluQ3VycmVudEJ1ZmZlcjtcbiAgICAgICAgICAgIGNvbnN0IHJlbWFpbmluZyA9IE1hdGgubWluKHJlbWFpbmluZ0NhcGFjaXR5SW5UaGlzQnVmZmVyLCByZW1haW5pbmdEYXRhSW5BbGxCdWZmZXJzKTtcbiAgICAgICAgICAgIGlmIChyZW1haW5pbmcgPiBzaXplIC0gaSkge1xuICAgICAgICAgICAgICAgIC8vIGNodW5rU2l6ZSA9IHNpemUgLSBpXG4gICAgICAgICAgICAgICAgY29uc3QgZW5kID0gdGhpcy5ieXRlT2Zmc2V0SW5DdXJyZW50QnVmZmVyICsgc2l6ZSAtIGk7XG4gICAgICAgICAgICAgICAgb3V0QnVmZmVycy5wdXNoKHRoaXMuYnVmZmVyc1t0aGlzLmJ1ZmZlckluZGV4XS5zbGljZSh0aGlzLmJ5dGVPZmZzZXRJbkN1cnJlbnRCdWZmZXIsIGVuZCkpO1xuICAgICAgICAgICAgICAgIHRoaXMucHVzaGVkQnl0ZXNMZW5ndGggKz0gc2l6ZSAtIGk7XG4gICAgICAgICAgICAgICAgdGhpcy5ieXRlT2Zmc2V0SW5DdXJyZW50QnVmZmVyID0gZW5kO1xuICAgICAgICAgICAgICAgIGkgPSBzaXplO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gY2h1bmtTaXplID0gcmVtYWluaW5nXG4gICAgICAgICAgICAgICAgY29uc3QgZW5kID0gdGhpcy5ieXRlT2Zmc2V0SW5DdXJyZW50QnVmZmVyICsgcmVtYWluaW5nO1xuICAgICAgICAgICAgICAgIG91dEJ1ZmZlcnMucHVzaCh0aGlzLmJ1ZmZlcnNbdGhpcy5idWZmZXJJbmRleF0uc2xpY2UodGhpcy5ieXRlT2Zmc2V0SW5DdXJyZW50QnVmZmVyLCBlbmQpKTtcbiAgICAgICAgICAgICAgICBpZiAocmVtYWluaW5nID09PSByZW1haW5pbmdDYXBhY2l0eUluVGhpc0J1ZmZlcikge1xuICAgICAgICAgICAgICAgICAgICAvLyB0aGlzLmJ1ZmZlcnNbdGhpcy5idWZmZXJJbmRleF0gdXNlZCB1cCwgc2hpZnQgdG8gbmV4dCBvbmVcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ieXRlT2Zmc2V0SW5DdXJyZW50QnVmZmVyID0gMDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5idWZmZXJJbmRleCsrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ieXRlT2Zmc2V0SW5DdXJyZW50QnVmZmVyID0gZW5kO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnB1c2hlZEJ5dGVzTGVuZ3RoICs9IHJlbWFpbmluZztcbiAgICAgICAgICAgICAgICBpICs9IHJlbWFpbmluZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAob3V0QnVmZmVycy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICB0aGlzLnB1c2goQnVmZmVyLmNvbmNhdChvdXRCdWZmZXJzKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAob3V0QnVmZmVycy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIHRoaXMucHVzaChvdXRCdWZmZXJzWzBdKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUJ1ZmZlcnNTdHJlYW0uanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-common/src/BuffersStream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-common/src/PooledBuffer.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-common/src/PooledBuffer.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PooledBuffer: () => (/* binding */ PooledBuffer)\n/* harmony export */ });\n/* harmony import */ var _BuffersStream__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./BuffersStream */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-common/src/BuffersStream.js\");\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! buffer */ \"buffer\");\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(buffer__WEBPACK_IMPORTED_MODULE_0__);\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * maxBufferLength is max size of each buffer in the pooled buffers.\n */\n\nconst maxBufferLength = (buffer__WEBPACK_IMPORTED_MODULE_0___default().constants).MAX_LENGTH;\n/**\n * This class provides a buffer container which conceptually has no hard size limit.\n * It accepts a capacity, an array of input buffers and the total length of input data.\n * It will allocate an internal \"buffer\" of the capacity and fill the data in the input buffers\n * into the internal \"buffer\" serially with respect to the total length.\n * Then by calling PooledBuffer.getReadableStream(), you can get a readable stream\n * assembled from all the data in the internal \"buffer\".\n */\nclass PooledBuffer {\n    /**\n     * The size of the data contained in the pooled buffers.\n     */\n    get size() {\n        return this._size;\n    }\n    constructor(capacity, buffers, totalLength) {\n        /**\n         * Internal buffers used to keep the data.\n         * Each buffer has a length of the maxBufferLength except last one.\n         */\n        this.buffers = [];\n        this.capacity = capacity;\n        this._size = 0;\n        // allocate\n        const bufferNum = Math.ceil(capacity / maxBufferLength);\n        for (let i = 0; i < bufferNum; i++) {\n            let len = i === bufferNum - 1 ? capacity % maxBufferLength : maxBufferLength;\n            if (len === 0) {\n                len = maxBufferLength;\n            }\n            this.buffers.push(Buffer.allocUnsafe(len));\n        }\n        if (buffers) {\n            this.fill(buffers, totalLength);\n        }\n    }\n    /**\n     * Fill the internal buffers with data in the input buffers serially\n     * with respect to the total length and the total capacity of the internal buffers.\n     * Data copied will be shift out of the input buffers.\n     *\n     * @param buffers - Input buffers containing the data to be filled in the pooled buffer\n     * @param totalLength - Total length of the data to be filled in.\n     *\n     */\n    fill(buffers, totalLength) {\n        this._size = Math.min(this.capacity, totalLength);\n        let i = 0, j = 0, targetOffset = 0, sourceOffset = 0, totalCopiedNum = 0;\n        while (totalCopiedNum < this._size) {\n            const source = buffers[i];\n            const target = this.buffers[j];\n            const copiedNum = source.copy(target, targetOffset, sourceOffset);\n            totalCopiedNum += copiedNum;\n            sourceOffset += copiedNum;\n            targetOffset += copiedNum;\n            if (sourceOffset === source.length) {\n                i++;\n                sourceOffset = 0;\n            }\n            if (targetOffset === target.length) {\n                j++;\n                targetOffset = 0;\n            }\n        }\n        // clear copied from source buffers\n        buffers.splice(0, i);\n        if (buffers.length > 0) {\n            buffers[0] = buffers[0].slice(sourceOffset);\n        }\n    }\n    /**\n     * Get the readable stream assembled from all the data in the internal buffers.\n     *\n     */\n    getReadableStream() {\n        return new _BuffersStream__WEBPACK_IMPORTED_MODULE_1__.BuffersStream(this.buffers, this.size);\n    }\n}\n//# sourceMappingURL=PooledBuffer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWNvbW1vbi9zcmMvUG9vbGVkQnVmZmVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBO0FBQ2dEO0FBQ2hEO0FBQ0E7QUFDQTtBQUM0QjtBQUM1Qix3QkFBd0IseURBQWdCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGVBQWU7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIseURBQWE7QUFDaEM7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvdmljdG9yd2lsc29uL0Rlc2t0b3AvcHJvamVjdHMvRVpWaXovbm9kZV9tb2R1bGVzL0BhenVyZS9zdG9yYWdlLWJsb2IvZGlzdC1lc20vc3RvcmFnZS1jb21tb24vc3JjL1Bvb2xlZEJ1ZmZlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbmltcG9ydCB7IEJ1ZmZlcnNTdHJlYW0gfSBmcm9tIFwiLi9CdWZmZXJzU3RyZWFtXCI7XG4vKipcbiAqIG1heEJ1ZmZlckxlbmd0aCBpcyBtYXggc2l6ZSBvZiBlYWNoIGJ1ZmZlciBpbiB0aGUgcG9vbGVkIGJ1ZmZlcnMuXG4gKi9cbmltcG9ydCBidWZmZXIgZnJvbSBcImJ1ZmZlclwiO1xuY29uc3QgbWF4QnVmZmVyTGVuZ3RoID0gYnVmZmVyLmNvbnN0YW50cy5NQVhfTEVOR1RIO1xuLyoqXG4gKiBUaGlzIGNsYXNzIHByb3ZpZGVzIGEgYnVmZmVyIGNvbnRhaW5lciB3aGljaCBjb25jZXB0dWFsbHkgaGFzIG5vIGhhcmQgc2l6ZSBsaW1pdC5cbiAqIEl0IGFjY2VwdHMgYSBjYXBhY2l0eSwgYW4gYXJyYXkgb2YgaW5wdXQgYnVmZmVycyBhbmQgdGhlIHRvdGFsIGxlbmd0aCBvZiBpbnB1dCBkYXRhLlxuICogSXQgd2lsbCBhbGxvY2F0ZSBhbiBpbnRlcm5hbCBcImJ1ZmZlclwiIG9mIHRoZSBjYXBhY2l0eSBhbmQgZmlsbCB0aGUgZGF0YSBpbiB0aGUgaW5wdXQgYnVmZmVyc1xuICogaW50byB0aGUgaW50ZXJuYWwgXCJidWZmZXJcIiBzZXJpYWxseSB3aXRoIHJlc3BlY3QgdG8gdGhlIHRvdGFsIGxlbmd0aC5cbiAqIFRoZW4gYnkgY2FsbGluZyBQb29sZWRCdWZmZXIuZ2V0UmVhZGFibGVTdHJlYW0oKSwgeW91IGNhbiBnZXQgYSByZWFkYWJsZSBzdHJlYW1cbiAqIGFzc2VtYmxlZCBmcm9tIGFsbCB0aGUgZGF0YSBpbiB0aGUgaW50ZXJuYWwgXCJidWZmZXJcIi5cbiAqL1xuZXhwb3J0IGNsYXNzIFBvb2xlZEJ1ZmZlciB7XG4gICAgLyoqXG4gICAgICogVGhlIHNpemUgb2YgdGhlIGRhdGEgY29udGFpbmVkIGluIHRoZSBwb29sZWQgYnVmZmVycy5cbiAgICAgKi9cbiAgICBnZXQgc2l6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NpemU7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGNhcGFjaXR5LCBidWZmZXJzLCB0b3RhbExlbmd0aCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogSW50ZXJuYWwgYnVmZmVycyB1c2VkIHRvIGtlZXAgdGhlIGRhdGEuXG4gICAgICAgICAqIEVhY2ggYnVmZmVyIGhhcyBhIGxlbmd0aCBvZiB0aGUgbWF4QnVmZmVyTGVuZ3RoIGV4Y2VwdCBsYXN0IG9uZS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuYnVmZmVycyA9IFtdO1xuICAgICAgICB0aGlzLmNhcGFjaXR5ID0gY2FwYWNpdHk7XG4gICAgICAgIHRoaXMuX3NpemUgPSAwO1xuICAgICAgICAvLyBhbGxvY2F0ZVxuICAgICAgICBjb25zdCBidWZmZXJOdW0gPSBNYXRoLmNlaWwoY2FwYWNpdHkgLyBtYXhCdWZmZXJMZW5ndGgpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ1ZmZlck51bTsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgbGVuID0gaSA9PT0gYnVmZmVyTnVtIC0gMSA/IGNhcGFjaXR5ICUgbWF4QnVmZmVyTGVuZ3RoIDogbWF4QnVmZmVyTGVuZ3RoO1xuICAgICAgICAgICAgaWYgKGxlbiA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGxlbiA9IG1heEJ1ZmZlckxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuYnVmZmVycy5wdXNoKEJ1ZmZlci5hbGxvY1Vuc2FmZShsZW4pKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYnVmZmVycykge1xuICAgICAgICAgICAgdGhpcy5maWxsKGJ1ZmZlcnMsIHRvdGFsTGVuZ3RoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBGaWxsIHRoZSBpbnRlcm5hbCBidWZmZXJzIHdpdGggZGF0YSBpbiB0aGUgaW5wdXQgYnVmZmVycyBzZXJpYWxseVxuICAgICAqIHdpdGggcmVzcGVjdCB0byB0aGUgdG90YWwgbGVuZ3RoIGFuZCB0aGUgdG90YWwgY2FwYWNpdHkgb2YgdGhlIGludGVybmFsIGJ1ZmZlcnMuXG4gICAgICogRGF0YSBjb3BpZWQgd2lsbCBiZSBzaGlmdCBvdXQgb2YgdGhlIGlucHV0IGJ1ZmZlcnMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYnVmZmVycyAtIElucHV0IGJ1ZmZlcnMgY29udGFpbmluZyB0aGUgZGF0YSB0byBiZSBmaWxsZWQgaW4gdGhlIHBvb2xlZCBidWZmZXJcbiAgICAgKiBAcGFyYW0gdG90YWxMZW5ndGggLSBUb3RhbCBsZW5ndGggb2YgdGhlIGRhdGEgdG8gYmUgZmlsbGVkIGluLlxuICAgICAqXG4gICAgICovXG4gICAgZmlsbChidWZmZXJzLCB0b3RhbExlbmd0aCkge1xuICAgICAgICB0aGlzLl9zaXplID0gTWF0aC5taW4odGhpcy5jYXBhY2l0eSwgdG90YWxMZW5ndGgpO1xuICAgICAgICBsZXQgaSA9IDAsIGogPSAwLCB0YXJnZXRPZmZzZXQgPSAwLCBzb3VyY2VPZmZzZXQgPSAwLCB0b3RhbENvcGllZE51bSA9IDA7XG4gICAgICAgIHdoaWxlICh0b3RhbENvcGllZE51bSA8IHRoaXMuX3NpemUpIHtcbiAgICAgICAgICAgIGNvbnN0IHNvdXJjZSA9IGJ1ZmZlcnNbaV07XG4gICAgICAgICAgICBjb25zdCB0YXJnZXQgPSB0aGlzLmJ1ZmZlcnNbal07XG4gICAgICAgICAgICBjb25zdCBjb3BpZWROdW0gPSBzb3VyY2UuY29weSh0YXJnZXQsIHRhcmdldE9mZnNldCwgc291cmNlT2Zmc2V0KTtcbiAgICAgICAgICAgIHRvdGFsQ29waWVkTnVtICs9IGNvcGllZE51bTtcbiAgICAgICAgICAgIHNvdXJjZU9mZnNldCArPSBjb3BpZWROdW07XG4gICAgICAgICAgICB0YXJnZXRPZmZzZXQgKz0gY29waWVkTnVtO1xuICAgICAgICAgICAgaWYgKHNvdXJjZU9mZnNldCA9PT0gc291cmNlLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgICAgICBzb3VyY2VPZmZzZXQgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRhcmdldE9mZnNldCA9PT0gdGFyZ2V0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGorKztcbiAgICAgICAgICAgICAgICB0YXJnZXRPZmZzZXQgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIGNsZWFyIGNvcGllZCBmcm9tIHNvdXJjZSBidWZmZXJzXG4gICAgICAgIGJ1ZmZlcnMuc3BsaWNlKDAsIGkpO1xuICAgICAgICBpZiAoYnVmZmVycy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBidWZmZXJzWzBdID0gYnVmZmVyc1swXS5zbGljZShzb3VyY2VPZmZzZXQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgcmVhZGFibGUgc3RyZWFtIGFzc2VtYmxlZCBmcm9tIGFsbCB0aGUgZGF0YSBpbiB0aGUgaW50ZXJuYWwgYnVmZmVycy5cbiAgICAgKlxuICAgICAqL1xuICAgIGdldFJlYWRhYmxlU3RyZWFtKCkge1xuICAgICAgICByZXR1cm4gbmV3IEJ1ZmZlcnNTdHJlYW0odGhpcy5idWZmZXJzLCB0aGlzLnNpemUpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVBvb2xlZEJ1ZmZlci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-common/src/PooledBuffer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-internal-avro/src/AvroConstants.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-internal-avro/src/AvroConstants.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AVRO_CODEC_KEY: () => (/* binding */ AVRO_CODEC_KEY),\n/* harmony export */   AVRO_INIT_BYTES: () => (/* binding */ AVRO_INIT_BYTES),\n/* harmony export */   AVRO_SCHEMA_KEY: () => (/* binding */ AVRO_SCHEMA_KEY),\n/* harmony export */   AVRO_SYNC_MARKER_SIZE: () => (/* binding */ AVRO_SYNC_MARKER_SIZE)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nconst AVRO_SYNC_MARKER_SIZE = 16;\nconst AVRO_INIT_BYTES = new Uint8Array([79, 98, 106, 1]);\nconst AVRO_CODEC_KEY = \"avro.codec\";\nconst AVRO_SCHEMA_KEY = \"avro.schema\";\n//# sourceMappingURL=AvroConstants.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWludGVybmFsLWF2cm8vc3JjL0F2cm9Db25zdGFudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDTztBQUNBO0FBQ0E7QUFDQTtBQUNQIiwic291cmNlcyI6WyIvVXNlcnMvdmljdG9yd2lsc29uL0Rlc2t0b3AvcHJvamVjdHMvRVpWaXovbm9kZV9tb2R1bGVzL0BhenVyZS9zdG9yYWdlLWJsb2IvZGlzdC1lc20vc3RvcmFnZS1pbnRlcm5hbC1hdnJvL3NyYy9BdnJvQ29uc3RhbnRzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuZXhwb3J0IGNvbnN0IEFWUk9fU1lOQ19NQVJLRVJfU0laRSA9IDE2O1xuZXhwb3J0IGNvbnN0IEFWUk9fSU5JVF9CWVRFUyA9IG5ldyBVaW50OEFycmF5KFs3OSwgOTgsIDEwNiwgMV0pO1xuZXhwb3J0IGNvbnN0IEFWUk9fQ09ERUNfS0VZID0gXCJhdnJvLmNvZGVjXCI7XG5leHBvcnQgY29uc3QgQVZST19TQ0hFTUFfS0VZID0gXCJhdnJvLnNjaGVtYVwiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXZyb0NvbnN0YW50cy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-internal-avro/src/AvroConstants.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-internal-avro/src/AvroParser.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-internal-avro/src/AvroParser.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AvroParser: () => (/* binding */ AvroParser),\n/* harmony export */   AvroType: () => (/* binding */ AvroType)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nclass AvroParser {\n    /**\n     * Reads a fixed number of bytes from the stream.\n     *\n     * @param stream -\n     * @param length -\n     * @param options -\n     */\n    static async readFixedBytes(stream, length, options = {}) {\n        const bytes = await stream.read(length, { abortSignal: options.abortSignal });\n        if (bytes.length !== length) {\n            throw new Error(\"Hit stream end.\");\n        }\n        return bytes;\n    }\n    /**\n     * Reads a single byte from the stream.\n     *\n     * @param stream -\n     * @param options -\n     */\n    static async readByte(stream, options = {}) {\n        const buf = await AvroParser.readFixedBytes(stream, 1, options);\n        return buf[0];\n    }\n    // int and long are stored in variable-length zig-zag coding.\n    // variable-length: https://lucene.apache.org/core/3_5_0/fileformats.html#VInt\n    // zig-zag: https://developers.google.com/protocol-buffers/docs/encoding?csw=1#types\n    static async readZigZagLong(stream, options = {}) {\n        let zigZagEncoded = 0;\n        let significanceInBit = 0;\n        let byte, haveMoreByte, significanceInFloat;\n        do {\n            byte = await AvroParser.readByte(stream, options);\n            haveMoreByte = byte & 0x80;\n            zigZagEncoded |= (byte & 0x7f) << significanceInBit;\n            significanceInBit += 7;\n        } while (haveMoreByte && significanceInBit < 28); // bitwise operation only works for 32-bit integers\n        if (haveMoreByte) {\n            // Switch to float arithmetic\n            // eslint-disable-next-line no-self-assign\n            zigZagEncoded = zigZagEncoded;\n            significanceInFloat = 268435456; // 2 ** 28.\n            do {\n                byte = await AvroParser.readByte(stream, options);\n                zigZagEncoded += (byte & 0x7f) * significanceInFloat;\n                significanceInFloat *= 128; // 2 ** 7\n            } while (byte & 0x80);\n            const res = (zigZagEncoded % 2 ? -(zigZagEncoded + 1) : zigZagEncoded) / 2;\n            if (res < Number.MIN_SAFE_INTEGER || res > Number.MAX_SAFE_INTEGER) {\n                throw new Error(\"Integer overflow.\");\n            }\n            return res;\n        }\n        return (zigZagEncoded >> 1) ^ -(zigZagEncoded & 1);\n    }\n    static async readLong(stream, options = {}) {\n        return AvroParser.readZigZagLong(stream, options);\n    }\n    static async readInt(stream, options = {}) {\n        return AvroParser.readZigZagLong(stream, options);\n    }\n    static async readNull() {\n        return null;\n    }\n    static async readBoolean(stream, options = {}) {\n        const b = await AvroParser.readByte(stream, options);\n        if (b === 1) {\n            return true;\n        }\n        else if (b === 0) {\n            return false;\n        }\n        else {\n            throw new Error(\"Byte was not a boolean.\");\n        }\n    }\n    static async readFloat(stream, options = {}) {\n        const u8arr = await AvroParser.readFixedBytes(stream, 4, options);\n        const view = new DataView(u8arr.buffer, u8arr.byteOffset, u8arr.byteLength);\n        return view.getFloat32(0, true); // littleEndian = true\n    }\n    static async readDouble(stream, options = {}) {\n        const u8arr = await AvroParser.readFixedBytes(stream, 8, options);\n        const view = new DataView(u8arr.buffer, u8arr.byteOffset, u8arr.byteLength);\n        return view.getFloat64(0, true); // littleEndian = true\n    }\n    static async readBytes(stream, options = {}) {\n        const size = await AvroParser.readLong(stream, options);\n        if (size < 0) {\n            throw new Error(\"Bytes size was negative.\");\n        }\n        return stream.read(size, { abortSignal: options.abortSignal });\n    }\n    static async readString(stream, options = {}) {\n        const u8arr = await AvroParser.readBytes(stream, options);\n        const utf8decoder = new TextDecoder();\n        return utf8decoder.decode(u8arr);\n    }\n    static async readMapPair(stream, readItemMethod, options = {}) {\n        const key = await AvroParser.readString(stream, options);\n        // FUTURE: this won't work with readFixed (currently not supported) which needs a length as the parameter.\n        const value = await readItemMethod(stream, options);\n        return { key, value };\n    }\n    static async readMap(stream, readItemMethod, options = {}) {\n        const readPairMethod = (s, opts = {}) => {\n            return AvroParser.readMapPair(s, readItemMethod, opts);\n        };\n        const pairs = await AvroParser.readArray(stream, readPairMethod, options);\n        const dict = {};\n        for (const pair of pairs) {\n            dict[pair.key] = pair.value;\n        }\n        return dict;\n    }\n    static async readArray(stream, readItemMethod, options = {}) {\n        const items = [];\n        for (let count = await AvroParser.readLong(stream, options); count !== 0; count = await AvroParser.readLong(stream, options)) {\n            if (count < 0) {\n                // Ignore block sizes\n                await AvroParser.readLong(stream, options);\n                count = -count;\n            }\n            while (count--) {\n                const item = await readItemMethod(stream, options);\n                items.push(item);\n            }\n        }\n        return items;\n    }\n}\nvar AvroComplex;\n(function (AvroComplex) {\n    AvroComplex[\"RECORD\"] = \"record\";\n    AvroComplex[\"ENUM\"] = \"enum\";\n    AvroComplex[\"ARRAY\"] = \"array\";\n    AvroComplex[\"MAP\"] = \"map\";\n    AvroComplex[\"UNION\"] = \"union\";\n    AvroComplex[\"FIXED\"] = \"fixed\";\n})(AvroComplex || (AvroComplex = {}));\nvar AvroPrimitive;\n(function (AvroPrimitive) {\n    AvroPrimitive[\"NULL\"] = \"null\";\n    AvroPrimitive[\"BOOLEAN\"] = \"boolean\";\n    AvroPrimitive[\"INT\"] = \"int\";\n    AvroPrimitive[\"LONG\"] = \"long\";\n    AvroPrimitive[\"FLOAT\"] = \"float\";\n    AvroPrimitive[\"DOUBLE\"] = \"double\";\n    AvroPrimitive[\"BYTES\"] = \"bytes\";\n    AvroPrimitive[\"STRING\"] = \"string\";\n})(AvroPrimitive || (AvroPrimitive = {}));\nclass AvroType {\n    /**\n     * Determines the AvroType from the Avro Schema.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-wrapper-object-types\n    static fromSchema(schema) {\n        if (typeof schema === \"string\") {\n            return AvroType.fromStringSchema(schema);\n        }\n        else if (Array.isArray(schema)) {\n            return AvroType.fromArraySchema(schema);\n        }\n        else {\n            return AvroType.fromObjectSchema(schema);\n        }\n    }\n    static fromStringSchema(schema) {\n        switch (schema) {\n            case AvroPrimitive.NULL:\n            case AvroPrimitive.BOOLEAN:\n            case AvroPrimitive.INT:\n            case AvroPrimitive.LONG:\n            case AvroPrimitive.FLOAT:\n            case AvroPrimitive.DOUBLE:\n            case AvroPrimitive.BYTES:\n            case AvroPrimitive.STRING:\n                return new AvroPrimitiveType(schema);\n            default:\n                throw new Error(`Unexpected Avro type ${schema}`);\n        }\n    }\n    static fromArraySchema(schema) {\n        return new AvroUnionType(schema.map(AvroType.fromSchema));\n    }\n    static fromObjectSchema(schema) {\n        const type = schema.type;\n        // Primitives can be defined as strings or objects\n        try {\n            return AvroType.fromStringSchema(type);\n        }\n        catch (_a) {\n            // no-op\n        }\n        switch (type) {\n            case AvroComplex.RECORD:\n                if (schema.aliases) {\n                    throw new Error(`aliases currently is not supported, schema: ${schema}`);\n                }\n                if (!schema.name) {\n                    throw new Error(`Required attribute 'name' doesn't exist on schema: ${schema}`);\n                }\n                // eslint-disable-next-line no-case-declarations\n                const fields = {};\n                if (!schema.fields) {\n                    throw new Error(`Required attribute 'fields' doesn't exist on schema: ${schema}`);\n                }\n                for (const field of schema.fields) {\n                    fields[field.name] = AvroType.fromSchema(field.type);\n                }\n                return new AvroRecordType(fields, schema.name);\n            case AvroComplex.ENUM:\n                if (schema.aliases) {\n                    throw new Error(`aliases currently is not supported, schema: ${schema}`);\n                }\n                if (!schema.symbols) {\n                    throw new Error(`Required attribute 'symbols' doesn't exist on schema: ${schema}`);\n                }\n                return new AvroEnumType(schema.symbols);\n            case AvroComplex.MAP:\n                if (!schema.values) {\n                    throw new Error(`Required attribute 'values' doesn't exist on schema: ${schema}`);\n                }\n                return new AvroMapType(AvroType.fromSchema(schema.values));\n            case AvroComplex.ARRAY: // Unused today\n            case AvroComplex.FIXED: // Unused today\n            default:\n                throw new Error(`Unexpected Avro type ${type} in ${schema}`);\n        }\n    }\n}\nclass AvroPrimitiveType extends AvroType {\n    constructor(primitive) {\n        super();\n        this._primitive = primitive;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-wrapper-object-types\n    read(stream, options = {}) {\n        switch (this._primitive) {\n            case AvroPrimitive.NULL:\n                return AvroParser.readNull();\n            case AvroPrimitive.BOOLEAN:\n                return AvroParser.readBoolean(stream, options);\n            case AvroPrimitive.INT:\n                return AvroParser.readInt(stream, options);\n            case AvroPrimitive.LONG:\n                return AvroParser.readLong(stream, options);\n            case AvroPrimitive.FLOAT:\n                return AvroParser.readFloat(stream, options);\n            case AvroPrimitive.DOUBLE:\n                return AvroParser.readDouble(stream, options);\n            case AvroPrimitive.BYTES:\n                return AvroParser.readBytes(stream, options);\n            case AvroPrimitive.STRING:\n                return AvroParser.readString(stream, options);\n            default:\n                throw new Error(\"Unknown Avro Primitive\");\n        }\n    }\n}\nclass AvroEnumType extends AvroType {\n    constructor(symbols) {\n        super();\n        this._symbols = symbols;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-wrapper-object-types\n    async read(stream, options = {}) {\n        const value = await AvroParser.readInt(stream, options);\n        return this._symbols[value];\n    }\n}\nclass AvroUnionType extends AvroType {\n    constructor(types) {\n        super();\n        this._types = types;\n    }\n    async read(stream, options = {}) {\n        const typeIndex = await AvroParser.readInt(stream, options);\n        return this._types[typeIndex].read(stream, options);\n    }\n}\nclass AvroMapType extends AvroType {\n    constructor(itemType) {\n        super();\n        this._itemType = itemType;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-wrapper-object-types\n    read(stream, options = {}) {\n        const readItemMethod = (s, opts) => {\n            return this._itemType.read(s, opts);\n        };\n        return AvroParser.readMap(stream, readItemMethod, options);\n    }\n}\nclass AvroRecordType extends AvroType {\n    constructor(fields, name) {\n        super();\n        this._fields = fields;\n        this._name = name;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-wrapper-object-types\n    async read(stream, options = {}) {\n        // eslint-disable-next-line @typescript-eslint/no-wrapper-object-types\n        const record = {};\n        record[\"$schema\"] = this._name;\n        for (const key in this._fields) {\n            if (Object.prototype.hasOwnProperty.call(this._fields, key)) {\n                record[key] = await this._fields[key].read(stream, options);\n            }\n        }\n        return record;\n    }\n}\n//# sourceMappingURL=AvroParser.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-internal-avro/src/AvroParser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-internal-avro/src/AvroReadable.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-internal-avro/src/AvroReadable.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AvroReadable: () => (/* binding */ AvroReadable)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nclass AvroReadable {\n}\n//# sourceMappingURL=AvroReadable.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWludGVybmFsLWF2cm8vc3JjL0F2cm9SZWFkYWJsZS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNPO0FBQ1A7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3ZpY3RvcndpbHNvbi9EZXNrdG9wL3Byb2plY3RzL0VaVml6L25vZGVfbW9kdWxlcy9AYXp1cmUvc3RvcmFnZS1ibG9iL2Rpc3QtZXNtL3N0b3JhZ2UtaW50ZXJuYWwtYXZyby9zcmMvQXZyb1JlYWRhYmxlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuZXhwb3J0IGNsYXNzIEF2cm9SZWFkYWJsZSB7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1BdnJvUmVhZGFibGUuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-internal-avro/src/AvroReadable.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-internal-avro/src/AvroReadableFromStream.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-internal-avro/src/AvroReadableFromStream.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AvroReadableFromStream: () => (/* binding */ AvroReadableFromStream)\n/* harmony export */ });\n/* harmony import */ var _AvroReadable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AvroReadable */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-internal-avro/src/AvroReadable.js\");\n/* harmony import */ var _azure_abort_controller__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/abort-controller */ \"(rsc)/./node_modules/@azure/abort-controller/dist/esm/index.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\nconst ABORT_ERROR = new _azure_abort_controller__WEBPACK_IMPORTED_MODULE_0__.AbortError(\"Reading from the avro stream was aborted.\");\nclass AvroReadableFromStream extends _AvroReadable__WEBPACK_IMPORTED_MODULE_1__.AvroReadable {\n    toUint8Array(data) {\n        if (typeof data === \"string\") {\n            return Buffer.from(data);\n        }\n        return data;\n    }\n    constructor(readable) {\n        super();\n        this._readable = readable;\n        this._position = 0;\n    }\n    get position() {\n        return this._position;\n    }\n    async read(size, options = {}) {\n        var _a;\n        if ((_a = options.abortSignal) === null || _a === void 0 ? void 0 : _a.aborted) {\n            throw ABORT_ERROR;\n        }\n        if (size < 0) {\n            throw new Error(`size parameter should be positive: ${size}`);\n        }\n        if (size === 0) {\n            return new Uint8Array();\n        }\n        if (!this._readable.readable) {\n            throw new Error(\"Stream no longer readable.\");\n        }\n        // See if there is already enough data.\n        const chunk = this._readable.read(size);\n        if (chunk) {\n            this._position += chunk.length;\n            // chunk.length maybe less than desired size if the stream ends.\n            return this.toUint8Array(chunk);\n        }\n        else {\n            // register callback to wait for enough data to read\n            return new Promise((resolve, reject) => {\n                /* eslint-disable @typescript-eslint/no-use-before-define */\n                const cleanUp = () => {\n                    this._readable.removeListener(\"readable\", readableCallback);\n                    this._readable.removeListener(\"error\", rejectCallback);\n                    this._readable.removeListener(\"end\", rejectCallback);\n                    this._readable.removeListener(\"close\", rejectCallback);\n                    if (options.abortSignal) {\n                        options.abortSignal.removeEventListener(\"abort\", abortHandler);\n                    }\n                };\n                const readableCallback = () => {\n                    const callbackChunk = this._readable.read(size);\n                    if (callbackChunk) {\n                        this._position += callbackChunk.length;\n                        cleanUp();\n                        // callbackChunk.length maybe less than desired size if the stream ends.\n                        resolve(this.toUint8Array(callbackChunk));\n                    }\n                };\n                const rejectCallback = () => {\n                    cleanUp();\n                    reject();\n                };\n                const abortHandler = () => {\n                    cleanUp();\n                    reject(ABORT_ERROR);\n                };\n                this._readable.on(\"readable\", readableCallback);\n                this._readable.once(\"error\", rejectCallback);\n                this._readable.once(\"end\", rejectCallback);\n                this._readable.once(\"close\", rejectCallback);\n                if (options.abortSignal) {\n                    options.abortSignal.addEventListener(\"abort\", abortHandler);\n                }\n                /* eslint-enable @typescript-eslint/no-use-before-define */\n            });\n        }\n    }\n}\n//# sourceMappingURL=AvroReadableFromStream.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWludGVybmFsLWF2cm8vc3JjL0F2cm9SZWFkYWJsZUZyb21TdHJlYW0uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUM4QztBQUNPO0FBQ3JELHdCQUF3QiwrREFBVTtBQUMzQixxQ0FBcUMsdURBQVk7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0VBQWtFLEtBQUs7QUFDdkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWN0b3J3aWxzb24vRGVza3RvcC9wcm9qZWN0cy9FWlZpei9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWludGVybmFsLWF2cm8vc3JjL0F2cm9SZWFkYWJsZUZyb21TdHJlYW0uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5pbXBvcnQgeyBBdnJvUmVhZGFibGUgfSBmcm9tIFwiLi9BdnJvUmVhZGFibGVcIjtcbmltcG9ydCB7IEFib3J0RXJyb3IgfSBmcm9tIFwiQGF6dXJlL2Fib3J0LWNvbnRyb2xsZXJcIjtcbmNvbnN0IEFCT1JUX0VSUk9SID0gbmV3IEFib3J0RXJyb3IoXCJSZWFkaW5nIGZyb20gdGhlIGF2cm8gc3RyZWFtIHdhcyBhYm9ydGVkLlwiKTtcbmV4cG9ydCBjbGFzcyBBdnJvUmVhZGFibGVGcm9tU3RyZWFtIGV4dGVuZHMgQXZyb1JlYWRhYmxlIHtcbiAgICB0b1VpbnQ4QXJyYXkoZGF0YSkge1xuICAgICAgICBpZiAodHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBCdWZmZXIuZnJvbShkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IocmVhZGFibGUpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5fcmVhZGFibGUgPSByZWFkYWJsZTtcbiAgICAgICAgdGhpcy5fcG9zaXRpb24gPSAwO1xuICAgIH1cbiAgICBnZXQgcG9zaXRpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wb3NpdGlvbjtcbiAgICB9XG4gICAgYXN5bmMgcmVhZChzaXplLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAoKF9hID0gb3B0aW9ucy5hYm9ydFNpZ25hbCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmFib3J0ZWQpIHtcbiAgICAgICAgICAgIHRocm93IEFCT1JUX0VSUk9SO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzaXplIDwgMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBzaXplIHBhcmFtZXRlciBzaG91bGQgYmUgcG9zaXRpdmU6ICR7c2l6ZX1gKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLl9yZWFkYWJsZS5yZWFkYWJsZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU3RyZWFtIG5vIGxvbmdlciByZWFkYWJsZS5cIik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU2VlIGlmIHRoZXJlIGlzIGFscmVhZHkgZW5vdWdoIGRhdGEuXG4gICAgICAgIGNvbnN0IGNodW5rID0gdGhpcy5fcmVhZGFibGUucmVhZChzaXplKTtcbiAgICAgICAgaWYgKGNodW5rKSB7XG4gICAgICAgICAgICB0aGlzLl9wb3NpdGlvbiArPSBjaHVuay5sZW5ndGg7XG4gICAgICAgICAgICAvLyBjaHVuay5sZW5ndGggbWF5YmUgbGVzcyB0aGFuIGRlc2lyZWQgc2l6ZSBpZiB0aGUgc3RyZWFtIGVuZHMuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy50b1VpbnQ4QXJyYXkoY2h1bmspO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gcmVnaXN0ZXIgY2FsbGJhY2sgdG8gd2FpdCBmb3IgZW5vdWdoIGRhdGEgdG8gcmVhZFxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdXNlLWJlZm9yZS1kZWZpbmUgKi9cbiAgICAgICAgICAgICAgICBjb25zdCBjbGVhblVwID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZWFkYWJsZS5yZW1vdmVMaXN0ZW5lcihcInJlYWRhYmxlXCIsIHJlYWRhYmxlQ2FsbGJhY2spO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZWFkYWJsZS5yZW1vdmVMaXN0ZW5lcihcImVycm9yXCIsIHJlamVjdENhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVhZGFibGUucmVtb3ZlTGlzdGVuZXIoXCJlbmRcIiwgcmVqZWN0Q2FsbGJhY2spO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZWFkYWJsZS5yZW1vdmVMaXN0ZW5lcihcImNsb3NlXCIsIHJlamVjdENhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuYWJvcnRTaWduYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuYWJvcnRTaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIGFib3J0SGFuZGxlcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlYWRhYmxlQ2FsbGJhY2sgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNhbGxiYWNrQ2h1bmsgPSB0aGlzLl9yZWFkYWJsZS5yZWFkKHNpemUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2tDaHVuaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcG9zaXRpb24gKz0gY2FsbGJhY2tDaHVuay5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGVhblVwKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjYWxsYmFja0NodW5rLmxlbmd0aCBtYXliZSBsZXNzIHRoYW4gZGVzaXJlZCBzaXplIGlmIHRoZSBzdHJlYW0gZW5kcy5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUodGhpcy50b1VpbnQ4QXJyYXkoY2FsbGJhY2tDaHVuaykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBjb25zdCByZWplY3RDYWxsYmFjayA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY2xlYW5VcCgpO1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGNvbnN0IGFib3J0SGFuZGxlciA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY2xlYW5VcCgpO1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoQUJPUlRfRVJST1IpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVhZGFibGUub24oXCJyZWFkYWJsZVwiLCByZWFkYWJsZUNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZWFkYWJsZS5vbmNlKFwiZXJyb3JcIiwgcmVqZWN0Q2FsbGJhY2spO1xuICAgICAgICAgICAgICAgIHRoaXMuX3JlYWRhYmxlLm9uY2UoXCJlbmRcIiwgcmVqZWN0Q2FsbGJhY2spO1xuICAgICAgICAgICAgICAgIHRoaXMuX3JlYWRhYmxlLm9uY2UoXCJjbG9zZVwiLCByZWplY3RDYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuYWJvcnRTaWduYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5hYm9ydFNpZ25hbC5hZGRFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgYWJvcnRIYW5kbGVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLyogZXNsaW50LWVuYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdXNlLWJlZm9yZS1kZWZpbmUgKi9cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXZyb1JlYWRhYmxlRnJvbVN0cmVhbS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-internal-avro/src/AvroReadableFromStream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-internal-avro/src/AvroReader.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-internal-avro/src/AvroReader.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AvroReader: () => (/* binding */ AvroReader)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _AvroConstants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AvroConstants */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-internal-avro/src/AvroConstants.js\");\n/* harmony import */ var _AvroParser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AvroParser */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-internal-avro/src/AvroParser.js\");\n/* harmony import */ var _utils_utils_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/utils.common */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-internal-avro/src/utils/utils.common.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n// TODO: Do a review of non-interfaces\n/* eslint-disable @azure/azure-sdk/ts-use-interface-parameters */\n\n\n\nclass AvroReader {\n    get blockOffset() {\n        return this._blockOffset;\n    }\n    get objectIndex() {\n        return this._objectIndex;\n    }\n    constructor(dataStream, headerStream, currentBlockOffset, indexWithinCurrentBlock) {\n        this._dataStream = dataStream;\n        this._headerStream = headerStream || dataStream;\n        this._initialized = false;\n        this._blockOffset = currentBlockOffset || 0;\n        this._objectIndex = indexWithinCurrentBlock || 0;\n        this._initialBlockOffset = currentBlockOffset || 0;\n    }\n    async initialize(options = {}) {\n        const header = await _AvroParser__WEBPACK_IMPORTED_MODULE_0__.AvroParser.readFixedBytes(this._headerStream, _AvroConstants__WEBPACK_IMPORTED_MODULE_1__.AVRO_INIT_BYTES.length, {\n            abortSignal: options.abortSignal,\n        });\n        if (!(0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_2__.arraysEqual)(header, _AvroConstants__WEBPACK_IMPORTED_MODULE_1__.AVRO_INIT_BYTES)) {\n            throw new Error(\"Stream is not an Avro file.\");\n        }\n        // File metadata is written as if defined by the following map schema:\n        // { \"type\": \"map\", \"values\": \"bytes\"}\n        this._metadata = await _AvroParser__WEBPACK_IMPORTED_MODULE_0__.AvroParser.readMap(this._headerStream, _AvroParser__WEBPACK_IMPORTED_MODULE_0__.AvroParser.readString, {\n            abortSignal: options.abortSignal,\n        });\n        // Validate codec\n        const codec = this._metadata[_AvroConstants__WEBPACK_IMPORTED_MODULE_1__.AVRO_CODEC_KEY];\n        if (!(codec === undefined || codec === null || codec === \"null\")) {\n            throw new Error(\"Codecs are not supported\");\n        }\n        // The 16-byte, randomly-generated sync marker for this file.\n        this._syncMarker = await _AvroParser__WEBPACK_IMPORTED_MODULE_0__.AvroParser.readFixedBytes(this._headerStream, _AvroConstants__WEBPACK_IMPORTED_MODULE_1__.AVRO_SYNC_MARKER_SIZE, {\n            abortSignal: options.abortSignal,\n        });\n        // Parse the schema\n        const schema = JSON.parse(this._metadata[_AvroConstants__WEBPACK_IMPORTED_MODULE_1__.AVRO_SCHEMA_KEY]);\n        this._itemType = _AvroParser__WEBPACK_IMPORTED_MODULE_0__.AvroType.fromSchema(schema);\n        if (this._blockOffset === 0) {\n            this._blockOffset = this._initialBlockOffset + this._dataStream.position;\n        }\n        this._itemsRemainingInBlock = await _AvroParser__WEBPACK_IMPORTED_MODULE_0__.AvroParser.readLong(this._dataStream, {\n            abortSignal: options.abortSignal,\n        });\n        // skip block length\n        await _AvroParser__WEBPACK_IMPORTED_MODULE_0__.AvroParser.readLong(this._dataStream, { abortSignal: options.abortSignal });\n        this._initialized = true;\n        if (this._objectIndex && this._objectIndex > 0) {\n            for (let i = 0; i < this._objectIndex; i++) {\n                await this._itemType.read(this._dataStream, { abortSignal: options.abortSignal });\n                this._itemsRemainingInBlock--;\n            }\n        }\n    }\n    hasNext() {\n        return !this._initialized || this._itemsRemainingInBlock > 0;\n    }\n    parseObjects() {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__asyncGenerator)(this, arguments, function* parseObjects_1(options = {}) {\n            if (!this._initialized) {\n                yield (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__await)(this.initialize(options));\n            }\n            while (this.hasNext()) {\n                const result = yield (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__await)(this._itemType.read(this._dataStream, {\n                    abortSignal: options.abortSignal,\n                }));\n                this._itemsRemainingInBlock--;\n                this._objectIndex++;\n                if (this._itemsRemainingInBlock === 0) {\n                    const marker = yield (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__await)(_AvroParser__WEBPACK_IMPORTED_MODULE_0__.AvroParser.readFixedBytes(this._dataStream, _AvroConstants__WEBPACK_IMPORTED_MODULE_1__.AVRO_SYNC_MARKER_SIZE, {\n                        abortSignal: options.abortSignal,\n                    }));\n                    this._blockOffset = this._initialBlockOffset + this._dataStream.position;\n                    this._objectIndex = 0;\n                    if (!(0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_2__.arraysEqual)(this._syncMarker, marker)) {\n                        throw new Error(\"Stream is not a valid Avro file.\");\n                    }\n                    try {\n                        this._itemsRemainingInBlock = yield (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__await)(_AvroParser__WEBPACK_IMPORTED_MODULE_0__.AvroParser.readLong(this._dataStream, {\n                            abortSignal: options.abortSignal,\n                        }));\n                    }\n                    catch (_a) {\n                        // We hit the end of the stream.\n                        this._itemsRemainingInBlock = 0;\n                    }\n                    if (this._itemsRemainingInBlock > 0) {\n                        // Ignore block size\n                        yield (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__await)(_AvroParser__WEBPACK_IMPORTED_MODULE_0__.AvroParser.readLong(this._dataStream, { abortSignal: options.abortSignal }));\n                    }\n                }\n                yield yield (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__await)(result);\n            }\n        });\n    }\n}\n//# sourceMappingURL=AvroReader.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-internal-avro/src/AvroReader.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-internal-avro/src/utils/utils.common.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-internal-avro/src/utils/utils.common.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   arraysEqual: () => (/* binding */ arraysEqual)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nfunction arraysEqual(a, b) {\n    if (a === b)\n        return true;\n    if (a == null || b == null)\n        return false;\n    if (a.length !== b.length)\n        return false;\n    for (let i = 0; i < a.length; ++i) {\n        if (a[i] !== b[i])\n            return false;\n    }\n    return true;\n}\n//# sourceMappingURL=utils.common.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF6dXJlL3N0b3JhZ2UtYmxvYi9kaXN0LWVzbS9zdG9yYWdlLWludGVybmFsLWF2cm8vc3JjL3V0aWxzL3V0aWxzLmNvbW1vbi5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGNBQWM7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvdmljdG9yd2lsc29uL0Rlc2t0b3AvcHJvamVjdHMvRVpWaXovbm9kZV9tb2R1bGVzL0BhenVyZS9zdG9yYWdlLWJsb2IvZGlzdC1lc20vc3RvcmFnZS1pbnRlcm5hbC1hdnJvL3NyYy91dGlscy91dGlscy5jb21tb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5leHBvcnQgZnVuY3Rpb24gYXJyYXlzRXF1YWwoYSwgYikge1xuICAgIGlmIChhID09PSBiKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICBpZiAoYSA9PSBudWxsIHx8IGIgPT0gbnVsbClcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChhLmxlbmd0aCAhPT0gYi5sZW5ndGgpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGEubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgaWYgKGFbaV0gIT09IGJbaV0pXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbHMuY29tbW9uLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-internal-avro/src/utils/utils.common.js\n");

/***/ })

};
;